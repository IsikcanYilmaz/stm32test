cscope 15 $HOME/KODMOD/stm32test               0002538857
	@Drivers/CMSIS/DSP_Lib/Examples/arm_class_marks_example/ARM/arm_class_marks_example_f32.c

84 
	~"¨m_m©h.h
"

86 
	#USE_STATIC_INIT


	)

92 
	#TEST_LENGTH_SAMPLES
 (20*4)

	)

97 c⁄° 
Êﬂt32_t
 
	gã°M¨ks_f32
[
TEST_LENGTH_SAMPLES
] =

125 c⁄° 
Êﬂt32_t
 
	gã°Unôy_f32
[4] =

134 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

140 
	#NUMSTUDENTS
 20

	)

141 
	#NUMSUBJECTS
 4

	)

147 
uöt32_t
 
	gnumStudíts
 = 20;

148 
uöt32_t
 
	gnumSubje˘s
 = 4;

149 
Êﬂt32_t
 
	gmax_m¨ks
, 
	gmö_m¨ks
, 
	gmón
, 
	g°d
, 
	gv¨
;

150 
uöt32_t
 
	g°udít_num
;

156 
öt32_t
 
	$maö
()

159 #i‚de‡ 
USE_STATIC_INIT


161 
¨m_m©rix_ö°™˚_f32
 
§cA
;

162 
¨m_m©rix_ö°™˚_f32
 
§cB
;

163 
¨m_m©rix_ö°™˚_f32
 
d°C
;

166 
	`¨m_m©_öô_f32
(&
§cA
, 
numStudíts
, 
numSubje˘s
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
);

167 
	`¨m_m©_öô_f32
(&
§cB
, 
numSubje˘s
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
);

168 
	`¨m_m©_öô_f32
(&
d°C
, 
numStudíts
, 1, 
ã°Ouçut
);

173 
¨m_m©rix_ö°™˚_f32
 
§cA
 = {
NUMSTUDENTS
, 
NUMSUBJECTS
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
};

174 
¨m_m©rix_ö°™˚_f32
 
§cB
 = {
NUMSUBJECTS
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
};

175 
¨m_m©rix_ö°™˚_f32
 
d°C
 = {
NUMSTUDENTS
, 1, 
ã°Ouçut
};

183 
	`¨m_m©_mu…_f32
(&
§cA
, &
§cB
, &
d°C
);

188 
	`¨m_max_f32
(
ã°Ouçut
, 
numStudíts
, &
max_m¨ks
, &
°udít_num
);

193 
	`¨m_mö_f32
(
ã°Ouçut
, 
numStudíts
, &
mö_m¨ks
, &
°udít_num
);

198 
	`¨m_món_f32
(
ã°Ouçut
, 
numStudíts
, &
món
);

203 
	`¨m_°d_f32
(
ã°Ouçut
, 
numStudíts
, &
°d
);

208 
	`¨m_v¨_f32
(
ã°Ouçut
, 
numStudíts
, &
v¨
);

211 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_class_marks_example/GCC/arm_class_marks_example_f32.c

84 
	~"¨m_m©h.h
"

86 
	#USE_STATIC_INIT


	)

92 
	#TEST_LENGTH_SAMPLES
 (20*4)

	)

97 c⁄° 
Êﬂt32_t
 
	gã°M¨ks_f32
[
TEST_LENGTH_SAMPLES
] =

125 c⁄° 
Êﬂt32_t
 
	gã°Unôy_f32
[4] =

134 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

140 
	#NUMSTUDENTS
 20

	)

141 
	#NUMSUBJECTS
 4

	)

147 
uöt32_t
 
	gnumStudíts
 = 20;

148 
uöt32_t
 
	gnumSubje˘s
 = 4;

149 
Êﬂt32_t
 
	gmax_m¨ks
, 
	gmö_m¨ks
, 
	gmón
, 
	g°d
, 
	gv¨
;

150 
uöt32_t
 
	g°udít_num
;

156 
öt32_t
 
	$maö
()

159 #i‚de‡ 
USE_STATIC_INIT


161 
¨m_m©rix_ö°™˚_f32
 
§cA
;

162 
¨m_m©rix_ö°™˚_f32
 
§cB
;

163 
¨m_m©rix_ö°™˚_f32
 
d°C
;

166 
	`¨m_m©_öô_f32
(&
§cA
, 
numStudíts
, 
numSubje˘s
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
);

167 
	`¨m_m©_öô_f32
(&
§cB
, 
numSubje˘s
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
);

168 
	`¨m_m©_öô_f32
(&
d°C
, 
numStudíts
, 1, 
ã°Ouçut
);

173 
¨m_m©rix_ö°™˚_f32
 
§cA
 = {
NUMSTUDENTS
, 
NUMSUBJECTS
, (
Êﬂt32_t
 *)
ã°M¨ks_f32
};

174 
¨m_m©rix_ö°™˚_f32
 
§cB
 = {
NUMSUBJECTS
, 1, (
Êﬂt32_t
 *)
ã°Unôy_f32
};

175 
¨m_m©rix_ö°™˚_f32
 
d°C
 = {
NUMSTUDENTS
, 1, 
ã°Ouçut
};

183 
	`¨m_m©_mu…_f32
(&
§cA
, &
§cB
, &
d°C
);

188 
	`¨m_max_f32
(
ã°Ouçut
, 
numStudíts
, &
max_m¨ks
, &
°udít_num
);

193 
	`¨m_mö_f32
(
ã°Ouçut
, 
numStudíts
, &
mö_m¨ks
, &
°udít_num
);

198 
	`¨m_món_f32
(
ã°Ouçut
, 
numStudíts
, &
món
);

203 
	`¨m_°d_f32
(
ã°Ouçut
, 
numStudíts
, &
°d
);

208 
	`¨m_v¨_f32
(
ã°Ouçut
, 
numStudíts
, &
v¨
);

211 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/arm_convolution_example_f32.c

105 
	~"¨m_m©h.h
"

106 
	~"m©h_hñ≥r.h
"

111 
	#MAX_BLOCKSIZE
 128

	)

112 
	#DELTA
 (0.000001f)

	)

113 
	#SNR_THRESHOLD
 90

	)

118 
Êﬂt32_t
 
	gAk
[
MAX_BLOCKSIZE
];

119 
Êﬂt32_t
 
	gBk
[
MAX_BLOCKSIZE
];

120 
Êﬂt32_t
 
	gAxB
[
MAX_BLOCKSIZE
 * 2];

126 
Êﬂt32_t
 
	gã°I≈utA_f32
[64] =

142 
Êﬂt32_t
 
	gã°I≈utB_f32
[64] =

157 c⁄° 
	gã°RefOuçut_f32
[127] =

186 
uöt32_t
 
	g§cALí
 = 64;

187 
uöt32_t
 
	g§cBLí
 = 64;

188 
uöt32_t
 
	goutLí
;

189 
Êﬂt32_t
 
	g¢r
;

191 
öt32_t
 
	$maö
()

193 
¨m_°©us
 
°©us
;

194 
¨m_cf·_ødix4_ö°™˚_f32
 
cf·_ö°™˚
;

197 
¨m_cf·_ødix4_ö°™˚_f32
 *
cf·_ö°™˚_±r
 =

198 (
¨m_cf·_ødix4_ö°™˚_f32
*Ë&
cf·_ö°™˚
;

201 
outLí
 = 
§cALí
 + 
§cBLí
 - 1;

204 
	`¨m_fûl_f32
(0.0, 
Ak
, 
MAX_BLOCKSIZE
);

205 
	`¨m_fûl_f32
(0.0, 
Bk
, 
MAX_BLOCKSIZE
);

208 
	`¨m_c›y_f32
(
ã°I≈utA_f32
, 
Ak
, 
MAX_BLOCKSIZE
/2);

209 
	`¨m_c›y_f32
(
ã°I≈utB_f32
, 
Bk
, 
MAX_BLOCKSIZE
/2);

212 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 0, 1);

215 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Ak
);

217 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Bk
);

220 
	`¨m_cm∂x_mu…_cm∂x_f32
(
Ak
, 
Bk
, 
AxB
, 
MAX_BLOCKSIZE
/2);

223 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 1, 1);

227 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
AxB
);

230 
¢r
 = 
	`¨m_¢r_f32
((
Êﬂt32_t
 *)
ã°RefOuçut_f32
, 
AxB
, 
§cALí
 + 
§cBLí
 - 1);

234 if–
¢r
 > 
SNR_THRESHOLD
)

236 
°©us
 = 
ARM_MATH_SUCCESS
;

239 if–
°©us
 !
ARM_MATH_SUCCESS
)

245 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/arm_convolution_example_f32.c

105 
	~"¨m_m©h.h
"

106 
	~"m©h_hñ≥r.h
"

111 
	#MAX_BLOCKSIZE
 128

	)

112 
	#DELTA
 (0.000001f)

	)

113 
	#SNR_THRESHOLD
 90

	)

118 
Êﬂt32_t
 
	gAk
[
MAX_BLOCKSIZE
];

119 
Êﬂt32_t
 
	gBk
[
MAX_BLOCKSIZE
];

120 
Êﬂt32_t
 
	gAxB
[
MAX_BLOCKSIZE
 * 2];

126 
Êﬂt32_t
 
	gã°I≈utA_f32
[64] =

142 
Êﬂt32_t
 
	gã°I≈utB_f32
[64] =

157 c⁄° 
	gã°RefOuçut_f32
[127] =

186 
uöt32_t
 
	g§cALí
 = 64;

187 
uöt32_t
 
	g§cBLí
 = 64;

188 
uöt32_t
 
	goutLí
;

189 
Êﬂt32_t
 
	g¢r
;

191 
öt32_t
 
	$maö
()

193 
¨m_°©us
 
°©us
;

194 
¨m_cf·_ødix4_ö°™˚_f32
 
cf·_ö°™˚
;

197 
¨m_cf·_ødix4_ö°™˚_f32
 *
cf·_ö°™˚_±r
 =

198 (
¨m_cf·_ødix4_ö°™˚_f32
*Ë&
cf·_ö°™˚
;

201 
outLí
 = 
§cALí
 + 
§cBLí
 - 1;

204 
	`¨m_fûl_f32
(0.0, 
Ak
, 
MAX_BLOCKSIZE
);

205 
	`¨m_fûl_f32
(0.0, 
Bk
, 
MAX_BLOCKSIZE
);

208 
	`¨m_c›y_f32
(
ã°I≈utA_f32
, 
Ak
, 
MAX_BLOCKSIZE
/2);

209 
	`¨m_c›y_f32
(
ã°I≈utB_f32
, 
Bk
, 
MAX_BLOCKSIZE
/2);

212 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 0, 1);

215 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Ak
);

217 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
Bk
);

220 
	`¨m_cm∂x_mu…_cm∂x_f32
(
Ak
, 
Bk
, 
AxB
, 
MAX_BLOCKSIZE
/2);

223 
°©us
 = 
	`¨m_cf·_ødix4_öô_f32
(
cf·_ö°™˚_±r
, 64, 1, 1);

227 
	`¨m_cf·_ødix4_f32
(
cf·_ö°™˚_±r
, 
AxB
);

230 
¢r
 = 
	`¨m_¢r_f32
((
Êﬂt32_t
 *)
ã°RefOuçut_f32
, 
AxB
, 
§cALí
 + 
§cBLí
 - 1);

234 if–
¢r
 > 
SNR_THRESHOLD
)

236 
°©us
 = 
ARM_MATH_SUCCESS
;

239 if–
°©us
 !
ARM_MATH_SUCCESS
)

245 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_dotproduct_example/ARM/arm_dotproduct_example_f32.c

86 
	~<m©h.h
>

87 
	~"¨m_m©h.h
"

92 
	#MAX_BLOCKSIZE
 32

	)

93 
	#DELTA
 (0.000001f)

	)

102 
Êﬂt32_t
 
	g§cA_buf_f32
[
MAX_BLOCKSIZE
] =

120 
Êﬂt32_t
 
	g§cB_buf_f32
[
MAX_BLOCKSIZE
] =

136 
Êﬂt32_t
 
	gªfDŸProdOut
 = 5.9273644806352142;

141 
Êﬂt32_t
 
	gmu…Ouçut
[
MAX_BLOCKSIZE
];

142 
Êﬂt32_t
 
	gã°Ouçut
;

144 
¨m_°©us
 
	g°©us
;

146 
öt32_t
 
	$maö
()

148 
uöt32_t
 
i
;

149 
Êﬂt32_t
 
diff
;

152 
	`¨m_mu…_f32
(
§cA_buf_f32
, 
§cB_buf_f32
, 
mu…Ouçut
, 
MAX_BLOCKSIZE
);

156 
i
=0; i< 
MAX_BLOCKSIZE
; i++)

158 
	`¨m_add_f32
(&
ã°Ouçut
, &
mu…Ouçut
[
i
], &testOutput, 1);

162 
diff
 = 
	`Ábsf
(
ªfDŸProdOut
 - 
ã°Ouçut
);

165 if(
diff
 > 
DELTA
)

167 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

170 if–
°©us
 =
ARM_MATH_TEST_FAILURE
)

176 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_dotproduct_example/GCC/arm_dotproduct_example_f32.c

86 
	~<m©h.h
>

87 
	~"¨m_m©h.h
"

92 
	#MAX_BLOCKSIZE
 32

	)

93 
	#DELTA
 (0.000001f)

	)

102 
Êﬂt32_t
 
	g§cA_buf_f32
[
MAX_BLOCKSIZE
] =

120 
Êﬂt32_t
 
	g§cB_buf_f32
[
MAX_BLOCKSIZE
] =

136 
Êﬂt32_t
 
	gªfDŸProdOut
 = 5.9273644806352142;

141 
Êﬂt32_t
 
	gmu…Ouçut
[
MAX_BLOCKSIZE
];

142 
Êﬂt32_t
 
	gã°Ouçut
;

144 
¨m_°©us
 
	g°©us
;

146 
öt32_t
 
	$maö
()

148 
uöt32_t
 
i
;

149 
Êﬂt32_t
 
diff
;

152 
	`¨m_mu…_f32
(
§cA_buf_f32
, 
§cB_buf_f32
, 
mu…Ouçut
, 
MAX_BLOCKSIZE
);

156 
i
=0; i< 
MAX_BLOCKSIZE
; i++)

158 
	`¨m_add_f32
(&
ã°Ouçut
, &
mu…Ouçut
[
i
], &testOutput, 1);

162 
diff
 = 
	`Ábsf
(
ªfDŸProdOut
 - 
ã°Ouçut
);

165 if(
diff
 > 
DELTA
)

167 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

170 if–
°©us
 =
ARM_MATH_TEST_FAILURE
)

176 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_data.c

41 
	~"¨m_m©h.h
"

47 
Êﬂt32_t
 
	gã°I≈ut_f32_10khz
[2048] =

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_example_f32.c

97 
	~"¨m_m©h.h
"

98 
	~"¨m_c⁄°_°ru˘s.h
"

100 
	#TEST_LENGTH_SAMPLES
 2048

	)

105 
Êﬂt32_t
 
ã°I≈ut_f32_10khz
[
TEST_LENGTH_SAMPLES
];

106 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
/2];

111 
uöt32_t
 
	gf·Size
 = 1024;

112 
uöt32_t
 
	gif·Fœg
 = 0;

113 
uöt32_t
 
	gdoBôRevî£
 = 1;

116 
uöt32_t
 
	gªfIndex
 = 213, 
	gã°Index
 = 0;

122 
öt32_t
 
	$maö
()

125 
¨m_°©us
 
°©us
;

126 
Êﬂt32_t
 
maxVÆue
;

128 
°©us
 = 
ARM_MATH_SUCCESS
;

131 
	`¨m_cf·_f32
(&
¨m_cf·_sR_f32_Àn1024
, 
ã°I≈ut_f32_10khz
, 
if·Fœg
, 
doBôRevî£
);

135 
	`¨m_cm∂x_mag_f32
(
ã°I≈ut_f32_10khz
, 
ã°Ouçut
, 
f·Size
);

138 
	`¨m_max_f32
(
ã°Ouçut
, 
f·Size
, &
maxVÆue
, &
ã°Index
);

140 if(
ã°Index
 !
ªfIndex
)

142 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

150 if–
°©us
 !
ARM_MATH_SUCCESS
)

156 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_data.c

41 
	~"¨m_m©h.h
"

47 
Êﬂt32_t
 
	gã°I≈ut_f32_10khz
[2048] =

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_example_f32.c

97 
	~"¨m_m©h.h
"

98 
	~"¨m_c⁄°_°ru˘s.h
"

100 
	#TEST_LENGTH_SAMPLES
 2048

	)

105 
Êﬂt32_t
 
ã°I≈ut_f32_10khz
[
TEST_LENGTH_SAMPLES
];

106 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
/2];

111 
uöt32_t
 
	gf·Size
 = 1024;

112 
uöt32_t
 
	gif·Fœg
 = 0;

113 
uöt32_t
 
	gdoBôRevî£
 = 1;

116 
uöt32_t
 
	gªfIndex
 = 213, 
	gã°Index
 = 0;

122 
öt32_t
 
	$maö
()

125 
¨m_°©us
 
°©us
;

126 
Êﬂt32_t
 
maxVÆue
;

128 
°©us
 = 
ARM_MATH_SUCCESS
;

131 
	`¨m_cf·_f32
(&
¨m_cf·_sR_f32_Àn1024
, 
ã°I≈ut_f32_10khz
, 
if·Fœg
, 
doBôRevî£
);

135 
	`¨m_cm∂x_mag_f32
(
ã°I≈ut_f32_10khz
, 
ã°Ouçut
, 
f·Size
);

138 
	`¨m_max_f32
(
ã°Ouçut
, 
f·Size
, &
maxVÆue
, &
ã°Index
);

140 if(
ã°Index
 !
ªfIndex
)

142 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

150 if–
°©us
 !
ARM_MATH_SUCCESS
)

156 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_data.c

41 
	~"¨m_m©h.h
"

47 
Êﬂt32_t
 
	gã°I≈ut_f32_1kHz_15kHz
[320] =

91 
Êﬂt32_t
 
	gªfOuçut
[320] =

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_example_f32.c

125 
	~"¨m_m©h.h
"

126 
	~"m©h_hñ≥r.h
"

132 
	#TEST_LENGTH_SAMPLES
 320

	)

133 
	#SNR_THRESHOLD_F32
 140.0f

	)

134 
	#BLOCK_SIZE
 32

	)

135 
	#NUM_TAPS
 29

	)

142 
Êﬂt32_t
 
ã°I≈ut_f32_1kHz_15kHz
[
TEST_LENGTH_SAMPLES
];

143 
Êﬂt32_t
 
ªfOuçut
[
TEST_LENGTH_SAMPLES
];

149 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

155 
Êﬂt32_t
 
	gfúSèãF32
[
BLOCK_SIZE
 + 
NUM_TAPS
 - 1];

162 c⁄° 
Êﬂt32_t
 
	gfúC€ffs32
[
NUM_TAPS
] = {

173 
uöt32_t
 
	gblockSize
 = 
BLOCK_SIZE
;

174 
uöt32_t
 
	gnumBlocks
 = 
TEST_LENGTH_SAMPLES
/
BLOCK_SIZE
;

176 
Êﬂt32_t
 
	g¢r
;

182 
öt32_t
 
	$maö
()

184 
uöt32_t
 
i
;

185 
¨m_fú_ö°™˚_f32
 
S
;

186 
¨m_°©us
 
°©us
;

187 
Êﬂt32_t
 *
öputF32
, *
ouçutF32
;

190 
öputF32
 = &
ã°I≈ut_f32_1kHz_15kHz
[0];

191 
ouçutF32
 = &
ã°Ouçut
[0];

194 
	`¨m_fú_öô_f32
(&
S
, 
NUM_TAPS
, (
Êﬂt32_t
 *)&
fúC€ffs32
[0], &
fúSèãF32
[0], 
blockSize
);

200 
i
=0; i < 
numBlocks
; i++)

202 
	`¨m_fú_f32
(&
S
, 
öputF32
 + (
i
 * 
blockSize
), 
ouçutF32
 + (i * blockSize), blockSize);

210 
¢r
 = 
	`¨m_¢r_f32
(&
ªfOuçut
[0], &
ã°Ouçut
[0], 
TEST_LENGTH_SAMPLES
);

212 i‡(
¢r
 < 
SNR_THRESHOLD_F32
)

214 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

218 
°©us
 = 
ARM_MATH_SUCCESS
;

225 if–
°©us
 !
ARM_MATH_SUCCESS
)

231 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_data.c

41 
	~"¨m_m©h.h
"

43 
Êﬂt32_t
 
	gã°RefOuçut_f32
[320] = {

91 
Êﬂt32_t
 
	gã°I≈ut_f32
[320] =

	@Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_example_q31.c

129 
	~"¨m_m©h.h
"

130 
	~"m©h_hñ≥r.h
"

133 
	#TESTLENGTH
 320

	)

136 
	#BLOCKSIZE
 32

	)

139 
	#NUMBLOCKS
 (
TESTLENGTH
/
BLOCKSIZE
)

	)

142 
	#NUMSTAGES
 2

	)

144 
	#SNR_THRESHOLD_F32
 98

	)

150 
Êﬂt32_t
 
ã°I≈ut_f32
[
TESTLENGTH
];

151 
Êﬂt32_t
 
	gã°Ouçut
[
TESTLENGTH
];

153 
Êﬂt32_t
 
ã°RefOuçut_f32
[
TESTLENGTH
];

159 
q63_t
 
	gbiquadSèãB™d1Q31
[4 * 2];

160 
q63_t
 
	gbiquadSèãB™d2Q31
[4 * 2];

161 
q31_t
 
	gbiquadSèãB™d3Q31
[4 * 2];

162 
q31_t
 
	gbiquadSèãB™d4Q31
[4 * 2];

163 
q31_t
 
	gbiquadSèãB™d5Q31
[4 * 2];

169 
q31_t
 
	göputQ31
[
BLOCKSIZE
];

170 
q31_t
 
	gouçutQ31
[
BLOCKSIZE
];

183 c⁄° 
q31_t
 
	gc€ffTabÀ
[950] = {

292 
	ggaöDB
[5] = {0, -3, 6, 4, -6};

294 
Êﬂt32_t
 
	g¢r
;

301 
öt32_t
 
	$maö
()

303 
Êﬂt32_t
 *
öputF32
, *
ouçutF32
;

304 
¨m_biquad_ˇs_df1_32x64_ös_q31
 
S1
;

305 
¨m_biquad_ˇs_df1_32x64_ös_q31
 
S2
;

306 
¨m_biquad_ˇsd_df1_ö°_q31
 
S3
;

307 
¨m_biquad_ˇsd_df1_ö°_q31
 
S4
;

308 
¨m_biquad_ˇsd_df1_ö°_q31
 
S5
;

309 
i
;

310 
öt32_t
 
°©us
;

312 
öputF32
 = &
ã°I≈ut_f32
[0];

313 
ouçutF32
 = &
ã°Ouçut
[0];

317 
	`¨m_biquad_ˇs_df1_32x64_öô_q31
(&
S1
, 
NUMSTAGES
,

318 (
q31_t
 *Ë&
c€ffTabÀ
[190*0 + 10*(
gaöDB
[0] + 9)],

319 &
biquadSèãB™d1Q31
[0], 2);

321 
	`¨m_biquad_ˇs_df1_32x64_öô_q31
(&
S2
, 
NUMSTAGES
,

322 (
q31_t
 *Ë&
c€ffTabÀ
[190*1 + 10*(
gaöDB
[1] + 9)],

323 &
biquadSèãB™d2Q31
[0], 2);

325 
	`¨m_biquad_ˇsˇde_df1_öô_q31
(&
S3
, 
NUMSTAGES
,

326 (
q31_t
 *Ë&
c€ffTabÀ
[190*2 + 10*(
gaöDB
[2] + 9)],

327 &
biquadSèãB™d3Q31
[0], 2);

329 
	`¨m_biquad_ˇsˇde_df1_öô_q31
(&
S4
, 
NUMSTAGES
,

330 (
q31_t
 *Ë&
c€ffTabÀ
[190*3 + 10*(
gaöDB
[3] + 9)],

331 &
biquadSèãB™d4Q31
[0], 2);

333 
	`¨m_biquad_ˇsˇde_df1_öô_q31
(&
S5
, 
NUMSTAGES
,

334 (
q31_t
 *Ë&
c€ffTabÀ
[190*4 + 10*(
gaöDB
[4] + 9)],

335 &
biquadSèãB™d5Q31
[0], 2);

341 
i
=0; i < 
NUMBLOCKS
; i++)

348 
	`¨m_Êﬂt_to_q31
(
öputF32
 + (
i
*
BLOCKSIZE
), 
öputQ31
, BLOCKSIZE);

355 
	`¨m_sˇÀ_q31
(
öputQ31
, 0x7FFFFFFF, -3, i≈utQ31, 
BLOCKSIZE
);

361 
	`¨m_biquad_ˇs_df1_32x64_q31
(&
S1
, 
öputQ31
, 
ouçutQ31
, 
BLOCKSIZE
);

362 
	`¨m_biquad_ˇs_df1_32x64_q31
(&
S2
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

368 
	`¨m_biquad_ˇsˇde_df1_q31
(&
S3
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

369 
	`¨m_biquad_ˇsˇde_df1_q31
(&
S4
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

370 
	`¨m_biquad_ˇsˇde_df1_q31
(&
S5
, 
ouçutQ31
, ouçutQ31, 
BLOCKSIZE
);

376 
	`¨m_q31_to_Êﬂt
(
ouçutQ31
, 
ouçutF32
 + (
i
 * 
BLOCKSIZE
), BLOCKSIZE);

382 
	`¨m_sˇÀ_f32
(
ouçutF32
 + (
i
 * 
BLOCKSIZE
), 8.0f, outputF32 + (i * BLOCKSIZE), BLOCKSIZE);

385 
¢r
 = 
	`¨m_¢r_f32
(
ã°RefOuçut_f32
, 
ã°Ouçut
, 
TESTLENGTH
);

387 i‡(
¢r
 < 
SNR_THRESHOLD_F32
)

389 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

393 
°©us
 = 
ARM_MATH_SUCCESS
;

400 if–
°©us
 !
ARM_MATH_SUCCESS
)

406 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_data.c

49 
	g¨m_löór_öãªp_èbÀ
[188495] = {

	@Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_example_f32.c

87 
	~"¨m_m©h.h
"

88 
	~"m©h_hñ≥r.h
"

90 
	#SNR_THRESHOLD
 90

	)

91 
	#TEST_LENGTH_SAMPLES
 10

	)

92 
	#XSPACING
 (0.00005f)

	)

100 
Êﬂt32_t
 
	gã°I≈utSö_f32
[
TEST_LENGTH_SAMPLES
] =

113 
Êﬂt32_t
 
	gã°RefSöOuçut32_f32
[
TEST_LENGTH_SAMPLES
] =

125 
Êﬂt32_t
 
	gã°Ouçut
[
TEST_LENGTH_SAMPLES
];

130 
Êﬂt32_t
 
	gã°LöI¡Ouçut
[
TEST_LENGTH_SAMPLES
];

135 
¨m_löór_öãªp_èbÀ
[188495];

140 
Êﬂt32_t
 
	g¢r1
;

141 
Êﬂt32_t
 
	g¢r2
;

146 
öt32_t
 
	$maö
()

148 
uöt32_t
 
i
;

149 
¨m_°©us
 
°©us
;

151 
¨m_löór_öãΩ_ö°™˚_f32
 
S
 = {188495, -3.141592653589793238, 
XSPACING
, &
¨m_löór_öãªp_èbÀ
[0]};

156 
i
=0; i< 
TEST_LENGTH_SAMPLES
; i++)

158 
ã°Ouçut
[
i
] = 
	`¨m_sö_f32
(
ã°I≈utSö_f32
[i]);

165 
i
=0; i< 
TEST_LENGTH_SAMPLES
; i++)

167 
ã°LöI¡Ouçut
[
i
] = 
	`¨m_löór_öãΩ_f32
(&
S
, 
ã°I≈utSö_f32
[i]);

173 
¢r1
 = 
	`¨m_¢r_f32
(
ã°RefSöOuçut32_f32
, 
ã°Ouçut
, 2);

178 
¢r2
 = 
	`¨m_¢r_f32
(
ã°RefSöOuçut32_f32
, 
ã°LöI¡Ouçut
, 2);

183 if–
¢r2
 > 
¢r1
)

185 
°©us
 = 
ARM_MATH_SUCCESS
;

189 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

196 if–
°©us
 !
ARM_MATH_SUCCESS
)

202 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/arm_matrix_example_f32.c

93 
	~"¨m_m©h.h
"

94 
	~"m©h_hñ≥r.h
"

96 
	#SNR_THRESHOLD
 90

	)

103 c⁄° 
Êﬂt32_t
 
	gB_f32
[4] =

112 c⁄° 
Êﬂt32_t
 
	gA_f32
[16] =

126 
Êﬂt32_t
 
	gAT_f32
[16];

128 
Êﬂt32_t
 
	gATMA_f32
[16];

130 
Êﬂt32_t
 
	gATMAI_f32
[16];

132 
Êﬂt32_t
 
	gX_f32
[4];

137 c⁄° 
Êﬂt32_t
 
	gxRef_f32
[4] = {73.0, 8.0, 21.25, 2.875};

139 
Êﬂt32_t
 
	g¢r
;

146 
öt32_t
 
	$maö
()

149 
¨m_m©rix_ö°™˚_f32
 
A
;

150 
¨m_m©rix_ö°™˚_f32
 
AT
;

151 
¨m_m©rix_ö°™˚_f32
 
ATMA
;

152 
¨m_m©rix_ö°™˚_f32
 
ATMAI
;

153 
¨m_m©rix_ö°™˚_f32
 
B
;

154 
¨m_m©rix_ö°™˚_f32
 
X
;

156 
uöt32_t
 
§cRows
, 
§cCﬁumns
;

157 
¨m_°©us
 
°©us
;

160 
§cRows
 = 4;

161 
§cCﬁumns
 = 4;

162 
	`¨m_m©_öô_f32
(&
A
, 
§cRows
, 
§cCﬁumns
, (
Êﬂt32_t
 *)
A_f32
);

165 
§cRows
 = 4;

166 
§cCﬁumns
 = 4;

167 
	`¨m_m©_öô_f32
(&
AT
, 
§cRows
, 
§cCﬁumns
, 
AT_f32
);

170 
°©us
 = 
	`¨m_m©_å™s_f32
(&
A
, &
AT
);

174 
§cRows
 = 4;

175 
§cCﬁumns
 = 4;

176 
	`¨m_m©_öô_f32
(&
ATMA
, 
§cRows
, 
§cCﬁumns
, 
ATMA_f32
);

179 
°©us
 = 
	`¨m_m©_mu…_f32
(&
AT
, &
A
, &
ATMA
);

182 
§cRows
 = 4;

183 
§cCﬁumns
 = 4;

184 
	`¨m_m©_öô_f32
(&
ATMAI
, 
§cRows
, 
§cCﬁumns
, 
ATMAI_f32
);

187 
°©us
 = 
	`¨m_m©_övî£_f32
(&
ATMA
, &
ATMAI
);

190 
°©us
 = 
	`¨m_m©_mu…_f32
(&
ATMAI
, &
AT
, &
ATMA
);

193 
§cRows
 = 4;

194 
§cCﬁumns
 = 1;

195 
	`¨m_m©_öô_f32
(&
B
, 
§cRows
, 
§cCﬁumns
, (
Êﬂt32_t
 *)
B_f32
);

198 
§cRows
 = 4;

199 
§cCﬁumns
 = 1;

200 
	`¨m_m©_öô_f32
(&
X
, 
§cRows
, 
§cCﬁumns
, 
X_f32
);

203 
°©us
 = 
	`¨m_m©_mu…_f32
(&
ATMA
, &
B
, &
X
);

206 
¢r
 = 
	`¨m_¢r_f32
((
Êﬂt32_t
 *)
xRef_f32
, 
X_f32
, 4);

211 if–
¢r
 > 
SNR_THRESHOLD
)

213 
°©us
 = 
ARM_MATH_SUCCESS
;

217 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

225 if–
°©us
 !
ARM_MATH_SUCCESS
)

231 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_data.c

41 
	~"¨m_m©h.h
"

48 
Êﬂt32_t
 
	gã°I≈ut_f32
[1536] =

250 
Êﬂt32_t
 
	glmsN‹mC€ff_f32
[32] = {

262 c⁄° 
Êﬂt32_t
 
	gFIRC€ff_f32
[32] = {

	@Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_example_f32.c

109 
	~"¨m_m©h.h
"

110 
	~"m©h_hñ≥r.h
"

116 
	#TEST_LENGTH_SAMPLES
 1536

	)

117 
	#NUMTAPS
 32

	)

118 
	#BLOCKSIZE
 32

	)

119 
	#DELTA_ERROR
 0.000001f

	)

120 
	#DELTA_COEFF
 0.0001f

	)

121 
	#MU
 0.5f

	)

123 
	#NUMFRAMES
 (
TEST_LENGTH_SAMPLES
 / 
BLOCKSIZE
)

	)

129 
Êﬂt32_t
 
	gfúSèãF32
[
NUMTAPS
 + 
BLOCKSIZE
];

130 
¨m_fú_ö°™˚_f32
 
	gLPF_ö°™˚
;

136 
Êﬂt32_t
 
	glmsSèãF32
[
NUMTAPS
 + 
BLOCKSIZE
];

137 
Êﬂt32_t
 
	gîrOuçut
[
TEST_LENGTH_SAMPLES
];

138 
¨m_lms_n‹m_ö°™˚_f32
 
	glmsN‹m_ö°™˚
;

145 
¨m_°©us
 
ã°_sig«l_c⁄vîge_exam∂e
( );

151 
¨m_°©us
 
ã°_sig«l_c⁄vîge
(
Êﬂt32_t
* 
îr_sig«l
,

152 
uöt32_t
 
blockSize
);

154 
gëöput
(
Êﬂt32_t
* 
öput
,

155 
uöt32_t
 
‰_˙t
,

156 
uöt32_t
 
blockSize
);

161 
Êﬂt32_t
 
ã°I≈ut_f32
[
TEST_LENGTH_SAMPLES
];

162 
Êﬂt32_t
 
lmsN‹mC€ff_f32
[32];

163 c⁄° 
Êﬂt32_t
 
FIRC€ff_f32
[32];

164 
¨m_lms_n‹m_ö°™˚_f32
 
lmsN‹m_ö°™˚
;

170 
Êﬂt32_t
 
	gwúe1
[
BLOCKSIZE
];

171 
Êﬂt32_t
 
	gwúe2
[
BLOCKSIZE
];

172 
Êﬂt32_t
 
	gwúe3
[
BLOCKSIZE
];

173 
Êﬂt32_t
 
	gîr_sig«l
[
BLOCKSIZE
];

179 
öt32_t
 
	$maö
()

181 
uöt32_t
 
i
;

182 
¨m_°©us
 
°©us
;

183 
uöt32_t
 
ödex
;

184 
Êﬂt32_t
 
möVÆue
;

187 
	`¨m_lms_n‹m_öô_f32
(&
lmsN‹m_ö°™˚
, 
NUMTAPS
, 
lmsN‹mC€ff_f32
, 
lmsSèãF32
, 
MU
, 
BLOCKSIZE
);

190 
	`¨m_fú_öô_f32
(&
LPF_ö°™˚
, 
NUMTAPS
, (
Êﬂt32_t
 *)
FIRC€ff_f32
, 
fúSèãF32
, 
BLOCKSIZE
);

197 
i
=0; i < 
NUMFRAMES
; i++)

200 
	`¨m_c›y_f32
(
ã°I≈ut_f32
 + (
i
 * 
BLOCKSIZE
), 
wúe1
, BLOCKSIZE);

203 
	`¨m_fú_f32
(&
LPF_ö°™˚
, 
wúe1
, 
wúe2
, 
BLOCKSIZE
);

207 
	`¨m_lms_n‹m_f32
(&
lmsN‹m_ö°™˚
,

208 
wúe1
,

209 
wúe2
,

210 
wúe3
,

211 
îr_sig«l
,

212 
BLOCKSIZE
);

215 
	`¨m_sˇÀ_f32
(
wúe3
, 5, wúe3, 
BLOCKSIZE
);

218 
°©us
 = 
ARM_MATH_SUCCESS
;

224 
	`¨m_abs_f32
(
îr_sig«l
,Éº_sig«l, 
BLOCKSIZE
);

225 
	`¨m_mö_f32
(
îr_sig«l
, 
BLOCKSIZE
, &
möVÆue
, &
ödex
);

227 i‡(
möVÆue
 > 
DELTA_ERROR
)

229 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

236 
	`¨m_sub_f32
((
Êﬂt32_t
 *)
FIRC€ff_f32
, 
lmsN‹mC€ff_f32
,ÜmsN‹mC€ff_f32, 
NUMTAPS
);

238 
	`¨m_abs_f32
(
lmsN‹mC€ff_f32
,ÜmsN‹mC€ff_f32, 
NUMTAPS
);

239 
	`¨m_mö_f32
(
lmsN‹mC€ff_f32
, 
NUMTAPS
, &
möVÆue
, &
ödex
);

241 i‡(
möVÆue
 > 
DELTA_COEFF
)

243 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

251 if–
°©us
 !
ARM_MATH_SUCCESS
)

257 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.c

45 
	~<m©h.h
>

50 
	~"m©h_hñ≥r.h
"

62 
	$¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
)

64 
E√rgySig«l
 = 0.0, 
E√rgyEº‹
 = 0.0;

65 
uöt32_t
 
i
;

66 
SNR
;

67 
ãmp
;

68 *
ã°
;

70 
i
 = 0; i < 
buffSize
; i++)

73 
ã°
 = (*)(&
pRef
[
i
]);

74 
ãmp
 = *
ã°
;

76 if(
ãmp
 == 0x7FC00000)

82 
ã°
 = (*)(&
pTe°
[
i
]);

83 
ãmp
 = *
ã°
;

85 if(
ãmp
 == 0x7FC00000)

89 
E√rgySig«l
 +
pRef
[
i
] *ÖRef[i];

90 
E√rgyEº‹
 +(
pRef
[
i
] - 
pTe°
[i]) * (pRef[i] -ÖTest[i]);

94 
ã°
 = (*)(&
E√rgyEº‹
);

95 
ãmp
 = *
ã°
;

97 if(
ãmp
 == 0x7FC00000)

103 
SNR
 = 10 * 
	`log10
 (
E√rgySig«l
 / 
E√rgyEº‹
);

105  (
SNR
);

107 
	}
}

120 
	$¨m_¥ovide_gu¨d_bôs_q15
 (
q15_t
 * 
öput_buf
, 
uöt32_t
 
blockSize
,

121 
uöt32_t
 
gu¨d_bôs
)

123 
uöt32_t
 
i
;

125 
i
 = 0; i < 
blockSize
; i++)

127 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

129 
	}
}

138 
	$¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
)

140 
uöt32_t
 
i
;

142 
i
 = 0; i < 
numSam∂es
; i++)

145 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1048576.0f);

147 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

149 i‡(
pIn
[
i
] == () 1.0)

151 
pOut
[
i
] = 0x000FFFFF;

154 
	}
}

164 
uöt32_t
 
	$¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

166 
uöt32_t
 
i
;

167 
öt32_t
 
diff
, 
diffC∫t
 = 0;

168 
uöt32_t
 
maxDiff
 = 0;

170 
i
 = 0; i < 
numSam∂es
; i++)

172 
diff
 = 
pIn
[
i
] - 
pOut
[i];

173 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

175 if(
diffC∫t
 > 
maxDiff
)

177 
maxDiff
 = 
diffC∫t
;

181 (
maxDiff
);

182 
	}
}

192 
uöt32_t
 
	$¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à* 
pOut
, 
uöt32_t
 
numSam∂es
)

194 
uöt32_t
 
i
;

195 
öt32_t
 
diff
, 
diffC∫t
 = 0;

196 
uöt32_t
 
maxDiff
 = 0;

198 
i
 = 0; i < 
numSam∂es
; i++)

200 
diff
 = 
pIn
[
i
] - 
pOut
[i];

201 
diffC∫t
 = (
diff
 > 0) ? diff : -diff;

203 if(
diffC∫t
 > 
maxDiff
)

205 
maxDiff
 = 
diffC∫t
;

209 (
maxDiff
);

210 
	}
}

222 
	$¨m_¥ovide_gu¨d_bôs_q31
 (
q31_t
 * 
öput_buf
,

223 
uöt32_t
 
blockSize
,

224 
uöt32_t
 
gu¨d_bôs
)

226 
uöt32_t
 
i
;

228 
i
 = 0; i < 
blockSize
; i++)

230 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

232 
	}
}

244 
	$¨m_¥ovide_gu¨d_bôs_q7
 (
q7_t
 * 
öput_buf
,

245 
uöt32_t
 
blockSize
,

246 
uöt32_t
 
gu¨d_bôs
)

248 
uöt32_t
 
i
;

250 
i
 = 0; i < 
blockSize
; i++)

252 
öput_buf
[
i
] = i≈ut_buf[i] >> 
gu¨d_bôs
;

254 
	}
}

266 
uöt32_t
 
	$¨m_ˇlc_gu¨d_bôs
 (
uöt32_t
 
num_adds
)

268 
uöt32_t
 
i
 = 1, 
j
 = 0;

270 i‡(
num_adds
 == 1)

275 
i
 < 
num_adds
)

277 
i
 = i * 2;

278 
j
++;

281  (
j
);

282 
	}
}

290 
	$¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
,

291 
uöt32_t
 
numSam∂es
,

292 
uöt32_t
 
gu¨d_bôs
)

294 
uöt32_t
 
i
;

296 
i
 = 0; i < 
numSam∂es
; i++)

298 
pIn
[
i
] =ÖIn[i] * 
	`¨m_ˇlc_2pow
(
gu¨d_bôs
);

300 
	}
}

307 
uöt32_t
 
	$¨m_ˇlc_2pow
(
uöt32_t
 
numShi·s
)

310 
uöt32_t
 
i
, 
vÆ
 = 1;

312 
i
 = 0; i < 
numShi·s
; i++)

314 
vÆ
 = val * 2;

317 (
vÆ
);

318 
	}
}

329 
	$¨m_Êﬂt_to_q14
 (*
pIn
, 
q15_t
 * 
pOut
,

330 
uöt32_t
 
numSam∂es
)

332 
uöt32_t
 
i
;

334 
i
 = 0; i < 
numSam∂es
; i++)

337 
pOut
[
i
] = (
q15_t
Ë(
pIn
[i] * 16384.0f);

339 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

341 i‡(
pIn
[
i
] == () 2.0)

343 
pOut
[
i
] = 0x7FFF;

348 
	}
}

358 
	$¨m_Êﬂt_to_q30
 (*
pIn
, 
q31_t
 * 
pOut
,

359 
uöt32_t
 
numSam∂es
)

361 
uöt32_t
 
i
;

363 
i
 = 0; i < 
numSam∂es
; i++)

366 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 1073741824.0f);

368 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

370 i‡(
pIn
[
i
] == () 2.0)

372 
pOut
[
i
] = 0x7FFFFFFF;

375 
	}
}

384 
	$¨m_Êﬂt_to_q29
 (*
pIn
, 
q31_t
 * 
pOut
,

385 
uöt32_t
 
numSam∂es
)

387 
uöt32_t
 
i
;

389 
i
 = 0; i < 
numSam∂es
; i++)

392 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 536870912.0f);

394 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

396 i‡(
pIn
[
i
] == () 4.0)

398 
pOut
[
i
] = 0x7FFFFFFF;

401 
	}
}

411 
	$¨m_Êﬂt_to_q28
 (*
pIn
, 
q31_t
 * 
pOut
,

412 
uöt32_t
 
numSam∂es
)

414 
uöt32_t
 
i
;

416 
i
 = 0; i < 
numSam∂es
; i++)

419 
pOut
[
i
] = (
q31_t
Ë(
pIn
[i] * 268435456.0f);

421 
pOut
[
i
] +
pIn
[i] > 0 ? 0.5 : -0.5;

423 i‡(
pIn
[
i
] == () 8.0)

425 
pOut
[
i
] = 0x7FFFFFFF;

428 
	}
}

438 
	$¨m_˛ù_f32
 (*
pIn
, 
uöt32_t
 
numSam∂es
)

440 
uöt32_t
 
i
;

442 
i
 = 0; i < 
numSam∂es
; i++)

444 if(
pIn
[
i
] > 1.0f)

446 
pIn
[
i
] = 1.0;

448 if–
pIn
[
i
] < -1.0f)

450 
pIn
[
i
] = -1.0;

454 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.h

43 
	~"¨m_m©h.h
"

45 #i‚de‡
MATH_HELPER_H


46 
	#MATH_HELPER_H


	)

48 
¨m_¢r_f32
(*
pRef
, *
pTe°
, 
uöt32_t
 
buffSize
);

49 
¨m_Êﬂt_to_q12_20
(*
pIn
, 
q31_t
 * 
pOut
, 
uöt32_t
 
numSam∂es
);

50 
¨m_¥ovide_gu¨d_bôs_q15
(
q15_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

51 
¨m_¥ovide_gu¨d_bôs_q31
(
q31_t
 *
öput_buf
, 
uöt32_t
 
blockSize
, uöt32_à
gu¨d_bôs
);

52 
¨m_Êﬂt_to_q14
(*
pIn
, 
q15_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

53 
¨m_Êﬂt_to_q29
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

54 
¨m_Êﬂt_to_q28
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

55 
¨m_Êﬂt_to_q30
(*
pIn
, 
q31_t
 *
pOut
, 
uöt32_t
 
numSam∂es
);

56 
¨m_˛ù_f32
(*
pIn
, 
uöt32_t
 
numSam∂es
);

57 
uöt32_t
 
¨m_ˇlc_gu¨d_bôs
(uöt32_à
num_adds
);

58 
¨m_≠∂y_gu¨d_bôs
 (
Êﬂt32_t
 * 
pIn
, 
uöt32_t
 
numSam∂es
, uöt32_à
gu¨d_bôs
);

59 
uöt32_t
 
¨m_com∑ª_fixed_q15
(
q15_t
 *
pIn
, q15_à* 
pOut
, uöt32_à
numSam∂es
);

60 
uöt32_t
 
¨m_com∑ª_fixed_q31
(
q31_t
 *
pIn
, q31_à*
pOut
, uöt32_à
numSam∂es
);

61 
uöt32_t
 
¨m_ˇlc_2pow
(uöt32_à
gu¨d_bôs
);

	@Drivers/CMSIS/DSP_Lib/Examples/arm_sin_cos_example/ARM/arm_sin_cos_example_f32.c

84 
	~<m©h.h
>

85 
	~"¨m_m©h.h
"

90 
	#MAX_BLOCKSIZE
 32

	)

91 
	#DELTA
 (0.0001f)

	)

99 c⁄° 
Êﬂt32_t
 
	gã°I≈ut_f32
[
MAX_BLOCKSIZE
] =

109 c⁄° 
Êﬂt32_t
 
	gã°RefOuçut_f32
 = 1.000000000;

114 
uöt32_t
 
	gblockSize
 = 32;

115 
Êﬂt32_t
 
	gã°Ouçut
;

116 
Êﬂt32_t
 
	gcosOuçut
;

117 
Êﬂt32_t
 
	gsöOuçut
;

118 
Êﬂt32_t
 
	gcosSqu¨eOuçut
;

119 
Êﬂt32_t
 
	gsöSqu¨eOuçut
;

125 
¨m_°©us
 
	g°©us
;

127 
öt32_t
 
	$maö
()

129 
Êﬂt32_t
 
diff
;

130 
uöt32_t
 
i
;

132 
i
=0; i< 
blockSize
; i++)

134 
cosOuçut
 = 
	`¨m_cos_f32
(
ã°I≈ut_f32
[
i
]);

135 
söOuçut
 = 
	`¨m_sö_f32
(
ã°I≈ut_f32
[
i
]);

137 
	`¨m_mu…_f32
(&
cosOuçut
, &cosOuçut, &
cosSqu¨eOuçut
, 1);

138 
	`¨m_mu…_f32
(&
söOuçut
, &söOuçut, &
söSqu¨eOuçut
, 1);

140 
	`¨m_add_f32
(&
cosSqu¨eOuçut
, &
söSqu¨eOuçut
, &
ã°Ouçut
, 1);

143 
diff
 = 
	`Ábsf
(
ã°RefOuçut_f32
 - 
ã°Ouçut
);

146 if(
diff
 > 
DELTA
)

148 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

151 if–
°©us
 =
ARM_MATH_TEST_FAILURE
)

159 
	}
}

	@Drivers/CMSIS/DSP_Lib/Examples/arm_variance_example/ARM/arm_variance_example_f32.c

93 
	~<m©h.h
>

94 
	~"¨m_m©h.h
"

99 
	#MAX_BLOCKSIZE
 32

	)

100 
	#DELTA
 (0.000001f)

	)

106 
Êﬂt32_t
 
	gwúe1
[
MAX_BLOCKSIZE
];

107 
Êﬂt32_t
 
	gwúe2
[
MAX_BLOCKSIZE
];

108 
Êﬂt32_t
 
	gwúe3
[
MAX_BLOCKSIZE
];

115 
Êﬂt32_t
 
	gã°I≈ut_f32
[32] =

131 
uöt32_t
 
	gblockSize
 = 32;

132 
Êﬂt32_t
 
	gªfV¨ün˚Out
 = 0.903941793931839;

138 
öt32_t
 
	$maö
()

140 
¨m_°©us
 
°©us
;

141 
Êﬂt32_t
 
món
, 
⁄eByBlockSize
;

142 
Êﬂt32_t
 
v¨ün˚
;

143 
Êﬂt32_t
 
diff
;

145 
°©us
 = 
ARM_MATH_SUCCESS
;

152 
	`¨m_fûl_f32
(1.0, 
wúe1
, 
blockSize
);

156 
	`¨m_dŸ_¥od_f32
(
ã°I≈ut_f32
, 
wúe1
, 
blockSize
, &
món
);

159 
⁄eByBlockSize
 = 1.0 / (
blockSize
);

162 
	`¨m_mu…_f32
(&
món
, &
⁄eByBlockSize
, &mean, 1);

170 
	`¨m_fûl_f32
(
món
, 
wúe2
, 
blockSize
);

173 
	`¨m_sub_f32
(
ã°I≈ut_f32
, 
wúe2
, 
wúe3
, 
blockSize
);

176 
	`¨m_c›y_f32
(
wúe3
, 
wúe2
, 
blockSize
);

179 
	`¨m_dŸ_¥od_f32
(
wúe2
, 
wúe3
, 
blockSize
, &
v¨ün˚
);

182 
⁄eByBlockSize
 = 1.0 / (
blockSize
 - 1);

185 
	`¨m_mu…_f32
(&
v¨ün˚
, &
⁄eByBlockSize
, &variance, 1);

188 
diff
 = 
	`Ábsf
(
ªfV¨ün˚Out
 - 
v¨ün˚
);

191 if(
diff
 > 
DELTA
)

193 
°©us
 = 
ARM_MATH_TEST_FAILURE
;

196 if–
°©us
 !
ARM_MATH_SUCCESS
)

202 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_f32.c

41 
	~"¨m_m©h.h
"

42 
	~<m©h.h
>

75 
	$¨m_abs_f32
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
Êﬂt32_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


85 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

97 
ö1
 = *
pSrc
;

98 
ö2
 = *(
pSrc
 + 1);

99 
ö3
 = *(
pSrc
 + 2);

102 
ö1
 = 
	`Ábsf
(in1);

105 
ö4
 = *(
pSrc
 + 3);

108 
ö2
 = 
	`Ábsf
(in2);

111 *
pD°
 = 
ö1
;

114 
ö3
 = 
	`Ábsf
(in3);

117 
ö4
 = 
	`Ábsf
(in4);

120 *(
pD°
 + 1Ë
ö2
;

123 *(
pD°
 + 2Ë
ö3
;

126 *(
pD°
 + 3Ë
ö4
;

130 
pSrc
 += 4u;

133 
pD°
 += 4u;

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

148 
blkC¡
 = 
blockSize
;

152 
blkC¡
 > 0u)

156 *
pD°
++ = 
	`Ábsf
(*
pSrc
++);

159 
blkC¡
--;

161 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_abs_q15
(

66 
q15_t
 * 
pSrc
,

67 
q15_t
 * 
pD°
,

68 
uöt32_t
 
blockSize
)

70 
uöt32_t
 
blkC¡
;

72 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
__SIMD32_TYPE
 *
simd
;

77 
q15_t
 
ö1
;

78 
q15_t
 
ö2
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
simd
 = 
	`__SIMD32_CONST
(
pD°
);

87 
blkC¡
 > 0u)

91 
ö1
 = *
pSrc
++;

92 
ö2
 = *
pSrc
++;

96 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


97 *
simd
++ =

98 
	`__PKHBT
(((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)),

99 ((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)), 16);

104 *
simd
++ =

105 
	`__PKHBT
(((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)),

106 ((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)), 16);

110 
ö1
 = *
pSrc
++;

111 
ö2
 = *
pSrc
++;

114 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


116 *
simd
++ =

117 
	`__PKHBT
(((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)),

118 ((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)), 16);

123 *
simd
++ =

124 
	`__PKHBT
(((
ö2
 > 0Ë? in2 : (
q15_t
)
	`__QSUB16
(0, in2)),

125 ((
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1)), 16);

130 
blkC¡
--;

132 
pD°
 = (
q15_t
 *)
simd
;

136 
blkC¡
 = 
blockSize
 % 0x4u;

138 
blkC¡
 > 0u)

142 
ö1
 = *
pSrc
++;

145 *
pD°
++ = (
ö1
 > 0Ë? in1 : (
q15_t
)
	`__QSUB16
(0, in1);

148 
blkC¡
--;

155 
q15_t
 
ö
;

158 
blkC¡
 = 
blockSize
;

160 
blkC¡
 > 0u)

164 
ö
 = *
pSrc
++;

167 *
pD°
++ = (
ö
 > 0Ë? i¿: ((ö =(
q15_t
) 0x8000) ? 0x7fff : -in);

170 
blkC¡
--;

175 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_abs_q31
(

67 
q31_t
 * 
pSrc
,

68 
q31_t
 * 
pD°
,

69 
uöt32_t
 
blockSize
)

71 
uöt32_t
 
blkC¡
;

72 
q31_t
 
ö
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 
ö1
 = *
pSrc
++;

89 
ö2
 = *
pSrc
++;

90 
ö3
 = *
pSrc
++;

91 
ö4
 = *
pSrc
++;

93 *
pD°
++ = (
ö1
 > 0Ë? in1 : (
q31_t
)
	`__QSUB
(0, in1);

94 *
pD°
++ = (
ö2
 > 0Ë? in2 : (
q31_t
)
	`__QSUB
(0, in2);

95 *
pD°
++ = (
ö3
 > 0Ë? in3 : (
q31_t
)
	`__QSUB
(0, in3);

96 *
pD°
++ = (
ö4
 > 0Ë? in4 : (
q31_t
)
	`__QSUB
(0, in4);

99 
blkC¡
--;

104 
blkC¡
 = 
blockSize
 % 0x4u;

111 
blkC¡
 = 
blockSize
;

115 
blkC¡
 > 0u)

119 
ö
 = *
pSrc
++;

120 *
pD°
++ = (
ö
 > 0Ë? i¿: ((ö =
INT32_MIN
Ë? 
INT32_MAX
 : -in);

123 
blkC¡
--;

126 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q7.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_abs_q7
(

70 
q7_t
 * 
pSrc
,

71 
q7_t
 * 
pD°
,

72 
uöt32_t
 
blockSize
)

74 
uöt32_t
 
blkC¡
;

75 
q7_t
 
ö
;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

81 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

84 
blkC¡
 = 
blockSize
 >> 2u;

88 
blkC¡
 > 0u)

92 
ö1
 = (
q31_t
Ë* 
pSrc
;

93 
ö2
 = (
q31_t
Ë* (
pSrc
 + 1);

94 
ö3
 = (
q31_t
Ë* (
pSrc
 + 2);

97 
out1
 = (
ö1
 > 0Ë? in1 : (
q31_t
)
	`__QSUB8
(0, in1);

100 
ö4
 = (
q31_t
Ë* (
pSrc
 + 3);

103 
out2
 = (
ö2
 > 0Ë? in2 : (
q31_t
)
	`__QSUB8
(0, in2);

106 *
pD°
 = (
q7_t
Ë
out1
;

109 
out3
 = (
ö3
 > 0Ë? in3 : (
q31_t
)
	`__QSUB8
(0, in3);

112 
out4
 = (
ö4
 > 0Ë? in4 : (
q31_t
)
	`__QSUB8
(0, in4);

115 *(
pD°
 + 1Ë(
q7_t
Ë
out2
;

118 *(
pD°
 + 2Ë(
q7_t
Ë
out3
;

121 *(
pD°
 + 3Ë(
q7_t
Ë
out4
;

124 
pSrc
 += 4u;

125 
pD°
 += 4u;

128 
blkC¡
--;

133 
blkC¡
 = 
blockSize
 % 0x4u;

137 
blkC¡
 = 
blockSize
;

141 
blkC¡
 > 0u)

145 
ö
 = *
pSrc
++;

148 *
pD°
++ = (
ö
 > 0Ë? i¿: ((ö =(
q7_t
) 0x80) ? 0x7f : -in);

151 
blkC¡
--;

153 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_add_f32
(

74 
Êﬂt32_t
 * 
pSrcA
,

75 
Êﬂt32_t
 * 
pSrcB
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

85 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

98 
öA1
 = *
pSrcA
;

99 
öB1
 = *
pSrcB
;

100 
öA2
 = *(
pSrcA
 + 1);

101 
öB2
 = *(
pSrcB
 + 1);

102 
öA3
 = *(
pSrcA
 + 2);

103 
öB3
 = *(
pSrcB
 + 2);

104 
öA4
 = *(
pSrcA
 + 3);

105 
öB4
 = *(
pSrcB
 + 3);

109 *
pD°
 = 
öA1
 + 
öB1
;

110 *(
pD°
 + 1Ë
öA2
 + 
öB2
;

111 *(
pD°
 + 2Ë
öA3
 + 
öB3
;

112 *(
pD°
 + 3Ë
öA4
 + 
öB4
;

115 
pSrcA
 += 4u;

116 
pSrcB
 += 4u;

117 
pD°
 += 4u;

121 
blkC¡
--;

126 
blkC¡
 = 
blockSize
 % 0x4u;

133 
blkC¡
 = 
blockSize
;

137 
blkC¡
 > 0u)

141 *
pD°
++ = (*
pSrcA
++Ë+ (*
pSrcB
++);

144 
blkC¡
--;

146 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_add_q15
(

67 
q15_t
 * 
pSrcA
,

68 
q15_t
 * 
pSrcB
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 
öA1
 = *
	`__SIMD32
(
pSrcA
)++;

89 
öA2
 = *
	`__SIMD32
(
pSrcA
)++;

90 
öB1
 = *
	`__SIMD32
(
pSrcB
)++;

91 
öB2
 = *
	`__SIMD32
(
pSrcB
)++;

93 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(
öA1
, 
öB1
);

94 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(
öA2
, 
öB2
);

97 
blkC¡
--;

102 
blkC¡
 = 
blockSize
 % 0x4u;

104 
blkC¡
 > 0u)

108 *
pD°
++ = (
q15_t
Ë
	`__QADD16
(*
pSrcA
++, *
pSrcB
++);

111 
blkC¡
--;

121 
blkC¡
 = 
blockSize
;

123 
blkC¡
 > 0u)

127 *
pD°
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pSrcA
++ + *
pSrcB
++), 16);

130 
blkC¡
--;

136 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_add_q31
(

68 
q31_t
 * 
pSrcA
,

69 
q31_t
 * 
pSrcB
,

70 
q31_t
 * 
pD°
,

71 
uöt32_t
 
blockSize
)

73 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

79 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
pSrcA
++;

91 
öA2
 = *
pSrcA
++;

92 
öB1
 = *
pSrcB
++;

93 
öB2
 = *
pSrcB
++;

95 
öA3
 = *
pSrcA
++;

96 
öA4
 = *
pSrcA
++;

97 
öB3
 = *
pSrcB
++;

98 
öB4
 = *
pSrcB
++;

100 *
pD°
++ = 
	`__QADD
(
öA1
, 
öB1
);

101 *
pD°
++ = 
	`__QADD
(
öA2
, 
öB2
);

102 *
pD°
++ = 
	`__QADD
(
öA3
, 
öB3
);

103 *
pD°
++ = 
	`__QADD
(
öA4
, 
öB4
);

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 > 0u)

117 *
pD°
++ = 
	`__QADD
(*
pSrcA
++, *
pSrcB
++);

120 
blkC¡
--;

130 
blkC¡
 = 
blockSize
;

132 
blkC¡
 > 0u)

136 *
pD°
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrcA
++ + *
pSrcB
++);

139 
blkC¡
--;

144 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_add_q7
(

67 
q7_t
 * 
pSrcA
,

68 
q7_t
 * 
pSrcB
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD8
(*__SIMD32(
pSrcA
)++, *__SIMD32(
pSrcB
)++);

91 
blkC¡
--;

96 
blkC¡
 = 
blockSize
 % 0x4u;

98 
blkC¡
 > 0u)

102 *
pD°
++ = (
q7_t
Ë
	`__SSAT
(*
pSrcA
++ + *
pSrcB
++, 8);

105 
blkC¡
--;

115 
blkC¡
 = 
blockSize
;

117 
blkC¡
 > 0u)

121 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q15_t
Ë* 
pSrcA
++ + *
pSrcB
++, 8);

124 
blkC¡
--;

130 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_f32.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_dŸ_¥od_f32
(

76 
Êﬂt32_t
 * 
pSrcA
,

77 
Êﬂt32_t
 * 
pSrcB
,

78 
uöt32_t
 
blockSize
,

79 
Êﬂt32_t
 * 
ªsu…
)

81 
Êﬂt32_t
 
sum
 = 0.0f;

82 
uöt32_t
 
blkC¡
;

85 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

97 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

98 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

99 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

100 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

103 
blkC¡
--;

108 
blkC¡
 = 
blockSize
 % 0x4u;

115 
blkC¡
 = 
blockSize
;

120 
blkC¡
 > 0u)

124 
sum
 +(*
pSrcA
++Ë* (*
pSrcB
++);

127 
blkC¡
--;

130 *
ªsu…
 = 
sum
;

131 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q15.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_dŸ_¥od_q15
(

70 
q15_t
 * 
pSrcA
,

71 
q15_t
 * 
pSrcB
,

72 
uöt32_t
 
blockSize
,

73 
q63_t
 * 
ªsu…
)

75 
q63_t
 
sum
 = 0;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
blkC¡
 = 
blockSize
 >> 2u;

88 
blkC¡
 > 0u)

92 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
pSrcA
)++, *__SIMD32(
pSrcB
)++, sum);

93 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
pSrcA
)++, *__SIMD32(
pSrcB
)++, sum);

96 
blkC¡
--;

101 
blkC¡
 = 
blockSize
 % 0x4u;

103 
blkC¡
 > 0u)

107 
sum
 = 
	`__SMLALD
(*
pSrcA
++, *
pSrcB
++, sum);

110 
blkC¡
--;

119 
blkC¡
 = 
blockSize
;

121 
blkC¡
 > 0u)

125 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
pSrcA
++ * *
pSrcB
++);

128 
blkC¡
--;

134 *
ªsu…
 = 
sum
;

136 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_dŸ_¥od_q31
(

71 
q31_t
 * 
pSrcA
,

72 
q31_t
 * 
pSrcB
,

73 
uöt32_t
 
blockSize
,

74 
q63_t
 * 
ªsu…
)

76 
q63_t
 
sum
 = 0;

77 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

84 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

95 
öA1
 = *
pSrcA
++;

96 
öA2
 = *
pSrcA
++;

97 
öA3
 = *
pSrcA
++;

98 
öA4
 = *
pSrcA
++;

99 
öB1
 = *
pSrcB
++;

100 
öB2
 = *
pSrcB
++;

101 
öB3
 = *
pSrcB
++;

102 
öB4
 = *
pSrcB
++;

104 
sum
 +((
q63_t
Ë
öA1
 * 
öB1
) >> 14u;

105 
sum
 +((
q63_t
Ë
öA2
 * 
öB2
) >> 14u;

106 
sum
 +((
q63_t
Ë
öA3
 * 
öB3
) >> 14u;

107 
sum
 +((
q63_t
Ë
öA4
 * 
öB4
) >> 14u;

110 
blkC¡
--;

115 
blkC¡
 = 
blockSize
 % 0x4u;

122 
blkC¡
 = 
blockSize
;

127 
blkC¡
 > 0u)

131 
sum
 +((
q63_t
Ë* 
pSrcA
++ * *
pSrcB
++) >> 14u;

134 
blkC¡
--;

138 *
ªsu…
 = 
sum
;

139 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q7.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_dŸ_¥od_q7
(

70 
q7_t
 * 
pSrcA
,

71 
q7_t
 * 
pSrcB
,

72 
uöt32_t
 
blockSize
,

73 
q31_t
 * 
ªsu…
)

75 
uöt32_t
 
blkC¡
;

77 
q31_t
 
sum
 = 0;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
öput1
, 
öput2
;

84 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

96 
öput1
 = *
	`__SIMD32
(
pSrcA
)++;

98 
öput2
 = *
	`__SIMD32
(
pSrcB
)++;

101 
öA1
 = 
	`__SXTB16
(
	`__ROR
(
öput1
, 8));

103 
öA2
 = 
	`__SXTB16
(
öput1
);

105 
öB1
 = 
	`__SXTB16
(
	`__ROR
(
öput2
, 8));

107 
öB2
 = 
	`__SXTB16
(
öput2
);

110 
sum
 = 
	`__SMLAD
(
öA1
, 
öB1
, sum);

111 
sum
 = 
	`__SMLAD
(
öA2
, 
öB2
, sum);

114 
blkC¡
--;

119 
blkC¡
 = 
blockSize
 % 0x4u;

121 
blkC¡
 > 0u)

125 
sum
 = 
	`__SMLAD
(*
pSrcA
++, *
pSrcB
++, sum);

128 
blkC¡
--;

138 
blkC¡
 = 
blockSize
;

140 
blkC¡
 > 0u)

144 
sum
 +(
q31_t
Ë((
q15_t
Ë* 
pSrcA
++ * *
pSrcB
++);

147 
blkC¡
--;

154 *
ªsu…
 = 
sum
;

155 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_mu…_f32
(

74 
Êﬂt32_t
 * 
pSrcA
,

75 
Êﬂt32_t
 * 
pSrcB
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

84 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

85 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

97 
öA1
 = *
pSrcA
;

99 
öB1
 = *
pSrcB
;

101 
öA2
 = *(
pSrcA
 + 1);

103 
öB2
 = *(
pSrcB
 + 1);

106 
out1
 = 
öA1
 * 
öB1
;

109 
öA3
 = *(
pSrcA
 + 2);

111 
öB3
 = *(
pSrcB
 + 2);

114 
out2
 = 
öA2
 * 
öB2
;

117 
öA4
 = *(
pSrcA
 + 3);

120 *
pD°
 = 
out1
;

123 
öB4
 = *(
pSrcB
 + 3);

126 
out3
 = 
öA3
 * 
öB3
;

129 *(
pD°
 + 1Ë
out2
;

132 
out4
 = 
öA4
 * 
öB4
;

134 *(
pD°
 + 2Ë
out3
;

136 *(
pD°
 + 3Ë
out4
;

140 
pSrcA
 += 4u;

141 
pSrcB
 += 4u;

142 
pD°
 += 4u;

145 
blkC¡
--;

150 
blkC¡
 = 
blockSize
 % 0x4u;

157 
blkC¡
 = 
blockSize
;

161 
blkC¡
 > 0u)

165 *
pD°
++ = (*
pSrcA
++Ë* (*
pSrcB
++);

168 
blkC¡
--;

170 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q15.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_mu…_q15
(

68 
q15_t
 * 
pSrcA
,

69 
q15_t
 * 
pSrcB
,

70 
q15_t
 * 
pD°
,

71 
uöt32_t
 
blockSize
)

73 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

79 
q15_t
 
out1
, 
out2
, 
out3
, 
out4
;

80 
q31_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

83 
blkC¡
 = 
blockSize
 >> 2u;

87 
blkC¡
 > 0u)

90 
öA1
 = *
	`__SIMD32
(
pSrcA
)++;

92 
öB1
 = *
	`__SIMD32
(
pSrcB
)++;

94 
öA2
 = *
	`__SIMD32
(
pSrcA
)++;

96 
öB2
 = *
	`__SIMD32
(
pSrcB
)++;

99 
mul1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
 >> 16));

100 
mul2
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * (q15_tË
öB1
);

101 
mul3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË(
öB2
 >> 16));

102 
mul4
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * (q15_tË
öB2
);

105 
out1
 = (
q15_t
Ë
	`__SSAT
(
mul1
 >> 15, 16);

106 
out2
 = (
q15_t
Ë
	`__SSAT
(
mul2
 >> 15, 16);

107 
out3
 = (
q15_t
Ë
	`__SSAT
(
mul3
 >> 15, 16);

108 
out4
 = (
q15_t
Ë
	`__SSAT
(
mul4
 >> 15, 16);

111 #i‚de‡
ARM_MATH_BIG_ENDIAN


113 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out2
, 
out1
, 16);

114 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out4
, 
out3
, 16);

118 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out2
, 
out1
, 16);

119 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
out4
, 
out3
, 16);

124 
blkC¡
--;

129 
blkC¡
 = 
blockSize
 % 0x4u;

136 
blkC¡
 = 
blockSize
;

141 
blkC¡
 > 0u)

145 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 15), 16);

148 
blkC¡
--;

150 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_mu…_q31
(

67 
q31_t
 * 
pSrcA
,

68 
q31_t
 * 
pSrcB
,

69 
q31_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

78 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

79 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
pSrcA
++;

91 
öA2
 = *
pSrcA
++;

92 
öA3
 = *
pSrcA
++;

93 
öA4
 = *
pSrcA
++;

94 
öB1
 = *
pSrcB
++;

95 
öB2
 = *
pSrcB
++;

96 
öB3
 = *
pSrcB
++;

97 
öB4
 = *
pSrcB
++;

99 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

100 
out2
 = ((
q63_t
Ë
öA2
 * 
öB2
) >> 32;

101 
out3
 = ((
q63_t
Ë
öA3
 * 
öB3
) >> 32;

102 
out4
 = ((
q63_t
Ë
öA4
 * 
öB4
) >> 32;

104 
out1
 = 
	`__SSAT
(out1, 31);

105 
out2
 = 
	`__SSAT
(out2, 31);

106 
out3
 = 
	`__SSAT
(out3, 31);

107 
out4
 = 
	`__SSAT
(out4, 31);

109 *
pD°
++ = 
out1
 << 1u;

110 *
pD°
++ = 
out2
 << 1u;

111 *
pD°
++ = 
out3
 << 1u;

112 *
pD°
++ = 
out4
 << 1u;

115 
blkC¡
--;

120 
blkC¡
 = 
blockSize
 % 0x4u;

122 
blkC¡
 > 0u)

126 
öA1
 = *
pSrcA
++;

127 
öB1
 = *
pSrcB
++;

128 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

129 
out1
 = 
	`__SSAT
(out1, 31);

130 *
pD°
++ = 
out1
 << 1u;

133 
blkC¡
--;

141 
blkC¡
 = 
blockSize
;

144 
blkC¡
 > 0u)

148 *
pD°
++ =

149 (
q31_t
Ë
	`˛ù_q63_to_q31
(((
q63_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 31);

152 
blkC¡
--;

156 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_mu…_q7
(

67 
q7_t
 * 
pSrcA
,

68 
q7_t
 * 
pSrcB
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q7_t
 
out1
, 
out2
, 
out3
, 
out4
;

80 
blkC¡
 = 
blockSize
 >> 2u;

84 
blkC¡
 > 0u)

88 
out1
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

89 
out2
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

90 
out3
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

91 
out4
 = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

94 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
out1
, 
out2
, 
out3
, 
out4
);

97 
blkC¡
--;

102 
blkC¡
 = 
blockSize
 % 0x4u;

109 
blkC¡
 = 
blockSize
;

114 
blkC¡
 > 0u)

118 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((((
q15_t
Ë(*
pSrcA
++Ë* (*
pSrcB
++)) >> 7), 8);

121 
blkC¡
--;

123 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_√g©e_f32
(

75 
Êﬂt32_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


85 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

95 
ö1
 = *
pSrc
;

96 
ö2
 = *(
pSrc
 + 1);

97 
ö3
 = *(
pSrc
 + 2);

98 
ö4
 = *(
pSrc
 + 3);

101 
ö1
 = -in1;

102 
ö2
 = -in2;

103 
ö3
 = -in3;

104 
ö4
 = -in4;

107 *
pD°
 = 
ö1
;

108 *(
pD°
 + 1Ë
ö2
;

109 *(
pD°
 + 2Ë
ö3
;

110 *(
pD°
 + 3Ë
ö4
;

113 
pSrc
 += 4u;

114 
pD°
 += 4u;

117 
blkC¡
--;

122 
blkC¡
 = 
blockSize
 % 0x4u;

129 
blkC¡
 = 
blockSize
;

133 
blkC¡
 > 0u)

137 *
pD°
++ = -*
pSrc
++;

140 
blkC¡
--;

142 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q15.c

40 
	~"¨m_m©h.h
"

68 
	$¨m_√g©e_q15
(

69 
q15_t
 * 
pSrc
,

70 
q15_t
 * 
pD°
,

71 
uöt32_t
 
blockSize
)

73 
uöt32_t
 
blkC¡
;

74 
q15_t
 
ö
;

76 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q31_t
 
ö1
, 
ö2
;

84 
blkC¡
 = 
blockSize
 >> 2u;

88 
blkC¡
 > 0u)

92 
ö1
 = 
	`_SIMD32_OFFSET
(
pSrc
);

93 
ö2
 = 
	`_SIMD32_OFFSET
(
pSrc
 + 2);

96 
ö1
 = 
	`__QSUB16
(0, in1);

99 
ö2
 = 
	`__QSUB16
(0, in2);

102 
	`_SIMD32_OFFSET
(
pD°
Ë
ö1
;

104 
	`_SIMD32_OFFSET
(
pD°
 + 2Ë
ö2
;

108 
pSrc
 += 4u;

109 
pD°
 += 4u;

112 
blkC¡
--;

117 
blkC¡
 = 
blockSize
 % 0x4u;

124 
blkC¡
 = 
blockSize
;

128 
blkC¡
 > 0u)

132 
ö
 = *
pSrc
++;

133 *
pD°
++ = (
ö
 =(
q15_t
) 0x8000) ? 0x7fff : -in;

136 
blkC¡
--;

138 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q31.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_√g©e_q31
(

66 
q31_t
 * 
pSrc
,

67 
q31_t
 * 
pD°
,

68 
uöt32_t
 
blockSize
)

70 
q31_t
 
ö
;

71 
uöt32_t
 
blkC¡
;

73 #i‚de‡
ARM_MATH_CM0_FAMILY


76 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

79 
blkC¡
 = 
blockSize
 >> 2u;

83 
blkC¡
 > 0u)

87 
ö1
 = *
pSrc
++;

88 
ö2
 = *
pSrc
++;

89 
ö3
 = *
pSrc
++;

90 
ö4
 = *
pSrc
++;

92 *
pD°
++ = 
	`__QSUB
(0, 
ö1
);

93 *
pD°
++ = 
	`__QSUB
(0, 
ö2
);

94 *
pD°
++ = 
	`__QSUB
(0, 
ö3
);

95 *
pD°
++ = 
	`__QSUB
(0, 
ö4
);

98 
blkC¡
--;

103 
blkC¡
 = 
blockSize
 % 0x4u;

110 
blkC¡
 = 
blockSize
;

115 
blkC¡
 > 0u)

119 
ö
 = *
pSrc
++;

120 *
pD°
++ = (
ö
 =
INT32_MIN
Ë? 
INT32_MAX
 : -in;

123 
blkC¡
--;

125 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q7.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_√g©e_q7
(

66 
q7_t
 * 
pSrc
,

67 
q7_t
 * 
pD°
,

68 
uöt32_t
 
blockSize
)

70 
uöt32_t
 
blkC¡
;

71 
q7_t
 
ö
;

73 #i‚de‡
ARM_MATH_CM0_FAMILY


76 
q31_t
 
öput
;

77 
q31_t
 
zîo
 = 0x00000000;

81 
blkC¡
 = 
blockSize
 >> 2u;

85 
blkC¡
 > 0u)

89 
öput
 = *
	`__SIMD32
(
pSrc
)++;

92 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB8
(
zîo
, 
öput
);

95 
blkC¡
--;

100 
blkC¡
 = 
blockSize
 % 0x4u;

107 
blkC¡
 = 
blockSize
;

111 
blkC¡
 > 0u)

115 
ö
 = *
pSrc
++;

116 *
pD°
++ = (
ö
 =(
q7_t
) 0x80) ? 0x7f : -in;

119 
blkC¡
--;

121 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_f32.c

40 
	~"¨m_m©h.h
"

75 
	$¨m_off£t_f32
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
Êﬂt32_t
 
off£t
,

78 
Êﬂt32_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

98 
ö1
 = *
pSrc
;

99 
ö2
 = *(
pSrc
 + 1);

102 
ö1
 = in1 + 
off£t
;

105 
ö3
 = *(
pSrc
 + 2);

108 
ö2
 = in2 + 
off£t
;

111 
ö4
 = *(
pSrc
 + 3);

114 
ö3
 = in3 + 
off£t
;

117 *
pD°
 = 
ö1
;

120 
ö4
 = in4 + 
off£t
;

123 *(
pD°
 + 1Ë
ö2
;

126 *(
pD°
 + 2Ë
ö3
;

129 *(
pD°
 + 3Ë
ö4
;

132 
pSrc
 += 4u;

133 
pD°
 += 4u;

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

148 
blkC¡
 = 
blockSize
;

152 
blkC¡
 > 0u)

156 *
pD°
++ = (*
pSrc
++Ë+ 
off£t
;

159 
blkC¡
--;

161 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_off£t_q15
(

67 
q15_t
 * 
pSrc
,

68 
q15_t
 
off£t
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
off£t_∑cked
;

81 
blkC¡
 = 
blockSize
 >> 2u;

84 
off£t_∑cked
 = 
	`__PKHBT
(
off£t
, offset, 16);

88 
blkC¡
 > 0u)

92 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(*__SIMD32(
pSrc
)++, 
off£t_∑cked
);

93 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD16
(*__SIMD32(
pSrc
)++, 
off£t_∑cked
);

96 
blkC¡
--;

101 
blkC¡
 = 
blockSize
 % 0x4u;

103 
blkC¡
 > 0u)

107 *
pD°
++ = (
q15_t
Ë
	`__QADD16
(*
pSrc
++, 
off£t
);

110 
blkC¡
--;

118 
blkC¡
 = 
blockSize
;

120 
blkC¡
 > 0u)

124 *
pD°
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pSrc
++ + 
off£t
), 16);

127 
blkC¡
--;

132 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_off£t_q31
(

67 
q31_t
 * 
pSrc
,

68 
q31_t
 
off£t
,

69 
q31_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

81 
blkC¡
 = 
blockSize
 >> 2u;

85 
blkC¡
 > 0u)

89 
ö1
 = *
pSrc
++;

90 
ö2
 = *
pSrc
++;

91 
ö3
 = *
pSrc
++;

92 
ö4
 = *
pSrc
++;

94 *
pD°
++ = 
	`__QADD
(
ö1
, 
off£t
);

95 *
pD°
++ = 
	`__QADD
(
ö2
, 
off£t
);

96 *
pD°
++ = 
	`__QADD
(
ö3
, 
off£t
);

97 *
pD°
++ = 
	`__QADD
(
ö4
, 
off£t
);

100 
blkC¡
--;

105 
blkC¡
 = 
blockSize
 % 0x4u;

107 
blkC¡
 > 0u)

111 *
pD°
++ = 
	`__QADD
(*
pSrc
++, 
off£t
);

114 
blkC¡
--;

122 
blkC¡
 = 
blockSize
;

124 
blkC¡
 > 0u)

128 *
pD°
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrc
++ + 
off£t
);

131 
blkC¡
--;

136 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_off£t_q7
(

67 
q7_t
 * 
pSrc
,

68 
q7_t
 
off£t
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
off£t_∑cked
;

81 
blkC¡
 = 
blockSize
 >> 2u;

84 
off£t_∑cked
 = 
	`__PACKq7
(
off£t
, offset, offset, offset);

88 
blkC¡
 > 0u)

92 *
	`__SIMD32
(
pD°
)++ = 
	`__QADD8
(*__SIMD32(
pSrc
)++, 
off£t_∑cked
);

95 
blkC¡
--;

100 
blkC¡
 = 
blockSize
 % 0x4u;

102 
blkC¡
 > 0u)

106 *
pD°
++ = (
q7_t
Ë
	`__SSAT
(*
pSrc
++ + 
off£t
, 8);

109 
blkC¡
--;

117 
blkC¡
 = 
blockSize
;

119 
blkC¡
 > 0u)

123 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q15_t
Ë* 
pSrc
++ + 
off£t
, 8);

126 
blkC¡
--;

131 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_f32.c

41 
	~"¨m_m©h.h
"

89 
	$¨m_sˇÀ_f32
(

90 
Êﬂt32_t
 * 
pSrc
,

91 
Êﬂt32_t
 
sˇÀ
,

92 
Êﬂt32_t
 * 
pD°
,

93 
uöt32_t
 
blockSize
)

95 
uöt32_t
 
blkC¡
;

96 #i‚de‡
ARM_MATH_CM0_FAMILY


99 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

102 
blkC¡
 = 
blockSize
 >> 2u;

106 
blkC¡
 > 0u)

111 
ö1
 = *
pSrc
;

112 
ö2
 = *(
pSrc
 + 1);

115 
ö1
 = in1 * 
sˇÀ
;

118 
ö3
 = *(
pSrc
 + 2);

121 
ö2
 = in2 * 
sˇÀ
;

124 
ö4
 = *(
pSrc
 + 3);

127 
ö3
 = in3 * 
sˇÀ
;

128 
ö4
 = in4 * 
sˇÀ
;

130 *
pD°
 = 
ö1
;

131 *(
pD°
 + 1Ë
ö2
;

132 *(
pD°
 + 2Ë
ö3
;

133 *(
pD°
 + 3Ë
ö4
;

136 
pSrc
 += 4u;

137 
pD°
 += 4u;

140 
blkC¡
--;

145 
blkC¡
 = 
blockSize
 % 0x4u;

152 
blkC¡
 = 
blockSize
;

156 
blkC¡
 > 0u)

160 *
pD°
++ = (*
pSrc
++Ë* 
sˇÀ
;

163 
blkC¡
--;

165 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q15.c

41 
	~"¨m_m©h.h
"

68 
	$¨m_sˇÀ_q15
(

69 
q15_t
 * 
pSrc
,

70 
q15_t
 
sˇÀFø˘
,

71 
öt8_t
 
shi·
,

72 
q15_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
öt8_t
 
kShi·
 = 15 - 
shi·
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q15_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

82 
q31_t
 
öA1
, 
öA2
;

83 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

94 
öA1
 = *
	`__SIMD32
(
pSrc
)++;

95 
öA2
 = *
	`__SIMD32
(
pSrc
)++;

100 
out1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* 
sˇÀFø˘
);

101 
out2
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * 
sˇÀFø˘
);

102 
out3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* 
sˇÀFø˘
);

103 
out4
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * 
sˇÀFø˘
);

106 
out1
 = out1 >> 
kShi·
;

107 
out2
 = out2 >> 
kShi·
;

108 
out3
 = out3 >> 
kShi·
;

109 
out4
 = out4 >> 
kShi·
;

112 
ö1
 = (
q15_t
Ë(
	`__SSAT
(
out1
, 16));

113 
ö2
 = (
q15_t
Ë(
	`__SSAT
(
out2
, 16));

114 
ö3
 = (
q15_t
Ë(
	`__SSAT
(
out3
, 16));

115 
ö4
 = (
q15_t
Ë(
	`__SSAT
(
out4
, 16));

118 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

119 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
ö4
, 
ö3
, 16);

122 
blkC¡
--;

127 
blkC¡
 = 
blockSize
 % 0x4u;

129 
blkC¡
 > 0u)

133 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
(((*
pSrc
++Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 16));

136 
blkC¡
--;

144 
blkC¡
 = 
blockSize
;

146 
blkC¡
 > 0u)

150 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
(((
q31_t
Ë* 
pSrc
++ * 
sˇÀFø˘
Ë>> 
kShi·
, 16));

153 
blkC¡
--;

158 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_sˇÀ_q31
(

68 
q31_t
 * 
pSrc
,

69 
q31_t
 
sˇÀFø˘
,

70 
öt8_t
 
shi·
,

71 
q31_t
 * 
pD°
,

72 
uöt32_t
 
blockSize
)

74 
öt8_t
 
kShi·
 = 
shi·
 + 1;

75 
öt8_t
 
sign
 = (
kShi·
 & 0x80);

76 
uöt32_t
 
blkC¡
;

77 
q31_t
 
ö
, 
out
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

84 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

88 
blkC¡
 = 
blockSize
 >> 2u;

90 if(
sign
 == 0u)

94 
blkC¡
 > 0u)

97 
ö1
 = *
pSrc
;

98 
ö2
 = *(
pSrc
 + 1);

99 
ö3
 = *(
pSrc
 + 2);

100 
ö4
 = *(
pSrc
 + 3);

103 
ö1
 = ((
q63_t
Ëö1 * 
sˇÀFø˘
) >> 32;

104 
ö2
 = ((
q63_t
Ëö2 * 
sˇÀFø˘
) >> 32;

105 
ö3
 = ((
q63_t
Ëö3 * 
sˇÀFø˘
) >> 32;

106 
ö4
 = ((
q63_t
Ëö4 * 
sˇÀFø˘
) >> 32;

109 
out1
 = 
ö1
 << 
kShi·
;

110 
out2
 = 
ö2
 << 
kShi·
;

113 if(
ö1
 !(
out1
 >> 
kShi·
))

114 
out1
 = 0x7FFFFFFF ^ (
ö1
 >> 31);

116 if(
ö2
 !(
out2
 >> 
kShi·
))

117 
out2
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

119 
out3
 = 
ö3
 << 
kShi·
;

120 
out4
 = 
ö4
 << 
kShi·
;

122 *
pD°
 = 
out1
;

123 *(
pD°
 + 1Ë
out2
;

125 if(
ö3
 !(
out3
 >> 
kShi·
))

126 
out3
 = 0x7FFFFFFF ^ (
ö3
 >> 31);

128 if(
ö4
 !(
out4
 >> 
kShi·
))

129 
out4
 = 0x7FFFFFFF ^ (
ö4
 >> 31);

132 *(
pD°
 + 2Ë
out3
;

133 *(
pD°
 + 3Ë
out4
;

136 
pSrc
 += 4u;

137 
pD°
 += 4u;

140 
blkC¡
--;

148 
blkC¡
 > 0u)

151 
ö1
 = *
pSrc
;

152 
ö2
 = *(
pSrc
 + 1);

153 
ö3
 = *(
pSrc
 + 2);

154 
ö4
 = *(
pSrc
 + 3);

157 
ö1
 = ((
q63_t
Ëö1 * 
sˇÀFø˘
) >> 32;

158 
ö2
 = ((
q63_t
Ëö2 * 
sˇÀFø˘
) >> 32;

159 
ö3
 = ((
q63_t
Ëö3 * 
sˇÀFø˘
) >> 32;

160 
ö4
 = ((
q63_t
Ëö4 * 
sˇÀFø˘
) >> 32;

163 
out1
 = 
ö1
 >> -
kShi·
;

164 
out2
 = 
ö2
 >> -
kShi·
;

166 
out3
 = 
ö3
 >> -
kShi·
;

167 
out4
 = 
ö4
 >> -
kShi·
;

170 *
pD°
 = 
out1
;

171 *(
pD°
 + 1Ë
out2
;

173 *(
pD°
 + 2Ë
out3
;

174 *(
pD°
 + 3Ë
out4
;

177 
pSrc
 += 4u;

178 
pD°
 += 4u;

181 
blkC¡
--;

186 
blkC¡
 = 
blockSize
 % 0x4u;

193 
blkC¡
 = 
blockSize
;

197 if(
sign
 == 0)

199 
blkC¡
 > 0u)

203 
ö
 = *
pSrc
++;

204 
ö
 = ((
q63_t
Ëö * 
sˇÀFø˘
) >> 32;

206 
out
 = 
ö
 << 
kShi·
;

208 if(
ö
 !(
out
 >> 
kShi·
))

209 
out
 = 0x7FFFFFFF ^ (
ö
 >> 31);

211 *
pD°
++ = 
out
;

214 
blkC¡
--;

219 
blkC¡
 > 0u)

223 
ö
 = *
pSrc
++;

224 
ö
 = ((
q63_t
Ëö * 
sˇÀFø˘
) >> 32;

226 
out
 = 
ö
 >> -
kShi·
;

228 *
pD°
++ = 
out
;

231 
blkC¡
--;

235 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q7.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_sˇÀ_q7
(

68 
q7_t
 * 
pSrc
,

69 
q7_t
 
sˇÀFø˘
,

70 
öt8_t
 
shi·
,

71 
q7_t
 * 
pD°
,

72 
uöt32_t
 
blockSize
)

74 
öt8_t
 
kShi·
 = 7 - 
shi·
;

75 
uöt32_t
 
blkC¡
;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q7_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
, 
out1
, 
out2
, 
out3
, 
out4
;

84 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

92 
ö1
 = *
pSrc
++;

93 
ö2
 = *
pSrc
++;

94 
ö3
 = *
pSrc
++;

95 
ö4
 = *
pSrc
++;

99 
out1
 = (
q7_t
Ë(
	`__SSAT
(((
ö1
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

100 
out2
 = (
q7_t
Ë(
	`__SSAT
(((
ö2
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

101 
out3
 = (
q7_t
Ë(
	`__SSAT
(((
ö3
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

102 
out4
 = (
q7_t
Ë(
	`__SSAT
(((
ö4
Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

106 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
out1
, 
out2
, 
out3
, 
out4
);

109 
blkC¡
--;

114 
blkC¡
 = 
blockSize
 % 0x4u;

116 
blkC¡
 > 0u)

120 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
(((*
pSrc
++Ë* 
sˇÀFø˘
Ë>> 
kShi·
, 8));

123 
blkC¡
--;

131 
blkC¡
 = 
blockSize
;

133 
blkC¡
 > 0u)

137 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((((
q15_t
Ë* 
pSrc
++ * 
sˇÀFø˘
Ë>> 
kShi·
), 8));

140 
blkC¡
--;

145 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_shi·_q15
(

67 
q15_t
 * 
pSrc
,

68 
öt8_t
 
shi·Bôs
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

73 
uöt8_t
 
sign
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
q15_t
 
ö1
, 
ö2
;

83 
blkC¡
 = 
blockSize
 >> 2u;

86 
sign
 = (
shi·Bôs
 & 0x80);

89 if(
sign
 == 0u)

93 
blkC¡
 > 0u)

96 
ö1
 = *
pSrc
++;

97 
ö2
 = *
pSrc
++;

100 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


102 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16),

103 
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16), 16);

107 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16),

108 
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16), 16);

112 
ö1
 = *
pSrc
++;

113 
ö2
 = *
pSrc
++;

115 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


117 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16),

118 
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16), 16);

122 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
	`__SSAT
((
ö2
 << 
shi·Bôs
), 16),

123 
	`__SSAT
((
ö1
 << 
shi·Bôs
), 16), 16);

128 
blkC¡
--;

133 
blkC¡
 = 
blockSize
 % 0x4u;

135 
blkC¡
 > 0u)

139 *
pD°
++ = 
	`__SSAT
((*
pSrc
++ << 
shi·Bôs
), 16);

142 
blkC¡
--;

149 
blkC¡
 > 0u)

152 
ö1
 = *
pSrc
++;

153 
ö2
 = *
pSrc
++;

157 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


159 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö1
 >> -
shi·Bôs
),

160 (
ö2
 >> -
shi·Bôs
), 16);

164 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö2
 >> -
shi·Bôs
),

165 (
ö1
 >> -
shi·Bôs
), 16);

169 
ö1
 = *
pSrc
++;

170 
ö2
 = *
pSrc
++;

172 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


174 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö1
 >> -
shi·Bôs
),

175 (
ö2
 >> -
shi·Bôs
), 16);

179 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
((
ö2
 >> -
shi·Bôs
),

180 (
ö1
 >> -
shi·Bôs
), 16);

185 
blkC¡
--;

190 
blkC¡
 = 
blockSize
 % 0x4u;

192 
blkC¡
 > 0u)

196 *
pD°
++ = (*
pSrc
++ >> -
shi·Bôs
);

199 
blkC¡
--;

208 
sign
 = (
shi·Bôs
 & 0x80);

211 if(
sign
 == 0u)

214 
blkC¡
 = 
blockSize
;

216 
blkC¡
 > 0u)

220 *
pD°
++ = 
	`__SSAT
(((
q31_t
Ë* 
pSrc
++ << 
shi·Bôs
), 16);

223 
blkC¡
--;

229 
blkC¡
 = 
blockSize
;

231 
blkC¡
 > 0u)

235 *
pD°
++ = (*
pSrc
++ >> -
shi·Bôs
);

238 
blkC¡
--;

244 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q31.c

41 
	~"¨m_m©h.h
"

84 
	$¨m_shi·_q31
(

85 
q31_t
 * 
pSrc
,

86 
öt8_t
 
shi·Bôs
,

87 
q31_t
 * 
pD°
,

88 
uöt32_t
 
blockSize
)

90 
uöt32_t
 
blkC¡
;

91 
uöt8_t
 
sign
 = (
shi·Bôs
 & 0x80);

93 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

96 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

99 
blkC¡
 = 
blockSize
 >> 2u;

102 if(
sign
 == 0u)

106 
blkC¡
 > 0u)

110 
ö1
 = *
pSrc
;

111 
ö2
 = *(
pSrc
 + 1);

112 
out1
 = 
ö1
 << 
shi·Bôs
;

113 
ö3
 = *(
pSrc
 + 2);

114 
out2
 = 
ö2
 << 
shi·Bôs
;

115 
ö4
 = *(
pSrc
 + 3);

116 if(
ö1
 !(
out1
 >> 
shi·Bôs
))

117 
out1
 = 0x7FFFFFFF ^ (
ö1
 >> 31);

119 if(
ö2
 !(
out2
 >> 
shi·Bôs
))

120 
out2
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

122 *
pD°
 = 
out1
;

123 
out3
 = 
ö3
 << 
shi·Bôs
;

124 *(
pD°
 + 1Ë
out2
;

125 
out4
 = 
ö4
 << 
shi·Bôs
;

127 if(
ö3
 !(
out3
 >> 
shi·Bôs
))

128 
out3
 = 0x7FFFFFFF ^ (
ö3
 >> 31);

130 if(
ö4
 !(
out4
 >> 
shi·Bôs
))

131 
out4
 = 0x7FFFFFFF ^ (
ö4
 >> 31);

133 *(
pD°
 + 2Ë
out3
;

134 *(
pD°
 + 3Ë
out4
;

137 
pSrc
 += 4u;

138 
pD°
 += 4u;

141 
blkC¡
--;

149 
blkC¡
 > 0u)

153 
ö1
 = *
pSrc
;

154 
ö2
 = *(
pSrc
 + 1);

155 
ö3
 = *(
pSrc
 + 2);

156 
ö4
 = *(
pSrc
 + 3);

158 *
pD°
 = (
ö1
 >> -
shi·Bôs
);

159 *(
pD°
 + 1Ë(
ö2
 >> -
shi·Bôs
);

160 *(
pD°
 + 2Ë(
ö3
 >> -
shi·Bôs
);

161 *(
pD°
 + 3Ë(
ö4
 >> -
shi·Bôs
);

164 
pSrc
 += 4u;

165 
pD°
 += 4u;

167 
blkC¡
--;

174 
blkC¡
 = 
blockSize
 % 0x4u;

182 
blkC¡
 = 
blockSize
;

187 
blkC¡
 > 0u)

191 *
pD°
++ = (
sign
 =0uË? 
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrc
++ << 
shi·Bôs
) :

192 (*
pSrc
++ >> -
shi·Bôs
);

195 
blkC¡
--;

199 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q7.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_shi·_q7
(

72 
q7_t
 * 
pSrc
,

73 
öt8_t
 
shi·Bôs
,

74 
q7_t
 * 
pD°
,

75 
uöt32_t
 
blockSize
)

77 
uöt32_t
 
blkC¡
;

78 
uöt8_t
 
sign
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q7_t
 
ö1
;

84 
q7_t
 
ö2
;

85 
q7_t
 
ö3
;

86 
q7_t
 
ö4
;

90 
blkC¡
 = 
blockSize
 >> 2u;

93 
sign
 = (
shi·Bôs
 & 0x80);

96 if(
sign
 == 0u)

100 
blkC¡
 > 0u)

104 
ö1
 = *
pSrc
;

105 
ö2
 = *(
pSrc
 + 1);

106 
ö3
 = *(
pSrc
 + 2);

107 
ö4
 = *(
pSrc
 + 3);

110 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
	`__SSAT
((
ö1
 << 
shi·Bôs
), 8),

111 
	`__SSAT
((
ö2
 << 
shi·Bôs
), 8),

112 
	`__SSAT
((
ö3
 << 
shi·Bôs
), 8),

113 
	`__SSAT
((
ö4
 << 
shi·Bôs
), 8));

115 
pSrc
 += 4u;

118 
blkC¡
--;

123 
blkC¡
 = 
blockSize
 % 0x4u;

125 
blkC¡
 > 0u)

129 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((*
pSrc
++ << 
shi·Bôs
), 8);

132 
blkC¡
--;

137 
shi·Bôs
 = -shiftBits;

140 
blkC¡
 > 0u)

144 
ö1
 = *
pSrc
;

145 
ö2
 = *(
pSrc
 + 1);

146 
ö3
 = *(
pSrc
 + 2);

147 
ö4
 = *(
pSrc
 + 3);

150 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
((
ö1
 >> 
shi·Bôs
), (
ö2
 >> shiftBits),

151 (
ö3
 >> 
shi·Bôs
), (
ö4
 >> shiftBits));

154 
pSrc
 += 4u;

157 
blkC¡
--;

162 
blkC¡
 = 
blockSize
 % 0x4u;

164 
blkC¡
 > 0u)

168 
ö1
 = *
pSrc
++;

169 *
pD°
++ = (
ö1
 >> 
shi·Bôs
);

172 
blkC¡
--;

181 
sign
 = (
shi·Bôs
 & 0x80);

184 if(
sign
 == 0u)

187 
blkC¡
 = 
blockSize
;

189 
blkC¡
 > 0u)

193 *
pD°
++ = (
q7_t
Ë
	`__SSAT
(((
q15_t
Ë* 
pSrc
++ << 
shi·Bôs
), 8);

196 
blkC¡
--;

202 
blkC¡
 = 
blockSize
;

204 
blkC¡
 > 0u)

208 *
pD°
++ = (*
pSrc
++ >> -
shi·Bôs
);

211 
blkC¡
--;

216 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_sub_f32
(

75 
Êﬂt32_t
 * 
pSrcA
,

76 
Êﬂt32_t
 * 
pSrcB
,

77 
Êﬂt32_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


85 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

86 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

98 
öA1
 = *
pSrcA
;

99 
öB1
 = *
pSrcB
;

100 
öA2
 = *(
pSrcA
 + 1);

101 
öB2
 = *(
pSrcB
 + 1);

102 
öA3
 = *(
pSrcA
 + 2);

103 
öB3
 = *(
pSrcB
 + 2);

104 
öA4
 = *(
pSrcA
 + 3);

105 
öB4
 = *(
pSrcB
 + 3);

109 *
pD°
 = 
öA1
 - 
öB1
;

110 *(
pD°
 + 1Ë
öA2
 - 
öB2
;

111 *(
pD°
 + 2Ë
öA3
 - 
öB3
;

112 *(
pD°
 + 3Ë
öA4
 - 
öB4
;

116 
pSrcA
 += 4u;

117 
pSrcB
 += 4u;

118 
pD°
 += 4u;

121 
blkC¡
--;

126 
blkC¡
 = 
blockSize
 % 0x4u;

133 
blkC¡
 = 
blockSize
;

137 
blkC¡
 > 0u)

141 *
pD°
++ = (*
pSrcA
++Ë- (*
pSrcB
++);

144 
blkC¡
--;

146 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q15.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_sub_q15
(

67 
q15_t
 * 
pSrcA
,

68 
q15_t
 * 
pSrcB
,

69 
q15_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
;

79 
q31_t
 
öB1
, 
öB2
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
	`__SIMD32
(
pSrcA
)++;

91 
öA2
 = *
	`__SIMD32
(
pSrcA
)++;

92 
öB1
 = *
	`__SIMD32
(
pSrcB
)++;

93 
öB2
 = *
	`__SIMD32
(
pSrcB
)++;

95 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB16
(
öA1
, 
öB1
);

96 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB16
(
öA2
, 
öB2
);

99 
blkC¡
--;

104 
blkC¡
 = 
blockSize
 % 0x4u;

106 
blkC¡
 > 0u)

110 *
pD°
++ = (
q15_t
Ë
	`__QSUB16
(*
pSrcA
++, *
pSrcB
++);

113 
blkC¡
--;

121 
blkC¡
 = 
blockSize
;

123 
blkC¡
 > 0u)

127 *
pD°
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pSrcA
++ - *
pSrcB
++), 16);

130 
blkC¡
--;

136 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_sub_q31
(

67 
q31_t
 * 
pSrcA
,

68 
q31_t
 * 
pSrcB
,

69 
q31_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

79 
q31_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

82 
blkC¡
 = 
blockSize
 >> 2u;

86 
blkC¡
 > 0u)

90 
öA1
 = *
pSrcA
++;

91 
öA2
 = *
pSrcA
++;

92 
öB1
 = *
pSrcB
++;

93 
öB2
 = *
pSrcB
++;

95 
öA3
 = *
pSrcA
++;

96 
öA4
 = *
pSrcA
++;

97 
öB3
 = *
pSrcB
++;

98 
öB4
 = *
pSrcB
++;

100 *
pD°
++ = 
	`__QSUB
(
öA1
, 
öB1
);

101 *
pD°
++ = 
	`__QSUB
(
öA2
, 
öB2
);

102 *
pD°
++ = 
	`__QSUB
(
öA3
, 
öB3
);

103 *
pD°
++ = 
	`__QSUB
(
öA4
, 
öB4
);

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 > 0u)

117 *
pD°
++ = 
	`__QSUB
(*
pSrcA
++, *
pSrcB
++);

120 
blkC¡
--;

128 
blkC¡
 = 
blockSize
;

130 
blkC¡
 > 0u)

134 *
pD°
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
((
q63_t
Ë* 
pSrcA
++ - *
pSrcB
++);

137 
blkC¡
--;

142 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q7.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_sub_q7
(

67 
q7_t
 * 
pSrcA
,

68 
q7_t
 * 
pSrcB
,

69 
q7_t
 * 
pD°
,

70 
uöt32_t
 
blockSize
)

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
blkC¡
 = 
blockSize
 >> 2u;

83 
blkC¡
 > 0u)

87 *
	`__SIMD32
(
pD°
)++ = 
	`__QSUB8
(*__SIMD32(
pSrcA
)++, *__SIMD32(
pSrcB
)++);

90 
blkC¡
--;

95 
blkC¡
 = 
blockSize
 % 0x4u;

97 
blkC¡
 > 0u)

101 *
pD°
++ = 
	`__SSAT
(*
pSrcA
++ - *
pSrcB
++, 8);

104 
blkC¡
--;

112 
blkC¡
 = 
blockSize
;

114 
blkC¡
 > 0u)

118 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q15_t
Ë* 
pSrcA
++ - *
pSrcB
++, 8);

121 
blkC¡
--;

127 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/CommonTables/arm_common_tables.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

80 c⁄° 
uöt16_t
 
	g¨mBôRevTabÀ
[1024] = {

206 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_16
[32] = {

240 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_32
[64] = {

290 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_64
[128] = {

373 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_128
[256] = {

519 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_256
[512] = {

793 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_512
[1024] = {

1322 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_1024
[2048] = {

2364 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_2048
[4096] = {

4430 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_4096
[8192] = {

8552 c⁄° 
q31_t
 
	gtwiddÀC€f_16_q31
[24] = {

8585 c⁄° 
q31_t
 
	gtwiddÀC€f_32_q31
[48] = {

8630 c⁄° 
q31_t
 
	gtwiddÀC€f_64_q31
[96] = {

8699 c⁄° 
q31_t
 
	gtwiddÀC€f_128_q31
[192] = {

8816 c⁄° 
q31_t
 
	gtwiddÀC€f_256_q31
[384] = {

9029 c⁄° 
q31_t
 
	gtwiddÀC€f_512_q31
[768] = {

9434 c⁄° 
q31_t
 
	gtwiddÀC€f_1024_q31
[1536] = {

10223 c⁄° 
q31_t
 
	gtwiddÀC€f_2048_q31
[3072] = {

11780 c⁄° 
q31_t
 
	gtwiddÀC€f_4096_q31
[6144] =

14881 c⁄° 
q15_t
 
	gtwiddÀC€f_16_q15
[24] = {

14914 c⁄° 
q15_t
 
	gtwiddÀC€f_32_q15
[48] = {

14959 c⁄° 
q15_t
 
	gtwiddÀC€f_64_q15
[96] = {

15028 c⁄° 
q15_t
 
	gtwiddÀC€f_128_q15
[192] = {

15145 c⁄° 
q15_t
 
	gtwiddÀC€f_256_q15
[384] = {

15358 c⁄° 
q15_t
 
	gtwiddÀC€f_512_q15
[768] = {

15763 c⁄° 
q15_t
 
	gtwiddÀC€f_1024_q15
[1536] = {

16552 c⁄° 
q15_t
 
	gtwiddÀC€f_2048_q15
[3072] = {

18109 c⁄° 
q15_t
 
	gtwiddÀC€f_4096_q15
[6144] =

21193 c⁄° 
q15_t
 
ALIGN4
 
	g¨mRecùTabÀQ15
[64] = {

21210 c⁄° 
q31_t
 
	g¨mRecùTabÀQ31
[64] = {

21224 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ16
[
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
] =

21230 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ32
[
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
] =

21238 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ64
[
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
] =

21247 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ128
[
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
] =

21265 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ256
[
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
] =

21303 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ512
[
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
] =

21343 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ1024
[
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
] =

21495 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ2048
[
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
] =

21837 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ4096
[
ARMBITREVINDEXTABLE4096_TABLE_LENGTH
] =

22209 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_16
[
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
] =

22215 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_32
[
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
] =

22222 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_64
[
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
] =

22230 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_128
[
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
] =

22241 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_256
[
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
] =

22260 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_512
[
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
] =

22294 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_1024
[
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
] =

22368 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_2048
[
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
] =

22524 c⁄° 
uöt16_t
 
	g¨mBôRevIndexTabÀ_fixed_4096
[
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
] =

22870 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_32
[32] = {

22889 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_64
[64] = {

22924 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_128
[128] = {

22991 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_256
[256] = {

23122 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_512
[512] = {

23381 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_1024
[1024] = {

23896 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_2048
[2048] = {

24923 c⁄° 
Êﬂt32_t
 
	gtwiddÀC€f_rf·_4096
[4096] = {

26988 c⁄° 
Êﬂt32_t
 
	gsöTabÀ_f32
[
FAST_MATH_TABLE_SIZE
 + 1] = {

27103 c⁄° 
q31_t
 
	gsöTabÀ_q31
[
FAST_MATH_TABLE_SIZE
 + 1] = {

27210 c⁄° 
q15_t
 
	gsöTabÀ_q15
[
FAST_MATH_TABLE_SIZE
 + 1] = {

	@Drivers/CMSIS/DSP_Lib/Source/CommonTables/arm_const_structs.c

43 
	~"¨m_c⁄°_°ru˘s.h
"

47 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn16
 = {

48 16, 
twiddÀC€f_16
, 
¨mBôRevIndexTabÀ16
, 
ARMBITREVINDEXTABLE__16_TABLE_LENGTH


51 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn32
 = {

52 32, 
twiddÀC€f_32
, 
¨mBôRevIndexTabÀ32
, 
ARMBITREVINDEXTABLE__32_TABLE_LENGTH


55 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn64
 = {

56 64, 
twiddÀC€f_64
, 
¨mBôRevIndexTabÀ64
, 
ARMBITREVINDEXTABLE__64_TABLE_LENGTH


59 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn128
 = {

60 128, 
twiddÀC€f_128
, 
¨mBôRevIndexTabÀ128
, 
ARMBITREVINDEXTABLE_128_TABLE_LENGTH


63 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn256
 = {

64 256, 
twiddÀC€f_256
, 
¨mBôRevIndexTabÀ256
, 
ARMBITREVINDEXTABLE_256_TABLE_LENGTH


67 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn512
 = {

68 512, 
twiddÀC€f_512
, 
¨mBôRevIndexTabÀ512
, 
ARMBITREVINDEXTABLE_512_TABLE_LENGTH


71 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn1024
 = {

72 1024, 
twiddÀC€f_1024
, 
¨mBôRevIndexTabÀ1024
, 
ARMBITREVINDEXTABLE1024_TABLE_LENGTH


75 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn2048
 = {

76 2048, 
twiddÀC€f_2048
, 
¨mBôRevIndexTabÀ2048
, 
ARMBITREVINDEXTABLE2048_TABLE_LENGTH


79 c⁄° 
¨m_cf·_ö°™˚_f32
 
	g¨m_cf·_sR_f32_Àn4096
 = {

80 4096, 
twiddÀC€f_4096
, 
¨mBôRevIndexTabÀ4096
, 
ARMBITREVINDEXTABLE4096_TABLE_LENGTH


85 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn16
 = {

86 16, 
twiddÀC€f_16_q31
, 
¨mBôRevIndexTabÀ_fixed_16
, 
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH


89 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn32
 = {

90 32, 
twiddÀC€f_32_q31
, 
¨mBôRevIndexTabÀ_fixed_32
, 
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH


93 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn64
 = {

94 64, 
twiddÀC€f_64_q31
, 
¨mBôRevIndexTabÀ_fixed_64
, 
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH


97 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn128
 = {

98 128, 
twiddÀC€f_128_q31
, 
¨mBôRevIndexTabÀ_fixed_128
, 
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH


101 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn256
 = {

102 256, 
twiddÀC€f_256_q31
, 
¨mBôRevIndexTabÀ_fixed_256
, 
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH


105 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn512
 = {

106 512, 
twiddÀC€f_512_q31
, 
¨mBôRevIndexTabÀ_fixed_512
, 
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH


109 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn1024
 = {

110 1024, 
twiddÀC€f_1024_q31
, 
¨mBôRevIndexTabÀ_fixed_1024
, 
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH


113 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn2048
 = {

114 2048, 
twiddÀC€f_2048_q31
, 
¨mBôRevIndexTabÀ_fixed_2048
, 
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH


117 c⁄° 
¨m_cf·_ö°™˚_q31
 
	g¨m_cf·_sR_q31_Àn4096
 = {

118 4096, 
twiddÀC€f_4096_q31
, 
¨mBôRevIndexTabÀ_fixed_4096
, 
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH


122 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn16
 = {

123 16, 
twiddÀC€f_16_q15
, 
¨mBôRevIndexTabÀ_fixed_16
, 
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH


126 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn32
 = {

127 32, 
twiddÀC€f_32_q15
, 
¨mBôRevIndexTabÀ_fixed_32
, 
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH


130 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn64
 = {

131 64, 
twiddÀC€f_64_q15
, 
¨mBôRevIndexTabÀ_fixed_64
, 
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH


134 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn128
 = {

135 128, 
twiddÀC€f_128_q15
, 
¨mBôRevIndexTabÀ_fixed_128
, 
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH


138 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn256
 = {

139 256, 
twiddÀC€f_256_q15
, 
¨mBôRevIndexTabÀ_fixed_256
, 
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH


142 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn512
 = {

143 512, 
twiddÀC€f_512_q15
, 
¨mBôRevIndexTabÀ_fixed_512
, 
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH


146 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn1024
 = {

147 1024, 
twiddÀC€f_1024_q15
, 
¨mBôRevIndexTabÀ_fixed_1024
, 
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH


150 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn2048
 = {

151 2048, 
twiddÀC€f_2048_q15
, 
¨mBôRevIndexTabÀ_fixed_2048
, 
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH


154 c⁄° 
¨m_cf·_ö°™˚_q15
 
	g¨m_cf·_sR_q15_Àn4096
 = {

155 4096, 
twiddÀC€f_4096_q15
, 
¨mBôRevIndexTabÀ_fixed_4096
, 
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH


	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_f32.c

40 
	~"¨m_m©h.h
"

82 
	$¨m_cm∂x_c⁄j_f32
(

83 
Êﬂt32_t
 * 
pSrc
,

84 
Êﬂt32_t
 * 
pD°
,

85 
uöt32_t
 
numSam∂es
)

87 
uöt32_t
 
blkC¡
;

89 #i‚de‡
ARM_MATH_CM0_FAMILY


92 
Êﬂt32_t
 
öR1
, 
öR2
, 
öR3
, 
öR4
;

93 
Êﬂt32_t
 
öI1
, 
öI2
, 
öI3
, 
öI4
;

96 
blkC¡
 = 
numSam∂es
 >> 2u;

100 
blkC¡
 > 0u)

105 
öR1
 = 
pSrc
[0];

107 
pD°
[0] = 
öR1
;

108 
öR2
 = 
pSrc
[2];

109 
pD°
[2] = 
öR2
;

110 
öR3
 = 
pSrc
[4];

111 
pD°
[4] = 
öR3
;

112 
öR4
 = 
pSrc
[6];

113 
pD°
[6] = 
öR4
;

116 
öI1
 = 
pSrc
[1];

117 
öI2
 = 
pSrc
[3];

120 
öI1
 = -inI1;

123 
öI3
 = 
pSrc
[5];

126 
öI2
 = -inI2;

129 
öI4
 = 
pSrc
[7];

132 
öI3
 = -inI3;

135 
pD°
[1] = 
öI1
;

136 
pD°
[3] = 
öI2
;

139 
öI4
 = -inI4;

142 
pD°
[5] = 
öI3
;

145 
pSrc
 += 8u;

148 
pD°
[7] = 
öI4
;

151 
pD°
 += 8u;

154 
blkC¡
--;

159 
blkC¡
 = 
numSam∂es
 % 0x4u;

164 
blkC¡
 = 
numSam∂es
;

168 
blkC¡
 > 0u)

172 *
pD°
++ = *
pSrc
++;

173 *
pD°
++ = -*
pSrc
++;

176 
blkC¡
--;

178 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_c⁄j_q15
(

66 
q15_t
 * 
pSrc
,

67 
q15_t
 * 
pD°
,

68 
uöt32_t
 
numSam∂es
)

71 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
uöt32_t
 
blkC¡
;

75 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

76 
q31_t
 
zîo
 = 0;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

87 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

88 
ö2
 = *
	`__SIMD32
(
pSrc
)++;

89 
ö3
 = *
	`__SIMD32
(
pSrc
)++;

90 
ö4
 = *
	`__SIMD32
(
pSrc
)++;

92 #i‚de‡
ARM_MATH_BIG_ENDIAN


94 
ö1
 = 
	`__QASX
(
zîo
, in1);

95 
ö2
 = 
	`__QASX
(
zîo
, in2);

96 
ö3
 = 
	`__QASX
(
zîo
, in3);

97 
ö4
 = 
	`__QASX
(
zîo
, in4);

101 
ö1
 = 
	`__QSAX
(
zîo
, in1);

102 
ö2
 = 
	`__QSAX
(
zîo
, in2);

103 
ö3
 = 
	`__QSAX
(
zîo
, in3);

104 
ö4
 = 
	`__QSAX
(
zîo
, in4);

108 
ö1
 = ((
uöt32_t
) in1 >> 16) | ((uint32_t) in1 << 16);

109 
ö2
 = ((
uöt32_t
) in2 >> 16) | ((uint32_t) in2 << 16);

110 
ö3
 = ((
uöt32_t
) in3 >> 16) | ((uint32_t) in3 << 16);

111 
ö4
 = ((
uöt32_t
) in4 >> 16) | ((uint32_t) in4 << 16);

113 *
	`__SIMD32
(
pD°
)++ = 
ö1
;

114 *
	`__SIMD32
(
pD°
)++ = 
ö2
;

115 *
	`__SIMD32
(
pD°
)++ = 
ö3
;

116 *
	`__SIMD32
(
pD°
)++ = 
ö4
;

119 
blkC¡
--;

124 
blkC¡
 = 
numSam∂es
 % 0x4u;

126 
blkC¡
 > 0u)

130 *
pD°
++ = *
pSrc
++;

131 *
pD°
++ = 
	`__SSAT
(-*
pSrc
++, 16);

134 
blkC¡
--;

139 
q15_t
 
ö
;

143 
numSam∂es
 > 0u)

147 *
pD°
++ = *
pSrc
++;

148 
ö
 = *
pSrc
++;

149 *
pD°
++ = (
ö
 =(
q15_t
) 0x8000) ? 0x7fff : -in;

152 
numSam∂es
--;

157 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q31.c

40 
	~"¨m_m©h.h
"

64 
	$¨m_cm∂x_c⁄j_q31
(

65 
q31_t
 * 
pSrc
,

66 
q31_t
 * 
pD°
,

67 
uöt32_t
 
numSam∂es
)

69 
uöt32_t
 
blkC¡
;

70 
q31_t
 
ö
;

72 #i‚de‡
ARM_MATH_CM0_FAMILY


75 
q31_t
 
öR1
, 
öR2
, 
öR3
, 
öR4
;

76 
q31_t
 
öI1
, 
öI2
, 
öI3
, 
öI4
;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

89 
öR1
 = 
pSrc
[0];

91 
pD°
[0] = 
öR1
;

94 
öI1
 = 
pSrc
[1];

97 
öR2
 = 
pSrc
[2];

99 
pD°
[2] = 
öR2
;

102 
öI2
 = 
pSrc
[3];

105 
öI1
 = 
	`__QSUB
(0, inI1);

108 
öR3
 = 
pSrc
[4];

110 
pD°
[4] = 
öR3
;

113 
öI3
 = 
pSrc
[5];

116 
öI2
 = 
	`__QSUB
(0, inI2);

119 
öR4
 = 
pSrc
[6];

121 
pD°
[6] = 
öR4
;

124 
öI3
 = 
	`__QSUB
(0, inI3);

127 
öI4
 = 
pSrc
[7];

130 
pD°
[1] = 
öI1
;

133 
öI4
 = 
	`__QSUB
(0, inI4);

136 
pD°
[3] = 
öI2
;

139 
pSrc
 += 8u;

142 
pD°
[5] = 
öI3
;

143 
pD°
[7] = 
öI4
;

146 
pD°
 += 8u;

149 
blkC¡
--;

154 
blkC¡
 = 
numSam∂es
 % 0x4u;

159 
blkC¡
 = 
numSam∂es
;

164 
blkC¡
 > 0u)

169 *
pD°
++ = *
pSrc
++;

170 
ö
 = *
pSrc
++;

171 *
pD°
++ = (
ö
 =
INT32_MIN
Ë? 
INT32_MAX
 : -in;

174 
blkC¡
--;

176 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c

41 
	~"¨m_m©h.h
"

88 
	$¨m_cm∂x_dŸ_¥od_f32
(

89 
Êﬂt32_t
 * 
pSrcA
,

90 
Êﬂt32_t
 * 
pSrcB
,

91 
uöt32_t
 
numSam∂es
,

92 
Êﬂt32_t
 * 
ªÆResu…
,

93 
Êﬂt32_t
 * 
imagResu…
)

95 
Êﬂt32_t
 
ªÆ_sum
 = 0.0f, 
imag_sum
 = 0.0f;

96 
Êﬂt32_t
 
a0
,
b0
,
c0
,
d0
;

98 #i‚de‡
ARM_MATH_CM0_FAMILY


101 
uöt32_t
 
blkC¡
;

104 
blkC¡
 = 
numSam∂es
 >> 2u;

108 
blkC¡
 > 0u)

110 
a0
 = *
pSrcA
++;

111 
b0
 = *
pSrcA
++;

112 
c0
 = *
pSrcB
++;

113 
d0
 = *
pSrcB
++;

115 
ªÆ_sum
 +
a0
 * 
c0
;

116 
imag_sum
 +
a0
 * 
d0
;

117 
ªÆ_sum
 -
b0
 * 
d0
;

118 
imag_sum
 +
b0
 * 
c0
;

120 
a0
 = *
pSrcA
++;

121 
b0
 = *
pSrcA
++;

122 
c0
 = *
pSrcB
++;

123 
d0
 = *
pSrcB
++;

125 
ªÆ_sum
 +
a0
 * 
c0
;

126 
imag_sum
 +
a0
 * 
d0
;

127 
ªÆ_sum
 -
b0
 * 
d0
;

128 
imag_sum
 +
b0
 * 
c0
;

130 
a0
 = *
pSrcA
++;

131 
b0
 = *
pSrcA
++;

132 
c0
 = *
pSrcB
++;

133 
d0
 = *
pSrcB
++;

135 
ªÆ_sum
 +
a0
 * 
c0
;

136 
imag_sum
 +
a0
 * 
d0
;

137 
ªÆ_sum
 -
b0
 * 
d0
;

138 
imag_sum
 +
b0
 * 
c0
;

140 
a0
 = *
pSrcA
++;

141 
b0
 = *
pSrcA
++;

142 
c0
 = *
pSrcB
++;

143 
d0
 = *
pSrcB
++;

145 
ªÆ_sum
 +
a0
 * 
c0
;

146 
imag_sum
 +
a0
 * 
d0
;

147 
ªÆ_sum
 -
b0
 * 
d0
;

148 
imag_sum
 +
b0
 * 
c0
;

151 
blkC¡
--;

156 
blkC¡
 = 
numSam∂es
 & 0x3u;

158 
blkC¡
 > 0u)

160 
a0
 = *
pSrcA
++;

161 
b0
 = *
pSrcA
++;

162 
c0
 = *
pSrcB
++;

163 
d0
 = *
pSrcB
++;

165 
ªÆ_sum
 +
a0
 * 
c0
;

166 
imag_sum
 +
a0
 * 
d0
;

167 
ªÆ_sum
 -
b0
 * 
d0
;

168 
imag_sum
 +
b0
 * 
c0
;

171 
blkC¡
--;

178 
numSam∂es
 > 0u)

180 
a0
 = *
pSrcA
++;

181 
b0
 = *
pSrcA
++;

182 
c0
 = *
pSrcB
++;

183 
d0
 = *
pSrcB
++;

185 
ªÆ_sum
 +
a0
 * 
c0
;

186 
imag_sum
 +
a0
 * 
d0
;

187 
ªÆ_sum
 -
b0
 * 
d0
;

188 
imag_sum
 +
b0
 * 
c0
;

191 
numSam∂es
--;

197 *
ªÆResu…
 = 
ªÆ_sum
;

198 *
imagResu…
 = 
imag_sum
;

199 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q15.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_cm∂x_dŸ_¥od_q15
(

71 
q15_t
 * 
pSrcA
,

72 
q15_t
 * 
pSrcB
,

73 
uöt32_t
 
numSam∂es
,

74 
q31_t
 * 
ªÆResu…
,

75 
q31_t
 * 
imagResu…
)

77 
q63_t
 
ªÆ_sum
 = 0, 
imag_sum
 = 0;

78 
q15_t
 
a0
,
b0
,
c0
,
d0
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
uöt32_t
 
blkC¡
;

87 
blkC¡
 = 
numSam∂es
 >> 2u;

91 
blkC¡
 > 0u)

93 
a0
 = *
pSrcA
++;

94 
b0
 = *
pSrcA
++;

95 
c0
 = *
pSrcB
++;

96 
d0
 = *
pSrcB
++;

98 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

99 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

100 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

101 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

103 
a0
 = *
pSrcA
++;

104 
b0
 = *
pSrcA
++;

105 
c0
 = *
pSrcB
++;

106 
d0
 = *
pSrcB
++;

108 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

109 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

110 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

111 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

113 
a0
 = *
pSrcA
++;

114 
b0
 = *
pSrcA
++;

115 
c0
 = *
pSrcB
++;

116 
d0
 = *
pSrcB
++;

118 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

119 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

120 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

121 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

123 
a0
 = *
pSrcA
++;

124 
b0
 = *
pSrcA
++;

125 
c0
 = *
pSrcB
++;

126 
d0
 = *
pSrcB
++;

128 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

129 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

130 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

131 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

134 
blkC¡
--;

139 
blkC¡
 = 
numSam∂es
 % 0x4u;

141 
blkC¡
 > 0u)

143 
a0
 = *
pSrcA
++;

144 
b0
 = *
pSrcA
++;

145 
c0
 = *
pSrcB
++;

146 
d0
 = *
pSrcB
++;

148 
ªÆ_sum
 +(
q31_t
)
a0
 * 
c0
;

149 
imag_sum
 +(
q31_t
)
a0
 * 
d0
;

150 
ªÆ_sum
 -(
q31_t
)
b0
 * 
d0
;

151 
imag_sum
 +(
q31_t
)
b0
 * 
c0
;

154 
blkC¡
--;

161 
numSam∂es
 > 0u)

163 
a0
 = *
pSrcA
++;

164 
b0
 = *
pSrcA
++;

165 
c0
 = *
pSrcB
++;

166 
d0
 = *
pSrcB
++;

168 
ªÆ_sum
 +
a0
 * 
c0
;

169 
imag_sum
 +
a0
 * 
d0
;

170 
ªÆ_sum
 -
b0
 * 
d0
;

171 
imag_sum
 +
b0
 * 
c0
;

175 
numSam∂es
--;

182 *
ªÆResu…
 = (
q31_t
Ë(
ªÆ_sum
 >> 6);

184 *
imagResu…
 = (
q31_t
Ë(
imag_sum
 >> 6);

185 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q31.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_cm∂x_dŸ_¥od_q31
(

72 
q31_t
 * 
pSrcA
,

73 
q31_t
 * 
pSrcB
,

74 
uöt32_t
 
numSam∂es
,

75 
q63_t
 * 
ªÆResu…
,

76 
q63_t
 * 
imagResu…
)

78 
q63_t
 
ªÆ_sum
 = 0, 
imag_sum
 = 0;

79 
q31_t
 
a0
,
b0
,
c0
,
d0
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
uöt32_t
 
blkC¡
;

88 
blkC¡
 = 
numSam∂es
 >> 2u;

92 
blkC¡
 > 0u)

94 
a0
 = *
pSrcA
++;

95 
b0
 = *
pSrcA
++;

96 
c0
 = *
pSrcB
++;

97 
d0
 = *
pSrcB
++;

99 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

100 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

101 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

102 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

104 
a0
 = *
pSrcA
++;

105 
b0
 = *
pSrcA
++;

106 
c0
 = *
pSrcB
++;

107 
d0
 = *
pSrcB
++;

109 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

110 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

111 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

112 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

114 
a0
 = *
pSrcA
++;

115 
b0
 = *
pSrcA
++;

116 
c0
 = *
pSrcB
++;

117 
d0
 = *
pSrcB
++;

119 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

120 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

121 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

122 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

124 
a0
 = *
pSrcA
++;

125 
b0
 = *
pSrcA
++;

126 
c0
 = *
pSrcB
++;

127 
d0
 = *
pSrcB
++;

129 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

130 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

131 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

132 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

135 
blkC¡
--;

140 
blkC¡
 = 
numSam∂es
 % 0x4u;

142 
blkC¡
 > 0u)

144 
a0
 = *
pSrcA
++;

145 
b0
 = *
pSrcA
++;

146 
c0
 = *
pSrcB
++;

147 
d0
 = *
pSrcB
++;

149 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

150 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

151 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

152 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

155 
blkC¡
--;

162 
numSam∂es
 > 0u)

164 
a0
 = *
pSrcA
++;

165 
b0
 = *
pSrcA
++;

166 
c0
 = *
pSrcB
++;

167 
d0
 = *
pSrcB
++;

169 
ªÆ_sum
 +((
q63_t
)
a0
 * 
c0
) >> 14;

170 
imag_sum
 +((
q63_t
)
a0
 * 
d0
) >> 14;

171 
ªÆ_sum
 -((
q63_t
)
b0
 * 
d0
) >> 14;

172 
imag_sum
 +((
q63_t
)
b0
 * 
c0
) >> 14;

175 
numSam∂es
--;

181 *
ªÆResu…
 = 
ªÆ_sum
;

182 *
imagResu…
 = 
imag_sum
;

183 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_f32.c

41 
	~"¨m_m©h.h
"

84 
	$¨m_cm∂x_mag_f32
(

85 
Êﬂt32_t
 * 
pSrc
,

86 
Êﬂt32_t
 * 
pD°
,

87 
uöt32_t
 
numSam∂es
)

89 
Êﬂt32_t
 
ªÆIn
, 
imagIn
;

91 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
uöt32_t
 
blkC¡
;

97 
blkC¡
 = 
numSam∂es
 >> 2u;

101 
blkC¡
 > 0u)

105 
ªÆIn
 = *
pSrc
++;

106 
imagIn
 = *
pSrc
++;

108 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

110 
ªÆIn
 = *
pSrc
++;

111 
imagIn
 = *
pSrc
++;

112 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

114 
ªÆIn
 = *
pSrc
++;

115 
imagIn
 = *
pSrc
++;

116 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

118 
ªÆIn
 = *
pSrc
++;

119 
imagIn
 = *
pSrc
++;

120 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

124 
blkC¡
--;

129 
blkC¡
 = 
numSam∂es
 % 0x4u;

131 
blkC¡
 > 0u)

134 
ªÆIn
 = *
pSrc
++;

135 
imagIn
 = *
pSrc
++;

137 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

140 
blkC¡
--;

147 
numSam∂es
 > 0u)

150 
ªÆIn
 = *
pSrc
++;

151 
imagIn
 = *
pSrc
++;

153 
	`¨m_sqπ_f32
((
ªÆIn
 *ÑólInË+ (
imagIn
 * imagIn), 
pD°
++);

156 
numSam∂es
--;

161 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_mag_q15
(

66 
q15_t
 * 
pSrc
,

67 
q15_t
 * 
pD°
,

68 
uöt32_t
 
numSam∂es
)

70 
q31_t
 
acc0
, 
acc1
;

72 #i‚de‡
ARM_MATH_CM0_FAMILY


75 
uöt32_t
 
blkC¡
;

76 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

77 
q31_t
 
acc2
, 
acc3
;

81 
blkC¡
 = 
numSam∂es
 >> 2u;

85 
blkC¡
 > 0u)

89 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

90 
ö2
 = *
	`__SIMD32
(
pSrc
)++;

91 
ö3
 = *
	`__SIMD32
(
pSrc
)++;

92 
ö4
 = *
	`__SIMD32
(
pSrc
)++;

94 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

95 
acc1
 = 
	`__SMUAD
(
ö2
, in2);

96 
acc2
 = 
	`__SMUAD
(
ö3
, in3);

97 
acc3
 = 
	`__SMUAD
(
ö4
, in4);

100 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc0
Ë>> 17), 
pD°
++);

101 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc1
Ë>> 17), 
pD°
++);

102 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc2
Ë>> 17), 
pD°
++);

103 
	`¨m_sqπ_q15
((
q15_t
Ë((
acc3
Ë>> 17), 
pD°
++);

106 
blkC¡
--;

111 
blkC¡
 = 
numSam∂es
 % 0x4u;

113 
blkC¡
 > 0u)

116 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

117 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

120 
	`¨m_sqπ_q15
((
q15_t
Ë(
acc0
 >> 17), 
pD°
++);

123 
blkC¡
--;

129 
q15_t
 
ªÆ
, 
imag
;

131 
numSam∂es
 > 0u)

134 
ªÆ
 = *
pSrc
++;

135 
imag
 = *
pSrc
++;

137 
acc0
 = (
ªÆ
 *Ñeal);

138 
acc1
 = (
imag
 * imag);

141 
	`¨m_sqπ_q15
((
q15_t
Ë(((
q63_t
Ë
acc0
 + 
acc1
Ë>> 17), 
pD°
++);

144 
numSam∂es
--;

149 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q31.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_mag_q31
(

66 
q31_t
 * 
pSrc
,

67 
q31_t
 * 
pD°
,

68 
uöt32_t
 
numSam∂es
)

70 
q31_t
 
ªÆ
, 
imag
;

71 
q31_t
 
acc0
, 
acc1
;

72 
uöt32_t
 
blkC¡
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
q31_t
 
ªÆ1
, 
ªÆ2
, 
imag1
, 
imag2
;

78 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

79 
q63_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

83 
blkC¡
 = 
numSam∂es
 >> 2u;

87 
blkC¡
 > 0u)

90 
ªÆ1
 = 
pSrc
[0];

91 
imag1
 = 
pSrc
[1];

92 
ªÆ2
 = 
pSrc
[2];

93 
imag2
 = 
pSrc
[3];

96 
mul1
 = (
q63_t
Ë
ªÆ1
 *real1;

97 
mul2
 = (
q63_t
Ë
imag1
 *imag1;

98 
mul3
 = (
q63_t
Ë
ªÆ2
 *real2;

99 
mul4
 = (
q63_t
Ë
imag2
 *imag2;

102 
out1
 = (
q31_t
Ë(
mul1
 >> 33);

103 
out2
 = (
q31_t
Ë(
mul2
 >> 33);

104 
out3
 = (
q31_t
Ë(
mul3
 >> 33);

105 
out4
 = (
q31_t
Ë(
mul4
 >> 33);

108 
out1
 = out1 + 
out2
;

109 
out3
 = out3 + 
out4
;

112 
ªÆ1
 = 
pSrc
[4];

113 
imag1
 = 
pSrc
[5];

114 
ªÆ2
 = 
pSrc
[6];

115 
imag2
 = 
pSrc
[7];

118 
	`¨m_sqπ_q31
(
out1
, &
pD°
[0]);

121 
mul1
 = (
q63_t
Ë
ªÆ1
 *real1;

124 
	`¨m_sqπ_q31
(
out3
, &
pD°
[1]);

127 
mul2
 = (
q63_t
Ë
imag1
 *imag1;

128 
mul3
 = (
q63_t
Ë
ªÆ2
 *real2;

129 
mul4
 = (
q63_t
Ë
imag2
 *imag2;

132 
out1
 = (
q31_t
Ë(
mul1
 >> 33);

133 
out2
 = (
q31_t
Ë(
mul2
 >> 33);

134 
out3
 = (
q31_t
Ë(
mul3
 >> 33);

135 
out4
 = (
q31_t
Ë(
mul4
 >> 33);

138 
out1
 = out1 + 
out2
;

139 
out3
 = out3 + 
out4
;

142 
	`¨m_sqπ_q31
(
out1
, &
pD°
[2]);

145 
pSrc
 += 8u;

148 
	`¨m_sqπ_q31
(
out3
, &
pD°
[3]);

151 
pD°
 += 4u;

154 
blkC¡
--;

159 
blkC¡
 = 
numSam∂es
 % 0x4u;

164 
blkC¡
 = 
numSam∂es
;

168 
blkC¡
 > 0u)

171 
ªÆ
 = *
pSrc
++;

172 
imag
 = *
pSrc
++;

173 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

174 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

176 
	`¨m_sqπ_q31
(
acc0
 + 
acc1
, 
pD°
++);

179 
blkC¡
--;

181 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c

40 
	~"¨m_m©h.h
"

84 
	$¨m_cm∂x_mag_squ¨ed_f32
(

85 
Êﬂt32_t
 * 
pSrc
,

86 
Êﬂt32_t
 * 
pD°
,

87 
uöt32_t
 
numSam∂es
)

89 
Êﬂt32_t
 
ªÆ
, 
imag
;

90 
uöt32_t
 
blkC¡
;

92 #i‚de‡
ARM_MATH_CM0_FAMILY


93 
Êﬂt32_t
 
ªÆ1
, 
ªÆ2
, 
ªÆ3
, 
ªÆ4
;

94 
Êﬂt32_t
 
imag1
, 
imag2
, 
imag3
, 
imag4
;

95 
Êﬂt32_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

96 
Êﬂt32_t
 
mul5
, 
mul6
, 
mul7
, 
mul8
;

97 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

100 
blkC¡
 = 
numSam∂es
 >> 2u;

104 
blkC¡
 > 0u)

108 
ªÆ1
 = 
pSrc
[0];

110 
imag1
 = 
pSrc
[1];

113 
mul1
 = 
ªÆ1
 *Ñeal1;

116 
ªÆ2
 = 
pSrc
[2];

119 
mul2
 = 
imag1
 * imag1;

122 
imag2
 = 
pSrc
[3];

125 
mul3
 = 
ªÆ2
 *Ñeal2;

128 
ªÆ3
 = 
pSrc
[4];

131 
mul4
 = 
imag2
 * imag2;

134 
imag3
 = 
pSrc
[5];

137 
mul5
 = 
ªÆ3
 *Ñeal3;

139 
mul6
 = 
imag3
 * imag3;

142 
ªÆ4
 = 
pSrc
[6];

145 
out1
 = 
mul1
 + 
mul2
;

148 
imag4
 = 
pSrc
[7];

151 
out2
 = 
mul3
 + 
mul4
;

154 
mul7
 = 
ªÆ4
 *Ñeal4;

156 
mul8
 = 
imag4
 * imag4;

159 
pD°
[0] = 
out1
;

162 
out3
 = 
mul5
 + 
mul6
;

165 
pD°
[1] = 
out2
;

168 
out4
 = 
mul7
 + 
mul8
;

171 
pD°
[2] = 
out3
;

174 
pSrc
 += 8u;

177 
pD°
[3] = 
out4
;

180 
pD°
 += 4u;

183 
blkC¡
--;

188 
blkC¡
 = 
numSam∂es
 % 0x4u;

194 
blkC¡
 = 
numSam∂es
;

198 
blkC¡
 > 0u)

201 
ªÆ
 = *
pSrc
++;

202 
imag
 = *
pSrc
++;

206 *
pD°
++ = (
ªÆ
 *ÑólË+ (
imag
 * imag);

209 
blkC¡
--;

211 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q15.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_cm∂x_mag_squ¨ed_q15
(

65 
q15_t
 * 
pSrc
,

66 
q15_t
 * 
pD°
,

67 
uöt32_t
 
numSam∂es
)

69 
q31_t
 
acc0
, 
acc1
;

71 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
uöt32_t
 
blkC¡
;

75 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

76 
q31_t
 
acc2
, 
acc3
;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

86 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

87 
ö2
 = *
	`__SIMD32
(
pSrc
)++;

88 
ö3
 = *
	`__SIMD32
(
pSrc
)++;

89 
ö4
 = *
	`__SIMD32
(
pSrc
)++;

91 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

92 
acc1
 = 
	`__SMUAD
(
ö2
, in2);

93 
acc2
 = 
	`__SMUAD
(
ö3
, in3);

94 
acc3
 = 
	`__SMUAD
(
ö4
, in4);

97 *
pD°
++ = (
q15_t
Ë(
acc0
 >> 17);

98 *
pD°
++ = (
q15_t
Ë(
acc1
 >> 17);

99 *
pD°
++ = (
q15_t
Ë(
acc2
 >> 17);

100 *
pD°
++ = (
q15_t
Ë(
acc3
 >> 17);

103 
blkC¡
--;

108 
blkC¡
 = 
numSam∂es
 % 0x4u;

110 
blkC¡
 > 0u)

113 
ö1
 = *
	`__SIMD32
(
pSrc
)++;

114 
acc0
 = 
	`__SMUAD
(
ö1
, in1);

117 *
pD°
++ = (
q15_t
Ë(
acc0
 >> 17);

120 
blkC¡
--;

126 
q15_t
 
ªÆ
, 
imag
;

128 
numSam∂es
 > 0u)

131 
ªÆ
 = *
pSrc
++;

132 
imag
 = *
pSrc
++;

133 
acc0
 = (
ªÆ
 *Ñeal);

134 
acc1
 = (
imag
 * imag);

136 *
pD°
++ = (
q15_t
Ë(((
q63_t
Ë
acc0
 + 
acc1
) >> 17);

139 
numSam∂es
--;

144 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_cm∂x_mag_squ¨ed_q31
(

67 
q31_t
 * 
pSrc
,

68 
q31_t
 * 
pD°
,

69 
uöt32_t
 
numSam∂es
)

71 
q31_t
 
ªÆ
, 
imag
;

72 
q31_t
 
acc0
, 
acc1
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


77 
uöt32_t
 
blkC¡
;

80 
blkC¡
 = 
numSam∂es
 >> 2u;

84 
blkC¡
 > 0u)

87 
ªÆ
 = *
pSrc
++;

88 
imag
 = *
pSrc
++;

89 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

90 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

92 *
pD°
++ = 
acc0
 + 
acc1
;

94 
ªÆ
 = *
pSrc
++;

95 
imag
 = *
pSrc
++;

96 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

97 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

99 *
pD°
++ = 
acc0
 + 
acc1
;

101 
ªÆ
 = *
pSrc
++;

102 
imag
 = *
pSrc
++;

103 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

104 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

106 *
pD°
++ = 
acc0
 + 
acc1
;

108 
ªÆ
 = *
pSrc
++;

109 
imag
 = *
pSrc
++;

110 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

111 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

113 *
pD°
++ = 
acc0
 + 
acc1
;

116 
blkC¡
--;

121 
blkC¡
 = 
numSam∂es
 % 0x4u;

123 
blkC¡
 > 0u)

126 
ªÆ
 = *
pSrc
++;

127 
imag
 = *
pSrc
++;

128 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

129 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

131 *
pD°
++ = 
acc0
 + 
acc1
;

134 
blkC¡
--;

141 
numSam∂es
 > 0u)

144 
ªÆ
 = *
pSrc
++;

145 
imag
 = *
pSrc
++;

146 
acc0
 = (
q31_t
Ë(((
q63_t
Ë
ªÆ
 *Ñeal) >> 33);

147 
acc1
 = (
q31_t
Ë(((
q63_t
Ë
imag
 * imag) >> 33);

149 *
pD°
++ = 
acc0
 + 
acc1
;

152 
numSam∂es
--;

157 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c

40 
	~"¨m_m©h.h
"

83 
	$¨m_cm∂x_mu…_cm∂x_f32
(

84 
Êﬂt32_t
 * 
pSrcA
,

85 
Êﬂt32_t
 * 
pSrcB
,

86 
Êﬂt32_t
 * 
pD°
,

87 
uöt32_t
 
numSam∂es
)

89 
Êﬂt32_t
 
a1
, 
b1
, 
c1
, 
d1
;

90 
uöt32_t
 
blkC¡
;

92 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
Êﬂt32_t
 
a2
, 
b2
, 
c2
, 
d2
;

96 
Êﬂt32_t
 
acc1
, 
acc2
, 
acc3
, 
acc4
;

100 
blkC¡
 = 
numSam∂es
 >> 2u;

104 
blkC¡
 > 0u)

108 
a1
 = *
pSrcA
;

109 
c1
 = *
pSrcB
;

111 
b1
 = *(
pSrcA
 + 1);

112 
acc1
 = 
a1
 * 
c1
;

114 
a2
 = *(
pSrcA
 + 2);

115 
acc2
 = (
b1
 * 
c1
);

117 
d1
 = *(
pSrcB
 + 1);

118 
c2
 = *(
pSrcB
 + 2);

119 
acc1
 -
b1
 * 
d1
;

121 
d2
 = *(
pSrcB
 + 3);

122 
acc3
 = 
a2
 * 
c2
;

124 
b2
 = *(
pSrcA
 + 3);

125 
acc2
 +(
a1
 * 
d1
);

127 
a1
 = *(
pSrcA
 + 4);

128 
acc4
 = (
a2
 * 
d2
);

130 
c1
 = *(
pSrcB
 + 4);

131 
acc3
 -(
b2
 * 
d2
);

132 *
pD°
 = 
acc1
;

134 
b1
 = *(
pSrcA
 + 5);

135 
acc4
 +
b2
 * 
c2
;

137 *(
pD°
 + 1Ë
acc2
;

138 
acc1
 = (
a1
 * 
c1
);

140 
d1
 = *(
pSrcB
 + 5);

141 
acc2
 = (
b1
 * 
c1
);

143 *(
pD°
 + 2Ë
acc3
;

144 *(
pD°
 + 3Ë
acc4
;

146 
a2
 = *(
pSrcA
 + 6);

147 
acc1
 -(
b1
 * 
d1
);

149 
c2
 = *(
pSrcB
 + 6);

150 
acc2
 +(
a1
 * 
d1
);

152 
b2
 = *(
pSrcA
 + 7);

153 
acc3
 = (
a2
 * 
c2
);

155 
d2
 = *(
pSrcB
 + 7);

156 
acc4
 = (
b2
 * 
c2
);

158 *(
pD°
 + 4Ë
acc1
;

159 
pSrcA
 += 8u;

161 
acc3
 -(
b2
 * 
d2
);

162 
acc4
 +(
a2
 * 
d2
);

164 *(
pD°
 + 5Ë
acc2
;

165 
pSrcB
 += 8u;

167 *(
pD°
 + 6Ë
acc3
;

168 *(
pD°
 + 7Ë
acc4
;

170 
pD°
 += 8u;

173 
blkC¡
--;

178 
blkC¡
 = 
numSam∂es
 % 0x4u;

183 
blkC¡
 = 
numSam∂es
;

187 
blkC¡
 > 0u)

191 
a1
 = *
pSrcA
++;

192 
b1
 = *
pSrcA
++;

193 
c1
 = *
pSrcB
++;

194 
d1
 = *
pSrcB
++;

197 *
pD°
++ = (
a1
 * 
c1
Ë- (
b1
 * 
d1
);

198 *
pD°
++ = (
a1
 * 
d1
Ë+ (
b1
 * 
c1
);

201 
blkC¡
--;

203 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c

41 
	~"¨m_m©h.h
"

65 
	$¨m_cm∂x_mu…_cm∂x_q15
(

66 
q15_t
 * 
pSrcA
,

67 
q15_t
 * 
pSrcB
,

68 
q15_t
 * 
pD°
,

69 
uöt32_t
 
numSam∂es
)

71 
q15_t
 
a
, 
b
, 
c
, 
d
;

73 #i‚de‡
ARM_MATH_CM0_FAMILY


76 
uöt32_t
 
blkC¡
;

79 
blkC¡
 = 
numSam∂es
 >> 2u;

83 
blkC¡
 > 0u)

87 
a
 = *
pSrcA
++;

88 
b
 = *
pSrcA
++;

89 
c
 = *
pSrcB
++;

90 
d
 = *
pSrcB
++;

93 *
pD°
++ =

94 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

96 *
pD°
++ =

97 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

99 
a
 = *
pSrcA
++;

100 
b
 = *
pSrcA
++;

101 
c
 = *
pSrcB
++;

102 
d
 = *
pSrcB
++;

105 *
pD°
++ =

106 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

108 *
pD°
++ =

109 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

111 
a
 = *
pSrcA
++;

112 
b
 = *
pSrcA
++;

113 
c
 = *
pSrcB
++;

114 
d
 = *
pSrcB
++;

117 *
pD°
++ =

118 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

120 *
pD°
++ =

121 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

123 
a
 = *
pSrcA
++;

124 
b
 = *
pSrcA
++;

125 
c
 = *
pSrcB
++;

126 
d
 = *
pSrcB
++;

129 *
pD°
++ =

130 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

132 *
pD°
++ =

133 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

136 
blkC¡
--;

141 
blkC¡
 = 
numSam∂es
 % 0x4u;

143 
blkC¡
 > 0u)

147 
a
 = *
pSrcA
++;

148 
b
 = *
pSrcA
++;

149 
c
 = *
pSrcB
++;

150 
d
 = *
pSrcB
++;

153 *
pD°
++ =

154 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

156 *
pD°
++ =

157 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

160 
blkC¡
--;

167 
numSam∂es
 > 0u)

171 
a
 = *
pSrcA
++;

172 
b
 = *
pSrcA
++;

173 
c
 = *
pSrcB
++;

174 
d
 = *
pSrcB
++;

177 *
pD°
++ =

178 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
c
Ë>> 17Ë- (((q31_tË
b
 * 
d
) >> 17);

180 *
pD°
++ =

181 (
q15_t
Ë(
q31_t
Ë(((q31_tË
a
 * 
d
Ë>> 17Ë+ (((q31_tË
b
 * 
c
) >> 17);

184 
numSam∂es
--;

189 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_cm∂x_mu…_cm∂x_q31
(

68 
q31_t
 * 
pSrcA
,

69 
q31_t
 * 
pSrcB
,

70 
q31_t
 * 
pD°
,

71 
uöt32_t
 
numSam∂es
)

73 
q31_t
 
a
, 
b
, 
c
, 
d
;

74 
uöt32_t
 
blkC¡
;

75 
q31_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

76 
q31_t
 
out1
, 
out2
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
blkC¡
 = 
numSam∂es
 >> 2u;

87 
blkC¡
 > 0u)

91 
a
 = *
pSrcA
++;

92 
b
 = *
pSrcA
++;

93 
c
 = *
pSrcB
++;

94 
d
 = *
pSrcB
++;

96 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

97 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

98 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

99 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

101 
mul1
 = (mul1 >> 1);

102 
mul2
 = (mul2 >> 1);

103 
mul3
 = (mul3 >> 1);

104 
mul4
 = (mul4 >> 1);

106 
out1
 = 
mul1
 - 
mul2
;

107 
out2
 = 
mul3
 + 
mul4
;

110 *
pD°
++ = 
out1
;

112 *
pD°
++ = 
out2
;

114 
a
 = *
pSrcA
++;

115 
b
 = *
pSrcA
++;

116 
c
 = *
pSrcB
++;

117 
d
 = *
pSrcB
++;

119 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

120 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

121 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

122 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

124 
mul1
 = (mul1 >> 1);

125 
mul2
 = (mul2 >> 1);

126 
mul3
 = (mul3 >> 1);

127 
mul4
 = (mul4 >> 1);

129 
out1
 = 
mul1
 - 
mul2
;

130 
out2
 = 
mul3
 + 
mul4
;

133 *
pD°
++ = 
out1
;

135 *
pD°
++ = 
out2
;

137 
a
 = *
pSrcA
++;

138 
b
 = *
pSrcA
++;

139 
c
 = *
pSrcB
++;

140 
d
 = *
pSrcB
++;

142 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

143 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

144 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

145 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

147 
mul1
 = (mul1 >> 1);

148 
mul2
 = (mul2 >> 1);

149 
mul3
 = (mul3 >> 1);

150 
mul4
 = (mul4 >> 1);

152 
out1
 = 
mul1
 - 
mul2
;

153 
out2
 = 
mul3
 + 
mul4
;

156 *
pD°
++ = 
out1
;

158 *
pD°
++ = 
out2
;

160 
a
 = *
pSrcA
++;

161 
b
 = *
pSrcA
++;

162 
c
 = *
pSrcB
++;

163 
d
 = *
pSrcB
++;

165 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

166 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

167 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

168 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

170 
mul1
 = (mul1 >> 1);

171 
mul2
 = (mul2 >> 1);

172 
mul3
 = (mul3 >> 1);

173 
mul4
 = (mul4 >> 1);

175 
out1
 = 
mul1
 - 
mul2
;

176 
out2
 = 
mul3
 + 
mul4
;

179 *
pD°
++ = 
out1
;

181 *
pD°
++ = 
out2
;

184 
blkC¡
--;

189 
blkC¡
 = 
numSam∂es
 % 0x4u;

191 
blkC¡
 > 0u)

195 
a
 = *
pSrcA
++;

196 
b
 = *
pSrcA
++;

197 
c
 = *
pSrcB
++;

198 
d
 = *
pSrcB
++;

200 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

201 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

202 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

203 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

205 
mul1
 = (mul1 >> 1);

206 
mul2
 = (mul2 >> 1);

207 
mul3
 = (mul3 >> 1);

208 
mul4
 = (mul4 >> 1);

210 
out1
 = 
mul1
 - 
mul2
;

211 
out2
 = 
mul3
 + 
mul4
;

214 *
pD°
++ = 
out1
;

216 *
pD°
++ = 
out2
;

219 
blkC¡
--;

227 
blkC¡
 = 
numSam∂es
 >> 1u;

231 
blkC¡
 > 0u)

235 
a
 = *
pSrcA
++;

236 
b
 = *
pSrcA
++;

237 
c
 = *
pSrcB
++;

238 
d
 = *
pSrcB
++;

240 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

241 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

242 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

243 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

245 
mul1
 = (mul1 >> 1);

246 
mul2
 = (mul2 >> 1);

247 
mul3
 = (mul3 >> 1);

248 
mul4
 = (mul4 >> 1);

250 
out1
 = 
mul1
 - 
mul2
;

251 
out2
 = 
mul3
 + 
mul4
;

254 *
pD°
++ = 
out1
;

256 *
pD°
++ = 
out2
;

258 
a
 = *
pSrcA
++;

259 
b
 = *
pSrcA
++;

260 
c
 = *
pSrcB
++;

261 
d
 = *
pSrcB
++;

263 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

264 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

265 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

266 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

268 
mul1
 = (mul1 >> 1);

269 
mul2
 = (mul2 >> 1);

270 
mul3
 = (mul3 >> 1);

271 
mul4
 = (mul4 >> 1);

273 
out1
 = 
mul1
 - 
mul2
;

274 
out2
 = 
mul3
 + 
mul4
;

277 *
pD°
++ = 
out1
;

279 *
pD°
++ = 
out2
;

282 
blkC¡
--;

287 
blkC¡
 = 
numSam∂es
 % 0x2u;

289 
blkC¡
 > 0u)

293 
a
 = *
pSrcA
++;

294 
b
 = *
pSrcA
++;

295 
c
 = *
pSrcB
++;

296 
d
 = *
pSrcB
++;

298 
mul1
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
c
) >> 32);

299 
mul2
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
d
) >> 32);

300 
mul3
 = (
q31_t
Ë(((
q63_t
Ë
a
 * 
d
) >> 32);

301 
mul4
 = (
q31_t
Ë(((
q63_t
Ë
b
 * 
c
) >> 32);

303 
mul1
 = (mul1 >> 1);

304 
mul2
 = (mul2 >> 1);

305 
mul3
 = (mul3 >> 1);

306 
mul4
 = (mul4 >> 1);

308 
out1
 = 
mul1
 - 
mul2
;

309 
out2
 = 
mul3
 + 
mul4
;

312 *
pD°
++ = 
out1
;

314 *
pD°
++ = 
out2
;

317 
blkC¡
--;

322 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c

41 
	~"¨m_m©h.h
"

85 
	$¨m_cm∂x_mu…_ªÆ_f32
(

86 
Êﬂt32_t
 * 
pSrcCm∂x
,

87 
Êﬂt32_t
 * 
pSrcRól
,

88 
Êﬂt32_t
 * 
pCm∂xD°
,

89 
uöt32_t
 
numSam∂es
)

91 
Êﬂt32_t
 
ö
;

92 
uöt32_t
 
blkC¡
;

94 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
Êﬂt32_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
;

98 
Êﬂt32_t
 
öA5
, 
öA6
, 
öA7
, 
öA8
;

99 
Êﬂt32_t
 
öB1
, 
öB2
, 
öB3
, 
öB4
;

100 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

101 
Êﬂt32_t
 
out5
, 
out6
, 
out7
, 
out8
;

104 
blkC¡
 = 
numSam∂es
 >> 2u;

108 
blkC¡
 > 0u)

113 
öA1
 = 
pSrcCm∂x
[0];

114 
öA2
 = 
pSrcCm∂x
[1];

116 
öB1
 = 
pSrcRól
[0];

119 
öA3
 = 
pSrcCm∂x
[2];

122 
out1
 = 
öA1
 * 
öB1
;

125 
öA4
 = 
pSrcCm∂x
[3];

128 
out2
 = 
öA2
 * 
öB1
;

131 
öB2
 = 
pSrcRól
[1];

133 
öA5
 = 
pSrcCm∂x
[4];

136 
out3
 = 
öA3
 * 
öB2
;

139 
öA6
 = 
pSrcCm∂x
[5];

141 
öB3
 = 
pSrcRól
[2];

144 
out4
 = 
öA4
 * 
öB2
;

147 
öA7
 = 
pSrcCm∂x
[6];

150 
out5
 = 
öA5
 * 
öB3
;

153 
öA8
 = 
pSrcCm∂x
[7];

156 
out6
 = 
öA6
 * 
öB3
;

159 
öB4
 = 
pSrcRól
[3];

162 
pCm∂xD°
[0] = 
out1
;

165 
out7
 = 
öA7
 * 
öB4
;

168 
pCm∂xD°
[1] = 
out2
;

171 
out8
 = 
öA8
 * 
öB4
;

174 
pCm∂xD°
[2] = 
out3
;

175 
pCm∂xD°
[3] = 
out4
;

176 
pCm∂xD°
[4] = 
out5
;

179 
pSrcCm∂x
 += 8u;

182 
pCm∂xD°
[5] = 
out6
;

185 
pSrcRól
 += 4u;

188 
pCm∂xD°
[6] = 
out7
;

189 
pCm∂xD°
[7] = 
out8
;

192 
pCm∂xD°
 += 8u;

195 
blkC¡
--;

200 
blkC¡
 = 
numSam∂es
 % 0x4u;

205 
blkC¡
 = 
numSam∂es
;

209 
blkC¡
 > 0u)

213 
ö
 = *
pSrcRól
++;

215 *
pCm∂xD°
++ = (*
pSrcCm∂x
++Ë* (
ö
);

216 *
pCm∂xD°
++ = (*
pSrcCm∂x
++Ë* (
ö
);

219 
blkC¡
--;

221 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q15.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_cm∂x_mu…_ªÆ_q15
(

68 
q15_t
 * 
pSrcCm∂x
,

69 
q15_t
 * 
pSrcRól
,

70 
q15_t
 * 
pCm∂xD°
,

71 
uöt32_t
 
numSam∂es
)

73 
q15_t
 
ö
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
uöt32_t
 
blkC¡
;

79 
q31_t
 
öA1
, 
öA2
;

80 
q31_t
 
öB1
;

81 
q15_t
 
out1
, 
out2
, 
out3
, 
out4
;

82 
q31_t
 
mul1
, 
mul2
, 
mul3
, 
mul4
;

85 
blkC¡
 = 
numSam∂es
 >> 2u;

89 
blkC¡
 > 0u)

94 
öA1
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

96 
öB1
 = *
	`__SIMD32
(
pSrcRól
)++;

98 
öA2
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

101 #i‚de‡
ARM_MATH_BIG_ENDIAN


103 
mul1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
Ë* (q15_tË(
öB1
));

104 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
));

105 
mul3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
Ë* (q15_tË(
öB1
 >> 16));

106 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË(
öB1
 >> 16));

110 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
 >> 16));

111 
mul1
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * (q15_tË(
öB1
 >> 16));

112 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË
öB1
);

113 
mul3
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * (q15_tË
öB1
);

118 
out1
 = (
q15_t
Ë
	`__SSAT
(
mul1
 >> 15u, 16);

119 
out2
 = (
q15_t
Ë
	`__SSAT
(
mul2
 >> 15u, 16);

120 
out3
 = (
q15_t
Ë
	`__SSAT
(
mul3
 >> 15u, 16);

121 
out4
 = (
q15_t
Ë
	`__SSAT
(
mul4
 >> 15u, 16);

124 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out1
, 
out2
, 16);

125 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out3
, 
out4
, 16);

127 
öA1
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

128 
öB1
 = *
	`__SIMD32
(
pSrcRól
)++;

129 
öA2
 = *
	`__SIMD32
(
pSrcCm∂x
)++;

131 #i‚de‡
ARM_MATH_BIG_ENDIAN


133 
mul1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
Ë* (q15_tË(
öB1
));

134 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
));

135 
mul3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
Ë* (q15_tË(
öB1
 >> 16));

136 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË(
öB1
 >> 16));

140 
mul2
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* (q15_tË(
öB1
 >> 16));

141 
mul1
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * (q15_tË(
öB1
 >> 16));

142 
mul4
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* (q15_tË
öB1
);

143 
mul3
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * (q15_tË
öB1
);

147 
out1
 = (
q15_t
Ë
	`__SSAT
(
mul1
 >> 15u, 16);

148 
out2
 = (
q15_t
Ë
	`__SSAT
(
mul2
 >> 15u, 16);

149 
out3
 = (
q15_t
Ë
	`__SSAT
(
mul3
 >> 15u, 16);

150 
out4
 = (
q15_t
Ë
	`__SSAT
(
mul4
 >> 15u, 16);

152 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out1
, 
out2
, 16);

153 *
	`__SIMD32
(
pCm∂xD°
)++ = 
	`__PKHBT
(
out3
, 
out4
, 16);

156 
blkC¡
--;

161 
blkC¡
 = 
numSam∂es
 % 0x4u;

163 
blkC¡
 > 0u)

167 
ö
 = *
pSrcRól
++;

169 *
pCm∂xD°
++ =

170 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

171 *
pCm∂xD°
++ =

172 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

175 
blkC¡
--;

182 
numSam∂es
 > 0u)

186 
ö
 = *
pSrcRól
++;

188 *
pCm∂xD°
++ =

189 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

190 *
pCm∂xD°
++ =

191 (
q15_t
Ë
	`__SSAT
((((
q31_t
Ë(*
pSrcCm∂x
++Ë* (
ö
)) >> 15), 16);

194 
numSam∂es
--;

199 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q31.c

41 
	~"¨m_m©h.h
"

67 
	$¨m_cm∂x_mu…_ªÆ_q31
(

68 
q31_t
 * 
pSrcCm∂x
,

69 
q31_t
 * 
pSrcRól
,

70 
q31_t
 * 
pCm∂xD°
,

71 
uöt32_t
 
numSam∂es
)

73 
q31_t
 
öA1
;

75 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
uöt32_t
 
blkC¡
;

79 
q31_t
 
öA2
, 
öA3
, 
öA4
;

80 
q31_t
 
öB1
, 
öB2
;

81 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

84 
blkC¡
 = 
numSam∂es
 >> 2u;

88 
blkC¡
 > 0u)

93 
öA1
 = *
pSrcCm∂x
++;

94 
öA2
 = *
pSrcCm∂x
++;

96 
öB1
 = *
pSrcRól
++;

97 
öB2
 = *
pSrcRól
++;

99 
öA3
 = *
pSrcCm∂x
++;

100 
öA4
 = *
pSrcCm∂x
++;

103 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

104 
out2
 = ((
q63_t
Ë
öA2
 * 
öB1
) >> 32;

105 
out3
 = ((
q63_t
Ë
öA3
 * 
öB2
) >> 32;

106 
out4
 = ((
q63_t
Ë
öA4
 * 
öB2
) >> 32;

109 
out1
 = 
	`__SSAT
(out1, 31);

110 
out2
 = 
	`__SSAT
(out2, 31);

111 
out3
 = 
	`__SSAT
(out3, 31);

112 
out4
 = 
	`__SSAT
(out4, 31);

115 
out1
 = out1 << 1;

116 
out2
 = out2 << 1;

117 
out3
 = out3 << 1;

118 
out4
 = out4 << 1;

121 *
pCm∂xD°
++ = 
out1
;

122 *
pCm∂xD°
++ = 
out2
;

123 *
pCm∂xD°
++ = 
out3
;

124 *
pCm∂xD°
++ = 
out4
;

127 
öA1
 = *
pSrcCm∂x
++;

128 
öA2
 = *
pSrcCm∂x
++;

130 
öB1
 = *
pSrcRól
++;

131 
öB2
 = *
pSrcRól
++;

133 
öA3
 = *
pSrcCm∂x
++;

134 
öA4
 = *
pSrcCm∂x
++;

137 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

138 
out2
 = ((
q63_t
Ë
öA2
 * 
öB1
) >> 32;

139 
out3
 = ((
q63_t
Ë
öA3
 * 
öB2
) >> 32;

140 
out4
 = ((
q63_t
Ë
öA4
 * 
öB2
) >> 32;

143 
out1
 = 
	`__SSAT
(out1, 31);

144 
out2
 = 
	`__SSAT
(out2, 31);

145 
out3
 = 
	`__SSAT
(out3, 31);

146 
out4
 = 
	`__SSAT
(out4, 31);

149 
out1
 = out1 << 1;

150 
out2
 = out2 << 1;

151 
out3
 = out3 << 1;

152 
out4
 = out4 << 1;

155 *
pCm∂xD°
++ = 
out1
;

156 *
pCm∂xD°
++ = 
out2
;

157 *
pCm∂xD°
++ = 
out3
;

158 *
pCm∂xD°
++ = 
out4
;

161 
blkC¡
--;

166 
blkC¡
 = 
numSam∂es
 % 0x4u;

168 
blkC¡
 > 0u)

173 
öA1
 = *
pSrcCm∂x
++;

174 
öA2
 = *
pSrcCm∂x
++;

176 
öB1
 = *
pSrcRól
++;

179 
out1
 = ((
q63_t
Ë
öA1
 * 
öB1
) >> 32;

180 
out2
 = ((
q63_t
Ë
öA2
 * 
öB1
) >> 32;

183 
out1
 = 
	`__SSAT
(out1, 31);

184 
out2
 = 
	`__SSAT
(out2, 31);

187 
out1
 = out1 << 1;

188 
out2
 = out2 << 1;

191 *
pCm∂xD°
++ = 
out1
;

192 *
pCm∂xD°
++ = 
out2
;

195 
blkC¡
--;

202 
numSam∂es
 > 0u)

206 
öA1
 = *
pSrcRól
++;

208 *
pCm∂xD°
++ =

209 (
q31_t
Ë
	`˛ù_q63_to_q31
(((
q63_t
Ë* 
pSrcCm∂x
++ * 
öA1
) >> 31);

210 *
pCm∂xD°
++ =

211 (
q31_t
Ë
	`˛ù_q63_to_q31
(((
q63_t
Ë* 
pSrcCm∂x
++ * 
öA1
) >> 31);

214 
numSam∂es
--;

219 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_f32.c

42 
	~"¨m_m©h.h
"

62 
	$¨m_pid_öô_f32
(

63 
¨m_pid_ö°™˚_f32
 * 
S
,

64 
öt32_t
 
ª£tSèãFœg
)

68 
S
->
A0
 = S->
Kp
 + S->
Ki
 + S->
Kd
;

71 
S
->
A1
 = (-S->
Kp
Ë- ((
Êﬂt32_t
Ë2.0 * S->
Kd
);

74 
S
->
A2
 = S->
Kd
;

77 if(
ª£tSèãFœg
)

80 
	`mem£t
(
S
->
°©e
, 0, 3u * (
Êﬂt32_t
));

83 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q15.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_pid_öô_q15
(

62 
¨m_pid_ö°™˚_q15
 * 
S
,

63 
öt32_t
 
ª£tSèãFœg
)

66 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
S
->
A0
 = 
	`__QADD16
(__QADD16(S->
Kp
, S->
Ki
), S->
Kd
);

75 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


77 
S
->
A1
 = 
	`__PKHBT
(-
	`__QADD16
(__QADD16(S->
Kd
, S->Kd), S->
Kp
), S->Kd, 16);

81 
S
->
A1
 = 
	`__PKHBT
(S->
Kd
, -
	`__QADD16
(__QADD16(S->Kd, S->Kd), S->
Kp
), 16);

86 if(
ª£tSèãFœg
)

89 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q15_t
));

96 
q31_t
 
ãmp
;

99 
ãmp
 = 
S
->
Kp
 + S->
Ki
 + S->
Kd
;

100 
S
->
A0
 = (
q15_t
Ë
	`__SSAT
(
ãmp
, 16);

103 
ãmp
 = -(
S
->
Kd
 + S->Kd + S->
Kp
);

104 
S
->
A1
 = (
q15_t
Ë
	`__SSAT
(
ãmp
, 16);

105 
S
->
A2
 = S->
Kd
;

110 if(
ª£tSèãFœg
)

113 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q15_t
));

118 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_pid_öô_q31
(

62 
¨m_pid_ö°™˚_q31
 * 
S
,

63 
öt32_t
 
ª£tSèãFœg
)

66 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
S
->
A0
 = 
	`__QADD
(__QADD(S->
Kp
, S->
Ki
), S->
Kd
);

74 
S
->
A1
 = -
	`__QADD
(__QADD(S->
Kd
, S->Kd), S->
Kp
);

81 
q31_t
 
ãmp
;

84 
ãmp
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë
S
->
Kp
 + S->
Ki
);

85 
S
->
A0
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë
ãmp
 + S->
Kd
);

88 
ãmp
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë
S
->
Kd
 + S->Kd);

89 
S
->
A1
 = -
	`˛ù_q63_to_q31
((
q63_t
Ë
ãmp
 + S->
Kp
);

94 
S
->
A2
 = S->
Kd
;

97 if(
ª£tSèãFœg
)

100 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q31_t
));

103 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_f32.c

41 
	~"¨m_m©h.h
"

55 
	$¨m_pid_ª£t_f32
(

56 
¨m_pid_ö°™˚_f32
 * 
S
)

60 
	`mem£t
(
S
->
°©e
, 0, 3u * (
Êﬂt32_t
));

61 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q15.c

41 
	~"¨m_m©h.h
"

55 
	$¨m_pid_ª£t_q15
(

56 
¨m_pid_ö°™˚_q15
 * 
S
)

59 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q15_t
));

60 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q31.c

41 
	~"¨m_m©h.h
"

55 
	$¨m_pid_ª£t_q31
(

56 
¨m_pid_ö°™˚_q31
 * 
S
)

60 
	`mem£t
(
S
->
°©e
, 0, 3u * (
q31_t
));

61 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

84 
	$¨m_sö_cos_f32
(

85 
Êﬂt32_t
 
thëa
,

86 
Êﬂt32_t
 * 
pSöVÆ
,

87 
Êﬂt32_t
 * 
pCosVÆ
)

89 
Êﬂt32_t
 
‰a˘
, 
ö
;

90 
uöt16_t
 
ödexS
, 
ödexC
;

91 
Êﬂt32_t
 
f1
, 
f2
, 
d1
, 
d2
;

92 
öt32_t
 
n
;

93 
Êﬂt32_t
 
födex
, 
Dn
, 
Df
, 
ãmp
;

97 
ö
 = 
thëa
 * 0.00277777777778f;

100 
n
 = (
öt32_t
Ë
ö
;

103 if(
ö
 < 0.0f)

105 
n
--;

108 
ö
 = i¿- (
Êﬂt32_t
Ë
n
;

111 
födex
 = (
Êﬂt32_t
Ë
FAST_MATH_TABLE_SIZE
 * 
ö
;

112 
ödexS
 = ((
uöt16_t
)
födex
) & 0x1ff;

113 
ödexC
 = (
ödexS
 + (
FAST_MATH_TABLE_SIZE
 / 4)) & 0x1ff;

116 
‰a˘
 = 
födex
 - (
Êﬂt32_t
Ë
ödexS
;

119 
f1
 = 
söTabÀ_f32
[
ödexC
+0];

120 
f2
 = 
söTabÀ_f32
[
ödexC
+1];

121 
d1
 = -
söTabÀ_f32
[
ödexS
+0];

122 
d2
 = -
söTabÀ_f32
[
ödexS
+1];

124 
Dn
 = 0.0122718463030f;

125 
Df
 = 
f2
 - 
f1
;

126 
ãmp
 = 
Dn
*(
d1
 + 
d2
Ë- 2*
Df
;

127 
ãmp
 = 
‰a˘
*ãm∞+ (3*
Df
 - (
d2
 + 2*
d1
)*
Dn
);

128 
ãmp
 = 
‰a˘
*ãm∞+ 
d1
*
Dn
;

131 *
pCosVÆ
 = 
‰a˘
*
ãmp
 + 
f1
;

134 
f1
 = 
söTabÀ_f32
[
ödexS
+0];

135 
f2
 = 
söTabÀ_f32
[
ödexS
+1];

136 
d1
 = 
söTabÀ_f32
[
ödexC
+0];

137 
d2
 = 
söTabÀ_f32
[
ödexC
+1];

139 
Df
 = 
f2
 - 
f1
;

140 
ãmp
 = 
Dn
*(
d1
 + 
d2
Ë- 2*
Df
;

141 
ãmp
 = 
‰a˘
*ãm∞+ (3*
Df
 - (
d2
 + 2*
d1
)*
Dn
);

142 
ãmp
 = 
‰a˘
*ãm∞+ 
d1
*
Dn
;

145 *
pSöVÆ
 = 
‰a˘
*
ãmp
 + 
f1
;

146 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

64 
	$¨m_sö_cos_q31
(

65 
q31_t
 
thëa
,

66 
q31_t
 * 
pSöVÆ
,

67 
q31_t
 * 
pCosVÆ
)

69 
q31_t
 
‰a˘
;

70 
uöt16_t
 
ödexS
, 
ödexC
;

71 
q31_t
 
f1
, 
f2
, 
d1
, 
d2
;

72 
q31_t
 
Dn
, 
Df
;

73 
q63_t
 
ãmp
;

76 
ödexS
 = (
uöt32_t
)
thëa
 >> 
CONTROLLER_Q31_SHIFT
;

77 
ödexC
 = (
ödexS
 + 128) & 0x1ff;

80 
‰a˘
 = (
thëa
 - (
ödexS
 << 
CONTROLLER_Q31_SHIFT
)) << 8;

83 
f1
 = 
söTabÀ_q31
[
ödexC
+0];

84 
f2
 = 
söTabÀ_q31
[
ödexC
+1];

85 
d1
 = -
söTabÀ_q31
[
ödexS
+0];

86 
d2
 = -
söTabÀ_q31
[
ödexS
+1];

88 
Dn
 = 0x1921FB5;

89 
Df
 = 
f2
 - 
f1
;

90 
ãmp
 = 
Dn
*((
q63_t
)
d1
 + 
d2
);

91 
ãmp
 =Åem∞- ((
q63_t
)
Df
 << 32);

92 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

93 
ãmp
 =Åem∞+ ((3*(
q63_t
)
Df
 << 31Ë- (
d2
 + ((q63_t)
d1
 << 1))*
Dn
);

94 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

95 
ãmp
 =Åem∞+ (
q63_t
)
d1
*
Dn
;

96 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

99 *
pCosVÆ
 = 
	`˛ù_q63_to_q31
((
ãmp
 >> 31Ë+ (
q63_t
)
f1
);

102 
f1
 = 
söTabÀ_q31
[
ödexS
+0];

103 
f2
 = 
söTabÀ_q31
[
ödexS
+1];

104 
d1
 = 
söTabÀ_q31
[
ödexC
+0];

105 
d2
 = 
söTabÀ_q31
[
ödexC
+1];

107 
Df
 = 
f2
 - 
f1
;

108 
ãmp
 = 
Dn
*((
q63_t
)
d1
 + 
d2
);

109 
ãmp
 =Åem∞- ((
q63_t
)
Df
 << 32);

110 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

111 
ãmp
 =Åem∞+ ((3*(
q63_t
)
Df
 << 31Ë- (
d2
 + ((q63_t)
d1
 << 1))*
Dn
);

112 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

113 
ãmp
 =Åem∞+ (
q63_t
)
d1
*
Dn
;

114 
ãmp
 = (
q63_t
)
‰a˘
*(temp >> 31);

117 *
pSöVÆ
 = 
	`˛ù_q63_to_q31
((
ãmp
 >> 31Ë+ (
q63_t
)
f1
);

118 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

82 
Êﬂt32_t
 
	$¨m_cos_f32
(

83 
Êﬂt32_t
 
x
)

85 
Êﬂt32_t
 
cosVÆ
, 
‰a˘
, 
ö
;

86 
uöt16_t
 
ödex
;

87 
Êﬂt32_t
 
a
, 
b
;

88 
öt32_t
 
n
;

89 
Êﬂt32_t
 
födex
;

93 
ö
 = 
x
 * 0.159154943092f + 0.25f;

96 
n
 = (
öt32_t
Ë
ö
;

99 if(
ö
 < 0.0f)

101 
n
--;

105 
ö
 = i¿- (
Êﬂt32_t
Ë
n
;

108 
födex
 = (
Êﬂt32_t
Ë
FAST_MATH_TABLE_SIZE
 * 
ö
;

109 
ödex
 = ((
uöt16_t
)
födex
) & 0x1ff;

112 
‰a˘
 = 
födex
 - (
Êﬂt32_t
Ë
ödex
;

115 
a
 = 
söTabÀ_f32
[
ödex
];

116 
b
 = 
söTabÀ_f32
[
ödex
+1];

119 
cosVÆ
 = (1.0f-
‰a˘
)*
a
 + fø˘*
b
;

122  (
cosVÆ
);

123 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

62 
q15_t
 
	$¨m_cos_q15
(

63 
q15_t
 
x
)

65 
q15_t
 
cosVÆ
;

66 
öt32_t
 
ödex
;

67 
q15_t
 
a
, 
b
;

68 
q15_t
 
‰a˘
;

71 
x
 = (
uöt16_t
)x + 0x2000;

72 if(
x
 < 0)

74 
x
 = (
uöt16_t
)x + 0x8000;

78 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q15_SHIFT
;

81 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q15_SHIFT
)) << 9;

84 
a
 = 
söTabÀ_q15
[
ödex
];

85 
b
 = 
söTabÀ_q15
[
ödex
+1];

88 
cosVÆ
 = (
q31_t
)(0x8000-
‰a˘
)*
a
 >> 16;

89 
cosVÆ
 = (
q15_t
)((((
q31_t
)cosVÆ << 16Ë+ ((q31_t)
‰a˘
*
b
)) >> 16);

91  
cosVÆ
 << 1;

92 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

62 
q31_t
 
	$¨m_cos_q31
(

63 
q31_t
 
x
)

65 
q31_t
 
cosVÆ
;

66 
öt32_t
 
ödex
;

67 
q31_t
 
a
, 
b
;

68 
q31_t
 
‰a˘
;

71 
x
 = (
uöt32_t
)x + 0x20000000;

72 if(
x
 < 0)

74 
x
 = (
uöt32_t
)x + 0x80000000;

78 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q31_SHIFT
;

81 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q31_SHIFT
)) << 9;

84 
a
 = 
söTabÀ_q31
[
ödex
];

85 
b
 = 
söTabÀ_q31
[
ödex
+1];

88 
cosVÆ
 = (
q63_t
)(0x80000000-
‰a˘
)*
a
 >> 32;

89 
cosVÆ
 = (
q31_t
)((((
q63_t
)cosVÆ << 32Ë+ ((q63_t)
‰a˘
*
b
)) >> 32);

91  
cosVÆ
 << 1;

92 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

43 
	~<m©h.h
>

84 
Êﬂt32_t
 
	$¨m_sö_f32
(

85 
Êﬂt32_t
 
x
)

87 
Êﬂt32_t
 
söVÆ
, 
‰a˘
, 
ö
;

88 
uöt16_t
 
ödex
;

89 
Êﬂt32_t
 
a
, 
b
;

90 
öt32_t
 
n
;

91 
Êﬂt32_t
 
födex
;

95 
ö
 = 
x
 * 0.159154943092f;

98 
n
 = (
öt32_t
Ë
ö
;

101 if(
x
 < 0.0f)

103 
n
--;

107 
ö
 = i¿- (
Êﬂt32_t
Ë
n
;

110 
födex
 = (
Êﬂt32_t
Ë
FAST_MATH_TABLE_SIZE
 * 
ö
;

111 i‡(
födex
 >= 512.0f) {

112 
födex
 -= 512.0f;

115 
ödex
 = ((
uöt16_t
)
födex
) & 0x1ff;

118 
‰a˘
 = 
födex
 - (
Êﬂt32_t
Ë
ödex
;

121 
a
 = 
söTabÀ_f32
[
ödex
];

122 
b
 = 
söTabÀ_f32
[
ödex
+1];

125 
söVÆ
 = (1.0f-
‰a˘
)*
a
 + fø˘*
b
;

128  (
söVÆ
);

129 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

61 
q15_t
 
	$¨m_sö_q15
(

62 
q15_t
 
x
)

64 
q15_t
 
söVÆ
;

65 
öt32_t
 
ödex
;

66 
q15_t
 
a
, 
b
;

67 
q15_t
 
‰a˘
;

70 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q15_SHIFT
;

73 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q15_SHIFT
)) << 9;

76 
a
 = 
söTabÀ_q15
[
ödex
];

77 
b
 = 
söTabÀ_q15
[
ödex
+1];

80 
söVÆ
 = (
q31_t
)(0x8000-
‰a˘
)*
a
 >> 16;

81 
söVÆ
 = (
q15_t
)((((
q31_t
)söVÆ << 16Ë+ ((q31_t)
‰a˘
*
b
)) >> 16);

83  
söVÆ
 << 1;

84 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

60 
q31_t
 
	$¨m_sö_q31
(

61 
q31_t
 
x
)

63 
q31_t
 
söVÆ
;

64 
öt32_t
 
ödex
;

65 
q31_t
 
a
, 
b
;

66 
q31_t
 
‰a˘
;

69 
ödex
 = (
uöt32_t
)
x
 >> 
FAST_MATH_Q31_SHIFT
;

72 
‰a˘
 = (
x
 - (
ödex
 << 
FAST_MATH_Q31_SHIFT
)) << 9;

75 
a
 = 
söTabÀ_q31
[
ödex
];

76 
b
 = 
söTabÀ_q31
[
ödex
+1];

79 
söVÆ
 = (
q63_t
)(0x80000000-
‰a˘
)*
a
 >> 32;

80 
söVÆ
 = (
q31_t
)((((
q63_t
)söVÆ << 32Ë+ ((q63_t)
‰a˘
*
b
)) >> 32);

82  
söVÆ
 << 1;

83 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q15.c

40 
	~"¨m_m©h.h
"

41 
	~"¨m_comm⁄_èbÀs.h
"

62 
¨m_°©us
 
	$¨m_sqπ_q15
(

63 
q15_t
 
ö
,

64 
q15_t
 * 
pOut
)

66 
q15_t
 
numbî
, 
ãmp1
, 
v¨1
, 
signBôs1
, 
hÆf
;

67 
q31_t
 
bôs_vÆ1
;

68 
Êﬂt32_t
 
ãmp_Êﬂt1
;

71 
q31_t
 
‰acvÆ
;

72 
Êﬂt32_t
 
ÊﬂtvÆ
;

73 } 
ãmpc⁄v
;

75 
numbî
 = 
ö
;

78 if(
numbî
 > 0)

80 
signBôs1
 = 
	`__CLZ
(
numbî
) - 17;

83 if((
signBôs1
 % 2) == 0)

85 
numbî
 =Çumbî << 
signBôs1
;

89 
numbî
 =Çumbî << (
signBôs1
 - 1);

93 
hÆf
 = 
numbî
 >> 1;

95 
ãmp1
 = 
numbî
;

98 
ãmp_Êﬂt1
 = 
numbî
 * 3.051757812500000e-005f;

100 
ãmpc⁄v
.
ÊﬂtvÆ
 = 
ãmp_Êﬂt1
;

101 
bôs_vÆ1
 = 
ãmpc⁄v
.
‰acvÆ
;

103 
bôs_vÆ1
 = 0x5f3759df - (bits_val1 >> 1);

105 
ãmpc⁄v
.
‰acvÆ
 = 
bôs_vÆ1
;

106 
ãmp_Êﬂt1
 = 
ãmpc⁄v
.
ÊﬂtvÆ
;

108 
v¨1
 = (
q31_t
Ë(
ãmp_Êﬂt1
 * 16384);

111 
v¨1
 = ((
q15_t
Ë((
q31_t
) var1 * (0x3000 -

112 ((
q15_t
)

113 ((((
q15_t
)

114 (((
q31_t
Ë
v¨1
 * var1) >> 15)) *

115 (
q31_t
Ë
hÆf
) >> 15))) >> 15)) << 2;

117 
v¨1
 = ((
q15_t
Ë((
q31_t
) var1 * (0x3000 -

118 ((
q15_t
)

119 ((((
q15_t
)

120 (((
q31_t
Ë
v¨1
 * var1) >> 15)) *

121 (
q31_t
Ë
hÆf
) >> 15))) >> 15)) << 2;

123 
v¨1
 = ((
q15_t
Ë((
q31_t
) var1 * (0x3000 -

124 ((
q15_t
)

125 ((((
q15_t
)

126 (((
q31_t
Ë
v¨1
 * var1) >> 15)) *

127 (
q31_t
Ë
hÆf
) >> 15))) >> 15)) << 2;

130 
v¨1
 = ((
q15_t
Ë(((
q31_t
Ë
ãmp1
 * var1) >> 15)) << 1;

133 if((
signBôs1
 % 2) == 0)

135 
v¨1
 = v¨1 >> (
signBôs1
 / 2);

139 
v¨1
 = v¨1 >> ((
signBôs1
 - 1) / 2);

141 *
pOut
 = 
v¨1
;

143  (
ARM_MATH_SUCCESS
);

148 *
pOut
 = 0;

149  (
ARM_MATH_ARGUMENT_ERROR
);

151 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q31.c

40 
	~"¨m_m©h.h
"

41 
	~"¨m_comm⁄_èbÀs.h
"

61 
¨m_°©us
 
	$¨m_sqπ_q31
(

62 
q31_t
 
ö
,

63 
q31_t
 * 
pOut
)

65 
q31_t
 
numbî
, 
ãmp1
, 
bôs_vÆ1
, 
v¨1
, 
signBôs1
, 
hÆf
;

66 
Êﬂt32_t
 
ãmp_Êﬂt1
;

69 
q31_t
 
‰acvÆ
;

70 
Êﬂt32_t
 
ÊﬂtvÆ
;

71 } 
ãmpc⁄v
;

73 
numbî
 = 
ö
;

76 if(
numbî
 > 0)

78 
signBôs1
 = 
	`__CLZ
(
numbî
) - 1;

81 if((
signBôs1
 % 2) == 0)

83 
numbî
 =Çumbî << 
signBôs1
;

87 
numbî
 =Çumbî << (
signBôs1
 - 1);

91 
hÆf
 = 
numbî
 >> 1;

93 
ãmp1
 = 
numbî
;

96 
ãmp_Êﬂt1
 = 
numbî
 * 4.6566128731e-010f;

98 
ãmpc⁄v
.
ÊﬂtvÆ
 = 
ãmp_Êﬂt1
;

99 
bôs_vÆ1
 = 
ãmpc⁄v
.
‰acvÆ
;

101 
bôs_vÆ1
 = 0x5f3759df - (bits_val1 >> 1);

103 
ãmpc⁄v
.
‰acvÆ
 = 
bôs_vÆ1
;

104 
ãmp_Êﬂt1
 = 
ãmpc⁄v
.
ÊﬂtvÆ
;

106 
v¨1
 = (
q31_t
Ë(
ãmp_Êﬂt1
 * 1073741824);

109 
v¨1
 = ((
q31_t
Ë((
q63_t
) var1 * (0x30000000 -

110 ((
q31_t
)

111 ((((
q31_t
)

112 (((
q63_t
Ë
v¨1
 * var1) >> 31)) *

113 (
q63_t
Ë
hÆf
) >> 31))) >> 31)) << 2;

115 
v¨1
 = ((
q31_t
Ë((
q63_t
) var1 * (0x30000000 -

116 ((
q31_t
)

117 ((((
q31_t
)

118 (((
q63_t
Ë
v¨1
 * var1) >> 31)) *

119 (
q63_t
Ë
hÆf
) >> 31))) >> 31)) << 2;

121 
v¨1
 = ((
q31_t
Ë((
q63_t
) var1 * (0x30000000 -

122 ((
q31_t
)

123 ((((
q31_t
)

124 (((
q63_t
Ë
v¨1
 * var1) >> 31)) *

125 (
q63_t
Ë
hÆf
) >> 31))) >> 31)) << 2;

128 
v¨1
 = ((
q31_t
Ë(((
q63_t
Ë
ãmp1
 * var1) >> 31)) << 1;

131 if((
signBôs1
 % 2) == 0)

133 
v¨1
 = v¨1 >> (
signBôs1
 / 2);

137 
v¨1
 = v¨1 >> ((
signBôs1
 - 1) / 2);

139 *
pOut
 = 
v¨1
;

141  (
ARM_MATH_SUCCESS
);

146 *
pOut
 = 0;

147  (
ARM_MATH_ARGUMENT_ERROR
);

149 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_init_q31.c

41 
	~"¨m_m©h.h
"

85 
	$¨m_biquad_ˇs_df1_32x64_öô_q31
(

86 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

87 
uöt8_t
 
numSèges
,

88 
q31_t
 * 
pC€ffs
,

89 
q63_t
 * 
pSèã
,

90 
uöt8_t
 
po°Shi·
)

93 
S
->
numSèges
 =ÇumStages;

96 
S
->
po°Shi·
 =ÖostShift;

99 
S
->
pC€ffs
 =ÖCoeffs;

102 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
q63_t
));

105 
S
->
pSèã
 =ÖState;

106 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_q31.c

41 
	~"¨m_m©h.h
"

187 
	$¨m_biquad_ˇs_df1_32x64_q31
(

188 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

189 
q31_t
 * 
pSrc
,

190 
q31_t
 * 
pD°
,

191 
uöt32_t
 
blockSize
)

193 
q31_t
 *
pIn
 = 
pSrc
;

194 
q31_t
 *
pOut
 = 
pD°
;

195 
q63_t
 *
pSèã
 = 
S
->pState;

196 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

197 
q63_t
 
acc
;

198 
q31_t
 
Xn1
, 
Xn2
;

199 
q63_t
 
Yn1
, 
Yn2
;

200 
q31_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

201 
q31_t
 
Xn
;

202 
öt32_t
 
shi·
 = (öt32_tË
S
->
po°Shi·
 + 1;

203 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

204 
q31_t
 
acc_l
, 
acc_h
;

205 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

206 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

209 #i‚de‡
ARM_MATH_CM0_FAMILY


216 
b0
 = *
pC€ffs
++;

217 
b1
 = *
pC€ffs
++;

218 
b2
 = *
pC€ffs
++;

219 
a1
 = *
pC€ffs
++;

220 
a2
 = *
pC€ffs
++;

223 
Xn1
 = (
q31_t
Ë(
pSèã
[0]);

224 
Xn2
 = (
q31_t
Ë(
pSèã
[1]);

225 
Yn1
 = 
pSèã
[2];

226 
Yn2
 = 
pSèã
[3];

234 
ßm∂e
 = 
blockSize
 >> 2u;

238 
ßm∂e
 > 0u)

241 
Xn
 = *
pIn
++;

246 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

249 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

252 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

255 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

258 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

261 
Yn2
 = 
acc
 << 
shi·
;

264 
acc_l
 = 
acc
 & 0xffffffff;

267 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

270 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

273 *
pOut
 = 
acc_h
;

276 
Xn2
 = *
pIn
++;

281 
acc
 = (
q63_t
Ë
Xn
 *
b1
;

284 
acc
 +(
q63_t
Ë
Xn2
 *
b0
;

287 
acc
 +(
q63_t
Ë
Xn1
 *
b2
;

290 
acc
 +
	`mu…32x64
(
Yn2
, 
a1
);

293 
acc
 +
	`mu…32x64
(
Yn1
, 
a2
);

296 
Yn1
 = 
acc
 << 
shi·
;

299 
acc_l
 = 
acc
 & 0xffffffff;

302 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

305 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

308 
Xn1
 = *
pIn
++;

312 *(
pOut
 + 1uË
acc_h
;

317 
acc
 = (
q63_t
Ë
Xn1
 *
b0
;

320 
acc
 +(
q63_t
Ë
Xn2
 *
b1
;

323 
acc
 +(
q63_t
Ë
Xn
 *
b2
;

326 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

329 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

332 
Yn2
 = 
acc
 << 
shi·
;

335 
acc_l
 = 
acc
 & 0xffffffff;

338 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

341 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

344 *(
pOut
 + 2uË
acc_h
;

347 
Xn
 = *
pIn
++;

351 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

354 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

357 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

360 
acc
 +
	`mu…32x64
(
Yn2
, 
a1
);

363 
acc
 +
	`mu…32x64
(
Yn1
, 
a2
);

366 
Yn1
 = 
acc
 << 
shi·
;

369 
acc_l
 = 
acc
 & 0xffffffff;

372 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

375 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

378 *(
pOut
 + 3uË
acc_h
;

386 
Xn2
 = 
Xn1
;

387 
Xn1
 = 
Xn
;

390 
pOut
 += 4u;

393 
ßm∂e
--;

398 
ßm∂e
 = (
blockSize
 & 0x3u);

400 
ßm∂e
 > 0u)

403 
Xn
 = *
pIn
++;

408 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

410 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

412 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

414 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

416 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

424 
Xn2
 = 
Xn1
;

425 
Xn1
 = 
Xn
;

426 
Yn2
 = 
Yn1
;

428 
Yn1
 = 
acc
 << 
shi·
;

431 
acc_l
 = 
acc
 & 0xffffffff;

434 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

437 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

440 *
pOut
++ = 
acc_h
;

447 
ßm∂e
--;

451 
pIn
 = 
pD°
;

454 
pOut
 = 
pD°
;

458 *
pSèã
++ = (
q63_t
Ë
Xn1
;

459 *
pSèã
++ = (
q63_t
Ë
Xn2
;

460 *
pSèã
++ = 
Yn1
;

461 *
pSèã
++ = 
Yn2
;

463 } --
°age
);

472 
b0
 = *
pC€ffs
++;

473 
b1
 = *
pC€ffs
++;

474 
b2
 = *
pC€ffs
++;

475 
a1
 = *
pC€ffs
++;

476 
a2
 = *
pC€ffs
++;

479 
Xn1
 = 
pSèã
[0];

480 
Xn2
 = 
pSèã
[1];

481 
Yn1
 = 
pSèã
[2];

482 
Yn2
 = 
pSèã
[3];

489 
ßm∂e
 = 
blockSize
;

491 
ßm∂e
 > 0u)

494 
Xn
 = *
pIn
++;

498 
acc
 = (
q63_t
Ë
Xn
 *
b0
;

500 
acc
 +(
q63_t
Ë
Xn1
 *
b1
;

502 
acc
 +(
q63_t
Ë
Xn2
 *
b2
;

504 
acc
 +
	`mu…32x64
(
Yn1
, 
a1
);

506 
acc
 +
	`mu…32x64
(
Yn2
, 
a2
);

514 
Xn2
 = 
Xn1
;

515 
Xn1
 = 
Xn
;

516 
Yn2
 = 
Yn1
;

519 
Yn1
 = 
acc
 << 
shi·
;

522 
acc_l
 = 
acc
 & 0xffffffff;

525 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

528 
acc_h
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 |ácc_h << 
uShi·
;

531 *
pOut
++ = 
acc_h
;

539 
ßm∂e
--;

543 
pIn
 = 
pD°
;

546 
pOut
 = 
pD°
;

549 *
pSèã
++ = (
q63_t
Ë
Xn1
;

550 *
pSèã
++ = (
q63_t
Ë
Xn2
;

551 *
pSèã
++ = 
Yn1
;

552 *
pSèã
++ = 
Yn2
;

554 } --
°age
);

557 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c

42 
	~"¨m_m©h.h
"

178 
	$¨m_biquad_ˇsˇde_df1_f32
(

179 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

180 
Êﬂt32_t
 * 
pSrc
,

181 
Êﬂt32_t
 * 
pD°
,

182 
uöt32_t
 
blockSize
)

184 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

185 
Êﬂt32_t
 *
pOut
 = 
pD°
;

186 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

187 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

188 
Êﬂt32_t
 
acc
;

189 
Êﬂt32_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

190 
Êﬂt32_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

191 
Êﬂt32_t
 
Xn
;

192 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

195 #i‚de‡
ARM_MATH_CM0_FAMILY


202 
b0
 = *
pC€ffs
++;

203 
b1
 = *
pC€ffs
++;

204 
b2
 = *
pC€ffs
++;

205 
a1
 = *
pC€ffs
++;

206 
a2
 = *
pC€ffs
++;

209 
Xn1
 = 
pSèã
[0];

210 
Xn2
 = 
pSèã
[1];

211 
Yn1
 = 
pSèã
[2];

212 
Yn2
 = 
pSèã
[3];

223 
ßm∂e
 = 
blockSize
 >> 2u;

227 
ßm∂e
 > 0u)

230 
Xn
 = *
pIn
++;

233 
Yn2
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * Yn2);

236 *
pOut
++ = 
Yn2
;

246 
Xn2
 = *
pIn
++;

249 
Yn1
 = (
b0
 * 
Xn2
Ë+ (
b1
 * 
Xn
Ë+ (
b2
 * 
Xn1
Ë+ (
a1
 * 
Yn2
Ë+ (
a2
 * Yn1);

252 *
pOut
++ = 
Yn1
;

262 
Xn1
 = *
pIn
++;

265 
Yn2
 = (
b0
 * 
Xn1
Ë+ (
b1
 * 
Xn2
Ë+ (
b2
 * 
Xn
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * Yn2);

268 *
pOut
++ = 
Yn2
;

278 
Xn
 = *
pIn
++;

281 
Yn1
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn2
Ë+ (
a2
 * Yn1);

284 *
pOut
++ = 
Yn1
;

292 
Xn2
 = 
Xn1
;

293 
Xn1
 = 
Xn
;

296 
ßm∂e
--;

302 
ßm∂e
 = 
blockSize
 & 0x3u;

304 
ßm∂e
 > 0u)

307 
Xn
 = *
pIn
++;

310 
acc
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * 
Yn2
);

313 *
pOut
++ = 
acc
;

321 
Xn2
 = 
Xn1
;

322 
Xn1
 = 
Xn
;

323 
Yn2
 = 
Yn1
;

324 
Yn1
 = 
acc
;

327 
ßm∂e
--;

332 *
pSèã
++ = 
Xn1
;

333 *
pSèã
++ = 
Xn2
;

334 *
pSèã
++ = 
Yn1
;

335 *
pSèã
++ = 
Yn2
;

339 
pIn
 = 
pD°
;

342 
pOut
 = 
pD°
;

345 
°age
--;

347 } 
°age
 > 0u);

356 
b0
 = *
pC€ffs
++;

357 
b1
 = *
pC€ffs
++;

358 
b2
 = *
pC€ffs
++;

359 
a1
 = *
pC€ffs
++;

360 
a2
 = *
pC€ffs
++;

363 
Xn1
 = 
pSèã
[0];

364 
Xn2
 = 
pSèã
[1];

365 
Yn1
 = 
pSèã
[2];

366 
Yn2
 = 
pSèã
[3];

372 
ßm∂e
 = 
blockSize
;

374 
ßm∂e
 > 0u)

377 
Xn
 = *
pIn
++;

380 
acc
 = (
b0
 * 
Xn
Ë+ (
b1
 * 
Xn1
Ë+ (
b2
 * 
Xn2
Ë+ (
a1
 * 
Yn1
Ë+ (
a2
 * 
Yn2
);

383 *
pOut
++ = 
acc
;

391 
Xn2
 = 
Xn1
;

392 
Xn1
 = 
Xn
;

393 
Yn2
 = 
Yn1
;

394 
Yn1
 = 
acc
;

397 
ßm∂e
--;

401 *
pSèã
++ = 
Xn1
;

402 *
pSèã
++ = 
Xn2
;

403 *
pSèã
++ = 
Yn1
;

404 *
pSèã
++ = 
Yn2
;

408 
pIn
 = 
pD°
;

411 
pOut
 = 
pD°
;

414 
°age
--;

416 } 
°age
 > 0u);

420 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q15.c

42 
	~"¨m_m©h.h
"

75 
	$¨m_biquad_ˇsˇde_df1_Á°_q15
(

76 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

77 
q15_t
 * 
pSrc
,

78 
q15_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
q15_t
 *
pIn
 = 
pSrc
;

82 
q15_t
 *
pOut
 = 
pD°
;

83 
q31_t
 
ö
;

84 
q31_t
 
out
;

85 
q31_t
 
b0
;

86 
q31_t
 
b1
, 
a1
;

87 
q31_t
 
°©e_ö
, 
°©e_out
;

88 
q31_t
 
acc
;

89 
öt32_t
 
shi·
 = (öt32_tË(15 - 
S
->
po°Shi·
);

90 
q15_t
 *
pSèã
 = 
S
->pState;

91 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

92 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

100 
b0
 = *
	`__SIMD32
(
pC€ffs
)++;

103 
b1
 = *
	`__SIMD32
(
pC€ffs
)++;

106 
a1
 = *
	`__SIMD32
(
pC€ffs
)++;

109 
°©e_ö
 = *
	`__SIMD32
(
pSèã
)++;

112 
°©e_out
 = *
	`__SIMD32
(
pSèã
)--;

120 
ßm∂e
 = 
blockSize
 >> 1u;

124 
ßm∂e
 > 0u)

128 
ö
 = *
	`__SIMD32
(
pIn
)++;

131 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

133 
acc
 = 
	`__SMLAD
(
b1
, 
°©e_ö
, 
out
);

135 
acc
 = 
	`__SMLAD
(
a1
, 
°©e_out
,ácc);

138 
out
 = 
	`__SSAT
((
acc
 >> 
shi·
), 16);

149 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


151 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

152 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

156 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, (
ö
 >> 16), 16);

157 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, (
out
), 16);

162 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

164 
acc
 = 
	`__SMLAD
(
b1
, 
°©e_ö
, 
out
);

166 
acc
 = 
	`__SMLAD
(
a1
, 
°©e_out
,ácc);

169 
out
 = 
	`__SSAT
((
acc
 >> 
shi·
), 16);

174 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


176 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
°©e_out
, 
out
, 16);

180 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
out
, 
°©e_out
 >> 16, 16);

193 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


195 
°©e_ö
 = 
	`__PKHBT
(
ö
 >> 16, state_in, 16);

196 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

200 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

201 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

207 
ßm∂e
--;

214 if((
blockSize
 & 0x1u) != 0u)

217 
ö
 = *
pIn
++;

221 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


223 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

227 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

232 
acc
 = 
	`__SMLAD
(
b1
, 
°©e_ö
, 
out
);

234 
acc
 = 
	`__SMLAD
(
a1
, 
°©e_out
,ácc);

237 
out
 = 
	`__SSAT
((
acc
 >> 
shi·
), 16);

240 *
pOut
++ = (
q15_t
Ë
out
;

251 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


253 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

254 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

258 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

259 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

267 
pIn
 = 
pD°
;

270 
pOut
 = 
pD°
;

273 *
	`__SIMD32
(
pSèã
)++ = 
°©e_ö
;

274 *
	`__SIMD32
(
pSèã
)++ = 
°©e_out
;

278 
°age
--;

280 } 
°age
 > 0u);

281 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q31.c

42 
	~"¨m_m©h.h
"

77 
	$¨m_biquad_ˇsˇde_df1_Á°_q31
(

78 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

79 
q31_t
 * 
pSrc
,

80 
q31_t
 * 
pD°
,

81 
uöt32_t
 
blockSize
)

83 
q31_t
 
acc
 = 0;

84 
q31_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

85 
q31_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

86 
q31_t
 *
pIn
 = 
pSrc
;

87 
q31_t
 *
pOut
 = 
pD°
;

88 
q31_t
 *
pSèã
 = 
S
->pState;

89 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

90 
q31_t
 
Xn
;

91 
öt32_t
 
shi·
 = (öt32_tË
S
->
po°Shi·
 + 1;

92 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

98 
b0
 = *
pC€ffs
++;

99 
b1
 = *
pC€ffs
++;

100 
b2
 = *
pC€ffs
++;

101 
a1
 = *
pC€ffs
++;

102 
a2
 = *
pC€ffs
++;

105 
Xn1
 = 
pSèã
[0];

106 
Xn2
 = 
pSèã
[1];

107 
Yn1
 = 
pSèã
[2];

108 
Yn2
 = 
pSèã
[3];

116 
ßm∂e
 = 
blockSize
 >> 2u;

120 
ßm∂e
 > 0u)

123 
Xn
 = *
pIn
;

128 
	`mu…_32x32_kìp32_R
(
acc
, 
b1
, 
Xn1
);

131 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b0
, 
Xn
);

134 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn2
);

137 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn1
);

140 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn2
);

143 
Yn2
 = 
acc
 << 
shi·
;

146 
Xn2
 = *(
pIn
 + 1u);

149 *
pOut
 = 
Yn2
;

154 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn2
);

157 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn
);

160 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn1
);

163 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn2
);

166 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn1
);

169 
Yn1
 = 
acc
 << 
shi·
;

172 
Xn1
 = *(
pIn
 + 2u);

175 *(
pOut
 + 1uË
Yn1
;

180 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn1
);

183 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn2
);

186 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn
);

189 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn1
);

192 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn2
);

195 
Yn2
 = 
acc
 << 
shi·
;

198 
Xn
 = *(
pIn
 + 3u);

201 *(
pOut
 + 2uË
Yn2
;

202 
pIn
 += 4u;

207 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn
);

210 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn1
);

213 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn2
);

216 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn2
);

219 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn1
);

224 
Xn2
 = 
Xn1
;

227 
Yn1
 = 
acc
 << 
shi·
;

230 
Xn1
 = 
Xn
;

233 *(
pOut
 + 3uË
Yn1
;

234 
pOut
 += 4u;

237 
ßm∂e
--;

242 
ßm∂e
 = (
blockSize
 & 0x3u);

244 
ßm∂e
 > 0u)

247 
Xn
 = *
pIn
++;

252 
	`mu…_32x32_kìp32_R
(
acc
, 
b0
, 
Xn
);

255 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b1
, 
Xn1
);

258 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
b2
, 
Xn2
);

261 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a1
, 
Yn1
);

264 
	`mu…Acc_32x32_kìp32_R
(
acc
, 
a2
, 
Yn2
);

267 
acc
 =ác¯<< 
shi·
;

275 
Xn2
 = 
Xn1
;

276 
Xn1
 = 
Xn
;

277 
Yn2
 = 
Yn1
;

278 
Yn1
 = 
acc
;

281 *
pOut
++ = 
acc
;

284 
ßm∂e
--;

289 
pIn
 = 
pD°
;

292 
pOut
 = 
pD°
;

295 *
pSèã
++ = 
Xn1
;

296 *
pSèã
++ = 
Xn2
;

297 *
pSèã
++ = 
Yn1
;

298 *
pSèã
++ = 
Yn2
;

300 } --
°age
);

301 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_f32.c

41 
	~"¨m_m©h.h
"

88 
	$¨m_biquad_ˇsˇde_df1_öô_f32
(

89 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

90 
uöt8_t
 
numSèges
,

91 
Êﬂt32_t
 * 
pC€ffs
,

92 
Êﬂt32_t
 * 
pSèã
)

95 
S
->
numSèges
 =ÇumStages;

98 
S
->
pC€ffs
 =ÖCoeffs;

101 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt32_t
));

104 
S
->
pSèã
 =ÖState;

105 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q15.c

41 
	~"¨m_m©h.h
"

86 
	$¨m_biquad_ˇsˇde_df1_öô_q15
(

87 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

88 
uöt8_t
 
numSèges
,

89 
q15_t
 * 
pC€ffs
,

90 
q15_t
 * 
pSèã
,

91 
öt8_t
 
po°Shi·
)

94 
S
->
numSèges
 =ÇumStages;

97 
S
->
po°Shi·
 =ÖostShift;

100 
S
->
pC€ffs
 =ÖCoeffs;

103 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
q15_t
));

106 
S
->
pSèã
 =ÖState;

107 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q31.c

42 
	~"¨m_m©h.h
"

86 
	$¨m_biquad_ˇsˇde_df1_öô_q31
(

87 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

88 
uöt8_t
 
numSèges
,

89 
q31_t
 * 
pC€ffs
,

90 
q31_t
 * 
pSèã
,

91 
öt8_t
 
po°Shi·
)

94 
S
->
numSèges
 =ÇumStages;

97 
S
->
po°Shi·
 =ÖostShift;

100 
S
->
pC€ffs
 =ÖCoeffs;

103 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
q31_t
));

106 
S
->
pSèã
 =ÖState;

107 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q15.c

42 
	~"¨m_m©h.h
"

75 
	$¨m_biquad_ˇsˇde_df1_q15
(

76 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

77 
q15_t
 * 
pSrc
,

78 
q15_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

83 #i‚de‡
ARM_MATH_CM0_FAMILY


87 
q15_t
 *
pIn
 = 
pSrc
;

88 
q15_t
 *
pOut
 = 
pD°
;

89 
q31_t
 
ö
;

90 
q31_t
 
out
;

91 
q31_t
 
b0
;

92 
q31_t
 
b1
, 
a1
;

93 
q31_t
 
°©e_ö
, 
°©e_out
;

94 
q31_t
 
acc_l
, 
acc_h
;

95 
q63_t
 
acc
;

96 
öt32_t
 
lShi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

97 
q15_t
 *
pSèã
 = 
S
->pState;

98 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

99 
uöt32_t
 
ßm∂e
, 
°age
 = (uöt32_tË
S
->
numSèges
;

100 
öt32_t
 
uShi·
 = (32 - 
lShi·
);

105 
b0
 = *
	`__SIMD32
(
pC€ffs
)++;

108 
b1
 = *
	`__SIMD32
(
pC€ffs
)++;

111 
a1
 = *
	`__SIMD32
(
pC€ffs
)++;

114 
°©e_ö
 = *
	`__SIMD32
(
pSèã
)++;

117 
°©e_out
 = *
	`__SIMD32
(
pSèã
)--;

125 
ßm∂e
 = 
blockSize
 >> 1u;

129 
ßm∂e
 > 0u)

133 
ö
 = *
	`__SIMD32
(
pIn
)++;

136 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

139 
acc
 = 
	`__SMLALD
(
b1
, 
°©e_ö
, 
out
);

141 
acc
 = 
	`__SMLALD
(
a1
, 
°©e_out
,ácc);

145 
acc_l
 = 
acc
 & 0xffffffff;

148 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

151 
out
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

153 
out
 = 
	`__SSAT
(out, 16);

164 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


166 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

167 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

171 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, (
ö
 >> 16), 16);

172 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, (
out
), 16);

177 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

179 
acc
 = 
	`__SMLALD
(
b1
, 
°©e_ö
, 
out
);

181 
acc
 = 
	`__SMLALD
(
a1
, 
°©e_out
,ácc);

185 
acc_l
 = 
acc
 & 0xffffffff;

188 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

191 
out
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

193 
out
 = 
	`__SSAT
(out, 16);

197 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


199 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
°©e_out
, 
out
, 16);

203 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
out
, 
°©e_out
 >> 16, 16);

215 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


217 
°©e_ö
 = 
	`__PKHBT
(
ö
 >> 16, state_in, 16);

218 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

222 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

223 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

229 
ßm∂e
--;

236 if((
blockSize
 & 0x1u) != 0u)

239 
ö
 = *
pIn
++;

243 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


245 
out
 = 
	`__SMUAD
(
b0
, 
ö
);

249 
out
 = 
	`__SMUADX
(
b0
, 
ö
);

254 
acc
 = 
	`__SMLALD
(
b1
, 
°©e_ö
, 
out
);

256 
acc
 = 
	`__SMLALD
(
a1
, 
°©e_out
,ácc);

260 
acc_l
 = 
acc
 & 0xffffffff;

263 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

266 
out
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

268 
out
 = 
	`__SSAT
(out, 16);

271 *
pOut
++ = (
q15_t
Ë
out
;

282 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


284 
°©e_ö
 = 
	`__PKHBT
(
ö
, state_in, 16);

285 
°©e_out
 = 
	`__PKHBT
(
out
, state_out, 16);

289 
°©e_ö
 = 
	`__PKHBT
(°©e_ö >> 16, 
ö
, 16);

290 
°©e_out
 = 
	`__PKHBT
(°©e_ouà>> 16, 
out
, 16);

298 
pIn
 = 
pD°
;

301 
pOut
 = 
pD°
;

304 *
	`__SIMD32
(
pSèã
)++ = 
°©e_ö
;

305 *
	`__SIMD32
(
pSèã
)++ = 
°©e_out
;

309 
°age
--;

311 } 
°age
 > 0u);

317 
q15_t
 *
pIn
 = 
pSrc
;

318 
q15_t
 *
pOut
 = 
pD°
;

319 
q15_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

320 
q15_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

321 
q15_t
 
Xn
;

322 
q63_t
 
acc
;

323 
öt32_t
 
shi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

324 
q15_t
 *
pSèã
 = 
S
->pState;

325 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

326 
uöt32_t
 
ßm∂e
, 
°age
 = (uöt32_tË
S
->
numSèges
;

331 
b0
 = *
pC€ffs
++;

332 
pC€ffs
++;

333 
b1
 = *
pC€ffs
++;

334 
b2
 = *
pC€ffs
++;

335 
a1
 = *
pC€ffs
++;

336 
a2
 = *
pC€ffs
++;

339 
Xn1
 = 
pSèã
[0];

340 
Xn2
 = 
pSèã
[1];

341 
Yn1
 = 
pSèã
[2];

342 
Yn2
 = 
pSèã
[3];

348 
ßm∂e
 = 
blockSize
;

350 
ßm∂e
 > 0u)

353 
Xn
 = *
pIn
++;

357 
acc
 = (
q31_t
Ë
b0
 *
Xn
;

360 
acc
 +(
q31_t
Ë
b1
 *
Xn1
;

362 
acc
 +(
q31_t
Ë
b2
 *
Xn2
;

364 
acc
 +(
q31_t
Ë
a1
 *
Yn1
;

366 
acc
 +(
q31_t
Ë
a2
 *
Yn2
;

369 
acc
 = 
	`__SSAT
(◊c¯>> 
shi·
), 16);

377 
Xn2
 = 
Xn1
;

378 
Xn1
 = 
Xn
;

379 
Yn2
 = 
Yn1
;

380 
Yn1
 = (
q15_t
Ë
acc
;

383 *
pOut
++ = (
q15_t
Ë
acc
;

386 
ßm∂e
--;

391 
pIn
 = 
pD°
;

394 
pOut
 = 
pD°
;

397 *
pSèã
++ = 
Xn1
;

398 *
pSèã
++ = 
Xn2
;

399 *
pSèã
++ = 
Yn1
;

400 *
pSèã
++ = 
Yn2
;

402 } --
°age
);

406 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q31.c

42 
	~"¨m_m©h.h
"

74 
	$¨m_biquad_ˇsˇde_df1_q31
(

75 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

76 
q31_t
 * 
pSrc
,

77 
q31_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
q63_t
 
acc
;

81 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

82 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

83 
q31_t
 *
pIn
 = 
pSrc
;

84 
q31_t
 *
pOut
 = 
pD°
;

85 
q31_t
 *
pSèã
 = 
S
->pState;

86 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

87 
q31_t
 
Xn1
, 
Xn2
, 
Yn1
, 
Yn2
;

88 
q31_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

89 
q31_t
 
Xn
;

90 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY_FAMILY


95 
q31_t
 
acc_l
, 
acc_h
;

102 
b0
 = *
pC€ffs
++;

103 
b1
 = *
pC€ffs
++;

104 
b2
 = *
pC€ffs
++;

105 
a1
 = *
pC€ffs
++;

106 
a2
 = *
pC€ffs
++;

109 
Xn1
 = 
pSèã
[0];

110 
Xn2
 = 
pSèã
[1];

111 
Yn1
 = 
pSèã
[2];

112 
Yn2
 = 
pSèã
[3];

120 
ßm∂e
 = 
blockSize
 >> 2u;

124 
ßm∂e
 > 0u)

127 
Xn
 = *
pIn
++;

132 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

134 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

136 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

138 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

140 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

145 
acc_l
 = 
acc
 & 0xffffffff;

148 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

151 
Yn2
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

154 *
pOut
++ = 
Yn2
;

157 
Xn2
 = *
pIn
++;

162 
acc
 = (
q63_t
Ë
b0
 *
Xn2
;

164 
acc
 +(
q63_t
Ë
b1
 *
Xn
;

166 
acc
 +(
q63_t
Ë
b2
 *
Xn1
;

168 
acc
 +(
q63_t
Ë
a1
 *
Yn2
;

170 
acc
 +(
q63_t
Ë
a2
 *
Yn1
;

176 
acc_l
 = 
acc
 & 0xffffffff;

179 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

183 
Yn1
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

186 *
pOut
++ = 
Yn1
;

189 
Xn1
 = *
pIn
++;

194 
acc
 = (
q63_t
Ë
b0
 *
Xn1
;

196 
acc
 +(
q63_t
Ë
b1
 *
Xn2
;

198 
acc
 +(
q63_t
Ë
b2
 *
Xn
;

200 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

202 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

206 
acc_l
 = 
acc
 & 0xffffffff;

209 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

213 
Yn2
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

216 *
pOut
++ = 
Yn2
;

219 
Xn
 = *
pIn
++;

224 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

226 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

228 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

230 
acc
 +(
q63_t
Ë
a1
 *
Yn2
;

232 
acc
 +(
q63_t
Ë
a2
 *
Yn1
;

236 
acc_l
 = 
acc
 & 0xffffffff;

239 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

242 
Yn1
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

250 
Xn2
 = 
Xn1
;

251 
Xn1
 = 
Xn
;

254 *
pOut
++ = 
Yn1
;

257 
ßm∂e
--;

262 
ßm∂e
 = (
blockSize
 & 0x3u);

264 
ßm∂e
 > 0u)

267 
Xn
 = *
pIn
++;

272 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

274 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

276 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

278 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

280 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

283 
acc
 =ác¯>> 
lShi·
;

291 
Xn2
 = 
Xn1
;

292 
Xn1
 = 
Xn
;

293 
Yn2
 = 
Yn1
;

294 
Yn1
 = (
q31_t
Ë
acc
;

297 *
pOut
++ = (
q31_t
Ë
acc
;

300 
ßm∂e
--;

305 
pIn
 = 
pD°
;

308 
pOut
 = 
pD°
;

311 *
pSèã
++ = 
Xn1
;

312 *
pSèã
++ = 
Xn2
;

313 *
pSèã
++ = 
Yn1
;

314 *
pSèã
++ = 
Yn2
;

316 } --
°age
);

325 
b0
 = *
pC€ffs
++;

326 
b1
 = *
pC€ffs
++;

327 
b2
 = *
pC€ffs
++;

328 
a1
 = *
pC€ffs
++;

329 
a2
 = *
pC€ffs
++;

332 
Xn1
 = 
pSèã
[0];

333 
Xn2
 = 
pSèã
[1];

334 
Yn1
 = 
pSèã
[2];

335 
Yn2
 = 
pSèã
[3];

341 
ßm∂e
 = 
blockSize
;

343 
ßm∂e
 > 0u)

346 
Xn
 = *
pIn
++;

350 
acc
 = (
q63_t
Ë
b0
 *
Xn
;

353 
acc
 +(
q63_t
Ë
b1
 *
Xn1
;

355 
acc
 +(
q63_t
Ë
b2
 *
Xn2
;

357 
acc
 +(
q63_t
Ë
a1
 *
Yn1
;

359 
acc
 +(
q63_t
Ë
a2
 *
Yn2
;

362 
acc
 =ác¯>> 
lShi·
;

370 
Xn2
 = 
Xn1
;

371 
Xn1
 = 
Xn
;

372 
Yn2
 = 
Yn1
;

373 
Yn1
 = (
q31_t
Ë
acc
;

376 *
pOut
++ = (
q31_t
Ë
acc
;

379 
ßm∂e
--;

384 
pIn
 = 
pD°
;

387 
pOut
 = 
pD°
;

390 *
pSèã
++ = 
Xn1
;

391 *
pSèã
++ = 
Xn2
;

392 *
pSèã
++ = 
Yn1
;

393 *
pSèã
++ = 
Yn2
;

395 } --
°age
);

398 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f32.c

42 
	~"¨m_m©h.h
"

154 
LOW_OPTIMIZATION_ENTER


155 
	$¨m_biquad_ˇsˇde_df2T_f32
(

156 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

157 
Êﬂt32_t
 * 
pSrc
,

158 
Êﬂt32_t
 * 
pD°
,

159 
uöt32_t
 
blockSize
)

162 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

163 
Êﬂt32_t
 *
pOut
 = 
pD°
;

164 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

165 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

166 
Êﬂt32_t
 
acc1
;

167 
Êﬂt32_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

168 
Êﬂt32_t
 
Xn1
;

169 
Êﬂt32_t
 
d1
, 
d2
;

170 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

172 #i‡
	`deföed
(
ARM_MATH_CM7
)

174 
Êﬂt32_t
 
Xn2
, 
Xn3
, 
Xn4
, 
Xn5
, 
Xn6
, 
Xn7
, 
Xn8
;

175 
Êﬂt32_t
 
Xn9
, 
Xn10
, 
Xn11
, 
Xn12
, 
Xn13
, 
Xn14
, 
Xn15
, 
Xn16
;

176 
Êﬂt32_t
 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

177 
Êﬂt32_t
 
acc8
, 
acc9
, 
acc10
, 
acc11
, 
acc12
, 
acc13
, 
acc14
, 
acc15
, 
acc16
;

182 
b0
 = 
pC€ffs
[0];

183 
b1
 = 
pC€ffs
[1];

184 
b2
 = 
pC€ffs
[2];

185 
a1
 = 
pC€ffs
[3];

187 
ßm∂e
 = 
blockSize
 >> 4u;

188 
a2
 = 
pC€ffs
[4];

191 
d1
 = 
pSèã
[0];

192 
d2
 = 
pSèã
[1];

194 
pC€ffs
 += 5u;

199 
ßm∂e
 > 0u) {

206 
Xn1
 = 
pIn
[0 ];

207 
Xn2
 = 
pIn
[1 ];

210 
Xn3
 = 
pIn
[2 ];

211 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

213 
Xn4
 = 
pIn
[3 ];

214 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

216 
Xn5
 = 
pIn
[4 ];

217 
d2
 = 
b2
 * 
Xn1
;

219 
Xn6
 = 
pIn
[5 ];

220 
d1
 +
a1
 * 
acc1
;

222 
Xn7
 = 
pIn
[6 ];

223 
d2
 +
a2
 * 
acc1
;

226 
Xn8
 = 
pIn
[7 ];

227 
acc2
 = 
b0
 * 
Xn2
 + 
d1
;

229 
Xn9
 = 
pIn
[8 ];

230 
d1
 = 
b1
 * 
Xn2
 + 
d2
;

232 
Xn10
 = 
pIn
[9 ];

233 
d2
 = 
b2
 * 
Xn2
;

235 
Xn11
 = 
pIn
[10];

236 
d1
 +
a1
 * 
acc2
;

238 
Xn12
 = 
pIn
[11];

239 
d2
 +
a2
 * 
acc2
;

242 
Xn13
 = 
pIn
[12];

243 
acc3
 = 
b0
 * 
Xn3
 + 
d1
;

245 
Xn14
 = 
pIn
[13];

246 
d1
 = 
b1
 * 
Xn3
 + 
d2
;

248 
Xn15
 = 
pIn
[14];

249 
d2
 = 
b2
 * 
Xn3
;

251 
Xn16
 = 
pIn
[15];

252 
d1
 +
a1
 * 
acc3
;

254 
pIn
 += 16;

255 
d2
 +
a2
 * 
acc3
;

258 
acc4
 = 
b0
 * 
Xn4
 + 
d1
;

259 
d1
 = 
b1
 * 
Xn4
 + 
d2
;

260 
d2
 = 
b2
 * 
Xn4
;

261 
d1
 +
a1
 * 
acc4
;

262 
d2
 +
a2
 * 
acc4
;

265 
acc5
 = 
b0
 * 
Xn5
 + 
d1
;

266 
d1
 = 
b1
 * 
Xn5
 + 
d2
;

267 
d2
 = 
b2
 * 
Xn5
;

268 
d1
 +
a1
 * 
acc5
;

269 
d2
 +
a2
 * 
acc5
;

272 
acc6
 = 
b0
 * 
Xn6
 + 
d1
;

273 
d1
 = 
b1
 * 
Xn6
 + 
d2
;

274 
d2
 = 
b2
 * 
Xn6
;

275 
d1
 +
a1
 * 
acc6
;

276 
d2
 +
a2
 * 
acc6
;

279 
acc7
 = 
b0
 * 
Xn7
 + 
d1
;

280 
d1
 = 
b1
 * 
Xn7
 + 
d2
;

281 
d2
 = 
b2
 * 
Xn7
;

282 
d1
 +
a1
 * 
acc7
;

283 
d2
 +
a2
 * 
acc7
;

286 
acc8
 = 
b0
 * 
Xn8
 + 
d1
;

287 
d1
 = 
b1
 * 
Xn8
 + 
d2
;

288 
d2
 = 
b2
 * 
Xn8
;

289 
d1
 +
a1
 * 
acc8
;

290 
d2
 +
a2
 * 
acc8
;

293 
acc9
 = 
b0
 * 
Xn9
 + 
d1
;

294 
d1
 = 
b1
 * 
Xn9
 + 
d2
;

295 
d2
 = 
b2
 * 
Xn9
;

296 
d1
 +
a1
 * 
acc9
;

297 
d2
 +
a2
 * 
acc9
;

300 
acc10
 = 
b0
 * 
Xn10
 + 
d1
;

301 
d1
 = 
b1
 * 
Xn10
 + 
d2
;

302 
d2
 = 
b2
 * 
Xn10
;

303 
d1
 +
a1
 * 
acc10
;

304 
d2
 +
a2
 * 
acc10
;

307 
acc11
 = 
b0
 * 
Xn11
 + 
d1
;

308 
d1
 = 
b1
 * 
Xn11
 + 
d2
;

309 
d2
 = 
b2
 * 
Xn11
;

310 
d1
 +
a1
 * 
acc11
;

311 
d2
 +
a2
 * 
acc11
;

314 
acc12
 = 
b0
 * 
Xn12
 + 
d1
;

315 
d1
 = 
b1
 * 
Xn12
 + 
d2
;

316 
d2
 = 
b2
 * 
Xn12
;

317 
d1
 +
a1
 * 
acc12
;

318 
d2
 +
a2
 * 
acc12
;

321 
acc13
 = 
b0
 * 
Xn13
 + 
d1
;

322 
d1
 = 
b1
 * 
Xn13
 + 
d2
;

323 
d2
 = 
b2
 * 
Xn13
;

325 
pOut
[0 ] = 
acc1
 ;

326 
d1
 +
a1
 * 
acc13
;

328 
pOut
[1 ] = 
acc2
 ;

329 
d2
 +
a2
 * 
acc13
;

332 
pOut
[2 ] = 
acc3
 ;

333 
acc14
 = 
b0
 * 
Xn14
 + 
d1
;

335 
pOut
[3 ] = 
acc4
 ;

336 
d1
 = 
b1
 * 
Xn14
 + 
d2
;

338 
pOut
[4 ] = 
acc5
 ;

339 
d2
 = 
b2
 * 
Xn14
;

341 
pOut
[5 ] = 
acc6
 ;

342 
d1
 +
a1
 * 
acc14
;

344 
pOut
[6 ] = 
acc7
 ;

345 
d2
 +
a2
 * 
acc14
;

348 
pOut
[7 ] = 
acc8
 ;

349 
pOut
[8 ] = 
acc9
 ;

350 
acc15
 = 
b0
 * 
Xn15
 + 
d1
;

352 
pOut
[9 ] = 
acc10
;

353 
d1
 = 
b1
 * 
Xn15
 + 
d2
;

355 
pOut
[10] = 
acc11
;

356 
d2
 = 
b2
 * 
Xn15
;

358 
pOut
[11] = 
acc12
;

359 
d1
 +
a1
 * 
acc15
;

361 
pOut
[12] = 
acc13
;

362 
d2
 +
a2
 * 
acc15
;

365 
pOut
[13] = 
acc14
;

366 
acc16
 = 
b0
 * 
Xn16
 + 
d1
;

368 
pOut
[14] = 
acc15
;

369 
d1
 = 
b1
 * 
Xn16
 + 
d2
;

371 
pOut
[15] = 
acc16
;

372 
d2
 = 
b2
 * 
Xn16
;

374 
ßm∂e
--;

375 
d1
 +
a1
 * 
acc16
;

377 
pOut
 += 16;

378 
d2
 +
a2
 * 
acc16
;

381 
ßm∂e
 = 
blockSize
 & 0xFu;

382 
ßm∂e
 > 0u) {

383 
Xn1
 = *
pIn
;

384 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

386 
pIn
++;

387 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

389 *
pOut
 = 
acc1
;

390 
d2
 = 
b2
 * 
Xn1
;

392 
pOut
++;

393 
d1
 +
a1
 * 
acc1
;

395 
ßm∂e
--;

396 
d2
 +
a2
 * 
acc1
;

400 
pSèã
[0] = 
d1
;

402 
pIn
 = 
pD°
;

404 
pSèã
[1] = 
d2
;

406 
°age
--;

408 
pSèã
 += 2u;

411 
pOut
 = 
pD°
;

413 } 
°age
 > 0u);

415 #ñi‡
	`deföed
(
ARM_MATH_CM0_FAMILY
)

422 
b0
 = *
pC€ffs
++;

423 
b1
 = *
pC€ffs
++;

424 
b2
 = *
pC€ffs
++;

425 
a1
 = *
pC€ffs
++;

426 
a2
 = *
pC€ffs
++;

429 
d1
 = 
pSèã
[0];

430 
d2
 = 
pSèã
[1];

433 
ßm∂e
 = 
blockSize
;

435 
ßm∂e
 > 0u)

438 
Xn1
 = *
pIn
++;

441 
acc1
 = (
b0
 * 
Xn1
Ë+ 
d1
;

444 *
pOut
++ = 
acc1
;

448 
d1
 = ((
b1
 * 
Xn1
Ë+ (
a1
 * 
acc1
)Ë+ 
d2
;

451 
d2
 = (
b2
 * 
Xn1
Ë+ (
a2
 * 
acc1
);

454 
ßm∂e
--;

458 *
pSèã
++ = 
d1
;

459 *
pSèã
++ = 
d2
;

462 
pIn
 = 
pD°
;

465 
pOut
 = 
pD°
;

468 
°age
--;

470 } 
°age
 > 0u);

474 
Êﬂt32_t
 
Xn2
, 
Xn3
, 
Xn4
;

475 
Êﬂt32_t
 
acc2
, 
acc3
, 
acc4
;

478 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
A1
;

484 
b0
 = *
pC€ffs
++;

485 
b1
 = *
pC€ffs
++;

486 
b2
 = *
pC€ffs
++;

487 
a1
 = *
pC€ffs
++;

488 
a2
 = *
pC€ffs
++;

492 
d1
 = 
pSèã
[0];

493 
d2
 = 
pSèã
[1];

496 
ßm∂e
 = 
blockSize
 >> 2u;

500 
ßm∂e
 > 0u) {

507 
Xn1
 = 
pIn
[0];

508 
Xn2
 = 
pIn
[1];

509 
Xn3
 = 
pIn
[2];

510 
Xn4
 = 
pIn
[3];

511 
pIn
 += 4;

513 
p0
 = 
b0
 * 
Xn1
;

514 
p1
 = 
b1
 * 
Xn1
;

515 
acc1
 = 
p0
 + 
d1
;

516 
p0
 = 
b0
 * 
Xn2
;

517 
p3
 = 
a1
 * 
acc1
;

518 
p2
 = 
b2
 * 
Xn1
;

519 
A1
 = 
p1
 + 
p3
;

520 
p4
 = 
a2
 * 
acc1
;

521 
d1
 = 
A1
 + 
d2
;

522 
d2
 = 
p2
 + 
p4
;

524 
p1
 = 
b1
 * 
Xn2
;

525 
acc2
 = 
p0
 + 
d1
;

526 
p0
 = 
b0
 * 
Xn3
;

527 
p3
 = 
a1
 * 
acc2
;

528 
p2
 = 
b2
 * 
Xn2
;

529 
A1
 = 
p1
 + 
p3
;

530 
p4
 = 
a2
 * 
acc2
;

531 
d1
 = 
A1
 + 
d2
;

532 
d2
 = 
p2
 + 
p4
;

534 
p1
 = 
b1
 * 
Xn3
;

535 
acc3
 = 
p0
 + 
d1
;

536 
p0
 = 
b0
 * 
Xn4
;

537 
p3
 = 
a1
 * 
acc3
;

538 
p2
 = 
b2
 * 
Xn3
;

539 
A1
 = 
p1
 + 
p3
;

540 
p4
 = 
a2
 * 
acc3
;

541 
d1
 = 
A1
 + 
d2
;

542 
d2
 = 
p2
 + 
p4
;

544 
acc4
 = 
p0
 + 
d1
;

545 
p1
 = 
b1
 * 
Xn4
;

546 
p3
 = 
a1
 * 
acc4
;

547 
p2
 = 
b2
 * 
Xn4
;

548 
A1
 = 
p1
 + 
p3
;

549 
p4
 = 
a2
 * 
acc4
;

550 
d1
 = 
A1
 + 
d2
;

551 
d2
 = 
p2
 + 
p4
;

553 
pOut
[0] = 
acc1
;

554 
pOut
[1] = 
acc2
;

555 
pOut
[2] = 
acc3
;

556 
pOut
[3] = 
acc4
;

557 
pOut
 += 4;

559 
ßm∂e
--;

562 
ßm∂e
 = 
blockSize
 & 0x3u;

563 
ßm∂e
 > 0u) {

564 
Xn1
 = *
pIn
++;

566 
p0
 = 
b0
 * 
Xn1
;

567 
p1
 = 
b1
 * 
Xn1
;

568 
acc1
 = 
p0
 + 
d1
;

569 
p3
 = 
a1
 * 
acc1
;

570 
p2
 = 
b2
 * 
Xn1
;

571 
A1
 = 
p1
 + 
p3
;

572 
p4
 = 
a2
 * 
acc1
;

573 
d1
 = 
A1
 + 
d2
;

574 
d2
 = 
p2
 + 
p4
;

576 *
pOut
++ = 
acc1
;

578 
ßm∂e
--;

582 *
pSèã
++ = 
d1
;

583 *
pSèã
++ = 
d2
;

586 
pIn
 = 
pD°
;

589 
pOut
 = 
pD°
;

592 
°age
--;

594 } 
°age
 > 0u);

598 
	}
}

599 
	gLOW_OPTIMIZATION_EXIT


	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f64.c

42 
	~"¨m_m©h.h
"

154 
LOW_OPTIMIZATION_ENTER


155 
	$¨m_biquad_ˇsˇde_df2T_f64
(

156 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

157 
Êﬂt64_t
 * 
pSrc
,

158 
Êﬂt64_t
 * 
pD°
,

159 
uöt32_t
 
blockSize
)

162 
Êﬂt64_t
 *
pIn
 = 
pSrc
;

163 
Êﬂt64_t
 *
pOut
 = 
pD°
;

164 
Êﬂt64_t
 *
pSèã
 = 
S
->pState;

165 
Êﬂt64_t
 *
pC€ffs
 = 
S
->pCoeffs;

166 
Êﬂt64_t
 
acc1
;

167 
Êﬂt64_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

168 
Êﬂt64_t
 
Xn1
;

169 
Êﬂt64_t
 
d1
, 
d2
;

170 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

172 #i‡
	`deföed
(
ARM_MATH_CM7
)

174 
Êﬂt64_t
 
Xn2
, 
Xn3
, 
Xn4
, 
Xn5
, 
Xn6
, 
Xn7
, 
Xn8
;

175 
Êﬂt64_t
 
Xn9
, 
Xn10
, 
Xn11
, 
Xn12
, 
Xn13
, 
Xn14
, 
Xn15
, 
Xn16
;

176 
Êﬂt64_t
 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

177 
Êﬂt64_t
 
acc8
, 
acc9
, 
acc10
, 
acc11
, 
acc12
, 
acc13
, 
acc14
, 
acc15
, 
acc16
;

182 
b0
 = 
pC€ffs
[0];

183 
b1
 = 
pC€ffs
[1];

184 
b2
 = 
pC€ffs
[2];

185 
a1
 = 
pC€ffs
[3];

187 
ßm∂e
 = 
blockSize
 >> 4u;

188 
a2
 = 
pC€ffs
[4];

191 
d1
 = 
pSèã
[0];

192 
d2
 = 
pSèã
[1];

194 
pC€ffs
 += 5u;

199 
ßm∂e
 > 0u) {

206 
Xn1
 = 
pIn
[0 ];

207 
Xn2
 = 
pIn
[1 ];

210 
Xn3
 = 
pIn
[2 ];

211 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

213 
Xn4
 = 
pIn
[3 ];

214 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

216 
Xn5
 = 
pIn
[4 ];

217 
d2
 = 
b2
 * 
Xn1
;

219 
Xn6
 = 
pIn
[5 ];

220 
d1
 +
a1
 * 
acc1
;

222 
Xn7
 = 
pIn
[6 ];

223 
d2
 +
a2
 * 
acc1
;

226 
Xn8
 = 
pIn
[7 ];

227 
acc2
 = 
b0
 * 
Xn2
 + 
d1
;

229 
Xn9
 = 
pIn
[8 ];

230 
d1
 = 
b1
 * 
Xn2
 + 
d2
;

232 
Xn10
 = 
pIn
[9 ];

233 
d2
 = 
b2
 * 
Xn2
;

235 
Xn11
 = 
pIn
[10];

236 
d1
 +
a1
 * 
acc2
;

238 
Xn12
 = 
pIn
[11];

239 
d2
 +
a2
 * 
acc2
;

242 
Xn13
 = 
pIn
[12];

243 
acc3
 = 
b0
 * 
Xn3
 + 
d1
;

245 
Xn14
 = 
pIn
[13];

246 
d1
 = 
b1
 * 
Xn3
 + 
d2
;

248 
Xn15
 = 
pIn
[14];

249 
d2
 = 
b2
 * 
Xn3
;

251 
Xn16
 = 
pIn
[15];

252 
d1
 +
a1
 * 
acc3
;

254 
pIn
 += 16;

255 
d2
 +
a2
 * 
acc3
;

258 
acc4
 = 
b0
 * 
Xn4
 + 
d1
;

259 
d1
 = 
b1
 * 
Xn4
 + 
d2
;

260 
d2
 = 
b2
 * 
Xn4
;

261 
d1
 +
a1
 * 
acc4
;

262 
d2
 +
a2
 * 
acc4
;

265 
acc5
 = 
b0
 * 
Xn5
 + 
d1
;

266 
d1
 = 
b1
 * 
Xn5
 + 
d2
;

267 
d2
 = 
b2
 * 
Xn5
;

268 
d1
 +
a1
 * 
acc5
;

269 
d2
 +
a2
 * 
acc5
;

272 
acc6
 = 
b0
 * 
Xn6
 + 
d1
;

273 
d1
 = 
b1
 * 
Xn6
 + 
d2
;

274 
d2
 = 
b2
 * 
Xn6
;

275 
d1
 +
a1
 * 
acc6
;

276 
d2
 +
a2
 * 
acc6
;

279 
acc7
 = 
b0
 * 
Xn7
 + 
d1
;

280 
d1
 = 
b1
 * 
Xn7
 + 
d2
;

281 
d2
 = 
b2
 * 
Xn7
;

282 
d1
 +
a1
 * 
acc7
;

283 
d2
 +
a2
 * 
acc7
;

286 
acc8
 = 
b0
 * 
Xn8
 + 
d1
;

287 
d1
 = 
b1
 * 
Xn8
 + 
d2
;

288 
d2
 = 
b2
 * 
Xn8
;

289 
d1
 +
a1
 * 
acc8
;

290 
d2
 +
a2
 * 
acc8
;

293 
acc9
 = 
b0
 * 
Xn9
 + 
d1
;

294 
d1
 = 
b1
 * 
Xn9
 + 
d2
;

295 
d2
 = 
b2
 * 
Xn9
;

296 
d1
 +
a1
 * 
acc9
;

297 
d2
 +
a2
 * 
acc9
;

300 
acc10
 = 
b0
 * 
Xn10
 + 
d1
;

301 
d1
 = 
b1
 * 
Xn10
 + 
d2
;

302 
d2
 = 
b2
 * 
Xn10
;

303 
d1
 +
a1
 * 
acc10
;

304 
d2
 +
a2
 * 
acc10
;

307 
acc11
 = 
b0
 * 
Xn11
 + 
d1
;

308 
d1
 = 
b1
 * 
Xn11
 + 
d2
;

309 
d2
 = 
b2
 * 
Xn11
;

310 
d1
 +
a1
 * 
acc11
;

311 
d2
 +
a2
 * 
acc11
;

314 
acc12
 = 
b0
 * 
Xn12
 + 
d1
;

315 
d1
 = 
b1
 * 
Xn12
 + 
d2
;

316 
d2
 = 
b2
 * 
Xn12
;

317 
d1
 +
a1
 * 
acc12
;

318 
d2
 +
a2
 * 
acc12
;

321 
acc13
 = 
b0
 * 
Xn13
 + 
d1
;

322 
d1
 = 
b1
 * 
Xn13
 + 
d2
;

323 
d2
 = 
b2
 * 
Xn13
;

325 
pOut
[0 ] = 
acc1
 ;

326 
d1
 +
a1
 * 
acc13
;

328 
pOut
[1 ] = 
acc2
 ;

329 
d2
 +
a2
 * 
acc13
;

332 
pOut
[2 ] = 
acc3
 ;

333 
acc14
 = 
b0
 * 
Xn14
 + 
d1
;

335 
pOut
[3 ] = 
acc4
 ;

336 
d1
 = 
b1
 * 
Xn14
 + 
d2
;

338 
pOut
[4 ] = 
acc5
 ;

339 
d2
 = 
b2
 * 
Xn14
;

341 
pOut
[5 ] = 
acc6
 ;

342 
d1
 +
a1
 * 
acc14
;

344 
pOut
[6 ] = 
acc7
 ;

345 
d2
 +
a2
 * 
acc14
;

348 
pOut
[7 ] = 
acc8
 ;

349 
pOut
[8 ] = 
acc9
 ;

350 
acc15
 = 
b0
 * 
Xn15
 + 
d1
;

352 
pOut
[9 ] = 
acc10
;

353 
d1
 = 
b1
 * 
Xn15
 + 
d2
;

355 
pOut
[10] = 
acc11
;

356 
d2
 = 
b2
 * 
Xn15
;

358 
pOut
[11] = 
acc12
;

359 
d1
 +
a1
 * 
acc15
;

361 
pOut
[12] = 
acc13
;

362 
d2
 +
a2
 * 
acc15
;

365 
pOut
[13] = 
acc14
;

366 
acc16
 = 
b0
 * 
Xn16
 + 
d1
;

368 
pOut
[14] = 
acc15
;

369 
d1
 = 
b1
 * 
Xn16
 + 
d2
;

371 
pOut
[15] = 
acc16
;

372 
d2
 = 
b2
 * 
Xn16
;

374 
ßm∂e
--;

375 
d1
 +
a1
 * 
acc16
;

377 
pOut
 += 16;

378 
d2
 +
a2
 * 
acc16
;

381 
ßm∂e
 = 
blockSize
 & 0xFu;

382 
ßm∂e
 > 0u) {

383 
Xn1
 = *
pIn
;

384 
acc1
 = 
b0
 * 
Xn1
 + 
d1
;

386 
pIn
++;

387 
d1
 = 
b1
 * 
Xn1
 + 
d2
;

389 *
pOut
 = 
acc1
;

390 
d2
 = 
b2
 * 
Xn1
;

392 
pOut
++;

393 
d1
 +
a1
 * 
acc1
;

395 
ßm∂e
--;

396 
d2
 +
a2
 * 
acc1
;

400 
pSèã
[0] = 
d1
;

402 
pIn
 = 
pD°
;

404 
pSèã
[1] = 
d2
;

406 
°age
--;

408 
pSèã
 += 2u;

411 
pOut
 = 
pD°
;

413 } 
°age
 > 0u);

415 #ñi‡
	`deföed
(
ARM_MATH_CM0_FAMILY
)

422 
b0
 = *
pC€ffs
++;

423 
b1
 = *
pC€ffs
++;

424 
b2
 = *
pC€ffs
++;

425 
a1
 = *
pC€ffs
++;

426 
a2
 = *
pC€ffs
++;

429 
d1
 = 
pSèã
[0];

430 
d2
 = 
pSèã
[1];

433 
ßm∂e
 = 
blockSize
;

435 
ßm∂e
 > 0u)

438 
Xn1
 = *
pIn
++;

441 
acc1
 = (
b0
 * 
Xn1
Ë+ 
d1
;

444 *
pOut
++ = 
acc1
;

448 
d1
 = ((
b1
 * 
Xn1
Ë+ (
a1
 * 
acc1
)Ë+ 
d2
;

451 
d2
 = (
b2
 * 
Xn1
Ë+ (
a2
 * 
acc1
);

454 
ßm∂e
--;

458 *
pSèã
++ = 
d1
;

459 *
pSèã
++ = 
d2
;

462 
pIn
 = 
pD°
;

465 
pOut
 = 
pD°
;

468 
°age
--;

470 } 
°age
 > 0u);

474 
Êﬂt64_t
 
Xn2
, 
Xn3
, 
Xn4
;

475 
Êﬂt64_t
 
acc2
, 
acc3
, 
acc4
;

478 
Êﬂt64_t
 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
A1
;

484 
b0
 = *
pC€ffs
++;

485 
b1
 = *
pC€ffs
++;

486 
b2
 = *
pC€ffs
++;

487 
a1
 = *
pC€ffs
++;

488 
a2
 = *
pC€ffs
++;

492 
d1
 = 
pSèã
[0];

493 
d2
 = 
pSèã
[1];

496 
ßm∂e
 = 
blockSize
 >> 2u;

500 
ßm∂e
 > 0u) {

507 
Xn1
 = 
pIn
[0];

508 
Xn2
 = 
pIn
[1];

509 
Xn3
 = 
pIn
[2];

510 
Xn4
 = 
pIn
[3];

511 
pIn
 += 4;

513 
p0
 = 
b0
 * 
Xn1
;

514 
p1
 = 
b1
 * 
Xn1
;

515 
acc1
 = 
p0
 + 
d1
;

516 
p0
 = 
b0
 * 
Xn2
;

517 
p3
 = 
a1
 * 
acc1
;

518 
p2
 = 
b2
 * 
Xn1
;

519 
A1
 = 
p1
 + 
p3
;

520 
p4
 = 
a2
 * 
acc1
;

521 
d1
 = 
A1
 + 
d2
;

522 
d2
 = 
p2
 + 
p4
;

524 
p1
 = 
b1
 * 
Xn2
;

525 
acc2
 = 
p0
 + 
d1
;

526 
p0
 = 
b0
 * 
Xn3
;

527 
p3
 = 
a1
 * 
acc2
;

528 
p2
 = 
b2
 * 
Xn2
;

529 
A1
 = 
p1
 + 
p3
;

530 
p4
 = 
a2
 * 
acc2
;

531 
d1
 = 
A1
 + 
d2
;

532 
d2
 = 
p2
 + 
p4
;

534 
p1
 = 
b1
 * 
Xn3
;

535 
acc3
 = 
p0
 + 
d1
;

536 
p0
 = 
b0
 * 
Xn4
;

537 
p3
 = 
a1
 * 
acc3
;

538 
p2
 = 
b2
 * 
Xn3
;

539 
A1
 = 
p1
 + 
p3
;

540 
p4
 = 
a2
 * 
acc3
;

541 
d1
 = 
A1
 + 
d2
;

542 
d2
 = 
p2
 + 
p4
;

544 
acc4
 = 
p0
 + 
d1
;

545 
p1
 = 
b1
 * 
Xn4
;

546 
p3
 = 
a1
 * 
acc4
;

547 
p2
 = 
b2
 * 
Xn4
;

548 
A1
 = 
p1
 + 
p3
;

549 
p4
 = 
a2
 * 
acc4
;

550 
d1
 = 
A1
 + 
d2
;

551 
d2
 = 
p2
 + 
p4
;

553 
pOut
[0] = 
acc1
;

554 
pOut
[1] = 
acc2
;

555 
pOut
[2] = 
acc3
;

556 
pOut
[3] = 
acc4
;

557 
pOut
 += 4;

559 
ßm∂e
--;

562 
ßm∂e
 = 
blockSize
 & 0x3u;

563 
ßm∂e
 > 0u) {

564 
Xn1
 = *
pIn
++;

566 
p0
 = 
b0
 * 
Xn1
;

567 
p1
 = 
b1
 * 
Xn1
;

568 
acc1
 = 
p0
 + 
d1
;

569 
p3
 = 
a1
 * 
acc1
;

570 
p2
 = 
b2
 * 
Xn1
;

571 
A1
 = 
p1
 + 
p3
;

572 
p4
 = 
a2
 * 
acc1
;

573 
d1
 = 
A1
 + 
d2
;

574 
d2
 = 
p2
 + 
p4
;

576 *
pOut
++ = 
acc1
;

578 
ßm∂e
--;

582 *
pSèã
++ = 
d1
;

583 *
pSèã
++ = 
d2
;

586 
pIn
 = 
pD°
;

589 
pOut
 = 
pD°
;

592 
°age
--;

594 } 
°age
 > 0u);

598 
	}
}

599 
	gLOW_OPTIMIZATION_EXIT


	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f32.c

42 
	~"¨m_m©h.h
"

81 
	$¨m_biquad_ˇsˇde_df2T_öô_f32
(

82 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

83 
uöt8_t
 
numSèges
,

84 
Êﬂt32_t
 * 
pC€ffs
,

85 
Êﬂt32_t
 * 
pSèã
)

88 
S
->
numSèges
 =ÇumStages;

91 
S
->
pC€ffs
 =ÖCoeffs;

94 
	`mem£t
(
pSèã
, 0, (2u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt32_t
));

97 
S
->
pSèã
 =ÖState;

98 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f64.c

42 
	~"¨m_m©h.h
"

81 
	$¨m_biquad_ˇsˇde_df2T_öô_f64
(

82 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

83 
uöt8_t
 
numSèges
,

84 
Êﬂt64_t
 * 
pC€ffs
,

85 
Êﬂt64_t
 * 
pSèã
)

88 
S
->
numSèges
 =ÇumStages;

91 
S
->
pC€ffs
 =ÖCoeffs;

94 
	`mem£t
(
pSèã
, 0, (2u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt64_t
));

97 
S
->
pSèã
 =ÖState;

98 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_f32.c

42 
	~"¨m_m©h.h
"

154 
LOW_OPTIMIZATION_ENTER


155 
	$¨m_biquad_ˇsˇde_°îeo_df2T_f32
(

156 c⁄° 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

157 
Êﬂt32_t
 * 
pSrc
,

158 
Êﬂt32_t
 * 
pD°
,

159 
uöt32_t
 
blockSize
)

162 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

163 
Êﬂt32_t
 *
pOut
 = 
pD°
;

164 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

165 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

166 
Êﬂt32_t
 
acc1a
, 
acc1b
;

167 
Êﬂt32_t
 
b0
, 
b1
, 
b2
, 
a1
, 
a2
;

168 
Êﬂt32_t
 
Xn1a
, 
Xn1b
;

169 
Êﬂt32_t
 
d1a
, 
d2a
, 
d1b
, 
d2b
;

170 
uöt32_t
 
ßm∂e
, 
°age
 = 
S
->
numSèges
;

172 #i‡
	`deföed
(
ARM_MATH_CM7
)

174 
Êﬂt32_t
 
Xn2a
, 
Xn3a
, 
Xn4a
, 
Xn5a
, 
Xn6a
, 
Xn7a
, 
Xn8a
;

175 
Êﬂt32_t
 
Xn2b
, 
Xn3b
, 
Xn4b
, 
Xn5b
, 
Xn6b
, 
Xn7b
, 
Xn8b
;

176 
Êﬂt32_t
 
acc2a
, 
acc3a
, 
acc4a
, 
acc5a
, 
acc6a
, 
acc7a
, 
acc8a
;

177 
Êﬂt32_t
 
acc2b
, 
acc3b
, 
acc4b
, 
acc5b
, 
acc6b
, 
acc7b
, 
acc8b
;

182 
b0
 = 
pC€ffs
[0];

183 
b1
 = 
pC€ffs
[1];

184 
b2
 = 
pC€ffs
[2];

185 
a1
 = 
pC€ffs
[3];

187 
ßm∂e
 = 
blockSize
 >> 3u;

188 
a2
 = 
pC€ffs
[4];

191 
d1a
 = 
pSèã
[0];

192 
d2a
 = 
pSèã
[1];

193 
d1b
 = 
pSèã
[2];

194 
d2b
 = 
pSèã
[3];

196 
pC€ffs
 += 5u;

200 
ßm∂e
 > 0u) {

207 
Xn1a
 = 
pIn
[0 ];

208 
Xn1b
 = 
pIn
[1 ];

211 
Xn2a
 = 
pIn
[2 ];

212 
acc1a
 = 
b0
 * 
Xn1a
 + 
d1a
;

214 
Xn2b
 = 
pIn
[3 ];

215 
d1a
 = 
b1
 * 
Xn1a
 + 
d2a
;

217 
Xn3a
 = 
pIn
[4 ];

218 
d2a
 = 
b2
 * 
Xn1a
;

220 
Xn3b
 = 
pIn
[5 ];

221 
d1a
 +
a1
 * 
acc1a
;

223 
Xn4a
 = 
pIn
[6 ];

224 
d2a
 +
a2
 * 
acc1a
;

227 
Xn4b
 = 
pIn
[7 ];

228 
acc1b
 = 
b0
 * 
Xn1b
 + 
d1b
;

230 
Xn5a
 = 
pIn
[8 ];

231 
d1b
 = 
b1
 * 
Xn1b
 + 
d2b
;

233 
Xn5b
 = 
pIn
[9 ];

234 
d2b
 = 
b2
 * 
Xn1b
;

236 
Xn6a
 = 
pIn
[10];

237 
d1b
 +
a1
 * 
acc1b
;

239 
Xn6b
 = 
pIn
[11];

240 
d2b
 +
a2
 * 
acc1b
;

243 
Xn7a
 = 
pIn
[12];

244 
acc2a
 = 
b0
 * 
Xn2a
 + 
d1a
;

246 
Xn7b
 = 
pIn
[13];

247 
d1a
 = 
b1
 * 
Xn2a
 + 
d2a
;

249 
Xn8a
 = 
pIn
[14];

250 
d2a
 = 
b2
 * 
Xn2a
;

252 
Xn8b
 = 
pIn
[15];

253 
d1a
 +
a1
 * 
acc2a
;

255 
pIn
 += 16;

256 
d2a
 +
a2
 * 
acc2a
;

259 
acc2b
 = 
b0
 * 
Xn2b
 + 
d1b
;

260 
d1b
 = 
b1
 * 
Xn2b
 + 
d2b
;

261 
d2b
 = 
b2
 * 
Xn2b
;

262 
d1b
 +
a1
 * 
acc2b
;

263 
d2b
 +
a2
 * 
acc2b
;

266 
acc3a
 = 
b0
 * 
Xn3a
 + 
d1a
;

267 
d1a
 = 
b1
 * 
Xn3a
 + 
d2a
;

268 
d2a
 = 
b2
 * 
Xn3a
;

269 
d1a
 +
a1
 * 
acc3a
;

270 
d2a
 +
a2
 * 
acc3a
;

273 
acc3b
 = 
b0
 * 
Xn3b
 + 
d1b
;

274 
d1b
 = 
b1
 * 
Xn3b
 + 
d2b
;

275 
d2b
 = 
b2
 * 
Xn3b
;

276 
d1b
 +
a1
 * 
acc3b
;

277 
d2b
 +
a2
 * 
acc3b
;

280 
acc4a
 = 
b0
 * 
Xn4a
 + 
d1a
;

281 
d1a
 = 
b1
 * 
Xn4a
 + 
d2a
;

282 
d2a
 = 
b2
 * 
Xn4a
;

283 
d1a
 +
a1
 * 
acc4a
;

284 
d2a
 +
a2
 * 
acc4a
;

287 
acc4b
 = 
b0
 * 
Xn4b
 + 
d1b
;

288 
d1b
 = 
b1
 * 
Xn4b
 + 
d2b
;

289 
d2b
 = 
b2
 * 
Xn4b
;

290 
d1b
 +
a1
 * 
acc4b
;

291 
d2b
 +
a2
 * 
acc4b
;

294 
acc5a
 = 
b0
 * 
Xn5a
 + 
d1a
;

295 
d1a
 = 
b1
 * 
Xn5a
 + 
d2a
;

296 
d2a
 = 
b2
 * 
Xn5a
;

297 
d1a
 +
a1
 * 
acc5a
;

298 
d2a
 +
a2
 * 
acc5a
;

301 
acc5b
 = 
b0
 * 
Xn5b
 + 
d1b
;

302 
d1b
 = 
b1
 * 
Xn5b
 + 
d2b
;

303 
d2b
 = 
b2
 * 
Xn5b
;

304 
d1b
 +
a1
 * 
acc5b
;

305 
d2b
 +
a2
 * 
acc5b
;

308 
acc6a
 = 
b0
 * 
Xn6a
 + 
d1a
;

309 
d1a
 = 
b1
 * 
Xn6a
 + 
d2a
;

310 
d2a
 = 
b2
 * 
Xn6a
;

311 
d1a
 +
a1
 * 
acc6a
;

312 
d2a
 +
a2
 * 
acc6a
;

315 
acc6b
 = 
b0
 * 
Xn6b
 + 
d1b
;

316 
d1b
 = 
b1
 * 
Xn6b
 + 
d2b
;

317 
d2b
 = 
b2
 * 
Xn6b
;

318 
d1b
 +
a1
 * 
acc6b
;

319 
d2b
 +
a2
 * 
acc6b
;

322 
acc7a
 = 
b0
 * 
Xn7a
 + 
d1a
;

323 
d1a
 = 
b1
 * 
Xn7a
 + 
d2a
;

325 
pOut
[0 ] = 
acc1a
 ;

326 
d2a
 = 
b2
 * 
Xn7a
;

328 
pOut
[1 ] = 
acc1b
 ;

329 
d1a
 +
a1
 * 
acc7a
;

331 
pOut
[2 ] = 
acc2a
 ;

332 
d2a
 +
a2
 * 
acc7a
;

335 
pOut
[3 ] = 
acc2b
 ;

336 
acc7b
 = 
b0
 * 
Xn7b
 + 
d1b
;

338 
pOut
[4 ] = 
acc3a
 ;

339 
d1b
 = 
b1
 * 
Xn7b
 + 
d2b
;

341 
pOut
[5 ] = 
acc3b
 ;

342 
d2b
 = 
b2
 * 
Xn7b
;

344 
pOut
[6 ] = 
acc4a
 ;

345 
d1b
 +
a1
 * 
acc7b
;

347 
pOut
[7 ] = 
acc4b
 ;

348 
d2b
 +
a2
 * 
acc7b
;

351 
pOut
[8 ] = 
acc5a
 ;

352 
acc8a
 = 
b0
 * 
Xn8a
 + 
d1a
;

354 
pOut
[9 ] = 
acc5b
;

355 
d1a
 = 
b1
 * 
Xn8a
 + 
d2a
;

357 
pOut
[10] = 
acc6a
;

358 
d2a
 = 
b2
 * 
Xn8a
;

360 
pOut
[11] = 
acc6b
;

361 
d1a
 +
a1
 * 
acc8a
;

363 
pOut
[12] = 
acc7a
;

364 
d2a
 +
a2
 * 
acc8a
;

367 
pOut
[13] = 
acc7b
;

368 
acc8b
 = 
b0
 * 
Xn8b
 + 
d1b
;

370 
pOut
[14] = 
acc8a
;

371 
d1b
 = 
b1
 * 
Xn8b
 + 
d2b
;

373 
pOut
[15] = 
acc8b
;

374 
d2b
 = 
b2
 * 
Xn8b
;

376 
ßm∂e
--;

377 
d1b
 +
a1
 * 
acc8b
;

379 
pOut
 += 16;

380 
d2b
 +
a2
 * 
acc8b
;

383 
ßm∂e
 = 
blockSize
 & 0x7u;

384 
ßm∂e
 > 0u) {

386 
Xn1a
 = *
pIn
++;

387 
Xn1b
 = *
pIn
++;

390 
acc1a
 = (
b0
 * 
Xn1a
Ë+ 
d1a
;

391 
acc1b
 = (
b0
 * 
Xn1b
Ë+ 
d1b
;

394 *
pOut
++ = 
acc1a
;

395 *
pOut
++ = 
acc1b
;

399 
d1a
 = ((
b1
 * 
Xn1a
Ë+ (
a1
 * 
acc1a
)Ë+ 
d2a
;

400 
d1b
 = ((
b1
 * 
Xn1b
Ë+ (
a1
 * 
acc1b
)Ë+ 
d2b
;

403 
d2a
 = (
b2
 * 
Xn1a
Ë+ (
a2
 * 
acc1a
);

404 
d2b
 = (
b2
 * 
Xn1b
Ë+ (
a2
 * 
acc1b
);

406 
ßm∂e
--;

410 
pSèã
[0] = 
d1a
;

411 
pSèã
[1] = 
d2a
;

413 
pSèã
[2] = 
d1b
;

414 
pSèã
[3] = 
d2b
;

417 
pIn
 = 
pD°
;

419 
°age
--;

421 
pSèã
 += 4u;

423 
pOut
 = 
pD°
;

425 } 
°age
 > 0u);

427 #ñi‡
	`deföed
(
ARM_MATH_CM0_FAMILY
)

434 
b0
 = *
pC€ffs
++;

435 
b1
 = *
pC€ffs
++;

436 
b2
 = *
pC€ffs
++;

437 
a1
 = *
pC€ffs
++;

438 
a2
 = *
pC€ffs
++;

441 
d1a
 = 
pSèã
[0];

442 
d2a
 = 
pSèã
[1];

443 
d1b
 = 
pSèã
[2];

444 
d2b
 = 
pSèã
[3];

447 
ßm∂e
 = 
blockSize
;

449 
ßm∂e
 > 0u)

452 
Xn1a
 = *
pIn
++;

453 
Xn1b
 = *
pIn
++;

456 
acc1a
 = (
b0
 * 
Xn1a
Ë+ 
d1a
;

457 
acc1b
 = (
b0
 * 
Xn1b
Ë+ 
d1b
;

460 *
pOut
++ = 
acc1a
;

461 *
pOut
++ = 
acc1b
;

465 
d1a
 = ((
b1
 * 
Xn1a
Ë+ (
a1
 * 
acc1a
)Ë+ 
d2a
;

466 
d1b
 = ((
b1
 * 
Xn1b
Ë+ (
a1
 * 
acc1b
)Ë+ 
d2b
;

469 
d2a
 = (
b2
 * 
Xn1a
Ë+ (
a2
 * 
acc1a
);

470 
d2b
 = (
b2
 * 
Xn1b
Ë+ (
a2
 * 
acc1b
);

473 
ßm∂e
--;

477 *
pSèã
++ = 
d1a
;

478 *
pSèã
++ = 
d2a
;

479 *
pSèã
++ = 
d1b
;

480 *
pSèã
++ = 
d2b
;

483 
pIn
 = 
pD°
;

486 
pOut
 = 
pD°
;

489 
°age
--;

491 } 
°age
 > 0u);

495 
Êﬂt32_t
 
Xn2a
, 
Xn3a
, 
Xn4a
;

496 
Êﬂt32_t
 
Xn2b
, 
Xn3b
, 
Xn4b
;

497 
Êﬂt32_t
 
acc2a
, 
acc3a
, 
acc4a
;

498 
Êﬂt32_t
 
acc2b
, 
acc3b
, 
acc4b
;

499 
Êﬂt32_t
 
p0a
, 
p1a
, 
p2a
, 
p3a
, 
p4a
, 
A1a
;

500 
Êﬂt32_t
 
p0b
, 
p1b
, 
p2b
, 
p3b
, 
p4b
, 
A1b
;

506 
b0
 = *
pC€ffs
++;

507 
b1
 = *
pC€ffs
++;

508 
b2
 = *
pC€ffs
++;

509 
a1
 = *
pC€ffs
++;

510 
a2
 = *
pC€ffs
++;

513 
d1a
 = 
pSèã
[0];

514 
d2a
 = 
pSèã
[1];

515 
d1b
 = 
pSèã
[2];

516 
d2b
 = 
pSèã
[3];

519 
ßm∂e
 = 
blockSize
 >> 2u;

523 
ßm∂e
 > 0u) {

530 
Xn1a
 = 
pIn
[0];

531 
Xn1b
 = 
pIn
[1];

532 
Xn2a
 = 
pIn
[2];

533 
Xn2b
 = 
pIn
[3];

534 
Xn3a
 = 
pIn
[4];

535 
Xn3b
 = 
pIn
[5];

536 
Xn4a
 = 
pIn
[6];

537 
Xn4b
 = 
pIn
[7];

538 
pIn
 += 8;

540 
p0a
 = 
b0
 * 
Xn1a
;

541 
p0b
 = 
b0
 * 
Xn1b
;

542 
p1a
 = 
b1
 * 
Xn1a
;

543 
p1b
 = 
b1
 * 
Xn1b
;

544 
acc1a
 = 
p0a
 + 
d1a
;

545 
acc1b
 = 
p0b
 + 
d1b
;

546 
p0a
 = 
b0
 * 
Xn2a
;

547 
p0b
 = 
b0
 * 
Xn2b
;

548 
p3a
 = 
a1
 * 
acc1a
;

549 
p3b
 = 
a1
 * 
acc1b
;

550 
p2a
 = 
b2
 * 
Xn1a
;

551 
p2b
 = 
b2
 * 
Xn1b
;

552 
A1a
 = 
p1a
 + 
p3a
;

553 
A1b
 = 
p1b
 + 
p3b
;

554 
p4a
 = 
a2
 * 
acc1a
;

555 
p4b
 = 
a2
 * 
acc1b
;

556 
d1a
 = 
A1a
 + 
d2a
;

557 
d1b
 = 
A1b
 + 
d2b
;

558 
d2a
 = 
p2a
 + 
p4a
;

559 
d2b
 = 
p2b
 + 
p4b
;

561 
p1a
 = 
b1
 * 
Xn2a
;

562 
p1b
 = 
b1
 * 
Xn2b
;

563 
acc2a
 = 
p0a
 + 
d1a
;

564 
acc2b
 = 
p0b
 + 
d1b
;

565 
p0a
 = 
b0
 * 
Xn3a
;

566 
p0b
 = 
b0
 * 
Xn3b
;

567 
p3a
 = 
a1
 * 
acc2a
;

568 
p3b
 = 
a1
 * 
acc2b
;

569 
p2a
 = 
b2
 * 
Xn2a
;

570 
p2b
 = 
b2
 * 
Xn2b
;

571 
A1a
 = 
p1a
 + 
p3a
;

572 
A1b
 = 
p1b
 + 
p3b
;

573 
p4a
 = 
a2
 * 
acc2a
;

574 
p4b
 = 
a2
 * 
acc2b
;

575 
d1a
 = 
A1a
 + 
d2a
;

576 
d1b
 = 
A1b
 + 
d2b
;

577 
d2a
 = 
p2a
 + 
p4a
;

578 
d2b
 = 
p2b
 + 
p4b
;

580 
p1a
 = 
b1
 * 
Xn3a
;

581 
p1b
 = 
b1
 * 
Xn3b
;

582 
acc3a
 = 
p0a
 + 
d1a
;

583 
acc3b
 = 
p0b
 + 
d1b
;

584 
p0a
 = 
b0
 * 
Xn4a
;

585 
p0b
 = 
b0
 * 
Xn4b
;

586 
p3a
 = 
a1
 * 
acc3a
;

587 
p3b
 = 
a1
 * 
acc3b
;

588 
p2a
 = 
b2
 * 
Xn3a
;

589 
p2b
 = 
b2
 * 
Xn3b
;

590 
A1a
 = 
p1a
 + 
p3a
;

591 
A1b
 = 
p1b
 + 
p3b
;

592 
p4a
 = 
a2
 * 
acc3a
;

593 
p4b
 = 
a2
 * 
acc3b
;

594 
d1a
 = 
A1a
 + 
d2a
;

595 
d1b
 = 
A1b
 + 
d2b
;

596 
d2a
 = 
p2a
 + 
p4a
;

597 
d2b
 = 
p2b
 + 
p4b
;

599 
acc4a
 = 
p0a
 + 
d1a
;

600 
acc4b
 = 
p0b
 + 
d1b
;

601 
p1a
 = 
b1
 * 
Xn4a
;

602 
p1b
 = 
b1
 * 
Xn4b
;

603 
p3a
 = 
a1
 * 
acc4a
;

604 
p3b
 = 
a1
 * 
acc4b
;

605 
p2a
 = 
b2
 * 
Xn4a
;

606 
p2b
 = 
b2
 * 
Xn4b
;

607 
A1a
 = 
p1a
 + 
p3a
;

608 
A1b
 = 
p1b
 + 
p3b
;

609 
p4a
 = 
a2
 * 
acc4a
;

610 
p4b
 = 
a2
 * 
acc4b
;

611 
d1a
 = 
A1a
 + 
d2a
;

612 
d1b
 = 
A1b
 + 
d2b
;

613 
d2a
 = 
p2a
 + 
p4a
;

614 
d2b
 = 
p2b
 + 
p4b
;

616 
pOut
[0] = 
acc1a
;

617 
pOut
[1] = 
acc1b
;

618 
pOut
[2] = 
acc2a
;

619 
pOut
[3] = 
acc2b
;

620 
pOut
[4] = 
acc3a
;

621 
pOut
[5] = 
acc3b
;

622 
pOut
[6] = 
acc4a
;

623 
pOut
[7] = 
acc4b
;

624 
pOut
 += 8;

626 
ßm∂e
--;

629 
ßm∂e
 = 
blockSize
 & 0x3u;

630 
ßm∂e
 > 0u) {

631 
Xn1a
 = *
pIn
++;

632 
Xn1b
 = *
pIn
++;

634 
p0a
 = 
b0
 * 
Xn1a
;

635 
p0b
 = 
b0
 * 
Xn1b
;

636 
p1a
 = 
b1
 * 
Xn1a
;

637 
p1b
 = 
b1
 * 
Xn1b
;

638 
acc1a
 = 
p0a
 + 
d1a
;

639 
acc1b
 = 
p0b
 + 
d1b
;

640 
p3a
 = 
a1
 * 
acc1a
;

641 
p3b
 = 
a1
 * 
acc1b
;

642 
p2a
 = 
b2
 * 
Xn1a
;

643 
p2b
 = 
b2
 * 
Xn1b
;

644 
A1a
 = 
p1a
 + 
p3a
;

645 
A1b
 = 
p1b
 + 
p3b
;

646 
p4a
 = 
a2
 * 
acc1a
;

647 
p4b
 = 
a2
 * 
acc1b
;

648 
d1a
 = 
A1a
 + 
d2a
;

649 
d1b
 = 
A1b
 + 
d2b
;

650 
d2a
 = 
p2a
 + 
p4a
;

651 
d2b
 = 
p2b
 + 
p4b
;

653 *
pOut
++ = 
acc1a
;

654 *
pOut
++ = 
acc1b
;

656 
ßm∂e
--;

660 *
pSèã
++ = 
d1a
;

661 *
pSèã
++ = 
d2a
;

662 *
pSèã
++ = 
d1b
;

663 *
pSèã
++ = 
d2b
;

666 
pIn
 = 
pD°
;

669 
pOut
 = 
pD°
;

672 
°age
--;

674 } 
°age
 > 0u);

678 
	}
}

679 
	gLOW_OPTIMIZATION_EXIT


	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_init_f32.c

42 
	~"¨m_m©h.h
"

81 
	$¨m_biquad_ˇsˇde_°îeo_df2T_öô_f32
(

82 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

83 
uöt8_t
 
numSèges
,

84 
Êﬂt32_t
 * 
pC€ffs
,

85 
Êﬂt32_t
 * 
pSèã
)

88 
S
->
numSèges
 =ÇumStages;

91 
S
->
pC€ffs
 =ÖCoeffs;

94 
	`mem£t
(
pSèã
, 0, (4u * (
uöt32_t
Ë
numSèges
Ë* (
Êﬂt32_t
));

97 
S
->
pSèã
 =ÖState;

98 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_f32.c

41 
	~"¨m_m©h.h
"

124 
	$¨m_c⁄v_f32
(

125 
Êﬂt32_t
 * 
pSrcA
,

126 
uöt32_t
 
§cALí
,

127 
Êﬂt32_t
 * 
pSrcB
,

128 
uöt32_t
 
§cBLí
,

129 
Êﬂt32_t
 * 
pD°
)

133 #i‚de‡
ARM_MATH_CM0_FAMILY


137 
Êﬂt32_t
 *
pIn1
;

138 
Êﬂt32_t
 *
pIn2
;

139 
Êﬂt32_t
 *
pOut
 = 
pD°
;

140 
Êﬂt32_t
 *
px
;

141 
Êﬂt32_t
 *
py
;

142 
Êﬂt32_t
 *
pSrc1
, *
pSrc2
;

143 
Êﬂt32_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

144 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

145 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

150 if(
§cALí
 >
§cBLí
)

153 
pIn1
 = 
pSrcA
;

156 
pIn2
 = 
pSrcB
;

161 
pIn1
 = 
pSrcB
;

164 
pIn2
 = 
pSrcA
;

167 
j
 = 
§cBLí
;

168 
§cBLí
 = 
§cALí
;

169 
§cALí
 = 
j
;

183 
blockSize1
 = 
§cBLí
 - 1u;

184 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

185 
blockSize3
 = 
blockSize1
;

199 
cou¡
 = 1u;

202 
px
 = 
pIn1
;

205 
py
 = 
pIn2
;

213 
blockSize1
 > 0u)

216 
sum
 = 0.0f;

219 
k
 = 
cou¡
 >> 2u;

223 
k
 > 0u)

226 
sum
 +*
px
++ * *
py
--;

229 
sum
 +*
px
++ * *
py
--;

232 
sum
 +*
px
++ * *
py
--;

235 
sum
 +*
px
++ * *
py
--;

238 
k
--;

243 
k
 = 
cou¡
 % 0x4u;

245 
k
 > 0u)

248 
sum
 +*
px
++ * *
py
--;

251 
k
--;

255 *
pOut
++ = 
sum
;

258 
py
 = 
pIn2
 + 
cou¡
;

259 
px
 = 
pIn1
;

262 
cou¡
++;

265 
blockSize1
--;

279 
px
 = 
pIn1
;

282 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

283 
py
 = 
pSrc2
;

286 
cou¡
 = 0u;

295 if(
§cBLí
 >= 4u)

298 
blkC¡
 = 
blockSize2
 >> 2u;

300 
blkC¡
 > 0u)

303 
acc0
 = 0.0f;

304 
acc1
 = 0.0f;

305 
acc2
 = 0.0f;

306 
acc3
 = 0.0f;

309 
x0
 = *(
px
++);

310 
x1
 = *(
px
++);

311 
x2
 = *(
px
++);

314 
k
 = 
§cBLí
 >> 2u;

321 
c0
 = *(
py
--);

324 
x3
 = *(
px
);

328 
acc0
 +
x0
 * 
c0
;

331 
acc1
 +
x1
 * 
c0
;

334 
acc2
 +
x2
 * 
c0
;

337 
acc3
 +
x3
 * 
c0
;

340 
c0
 = *(
py
--);

343 
x0
 = *(
px
 + 1u);

347 
acc0
 +
x1
 * 
c0
;

349 
acc1
 +
x2
 * 
c0
;

351 
acc2
 +
x3
 * 
c0
;

353 
acc3
 +
x0
 * 
c0
;

356 
c0
 = *(
py
--);

359 
x1
 = *(
px
 + 2u);

363 
acc0
 +
x2
 * 
c0
;

365 
acc1
 +
x3
 * 
c0
;

367 
acc2
 +
x0
 * 
c0
;

369 
acc3
 +
x1
 * 
c0
;

372 
c0
 = *(
py
--);

375 
x2
 = *(
px
 + 3u);

376 
px
 += 4u;

380 
acc0
 +
x3
 * 
c0
;

382 
acc1
 +
x0
 * 
c0
;

384 
acc2
 +
x1
 * 
c0
;

386 
acc3
 +
x2
 * 
c0
;

389 } --
k
);

393 
k
 = 
§cBLí
 % 0x4u;

395 
k
 > 0u)

398 
c0
 = *(
py
--);

401 
x3
 = *(
px
++);

405 
acc0
 +
x0
 * 
c0
;

407 
acc1
 +
x1
 * 
c0
;

409 
acc2
 +
x2
 * 
c0
;

411 
acc3
 +
x3
 * 
c0
;

414 
x0
 = 
x1
;

415 
x1
 = 
x2
;

416 
x2
 = 
x3
;

419 
k
--;

423 *
pOut
++ = 
acc0
;

424 *
pOut
++ = 
acc1
;

425 *
pOut
++ = 
acc2
;

426 *
pOut
++ = 
acc3
;

429 
cou¡
 += 4u;

432 
px
 = 
pIn1
 + 
cou¡
;

433 
py
 = 
pSrc2
;

437 
blkC¡
--;

443 
blkC¡
 = 
blockSize2
 % 0x4u;

445 
blkC¡
 > 0u)

448 
sum
 = 0.0f;

451 
k
 = 
§cBLí
 >> 2u;

455 
k
 > 0u)

458 
sum
 +*
px
++ * *
py
--;

459 
sum
 +*
px
++ * *
py
--;

460 
sum
 +*
px
++ * *
py
--;

461 
sum
 +*
px
++ * *
py
--;

464 
k
--;

469 
k
 = 
§cBLí
 % 0x4u;

471 
k
 > 0u)

474 
sum
 +*
px
++ * *
py
--;

477 
k
--;

481 *
pOut
++ = 
sum
;

484 
cou¡
++;

487 
px
 = 
pIn1
 + 
cou¡
;

488 
py
 = 
pSrc2
;

491 
blkC¡
--;

498 
blkC¡
 = 
blockSize2
;

500 
blkC¡
 > 0u)

503 
sum
 = 0.0f;

506 
k
 = 
§cBLí
;

508 
k
 > 0u)

511 
sum
 +*
px
++ * *
py
--;

514 
k
--;

518 *
pOut
++ = 
sum
;

521 
cou¡
++;

524 
px
 = 
pIn1
 + 
cou¡
;

525 
py
 = 
pSrc2
;

528 
blkC¡
--;

548 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

549 
px
 = 
pSrc1
;

552 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

553 
py
 = 
pSrc2
;

559 
blockSize3
 > 0u)

562 
sum
 = 0.0f;

565 
k
 = 
blockSize3
 >> 2u;

569 
k
 > 0u)

572 
sum
 +*
px
++ * *
py
--;

575 
sum
 +*
px
++ * *
py
--;

578 
sum
 +*
px
++ * *
py
--;

581 
sum
 +*
px
++ * *
py
--;

584 
k
--;

589 
k
 = 
blockSize3
 % 0x4u;

591 
k
 > 0u)

595 
sum
 +*
px
++ * *
py
--;

598 
k
--;

602 *
pOut
++ = 
sum
;

605 
px
 = ++
pSrc1
;

606 
py
 = 
pSrc2
;

609 
blockSize3
--;

616 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

617 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
;

618 
Êﬂt32_t
 
sum
;

619 
uöt32_t
 
i
, 
j
;

622 
i
 = 0u; i < ((
§cALí
 + 
§cBLí
) - 1u); i++)

625 
sum
 = 0.0f;

628 
j
 = 0u; j <
i
; j++)

631 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

634 
sum
 +
pIn1
[
j
] * 
pIn2
[
i
 - j];

638 
pD°
[
i
] = 
sum
;

643 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_opt_q15.c

41 
	~"¨m_m©h.h
"

83 
	$¨m_c⁄v_Á°_›t_q15
(

84 
q15_t
 * 
pSrcA
,

85 
uöt32_t
 
§cALí
,

86 
q15_t
 * 
pSrcB
,

87 
uöt32_t
 
§cBLí
,

88 
q15_t
 * 
pD°
,

89 
q15_t
 * 
pS¸©ch1
,

90 
q15_t
 * 
pS¸©ch2
)

92 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

93 
q31_t
 
x1
, 
x2
, 
x3
;

94 
q31_t
 
y1
, 
y2
;

95 
q15_t
 *
pOut
 = 
pD°
;

96 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

97 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

98 
q15_t
 *
pIn1
;

99 
q15_t
 *
pIn2
;

100 
q15_t
 *
px
;

101 
q15_t
 *
py
;

102 
uöt32_t
 
j
, 
k
, 
blkC¡
;

103 
uöt32_t
 
èpC¡
;

104 #ifde‡
UNALIGNED_SUPPORT_DISABLE


106 
q15_t
 
a
, 
b
;

113 if(
§cALí
 >
§cBLí
)

116 
pIn1
 = 
pSrcA
;

119 
pIn2
 = 
pSrcB
;

124 
pIn1
 = 
pSrcB
;

127 
pIn2
 = 
pSrcA
;

130 
j
 = 
§cBLí
;

131 
§cBLí
 = 
§cALí
;

132 
§cALí
 = 
j
;

136 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

139 
px
 = 
pIn2
;

142 
k
 = 
§cBLí
 >> 2u;

148 
k
 > 0u)

151 *
pS¸2
-- = *
px
++;

152 *
pS¸2
-- = *
px
++;

153 *
pS¸2
-- = *
px
++;

154 *
pS¸2
-- = *
px
++;

157 
k
--;

162 
k
 = 
§cBLí
 % 0x4u;

164 
k
 > 0u)

167 *
pS¸2
-- = *
px
++;

170 
k
--;

174 
pS¸1
 = 
pS¸©ch1
;

178 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

181 
pS¸1
 +(
§cBLí
 - 1u);

185 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


188 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

191 
pS¸1
 +
§cALí
;

196 
k
 = 
§cALí
 >> 2u;

200 
k
 > 0u)

203 *
pS¸1
++ = *
pIn1
++;

204 *
pS¸1
++ = *
pIn1
++;

205 *
pS¸1
++ = *
pIn1
++;

206 *
pS¸1
++ = *
pIn1
++;

209 
k
--;

214 
k
 = 
§cALí
 % 0x4u;

216 
k
 > 0u)

219 *
pS¸1
++ = *
pIn1
++;

222 
k
--;

228 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


231 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

234 
pS¸1
 +(
§cBLí
 - 1u);

239 
k
 = (
§cBLí
 - 1u) >> 2u;

243 
k
 > 0u)

246 *
pS¸1
++ = 0;

247 *
pS¸1
++ = 0;

248 *
pS¸1
++ = 0;

249 *
pS¸1
++ = 0;

252 
k
--;

257 
k
 = (
§cBLí
 - 1u) % 0x4u;

259 
k
 > 0u)

262 *
pS¸1
++ = 0;

265 
k
--;

271 
py
 = 
pS¸©ch2
;

275 
pIn2
 = 
py
;

281 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

283 
blkC¡
 > 0)

286 
pS¸1
 = 
pS¸©ch1
;

289 
acc0
 = 0;

290 
acc1
 = 0;

291 
acc2
 = 0;

292 
acc3
 = 0;

295 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

298 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

300 
èpC¡
 = (
§cBLí
) >> 2u;

302 
èpC¡
 > 0u)

305 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


308 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

309 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

312 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

313 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

316 #i‚de‡
ARM_MATH_BIG_ENDIAN


317 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

319 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

323 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

326 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

329 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

330 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

333 #i‚de‡
ARM_MATH_BIG_ENDIAN


334 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

336 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

339 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

340 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

342 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

344 #i‚de‡
ARM_MATH_BIG_ENDIAN


345 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

347 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

350 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

355 
a
 = *
pIn2
;

356 
b
 = *(
pIn2
 + 1);

358 #i‚de‡
ARM_MATH_BIG_ENDIAN


359 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

361 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

364 
a
 = *(
pIn2
 + 2);

365 
b
 = *(
pIn2
 + 3);

366 #i‚de‡
ARM_MATH_BIG_ENDIAN


367 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

369 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

372 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

374 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

376 #i‚de‡
ARM_MATH_BIG_ENDIAN


377 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

379 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

382 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

384 
a
 = *
pS¸1
;

385 
b
 = *(
pS¸1
 + 1);

387 #i‚de‡
ARM_MATH_BIG_ENDIAN


388 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

390 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

393 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

395 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

397 #i‚de‡
ARM_MATH_BIG_ENDIAN


398 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

400 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

403 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

405 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

407 
a
 = *(
pS¸1
 + 2);

408 
b
 = *(
pS¸1
 + 3);

410 #i‚de‡
ARM_MATH_BIG_ENDIAN


411 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

413 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

416 #i‚de‡
ARM_MATH_BIG_ENDIAN


417 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

419 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

422 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

427 
pIn2
 += 4u;

428 
pS¸1
 += 4u;

432 
èpC¡
--;

436 
pS¸1
 -= 4u;

439 
èpC¡
 = (
§cBLí
) & 3u;

441 
èpC¡
 > 0u)

445 
acc0
 +(*
pS¸1
++ * *
pIn2
);

446 
acc1
 +(*
pS¸1
++ * *
pIn2
);

447 
acc2
 +(*
pS¸1
++ * *
pIn2
);

448 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

450 
pS¸1
 -= 3u;

453 
èpC¡
--;

456 
blkC¡
--;

461 #i‚de‡
ARM_MATH_BIG_ENDIAN


463 *
	`__SIMD32
(
pOut
)++ =

464 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

466 *
	`__SIMD32
(
pOut
)++ =

467 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

472 *
	`__SIMD32
(
pOut
)++ =

473 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

475 *
	`__SIMD32
(
pOut
)++ =

476 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

483 
pIn2
 = 
py
;

485 
pS¸©ch1
 += 4u;

490 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

493 
blkC¡
 > 0)

496 
pS¸1
 = 
pS¸©ch1
;

499 
acc0
 = 0;

501 
èpC¡
 = (
§cBLí
) >> 1u;

503 
èpC¡
 > 0u)

506 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

507 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

510 
èpC¡
--;

513 
èpC¡
 = (
§cBLí
) & 1u;

516 
èpC¡
 > 0u)

520 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

523 
èpC¡
--;

526 
blkC¡
--;

530 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

533 
pIn2
 = 
py
;

535 
pS¸©ch1
 += 1u;

539 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q15.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_c⁄v_Á°_q15
(

78 
q15_t
 * 
pSrcA
,

79 
uöt32_t
 
§cALí
,

80 
q15_t
 * 
pSrcB
,

81 
uöt32_t
 
§cBLí
,

82 
q15_t
 * 
pD°
)

84 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


85 
q15_t
 *
pIn1
;

86 
q15_t
 *
pIn2
;

87 
q15_t
 *
pOut
 = 
pD°
;

88 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

89 
q15_t
 *
px
;

90 
q15_t
 *
py
;

91 
q15_t
 *
pSrc1
, *
pSrc2
;

92 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

93 
uöt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
, 
j
, 
k
, 
cou¡
, 
blkC¡
;

98 if(
§cALí
 >
§cBLí
)

101 
pIn1
 = 
pSrcA
;

104 
pIn2
 = 
pSrcB
;

109 
pIn1
 = 
pSrcB
;

112 
pIn2
 = 
pSrcA
;

115 
j
 = 
§cBLí
;

116 
§cBLí
 = 
§cALí
;

117 
§cALí
 = 
j
;

131 
blockSize1
 = 
§cBLí
 - 1u;

132 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

133 
blockSize3
 = 
blockSize1
;

147 
cou¡
 = 1u;

150 
px
 = 
pIn1
;

153 
py
 = 
pIn2
;

165 (
cou¡
 < 4uË&& (
blockSize1
 > 0u))

168 
sum
 = 0;

172 
k
 = 
cou¡
;

174 
k
 > 0u)

177 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

180 
k
--;

184 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

187 
py
 = 
pIn2
 + 
cou¡
;

188 
px
 = 
pIn1
;

191 
cou¡
++;

194 
blockSize1
--;

201 
py
 =Öy - 1;

203 
blockSize1
 > 0u)

206 
sum
 = 0;

209 
k
 = 
cou¡
 >> 2u;

213 
k
 > 0u)

217 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

219 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

222 
k
--;

227 
py
 =Öy + 1u;

231 
k
 = 
cou¡
 % 0x4u;

233 
k
 > 0u)

236 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

239 
k
--;

243 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

246 
py
 = 
pIn2
 + (
cou¡
 - 1u);

247 
px
 = 
pIn1
;

250 
cou¡
++;

253 
blockSize1
--;

267 
px
 = 
pIn1
;

270 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

271 
py
 = 
pSrc2
;

274 
cou¡
 = 0u;

284 if(
§cBLí
 >= 4u)

287 
blkC¡
 = 
blockSize2
 >> 2u;

289 
blkC¡
 > 0u)

291 
py
 =Öy - 1u;

294 
acc0
 = 0;

295 
acc1
 = 0;

296 
acc2
 = 0;

297 
acc3
 = 0;

301 
x0
 = *
	`__SIMD32
(
px
);

303 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

304 
px
+= 2u;

308 
k
 = 
§cBLí
 >> 2u;

316 
c0
 = *
	`__SIMD32
(
py
)--;

319 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

322 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

325 
x2
 = *
	`__SIMD32
(
px
);

328 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

331 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

334 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

337 
c0
 = *
	`__SIMD32
(
py
)--;

340 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

343 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

346 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

349 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

350 
px
 += 4u;

353 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

356 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

358 } --
k
);

365 
k
 = 
§cBLí
 % 0x4u;

367 if(
k
 == 1u)

370 
c0
 = *(
py
+1);

372 #ifde‡ 
ARM_MATH_BIG_ENDIAN


374 
c0
 = c0 << 16u;

378 
c0
 = c0 & 0x0000FFFF;

383 
x3
 = *
	`__SIMD32
(
px
);

384 
px
++;

387 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

388 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

389 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

390 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

393 if(
k
 == 2u)

396 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

399 
x3
 = *
	`__SIMD32
(
px
);

402 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

403 
px
 += 2u;

406 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

407 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

408 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

409 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

412 if(
k
 == 3u)

415 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

418 
x3
 = *
	`__SIMD32
(
px
);

421 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

424 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

425 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

426 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

427 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

430 
c0
 = *(
py
-1);

431 #ifde‡ 
ARM_MATH_BIG_ENDIAN


433 
c0
 = c0 << 16u;

436 
c0
 = c0 & 0x0000FFFF;

440 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

441 
px
 += 3u;

444 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

445 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

446 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

447 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

451 #i‚de‡
ARM_MATH_BIG_ENDIAN


453 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc0
 >> 15), (
acc1
 >> 15), 16);

454 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc2
 >> 15), (
acc3
 >> 15), 16);

458 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc1
 >> 15), (
acc0
 >> 15), 16);

459 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
((
acc3
 >> 15), (
acc2
 >> 15), 16);

464 
cou¡
 += 4u;

467 
px
 = 
pIn1
 + 
cou¡
;

468 
py
 = 
pSrc2
;

471 
blkC¡
--;

476 
blkC¡
 = 
blockSize2
 % 0x4u;

478 
blkC¡
 > 0u)

481 
sum
 = 0;

484 
k
 = 
§cBLí
 >> 2u;

488 
k
 > 0u)

491 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

492 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

493 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

494 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

497 
k
--;

502 
k
 = 
§cBLí
 % 0x4u;

504 
k
 > 0u)

507 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

510 
k
--;

514 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

517 
cou¡
++;

520 
px
 = 
pIn1
 + 
cou¡
;

521 
py
 = 
pSrc2
;

524 
blkC¡
--;

531 
blkC¡
 = 
blockSize2
;

533 
blkC¡
 > 0u)

536 
sum
 = 0;

539 
k
 = 
§cBLí
;

541 
k
 > 0u)

544 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

547 
k
--;

551 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

554 
cou¡
++;

557 
px
 = 
pIn1
 + 
cou¡
;

558 
py
 = 
pSrc2
;

561 
blkC¡
--;

581 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

582 
px
 = 
pSrc1
;

585 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

586 
pIn2
 = 
pSrc2
 - 1u;

587 
py
 = 
pIn2
;

598 
j
 = 
blockSize3
 >> 2u;

600 (
j
 > 0uË&& (
blockSize3
 > 0u))

603 
sum
 = 0;

606 
k
 = 
blockSize3
 >> 2u;

610 
k
 > 0u)

614 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

617 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

620 
k
--;

625 
py
 =Öy + 1u;

629 
k
 = 
blockSize3
 % 0x4u;

631 
k
 > 0u)

634 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

637 
k
--;

641 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

644 
px
 = ++
pSrc1
;

645 
py
 = 
pIn2
;

648 
blockSize3
--;

650 
j
--;

656 
py
 =Öy + 1u;

658 
blockSize3
 > 0u)

661 
sum
 = 0;

664 
k
 = 
blockSize3
;

666 
k
 > 0u)

670 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

673 
k
--;

677 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

680 
px
 = ++
pSrc1
;

681 
py
 = 
pSrc2
;

684 
blockSize3
--;

688 
q15_t
 *
pIn1
;

689 
q15_t
 *
pIn2
;

690 
q15_t
 *
pOut
 = 
pD°
;

691 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

692 
q15_t
 *
px
;

693 
q15_t
 *
py
;

694 
q15_t
 *
pSrc1
, *
pSrc2
;

695 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

696 
uöt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
, 
j
, 
k
, 
cou¡
, 
blkC¡
;

697 
q15_t
 
a
, 
b
;

702 if(
§cALí
 >
§cBLí
)

705 
pIn1
 = 
pSrcA
;

708 
pIn2
 = 
pSrcB
;

713 
pIn1
 = 
pSrcB
;

716 
pIn2
 = 
pSrcA
;

719 
j
 = 
§cBLí
;

720 
§cBLí
 = 
§cALí
;

721 
§cALí
 = 
j
;

735 
blockSize1
 = 
§cBLí
 - 1u;

736 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

737 
blockSize3
 = 
blockSize1
;

751 
cou¡
 = 1u;

754 
px
 = 
pIn1
;

757 
py
 = 
pIn2
;

769 (
cou¡
 < 4uË&& (
blockSize1
 > 0u))

772 
sum
 = 0;

776 
k
 = 
cou¡
;

778 
k
 > 0u)

781 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

784 
k
--;

788 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

791 
py
 = 
pIn2
 + 
cou¡
;

792 
px
 = 
pIn1
;

795 
cou¡
++;

798 
blockSize1
--;

805 
py
 =Öy - 1;

807 
blockSize1
 > 0u)

810 
sum
 = 0;

813 
k
 = 
cou¡
 >> 2u;

817 
py
++;

819 
k
 > 0u)

822 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

823 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

824 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

825 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

828 
k
--;

833 
k
 = 
cou¡
 % 0x4u;

835 
k
 > 0u)

838 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

841 
k
--;

845 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

848 
py
 = 
pIn2
 + (
cou¡
 - 1u);

849 
px
 = 
pIn1
;

852 
cou¡
++;

855 
blockSize1
--;

869 
px
 = 
pIn1
;

872 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

873 
py
 = 
pSrc2
;

876 
cou¡
 = 0u;

886 if(
§cBLí
 >= 4u)

889 
blkC¡
 = 
blockSize2
 >> 2u;

891 
blkC¡
 > 0u)

893 
py
 =Öy - 1u;

896 
acc0
 = 0;

897 
acc1
 = 0;

898 
acc2
 = 0;

899 
acc3
 = 0;

902 
a
 = *
px
++;

903 
b
 = *
px
++;

905 #i‚de‡
ARM_MATH_BIG_ENDIAN


907 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

908 
a
 = *
px
;

909 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

913 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

914 
a
 = *
px
;

915 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

920 
k
 = 
§cBLí
 >> 2u;

928 
a
 = *
py
;

929 
b
 = *(
py
+1);

930 
py
 -= 2;

932 #i‚de‡
ARM_MATH_BIG_ENDIAN


934 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

938 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

943 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

946 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

948 
a
 = *
px
;

949 
b
 = *(
px
 + 1);

951 #i‚de‡
ARM_MATH_BIG_ENDIAN


953 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

954 
a
 = *(
px
 + 2);

955 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

959 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

960 
a
 = *(
px
 + 2);

961 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

966 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

969 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

972 
a
 = *
py
;

973 
b
 = *(
py
+1);

974 
py
 -= 2;

976 #i‚de‡
ARM_MATH_BIG_ENDIAN


978 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

982 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

987 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

990 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

993 
a
 = *(
px
 + 2);

994 
b
 = *(
px
 + 3);

996 #i‚de‡
ARM_MATH_BIG_ENDIAN


998 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

999 
a
 = *(
px
 + 4);

1000 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

1004 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1005 
a
 = *(
px
 + 4);

1006 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

1010 
px
 += 4u;

1013 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

1016 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

1018 } --
k
);

1025 
k
 = 
§cBLí
 % 0x4u;

1027 if(
k
 == 1u)

1030 
c0
 = *(
py
+1);

1032 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1034 
c0
 = c0 << 16u;

1038 
c0
 = c0 & 0x0000FFFF;

1043 
a
 = *
px
;

1044 
b
 = *(
px
+1);

1045 
px
++;

1047 #i‚de‡
ARM_MATH_BIG_ENDIAN


1049 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1053 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1059 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1060 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1061 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

1062 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1065 if(
k
 == 2u)

1068 
a
 = *
py
;

1069 
b
 = *(
py
+1);

1071 #i‚de‡
ARM_MATH_BIG_ENDIAN


1073 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1077 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1082 
a
 = *
px
;

1083 
b
 = *(
px
 + 1);

1085 #i‚de‡
ARM_MATH_BIG_ENDIAN


1087 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1088 
a
 = *(
px
 + 2);

1089 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1093 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1094 
a
 = *(
px
 + 2);

1095 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1098 
px
 += 2u;

1101 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1102 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1103 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1104 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1107 if(
k
 == 3u)

1110 
a
 = *
py
;

1111 
b
 = *(
py
+1);

1113 #i‚de‡
ARM_MATH_BIG_ENDIAN


1115 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1119 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1124 
a
 = *
px
;

1125 
b
 = *(
px
 + 1);

1127 #i‚de‡
ARM_MATH_BIG_ENDIAN


1129 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1130 
a
 = *(
px
 + 2);

1131 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1135 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1136 
a
 = *(
px
 + 2);

1137 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1142 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1143 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1144 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1145 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1148 
c0
 = *(
py
-1);

1149 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1151 
c0
 = c0 << 16u;

1154 
c0
 = c0 & 0x0000FFFF;

1158 
a
 = *(
px
+2);

1159 
b
 = *(
px
+3);

1161 #i‚de‡
ARM_MATH_BIG_ENDIAN


1163 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1167 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1171 
px
 += 3u;

1174 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

1175 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

1176 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1177 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1181 *
pOut
++ = (
q15_t
)(
acc0
 >> 15);

1182 *
pOut
++ = (
q15_t
)(
acc1
 >> 15);

1183 *
pOut
++ = (
q15_t
)(
acc2
 >> 15);

1184 *
pOut
++ = (
q15_t
)(
acc3
 >> 15);

1187 
cou¡
 += 4u;

1190 
px
 = 
pIn1
 + 
cou¡
;

1191 
py
 = 
pSrc2
;

1194 
blkC¡
--;

1199 
blkC¡
 = 
blockSize2
 % 0x4u;

1201 
blkC¡
 > 0u)

1204 
sum
 = 0;

1207 
k
 = 
§cBLí
 >> 2u;

1211 
k
 > 0u)

1214 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1215 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1216 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1217 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1220 
k
--;

1225 
k
 = 
§cBLí
 % 0x4u;

1227 
k
 > 0u)

1230 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1233 
k
--;

1237 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1240 
cou¡
++;

1243 
px
 = 
pIn1
 + 
cou¡
;

1244 
py
 = 
pSrc2
;

1247 
blkC¡
--;

1254 
blkC¡
 = 
blockSize2
;

1256 
blkC¡
 > 0u)

1259 
sum
 = 0;

1262 
k
 = 
§cBLí
;

1264 
k
 > 0u)

1267 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1270 
k
--;

1274 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1277 
cou¡
++;

1280 
px
 = 
pIn1
 + 
cou¡
;

1281 
py
 = 
pSrc2
;

1284 
blkC¡
--;

1304 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

1305 
px
 = 
pSrc1
;

1308 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

1309 
pIn2
 = 
pSrc2
 - 1u;

1310 
py
 = 
pIn2
;

1321 
j
 = 
blockSize3
 >> 2u;

1323 (
j
 > 0uË&& (
blockSize3
 > 0u))

1326 
sum
 = 0;

1329 
k
 = 
blockSize3
 >> 2u;

1333 
py
++;

1335 
k
 > 0u)

1337 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1338 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1339 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1340 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1342 
k
--;

1347 
k
 = 
blockSize3
 % 0x4u;

1349 
k
 > 0u)

1352 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1355 
k
--;

1359 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1362 
px
 = ++
pSrc1
;

1363 
py
 = 
pIn2
;

1366 
blockSize3
--;

1368 
j
--;

1374 
py
 =Öy + 1u;

1376 
blockSize3
 > 0u)

1379 
sum
 = 0;

1382 
k
 = 
blockSize3
;

1384 
k
 > 0u)

1388 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1391 
k
--;

1395 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1398 
px
 = ++
pSrc1
;

1399 
py
 = 
pSrc2
;

1402 
blockSize3
--;

1406 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q31.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c⁄v_Á°_q31
(

80 
q31_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q31_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q31_t
 * 
pD°
)

86 
q31_t
 *
pIn1
;

87 
q31_t
 *
pIn2
;

88 
q31_t
 *
pOut
 = 
pD°
;

89 
q31_t
 *
px
;

90 
q31_t
 *
py
;

91 
q31_t
 *
pSrc1
, *
pSrc2
;

92 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

93 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

94 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

99 if(
§cALí
 >
§cBLí
)

102 
pIn1
 = 
pSrcA
;

105 
pIn2
 = 
pSrcB
;

110 
pIn1
 = 
pSrcB
;

113 
pIn2
 = 
pSrcA
;

116 
j
 = 
§cBLí
;

117 
§cBLí
 = 
§cALí
;

118 
§cALí
 = 
j
;

132 
blockSize1
 = 
§cBLí
 - 1u;

133 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

134 
blockSize3
 = 
blockSize1
;

148 
cou¡
 = 1u;

151 
px
 = 
pIn1
;

154 
py
 = 
pIn2
;

162 
blockSize1
 > 0u)

165 
sum
 = 0;

168 
k
 = 
cou¡
 >> 2u;

172 
k
 > 0u)

175 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

176 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

179 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

180 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

183 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

184 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

187 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

188 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

191 
k
--;

196 
k
 = 
cou¡
 % 0x4u;

198 
k
 > 0u)

201 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

202 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

205 
k
--;

209 *
pOut
++ = 
sum
 << 1;

212 
py
 = 
pIn2
 + 
cou¡
;

213 
px
 = 
pIn1
;

216 
cou¡
++;

219 
blockSize1
--;

233 
px
 = 
pIn1
;

236 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

237 
py
 = 
pSrc2
;

240 
cou¡
 = 0u;

249 if(
§cBLí
 >= 4u)

252 
blkC¡
 = 
blockSize2
 >> 2u;

254 
blkC¡
 > 0u)

257 
acc0
 = 0;

258 
acc1
 = 0;

259 
acc2
 = 0;

260 
acc3
 = 0;

263 
x0
 = *(
px
++);

264 
x1
 = *(
px
++);

265 
x2
 = *(
px
++);

268 
k
 = 
§cBLí
 >> 2u;

275 
c0
 = *(
py
--);

278 
x3
 = *(
px
++);

282 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

285 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

288 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

291 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

294 
c0
 = *(
py
--);

297 
x0
 = *(
px
++);

301 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

303 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

305 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

307 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

310 
c0
 = *(
py
--);

313 
x1
 = *(
px
++);

317 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

319 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

321 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

323 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

326 
c0
 = *(
py
--);

329 
x2
 = *(
px
++);

333 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

335 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

337 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

339 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

342 } --
k
);

346 
k
 = 
§cBLí
 % 0x4u;

348 
k
 > 0u)

351 
c0
 = *(
py
--);

354 
x3
 = *(
px
++);

358 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

360 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

362 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

364 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

367 
x0
 = 
x1
;

368 
x1
 = 
x2
;

369 
x2
 = 
x3
;

372 
k
--;

376 *
pOut
++ = (
q31_t
Ë(
acc0
 << 1);

377 *
pOut
++ = (
q31_t
Ë(
acc1
 << 1);

378 *
pOut
++ = (
q31_t
Ë(
acc2
 << 1);

379 *
pOut
++ = (
q31_t
Ë(
acc3
 << 1);

382 
cou¡
 += 4u;

385 
px
 = 
pIn1
 + 
cou¡
;

386 
py
 = 
pSrc2
;

389 
blkC¡
--;

394 
blkC¡
 = 
blockSize2
 % 0x4u;

396 
blkC¡
 > 0u)

399 
sum
 = 0;

402 
k
 = 
§cBLí
 >> 2u;

406 
k
 > 0u)

409 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

410 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

411 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

412 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

413 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

414 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

415 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

416 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

419 
k
--;

424 
k
 = 
§cBLí
 % 0x4u;

426 
k
 > 0u)

429 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

430 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

433 
k
--;

437 *
pOut
++ = 
sum
 << 1;

440 
cou¡
++;

443 
px
 = 
pIn1
 + 
cou¡
;

444 
py
 = 
pSrc2
;

447 
blkC¡
--;

454 
blkC¡
 = 
blockSize2
;

456 
blkC¡
 > 0u)

459 
sum
 = 0;

462 
k
 = 
§cBLí
;

464 
k
 > 0u)

467 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

468 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

471 
k
--;

475 *
pOut
++ = 
sum
 << 1;

478 
cou¡
++;

481 
px
 = 
pIn1
 + 
cou¡
;

482 
py
 = 
pSrc2
;

485 
blkC¡
--;

505 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

506 
px
 = 
pSrc1
;

509 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

510 
py
 = 
pSrc2
;

516 
blockSize3
 > 0u)

519 
sum
 = 0;

522 
k
 = 
blockSize3
 >> 2u;

526 
k
 > 0u)

529 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

530 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

533 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

534 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

537 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

538 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

541 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

542 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

545 
k
--;

550 
k
 = 
blockSize3
 % 0x4u;

552 
k
 > 0u)

555 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

556 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

559 
k
--;

563 *
pOut
++ = 
sum
 << 1;

566 
px
 = ++
pSrc1
;

567 
py
 = 
pSrc2
;

570 
blockSize3
--;

573 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q15.c

41 
	~"¨m_m©h.h
"

85 
	$¨m_c⁄v_›t_q15
(

86 
q15_t
 * 
pSrcA
,

87 
uöt32_t
 
§cALí
,

88 
q15_t
 * 
pSrcB
,

89 
uöt32_t
 
§cBLí
,

90 
q15_t
 * 
pD°
,

91 
q15_t
 * 
pS¸©ch1
,

92 
q15_t
 * 
pS¸©ch2
)

94 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q31_t
 
x1
, 
x2
, 
x3
;

96 
q31_t
 
y1
, 
y2
;

97 
q15_t
 *
pOut
 = 
pD°
;

98 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

99 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

100 
q15_t
 *
pIn1
;

101 
q15_t
 *
pIn2
;

102 
q15_t
 *
px
;

103 
q15_t
 *
py
;

104 
uöt32_t
 
j
, 
k
, 
blkC¡
;

105 
uöt32_t
 
èpC¡
;

106 #ifde‡
UNALIGNED_SUPPORT_DISABLE


108 
q15_t
 
a
, 
b
;

115 if(
§cALí
 >
§cBLí
)

118 
pIn1
 = 
pSrcA
;

121 
pIn2
 = 
pSrcB
;

127 
pIn1
 = 
pSrcB
;

130 
pIn2
 = 
pSrcA
;

133 
j
 = 
§cBLí
;

134 
§cBLí
 = 
§cALí
;

135 
§cALí
 = 
j
;

139 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

142 
px
 = 
pIn2
;

145 
k
 = 
§cBLí
 >> 2u;

150 
k
 > 0u)

153 *
pS¸2
-- = *
px
++;

154 *
pS¸2
-- = *
px
++;

155 *
pS¸2
-- = *
px
++;

156 *
pS¸2
-- = *
px
++;

159 
k
--;

164 
k
 = 
§cBLí
 % 0x4u;

166 
k
 > 0u)

169 *
pS¸2
-- = *
px
++;

172 
k
--;

176 
pS¸1
 = 
pS¸©ch1
;

180 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

183 
pS¸1
 +(
§cBLí
 - 1u);

187 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


190 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

193 
pS¸1
 +
§cALí
;

198 
k
 = 
§cALí
 >> 2u;

202 
k
 > 0u)

205 *
pS¸1
++ = *
pIn1
++;

206 *
pS¸1
++ = *
pIn1
++;

207 *
pS¸1
++ = *
pIn1
++;

208 *
pS¸1
++ = *
pIn1
++;

211 
k
--;

216 
k
 = 
§cALí
 % 0x4u;

218 
k
 > 0u)

221 *
pS¸1
++ = *
pIn1
++;

224 
k
--;

230 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


233 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

236 
pS¸1
 +(
§cBLí
 - 1u);

241 
k
 = (
§cBLí
 - 1u) >> 2u;

245 
k
 > 0u)

248 *
pS¸1
++ = 0;

249 *
pS¸1
++ = 0;

250 *
pS¸1
++ = 0;

251 *
pS¸1
++ = 0;

254 
k
--;

259 
k
 = (
§cBLí
 - 1u) % 0x4u;

261 
k
 > 0u)

264 *
pS¸1
++ = 0;

267 
k
--;

273 
py
 = 
pS¸©ch2
;

277 
pIn2
 = 
py
;

283 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

285 
blkC¡
 > 0)

288 
pS¸1
 = 
pS¸©ch1
;

291 
acc0
 = 0;

292 
acc1
 = 0;

293 
acc2
 = 0;

294 
acc3
 = 0;

297 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

300 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

302 
èpC¡
 = (
§cBLí
) >> 2u;

304 
èpC¡
 > 0u)

307 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


310 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

311 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

314 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

315 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

318 #i‚de‡
ARM_MATH_BIG_ENDIAN


319 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

321 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

325 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

328 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

331 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

332 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

335 #i‚de‡
ARM_MATH_BIG_ENDIAN


336 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

338 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

341 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

342 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

344 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

346 #i‚de‡
ARM_MATH_BIG_ENDIAN


347 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

349 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

352 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

357 
a
 = *
pIn2
;

358 
b
 = *(
pIn2
 + 1);

360 #i‚de‡
ARM_MATH_BIG_ENDIAN


361 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

363 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

366 
a
 = *(
pIn2
 + 2);

367 
b
 = *(
pIn2
 + 3);

368 #i‚de‡
ARM_MATH_BIG_ENDIAN


369 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

371 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

374 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

376 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

378 #i‚de‡
ARM_MATH_BIG_ENDIAN


379 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

381 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

384 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

386 
a
 = *
pS¸1
;

387 
b
 = *(
pS¸1
 + 1);

389 #i‚de‡
ARM_MATH_BIG_ENDIAN


390 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

392 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

395 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

397 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

399 #i‚de‡
ARM_MATH_BIG_ENDIAN


400 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

402 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

405 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

407 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

409 
a
 = *(
pS¸1
 + 2);

410 
b
 = *(
pS¸1
 + 3);

412 #i‚de‡
ARM_MATH_BIG_ENDIAN


413 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

415 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

418 #i‚de‡
ARM_MATH_BIG_ENDIAN


419 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

421 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

424 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

428 
pIn2
 += 4u;

429 
pS¸1
 += 4u;

433 
èpC¡
--;

437 
pS¸1
 -= 4u;

440 
èpC¡
 = (
§cBLí
) & 3u;

442 
èpC¡
 > 0u)

446 
acc0
 +(*
pS¸1
++ * *
pIn2
);

447 
acc1
 +(*
pS¸1
++ * *
pIn2
);

448 
acc2
 +(*
pS¸1
++ * *
pIn2
);

449 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

451 
pS¸1
 -= 3u;

454 
èpC¡
--;

457 
blkC¡
--;

462 #i‚de‡
ARM_MATH_BIG_ENDIAN


464 *
	`__SIMD32
(
pOut
)++ =

465 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

467 *
	`__SIMD32
(
pOut
)++ =

468 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

472 *
	`__SIMD32
(
pOut
)++ =

473 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

475 *
	`__SIMD32
(
pOut
)++ =

476 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

482 
pIn2
 = 
py
;

484 
pS¸©ch1
 += 4u;

489 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

492 
blkC¡
 > 0)

495 
pS¸1
 = 
pS¸©ch1
;

498 
acc0
 = 0;

500 
èpC¡
 = (
§cBLí
) >> 1u;

502 
èpC¡
 > 0u)

506 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

507 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

510 
èpC¡
--;

513 
èpC¡
 = (
§cBLí
) & 1u;

516 
èpC¡
 > 0u)

520 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

523 
èpC¡
--;

526 
blkC¡
--;

530 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

534 
pIn2
 = 
py
;

536 
pS¸©ch1
 += 1u;

540 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q7.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c⁄v_›t_q7
(

80 
q7_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q7_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q7_t
 * 
pD°
,

85 
q15_t
 * 
pS¸©ch1
,

86 
q15_t
 * 
pS¸©ch2
)

89 
q15_t
 *
pS¸2
, *
pS¸1
;

90 
q15_t
 
x4
;

91 
q7_t
 *
pIn1
, *
pIn2
;

92 
uöt32_t
 
j
, 
k
, 
blkC¡
, 
èpC¡
;

93 
q7_t
 *
px
;

94 
q15_t
 *
py
;

95 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

96 
q31_t
 
x1
, 
x2
, 
x3
, 
y1
;

97 
q7_t
 *
pOut
 = 
pD°
;

98 
q7_t
 
out0
, 
out1
, 
out2
, 
out3
;

103 if(
§cALí
 >
§cBLí
)

106 
pIn1
 = 
pSrcA
;

109 
pIn2
 = 
pSrcB
;

114 
pIn1
 = 
pSrcB
;

117 
pIn2
 = 
pSrcA
;

120 
j
 = 
§cBLí
;

121 
§cBLí
 = 
§cALí
;

122 
§cALí
 = 
j
;

126 
pS¸2
 = 
pS¸©ch2
;

129 
px
 = 
pIn2
 + 
§cBLí
 - 1;

132 
k
 = 
§cBLí
 >> 2u;

136 
k
 > 0u)

139 
x4
 = (
q15_t
Ë* 
px
--;

140 *
pS¸2
++ = 
x4
;

141 
x4
 = (
q15_t
Ë* 
px
--;

142 *
pS¸2
++ = 
x4
;

143 
x4
 = (
q15_t
Ë* 
px
--;

144 *
pS¸2
++ = 
x4
;

145 
x4
 = (
q15_t
Ë* 
px
--;

146 *
pS¸2
++ = 
x4
;

149 
k
--;

154 
k
 = 
§cBLí
 % 0x4u;

156 
k
 > 0u)

159 
x4
 = (
q15_t
Ë* 
px
--;

160 *
pS¸2
++ = 
x4
;

163 
k
--;

167 
pS¸1
 = 
pS¸©ch1
;

170 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

173 
pS¸1
 +(
§cBLí
 - 1u);

177 
k
 = 
§cALí
 >> 2u;

181 
k
 > 0u)

184 
x4
 = (
q15_t
Ë* 
pIn1
++;

185 *
pS¸1
++ = 
x4
;

186 
x4
 = (
q15_t
Ë* 
pIn1
++;

187 *
pS¸1
++ = 
x4
;

188 
x4
 = (
q15_t
Ë* 
pIn1
++;

189 *
pS¸1
++ = 
x4
;

190 
x4
 = (
q15_t
Ë* 
pIn1
++;

191 *
pS¸1
++ = 
x4
;

194 
k
--;

199 
k
 = 
§cALí
 % 0x4u;

201 
k
 > 0u)

204 
x4
 = (
q15_t
Ë* 
pIn1
++;

205 *
pS¸1
++ = 
x4
;

208 
k
--;

211 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


214 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

217 
pS¸1
 +(
§cBLí
 - 1u);

222 
k
 = (
§cBLí
 - 1u) >> 2u;

226 
k
 > 0u)

229 *
pS¸1
++ = 0;

230 *
pS¸1
++ = 0;

231 *
pS¸1
++ = 0;

232 *
pS¸1
++ = 0;

235 
k
--;

240 
k
 = (
§cBLí
 - 1u) % 0x4u;

242 
k
 > 0u)

245 *
pS¸1
++ = 0;

248 
k
--;

254 
py
 = 
pS¸©ch2
;

257 
pIn2
 = (
q7_t
 *Ë
py
;

259 
pS¸2
 = 
py
;

262 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

264 
blkC¡
 > 0)

267 
pS¸1
 = 
pS¸©ch1
;

270 
acc0
 = 0;

271 
acc1
 = 0;

272 
acc2
 = 0;

273 
acc3
 = 0;

276 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

279 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

281 
èpC¡
 = (
§cBLí
) >> 2u;

283 
èpC¡
 > 0u)

287 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
);

290 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

291 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

294 #i‚de‡
ARM_MATH_BIG_ENDIAN


295 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

297 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

301 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

304 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

307 #i‚de‡
ARM_MATH_BIG_ENDIAN


308 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

310 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

313 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

316 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
 + 2u);

318 
acc0
 = 
	`__SMLAD
(
x2
, 
y1
,ácc0);

320 
acc2
 = 
	`__SMLAD
(
x1
, 
y1
,ácc2);

322 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

324 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

326 #i‚de‡
ARM_MATH_BIG_ENDIAN


327 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

329 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

332 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

334 
pS¸2
 += 4u;

338 
èpC¡
--;

344 
pS¸1
 -= 4u;

348 
èpC¡
 = (
§cBLí
) & 3u;

350 
èpC¡
 > 0u)

354 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

355 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

356 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

357 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

359 
pS¸1
 -= 3u;

362 
èpC¡
--;

365 
blkC¡
--;

368 
out0
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

369 
out1
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

370 
out2
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

371 
out3
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

373 *
	`__SIMD32
(
pOut
)++ = 
	`__PACKq7
(
out0
, 
out1
, 
out2
, 
out3
);

376 
pS¸2
 = 
py
;

378 
pS¸©ch1
 += 4u;

383 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

386 
blkC¡
 > 0)

389 
pS¸1
 = 
pS¸©ch1
;

392 
acc0
 = 0;

394 
èpC¡
 = (
§cBLí
) >> 1u;

396 
èpC¡
 > 0u)

398 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

399 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

402 
èpC¡
--;

405 
èpC¡
 = (
§cBLí
) & 1u;

408 
èpC¡
 > 0u)

412 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

415 
èpC¡
--;

418 
blkC¡
--;

421 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

424 
pS¸2
 = 
py
;

426 
pS¸©ch1
 += 1u;

430 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_f32.c

41 
	~"¨m_m©h.h
"

95 
¨m_°©us
 
	$¨m_c⁄v_∑πül_f32
(

96 
Êﬂt32_t
 * 
pSrcA
,

97 
uöt32_t
 
§cALí
,

98 
Êﬂt32_t
 * 
pSrcB
,

99 
uöt32_t
 
§cBLí
,

100 
Êﬂt32_t
 * 
pD°
,

101 
uöt32_t
 
fú°Index
,

102 
uöt32_t
 
numPoöts
)

106 #i‚de‡
ARM_MATH_CM0_FAMILY


110 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

111 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
;

112 
Êﬂt32_t
 *
pOut
 = 
pD°
;

113 
Êﬂt32_t
 *
px
;

114 
Êﬂt32_t
 *
py
;

115 
Êﬂt32_t
 *
pSrc1
, *
pSrc2
;

116 
Êﬂt32_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

117 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

118 
uöt32_t
 
j
, 
k
, 
cou¡
 = 0u, 
blkC¡
, 
check
;

119 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

120 
¨m_°©us
 
°©us
;

124 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

127 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

135 if(
§cALí
 >
§cBLí
)

138 
pIn1
 = 
pSrcA
;

141 
pIn2
 = 
pSrcB
;

146 
pIn1
 = 
pSrcB
;

149 
pIn2
 = 
pSrcA
;

152 
j
 = 
§cBLí
;

153 
§cBLí
 = 
§cALí
;

154 
§cALí
 = 
j
;

159 
check
 = 
fú°Index
 + 
numPoöts
;

160 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

161 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

162 
blockSize1
 = ((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
;

163 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

164 (
öt32_t
Ë
numPoöts
) : 0;

165 
blockSize2
 = ((
öt32_t
Ë
check
 - 
blockSize3
) -

166 (
blockSize1
 + (
öt32_t
Ë
fú°Index
);

167 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

180 
pOut
 = 
pD°
 + 
fú°Index
;

196 
cou¡
 = 1u + 
fú°Index
;

199 
px
 = 
pIn1
;

202 
pSrc1
 = 
pIn2
 + 
fú°Index
;

203 
py
 = 
pSrc1
;

210 
blockSize1
 > 0)

213 
sum
 = 0.0f;

216 
k
 = 
cou¡
 >> 2u;

220 
k
 > 0u)

223 
sum
 +*
px
++ * *
py
--;

226 
sum
 +*
px
++ * *
py
--;

229 
sum
 +*
px
++ * *
py
--;

232 
sum
 +*
px
++ * *
py
--;

235 
k
--;

240 
k
 = 
cou¡
 % 0x4u;

242 
k
 > 0u)

245 
sum
 +*
px
++ * *
py
--;

248 
k
--;

252 *
pOut
++ = 
sum
;

255 
py
 = ++
pSrc1
;

256 
px
 = 
pIn1
;

259 
cou¡
++;

262 
blockSize1
--;

276 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

278 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

282 
px
 = 
pIn1
;

286 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

287 
py
 = 
pSrc2
;

290 
cou¡
 = 0u;

299 if(
§cBLí
 >= 4u)

302 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

304 
blkC¡
 > 0u)

307 
acc0
 = 0.0f;

308 
acc1
 = 0.0f;

309 
acc2
 = 0.0f;

310 
acc3
 = 0.0f;

313 
x0
 = *(
px
++);

314 
x1
 = *(
px
++);

315 
x2
 = *(
px
++);

318 
k
 = 
§cBLí
 >> 2u;

325 
c0
 = *(
py
--);

328 
x3
 = *(
px
++);

332 
acc0
 +
x0
 * 
c0
;

335 
acc1
 +
x1
 * 
c0
;

338 
acc2
 +
x2
 * 
c0
;

341 
acc3
 +
x3
 * 
c0
;

344 
c0
 = *(
py
--);

347 
x0
 = *(
px
++);

351 
acc0
 +
x1
 * 
c0
;

353 
acc1
 +
x2
 * 
c0
;

355 
acc2
 +
x3
 * 
c0
;

357 
acc3
 +
x0
 * 
c0
;

360 
c0
 = *(
py
--);

363 
x1
 = *(
px
++);

367 
acc0
 +
x2
 * 
c0
;

369 
acc1
 +
x3
 * 
c0
;

371 
acc2
 +
x0
 * 
c0
;

373 
acc3
 +
x1
 * 
c0
;

376 
c0
 = *(
py
--);

379 
x2
 = *(
px
++);

383 
acc0
 +
x3
 * 
c0
;

385 
acc1
 +
x0
 * 
c0
;

387 
acc2
 +
x1
 * 
c0
;

389 
acc3
 +
x2
 * 
c0
;

392 } --
k
);

396 
k
 = 
§cBLí
 % 0x4u;

398 
k
 > 0u)

401 
c0
 = *(
py
--);

404 
x3
 = *(
px
++);

408 
acc0
 +
x0
 * 
c0
;

410 
acc1
 +
x1
 * 
c0
;

412 
acc2
 +
x2
 * 
c0
;

414 
acc3
 +
x3
 * 
c0
;

417 
x0
 = 
x1
;

418 
x1
 = 
x2
;

419 
x2
 = 
x3
;

422 
k
--;

426 *
pOut
++ = 
acc0
;

427 *
pOut
++ = 
acc1
;

428 *
pOut
++ = 
acc2
;

429 *
pOut
++ = 
acc3
;

432 
cou¡
 += 4u;

435 
px
 = 
pIn1
 + 
cou¡
;

436 
py
 = 
pSrc2
;

439 
blkC¡
--;

444 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

446 
blkC¡
 > 0u)

449 
sum
 = 0.0f;

452 
k
 = 
§cBLí
 >> 2u;

456 
k
 > 0u)

459 
sum
 +*
px
++ * *
py
--;

460 
sum
 +*
px
++ * *
py
--;

461 
sum
 +*
px
++ * *
py
--;

462 
sum
 +*
px
++ * *
py
--;

465 
k
--;

470 
k
 = 
§cBLí
 % 0x4u;

472 
k
 > 0u)

475 
sum
 +*
px
++ * *
py
--;

478 
k
--;

482 *
pOut
++ = 
sum
;

485 
cou¡
++;

488 
px
 = 
pIn1
 + 
cou¡
;

489 
py
 = 
pSrc2
;

492 
blkC¡
--;

499 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

501 
blkC¡
 > 0u)

504 
sum
 = 0.0f;

507 
k
 = 
§cBLí
;

509 
k
 > 0u)

512 
sum
 +*
px
++ * *
py
--;

515 
k
--;

519 *
pOut
++ = 
sum
;

522 
cou¡
++;

525 
px
 = 
pIn1
 + 
cou¡
;

526 
py
 = 
pSrc2
;

529 
blkC¡
--;

547 
cou¡
 = 
§cBLí
 - 1u;

550 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

551 
px
 = 
pSrc1
;

554 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

555 
py
 = 
pSrc2
;

557 
blockSize3
 > 0)

560 
sum
 = 0.0f;

563 
k
 = 
cou¡
 >> 2u;

567 
k
 > 0u)

570 
sum
 +*
px
++ * *
py
--;

573 
sum
 +*
px
++ * *
py
--;

576 
sum
 +*
px
++ * *
py
--;

579 
sum
 +*
px
++ * *
py
--;

582 
k
--;

587 
k
 = 
cou¡
 % 0x4u;

589 
k
 > 0u)

593 
sum
 +*
px
++ * *
py
--;

596 
k
--;

600 *
pOut
++ = 
sum
;

603 
px
 = ++
pSrc1
;

604 
py
 = 
pSrc2
;

607 
cou¡
--;

610 
blockSize3
--;

615 
°©us
 = 
ARM_MATH_SUCCESS
;

619  (
°©us
);

625 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

626 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
;

627 
Êﬂt32_t
 
sum
;

628 
uöt32_t
 
i
, 
j
;

629 
¨m_°©us
 
°©us
;

632 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

635 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

640 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

643 
sum
 = 0.0f;

646 
j
 = 0u; j <
i
; j++)

649 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

652 
sum
 +
pIn1
[
j
] * 
pIn2
[
i
 - j];

656 
pD°
[
i
] = 
sum
;

659 
°©us
 = 
ARM_MATH_SUCCESS
;

661  (
°©us
);

665 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_opt_q15.c

41 
	~"¨m_m©h.h
"

73 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


75 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_›t_q15
(

76 
q15_t
 * 
pSrcA
,

77 
uöt32_t
 
§cALí
,

78 
q15_t
 * 
pSrcB
,

79 
uöt32_t
 
§cBLí
,

80 
q15_t
 * 
pD°
,

81 
uöt32_t
 
fú°Index
,

82 
uöt32_t
 
numPoöts
,

83 
q15_t
 * 
pS¸©ch1
,

84 
q15_t
 * 
pS¸©ch2
)

87 
q15_t
 *
pOut
 = 
pD°
;

88 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

89 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

90 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

91 
q31_t
 
x1
, 
x2
, 
x3
;

92 
q31_t
 
y1
, 
y2
;

93 
q15_t
 *
pIn1
;

94 
q15_t
 *
pIn2
;

95 
q15_t
 *
px
;

96 
q15_t
 *
py
;

97 
uöt32_t
 
j
, 
k
, 
blkC¡
;

98 
¨m_°©us
 
°©us
;

100 
uöt32_t
 
èpC¡
;

103 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

106 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

114 if(
§cALí
 >
§cBLí
)

117 
pIn1
 = 
pSrcA
;

120 
pIn2
 = 
pSrcB
;

125 
pIn1
 = 
pSrcB
;

128 
pIn2
 = 
pSrcA
;

131 
j
 = 
§cBLí
;

132 
§cBLí
 = 
§cALí
;

133 
§cALí
 = 
j
;

137 
py
 = 
pS¸©ch2
;

140 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

143 
px
 = 
pIn2
;

146 
k
 = 
§cBLí
 >> 2u;

152 
k
 > 0u)

155 *
pS¸2
-- = *
px
++;

156 *
pS¸2
-- = *
px
++;

157 *
pS¸2
-- = *
px
++;

158 *
pS¸2
-- = *
px
++;

161 
k
--;

166 
k
 = 
§cBLí
 % 0x4u;

168 
k
 > 0u)

171 *
pS¸2
-- = *
px
++;

174 
k
--;

178 
pS¸1
 = 
pS¸©ch1
;

182 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

185 
pS¸1
 +(
§cBLí
 - 1u);

190 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

193 
pS¸1
 +
§cALí
;

196 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

199 
pS¸1
 +(
§cBLí
 - 1u);

202 
pIn2
 = 
py
;

204 
pS¸©ch1
 +
fú°Index
;

206 
pOut
 = 
pD°
 + 
fú°Index
;

212 
blkC¡
 = (
numPoöts
) >> 2;

214 
blkC¡
 > 0)

217 
pS¸1
 = 
pS¸©ch1
;

220 
acc0
 = 0;

221 
acc1
 = 0;

222 
acc2
 = 0;

223 
acc3
 = 0;

226 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

229 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

231 
èpC¡
 = (
§cBLí
) >> 2u;

233 
èpC¡
 > 0u)

237 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

238 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

241 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

242 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

245 #i‚de‡
ARM_MATH_BIG_ENDIAN


246 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

248 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

252 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

255 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

258 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

260 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

263 #i‚de‡
ARM_MATH_BIG_ENDIAN


264 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

266 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

269 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

270 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

272 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

274 #i‚de‡
ARM_MATH_BIG_ENDIAN


275 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

277 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

280 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

283 
pIn2
 += 4u;

284 
pS¸1
 += 4u;

288 
èpC¡
--;

292 
pS¸1
 -= 4u;

295 
èpC¡
 = (
§cBLí
) & 3u;

297 
èpC¡
 > 0u)

301 
acc0
 +(*
pS¸1
++ * *
pIn2
);

302 
acc1
 +(*
pS¸1
++ * *
pIn2
);

303 
acc2
 +(*
pS¸1
++ * *
pIn2
);

304 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

306 
pS¸1
 -= 3u;

309 
èpC¡
--;

312 
blkC¡
--;

317 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


319 *
	`__SIMD32
(
pOut
)++ =

320 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

321 *
	`__SIMD32
(
pOut
)++ =

322 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

326 *
	`__SIMD32
(
pOut
)++ =

327 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

328 *
	`__SIMD32
(
pOut
)++ =

329 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

334 
pIn2
 = 
py
;

336 
pS¸©ch1
 += 4u;

341 
blkC¡
 = 
numPoöts
 & 0x3;

344 
blkC¡
 > 0)

347 
pS¸1
 = 
pS¸©ch1
;

350 
acc0
 = 0;

352 
èpC¡
 = (
§cBLí
) >> 1u;

354 
èpC¡
 > 0u)

358 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

361 
y1
 = *
	`__SIMD32
(
pIn2
)++;

363 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

366 
èpC¡
--;

369 
èpC¡
 = (
§cBLí
) & 1u;

372 
èpC¡
 > 0u)

376 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

379 
èpC¡
--;

382 
blkC¡
--;

386 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

389 
pIn2
 = 
py
;

391 
pS¸©ch1
 += 1u;

395 
°©us
 = 
ARM_MATH_SUCCESS
;

398  (
°©us
);

399 
	}
}

403 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_›t_q15
(

404 
q15_t
 * 
pSrcA
,

405 
uöt32_t
 
§cALí
,

406 
q15_t
 * 
pSrcB
,

407 
uöt32_t
 
§cBLí
,

408 
q15_t
 * 
pD°
,

409 
uöt32_t
 
fú°Index
,

410 
uöt32_t
 
numPoöts
,

411 
q15_t
 * 
pS¸©ch1
,

412 
q15_t
 * 
pS¸©ch2
)

415 
q15_t
 *
pOut
 = 
pD°
;

416 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

417 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

418 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

419 
q15_t
 *
pIn1
;

420 
q15_t
 *
pIn2
;

421 
q15_t
 *
px
;

422 
q15_t
 *
py
;

423 
uöt32_t
 
j
, 
k
, 
blkC¡
;

424 
¨m_°©us
 
°©us
;

425 
uöt32_t
 
èpC¡
;

426 
q15_t
 
x10
, 
x11
, 
x20
, 
x21
;

427 
q15_t
 
y10
, 
y11
;

431 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

434 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

442 if(
§cALí
 >
§cBLí
)

445 
pIn1
 = 
pSrcA
;

448 
pIn2
 = 
pSrcB
;

453 
pIn1
 = 
pSrcB
;

456 
pIn2
 = 
pSrcA
;

459 
j
 = 
§cBLí
;

460 
§cBLí
 = 
§cALí
;

461 
§cALí
 = 
j
;

465 
py
 = 
pS¸©ch2
;

468 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

471 
px
 = 
pIn2
;

474 
k
 = 
§cBLí
 >> 2u;

478 
k
 > 0u)

481 *
pS¸2
-- = *
px
++;

482 *
pS¸2
-- = *
px
++;

483 *
pS¸2
-- = *
px
++;

484 *
pS¸2
-- = *
px
++;

487 
k
--;

492 
k
 = 
§cBLí
 % 0x4u;

494 
k
 > 0u)

497 *
pS¸2
-- = *
px
++;

500 
k
--;

504 
pS¸1
 = 
pS¸©ch1
;

507 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

510 
pS¸1
 +(
§cBLí
 - 1u);

516 
k
 = 
§cALí
 >> 2u;

520 
k
 > 0u)

523 *
pS¸1
++ = *
pIn1
++;

524 *
pS¸1
++ = *
pIn1
++;

525 *
pS¸1
++ = *
pIn1
++;

526 *
pS¸1
++ = *
pIn1
++;

529 
k
--;

534 
k
 = 
§cALí
 % 0x4u;

536 
k
 > 0u)

539 *
pS¸1
++ = *
pIn1
++;

542 
k
--;

547 
k
 = (
§cBLí
 - 1u) >> 2u;

551 
k
 > 0u)

554 *
pS¸1
++ = 0;

555 *
pS¸1
++ = 0;

556 *
pS¸1
++ = 0;

557 *
pS¸1
++ = 0;

560 
k
--;

565 
k
 = (
§cBLí
 - 1u) % 0x4u;

567 
k
 > 0u)

570 *
pS¸1
++ = 0;

573 
k
--;

578 
pIn2
 = 
py
;

580 
pS¸©ch1
 +
fú°Index
;

582 
pOut
 = 
pD°
 + 
fú°Index
;

585 
blkC¡
 = (
numPoöts
) >> 2;

587 
blkC¡
 > 0)

590 
pS¸1
 = 
pS¸©ch1
;

593 
acc0
 = 0;

594 
acc1
 = 0;

595 
acc2
 = 0;

596 
acc3
 = 0;

599 
x10
 = *
pS¸1
++;

600 
x11
 = *
pS¸1
++;

603 
x20
 = *
pS¸1
++;

604 
x21
 = *
pS¸1
++;

606 
èpC¡
 = (
§cBLí
) >> 2u;

608 
èpC¡
 > 0u)

612 
y10
 = *
pIn2
;

613 
y11
 = *(
pIn2
 + 1u);

616 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

617 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

618 
acc2
 +(
q31_t
Ë
x20
 *
y10
;

619 
acc2
 +(
q31_t
Ë
x21
 *
y11
;

622 
acc1
 +(
q31_t
Ë
x11
 *
y10
;

623 
acc1
 +(
q31_t
Ë
x20
 *
y11
;

626 
x10
 = *
pS¸1
;

627 
x11
 = *(
pS¸1
 + 1u);

630 
acc3
 +(
q31_t
Ë
x21
 *
y10
;

631 
acc3
 +(
q31_t
Ë
x10
 *
y11
;

634 
y10
 = *(
pIn2
 + 2u);

635 
y11
 = *(
pIn2
 + 3u);

638 
acc0
 +(
q31_t
Ë
x20
 *
y10
;

639 
acc0
 +(
q31_t
Ë
x21
 *
y11
;

640 
acc2
 +(
q31_t
Ë
x10
 *
y10
;

641 
acc2
 +(
q31_t
Ë
x11
 *
y11
;

642 
acc1
 +(
q31_t
Ë
x21
 *
y10
;

643 
acc1
 +(
q31_t
Ë
x10
 *
y11
;

646 
x20
 = *(
pS¸1
 + 2);

647 
x21
 = *(
pS¸1
 + 3);

650 
acc3
 +(
q31_t
Ë
x11
 *
y10
;

651 
acc3
 +(
q31_t
Ë
x20
 *
y11
;

654 
pIn2
 += 4u;

655 
pS¸1
 += 4u;

658 
èpC¡
--;

662 
pS¸1
 -= 4u;

665 
èpC¡
 = (
§cBLí
) & 3u;

667 
èpC¡
 > 0u)

670 
acc0
 +(*
pS¸1
++ * *
pIn2
);

671 
acc1
 +(*
pS¸1
++ * *
pIn2
);

672 
acc2
 +(*
pS¸1
++ * *
pIn2
);

673 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

675 
pS¸1
 -= 3u;

678 
èpC¡
--;

681 
blkC¡
--;

685 *
pOut
++ = 
	`__SSAT
((
acc0
 >> 15), 16);

686 *
pOut
++ = 
	`__SSAT
((
acc1
 >> 15), 16);

687 *
pOut
++ = 
	`__SSAT
((
acc2
 >> 15), 16);

688 *
pOut
++ = 
	`__SSAT
((
acc3
 >> 15), 16);

691 
pIn2
 = 
py
;

693 
pS¸©ch1
 += 4u;

698 
blkC¡
 = 
numPoöts
 & 0x3;

701 
blkC¡
 > 0)

704 
pS¸1
 = 
pS¸©ch1
;

707 
acc0
 = 0;

709 
èpC¡
 = (
§cBLí
) >> 1u;

711 
èpC¡
 > 0u)

715 
x10
 = *
pS¸1
++;

716 
x11
 = *
pS¸1
++;

719 
y10
 = *
pIn2
++;

720 
y11
 = *
pIn2
++;

723 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

724 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

727 
èpC¡
--;

730 
èpC¡
 = (
§cBLí
) & 1u;

733 
èpC¡
 > 0u)

737 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

740 
èpC¡
--;

743 
blkC¡
--;

746 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

749 
pIn2
 = 
py
;

751 
pS¸©ch1
 += 1u;

756 
°©us
 = 
ARM_MATH_SUCCESS
;

761  (
°©us
);

762 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q15.c

41 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_q15
(

68 
q15_t
 * 
pSrcA
,

69 
uöt32_t
 
§cALí
,

70 
q15_t
 * 
pSrcB
,

71 
uöt32_t
 
§cBLí
,

72 
q15_t
 * 
pD°
,

73 
uöt32_t
 
fú°Index
,

74 
uöt32_t
 
numPoöts
)

76 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


78 
q15_t
 *
pIn1
;

79 
q15_t
 *
pIn2
;

80 
q15_t
 *
pOut
 = 
pD°
;

81 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

82 
q15_t
 *
px
;

83 
q15_t
 *
py
;

84 
q15_t
 *
pSrc1
, *
pSrc2
;

85 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

86 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

87 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

88 
¨m_°©us
 
°©us
;

91 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

94 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

102 if(
§cALí
 >=
§cBLí
)

105 
pIn1
 = 
pSrcA
;

108 
pIn2
 = 
pSrcB
;

113 
pIn1
 = 
pSrcB
;

116 
pIn2
 = 
pSrcA
;

119 
j
 = 
§cBLí
;

120 
§cBLí
 = 
§cALí
;

121 
§cALí
 = 
j
;

126 
check
 = 
fú°Index
 + 
numPoöts
;

127 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

128 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

129 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

130 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

131 (
öt32_t
Ë
numPoöts
) : 0;

132 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

133 (
öt32_t
Ë
fú°Index
);

134 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

147 
pOut
 = 
pD°
 + 
fú°Index
;

163 
cou¡
 = 1u + 
fú°Index
;

166 
px
 = 
pIn1
;

169 
pSrc2
 = 
pIn2
 + 
fú°Index
;

170 
py
 = 
pSrc2
;

181 (
cou¡
 < 4uË&& (
blockSize1
 > 0))

184 
sum
 = 0;

188 
k
 = 
cou¡
;

190 
k
 > 0u)

193 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

196 
k
--;

200 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

203 
py
 = ++
pSrc2
;

204 
px
 = 
pIn1
;

207 
cou¡
++;

210 
blockSize1
--;

217 
py
 =Öy - 1;

219 
blockSize1
 > 0)

222 
sum
 = 0;

225 
k
 = 
cou¡
 >> 2u;

229 
k
 > 0u)

233 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

235 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

238 
k
--;

243 
py
 =Öy + 1u;

247 
k
 = 
cou¡
 % 0x4u;

249 
k
 > 0u)

252 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

255 
k
--;

259 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

262 
py
 = ++
pSrc2
 - 1u;

263 
px
 = 
pIn1
;

266 
cou¡
++;

269 
blockSize1
--;

283 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

285 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

289 
px
 = 
pIn1
;

293 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

294 
py
 = 
pSrc2
;

297 
cou¡
 = 0u;

307 if(
§cBLí
 >= 4u)

310 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

312 
blkC¡
 > 0u)

314 
py
 =Öy - 1u;

317 
acc0
 = 0;

318 
acc1
 = 0;

319 
acc2
 = 0;

320 
acc3
 = 0;

324 
x0
 = *
	`__SIMD32
(
px
);

326 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

327 
px
+= 2u;

331 
k
 = 
§cBLí
 >> 2u;

339 
c0
 = *
	`__SIMD32
(
py
)--;

342 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

345 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

348 
x2
 = *
	`__SIMD32
(
px
);

351 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

354 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

357 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

360 
c0
 = *
	`__SIMD32
(
py
)--;

363 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

366 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

369 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

372 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

373 
px
 += 4u;

376 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

379 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

381 } --
k
);

388 
k
 = 
§cBLí
 % 0x4u;

390 if(
k
 == 1u)

393 
c0
 = *(
py
+1);

394 #ifde‡ 
ARM_MATH_BIG_ENDIAN


396 
c0
 = c0 << 16u;

400 
c0
 = c0 & 0x0000FFFF;

405 
x3
 = *
	`__SIMD32
(
px
);

406 
px
++;

409 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

410 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

411 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

412 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

415 if(
k
 == 2u)

418 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

421 
x3
 = *
	`__SIMD32
(
px
);

424 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

425 
px
 += 2u;

428 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

429 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

430 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

431 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

434 if(
k
 == 3u)

437 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

440 
x3
 = *
	`__SIMD32
(
px
);

443 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

446 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

447 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

448 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

449 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

451 
c0
 = *(
py
-1);

452 #ifde‡ 
ARM_MATH_BIG_ENDIAN


454 
c0
 = c0 << 16u;

457 
c0
 = c0 & 0x0000FFFF;

461 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

462 
px
 += 3u;

465 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

466 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

467 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

468 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

472 #i‚de‡
ARM_MATH_BIG_ENDIAN


474 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc0
 >> 15, 
acc1
 >> 15, 16);

475 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc2
 >> 15, 
acc3
 >> 15, 16);

479 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc1
 >> 15, 
acc0
 >> 15, 16);

480 *
	`__SIMD32
(
pOut
)++ = 
	`__PKHBT
(
acc3
 >> 15, 
acc2
 >> 15, 16);

485 
cou¡
 += 4u;

488 
px
 = 
pIn1
 + 
cou¡
;

489 
py
 = 
pSrc2
;

492 
blkC¡
--;

497 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

499 
blkC¡
 > 0u)

502 
sum
 = 0;

505 
k
 = 
§cBLí
 >> 2u;

509 
k
 > 0u)

512 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

513 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

514 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

515 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

518 
k
--;

523 
k
 = 
§cBLí
 % 0x4u;

525 
k
 > 0u)

528 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

531 
k
--;

535 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

538 
cou¡
++;

541 
px
 = 
pIn1
 + 
cou¡
;

542 
py
 = 
pSrc2
;

545 
blkC¡
--;

552 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

554 
blkC¡
 > 0u)

557 
sum
 = 0;

560 
k
 = 
§cBLí
;

562 
k
 > 0u)

565 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

568 
k
--;

572 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

575 
cou¡
++;

578 
px
 = 
pIn1
 + 
cou¡
;

579 
py
 = 
pSrc2
;

582 
blkC¡
--;

600 
cou¡
 = 
§cBLí
 - 1u;

603 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

604 
px
 = 
pSrc1
;

607 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

608 
pIn2
 = 
pSrc2
 - 1u;

609 
py
 = 
pIn2
;

620 
j
 = 
cou¡
 >> 2u;

622 (
j
 > 0uË&& (
blockSize3
 > 0))

625 
sum
 = 0;

628 
k
 = 
cou¡
 >> 2u;

632 
k
 > 0u)

636 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

639 
sum
 = 
	`__SMLADX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

642 
k
--;

647 
py
 =Öy + 1u;

651 
k
 = 
cou¡
 % 0x4u;

653 
k
 > 0u)

656 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

659 
k
--;

663 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

666 
px
 = ++
pSrc1
;

667 
py
 = 
pIn2
;

670 
cou¡
--;

673 
blockSize3
--;

675 
j
--;

681 
py
 =Öy + 1u;

683 
blockSize3
 > 0)

686 
sum
 = 0;

689 
k
 = 
cou¡
;

691 
k
 > 0u)

695 
sum
 = 
	`__SMLAD
(*
px
++, *
py
--, sum);

698 
k
--;

702 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

705 
px
 = ++
pSrc1
;

706 
py
 = 
pSrc2
;

709 
cou¡
--;

712 
blockSize3
--;

716 
°©us
 = 
ARM_MATH_SUCCESS
;

720  (
°©us
);

724 
q15_t
 *
pIn1
;

725 
q15_t
 *
pIn2
;

726 
q15_t
 *
pOut
 = 
pD°
;

727 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

728 
q15_t
 *
px
;

729 
q15_t
 *
py
;

730 
q15_t
 *
pSrc1
, *
pSrc2
;

731 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

732 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

733 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

734 
¨m_°©us
 
°©us
;

735 
q15_t
 
a
, 
b
;

738 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

741 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

749 if(
§cALí
 >=
§cBLí
)

752 
pIn1
 = 
pSrcA
;

755 
pIn2
 = 
pSrcB
;

760 
pIn1
 = 
pSrcB
;

763 
pIn2
 = 
pSrcA
;

766 
j
 = 
§cBLí
;

767 
§cBLí
 = 
§cALí
;

768 
§cALí
 = 
j
;

773 
check
 = 
fú°Index
 + 
numPoöts
;

774 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

775 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

776 
blockSize1
 = ((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
;

777 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

778 (
öt32_t
Ë
numPoöts
) : 0;

779 
blockSize2
 = ((
öt32_t
Ë
check
 - 
blockSize3
) -

780 (
blockSize1
 + (
öt32_t
Ë
fú°Index
);

781 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

794 
pOut
 = 
pD°
 + 
fú°Index
;

810 
cou¡
 = 1u + 
fú°Index
;

813 
px
 = 
pIn1
;

816 
pSrc2
 = 
pIn2
 + 
fú°Index
;

817 
py
 = 
pSrc2
;

828 (
cou¡
 < 4uË&& (
blockSize1
 > 0))

831 
sum
 = 0;

835 
k
 = 
cou¡
;

837 
k
 > 0u)

840 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

843 
k
--;

847 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

850 
py
 = ++
pSrc2
;

851 
px
 = 
pIn1
;

854 
cou¡
++;

857 
blockSize1
--;

864 
py
 =Öy - 1;

866 
blockSize1
 > 0)

869 
sum
 = 0;

872 
k
 = 
cou¡
 >> 2u;

876 
py
++;

878 
k
 > 0u)

881 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

882 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

883 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

884 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

887 
k
--;

892 
k
 = 
cou¡
 % 0x4u;

894 
k
 > 0u)

897 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

900 
k
--;

904 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

907 
py
 = ++
pSrc2
 - 1u;

908 
px
 = 
pIn1
;

911 
cou¡
++;

914 
blockSize1
--;

928 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

930 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

934 
px
 = 
pIn1
;

938 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

939 
py
 = 
pSrc2
;

942 
cou¡
 = 0u;

952 if(
§cBLí
 >= 4u)

955 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

957 
blkC¡
 > 0u)

959 
py
 =Öy - 1u;

962 
acc0
 = 0;

963 
acc1
 = 0;

964 
acc2
 = 0;

965 
acc3
 = 0;

968 
a
 = *
px
++;

969 
b
 = *
px
++;

971 #i‚de‡
ARM_MATH_BIG_ENDIAN


973 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

974 
a
 = *
px
;

975 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

979 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

980 
a
 = *
px
;

981 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

986 
k
 = 
§cBLí
 >> 2u;

994 
a
 = *
py
;

995 
b
 = *(
py
+1);

996 
py
 -= 2;

998 #i‚de‡
ARM_MATH_BIG_ENDIAN


1000 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1004 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1009 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1012 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1014 
a
 = *
px
;

1015 
b
 = *(
px
 + 1);

1017 #i‚de‡
ARM_MATH_BIG_ENDIAN


1019 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1020 
a
 = *(
px
 + 2);

1021 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1025 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1026 
a
 = *(
px
 + 2);

1027 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1032 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1035 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1038 
a
 = *
py
;

1039 
b
 = *(
py
+1);

1040 
py
 -= 2;

1042 #i‚de‡
ARM_MATH_BIG_ENDIAN


1044 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1048 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1053 
acc0
 = 
	`__SMLADX
(
x2
, 
c0
,ácc0);

1056 
acc1
 = 
	`__SMLADX
(
x3
, 
c0
,ácc1);

1059 
a
 = *(
px
 + 2);

1060 
b
 = *(
px
 + 3);

1062 #i‚de‡
ARM_MATH_BIG_ENDIAN


1064 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1065 
a
 = *(
px
 + 4);

1066 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

1070 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1071 
a
 = *(
px
 + 4);

1072 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

1076 
px
 += 4u;

1079 
acc2
 = 
	`__SMLADX
(
x0
, 
c0
,ácc2);

1082 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

1084 } --
k
);

1091 
k
 = 
§cBLí
 % 0x4u;

1093 if(
k
 == 1u)

1096 
c0
 = *(
py
+1);

1098 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1100 
c0
 = c0 << 16u;

1104 
c0
 = c0 & 0x0000FFFF;

1109 
a
 = *
px
;

1110 
b
 = *(
px
+1);

1111 
px
++;

1113 #i‚de‡
ARM_MATH_BIG_ENDIAN


1115 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1119 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1125 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1126 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1127 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

1128 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1131 if(
k
 == 2u)

1134 
a
 = *
py
;

1135 
b
 = *(
py
+1);

1137 #i‚de‡
ARM_MATH_BIG_ENDIAN


1139 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1143 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1148 
a
 = *
px
;

1149 
b
 = *(
px
 + 1);

1151 #i‚de‡
ARM_MATH_BIG_ENDIAN


1153 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1154 
a
 = *(
px
 + 2);

1155 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1159 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1160 
a
 = *(
px
 + 2);

1161 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1164 
px
 += 2u;

1167 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1168 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1169 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1170 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1173 if(
k
 == 3u)

1176 
a
 = *
py
;

1177 
b
 = *(
py
+1);

1179 #i‚de‡
ARM_MATH_BIG_ENDIAN


1181 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1185 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1190 
a
 = *
px
;

1191 
b
 = *(
px
 + 1);

1193 #i‚de‡
ARM_MATH_BIG_ENDIAN


1195 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1196 
a
 = *(
px
 + 2);

1197 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1201 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1202 
a
 = *(
px
 + 2);

1203 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1208 
acc0
 = 
	`__SMLADX
(
x0
, 
c0
,ácc0);

1209 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

1210 
acc2
 = 
	`__SMLADX
(
x3
, 
c0
,ácc2);

1211 
acc3
 = 
	`__SMLADX
(
x2
, 
c0
,ácc3);

1214 
c0
 = *(
py
-1);

1215 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1217 
c0
 = c0 << 16u;

1220 
c0
 = c0 & 0x0000FFFF;

1224 
a
 = *(
px
+2);

1225 
b
 = *(
px
+3);

1227 #i‚de‡
ARM_MATH_BIG_ENDIAN


1229 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1233 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);;

1237 
px
 += 3u;

1240 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

1241 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

1242 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1243 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1247 *
pOut
++ = (
q15_t
)(
acc0
 >> 15);

1248 *
pOut
++ = (
q15_t
)(
acc1
 >> 15);

1249 *
pOut
++ = (
q15_t
)(
acc2
 >> 15);

1250 *
pOut
++ = (
q15_t
)(
acc3
 >> 15);

1253 
cou¡
 += 4u;

1256 
px
 = 
pIn1
 + 
cou¡
;

1257 
py
 = 
pSrc2
;

1260 
blkC¡
--;

1265 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

1267 
blkC¡
 > 0u)

1270 
sum
 = 0;

1273 
k
 = 
§cBLí
 >> 2u;

1277 
k
 > 0u)

1280 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1281 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1282 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1283 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1286 
k
--;

1291 
k
 = 
§cBLí
 % 0x4u;

1293 
k
 > 0u)

1296 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1299 
k
--;

1303 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1306 
cou¡
++;

1309 
px
 = 
pIn1
 + 
cou¡
;

1310 
py
 = 
pSrc2
;

1313 
blkC¡
--;

1320 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

1322 
blkC¡
 > 0u)

1325 
sum
 = 0;

1328 
k
 = 
§cBLí
;

1330 
k
 > 0u)

1333 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1336 
k
--;

1340 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1343 
cou¡
++;

1346 
px
 = 
pIn1
 + 
cou¡
;

1347 
py
 = 
pSrc2
;

1350 
blkC¡
--;

1368 
cou¡
 = 
§cBLí
 - 1u;

1371 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

1372 
px
 = 
pSrc1
;

1375 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

1376 
pIn2
 = 
pSrc2
 - 1u;

1377 
py
 = 
pIn2
;

1388 
j
 = 
cou¡
 >> 2u;

1390 (
j
 > 0uË&& (
blockSize3
 > 0))

1393 
sum
 = 0;

1396 
k
 = 
cou¡
 >> 2u;

1400 
py
++;

1402 
k
 > 0u)

1405 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1406 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1407 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1408 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1410 
k
--;

1416 
k
 = 
cou¡
 % 0x4u;

1418 
k
 > 0u)

1421 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1424 
k
--;

1428 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1431 
px
 = ++
pSrc1
;

1432 
py
 = 
pIn2
;

1435 
cou¡
--;

1438 
blockSize3
--;

1440 
j
--;

1446 
py
 =Öy + 1u;

1448 
blockSize3
 > 0)

1451 
sum
 = 0;

1454 
k
 = 
cou¡
;

1456 
k
 > 0u)

1460 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

1463 
k
--;

1467 *
pOut
++ = (
q15_t
Ë(
sum
 >> 15);

1470 
px
 = ++
pSrc1
;

1471 
py
 = 
pSrc2
;

1474 
cou¡
--;

1477 
blockSize3
--;

1481 
°©us
 = 
ARM_MATH_SUCCESS
;

1485  (
°©us
);

1488 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q31.c

41 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_c⁄v_∑πül_Á°_q31
(

68 
q31_t
 * 
pSrcA
,

69 
uöt32_t
 
§cALí
,

70 
q31_t
 * 
pSrcB
,

71 
uöt32_t
 
§cBLí
,

72 
q31_t
 * 
pD°
,

73 
uöt32_t
 
fú°Index
,

74 
uöt32_t
 
numPoöts
)

76 
q31_t
 *
pIn1
;

77 
q31_t
 *
pIn2
;

78 
q31_t
 *
pOut
 = 
pD°
;

79 
q31_t
 *
px
;

80 
q31_t
 *
py
;

81 
q31_t
 *
pSrc1
, *
pSrc2
;

82 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

83 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

84 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

85 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

86 
¨m_°©us
 
°©us
;

90 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

93 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

101 if(
§cALí
 >
§cBLí
)

104 
pIn1
 = 
pSrcA
;

107 
pIn2
 = 
pSrcB
;

112 
pIn1
 = 
pSrcB
;

115 
pIn2
 = 
pSrcA
;

118 
j
 = 
§cBLí
;

119 
§cBLí
 = 
§cALí
;

120 
§cALí
 = 
j
;

125 
check
 = 
fú°Index
 + 
numPoöts
;

126 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

127 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

128 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

129 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

130 (
öt32_t
Ë
numPoöts
) : 0;

131 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

132 (
öt32_t
Ë
fú°Index
);

133 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

146 
pOut
 = 
pD°
 + 
fú°Index
;

162 
cou¡
 = 1u + 
fú°Index
;

165 
px
 = 
pIn1
;

168 
pSrc2
 = 
pIn2
 + 
fú°Index
;

169 
py
 = 
pSrc2
;

176 
blockSize1
 > 0)

179 
sum
 = 0;

182 
k
 = 
cou¡
 >> 2u;

186 
k
 > 0u)

189 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

190 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

193 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

194 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

197 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

198 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

201 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

202 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

205 
k
--;

210 
k
 = 
cou¡
 % 0x4u;

212 
k
 > 0u)

215 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

216 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

219 
k
--;

223 *
pOut
++ = 
sum
 << 1;

226 
py
 = ++
pSrc2
;

227 
px
 = 
pIn1
;

230 
cou¡
++;

233 
blockSize1
--;

247 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

249 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

253 
px
 = 
pIn1
;

257 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

258 
py
 = 
pSrc2
;

261 
cou¡
 = 0u;

270 if(
§cBLí
 >= 4u)

273 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

275 
blkC¡
 > 0u)

278 
acc0
 = 0;

279 
acc1
 = 0;

280 
acc2
 = 0;

281 
acc3
 = 0;

284 
x0
 = *(
px
++);

285 
x1
 = *(
px
++);

286 
x2
 = *(
px
++);

289 
k
 = 
§cBLí
 >> 2u;

296 
c0
 = *(
py
--);

299 
x3
 = *(
px
++);

303 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

306 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

309 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

312 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

315 
c0
 = *(
py
--);

318 
x0
 = *(
px
++);

322 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

324 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

326 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

328 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

331 
c0
 = *(
py
--);

334 
x1
 = *(
px
++);

338 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

340 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

342 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

344 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

347 
c0
 = *(
py
--);

350 
x2
 = *(
px
++);

354 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

356 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

358 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

360 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

363 } --
k
);

367 
k
 = 
§cBLí
 % 0x4u;

369 
k
 > 0u)

372 
c0
 = *(
py
--);

375 
x3
 = *(
px
++);

379 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

381 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

383 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

385 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

388 
x0
 = 
x1
;

389 
x1
 = 
x2
;

390 
x2
 = 
x3
;

393 
k
--;

397 *
pOut
++ = (
q31_t
Ë(
acc0
 << 1);

398 *
pOut
++ = (
q31_t
Ë(
acc1
 << 1);

399 *
pOut
++ = (
q31_t
Ë(
acc2
 << 1);

400 *
pOut
++ = (
q31_t
Ë(
acc3
 << 1);

403 
cou¡
 += 4u;

406 
px
 = 
pIn1
 + 
cou¡
;

407 
py
 = 
pSrc2
;

410 
blkC¡
--;

415 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

417 
blkC¡
 > 0u)

420 
sum
 = 0;

423 
k
 = 
§cBLí
 >> 2u;

427 
k
 > 0u)

430 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

431 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

432 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

433 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

434 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

435 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

436 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

437 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

440 
k
--;

445 
k
 = 
§cBLí
 % 0x4u;

447 
k
 > 0u)

450 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

451 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

454 
k
--;

458 *
pOut
++ = 
sum
 << 1;

461 
cou¡
++;

464 
px
 = 
pIn1
 + 
cou¡
;

465 
py
 = 
pSrc2
;

468 
blkC¡
--;

475 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

477 
blkC¡
 > 0u)

480 
sum
 = 0;

483 
k
 = 
§cBLí
;

485 
k
 > 0u)

488 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

489 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

492 
k
--;

496 *
pOut
++ = 
sum
 << 1;

499 
cou¡
++;

502 
px
 = 
pIn1
 + 
cou¡
;

503 
py
 = 
pSrc2
;

506 
blkC¡
--;

524 
cou¡
 = 
§cBLí
 - 1u;

527 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

528 
px
 = 
pSrc1
;

531 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

532 
py
 = 
pSrc2
;

538 
blockSize3
 > 0)

541 
sum
 = 0;

544 
k
 = 
cou¡
 >> 2u;

548 
k
 > 0u)

551 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

552 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

555 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

556 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

559 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

560 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

563 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

564 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

567 
k
--;

572 
k
 = 
cou¡
 % 0x4u;

574 
k
 > 0u)

578 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

579 ((
q63_t
Ë* 
px
++ * (*
py
--))) >> 32);

582 
k
--;

586 *
pOut
++ = 
sum
 << 1;

589 
px
 = ++
pSrc1
;

590 
py
 = 
pSrc2
;

593 
cou¡
--;

596 
blockSize3
--;

601 
°©us
 = 
ARM_MATH_SUCCESS
;

605  (
°©us
);

607 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q15.c

41 
	~"¨m_m©h.h
"

74 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


76 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q15
(

77 
q15_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q15_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q15_t
 * 
pD°
,

82 
uöt32_t
 
fú°Index
,

83 
uöt32_t
 
numPoöts
,

84 
q15_t
 * 
pS¸©ch1
,

85 
q15_t
 * 
pS¸©ch2
)

88 
q15_t
 *
pOut
 = 
pD°
;

89 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

90 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

91 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

92 
q31_t
 
x1
, 
x2
, 
x3
;

93 
q31_t
 
y1
, 
y2
;

94 
q15_t
 *
pIn1
;

95 
q15_t
 *
pIn2
;

96 
q15_t
 *
px
;

97 
q15_t
 *
py
;

98 
uöt32_t
 
j
, 
k
, 
blkC¡
;

99 
¨m_°©us
 
°©us
;

100 
uöt32_t
 
èpC¡
;

103 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

106 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

114 if(
§cALí
 >
§cBLí
)

117 
pIn1
 = 
pSrcA
;

120 
pIn2
 = 
pSrcB
;

125 
pIn1
 = 
pSrcB
;

128 
pIn2
 = 
pSrcA
;

131 
j
 = 
§cBLí
;

132 
§cBLí
 = 
§cALí
;

133 
§cALí
 = 
j
;

137 
py
 = 
pS¸©ch2
;

140 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

143 
px
 = 
pIn2
;

146 
k
 = 
§cBLí
 >> 2u;

150 
k
 > 0u)

153 *
pS¸2
-- = *
px
++;

154 *
pS¸2
-- = *
px
++;

155 *
pS¸2
-- = *
px
++;

156 *
pS¸2
-- = *
px
++;

159 
k
--;

164 
k
 = 
§cBLí
 % 0x4u;

166 
k
 > 0u)

169 *
pS¸2
-- = *
px
++;

172 
k
--;

176 
pS¸1
 = 
pS¸©ch1
;

179 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

182 
pS¸1
 +(
§cBLí
 - 1u);

187 
	`¨m_c›y_q15
(
pIn1
, 
pS¸1
, 
§cALí
);

190 
pS¸1
 +
§cALí
;

193 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

196 
pS¸1
 +(
§cBLí
 - 1u);

199 
pIn2
 = 
py
;

201 
pS¸©ch1
 +
fú°Index
;

203 
pOut
 = 
pD°
 + 
fú°Index
;

206 
blkC¡
 = (
numPoöts
) >> 2;

208 
blkC¡
 > 0)

211 
pS¸1
 = 
pS¸©ch1
;

214 
acc0
 = 0;

215 
acc1
 = 0;

216 
acc2
 = 0;

217 
acc3
 = 0;

220 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

223 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

225 
èpC¡
 = (
§cBLí
) >> 2u;

227 
èpC¡
 > 0u)

231 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

232 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

235 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

236 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

239 #i‚de‡
ARM_MATH_BIG_ENDIAN


240 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

242 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

246 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

249 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸1
);

252 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

253 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

256 #i‚de‡
ARM_MATH_BIG_ENDIAN


257 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

259 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

262 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

263 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

265 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸1
 + 2u);

267 #i‚de‡
ARM_MATH_BIG_ENDIAN


268 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

270 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

273 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

276 
pIn2
 += 4u;

277 
pS¸1
 += 4u;

281 
èpC¡
--;

285 
pS¸1
 -= 4u;

288 
èpC¡
 = (
§cBLí
) & 3u;

290 
èpC¡
 > 0u)

293 
acc0
 +(*
pS¸1
++ * *
pIn2
);

294 
acc1
 +(*
pS¸1
++ * *
pIn2
);

295 
acc2
 +(*
pS¸1
++ * *
pIn2
);

296 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

298 
pS¸1
 -= 3u;

301 
èpC¡
--;

304 
blkC¡
--;

309 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


311 *
	`__SIMD32
(
pOut
)++ =

312 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

313 *
	`__SIMD32
(
pOut
)++ =

314 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

318 *
	`__SIMD32
(
pOut
)++ =

319 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

320 *
	`__SIMD32
(
pOut
)++ =

321 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

326 
pIn2
 = 
py
;

328 
pS¸©ch1
 += 4u;

333 
blkC¡
 = 
numPoöts
 & 0x3;

336 
blkC¡
 > 0)

339 
pS¸1
 = 
pS¸©ch1
;

342 
acc0
 = 0;

344 
èpC¡
 = (
§cBLí
) >> 1u;

346 
èpC¡
 > 0u)

350 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

353 
y1
 = *
	`__SIMD32
(
pIn2
)++;

355 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

358 
èpC¡
--;

361 
èpC¡
 = (
§cBLí
) & 1u;

364 
èpC¡
 > 0u)

368 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

371 
èpC¡
--;

374 
blkC¡
--;

377 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

380 
pIn2
 = 
py
;

382 
pS¸©ch1
 += 1u;

387 
°©us
 = 
ARM_MATH_SUCCESS
;

392  (
°©us
);

393 
	}
}

397 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q15
(

398 
q15_t
 * 
pSrcA
,

399 
uöt32_t
 
§cALí
,

400 
q15_t
 * 
pSrcB
,

401 
uöt32_t
 
§cBLí
,

402 
q15_t
 * 
pD°
,

403 
uöt32_t
 
fú°Index
,

404 
uöt32_t
 
numPoöts
,

405 
q15_t
 * 
pS¸©ch1
,

406 
q15_t
 * 
pS¸©ch2
)

409 
q15_t
 *
pOut
 = 
pD°
;

410 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

411 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

412 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

413 
q15_t
 *
pIn1
;

414 
q15_t
 *
pIn2
;

415 
q15_t
 *
px
;

416 
q15_t
 *
py
;

417 
uöt32_t
 
j
, 
k
, 
blkC¡
;

418 
¨m_°©us
 
°©us
;

419 
uöt32_t
 
èpC¡
;

420 
q15_t
 
x10
, 
x11
, 
x20
, 
x21
;

421 
q15_t
 
y10
, 
y11
;

425 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

428 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

436 if(
§cALí
 >
§cBLí
)

439 
pIn1
 = 
pSrcA
;

442 
pIn2
 = 
pSrcB
;

447 
pIn1
 = 
pSrcB
;

450 
pIn2
 = 
pSrcA
;

453 
j
 = 
§cBLí
;

454 
§cBLí
 = 
§cALí
;

455 
§cALí
 = 
j
;

459 
py
 = 
pS¸©ch2
;

462 
pS¸2
 = 
pS¸©ch2
 + 
§cBLí
 - 1;

465 
px
 = 
pIn2
;

468 
k
 = 
§cBLí
 >> 2u;

472 
k
 > 0u)

475 *
pS¸2
-- = *
px
++;

476 *
pS¸2
-- = *
px
++;

477 *
pS¸2
-- = *
px
++;

478 *
pS¸2
-- = *
px
++;

481 
k
--;

486 
k
 = 
§cBLí
 % 0x4u;

488 
k
 > 0u)

491 *
pS¸2
-- = *
px
++;

494 
k
--;

498 
pS¸1
 = 
pS¸©ch1
;

501 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

504 
pS¸1
 +(
§cBLí
 - 1u);

510 
k
 = 
§cALí
 >> 2u;

514 
k
 > 0u)

517 *
pS¸1
++ = *
pIn1
++;

518 *
pS¸1
++ = *
pIn1
++;

519 *
pS¸1
++ = *
pIn1
++;

520 *
pS¸1
++ = *
pIn1
++;

523 
k
--;

528 
k
 = 
§cALí
 % 0x4u;

530 
k
 > 0u)

533 *
pS¸1
++ = *
pIn1
++;

536 
k
--;

541 
k
 = (
§cBLí
 - 1u) >> 2u;

545 
k
 > 0u)

548 *
pS¸1
++ = 0;

549 *
pS¸1
++ = 0;

550 *
pS¸1
++ = 0;

551 *
pS¸1
++ = 0;

554 
k
--;

559 
k
 = (
§cBLí
 - 1u) % 0x4u;

561 
k
 > 0u)

564 *
pS¸1
++ = 0;

567 
k
--;

572 
pIn2
 = 
py
;

574 
pS¸©ch1
 +
fú°Index
;

576 
pOut
 = 
pD°
 + 
fú°Index
;

579 
blkC¡
 = (
numPoöts
) >> 2;

581 
blkC¡
 > 0)

584 
pS¸1
 = 
pS¸©ch1
;

587 
acc0
 = 0;

588 
acc1
 = 0;

589 
acc2
 = 0;

590 
acc3
 = 0;

593 
x10
 = *
pS¸1
++;

594 
x11
 = *
pS¸1
++;

597 
x20
 = *
pS¸1
++;

598 
x21
 = *
pS¸1
++;

600 
èpC¡
 = (
§cBLí
) >> 2u;

602 
èpC¡
 > 0u)

606 
y10
 = *
pIn2
;

607 
y11
 = *(
pIn2
 + 1u);

610 
acc0
 +(
q63_t
Ë
x10
 *
y10
;

611 
acc0
 +(
q63_t
Ë
x11
 *
y11
;

612 
acc2
 +(
q63_t
Ë
x20
 *
y10
;

613 
acc2
 +(
q63_t
Ë
x21
 *
y11
;

616 
acc1
 +(
q63_t
Ë
x11
 *
y10
;

617 
acc1
 +(
q63_t
Ë
x20
 *
y11
;

620 
x10
 = *
pS¸1
;

621 
x11
 = *(
pS¸1
 + 1u);

624 
acc3
 +(
q63_t
Ë
x21
 *
y10
;

625 
acc3
 +(
q63_t
Ë
x10
 *
y11
;

628 
y10
 = *(
pIn2
 + 2u);

629 
y11
 = *(
pIn2
 + 3u);

632 
acc0
 +(
q63_t
Ë
x20
 *
y10
;

633 
acc0
 +(
q63_t
Ë
x21
 *
y11
;

634 
acc2
 +(
q63_t
Ë
x10
 *
y10
;

635 
acc2
 +(
q63_t
Ë
x11
 *
y11
;

636 
acc1
 +(
q63_t
Ë
x21
 *
y10
;

637 
acc1
 +(
q63_t
Ë
x10
 *
y11
;

640 
x20
 = *(
pS¸1
 + 2);

641 
x21
 = *(
pS¸1
 + 3);

644 
acc3
 +(
q63_t
Ë
x11
 *
y10
;

645 
acc3
 +(
q63_t
Ë
x20
 *
y11
;

648 
pIn2
 += 4u;

649 
pS¸1
 += 4u;

652 
èpC¡
--;

656 
pS¸1
 -= 4u;

659 
èpC¡
 = (
§cBLí
) & 3u;

661 
èpC¡
 > 0u)

664 
acc0
 +(*
pS¸1
++ * *
pIn2
);

665 
acc1
 +(*
pS¸1
++ * *
pIn2
);

666 
acc2
 +(*
pS¸1
++ * *
pIn2
);

667 
acc3
 +(*
pS¸1
++ * *
pIn2
++);

669 
pS¸1
 -= 3u;

672 
èpC¡
--;

675 
blkC¡
--;

679 *
pOut
++ = 
	`__SSAT
((
acc0
 >> 15), 16);

680 *
pOut
++ = 
	`__SSAT
((
acc1
 >> 15), 16);

681 *
pOut
++ = 
	`__SSAT
((
acc2
 >> 15), 16);

682 *
pOut
++ = 
	`__SSAT
((
acc3
 >> 15), 16);

686 
pIn2
 = 
py
;

688 
pS¸©ch1
 += 4u;

693 
blkC¡
 = 
numPoöts
 & 0x3;

696 
blkC¡
 > 0)

699 
pS¸1
 = 
pS¸©ch1
;

702 
acc0
 = 0;

704 
èpC¡
 = (
§cBLí
) >> 1u;

706 
èpC¡
 > 0u)

710 
x10
 = *
pS¸1
++;

711 
x11
 = *
pS¸1
++;

714 
y10
 = *
pIn2
++;

715 
y11
 = *
pIn2
++;

718 
acc0
 +(
q63_t
Ë
x10
 *
y10
;

719 
acc0
 +(
q63_t
Ë
x11
 *
y11
;

722 
èpC¡
--;

725 
èpC¡
 = (
§cBLí
) & 1u;

728 
èpC¡
 > 0u)

732 
acc0
 +(*
pS¸1
++ * *
pIn2
++);

735 
èpC¡
--;

738 
blkC¡
--;

741 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

745 
pIn2
 = 
py
;

747 
pS¸©ch1
 += 1u;

752 
°©us
 = 
ARM_MATH_SUCCESS
;

757  (
°©us
);

758 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q7.c

41 
	~"¨m_m©h.h
"

74 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


76 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q7
(

77 
q7_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q7_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q7_t
 * 
pD°
,

82 
uöt32_t
 
fú°Index
,

83 
uöt32_t
 
numPoöts
,

84 
q15_t
 * 
pS¸©ch1
,

85 
q15_t
 * 
pS¸©ch2
)

88 
q15_t
 *
pS¸2
, *
pS¸1
;

89 
q15_t
 
x4
;

90 
q7_t
 *
pIn1
, *
pIn2
;

91 
uöt32_t
 
j
, 
k
, 
blkC¡
, 
èpC¡
;

92 
q7_t
 *
px
;

93 
q15_t
 *
py
;

94 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q31_t
 
x1
, 
x2
, 
x3
, 
y1
;

96 
¨m_°©us
 
°©us
;

97 
q7_t
 *
pOut
 = 
pD°
;

98 
q7_t
 
out0
, 
out1
, 
out2
, 
out3
;

101 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

104 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

112 if(
§cALí
 >
§cBLí
)

115 
pIn1
 = 
pSrcA
;

118 
pIn2
 = 
pSrcB
;

123 
pIn1
 = 
pSrcB
;

126 
pIn2
 = 
pSrcA
;

129 
j
 = 
§cBLí
;

130 
§cBLí
 = 
§cALí
;

131 
§cALí
 = 
j
;

135 
pS¸2
 = 
pS¸©ch2
;

138 
px
 = 
pIn2
 + 
§cBLí
 - 1;

141 
k
 = 
§cBLí
 >> 2u;

145 
k
 > 0u)

148 
x4
 = (
q15_t
Ë* 
px
--;

149 *
pS¸2
++ = 
x4
;

150 
x4
 = (
q15_t
Ë* 
px
--;

151 *
pS¸2
++ = 
x4
;

152 
x4
 = (
q15_t
Ë* 
px
--;

153 *
pS¸2
++ = 
x4
;

154 
x4
 = (
q15_t
Ë* 
px
--;

155 *
pS¸2
++ = 
x4
;

158 
k
--;

163 
k
 = 
§cBLí
 % 0x4u;

165 
k
 > 0u)

168 
x4
 = (
q15_t
Ë* 
px
--;

169 *
pS¸2
++ = 
x4
;

172 
k
--;

176 
pS¸1
 = 
pS¸©ch1
;

179 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

182 
pS¸1
 +(
§cBLí
 - 1u);

186 
k
 = 
§cALí
 >> 2u;

190 
k
 > 0u)

193 
x4
 = (
q15_t
Ë* 
pIn1
++;

194 *
pS¸1
++ = 
x4
;

195 
x4
 = (
q15_t
Ë* 
pIn1
++;

196 *
pS¸1
++ = 
x4
;

197 
x4
 = (
q15_t
Ë* 
pIn1
++;

198 *
pS¸1
++ = 
x4
;

199 
x4
 = (
q15_t
Ë* 
pIn1
++;

200 *
pS¸1
++ = 
x4
;

203 
k
--;

208 
k
 = 
§cALí
 % 0x4u;

210 
k
 > 0u)

213 
x4
 = (
q15_t
Ë* 
pIn1
++;

214 *
pS¸1
++ = 
x4
;

217 
k
--;

221 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

224 
pS¸1
 +(
§cBLí
 - 1u);

228 
py
 = 
pS¸©ch2
;

231 
pIn2
 = (
q7_t
 *Ë
py
;

233 
pS¸2
 = 
py
;

235 
pOut
 = 
pD°
 + 
fú°Index
;

237 
pS¸©ch1
 +
fú°Index
;

240 
blkC¡
 = (
numPoöts
) >> 2;

243 
blkC¡
 > 0)

246 
pS¸1
 = 
pS¸©ch1
;

249 
acc0
 = 0;

250 
acc1
 = 0;

251 
acc2
 = 0;

252 
acc3
 = 0;

255 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

258 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

260 
èpC¡
 = (
§cBLí
) >> 2u;

262 
èpC¡
 > 0u)

266 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
);

269 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

270 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

273 #i‚de‡
ARM_MATH_BIG_ENDIAN


274 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

276 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

280 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

283 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

286 #i‚de‡
ARM_MATH_BIG_ENDIAN


287 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

289 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

292 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

295 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
 + 2u);

297 
acc0
 = 
	`__SMLAD
(
x2
, 
y1
,ácc0);

299 
acc2
 = 
	`__SMLAD
(
x1
, 
y1
,ácc2);

301 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

303 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

305 #i‚de‡
ARM_MATH_BIG_ENDIAN


306 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

308 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

311 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

313 
pS¸2
 += 4u;

317 
èpC¡
--;

323 
pS¸1
 -= 4u;

327 
èpC¡
 = (
§cBLí
) & 3u;

329 
èpC¡
 > 0u)

333 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

334 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

335 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

336 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

338 
pS¸1
 -= 3u;

341 
èpC¡
--;

344 
blkC¡
--;

347 
out0
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

348 
out1
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

349 
out2
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

350 
out3
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

352 *
	`__SIMD32
(
pOut
)++ = 
	`__PACKq7
(
out0
, 
out1
, 
out2
, 
out3
);

355 
pS¸2
 = 
py
;

357 
pS¸©ch1
 += 4u;

361 
blkC¡
 = (
numPoöts
) & 0x3;

364 
blkC¡
 > 0)

367 
pS¸1
 = 
pS¸©ch1
;

370 
acc0
 = 0;

372 
èpC¡
 = (
§cBLí
) >> 1u;

374 
èpC¡
 > 0u)

378 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

381 
y1
 = *
	`__SIMD32
(
pS¸2
)++;

383 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

386 
èpC¡
--;

389 
èpC¡
 = (
§cBLí
) & 1u;

392 
èpC¡
 > 0u)

396 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

399 
èpC¡
--;

402 
blkC¡
--;

405 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

408 
pS¸2
 = 
py
;

410 
pS¸©ch1
 += 1u;

415 
°©us
 = 
ARM_MATH_SUCCESS
;

420  (
°©us
);

422 
	}
}

426 
¨m_°©us
 
	$¨m_c⁄v_∑πül_›t_q7
(

427 
q7_t
 * 
pSrcA
,

428 
uöt32_t
 
§cALí
,

429 
q7_t
 * 
pSrcB
,

430 
uöt32_t
 
§cBLí
,

431 
q7_t
 * 
pD°
,

432 
uöt32_t
 
fú°Index
,

433 
uöt32_t
 
numPoöts
,

434 
q15_t
 * 
pS¸©ch1
,

435 
q15_t
 * 
pS¸©ch2
)

438 
q15_t
 *
pS¸2
, *
pS¸1
;

439 
q15_t
 
x4
;

440 
q7_t
 *
pIn1
, *
pIn2
;

441 
uöt32_t
 
j
, 
k
, 
blkC¡
, 
èpC¡
;

442 
q7_t
 *
px
;

443 
q15_t
 *
py
;

444 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

445 
¨m_°©us
 
°©us
;

446 
q7_t
 *
pOut
 = 
pD°
;

447 
q15_t
 
x10
, 
x11
, 
x20
, 
x21
;

448 
q15_t
 
y10
, 
y11
;

451 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

454 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

462 if(
§cALí
 >
§cBLí
)

465 
pIn1
 = 
pSrcA
;

468 
pIn2
 = 
pSrcB
;

473 
pIn1
 = 
pSrcB
;

476 
pIn2
 = 
pSrcA
;

479 
j
 = 
§cBLí
;

480 
§cBLí
 = 
§cALí
;

481 
§cALí
 = 
j
;

485 
pS¸2
 = 
pS¸©ch2
;

488 
px
 = 
pIn2
 + 
§cBLí
 - 1;

491 
k
 = 
§cBLí
 >> 2u;

495 
k
 > 0u)

498 
x4
 = (
q15_t
Ë* 
px
--;

499 *
pS¸2
++ = 
x4
;

500 
x4
 = (
q15_t
Ë* 
px
--;

501 *
pS¸2
++ = 
x4
;

502 
x4
 = (
q15_t
Ë* 
px
--;

503 *
pS¸2
++ = 
x4
;

504 
x4
 = (
q15_t
Ë* 
px
--;

505 *
pS¸2
++ = 
x4
;

508 
k
--;

513 
k
 = 
§cBLí
 % 0x4u;

515 
k
 > 0u)

518 
x4
 = (
q15_t
Ë* 
px
--;

519 *
pS¸2
++ = 
x4
;

522 
k
--;

526 
pS¸1
 = 
pS¸©ch1
;

529 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

532 
pS¸1
 +(
§cBLí
 - 1u);

536 
k
 = 
§cALí
 >> 2u;

540 
k
 > 0u)

543 
x4
 = (
q15_t
Ë* 
pIn1
++;

544 *
pS¸1
++ = 
x4
;

545 
x4
 = (
q15_t
Ë* 
pIn1
++;

546 *
pS¸1
++ = 
x4
;

547 
x4
 = (
q15_t
Ë* 
pIn1
++;

548 *
pS¸1
++ = 
x4
;

549 
x4
 = (
q15_t
Ë* 
pIn1
++;

550 *
pS¸1
++ = 
x4
;

553 
k
--;

558 
k
 = 
§cALí
 % 0x4u;

560 
k
 > 0u)

563 
x4
 = (
q15_t
Ë* 
pIn1
++;

564 *
pS¸1
++ = 
x4
;

567 
k
--;

571 
k
 = (
§cBLí
 - 1u) >> 2u;

575 
k
 > 0u)

578 *
pS¸1
++ = 0;

579 *
pS¸1
++ = 0;

580 *
pS¸1
++ = 0;

581 *
pS¸1
++ = 0;

584 
k
--;

589 
k
 = (
§cBLí
 - 1u) % 0x4u;

591 
k
 > 0u)

594 *
pS¸1
++ = 0;

597 
k
--;

602 
py
 = 
pS¸©ch2
;

605 
pIn2
 = (
q7_t
 *Ë
py
;

607 
pS¸2
 = 
py
;

609 
pOut
 = 
pD°
 + 
fú°Index
;

611 
pS¸©ch1
 +
fú°Index
;

614 
blkC¡
 = (
numPoöts
) >> 2;

617 
blkC¡
 > 0)

620 
pS¸1
 = 
pS¸©ch1
;

623 
acc0
 = 0;

624 
acc1
 = 0;

625 
acc2
 = 0;

626 
acc3
 = 0;

629 
x10
 = *
pS¸1
++;

630 
x11
 = *
pS¸1
++;

633 
x20
 = *
pS¸1
++;

634 
x21
 = *
pS¸1
++;

636 
èpC¡
 = (
§cBLí
) >> 2u;

638 
èpC¡
 > 0u)

642 
y10
 = *
pS¸2
;

643 
y11
 = *(
pS¸2
 + 1u);

646 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

647 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

648 
acc2
 +(
q31_t
Ë
x20
 *
y10
;

649 
acc2
 +(
q31_t
Ë
x21
 *
y11
;

652 
acc1
 +(
q31_t
Ë
x11
 *
y10
;

653 
acc1
 +(
q31_t
Ë
x20
 *
y11
;

656 
x10
 = *
pS¸1
;

657 
x11
 = *(
pS¸1
 + 1u);

660 
acc3
 +(
q31_t
Ë
x21
 *
y10
;

661 
acc3
 +(
q31_t
Ë
x10
 *
y11
;

664 
y10
 = *(
pS¸2
 + 2u);

665 
y11
 = *(
pS¸2
 + 3u);

668 
acc0
 +(
q31_t
Ë
x20
 *
y10
;

669 
acc0
 +(
q31_t
Ë
x21
 *
y11
;

670 
acc2
 +(
q31_t
Ë
x10
 *
y10
;

671 
acc2
 +(
q31_t
Ë
x11
 *
y11
;

672 
acc1
 +(
q31_t
Ë
x21
 *
y10
;

673 
acc1
 +(
q31_t
Ë
x10
 *
y11
;

676 
x20
 = *(
pS¸1
 + 2);

677 
x21
 = *(
pS¸1
 + 3);

680 
acc3
 +(
q31_t
Ë
x11
 *
y10
;

681 
acc3
 +(
q31_t
Ë
x20
 *
y11
;

685 
pS¸1
 += 4u;

686 
pS¸2
 += 4u;

689 
èpC¡
--;

695 
pS¸1
 -= 4u;

699 
èpC¡
 = (
§cBLí
) & 3u;

701 
èpC¡
 > 0u)

705 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

706 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

707 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

708 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

710 
pS¸1
 -= 3u;

713 
èpC¡
--;

716 
blkC¡
--;

719 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

720 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

721 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

722 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

725 
pS¸2
 = 
py
;

727 
pS¸©ch1
 += 4u;

731 
blkC¡
 = (
numPoöts
) & 0x3;

734 
blkC¡
 > 0)

737 
pS¸1
 = 
pS¸©ch1
;

740 
acc0
 = 0;

742 
èpC¡
 = (
§cBLí
) >> 1u;

744 
èpC¡
 > 0u)

748 
x10
 = *
pS¸1
++;

749 
x11
 = *
pS¸1
++;

752 
y10
 = *
pS¸2
++;

753 
y11
 = *
pS¸2
++;

756 
acc0
 +(
q31_t
Ë
x10
 *
y10
;

757 
acc0
 +(
q31_t
Ë
x11
 *
y11
;

760 
èpC¡
--;

763 
èpC¡
 = (
§cBLí
) & 1u;

766 
èpC¡
 > 0u)

770 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

773 
èpC¡
--;

776 
blkC¡
--;

779 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

782 
pS¸2
 = 
py
;

784 
pS¸©ch1
 += 1u;

789 
°©us
 = 
ARM_MATH_SUCCESS
;

793  (
°©us
);

795 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q15.c

41 
	~"¨m_m©h.h
"

71 
¨m_°©us
 
	$¨m_c⁄v_∑πül_q15
(

72 
q15_t
 * 
pSrcA
,

73 
uöt32_t
 
§cALí
,

74 
q15_t
 * 
pSrcB
,

75 
uöt32_t
 
§cBLí
,

76 
q15_t
 * 
pD°
,

77 
uöt32_t
 
fú°Index
,

78 
uöt32_t
 
numPoöts
)

81 #i‡(
	`deföed
(
ARM_MATH_CM4
Ë|| deföed(
ARM_MATH_CM3
)Ë&& !deföed(
UNALIGNED_SUPPORT_DISABLE
)

85 
q15_t
 *
pIn1
;

86 
q15_t
 *
pIn2
;

87 
q15_t
 *
pOut
 = 
pD°
;

88 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

89 
q15_t
 *
px
;

90 
q15_t
 *
py
;

91 
q15_t
 *
pSrc1
, *
pSrc2
;

92 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

93 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

94 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

95 
¨m_°©us
 
°©us
;

98 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

101 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

109 if(
§cALí
 >
§cBLí
)

112 
pIn1
 = 
pSrcA
;

115 
pIn2
 = 
pSrcB
;

120 
pIn1
 = 
pSrcB
;

123 
pIn2
 = 
pSrcA
;

126 
j
 = 
§cBLí
;

127 
§cBLí
 = 
§cALí
;

128 
§cALí
 = 
j
;

133 
check
 = 
fú°Index
 + 
numPoöts
;

134 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

135 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

136 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

137 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

138 (
öt32_t
Ë
numPoöts
) : 0;

139 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

140 (
öt32_t
Ë
fú°Index
);

141 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

154 
pOut
 = 
pD°
 + 
fú°Index
;

170 
cou¡
 = 1u + 
fú°Index
;

173 
px
 = 
pIn1
;

176 
pSrc2
 = 
pIn2
 + 
fú°Index
;

177 
py
 = 
pSrc2
;

188 (
cou¡
 < 4uË&& (
blockSize1
 > 0))

191 
sum
 = 0;

195 
k
 = 
cou¡
;

197 
k
 > 0u)

200 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

203 
k
--;

207 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

210 
py
 = ++
pSrc2
;

211 
px
 = 
pIn1
;

214 
cou¡
++;

217 
blockSize1
--;

224 
py
 =Öy - 1;

226 
blockSize1
 > 0)

229 
sum
 = 0;

232 
k
 = 
cou¡
 >> 2u;

236 
k
 > 0u)

240 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

242 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

245 
k
--;

250 
py
 =Öy + 1u;

254 
k
 = 
cou¡
 % 0x4u;

256 
k
 > 0u)

259 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

262 
k
--;

266 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

269 
py
 = ++
pSrc2
 - 1u;

270 
px
 = 
pIn1
;

273 
cou¡
++;

276 
blockSize1
--;

290 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

292 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

296 
px
 = 
pIn1
;

300 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

301 
py
 = 
pSrc2
;

304 
cou¡
 = 0u;

314 if(
§cBLí
 >= 4u)

317 
blkC¡
 = 
blockSize2
 >> 2u;

319 
blkC¡
 > 0u)

321 
py
 =Öy - 1u;

324 
acc0
 = 0;

325 
acc1
 = 0;

326 
acc2
 = 0;

327 
acc3
 = 0;

331 
x0
 = *
	`__SIMD32
(
px
);

333 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

334 
px
+= 2u;

338 
k
 = 
§cBLí
 >> 2u;

346 
c0
 = *
	`__SIMD32
(
py
)--;

349 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

352 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

355 
x2
 = *
	`__SIMD32
(
px
);

358 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

361 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

364 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

367 
c0
 = *
	`__SIMD32
(
py
)--;

370 
acc0
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc0);

373 
acc1
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc1);

376 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

379 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

380 
px
 += 4u;

383 
acc2
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc2);

386 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

388 } --
k
);

395 
k
 = 
§cBLí
 % 0x4u;

397 if(
k
 == 1u)

400 
c0
 = *(
py
+1);

402 #ifde‡ 
ARM_MATH_BIG_ENDIAN


404 
c0
 = c0 << 16u;

408 
c0
 = c0 & 0x0000FFFF;

413 
x3
 = *
	`__SIMD32
(
px
);

414 
px
++;

417 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

418 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

419 
acc2
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc2);

420 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

423 if(
k
 == 2u)

426 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

429 
x3
 = *
	`__SIMD32
(
px
);

432 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

433 
px
 += 2u;

436 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

437 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

438 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

439 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

442 if(
k
 == 3u)

445 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

448 
x3
 = *
	`__SIMD32
(
px
);

451 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

454 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

455 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

456 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

457 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

459 
c0
 = *(
py
-1);

461 #ifde‡ 
ARM_MATH_BIG_ENDIAN


463 
c0
 = c0 << 16u;

466 
c0
 = c0 & 0x0000FFFF;

470 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

471 
px
 += 3u;

474 
acc0
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc0);

475 
acc1
 = 
	`__SMLALD
(
x2
, 
c0
,ácc1);

476 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

477 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

483 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


485 *
	`__SIMD32
(
pOut
)++ =

486 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

487 *
	`__SIMD32
(
pOut
)++ =

488 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

492 *
	`__SIMD32
(
pOut
)++ =

493 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

494 *
	`__SIMD32
(
pOut
)++ =

495 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

500 
cou¡
 += 4u;

503 
px
 = 
pIn1
 + 
cou¡
;

504 
py
 = 
pSrc2
;

507 
blkC¡
--;

512 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

514 
blkC¡
 > 0u)

517 
sum
 = 0;

520 
k
 = 
§cBLí
 >> 2u;

524 
k
 > 0u)

527 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

528 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

529 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

530 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

533 
k
--;

538 
k
 = 
§cBLí
 % 0x4u;

540 
k
 > 0u)

543 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

546 
k
--;

550 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

553 
cou¡
++;

556 
px
 = 
pIn1
 + 
cou¡
;

557 
py
 = 
pSrc2
;

560 
blkC¡
--;

567 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

569 
blkC¡
 > 0u)

572 
sum
 = 0;

575 
k
 = 
§cBLí
;

577 
k
 > 0u)

580 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

583 
k
--;

587 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

590 
cou¡
++;

593 
px
 = 
pIn1
 + 
cou¡
;

594 
py
 = 
pSrc2
;

597 
blkC¡
--;

615 
cou¡
 = 
§cBLí
 - 1u;

618 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

619 
px
 = 
pSrc1
;

622 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

623 
pIn2
 = 
pSrc2
 - 1u;

624 
py
 = 
pIn2
;

635 
j
 = 
cou¡
 >> 2u;

637 (
j
 > 0uË&& (
blockSize3
 > 0))

640 
sum
 = 0;

643 
k
 = 
cou¡
 >> 2u;

647 
k
 > 0u)

651 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

654 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

657 
k
--;

662 
py
 =Öy + 1u;

666 
k
 = 
cou¡
 % 0x4u;

668 
k
 > 0u)

671 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

674 
k
--;

678 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

681 
px
 = ++
pSrc1
;

682 
py
 = 
pIn2
;

685 
cou¡
--;

688 
blockSize3
--;

690 
j
--;

696 
py
 =Öy + 1u;

698 
blockSize3
 > 0)

701 
sum
 = 0;

704 
k
 = 
cou¡
;

706 
k
 > 0u)

710 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

713 
k
--;

717 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

720 
px
 = ++
pSrc1
;

721 
py
 = 
pSrc2
;

724 
cou¡
--;

727 
blockSize3
--;

731 
°©us
 = 
ARM_MATH_SUCCESS
;

735  (
°©us
);

741 
q15_t
 *
pIn1
 = 
pSrcA
;

742 
q15_t
 *
pIn2
 = 
pSrcB
;

743 
q63_t
 
sum
;

744 
uöt32_t
 
i
, 
j
;

745 
¨m_°©us
 
°©us
;

748 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

751 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

756 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

759 
sum
 = 0;

762 
j
 = 0; j <
i
; j++)

765 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

768 
sum
 +((
q31_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

773 
pD°
[
i
] = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

776 
°©us
 = 
ARM_MATH_SUCCESS
;

778  (
°©us
);

782 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q31.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_c⁄v_∑πül_q31
(

67 
q31_t
 * 
pSrcA
,

68 
uöt32_t
 
§cALí
,

69 
q31_t
 * 
pSrcB
,

70 
uöt32_t
 
§cBLí
,

71 
q31_t
 * 
pD°
,

72 
uöt32_t
 
fú°Index
,

73 
uöt32_t
 
numPoöts
)

77 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 *
pIn1
;

82 
q31_t
 *
pIn2
;

83 
q31_t
 *
pOut
 = 
pD°
;

84 
q31_t
 *
px
;

85 
q31_t
 *
py
;

86 
q31_t
 *
pSrc1
, *
pSrc2
;

87 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
;

88 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

89 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

90 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

91 
¨m_°©us
 
°©us
;

95 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

98 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

106 if(
§cALí
 >
§cBLí
)

109 
pIn1
 = 
pSrcA
;

112 
pIn2
 = 
pSrcB
;

117 
pIn1
 = 
pSrcB
;

120 
pIn2
 = 
pSrcA
;

123 
j
 = 
§cBLí
;

124 
§cBLí
 = 
§cALí
;

125 
§cALí
 = 
j
;

130 
check
 = 
fú°Index
 + 
numPoöts
;

131 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

132 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

133 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

134 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

135 (
öt32_t
Ë
numPoöts
) : 0;

136 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

137 (
öt32_t
Ë
fú°Index
);

138 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

151 
pOut
 = 
pD°
 + 
fú°Index
;

167 
cou¡
 = 1u + 
fú°Index
;

170 
px
 = 
pIn1
;

173 
pSrc2
 = 
pIn2
 + 
fú°Index
;

174 
py
 = 
pSrc2
;

181 
blockSize1
 > 0)

184 
sum
 = 0;

187 
k
 = 
cou¡
 >> 2u;

191 
k
 > 0u)

194 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

196 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

198 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

200 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

203 
k
--;

208 
k
 = 
cou¡
 % 0x4u;

210 
k
 > 0u)

213 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

216 
k
--;

220 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

223 
py
 = ++
pSrc2
;

224 
px
 = 
pIn1
;

227 
cou¡
++;

230 
blockSize1
--;

244 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

246 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

250 
px
 = 
pIn1
;

254 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

255 
py
 = 
pSrc2
;

258 
cou¡
 = 0u;

267 if(
§cBLí
 >= 4u)

271 
blkC¡
 = 
blockSize2
 / 3;

272 
blkC¡
 > 0u)

275 
acc0
 = 0;

276 
acc1
 = 0;

277 
acc2
 = 0;

280 
x0
 = *(
px
++);

281 
x1
 = *(
px
++);

284 
k
 = 
§cBLí
 / 3;

291 
c0
 = *(
py
);

294 
x2
 = *(
px
);

298 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

300 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

302 
acc2
 +(
q63_t
Ë
x2
 *
c0
;

305 
c0
 = *(
py
 - 1u);

308 
x0
 = *(
px
 + 1u);

312 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

314 
acc1
 +(
q63_t
Ë
x2
 *
c0
;

316 
acc2
 +(
q63_t
Ë
x0
 *
c0
;

319 
c0
 = *(
py
 - 2u);

322 
x1
 = *(
px
 + 2u);

326 
acc0
 +(
q63_t
Ë
x2
 *
c0
;

328 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

330 
acc2
 +(
q63_t
Ë
x1
 *
c0
;

333 
px
 += 3u;

335 
py
 -= 3u;

337 } --
k
);

341 
k
 = 
§cBLí
 - (3 * (srcBLen / 3));

343 
k
 > 0u)

346 
c0
 = *(
py
--);

349 
x2
 = *(
px
++);

353 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

355 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

357 
acc2
 +(
q63_t
Ë
x2
 *
c0
;

360 
x0
 = 
x1
;

361 
x1
 = 
x2
;

364 
k
--;

368 *
pOut
++ = (
q31_t
Ë(
acc0
 >> 31);

369 *
pOut
++ = (
q31_t
Ë(
acc1
 >> 31);

370 *
pOut
++ = (
q31_t
Ë(
acc2
 >> 31);

373 
cou¡
 += 3u;

376 
px
 = 
pIn1
 + 
cou¡
;

377 
py
 = 
pSrc2
;

380 
blkC¡
--;

385 
blkC¡
 = 
blockSize2
 - 3 * (blockSize2 / 3);

387 
blkC¡
 > 0u)

390 
sum
 = 0;

393 
k
 = 
§cBLí
 >> 2u;

397 
k
 > 0u)

400 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

401 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

402 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

403 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

406 
k
--;

411 
k
 = 
§cBLí
 % 0x4u;

413 
k
 > 0u)

416 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

419 
k
--;

423 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

426 
cou¡
++;

429 
px
 = 
pIn1
 + 
cou¡
;

430 
py
 = 
pSrc2
;

433 
blkC¡
--;

440 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

442 
blkC¡
 > 0u)

445 
sum
 = 0;

448 
k
 = 
§cBLí
;

450 
k
 > 0u)

453 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

456 
k
--;

460 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

463 
cou¡
++;

466 
px
 = 
pIn1
 + 
cou¡
;

467 
py
 = 
pSrc2
;

470 
blkC¡
--;

488 
cou¡
 = 
§cBLí
 - 1u;

491 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

492 
px
 = 
pSrc1
;

495 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

496 
py
 = 
pSrc2
;

502 
blockSize3
 > 0)

505 
sum
 = 0;

508 
k
 = 
cou¡
 >> 2u;

512 
k
 > 0u)

514 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

515 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

516 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

517 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

520 
k
--;

525 
k
 = 
cou¡
 % 0x4u;

527 
k
 > 0u)

530 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

533 
k
--;

537 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

540 
px
 = ++
pSrc1
;

541 
py
 = 
pSrc2
;

544 
cou¡
--;

547 
blockSize3
--;

552 
°©us
 = 
ARM_MATH_SUCCESS
;

556  (
°©us
);

562 
q31_t
 *
pIn1
 = 
pSrcA
;

563 
q31_t
 *
pIn2
 = 
pSrcB
;

564 
q63_t
 
sum
;

565 
uöt32_t
 
i
, 
j
;

566 
¨m_°©us
 
°©us
;

569 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

572 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

577 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

580 
sum
 = 0;

583 
j
 = 0; j <
i
; j++)

586 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

589 
sum
 +((
q63_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

594 
pD°
[
i
] = (
q31_t
Ë(
sum
 >> 31u);

597 
°©us
 = 
ARM_MATH_SUCCESS
;

599  (
°©us
);

603 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q7.c

41 
	~"¨m_m©h.h
"

68 
¨m_°©us
 
	$¨m_c⁄v_∑πül_q7
(

69 
q7_t
 * 
pSrcA
,

70 
uöt32_t
 
§cALí
,

71 
q7_t
 * 
pSrcB
,

72 
uöt32_t
 
§cBLí
,

73 
q7_t
 * 
pD°
,

74 
uöt32_t
 
fú°Index
,

75 
uöt32_t
 
numPoöts
)

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q7_t
 *
pIn1
;

84 
q7_t
 *
pIn2
;

85 
q7_t
 *
pOut
 = 
pD°
;

86 
q7_t
 *
px
;

87 
q7_t
 *
py
;

88 
q7_t
 *
pSrc1
, *
pSrc2
;

89 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

90 
q31_t
 
öput1
, 
öput2
;

91 
q15_t
 
ö1
, 
ö2
;

92 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
, 
c1
;

93 
uöt32_t
 
j
, 
k
, 
cou¡
, 
check
, 
blkC¡
;

94 
öt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
;

95 
¨m_°©us
 
°©us
;

99 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

102 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

110 if(
§cALí
 >
§cBLí
)

113 
pIn1
 = 
pSrcA
;

116 
pIn2
 = 
pSrcB
;

121 
pIn1
 = 
pSrcB
;

124 
pIn2
 = 
pSrcA
;

127 
j
 = 
§cBLí
;

128 
§cBLí
 = 
§cALí
;

129 
§cALí
 = 
j
;

134 
check
 = 
fú°Index
 + 
numPoöts
;

135 
blockSize3
 = ((
öt32_t
)
check
 > (öt32_t)
§cALí
) ? (int32_t)check - (int32_t)srcALen : 0;

136 
blockSize3
 = ((
öt32_t
)
fú°Index
 > (öt32_t)
§cALí
 - 1) ? blockSize3 - (int32_t)firstIndex + (int32_t)srcALen : blockSize3;

137 
blockSize1
 = (((
öt32_t
Ë
§cBLí
 - 1Ë- (öt32_tË
fú°Index
);

138 
blockSize1
 = (blockSize1 > 0Ë? ((
check
 > (
§cBLí
 - 1u)) ? blockSize1 :

139 (
öt32_t
Ë
numPoöts
) : 0;

140 
blockSize2
 = (
öt32_t
Ë
check
 - ((
blockSize3
 + 
blockSize1
) +

141 (
öt32_t
Ë
fú°Index
);

142 
blockSize2
 = (blockSize2 > 0) ? blockSize2 : 0;

155 
pOut
 = 
pD°
 + 
fú°Index
;

171 
cou¡
 = 1u + 
fú°Index
;

174 
px
 = 
pIn1
;

177 
pSrc2
 = 
pIn2
 + 
fú°Index
;

178 
py
 = 
pSrc2
;

185 
blockSize1
 > 0)

188 
sum
 = 0;

191 
k
 = 
cou¡
 >> 2u;

195 
k
 > 0u)

198 
ö1
 = (
q15_t
Ë* 
px
++;

199 
ö2
 = (
q15_t
Ë* 
px
++;

200 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

203 
ö1
 = (
q15_t
Ë* 
py
--;

204 
ö2
 = (
q15_t
Ë* 
py
--;

205 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

209 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

212 
ö1
 = (
q15_t
Ë* 
px
++;

213 
ö2
 = (
q15_t
Ë* 
px
++;

214 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

217 
ö1
 = (
q15_t
Ë* 
py
--;

218 
ö2
 = (
q15_t
Ë* 
py
--;

219 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

223 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

226 
k
--;

231 
k
 = 
cou¡
 % 0x4u;

233 
k
 > 0u)

236 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

239 
k
--;

243 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

246 
py
 = ++
pSrc2
;

247 
px
 = 
pIn1
;

250 
cou¡
++;

253 
blockSize1
--;

267 if((
öt32_t
)
fú°Index
 - (öt32_t)
§cBLí
 + 1 > 0)

269 
px
 = 
pIn1
 + 
fú°Index
 - 
§cBLí
 + 1;

273 
px
 = 
pIn1
;

277 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

278 
py
 = 
pSrc2
;

281 
cou¡
 = 0u;

290 if(
§cBLí
 >= 4u)

293 
blkC¡
 = ((
uöt32_t
Ë
blockSize2
 >> 2u);

295 
blkC¡
 > 0u)

298 
acc0
 = 0;

299 
acc1
 = 0;

300 
acc2
 = 0;

301 
acc3
 = 0;

304 
x0
 = *(
px
++);

305 
x1
 = *(
px
++);

306 
x2
 = *(
px
++);

309 
k
 = 
§cBLí
 >> 2u;

316 
c0
 = *(
py
--);

318 
c1
 = *(
py
--);

321 
x3
 = *(
px
++);

324 
ö1
 = (
q15_t
Ë
x0
;

325 
ö2
 = (
q15_t
Ë
x1
;

327 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

330 
ö1
 = (
q15_t
Ë
c0
;

331 
ö2
 = (
q15_t
Ë
c1
;

333 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

336 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

339 
ö1
 = (
q15_t
Ë
x1
;

340 
ö2
 = (
q15_t
Ë
x2
;

342 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

345 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

348 
ö1
 = (
q15_t
Ë
x2
;

349 
ö2
 = (
q15_t
Ë
x3
;

351 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

354 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

357 
x0
 = *(
px
++);

360 
ö1
 = (
q15_t
Ë
x3
;

361 
ö2
 = (
q15_t
Ë
x0
;

363 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

366 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

369 
c0
 = *(
py
--);

371 
c1
 = *(
py
--);

374 
x1
 = *(
px
++);

377 
ö1
 = (
q15_t
Ë
x2
;

378 
ö2
 = (
q15_t
Ë
x3
;

380 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

383 
ö1
 = (
q15_t
Ë
c0
;

384 
ö2
 = (
q15_t
Ë
c1
;

386 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

389 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

392 
ö1
 = (
q15_t
Ë
x3
;

393 
ö2
 = (
q15_t
Ë
x0
;

395 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

398 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

401 
ö1
 = (
q15_t
Ë
x0
;

402 
ö2
 = (
q15_t
Ë
x1
;

404 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

407 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

410 
x2
 = *(
px
++);

413 
ö1
 = (
q15_t
Ë
x1
;

414 
ö2
 = (
q15_t
Ë
x2
;

416 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

419 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

421 } --
k
);

425 
k
 = 
§cBLí
 % 0x4u;

427 
k
 > 0u)

430 
c0
 = *(
py
--);

433 
x3
 = *(
px
++);

437 
acc0
 +((
q31_t
Ë
x0
 * 
c0
);

439 
acc1
 +((
q31_t
Ë
x1
 * 
c0
);

441 
acc2
 +((
q31_t
Ë
x2
 * 
c0
);

443 
acc3
 +((
q31_t
Ë
x3
 * 
c0
);

446 
x0
 = 
x1
;

447 
x1
 = 
x2
;

448 
x2
 = 
x3
;

451 
k
--;

455 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7, 8));

456 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7, 8));

457 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7, 8));

458 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7, 8));

461 
cou¡
 += 4u;

464 
px
 = 
pIn1
 + 
cou¡
;

465 
py
 = 
pSrc2
;

469 
blkC¡
--;

474 
blkC¡
 = (
uöt32_t
Ë
blockSize2
 % 0x4u;

476 
blkC¡
 > 0u)

479 
sum
 = 0;

482 
k
 = 
§cBLí
 >> 2u;

486 
k
 > 0u)

490 
ö1
 = (
q15_t
Ë* 
px
++;

491 
ö2
 = (
q15_t
Ë* 
px
++;

492 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

495 
ö1
 = (
q15_t
Ë* 
py
--;

496 
ö2
 = (
q15_t
Ë* 
py
--;

497 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

500 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

503 
ö1
 = (
q15_t
Ë* 
px
++;

504 
ö2
 = (
q15_t
Ë* 
px
++;

505 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

508 
ö1
 = (
q15_t
Ë* 
py
--;

509 
ö2
 = (
q15_t
Ë* 
py
--;

510 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

513 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

516 
k
--;

521 
k
 = 
§cBLí
 % 0x4u;

523 
k
 > 0u)

526 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

529 
k
--;

533 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

536 
cou¡
++;

539 
px
 = 
pIn1
 + 
cou¡
;

540 
py
 = 
pSrc2
;

543 
blkC¡
--;

550 
blkC¡
 = (
uöt32_t
Ë
blockSize2
;

552 
blkC¡
 > 0u)

555 
sum
 = 0;

558 
k
 = 
§cBLí
;

560 
k
 > 0u)

563 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

566 
k
--;

570 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

573 
cou¡
++;

576 
px
 = 
pIn1
 + 
cou¡
;

577 
py
 = 
pSrc2
;

580 
blkC¡
--;

598 
cou¡
 = 
§cBLí
 - 1u;

601 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

602 
px
 = 
pSrc1
;

605 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

606 
py
 = 
pSrc2
;

612 
blockSize3
 > 0)

615 
sum
 = 0;

618 
k
 = 
cou¡
 >> 2u;

622 
k
 > 0u)

625 
ö1
 = (
q15_t
Ë* 
px
++;

626 
ö2
 = (
q15_t
Ë* 
px
++;

627 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

630 
ö1
 = (
q15_t
Ë* 
py
--;

631 
ö2
 = (
q15_t
Ë* 
py
--;

632 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

636 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

639 
ö1
 = (
q15_t
Ë* 
px
++;

640 
ö2
 = (
q15_t
Ë* 
px
++;

641 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

644 
ö1
 = (
q15_t
Ë* 
py
--;

645 
ö2
 = (
q15_t
Ë* 
py
--;

646 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

650 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

653 
k
--;

658 
k
 = 
cou¡
 % 0x4u;

660 
k
 > 0u)

664 
sum
 +((
q31_t
Ë* 
px
++ * *
py
--);

667 
k
--;

671 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

674 
px
 = ++
pSrc1
;

675 
py
 = 
pSrc2
;

678 
cou¡
--;

681 
blockSize3
--;

686 
°©us
 = 
ARM_MATH_SUCCESS
;

690  (
°©us
);

696 
q7_t
 *
pIn1
 = 
pSrcA
;

697 
q7_t
 *
pIn2
 = 
pSrcB
;

698 
q31_t
 
sum
;

699 
uöt32_t
 
i
, 
j
;

700 
¨m_°©us
 
°©us
;

703 if((
fú°Index
 + 
numPoöts
Ë> ((
§cALí
 + (
§cBLí
 - 1u))))

706 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

711 
i
 = 
fú°Index
; i <(fú°Index + 
numPoöts
 - 1); i++)

714 
sum
 = 0;

717 
j
 = 0; j <
i
; j++)

720 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

723 
sum
 +((
q15_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

728 
pD°
[
i
] = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

731 
°©us
 = 
ARM_MATH_SUCCESS
;

733  (
°©us
);

737 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q15.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c⁄v_q15
(

80 
q15_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q15_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q15_t
 * 
pD°
)

87 #i‡(
	`deföed
(
ARM_MATH_CM4
Ë|| deföed(
ARM_MATH_CM3
)Ë&& !deföed(
UNALIGNED_SUPPORT_DISABLE
)

91 
q15_t
 *
pIn1
;

92 
q15_t
 *
pIn2
;

93 
q15_t
 *
pOut
 = 
pD°
;

94 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q15_t
 *
px
;

96 
q15_t
 *
py
;

97 
q15_t
 *
pSrc1
, *
pSrc2
;

98 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

99 
uöt32_t
 
blockSize1
, 
blockSize2
, 
blockSize3
, 
j
, 
k
, 
cou¡
, 
blkC¡
;

104 if(
§cALí
 >
§cBLí
)

107 
pIn1
 = 
pSrcA
;

110 
pIn2
 = 
pSrcB
;

115 
pIn1
 = 
pSrcB
;

118 
pIn2
 = 
pSrcA
;

121 
j
 = 
§cBLí
;

122 
§cBLí
 = 
§cALí
;

123 
§cALí
 = 
j
;

137 
blockSize1
 = 
§cBLí
 - 1u;

138 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

152 
cou¡
 = 1u;

155 
px
 = 
pIn1
;

158 
py
 = 
pIn2
;

170 (
cou¡
 < 4uË&& (
blockSize1
 > 0u))

173 
sum
 = 0;

177 
k
 = 
cou¡
;

179 
k
 > 0u)

182 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

185 
k
--;

189 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

192 
py
 = 
pIn2
 + 
cou¡
;

193 
px
 = 
pIn1
;

196 
cou¡
++;

199 
blockSize1
--;

206 
py
 =Öy - 1;

208 
blockSize1
 > 0u)

211 
sum
 = 0;

214 
k
 = 
cou¡
 >> 2u;

218 
k
 > 0u)

222 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

224 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

227 
k
--;

232 
py
 =Öy + 1u;

236 
k
 = 
cou¡
 % 0x4u;

238 
k
 > 0u)

241 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

244 
k
--;

248 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

251 
py
 = 
pIn2
 + (
cou¡
 - 1u);

252 
px
 = 
pIn1
;

255 
cou¡
++;

258 
blockSize1
--;

272 
px
 = 
pIn1
;

275 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

276 
py
 = 
pSrc2
;

279 
cou¡
 = 0u;

289 if(
§cBLí
 >= 4u)

292 
blkC¡
 = 
blockSize2
 >> 2u;

294 
blkC¡
 > 0u)

296 
py
 =Öy - 1u;

299 
acc0
 = 0;

300 
acc1
 = 0;

301 
acc2
 = 0;

302 
acc3
 = 0;

306 
x0
 = *
	`__SIMD32
(
px
);

308 
x1
 = 
	`_SIMD32_OFFSET
(
px
+1);

309 
px
+= 2u;

313 
k
 = 
§cBLí
 >> 2u;

321 
c0
 = *
	`__SIMD32
(
py
)--;

324 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

327 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

330 
x2
 = *
	`__SIMD32
(
px
);

333 
x3
 = 
	`_SIMD32_OFFSET
(
px
+1);

336 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

339 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

342 
c0
 = *
	`__SIMD32
(
py
)--;

345 
acc0
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc0);

348 
acc1
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc1);

351 
x0
 = 
	`_SIMD32_OFFSET
(
px
+2);

354 
x1
 = 
	`_SIMD32_OFFSET
(
px
+3);

355 
px
 += 4u;

358 
acc2
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc2);

361 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

363 } --
k
);

370 
k
 = 
§cBLí
 % 0x4u;

372 if(
k
 == 1u)

375 
c0
 = *(
py
+1);

377 #ifde‡ 
ARM_MATH_BIG_ENDIAN


379 
c0
 = c0 << 16u;

383 
c0
 = c0 & 0x0000FFFF;

387 
x3
 = *
	`__SIMD32
(
px
);

388 
px
++;

391 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

392 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

393 
acc2
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc2);

394 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

397 if(
k
 == 2u)

400 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

403 
x3
 = *
	`__SIMD32
(
px
);

406 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

407 
px
 += 2u;

410 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

411 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

412 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

413 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

416 if(
k
 == 3u)

419 
c0
 = 
	`_SIMD32_OFFSET
(
py
);

422 
x3
 = *
	`__SIMD32
(
px
);

425 
x2
 = 
	`_SIMD32_OFFSET
(
px
+1);

428 
acc0
 = 
	`__SMLALDX
(
x0
, 
c0
,ácc0);

429 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

430 
acc2
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc2);

431 
acc3
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc3);

433 
c0
 = *(
py
-1);

435 #ifde‡ 
ARM_MATH_BIG_ENDIAN


437 
c0
 = c0 << 16u;

440 
c0
 = c0 & 0x0000FFFF;

443 
x3
 = 
	`_SIMD32_OFFSET
(
px
+2);

444 
px
 += 3u;

447 
acc0
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc0);

448 
acc1
 = 
	`__SMLALD
(
x2
, 
c0
,ácc1);

449 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

450 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

456 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


458 *
	`__SIMD32
(
pOut
)++ =

459 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

460 *
	`__SIMD32
(
pOut
)++ =

461 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

465 *
	`__SIMD32
(
pOut
)++ =

466 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

467 *
	`__SIMD32
(
pOut
)++ =

468 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

473 
cou¡
 += 4u;

476 
px
 = 
pIn1
 + 
cou¡
;

477 
py
 = 
pSrc2
;

480 
blkC¡
--;

485 
blkC¡
 = 
blockSize2
 % 0x4u;

487 
blkC¡
 > 0u)

490 
sum
 = 0;

493 
k
 = 
§cBLí
 >> 2u;

497 
k
 > 0u)

500 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

501 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

502 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

503 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

506 
k
--;

511 
k
 = 
§cBLí
 % 0x4u;

513 
k
 > 0u)

516 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

519 
k
--;

523 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

526 
cou¡
++;

529 
px
 = 
pIn1
 + 
cou¡
;

530 
py
 = 
pSrc2
;

533 
blkC¡
--;

540 
blkC¡
 = 
blockSize2
;

542 
blkC¡
 > 0u)

545 
sum
 = 0;

548 
k
 = 
§cBLí
;

550 
k
 > 0u)

553 
sum
 +(
q63_t
Ë((
q31_t
Ë* 
px
++ * *
py
--);

556 
k
--;

560 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

563 
cou¡
++;

566 
px
 = 
pIn1
 + 
cou¡
;

567 
py
 = 
pSrc2
;

570 
blkC¡
--;

589 
blockSize3
 = 
§cBLí
 - 1u;

592 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

593 
px
 = 
pSrc1
;

596 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

597 
pIn2
 = 
pSrc2
 - 1u;

598 
py
 = 
pIn2
;

609 
j
 = 
blockSize3
 >> 2u;

611 (
j
 > 0uË&& (
blockSize3
 > 0u))

614 
sum
 = 0;

617 
k
 = 
blockSize3
 >> 2u;

621 
k
 > 0u)

625 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

628 
sum
 = 
	`__SMLALDX
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)--, sum);

631 
k
--;

636 
py
 =Öy + 1u;

640 
k
 = 
blockSize3
 % 0x4u;

642 
k
 > 0u)

645 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

648 
k
--;

652 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

655 
px
 = ++
pSrc1
;

656 
py
 = 
pIn2
;

659 
blockSize3
--;

661 
j
--;

667 
py
 =Öy + 1u;

669 
blockSize3
 > 0u)

672 
sum
 = 0;

675 
k
 = 
blockSize3
;

677 
k
 > 0u)

681 
sum
 = 
	`__SMLALD
(*
px
++, *
py
--, sum);

684 
k
--;

688 *
pOut
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

691 
px
 = ++
pSrc1
;

692 
py
 = 
pSrc2
;

695 
blockSize3
--;

702 
q15_t
 *
pIn1
 = 
pSrcA
;

703 
q15_t
 *
pIn2
 = 
pSrcB
;

704 
q63_t
 
sum
;

705 
uöt32_t
 
i
, 
j
;

708 
i
 = 0; i < (
§cALí
 + 
§cBLí
 - 1); i++)

711 
sum
 = 0;

714 
j
 = 0; j <
i
; j++)

717 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

720 
sum
 +(
q31_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]);

725 
pD°
[
i
] = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

730 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_c⁄v_q31
(

79 
q31_t
 * 
pSrcA
,

80 
uöt32_t
 
§cALí
,

81 
q31_t
 * 
pSrcB
,

82 
uöt32_t
 
§cBLí
,

83 
q31_t
 * 
pD°
)

87 #i‚de‡
ARM_MATH_CM0_FAMILY


91 
q31_t
 *
pIn1
;

92 
q31_t
 *
pIn2
;

93 
q31_t
 *
pOut
 = 
pD°
;

94 
q31_t
 *
px
;

95 
q31_t
 *
py
;

96 
q31_t
 *
pSrc1
, *
pSrc2
;

97 
q63_t
 
sum
;

98 
q63_t
 
acc0
, 
acc1
, 
acc2
;

99 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

100 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

105 if(
§cALí
 >
§cBLí
)

108 
pIn1
 = 
pSrcA
;

111 
pIn2
 = 
pSrcB
;

116 
pIn1
 = (
q31_t
 *Ë
pSrcB
;

119 
pIn2
 = (
q31_t
 *Ë
pSrcA
;

122 
j
 = 
§cBLí
;

123 
§cBLí
 = 
§cALí
;

124 
§cALí
 = 
j
;

138 
blockSize1
 = 
§cBLí
 - 1u;

139 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

140 
blockSize3
 = 
blockSize1
;

154 
cou¡
 = 1u;

157 
px
 = 
pIn1
;

160 
py
 = 
pIn2
;

168 
blockSize1
 > 0u)

171 
sum
 = 0;

174 
k
 = 
cou¡
 >> 2u;

178 
k
 > 0u)

181 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

183 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

185 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

187 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

190 
k
--;

195 
k
 = 
cou¡
 % 0x4u;

197 
k
 > 0u)

200 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

203 
k
--;

207 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

210 
py
 = 
pIn2
 + 
cou¡
;

211 
px
 = 
pIn1
;

214 
cou¡
++;

217 
blockSize1
--;

231 
px
 = 
pIn1
;

234 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

235 
py
 = 
pSrc2
;

238 
cou¡
 = 0u;

247 if(
§cBLí
 >= 4u)

250 
blkC¡
 = 
blockSize2
 / 3;

252 
blkC¡
 > 0u)

255 
acc0
 = 0;

256 
acc1
 = 0;

257 
acc2
 = 0;

260 
x0
 = *(
px
++);

261 
x1
 = *(
px
++);

264 
k
 = 
§cBLí
 / 3;

271 
c0
 = *(
py
);

274 
x2
 = *(
px
);

278 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

280 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

282 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

285 
c0
 = *(
py
 - 1u);

288 
x0
 = *(
px
 + 1u);

292 
acc0
 +((
q63_t
Ë
x1
 * 
c0
);

294 
acc1
 +((
q63_t
Ë
x2
 * 
c0
);

296 
acc2
 +((
q63_t
Ë
x0
 * 
c0
);

299 
c0
 = *(
py
 - 2u);

302 
x1
 = *(
px
 + 2u);

306 
acc0
 +((
q63_t
Ë
x2
 * 
c0
);

308 
acc1
 +((
q63_t
Ë
x0
 * 
c0
);

310 
acc2
 +((
q63_t
Ë
x1
 * 
c0
);

313 
px
 += 3u;

314 
py
 -= 3u;

316 } --
k
);

320 
k
 = 
§cBLí
 - (3 * (srcBLen / 3));

322 
k
 > 0u)

325 
c0
 = *(
py
--);

328 
x2
 = *(
px
++);

332 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

334 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

336 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

339 
x0
 = 
x1
;

340 
x1
 = 
x2
;

343 
k
--;

347 *
pOut
++ = (
q31_t
Ë(
acc0
 >> 31);

348 *
pOut
++ = (
q31_t
Ë(
acc1
 >> 31);

349 *
pOut
++ = (
q31_t
Ë(
acc2
 >> 31);

352 
cou¡
 += 3u;

355 
px
 = 
pIn1
 + 
cou¡
;

356 
py
 = 
pSrc2
;

359 
blkC¡
--;

364 
blkC¡
 = 
blockSize2
 - 3 * (blockSize2 / 3);

366 
blkC¡
 > 0u)

369 
sum
 = 0;

372 
k
 = 
§cBLí
 >> 2u;

376 
k
 > 0u)

379 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

380 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

381 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

382 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

385 
k
--;

390 
k
 = 
§cBLí
 % 0x4u;

392 
k
 > 0u)

395 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

398 
k
--;

402 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

405 
cou¡
++;

408 
px
 = 
pIn1
 + 
cou¡
;

409 
py
 = 
pSrc2
;

412 
blkC¡
--;

419 
blkC¡
 = 
blockSize2
;

421 
blkC¡
 > 0u)

424 
sum
 = 0;

427 
k
 = 
§cBLí
;

429 
k
 > 0u)

432 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

435 
k
--;

439 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

442 
cou¡
++;

445 
px
 = 
pIn1
 + 
cou¡
;

446 
py
 = 
pSrc2
;

449 
blkC¡
--;

469 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

470 
px
 = 
pSrc1
;

473 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

474 
py
 = 
pSrc2
;

480 
blockSize3
 > 0u)

483 
sum
 = 0;

486 
k
 = 
blockSize3
 >> 2u;

490 
k
 > 0u)

493 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

495 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

497 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

499 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

502 
k
--;

507 
k
 = 
blockSize3
 % 0x4u;

509 
k
 > 0u)

512 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
--);

515 
k
--;

519 *
pOut
++ = (
q31_t
Ë(
sum
 >> 31);

522 
px
 = ++
pSrc1
;

523 
py
 = 
pSrc2
;

526 
blockSize3
--;

533 
q31_t
 *
pIn1
 = 
pSrcA
;

534 
q31_t
 *
pIn2
 = 
pSrcB
;

535 
q63_t
 
sum
;

536 
uöt32_t
 
i
, 
j
;

539 
i
 = 0; i < (
§cALí
 + 
§cBLí
 - 1); i++)

542 
sum
 = 0;

545 
j
 = 0; j <
i
; j++)

548 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

551 
sum
 +((
q63_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]));

556 
pD°
[
i
] = (
q31_t
Ë(
sum
 >> 31u);

561 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q7.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_c⁄v_q7
(

77 
q7_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q7_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q7_t
 * 
pD°
)

85 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
q7_t
 *
pIn1
;

90 
q7_t
 *
pIn2
;

91 
q7_t
 *
pOut
 = 
pD°
;

92 
q7_t
 *
px
;

93 
q7_t
 *
py
;

94 
q7_t
 *
pSrc1
, *
pSrc2
;

95 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
, 
c1
;

96 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

97 
q31_t
 
öput1
, 
öput2
;

98 
q15_t
 
ö1
, 
ö2
;

99 
uöt32_t
 
j
, 
k
, 
cou¡
, 
blkC¡
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

104 if(
§cALí
 >
§cBLí
)

107 
pIn1
 = 
pSrcA
;

110 
pIn2
 = 
pSrcB
;

115 
pIn1
 = 
pSrcB
;

118 
pIn2
 = 
pSrcA
;

121 
j
 = 
§cBLí
;

122 
§cBLí
 = 
§cALí
;

123 
§cALí
 = 
j
;

137 
blockSize1
 = 
§cBLí
 - 1u;

138 
blockSize2
 = (
§cALí
 - 
§cBLí
) + 1u;

139 
blockSize3
 = 
blockSize1
;

153 
cou¡
 = 1u;

156 
px
 = 
pIn1
;

159 
py
 = 
pIn2
;

167 
blockSize1
 > 0u)

170 
sum
 = 0;

173 
k
 = 
cou¡
 >> 2u;

177 
k
 > 0u)

180 
ö1
 = (
q15_t
Ë* 
px
++;

181 
ö2
 = (
q15_t
Ë* 
px
++;

182 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

185 
ö1
 = (
q15_t
Ë* 
py
--;

186 
ö2
 = (
q15_t
Ë* 
py
--;

187 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

191 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

194 
ö1
 = (
q15_t
Ë* 
px
++;

195 
ö2
 = (
q15_t
Ë* 
px
++;

196 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

199 
ö1
 = (
q15_t
Ë* 
py
--;

200 
ö2
 = (
q15_t
Ë* 
py
--;

201 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

205 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

208 
k
--;

213 
k
 = 
cou¡
 % 0x4u;

215 
k
 > 0u)

218 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

221 
k
--;

225 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

228 
py
 = 
pIn2
 + 
cou¡
;

229 
px
 = 
pIn1
;

232 
cou¡
++;

235 
blockSize1
--;

249 
px
 = 
pIn1
;

252 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

253 
py
 = 
pSrc2
;

256 
cou¡
 = 0u;

265 if(
§cBLí
 >= 4u)

268 
blkC¡
 = 
blockSize2
 >> 2u;

270 
blkC¡
 > 0u)

273 
acc0
 = 0;

274 
acc1
 = 0;

275 
acc2
 = 0;

276 
acc3
 = 0;

279 
x0
 = *(
px
++);

280 
x1
 = *(
px
++);

281 
x2
 = *(
px
++);

284 
k
 = 
§cBLí
 >> 2u;

291 
c0
 = *(
py
--);

293 
c1
 = *(
py
--);

296 
x3
 = *(
px
++);

299 
ö1
 = (
q15_t
Ë
x0
;

300 
ö2
 = (
q15_t
Ë
x1
;

302 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

305 
ö1
 = (
q15_t
Ë
c0
;

306 
ö2
 = (
q15_t
Ë
c1
;

308 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

311 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

314 
ö1
 = (
q15_t
Ë
x1
;

315 
ö2
 = (
q15_t
Ë
x2
;

317 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

320 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

323 
ö1
 = (
q15_t
Ë
x2
;

324 
ö2
 = (
q15_t
Ë
x3
;

326 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

329 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

332 
x0
 = *(
px
++);

335 
ö1
 = (
q15_t
Ë
x3
;

336 
ö2
 = (
q15_t
Ë
x0
;

338 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

341 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

344 
c0
 = *(
py
--);

346 
c1
 = *(
py
--);

349 
x1
 = *(
px
++);

352 
ö1
 = (
q15_t
Ë
x2
;

353 
ö2
 = (
q15_t
Ë
x3
;

355 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

358 
ö1
 = (
q15_t
Ë
c0
;

359 
ö2
 = (
q15_t
Ë
c1
;

361 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

364 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

367 
ö1
 = (
q15_t
Ë
x3
;

368 
ö2
 = (
q15_t
Ë
x0
;

370 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

373 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

376 
ö1
 = (
q15_t
Ë
x0
;

377 
ö2
 = (
q15_t
Ë
x1
;

379 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

382 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

385 
x2
 = *(
px
++);

388 
ö1
 = (
q15_t
Ë
x1
;

389 
ö2
 = (
q15_t
Ë
x2
;

391 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

394 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

396 } --
k
);

400 
k
 = 
§cBLí
 % 0x4u;

402 
k
 > 0u)

405 
c0
 = *(
py
--);

408 
x3
 = *(
px
++);

412 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

414 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

416 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

418 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

421 
x0
 = 
x1
;

422 
x1
 = 
x2
;

423 
x2
 = 
x3
;

426 
k
--;

431 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

432 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

433 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

434 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

437 
cou¡
 += 4u;

440 
px
 = 
pIn1
 + 
cou¡
;

441 
py
 = 
pSrc2
;

444 
blkC¡
--;

449 
blkC¡
 = 
blockSize2
 % 0x4u;

451 
blkC¡
 > 0u)

454 
sum
 = 0;

457 
k
 = 
§cBLí
 >> 2u;

461 
k
 > 0u)

465 
ö1
 = (
q15_t
Ë* 
px
++;

466 
ö2
 = (
q15_t
Ë* 
px
++;

467 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

470 
ö1
 = (
q15_t
Ë* 
py
--;

471 
ö2
 = (
q15_t
Ë* 
py
--;

472 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

475 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

478 
ö1
 = (
q15_t
Ë* 
px
++;

479 
ö2
 = (
q15_t
Ë* 
px
++;

480 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

483 
ö1
 = (
q15_t
Ë* 
py
--;

484 
ö2
 = (
q15_t
Ë* 
py
--;

485 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

488 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

491 
k
--;

496 
k
 = 
§cBLí
 % 0x4u;

498 
k
 > 0u)

501 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

504 
k
--;

508 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

511 
cou¡
++;

514 
px
 = 
pIn1
 + 
cou¡
;

515 
py
 = 
pSrc2
;

518 
blkC¡
--;

525 
blkC¡
 = 
blockSize2
;

527 
blkC¡
 > 0u)

530 
sum
 = 0;

533 
k
 = 
§cBLí
;

535 
k
 > 0u)

538 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

541 
k
--;

545 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

548 
cou¡
++;

551 
px
 = 
pIn1
 + 
cou¡
;

552 
py
 = 
pSrc2
;

555 
blkC¡
--;

575 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

576 
px
 = 
pSrc1
;

579 
pSrc2
 = 
pIn2
 + (
§cBLí
 - 1u);

580 
py
 = 
pSrc2
;

586 
blockSize3
 > 0u)

589 
sum
 = 0;

592 
k
 = 
blockSize3
 >> 2u;

596 
k
 > 0u)

599 
ö1
 = (
q15_t
Ë* 
px
++;

600 
ö2
 = (
q15_t
Ë* 
px
++;

601 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

604 
ö1
 = (
q15_t
Ë* 
py
--;

605 
ö2
 = (
q15_t
Ë* 
py
--;

606 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

610 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

613 
ö1
 = (
q15_t
Ë* 
px
++;

614 
ö2
 = (
q15_t
Ë* 
px
++;

615 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

618 
ö1
 = (
q15_t
Ë* 
py
--;

619 
ö2
 = (
q15_t
Ë* 
py
--;

620 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16u);

624 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

627 
k
--;

632 
k
 = 
blockSize3
 % 0x4u;

634 
k
 > 0u)

637 
sum
 +((
q15_t
Ë* 
px
++ * *
py
--);

640 
k
--;

644 *
pOut
++ = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7u, 8));

647 
px
 = ++
pSrc1
;

648 
py
 = 
pSrc2
;

651 
blockSize3
--;

658 
q7_t
 *
pIn1
 = 
pSrcA
;

659 
q7_t
 *
pIn2
 = 
pSrcB
;

660 
q31_t
 
sum
;

661 
uöt32_t
 
i
, 
j
;

664 
i
 = 0; i < (
§cALí
 + 
§cBLí
 - 1); i++)

667 
sum
 = 0;

670 
j
 = 0; j <
i
; j++)

673 if(((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
))

676 
sum
 +(
q15_t
Ë
pIn1
[
j
] * (
pIn2
[
i
 - j]);

681 
pD°
[
i
] = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

686 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_f32.c

41 
	~"¨m_m©h.h
"

116 
	$¨m_c‹ªœã_f32
(

117 
Êﬂt32_t
 * 
pSrcA
,

118 
uöt32_t
 
§cALí
,

119 
Êﬂt32_t
 * 
pSrcB
,

120 
uöt32_t
 
§cBLí
,

121 
Êﬂt32_t
 * 
pD°
)

125 #i‚de‡
ARM_MATH_CM0_FAMILY


129 
Êﬂt32_t
 *
pIn1
;

130 
Êﬂt32_t
 *
pIn2
;

131 
Êﬂt32_t
 *
pOut
 = 
pD°
;

132 
Êﬂt32_t
 *
px
;

133 
Êﬂt32_t
 *
py
;

134 
Êﬂt32_t
 *
pSrc1
;

135 
Êﬂt32_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

136 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

137 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

138 
öt32_t
 
öc
 = 1;

154 if(
§cALí
 >
§cBLí
)

157 
pIn1
 = 
pSrcA
;

160 
pIn2
 = 
pSrcB
;

163 
outBlockSize
 = (2u * 
§cALí
) - 1u;

169 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

172 
pOut
 +
j
;

187 
pIn1
 = 
pSrcB
;

190 
pIn2
 = 
pSrcA
;

193 
j
 = 
§cBLí
;

194 
§cBLí
 = 
§cALí
;

195 
§cALí
 = 
j
;

199 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

202 
öc
 = -1;

215 
blockSize1
 = 
§cBLí
 - 1u;

216 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

217 
blockSize3
 = 
blockSize1
;

231 
cou¡
 = 1u;

234 
px
 = 
pIn1
;

237 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

238 
py
 = 
pSrc1
;

245 
blockSize1
 > 0u)

248 
sum
 = 0.0f;

251 
k
 = 
cou¡
 >> 2u;

255 
k
 > 0u)

258 
sum
 +*
px
++ * *
py
++;

260 
sum
 +*
px
++ * *
py
++;

262 
sum
 +*
px
++ * *
py
++;

264 
sum
 +*
px
++ * *
py
++;

267 
k
--;

272 
k
 = 
cou¡
 % 0x4u;

274 
k
 > 0u)

278 
sum
 +*
px
++ * *
py
++;

281 
k
--;

285 *
pOut
 = 
sum
;

287 
pOut
 +
öc
;

290 
py
 = 
pSrc1
 - 
cou¡
;

291 
px
 = 
pIn1
;

294 
cou¡
++;

297 
blockSize1
--;

311 
px
 = 
pIn1
;

314 
py
 = 
pIn2
;

317 
cou¡
 = 0u;

326 if(
§cBLí
 >= 4u)

329 
blkC¡
 = 
blockSize2
 >> 2u;

331 
blkC¡
 > 0u)

334 
acc0
 = 0.0f;

335 
acc1
 = 0.0f;

336 
acc2
 = 0.0f;

337 
acc3
 = 0.0f;

340 
x0
 = *(
px
++);

341 
x1
 = *(
px
++);

342 
x2
 = *(
px
++);

345 
k
 = 
§cBLí
 >> 2u;

352 
c0
 = *(
py
++);

355 
x3
 = *(
px
++);

359 
acc0
 +
x0
 * 
c0
;

361 
acc1
 +
x1
 * 
c0
;

363 
acc2
 +
x2
 * 
c0
;

365 
acc3
 +
x3
 * 
c0
;

368 
c0
 = *(
py
++);

371 
x0
 = *(
px
++);

375 
acc0
 +
x1
 * 
c0
;

377 
acc1
 +
x2
 * 
c0
;

379 
acc2
 +
x3
 * 
c0
;

381 
acc3
 +
x0
 * 
c0
;

384 
c0
 = *(
py
++);

387 
x1
 = *(
px
++);

391 
acc0
 +
x2
 * 
c0
;

393 
acc1
 +
x3
 * 
c0
;

395 
acc2
 +
x0
 * 
c0
;

397 
acc3
 +
x1
 * 
c0
;

400 
c0
 = *(
py
++);

403 
x2
 = *(
px
++);

407 
acc0
 +
x3
 * 
c0
;

409 
acc1
 +
x0
 * 
c0
;

411 
acc2
 +
x1
 * 
c0
;

413 
acc3
 +
x2
 * 
c0
;

416 } --
k
);

420 
k
 = 
§cBLí
 % 0x4u;

422 
k
 > 0u)

425 
c0
 = *(
py
++);

428 
x3
 = *(
px
++);

432 
acc0
 +
x0
 * 
c0
;

434 
acc1
 +
x1
 * 
c0
;

436 
acc2
 +
x2
 * 
c0
;

438 
acc3
 +
x3
 * 
c0
;

441 
x0
 = 
x1
;

442 
x1
 = 
x2
;

443 
x2
 = 
x3
;

446 
k
--;

450 *
pOut
 = 
acc0
;

452 
pOut
 +
öc
;

454 *
pOut
 = 
acc1
;

455 
pOut
 +
öc
;

457 *
pOut
 = 
acc2
;

458 
pOut
 +
öc
;

460 *
pOut
 = 
acc3
;

461 
pOut
 +
öc
;

464 
cou¡
 += 4u;

467 
px
 = 
pIn1
 + 
cou¡
;

468 
py
 = 
pIn2
;

471 
blkC¡
--;

476 
blkC¡
 = 
blockSize2
 % 0x4u;

478 
blkC¡
 > 0u)

481 
sum
 = 0.0f;

484 
k
 = 
§cBLí
 >> 2u;

488 
k
 > 0u)

491 
sum
 +*
px
++ * *
py
++;

492 
sum
 +*
px
++ * *
py
++;

493 
sum
 +*
px
++ * *
py
++;

494 
sum
 +*
px
++ * *
py
++;

497 
k
--;

502 
k
 = 
§cBLí
 % 0x4u;

504 
k
 > 0u)

507 
sum
 +*
px
++ * *
py
++;

510 
k
--;

514 *
pOut
 = 
sum
;

516 
pOut
 +
öc
;

519 
cou¡
++;

522 
px
 = 
pIn1
 + 
cou¡
;

523 
py
 = 
pIn2
;

526 
blkC¡
--;

533 
blkC¡
 = 
blockSize2
;

535 
blkC¡
 > 0u)

538 
sum
 = 0.0f;

541 
k
 = 
§cBLí
;

543 
k
 > 0u)

546 
sum
 +*
px
++ * *
py
++;

549 
k
--;

553 *
pOut
 = 
sum
;

555 
pOut
 +
öc
;

558 
cou¡
++;

561 
px
 = 
pIn1
 + 
cou¡
;

562 
py
 = 
pIn2
;

565 
blkC¡
--;

582 
cou¡
 = 
§cBLí
 - 1u;

585 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

586 
px
 = 
pSrc1
;

589 
py
 = 
pIn2
;

595 
blockSize3
 > 0u)

598 
sum
 = 0.0f;

601 
k
 = 
cou¡
 >> 2u;

605 
k
 > 0u)

609 
sum
 +*
px
++ * *
py
++;

611 
sum
 +*
px
++ * *
py
++;

613 
sum
 +*
px
++ * *
py
++;

615 
sum
 +*
px
++ * *
py
++;

618 
k
--;

623 
k
 = 
cou¡
 % 0x4u;

625 
k
 > 0u)

628 
sum
 +*
px
++ * *
py
++;

631 
k
--;

635 *
pOut
 = 
sum
;

637 
pOut
 +
öc
;

640 
px
 = ++
pSrc1
;

641 
py
 = 
pIn2
;

644 
cou¡
--;

647 
blockSize3
--;

654 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
;

655 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

656 
Êﬂt32_t
 
sum
;

657 
uöt32_t
 
i
 = 0u, 
j
;

658 
uöt32_t
 
öv
 = 0u;

659 
uöt32_t
 
tŸ
 = 0u;

678 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

680 if(
§cALí
 > 
§cBLí
)

683 
j
 = 
§cALí
 - 
§cBLí
;

686 
pD°
 +
j
;

689 if(
§cALí
 < 
§cBLí
)

692 
pIn1
 = 
pSrcB
;

695 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

698 
pD°
 =ÖD° + 
tŸ
;

701 
j
 = 
§cALí
;

702 
§cALí
 = 
§cBLí
;

703 
§cBLí
 = 
j
;

706 
öv
 = 1;

711 
i
 = 0u; i <
tŸ
; i++)

714 
sum
 = 0.0f;

717 
j
 = 0u; j <
i
; j++)

720 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

723 
sum
 +
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)];

727 if(
öv
 == 1)

728 *
pD°
-- = 
sum
;

730 *
pD°
++ = 
sum
;

735 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_opt_q15.c

41 
	~"¨m_m©h.h
"

84 
	$¨m_c‹ªœã_Á°_›t_q15
(

85 
q15_t
 * 
pSrcA
,

86 
uöt32_t
 
§cALí
,

87 
q15_t
 * 
pSrcB
,

88 
uöt32_t
 
§cBLí
,

89 
q15_t
 * 
pD°
,

90 
q15_t
 * 
pS¸©ch
)

92 
q15_t
 *
pIn1
;

93 
q15_t
 *
pIn2
;

94 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q15_t
 *
py
;

96 
q31_t
 
x1
, 
x2
, 
x3
;

97 
uöt32_t
 
j
, 
blkC¡
, 
outBlockSize
;

98 
öt32_t
 
öc
 = 1;

99 
uöt32_t
 
èpC¡
;

100 
q31_t
 
y1
, 
y2
;

101 
q15_t
 *
pS¸
;

102 
q15_t
 *
pOut
 = 
pD°
;

103 #ifde‡
UNALIGNED_SUPPORT_DISABLE


105 
q15_t
 
a
, 
b
;

122 if(
§cALí
 >
§cBLí
)

125 
pIn1
 = (
pSrcA
);

128 
pIn2
 = (
pSrcB
);

131 
outBlockSize
 = (2u * 
§cALí
) - 1u;

137 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

140 
pOut
 +
j
;

146 
pIn1
 = (
pSrcB
);

149 
pIn2
 = (
pSrcA
);

152 
j
 = 
§cBLí
;

153 
§cBLí
 = 
§cALí
;

154 
§cALí
 = 
j
;

158 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

161 
öc
 = -1;

165 
pS¸
 = 
pS¸©ch
;

168 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

171 
pS¸
 +(
§cBLí
 - 1u);

173 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


176 
	`¨m_c›y_q15
(
pIn1
, 
pS¸
, 
§cALí
);

179 
pS¸
 +
§cALí
;

184 
j
 = 
§cALí
 >> 2u;

188 
j
 > 0u)

191 *
pS¸
++ = *
pIn1
++;

192 *
pS¸
++ = *
pIn1
++;

193 *
pS¸
++ = *
pIn1
++;

194 *
pS¸
++ = *
pIn1
++;

197 
j
--;

202 
j
 = 
§cALí
 % 0x4u;

204 
j
 > 0u)

207 *
pS¸
++ = *
pIn1
++;

210 
j
--;

215 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


218 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

221 
pS¸
 +(
§cBLí
 - 1u);

226 
j
 = (
§cBLí
 - 1u) >> 2u;

230 
j
 > 0u)

233 *
pS¸
++ = 0;

234 *
pS¸
++ = 0;

235 *
pS¸
++ = 0;

236 *
pS¸
++ = 0;

239 
j
--;

244 
j
 = (
§cBLí
 - 1u) % 0x4u;

246 
j
 > 0u)

249 *
pS¸
++ = 0;

252 
j
--;

258 
py
 = 
pIn2
;

262 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

264 
blkC¡
 > 0)

267 
pS¸
 = 
pS¸©ch
;

270 
acc0
 = 0;

271 
acc1
 = 0;

272 
acc2
 = 0;

273 
acc3
 = 0;

276 
x1
 = *
	`__SIMD32
(
pS¸
)++;

279 
x2
 = *
	`__SIMD32
(
pS¸
)++;

281 
èpC¡
 = (
§cBLí
) >> 2u;

283 
èpC¡
 > 0u)

286 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


289 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

290 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

292 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

294 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

296 #i‚de‡
ARM_MATH_BIG_ENDIAN


297 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

299 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

302 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

304 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸
);

306 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

308 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

310 #i‚de‡
ARM_MATH_BIG_ENDIAN


311 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

313 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

316 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

318 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

320 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸
 + 2u);

322 #i‚de‡
ARM_MATH_BIG_ENDIAN


323 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

325 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

328 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

332 
a
 = *
pIn2
;

333 
b
 = *(
pIn2
 + 1);

335 #i‚de‡
ARM_MATH_BIG_ENDIAN


336 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

338 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

341 
a
 = *(
pIn2
 + 2);

342 
b
 = *(
pIn2
 + 3);

343 #i‚de‡
ARM_MATH_BIG_ENDIAN


344 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

346 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

349 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

351 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

353 #i‚de‡
ARM_MATH_BIG_ENDIAN


354 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

356 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

359 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

361 
a
 = *
pS¸
;

362 
b
 = *(
pS¸
 + 1);

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


365 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

367 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

370 
acc0
 = 
	`__SMLAD
(
x2
, 
y2
,ácc0);

372 
acc2
 = 
	`__SMLAD
(
x1
, 
y2
,ácc2);

374 #i‚de‡
ARM_MATH_BIG_ENDIAN


375 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

377 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

380 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

382 
acc1
 = 
	`__SMLADX
(
x3
, 
y2
,ácc1);

384 
a
 = *(
pS¸
 + 2);

385 
b
 = *(
pS¸
 + 3);

387 #i‚de‡
ARM_MATH_BIG_ENDIAN


388 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

390 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

393 #i‚de‡
ARM_MATH_BIG_ENDIAN


394 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

396 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

399 
acc3
 = 
	`__SMLADX
(
x3
, 
y2
,ácc3);

403 
pIn2
 += 4u;

405 
pS¸
 += 4u;

409 
èpC¡
--;

415 
pS¸
 -= 4u;

419 
èpC¡
 = (
§cBLí
) & 3u;

421 
èpC¡
 > 0u)

425 
acc0
 +(*
pS¸
++ * *
pIn2
);

426 
acc1
 +(*
pS¸
++ * *
pIn2
);

427 
acc2
 +(*
pS¸
++ * *
pIn2
);

428 
acc3
 +(*
pS¸
++ * *
pIn2
++);

430 
pS¸
 -= 3u;

433 
èpC¡
--;

436 
blkC¡
--;

440 *
pOut
 = (
	`__SSAT
(
acc0
 >> 15u, 16));

441 
pOut
 +
öc
;

442 *
pOut
 = (
	`__SSAT
(
acc1
 >> 15u, 16));

443 
pOut
 +
öc
;

444 *
pOut
 = (
	`__SSAT
(
acc2
 >> 15u, 16));

445 
pOut
 +
öc
;

446 *
pOut
 = (
	`__SSAT
(
acc3
 >> 15u, 16));

447 
pOut
 +
öc
;

451 
pIn2
 = 
py
;

453 
pS¸©ch
 += 4u;

458 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

461 
blkC¡
 > 0)

464 
pS¸
 = 
pS¸©ch
;

467 
acc0
 = 0;

469 
èpC¡
 = (
§cBLí
) >> 1u;

471 
èpC¡
 > 0u)

474 
acc0
 +(*
pS¸
++ * *
pIn2
++);

475 
acc0
 +(*
pS¸
++ * *
pIn2
++);

478 
èpC¡
--;

481 
èpC¡
 = (
§cBLí
) & 1u;

484 
èpC¡
 > 0u)

488 
acc0
 +(*
pS¸
++ * *
pIn2
++);

491 
èpC¡
--;

494 
blkC¡
--;

498 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

500 
pOut
 +
öc
;

503 
pIn2
 = 
py
;

505 
pS¸©ch
 += 1u;

508 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q15.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_c‹ªœã_Á°_q15
(

78 
q15_t
 * 
pSrcA
,

79 
uöt32_t
 
§cALí
,

80 
q15_t
 * 
pSrcB
,

81 
uöt32_t
 
§cBLí
,

82 
q15_t
 * 
pD°
)

84 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


86 
q15_t
 *
pIn1
;

87 
q15_t
 *
pIn2
;

88 
q15_t
 *
pOut
 = 
pD°
;

89 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

90 
q15_t
 *
px
;

91 
q15_t
 *
py
;

92 
q15_t
 *
pSrc1
;

93 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

94 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

95 
öt32_t
 
öc
 = 1;

111 if(
§cALí
 >
§cBLí
)

114 
pIn1
 = (
pSrcA
);

117 
pIn2
 = (
pSrcB
);

120 
outBlockSize
 = (2u * 
§cALí
) - 1u;

126 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

129 
pOut
 +
j
;

135 
pIn1
 = (
pSrcB
);

138 
pIn2
 = (
pSrcA
);

141 
j
 = 
§cBLí
;

142 
§cBLí
 = 
§cALí
;

143 
§cALí
 = 
j
;

147 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

150 
öc
 = -1;

163 
blockSize1
 = 
§cBLí
 - 1u;

164 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

165 
blockSize3
 = 
blockSize1
;

179 
cou¡
 = 1u;

182 
px
 = 
pIn1
;

185 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

186 
py
 = 
pSrc1
;

193 
blockSize1
 > 0u)

196 
sum
 = 0;

199 
k
 = 
cou¡
 >> 2;

203 
k
 > 0u)

206 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

208 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

211 
k
--;

216 
k
 = 
cou¡
 % 0x4u;

218 
k
 > 0u)

222 
sum
 = 
	`__SMLAD
(*
px
++, *
py
++, sum);

225 
k
--;

229 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

231 
pOut
 +
öc
;

234 
py
 = 
pSrc1
 - 
cou¡
;

235 
px
 = 
pIn1
;

238 
cou¡
++;

241 
blockSize1
--;

255 
px
 = 
pIn1
;

258 
py
 = 
pIn2
;

261 
cou¡
 = 0u;

270 if(
§cBLí
 >= 4u)

273 
blkC¡
 = 
blockSize2
 >> 2u;

275 
blkC¡
 > 0u)

278 
acc0
 = 0;

279 
acc1
 = 0;

280 
acc2
 = 0;

281 
acc3
 = 0;

284 
x0
 = *
	`__SIMD32
(
px
);

286 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

287 
px
 += 2u;

290 
k
 = 
§cBLí
 >> 2u;

298 
c0
 = *
	`__SIMD32
(
py
)++;

301 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

304 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

307 
x2
 = *
	`__SIMD32
(
px
);

310 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

313 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

316 
acc3
 = 
	`__SMLAD
(
x3
, 
c0
,ácc3);

319 
c0
 = *
	`__SIMD32
(
py
)++;

322 
acc0
 = 
	`__SMLAD
(
x2
, 
c0
,ácc0);

325 
acc1
 = 
	`__SMLAD
(
x3
, 
c0
,ácc1);

328 
x0
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

331 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 3);

332 
px
 += 4u;

335 
acc2
 = 
	`__SMLAD
(
x0
, 
c0
,ácc2);

338 
acc3
 = 
	`__SMLAD
(
x1
, 
c0
,ácc3);

340 } --
k
);

347 
k
 = 
§cBLí
 % 0x4u;

349 if(
k
 == 1u)

352 
c0
 = *
py
;

353 #ifde‡ 
ARM_MATH_BIG_ENDIAN


355 
c0
 = c0 << 16u;

359 
c0
 = c0 & 0x0000FFFF;

364 
x3
 = *
	`__SIMD32
(
px
);

365 
px
++;

368 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

369 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

370 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

371 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

374 if(
k
 == 2u)

377 
c0
 = *
	`__SIMD32
(
py
);

380 
x3
 = *
	`__SIMD32
(
px
);

383 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

384 
px
 += 2u;

387 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

388 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

389 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

390 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

393 if(
k
 == 3u)

396 
c0
 = *
	`__SIMD32
(
py
)++;

399 
x3
 = *
	`__SIMD32
(
px
);

402 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

405 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

406 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

407 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

408 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

410 
c0
 = (*
py
);

412 #ifde‡ 
ARM_MATH_BIG_ENDIAN


414 
c0
 = c0 << 16u;

417 
c0
 = c0 & 0x0000FFFF;

421 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

422 
px
 += 3u;

425 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

426 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

427 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

428 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

432 *
pOut
 = (
q15_t
Ë(
acc0
 >> 15);

434 
pOut
 +
öc
;

436 *
pOut
 = (
q15_t
Ë(
acc1
 >> 15);

437 
pOut
 +
öc
;

439 *
pOut
 = (
q15_t
Ë(
acc2
 >> 15);

440 
pOut
 +
öc
;

442 *
pOut
 = (
q15_t
Ë(
acc3
 >> 15);

443 
pOut
 +
öc
;

446 
cou¡
 += 4u;

449 
px
 = 
pIn1
 + 
cou¡
;

450 
py
 = 
pIn2
;

454 
blkC¡
--;

459 
blkC¡
 = 
blockSize2
 % 0x4u;

461 
blkC¡
 > 0u)

464 
sum
 = 0;

467 
k
 = 
§cBLí
 >> 2u;

471 
k
 > 0u)

474 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

475 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

476 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

477 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

480 
k
--;

485 
k
 = 
§cBLí
 % 0x4u;

487 
k
 > 0u)

490 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

493 
k
--;

497 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

499 
pOut
 +
öc
;

502 
cou¡
++;

505 
px
 = 
pIn1
 + 
cou¡
;

506 
py
 = 
pIn2
;

509 
blkC¡
--;

516 
blkC¡
 = 
blockSize2
;

518 
blkC¡
 > 0u)

521 
sum
 = 0;

524 
k
 = 
§cBLí
;

526 
k
 > 0u)

529 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

532 
k
--;

536 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

538 
pOut
 +
öc
;

541 
cou¡
++;

544 
px
 = 
pIn1
 + 
cou¡
;

545 
py
 = 
pIn2
;

548 
blkC¡
--;

565 
cou¡
 = 
§cBLí
 - 1u;

568 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

569 
px
 = 
pSrc1
;

572 
py
 = 
pIn2
;

578 
blockSize3
 > 0u)

581 
sum
 = 0;

584 
k
 = 
cou¡
 >> 2u;

588 
k
 > 0u)

592 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

594 
sum
 = 
	`__SMLAD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

597 
k
--;

602 
k
 = 
cou¡
 % 0x4u;

604 
k
 > 0u)

607 
sum
 = 
	`__SMLAD
(*
px
++, *
py
++, sum);

610 
k
--;

614 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

616 
pOut
 +
öc
;

619 
px
 = ++
pSrc1
;

620 
py
 = 
pIn2
;

623 
cou¡
--;

626 
blockSize3
--;

631 
q15_t
 *
pIn1
;

632 
q15_t
 *
pIn2
;

633 
q15_t
 *
pOut
 = 
pD°
;

634 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

635 
q15_t
 *
px
;

636 
q15_t
 *
py
;

637 
q15_t
 *
pSrc1
;

638 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

639 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

640 
öt32_t
 
öc
 = 1;

641 
q15_t
 
a
, 
b
;

657 if(
§cALí
 >
§cBLí
)

660 
pIn1
 = (
pSrcA
);

663 
pIn2
 = (
pSrcB
);

666 
outBlockSize
 = (2u * 
§cALí
) - 1u;

672 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

675 
pOut
 +
j
;

681 
pIn1
 = (
pSrcB
);

684 
pIn2
 = (
pSrcA
);

687 
j
 = 
§cBLí
;

688 
§cBLí
 = 
§cALí
;

689 
§cALí
 = 
j
;

693 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

696 
öc
 = -1;

709 
blockSize1
 = 
§cBLí
 - 1u;

710 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

711 
blockSize3
 = 
blockSize1
;

725 
cou¡
 = 1u;

728 
px
 = 
pIn1
;

731 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

732 
py
 = 
pSrc1
;

739 
blockSize1
 > 0u)

742 
sum
 = 0;

745 
k
 = 
cou¡
 >> 2;

749 
k
 > 0u)

752 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

753 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

754 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

755 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

758 
k
--;

763 
k
 = 
cou¡
 % 0x4u;

765 
k
 > 0u)

769 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

772 
k
--;

776 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

778 
pOut
 +
öc
;

781 
py
 = 
pSrc1
 - 
cou¡
;

782 
px
 = 
pIn1
;

785 
cou¡
++;

788 
blockSize1
--;

802 
px
 = 
pIn1
;

805 
py
 = 
pIn2
;

808 
cou¡
 = 0u;

817 if(
§cBLí
 >= 4u)

820 
blkC¡
 = 
blockSize2
 >> 2u;

822 
blkC¡
 > 0u)

825 
acc0
 = 0;

826 
acc1
 = 0;

827 
acc2
 = 0;

828 
acc3
 = 0;

831 
a
 = *
px
;

832 
b
 = *(
px
 + 1);

834 #i‚de‡
ARM_MATH_BIG_ENDIAN


836 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

837 
a
 = *(
px
 + 2);

838 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

842 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

843 
a
 = *(
px
 + 2);

844 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

848 
px
 += 2u;

851 
k
 = 
§cBLí
 >> 2u;

859 
a
 = *
py
;

860 
b
 = *(
py
 + 1);

862 #i‚de‡
ARM_MATH_BIG_ENDIAN


864 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

868 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

873 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

876 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

879 
a
 = *
px
;

880 
b
 = *(
px
 + 1);

882 #i‚de‡
ARM_MATH_BIG_ENDIAN


884 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

885 
a
 = *(
px
 + 2);

886 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

890 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

891 
a
 = *(
px
 + 2);

892 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

897 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

900 
acc3
 = 
	`__SMLAD
(
x3
, 
c0
,ácc3);

903 
a
 = *(
py
 + 2);

904 
b
 = *(
py
 + 3);

906 
py
 += 4u;

908 #i‚de‡
ARM_MATH_BIG_ENDIAN


910 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

914 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

919 
acc0
 = 
	`__SMLAD
(
x2
, 
c0
,ácc0);

922 
acc1
 = 
	`__SMLAD
(
x3
, 
c0
,ácc1);

925 
a
 = *(
px
 + 2);

926 
b
 = *(
px
 + 3);

928 #i‚de‡
ARM_MATH_BIG_ENDIAN


930 
x0
 = 
	`__PKHBT
(
a
, 
b
, 16);

931 
a
 = *(
px
 + 4);

932 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

936 
x0
 = 
	`__PKHBT
(
b
, 
a
, 16);

937 
a
 = *(
px
 + 4);

938 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

942 
px
 += 4u;

945 
acc2
 = 
	`__SMLAD
(
x0
, 
c0
,ácc2);

948 
acc3
 = 
	`__SMLAD
(
x1
, 
c0
,ácc3);

950 } --
k
);

957 
k
 = 
§cBLí
 % 0x4u;

959 if(
k
 == 1u)

962 
c0
 = *
py
;

963 #ifde‡ 
ARM_MATH_BIG_ENDIAN


965 
c0
 = c0 << 16u;

969 
c0
 = c0 & 0x0000FFFF;

974 
a
 = *
px
;

975 
b
 = *(
px
 + 1);

977 
px
++;;

979 #i‚de‡
ARM_MATH_BIG_ENDIAN


981 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

985 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

989 
px
++;

992 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

993 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

994 
acc2
 = 
	`__SMLADX
(
x1
, 
c0
,ácc2);

995 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

998 if(
k
 == 2u)

1001 
a
 = *
py
;

1002 
b
 = *(
py
 + 1);

1004 #i‚de‡
ARM_MATH_BIG_ENDIAN


1006 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1010 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1015 
a
 = *
px
;

1016 
b
 = *(
px
 + 1);

1018 #i‚de‡
ARM_MATH_BIG_ENDIAN


1020 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1021 
a
 = *(
px
 + 2);

1022 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1026 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1027 
a
 = *(
px
 + 2);

1028 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1032 
px
 += 2u;

1035 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1036 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1037 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

1038 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

1041 if(
k
 == 3u)

1044 
a
 = *
py
;

1045 
b
 = *(
py
 + 1);

1047 #i‚de‡
ARM_MATH_BIG_ENDIAN


1049 
c0
 = 
	`__PKHBT
(
a
, 
b
, 16);

1053 
c0
 = 
	`__PKHBT
(
b
, 
a
, 16);

1057 
py
 += 2u;

1060 
a
 = *
px
;

1061 
b
 = *(
px
 + 1);

1063 #i‚de‡
ARM_MATH_BIG_ENDIAN


1065 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1066 
a
 = *(
px
 + 2);

1067 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

1071 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1072 
a
 = *(
px
 + 2);

1073 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

1078 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

1079 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

1080 
acc2
 = 
	`__SMLAD
(
x3
, 
c0
,ácc2);

1081 
acc3
 = 
	`__SMLAD
(
x2
, 
c0
,ácc3);

1083 
c0
 = (*
py
);

1085 #ifde‡ 
ARM_MATH_BIG_ENDIAN


1087 
c0
 = c0 << 16u;

1090 
c0
 = c0 & 0x0000FFFF;

1094 
b
 = *(
px
 + 3);

1096 #i‚de‡
ARM_MATH_BIG_ENDIAN


1098 
x3
 = 
	`__PKHBT
(
a
, 
b
, 16);

1102 
x3
 = 
	`__PKHBT
(
b
, 
a
, 16);

1106 
px
 += 3u;

1109 
acc0
 = 
	`__SMLADX
(
x1
, 
c0
,ácc0);

1110 
acc1
 = 
	`__SMLAD
(
x2
, 
c0
,ácc1);

1111 
acc2
 = 
	`__SMLADX
(
x2
, 
c0
,ácc2);

1112 
acc3
 = 
	`__SMLADX
(
x3
, 
c0
,ácc3);

1116 *
pOut
 = (
q15_t
Ë(
acc0
 >> 15);

1118 
pOut
 +
öc
;

1120 *
pOut
 = (
q15_t
Ë(
acc1
 >> 15);

1121 
pOut
 +
öc
;

1123 *
pOut
 = (
q15_t
Ë(
acc2
 >> 15);

1124 
pOut
 +
öc
;

1126 *
pOut
 = (
q15_t
Ë(
acc3
 >> 15);

1127 
pOut
 +
öc
;

1130 
cou¡
 += 4u;

1133 
px
 = 
pIn1
 + 
cou¡
;

1134 
py
 = 
pIn2
;

1138 
blkC¡
--;

1143 
blkC¡
 = 
blockSize2
 % 0x4u;

1145 
blkC¡
 > 0u)

1148 
sum
 = 0;

1151 
k
 = 
§cBLí
 >> 2u;

1155 
k
 > 0u)

1158 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1159 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1160 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1161 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1164 
k
--;

1169 
k
 = 
§cBLí
 % 0x4u;

1171 
k
 > 0u)

1174 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1177 
k
--;

1181 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

1183 
pOut
 +
öc
;

1186 
cou¡
++;

1189 
px
 = 
pIn1
 + 
cou¡
;

1190 
py
 = 
pIn2
;

1193 
blkC¡
--;

1200 
blkC¡
 = 
blockSize2
;

1202 
blkC¡
 > 0u)

1205 
sum
 = 0;

1208 
k
 = 
§cBLí
;

1210 
k
 > 0u)

1213 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1216 
k
--;

1220 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

1222 
pOut
 +
öc
;

1225 
cou¡
++;

1228 
px
 = 
pIn1
 + 
cou¡
;

1229 
py
 = 
pIn2
;

1232 
blkC¡
--;

1249 
cou¡
 = 
§cBLí
 - 1u;

1252 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

1253 
px
 = 
pSrc1
;

1256 
py
 = 
pIn2
;

1262 
blockSize3
 > 0u)

1265 
sum
 = 0;

1268 
k
 = 
cou¡
 >> 2u;

1272 
k
 > 0u)

1275 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1276 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1277 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1278 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1281 
k
--;

1286 
k
 = 
cou¡
 % 0x4u;

1288 
k
 > 0u)

1291 
sum
 +((
q31_t
Ë* 
px
++ * *
py
++);

1294 
k
--;

1298 *
pOut
 = (
q15_t
Ë(
sum
 >> 15);

1300 
pOut
 +
öc
;

1303 
px
 = ++
pSrc1
;

1304 
py
 = 
pIn2
;

1307 
cou¡
--;

1310 
blockSize3
--;

1315 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q31.c

41 
	~"¨m_m©h.h
"

81 
	$¨m_c‹ªœã_Á°_q31
(

82 
q31_t
 * 
pSrcA
,

83 
uöt32_t
 
§cALí
,

84 
q31_t
 * 
pSrcB
,

85 
uöt32_t
 
§cBLí
,

86 
q31_t
 * 
pD°
)

88 
q31_t
 *
pIn1
;

89 
q31_t
 *
pIn2
;

90 
q31_t
 *
pOut
 = 
pD°
;

91 
q31_t
 *
px
;

92 
q31_t
 *
py
;

93 
q31_t
 *
pSrc1
;

94 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

96 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

97 
öt32_t
 
öc
 = 1;

103 if(
§cALí
 >
§cBLí
)

106 
pIn1
 = (
pSrcA
);

109 
pIn2
 = (
pSrcB
);

112 
outBlockSize
 = (2u * 
§cALí
) - 1u;

118 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

121 
pOut
 +
j
;

127 
pIn1
 = (
pSrcB
);

130 
pIn2
 = (
pSrcA
);

133 
j
 = 
§cBLí
;

134 
§cBLí
 = 
§cALí
;

135 
§cALí
 = 
j
;

139 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

142 
öc
 = -1;

155 
blockSize1
 = 
§cBLí
 - 1u;

156 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

157 
blockSize3
 = 
blockSize1
;

171 
cou¡
 = 1u;

174 
px
 = 
pIn1
;

177 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

178 
py
 = 
pSrc1
;

185 
blockSize1
 > 0u)

188 
sum
 = 0;

191 
k
 = 
cou¡
 >> 2;

195 
k
 > 0u)

198 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

199 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

201 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

202 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

204 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

205 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

207 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

208 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

211 
k
--;

216 
k
 = 
cou¡
 % 0x4u;

218 
k
 > 0u)

222 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

223 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

226 
k
--;

230 *
pOut
 = 
sum
 << 1;

232 
pOut
 +
öc
;

235 
py
 = 
pSrc1
 - 
cou¡
;

236 
px
 = 
pIn1
;

239 
cou¡
++;

242 
blockSize1
--;

256 
px
 = 
pIn1
;

259 
py
 = 
pIn2
;

262 
cou¡
 = 0u;

271 if(
§cBLí
 >= 4u)

274 
blkC¡
 = 
blockSize2
 >> 2u;

276 
blkC¡
 > 0u)

279 
acc0
 = 0;

280 
acc1
 = 0;

281 
acc2
 = 0;

282 
acc3
 = 0;

285 
x0
 = *(
px
++);

286 
x1
 = *(
px
++);

287 
x2
 = *(
px
++);

290 
k
 = 
§cBLí
 >> 2u;

297 
c0
 = *(
py
++);

300 
x3
 = *(
px
++);

304 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

306 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

308 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

310 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

313 
c0
 = *(
py
++);

316 
x0
 = *(
px
++);

320 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

322 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

324 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

326 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

329 
c0
 = *(
py
++);

332 
x1
 = *(
px
++);

336 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

338 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

340 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

342 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

345 
c0
 = *(
py
++);

348 
x2
 = *(
px
++);

352 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

354 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

356 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

358 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

361 } --
k
);

365 
k
 = 
§cBLí
 % 0x4u;

367 
k
 > 0u)

370 
c0
 = *(
py
++);

373 
x3
 = *(
px
++);

377 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

379 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

381 
acc2
 = (
q31_t
Ë((((
q63_t
Ëacc2 << 32Ë+ ((q63_tË
x2
 * 
c0
)) >> 32);

383 
acc3
 = (
q31_t
Ë((((
q63_t
Ëacc3 << 32Ë+ ((q63_tË
x3
 * 
c0
)) >> 32);

386 
x0
 = 
x1
;

387 
x1
 = 
x2
;

388 
x2
 = 
x3
;

391 
k
--;

395 *
pOut
 = (
q31_t
Ë(
acc0
 << 1);

397 
pOut
 +
öc
;

399 *
pOut
 = (
q31_t
Ë(
acc1
 << 1);

400 
pOut
 +
öc
;

402 *
pOut
 = (
q31_t
Ë(
acc2
 << 1);

403 
pOut
 +
öc
;

405 *
pOut
 = (
q31_t
Ë(
acc3
 << 1);

406 
pOut
 +
öc
;

409 
cou¡
 += 4u;

412 
px
 = 
pIn1
 + 
cou¡
;

413 
py
 = 
pIn2
;

417 
blkC¡
--;

422 
blkC¡
 = 
blockSize2
 % 0x4u;

424 
blkC¡
 > 0u)

427 
sum
 = 0;

430 
k
 = 
§cBLí
 >> 2u;

434 
k
 > 0u)

437 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

438 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

439 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

440 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

441 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

442 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

443 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

444 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

447 
k
--;

452 
k
 = 
§cBLí
 % 0x4u;

454 
k
 > 0u)

457 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

458 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

461 
k
--;

465 *
pOut
 = 
sum
 << 1;

467 
pOut
 +
öc
;

470 
cou¡
++;

473 
px
 = 
pIn1
 + 
cou¡
;

474 
py
 = 
pIn2
;

478 
blkC¡
--;

485 
blkC¡
 = 
blockSize2
;

487 
blkC¡
 > 0u)

490 
sum
 = 0;

493 
k
 = 
§cBLí
;

495 
k
 > 0u)

498 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

499 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

502 
k
--;

506 *
pOut
 = 
sum
 << 1;

508 
pOut
 +
öc
;

511 
cou¡
++;

514 
px
 = 
pIn1
 + 
cou¡
;

515 
py
 = 
pIn2
;

518 
blkC¡
--;

535 
cou¡
 = 
§cBLí
 - 1u;

538 
pSrc1
 = ((
pIn1
 + 
§cALí
Ë- 
§cBLí
) + 1u;

539 
px
 = 
pSrc1
;

542 
py
 = 
pIn2
;

548 
blockSize3
 > 0u)

551 
sum
 = 0;

554 
k
 = 
cou¡
 >> 2u;

558 
k
 > 0u)

562 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

563 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

565 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

566 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

568 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

569 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

571 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

572 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

575 
k
--;

580 
k
 = 
cou¡
 % 0x4u;

582 
k
 > 0u)

585 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

586 ((
q63_t
Ë* 
px
++ * (*
py
++))) >> 32);

589 
k
--;

593 *
pOut
 = 
sum
 << 1;

595 
pOut
 +
öc
;

598 
px
 = ++
pSrc1
;

599 
py
 = 
pIn2
;

602 
cou¡
--;

605 
blockSize3
--;

608 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q15.c

41 
	~"¨m_m©h.h
"

83 
	$¨m_c‹ªœã_›t_q15
(

84 
q15_t
 * 
pSrcA
,

85 
uöt32_t
 
§cALí
,

86 
q15_t
 * 
pSrcB
,

87 
uöt32_t
 
§cBLí
,

88 
q15_t
 * 
pD°
,

89 
q15_t
 * 
pS¸©ch
)

91 
q15_t
 *
pIn1
;

92 
q15_t
 *
pIn2
;

93 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

94 
q15_t
 *
py
;

95 
q31_t
 
x1
, 
x2
, 
x3
;

96 
uöt32_t
 
j
, 
blkC¡
, 
outBlockSize
;

97 
öt32_t
 
öc
 = 1;

98 
uöt32_t
 
èpC¡
;

99 
q31_t
 
y1
, 
y2
;

100 
q15_t
 *
pS¸
;

101 
q15_t
 *
pOut
 = 
pD°
;

102 #ifde‡
UNALIGNED_SUPPORT_DISABLE


104 
q15_t
 
a
, 
b
;

121 if(
§cALí
 >
§cBLí
)

124 
pIn1
 = (
pSrcA
);

127 
pIn2
 = (
pSrcB
);

130 
outBlockSize
 = (2u * 
§cALí
) - 1u;

136 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

139 
pOut
 +
j
;

145 
pIn1
 = (
pSrcB
);

148 
pIn2
 = (
pSrcA
);

151 
j
 = 
§cBLí
;

152 
§cBLí
 = 
§cALí
;

153 
§cALí
 = 
j
;

157 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

160 
öc
 = -1;

164 
pS¸
 = 
pS¸©ch
;

167 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

170 
pS¸
 +(
§cBLí
 - 1u);

172 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


175 
	`¨m_c›y_q15
(
pIn1
, 
pS¸
, 
§cALí
);

179 
pS¸
 +
§cALí
;

184 
j
 = 
§cALí
 >> 2u;

188 
j
 > 0u)

191 *
pS¸
++ = *
pIn1
++;

192 *
pS¸
++ = *
pIn1
++;

193 *
pS¸
++ = *
pIn1
++;

194 *
pS¸
++ = *
pIn1
++;

197 
j
--;

202 
j
 = 
§cALí
 % 0x4u;

204 
j
 > 0u)

207 *
pS¸
++ = *
pIn1
++;

210 
j
--;

215 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


218 
	`¨m_fûl_q15
(0, 
pS¸
, (
§cBLí
 - 1u));

221 
pS¸
 +(
§cBLí
 - 1u);

226 
j
 = (
§cBLí
 - 1u) >> 2u;

230 
j
 > 0u)

233 *
pS¸
++ = 0;

234 *
pS¸
++ = 0;

235 *
pS¸
++ = 0;

236 *
pS¸
++ = 0;

239 
j
--;

244 
j
 = (
§cBLí
 - 1u) % 0x4u;

246 
j
 > 0u)

249 *
pS¸
++ = 0;

252 
j
--;

258 
py
 = 
pIn2
;

262 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

264 
blkC¡
 > 0)

267 
pS¸
 = 
pS¸©ch
;

270 
acc0
 = 0;

271 
acc1
 = 0;

272 
acc2
 = 0;

273 
acc3
 = 0;

276 
x1
 = *
	`__SIMD32
(
pS¸
)++;

279 
x2
 = *
	`__SIMD32
(
pS¸
)++;

281 
èpC¡
 = (
§cBLí
) >> 2u;

283 
èpC¡
 > 0u)

286 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


289 
y1
 = 
	`_SIMD32_OFFSET
(
pIn2
);

290 
y2
 = 
	`_SIMD32_OFFSET
(
pIn2
 + 2u);

292 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

294 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

296 #i‚de‡
ARM_MATH_BIG_ENDIAN


297 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

299 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

302 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

304 
x1
 = 
	`_SIMD32_OFFSET
(
pS¸
);

306 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

308 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

310 #i‚de‡
ARM_MATH_BIG_ENDIAN


311 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

313 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

316 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

318 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

320 
x2
 = 
	`_SIMD32_OFFSET
(
pS¸
 + 2u);

322 #i‚de‡
ARM_MATH_BIG_ENDIAN


323 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

325 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

328 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

333 
a
 = *
pIn2
;

334 
b
 = *(
pIn2
 + 1);

336 #i‚de‡
ARM_MATH_BIG_ENDIAN


337 
y1
 = 
	`__PKHBT
(
a
, 
b
, 16);

339 
y1
 = 
	`__PKHBT
(
b
, 
a
, 16);

342 
a
 = *(
pIn2
 + 2);

343 
b
 = *(
pIn2
 + 3);

344 #i‚de‡
ARM_MATH_BIG_ENDIAN


345 
y2
 = 
	`__PKHBT
(
a
, 
b
, 16);

347 
y2
 = 
	`__PKHBT
(
b
, 
a
, 16);

350 
acc0
 = 
	`__SMLALD
(
x1
, 
y1
,ácc0);

352 
acc2
 = 
	`__SMLALD
(
x2
, 
y1
,ácc2);

354 #i‚de‡
ARM_MATH_BIG_ENDIAN


355 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

357 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

360 
acc1
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc1);

362 
a
 = *
pS¸
;

363 
b
 = *(
pS¸
 + 1);

365 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
x1
 = 
	`__PKHBT
(
a
, 
b
, 16);

368 
x1
 = 
	`__PKHBT
(
b
, 
a
, 16);

371 
acc0
 = 
	`__SMLALD
(
x2
, 
y2
,ácc0);

373 
acc2
 = 
	`__SMLALD
(
x1
, 
y2
,ácc2);

375 #i‚de‡
ARM_MATH_BIG_ENDIAN


376 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

378 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

381 
acc3
 = 
	`__SMLALDX
(
x3
, 
y1
,ácc3);

383 
acc1
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc1);

385 
a
 = *(
pS¸
 + 2);

386 
b
 = *(
pS¸
 + 3);

388 #i‚de‡
ARM_MATH_BIG_ENDIAN


389 
x2
 = 
	`__PKHBT
(
a
, 
b
, 16);

391 
x2
 = 
	`__PKHBT
(
b
, 
a
, 16);

394 #i‚de‡
ARM_MATH_BIG_ENDIAN


395 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

397 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

400 
acc3
 = 
	`__SMLALDX
(
x3
, 
y2
,ácc3);

404 
pIn2
 += 4u;

406 
pS¸
 += 4u;

410 
èpC¡
--;

416 
pS¸
 -= 4u;

420 
èpC¡
 = (
§cBLí
) & 3u;

422 
èpC¡
 > 0u)

426 
acc0
 +(*
pS¸
++ * *
pIn2
);

427 
acc1
 +(*
pS¸
++ * *
pIn2
);

428 
acc2
 +(*
pS¸
++ * *
pIn2
);

429 
acc3
 +(*
pS¸
++ * *
pIn2
++);

431 
pS¸
 -= 3u;

434 
èpC¡
--;

437 
blkC¡
--;

441 *
pOut
 = (
	`__SSAT
(
acc0
 >> 15u, 16));

442 
pOut
 +
öc
;

443 *
pOut
 = (
	`__SSAT
(
acc1
 >> 15u, 16));

444 
pOut
 +
öc
;

445 *
pOut
 = (
	`__SSAT
(
acc2
 >> 15u, 16));

446 
pOut
 +
öc
;

447 *
pOut
 = (
	`__SSAT
(
acc3
 >> 15u, 16));

448 
pOut
 +
öc
;

451 
pIn2
 = 
py
;

453 
pS¸©ch
 += 4u;

458 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

461 
blkC¡
 > 0)

464 
pS¸
 = 
pS¸©ch
;

467 
acc0
 = 0;

469 
èpC¡
 = (
§cBLí
) >> 1u;

471 
èpC¡
 > 0u)

474 
acc0
 +(*
pS¸
++ * *
pIn2
++);

475 
acc0
 +(*
pS¸
++ * *
pIn2
++);

478 
èpC¡
--;

481 
èpC¡
 = (
§cBLí
) & 1u;

484 
èpC¡
 > 0u)

488 
acc0
 +(*
pS¸
++ * *
pIn2
++);

491 
èpC¡
--;

494 
blkC¡
--;

497 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

499 
pOut
 +
öc
;

502 
pIn2
 = 
py
;

504 
pS¸©ch
 += 1u;

509 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q7.c

41 
	~"¨m_m©h.h
"

83 
	$¨m_c‹ªœã_›t_q7
(

84 
q7_t
 * 
pSrcA
,

85 
uöt32_t
 
§cALí
,

86 
q7_t
 * 
pSrcB
,

87 
uöt32_t
 
§cBLí
,

88 
q7_t
 * 
pD°
,

89 
q15_t
 * 
pS¸©ch1
,

90 
q15_t
 * 
pS¸©ch2
)

92 
q7_t
 *
pOut
 = 
pD°
;

93 
q15_t
 *
pS¸1
 = 
pS¸©ch1
;

94 
q15_t
 *
pS¸2
 = 
pS¸©ch2
;

95 
q7_t
 *
pIn1
;

96 
q7_t
 *
pIn2
;

97 
q15_t
 *
py
;

98 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

99 
uöt32_t
 
j
, 
k
 = 0u, 
blkC¡
;

100 
öt32_t
 
öc
 = 1;

101 
uöt32_t
 
outBlockSize
;

102 
q15_t
 
x4
;

103 
uöt32_t
 
èpC¡
;

104 
q31_t
 
x1
, 
x2
, 
x3
, 
y1
;

119 if(
§cALí
 >
§cBLí
)

122 
pIn1
 = (
pSrcA
);

125 
pIn2
 = (
pSrcB
);

128 
outBlockSize
 = (2u * 
§cALí
) - 1u;

134 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

137 
pOut
 +
j
;

143 
pIn1
 = (
pSrcB
);

146 
pIn2
 = (
pSrcA
);

149 
j
 = 
§cBLí
;

150 
§cBLí
 = 
§cALí
;

151 
§cALí
 = 
j
;

155 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

158 
öc
 = -1;

164 
k
 = 
§cBLí
 >> 2u;

168 
k
 > 0u)

171 
x4
 = (
q15_t
Ë* 
pIn2
++;

172 *
pS¸2
++ = 
x4
;

173 
x4
 = (
q15_t
Ë* 
pIn2
++;

174 *
pS¸2
++ = 
x4
;

175 
x4
 = (
q15_t
Ë* 
pIn2
++;

176 *
pS¸2
++ = 
x4
;

177 
x4
 = (
q15_t
Ë* 
pIn2
++;

178 *
pS¸2
++ = 
x4
;

181 
k
--;

186 
k
 = 
§cBLí
 % 0x4u;

188 
k
 > 0u)

191 
x4
 = (
q15_t
Ë* 
pIn2
++;

192 *
pS¸2
++ = 
x4
;

195 
k
--;

199 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

202 
pS¸1
 +(
§cBLí
 - 1u);

205 
k
 = 
§cALí
 >> 2u;

209 
k
 > 0u)

212 
x4
 = (
q15_t
Ë* 
pIn1
++;

213 *
pS¸1
++ = 
x4
;

214 
x4
 = (
q15_t
Ë* 
pIn1
++;

215 *
pS¸1
++ = 
x4
;

216 
x4
 = (
q15_t
Ë* 
pIn1
++;

217 *
pS¸1
++ = 
x4
;

218 
x4
 = (
q15_t
Ë* 
pIn1
++;

219 *
pS¸1
++ = 
x4
;

222 
k
--;

227 
k
 = 
§cALí
 % 0x4u;

229 
k
 > 0u)

232 
x4
 = (
q15_t
Ë* 
pIn1
++;

233 *
pS¸1
++ = 
x4
;

236 
k
--;

239 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


242 
	`¨m_fûl_q15
(0, 
pS¸1
, (
§cBLí
 - 1u));

245 
pS¸1
 +(
§cBLí
 - 1u);

250 
k
 = (
§cBLí
 - 1u) >> 2u;

254 
k
 > 0u)

257 *
pS¸1
++ = 0;

258 *
pS¸1
++ = 0;

259 *
pS¸1
++ = 0;

260 *
pS¸1
++ = 0;

263 
k
--;

268 
k
 = (
§cBLí
 - 1u) % 0x4u;

270 
k
 > 0u)

273 *
pS¸1
++ = 0;

276 
k
--;

282 
py
 = 
pS¸©ch2
;

285 
pS¸2
 = 
pS¸©ch2
;

288 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) >> 2;

290 
blkC¡
 > 0)

293 
pS¸1
 = 
pS¸©ch1
;

296 
acc0
 = 0;

297 
acc1
 = 0;

298 
acc2
 = 0;

299 
acc3
 = 0;

302 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

305 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

307 
èpC¡
 = (
§cBLí
) >> 2u;

309 
èpC¡
 > 0u)

313 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
);

316 
acc0
 = 
	`__SMLAD
(
x1
, 
y1
,ácc0);

317 
acc2
 = 
	`__SMLAD
(
x2
, 
y1
,ácc2);

320 #i‚de‡
ARM_MATH_BIG_ENDIAN


321 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

323 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

327 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

330 
x1
 = *
	`__SIMD32
(
pS¸1
)++;

333 #i‚de‡
ARM_MATH_BIG_ENDIAN


334 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

336 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

339 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

342 
y1
 = 
	`_SIMD32_OFFSET
(
pS¸2
 + 2u);

344 
acc0
 = 
	`__SMLAD
(
x2
, 
y1
,ácc0);

346 
acc2
 = 
	`__SMLAD
(
x1
, 
y1
,ácc2);

348 
acc1
 = 
	`__SMLADX
(
x3
, 
y1
,ácc1);

350 
x2
 = *
	`__SIMD32
(
pS¸1
)++;

352 #i‚de‡
ARM_MATH_BIG_ENDIAN


353 
x3
 = 
	`__PKHBT
(
x2
, 
x1
, 0);

355 
x3
 = 
	`__PKHBT
(
x1
, 
x2
, 0);

358 
acc3
 = 
	`__SMLADX
(
x3
, 
y1
,ácc3);

360 
pS¸2
 += 4u;

364 
èpC¡
--;

370 
pS¸1
 -= 4u;

374 
èpC¡
 = (
§cBLí
) & 3u;

376 
èpC¡
 > 0u)

380 
acc0
 +(*
pS¸1
++ * *
pS¸2
);

381 
acc1
 +(*
pS¸1
++ * *
pS¸2
);

382 
acc2
 +(*
pS¸1
++ * *
pS¸2
);

383 
acc3
 +(*
pS¸1
++ * *
pS¸2
++);

385 
pS¸1
 -= 3u;

388 
èpC¡
--;

391 
blkC¡
--;

394 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

395 
pOut
 +
öc
;

396 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7u, 8));

397 
pOut
 +
öc
;

398 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7u, 8));

399 
pOut
 +
öc
;

400 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7u, 8));

401 
pOut
 +
öc
;

404 
pS¸2
 = 
py
;

406 
pS¸©ch1
 += 4u;

411 
blkC¡
 = (
§cALí
 + 
§cBLí
 - 1u) & 0x3;

414 
blkC¡
 > 0)

417 
pS¸1
 = 
pS¸©ch1
;

420 
acc0
 = 0;

422 
èpC¡
 = (
§cBLí
) >> 1u;

424 
èpC¡
 > 0u)

426 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

427 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

430 
èpC¡
--;

433 
èpC¡
 = (
§cBLí
) & 1u;

436 
èpC¡
 > 0u)

440 
acc0
 +(*
pS¸1
++ * *
pS¸2
++);

443 
èpC¡
--;

446 
blkC¡
--;

449 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7u, 8));

451 
pOut
 +
öc
;

454 
pS¸2
 = 
py
;

456 
pS¸©ch1
 += 1u;

460 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q15.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_c‹ªœã_q15
(

80 
q15_t
 * 
pSrcA
,

81 
uöt32_t
 
§cALí
,

82 
q15_t
 * 
pSrcB
,

83 
uöt32_t
 
§cBLí
,

84 
q15_t
 * 
pD°
)

87 #i‡(
	`deföed
(
ARM_MATH_CM4
Ë|| deföed(
ARM_MATH_CM3
)Ë&& !deföed(
UNALIGNED_SUPPORT_DISABLE
)

91 
q15_t
 *
pIn1
;

92 
q15_t
 *
pIn2
;

93 
q15_t
 *
pOut
 = 
pD°
;

94 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

95 
q15_t
 *
px
;

96 
q15_t
 *
py
;

97 
q15_t
 *
pSrc1
;

98 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

99 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

100 
öt32_t
 
öc
 = 1;

116 if(
§cALí
 >
§cBLí
)

119 
pIn1
 = (
pSrcA
);

122 
pIn2
 = (
pSrcB
);

125 
outBlockSize
 = (2u * 
§cALí
) - 1u;

131 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

134 
pOut
 +
j
;

140 
pIn1
 = (
pSrcB
);

143 
pIn2
 = (
pSrcA
);

146 
j
 = 
§cBLí
;

147 
§cBLí
 = 
§cALí
;

148 
§cALí
 = 
j
;

152 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

155 
öc
 = -1;

168 
blockSize1
 = 
§cBLí
 - 1u;

169 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

170 
blockSize3
 = 
blockSize1
;

184 
cou¡
 = 1u;

187 
px
 = 
pIn1
;

190 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

191 
py
 = 
pSrc1
;

198 
blockSize1
 > 0u)

201 
sum
 = 0;

204 
k
 = 
cou¡
 >> 2;

208 
k
 > 0u)

211 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

213 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

216 
k
--;

221 
k
 = 
cou¡
 % 0x4u;

223 
k
 > 0u)

227 
sum
 = 
	`__SMLALD
(*
px
++, *
py
++, sum);

230 
k
--;

234 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

236 
pOut
 +
öc
;

239 
py
 = 
pSrc1
 - 
cou¡
;

240 
px
 = 
pIn1
;

243 
cou¡
++;

246 
blockSize1
--;

260 
px
 = 
pIn1
;

263 
py
 = 
pIn2
;

266 
cou¡
 = 0u;

275 if(
§cBLí
 >= 4u)

278 
blkC¡
 = 
blockSize2
 >> 2u;

280 
blkC¡
 > 0u)

283 
acc0
 = 0;

284 
acc1
 = 0;

285 
acc2
 = 0;

286 
acc3
 = 0;

289 
x0
 = *
	`__SIMD32
(
px
);

291 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

292 
px
 += 2u;

295 
k
 = 
§cBLí
 >> 2u;

303 
c0
 = *
	`__SIMD32
(
py
)++;

306 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

309 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

312 
x2
 = *
	`__SIMD32
(
px
);

315 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

318 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

321 
acc3
 = 
	`__SMLALD
(
x3
, 
c0
,ácc3);

324 
c0
 = *
	`__SIMD32
(
py
)++;

327 
acc0
 = 
	`__SMLALD
(
x2
, 
c0
,ácc0);

330 
acc1
 = 
	`__SMLALD
(
x3
, 
c0
,ácc1);

333 
x0
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

336 
x1
 = 
	`_SIMD32_OFFSET
(
px
 + 3);

338 
px
 += 4u;

341 
acc2
 = 
	`__SMLALD
(
x0
, 
c0
,ácc2);

344 
acc3
 = 
	`__SMLALD
(
x1
, 
c0
,ácc3);

346 } --
k
);

350 
k
 = 
§cBLí
 % 0x4u;

352 if(
k
 == 1u)

355 
c0
 = *
py
;

356 #ifde‡ 
ARM_MATH_BIG_ENDIAN


358 
c0
 = c0 << 16u;

362 
c0
 = c0 & 0x0000FFFF;

366 
x3
 = *
	`__SIMD32
(
px
);

367 
px
++;

370 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

371 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

372 
acc2
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc2);

373 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

376 if(
k
 == 2u)

379 
c0
 = *
	`__SIMD32
(
py
);

382 
x3
 = *
	`__SIMD32
(
px
);

385 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

386 
px
 += 2u;

389 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

390 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

391 
acc2
 = 
	`__SMLALD
(
x3
, 
c0
,ácc2);

392 
acc3
 = 
	`__SMLALD
(
x2
, 
c0
,ácc3);

395 if(
k
 == 3u)

398 
c0
 = *
	`__SIMD32
(
py
)++;

401 
x3
 = *
	`__SIMD32
(
px
);

404 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 1);

407 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

408 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

409 
acc2
 = 
	`__SMLALD
(
x3
, 
c0
,ácc2);

410 
acc3
 = 
	`__SMLALD
(
x2
, 
c0
,ácc3);

412 
c0
 = (*
py
);

415 #ifde‡ 
ARM_MATH_BIG_ENDIAN


417 
c0
 = c0 << 16u;

420 
c0
 = c0 & 0x0000FFFF;

423 
x3
 = 
	`_SIMD32_OFFSET
(
px
 + 2);

424 
px
 += 3u;

427 
acc0
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc0);

428 
acc1
 = 
	`__SMLALD
(
x2
, 
c0
,ácc1);

429 
acc2
 = 
	`__SMLALDX
(
x2
, 
c0
,ácc2);

430 
acc3
 = 
	`__SMLALDX
(
x3
, 
c0
,ácc3);

434 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc0
 >> 15, 16));

436 
pOut
 +
öc
;

438 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc1
 >> 15, 16));

439 
pOut
 +
öc
;

441 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc2
 >> 15, 16));

442 
pOut
 +
öc
;

444 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
acc3
 >> 15, 16));

445 
pOut
 +
öc
;

448 
cou¡
 += 4u;

451 
px
 = 
pIn1
 + 
cou¡
;

452 
py
 = 
pIn2
;

455 
blkC¡
--;

460 
blkC¡
 = 
blockSize2
 % 0x4u;

462 
blkC¡
 > 0u)

465 
sum
 = 0;

468 
k
 = 
§cBLí
 >> 2u;

472 
k
 > 0u)

475 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

476 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

477 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

478 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

481 
k
--;

486 
k
 = 
§cBLí
 % 0x4u;

488 
k
 > 0u)

491 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

494 
k
--;

498 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

500 
pOut
 +
öc
;

503 
cou¡
++;

506 
px
 = 
pIn1
 + 
cou¡
;

507 
py
 = 
pIn2
;

510 
blkC¡
--;

517 
blkC¡
 = 
blockSize2
;

519 
blkC¡
 > 0u)

522 
sum
 = 0;

525 
k
 = 
§cBLí
;

527 
k
 > 0u)

530 
sum
 +((
q63_t
Ë* 
px
++ * *
py
++);

533 
k
--;

537 *
pOut
 = (
q15_t
Ë(
	`__SSAT
(
sum
 >> 15, 16));

539 
pOut
 +
öc
;

542 
cou¡
++;

545 
px
 = 
pIn1
 + 
cou¡
;

546 
py
 = 
pIn2
;

549 
blkC¡
--;

566 
cou¡
 = 
§cBLí
 - 1u;

569 
pSrc1
 = (
pIn1
 + 
§cALí
Ë- (
§cBLí
 - 1u);

570 
px
 = 
pSrc1
;

573 
py
 = 
pIn2
;

579 
blockSize3
 > 0u)

582 
sum
 = 0;

585 
k
 = 
cou¡
 >> 2u;

589 
k
 > 0u)

593 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

595 
sum
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, *__SIMD32(
py
)++, sum);

598 
k
--;

603 
k
 = 
cou¡
 % 0x4u;

605 
k
 > 0u)

608 
sum
 = 
	`__SMLALD
(*
px
++, *
py
++, sum);

611 
k
--;

615 *
pOut
 = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

617 
pOut
 +
öc
;

620 
px
 = ++
pSrc1
;

621 
py
 = 
pIn2
;

624 
cou¡
--;

627 
blockSize3
--;

634 
q15_t
 *
pIn1
 = 
pSrcA
;

635 
q15_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

636 
q63_t
 
sum
;

637 
uöt32_t
 
i
 = 0u, 
j
;

638 
uöt32_t
 
öv
 = 0u;

639 
uöt32_t
 
tŸ
 = 0u;

658 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

660 if(
§cALí
 > 
§cBLí
)

663 
j
 = 
§cALí
 - 
§cBLí
;

666 
pD°
 +
j
;

669 if(
§cALí
 < 
§cBLí
)

672 
pIn1
 = 
pSrcB
;

675 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

678 
pD°
 =ÖD° + 
tŸ
;

681 
j
 = 
§cALí
;

682 
§cALí
 = 
§cBLí
;

683 
§cBLí
 = 
j
;

686 
öv
 = 1;

691 
i
 = 0u; i <
tŸ
; i++)

694 
sum
 = 0;

697 
j
 = 0u; j <
i
; j++)

700 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

703 
sum
 +((
q31_t
Ë
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)]);

707 if(
öv
 == 1)

708 *
pD°
-- = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

710 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15u), 16u);

715 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_c‹ªœã_q31
(

79 
q31_t
 * 
pSrcA
,

80 
uöt32_t
 
§cALí
,

81 
q31_t
 * 
pSrcB
,

82 
uöt32_t
 
§cBLí
,

83 
q31_t
 * 
pD°
)

86 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
q31_t
 *
pIn1
;

91 
q31_t
 *
pIn2
;

92 
q31_t
 *
pOut
 = 
pD°
;

93 
q31_t
 *
px
;

94 
q31_t
 *
py
;

95 
q31_t
 *
pSrc1
;

96 
q63_t
 
sum
, 
acc0
, 
acc1
, 
acc2
;

97 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

98 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

99 
öt32_t
 
öc
 = 1;

115 if(
§cALí
 >
§cBLí
)

118 
pIn1
 = (
pSrcA
);

121 
pIn2
 = (
pSrcB
);

124 
outBlockSize
 = (2u * 
§cALí
) - 1u;

130 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

133 
pOut
 +
j
;

139 
pIn1
 = (
pSrcB
);

142 
pIn2
 = (
pSrcA
);

145 
j
 = 
§cBLí
;

146 
§cBLí
 = 
§cALí
;

147 
§cALí
 = 
j
;

151 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

154 
öc
 = -1;

167 
blockSize1
 = 
§cBLí
 - 1u;

168 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

169 
blockSize3
 = 
blockSize1
;

183 
cou¡
 = 1u;

186 
px
 = 
pIn1
;

189 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

190 
py
 = 
pSrc1
;

197 
blockSize1
 > 0u)

200 
sum
 = 0;

203 
k
 = 
cou¡
 >> 2;

207 
k
 > 0u)

210 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

212 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

214 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

216 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

219 
k
--;

224 
k
 = 
cou¡
 % 0x4u;

226 
k
 > 0u)

230 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

233 
k
--;

237 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

239 
pOut
 +
öc
;

242 
py
 = 
pSrc1
 - 
cou¡
;

243 
px
 = 
pIn1
;

246 
cou¡
++;

249 
blockSize1
--;

263 
px
 = 
pIn1
;

266 
py
 = 
pIn2
;

269 
cou¡
 = 0u;

278 if(
§cBLí
 >= 4u)

281 
blkC¡
 = 
blockSize2
 / 3;

283 
blkC¡
 > 0u)

286 
acc0
 = 0;

287 
acc1
 = 0;

288 
acc2
 = 0;

291 
x0
 = *(
px
++);

292 
x1
 = *(
px
++);

295 
k
 = 
§cBLí
 / 3;

302 
c0
 = *(
py
);

305 
x2
 = *(
px
);

309 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

311 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

313 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

316 
c0
 = *(
py
 + 1u);

319 
x0
 = *(
px
 + 1u);

323 
acc0
 +((
q63_t
Ë
x1
 * 
c0
);

325 
acc1
 +((
q63_t
Ë
x2
 * 
c0
);

327 
acc2
 +((
q63_t
Ë
x0
 * 
c0
);

330 
c0
 = *(
py
 + 2u);

333 
x1
 = *(
px
 + 2u);

337 
acc0
 +((
q63_t
Ë
x2
 * 
c0
);

339 
acc1
 +((
q63_t
Ë
x0
 * 
c0
);

341 
acc2
 +((
q63_t
Ë
x1
 * 
c0
);

344 
px
 += 3u;

345 
py
 += 3u;

347 } --
k
);

351 
k
 = 
§cBLí
 - (3 * (srcBLen / 3));

353 
k
 > 0u)

356 
c0
 = *(
py
++);

359 
x2
 = *(
px
++);

363 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

365 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

367 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

370 
x0
 = 
x1
;

371 
x1
 = 
x2
;

374 
k
--;

378 *
pOut
 = (
q31_t
Ë(
acc0
 >> 31);

380 
pOut
 +
öc
;

382 *
pOut
 = (
q31_t
Ë(
acc1
 >> 31);

383 
pOut
 +
öc
;

385 *
pOut
 = (
q31_t
Ë(
acc2
 >> 31);

386 
pOut
 +
öc
;

389 
cou¡
 += 3u;

392 
px
 = 
pIn1
 + 
cou¡
;

393 
py
 = 
pIn2
;

397 
blkC¡
--;

402 
blkC¡
 = 
blockSize2
 - 3 * (blockSize2 / 3);

404 
blkC¡
 > 0u)

407 
sum
 = 0;

410 
k
 = 
§cBLí
 >> 2u;

414 
k
 > 0u)

417 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

418 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

419 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

420 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

423 
k
--;

428 
k
 = 
§cBLí
 % 0x4u;

430 
k
 > 0u)

433 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

436 
k
--;

440 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

442 
pOut
 +
öc
;

445 
cou¡
++;

448 
px
 = 
pIn1
 + 
cou¡
;

449 
py
 = 
pIn2
;

452 
blkC¡
--;

459 
blkC¡
 = 
blockSize2
;

461 
blkC¡
 > 0u)

464 
sum
 = 0;

467 
k
 = 
§cBLí
;

469 
k
 > 0u)

472 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

475 
k
--;

479 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

481 
pOut
 +
öc
;

484 
cou¡
++;

487 
px
 = 
pIn1
 + 
cou¡
;

488 
py
 = 
pIn2
;

491 
blkC¡
--;

508 
cou¡
 = 
§cBLí
 - 1u;

511 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

512 
px
 = 
pSrc1
;

515 
py
 = 
pIn2
;

521 
blockSize3
 > 0u)

524 
sum
 = 0;

527 
k
 = 
cou¡
 >> 2u;

531 
k
 > 0u)

535 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

537 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

539 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

541 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

544 
k
--;

549 
k
 = 
cou¡
 % 0x4u;

551 
k
 > 0u)

554 
sum
 +(
q63_t
Ë* 
px
++ * (*
py
++);

557 
k
--;

561 *
pOut
 = (
q31_t
Ë(
sum
 >> 31);

563 
pOut
 +
öc
;

566 
px
 = ++
pSrc1
;

567 
py
 = 
pIn2
;

570 
cou¡
--;

573 
blockSize3
--;

580 
q31_t
 *
pIn1
 = 
pSrcA
;

581 
q31_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

582 
q63_t
 
sum
;

583 
uöt32_t
 
i
 = 0u, 
j
;

584 
uöt32_t
 
öv
 = 0u;

585 
uöt32_t
 
tŸ
 = 0u;

604 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

606 if(
§cALí
 > 
§cBLí
)

609 
j
 = 
§cALí
 - 
§cBLí
;

612 
pD°
 +
j
;

615 if(
§cALí
 < 
§cBLí
)

618 
pIn1
 = 
pSrcB
;

621 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

624 
pD°
 =ÖD° + 
tŸ
;

627 
j
 = 
§cALí
;

628 
§cALí
 = 
§cBLí
;

629 
§cBLí
 = 
j
;

632 
öv
 = 1;

637 
i
 = 0u; i <
tŸ
; i++)

640 
sum
 = 0;

643 
j
 = 0u; j <
i
; j++)

646 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

649 
sum
 +((
q63_t
Ë
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)]);

653 if(
öv
 == 1)

654 *
pD°
-- = (
q31_t
Ë(
sum
 >> 31u);

656 *
pD°
++ = (
q31_t
Ë(
sum
 >> 31u);

661 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q7.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_c‹ªœã_q7
(

77 
q7_t
 * 
pSrcA
,

78 
uöt32_t
 
§cALí
,

79 
q7_t
 * 
pSrcB
,

80 
uöt32_t
 
§cBLí
,

81 
q7_t
 * 
pD°
)

85 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
q7_t
 *
pIn1
;

90 
q7_t
 *
pIn2
;

91 
q7_t
 *
pOut
 = 
pD°
;

92 
q7_t
 *
px
;

93 
q7_t
 *
py
;

94 
q7_t
 *
pSrc1
;

95 
q31_t
 
sum
, 
acc0
, 
acc1
, 
acc2
, 
acc3
;

96 
q31_t
 
öput1
, 
öput2
;

97 
q15_t
 
ö1
, 
ö2
;

98 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
, 
c1
;

99 
uöt32_t
 
j
, 
k
 = 0u, 
cou¡
, 
blkC¡
, 
outBlockSize
, 
blockSize1
, 
blockSize2
, 
blockSize3
;

100 
öt32_t
 
öc
 = 1;

116 if(
§cALí
 >
§cBLí
)

119 
pIn1
 = (
pSrcA
);

122 
pIn2
 = (
pSrcB
);

125 
outBlockSize
 = (2u * 
§cALí
) - 1u;

131 
j
 = 
outBlockSize
 - (
§cALí
 + (
§cBLí
 - 1u));

134 
pOut
 +
j
;

140 
pIn1
 = (
pSrcB
);

143 
pIn2
 = (
pSrcA
);

146 
j
 = 
§cBLí
;

147 
§cBLí
 = 
§cALí
;

148 
§cALí
 = 
j
;

152 
pOut
 = 
pD°
 + ((
§cALí
 + 
§cBLí
) - 2u);

155 
öc
 = -1;

168 
blockSize1
 = 
§cBLí
 - 1u;

169 
blockSize2
 = 
§cALí
 - (
§cBLí
 - 1u);

170 
blockSize3
 = 
blockSize1
;

184 
cou¡
 = 1u;

187 
px
 = 
pIn1
;

190 
pSrc1
 = 
pIn2
 + (
§cBLí
 - 1u);

191 
py
 = 
pSrc1
;

198 
blockSize1
 > 0u)

201 
sum
 = 0;

204 
k
 = 
cou¡
 >> 2;

208 
k
 > 0u)

211 
ö1
 = (
q15_t
Ë* 
px
++;

212 
ö2
 = (
q15_t
Ë* 
px
++;

213 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

216 
ö1
 = (
q15_t
Ë* 
py
++;

217 
ö2
 = (
q15_t
Ë* 
py
++;

218 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

222 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

225 
ö1
 = (
q15_t
Ë* 
px
++;

226 
ö2
 = (
q15_t
Ë* 
px
++;

227 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

230 
ö1
 = (
q15_t
Ë* 
py
++;

231 
ö2
 = (
q15_t
Ë* 
py
++;

232 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

236 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

240 
k
--;

245 
k
 = 
cou¡
 % 0x4u;

247 
k
 > 0u)

251 
sum
 +(
q31_t
Ë((
q15_t
Ë* 
px
++ * *
py
++);

254 
k
--;

258 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

260 
pOut
 +
öc
;

263 
py
 = 
pSrc1
 - 
cou¡
;

264 
px
 = 
pIn1
;

267 
cou¡
++;

270 
blockSize1
--;

284 
px
 = 
pIn1
;

287 
py
 = 
pIn2
;

290 
cou¡
 = 0u;

299 if(
§cBLí
 >= 4u)

302 
blkC¡
 = 
blockSize2
 >> 2u;

304 
blkC¡
 > 0u)

307 
acc0
 = 0;

308 
acc1
 = 0;

309 
acc2
 = 0;

310 
acc3
 = 0;

313 
x0
 = *
px
++;

314 
x1
 = *
px
++;

315 
x2
 = *
px
++;

318 
k
 = 
§cBLí
 >> 2u;

325 
c0
 = *
py
++;

327 
c1
 = *
py
++;

330 
x3
 = *
px
++;

333 
ö1
 = (
q15_t
Ë
x0
;

334 
ö2
 = (
q15_t
Ë
x1
;

336 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

339 
ö1
 = (
q15_t
Ë
c0
;

340 
ö2
 = (
q15_t
Ë
c1
;

342 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

345 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

348 
ö1
 = (
q15_t
Ë
x1
;

349 
ö2
 = (
q15_t
Ë
x2
;

351 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

354 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

357 
ö1
 = (
q15_t
Ë
x2
;

358 
ö2
 = (
q15_t
Ë
x3
;

360 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

363 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

366 
x0
 = *(
px
++);

369 
ö1
 = (
q15_t
Ë
x3
;

370 
ö2
 = (
q15_t
Ë
x0
;

372 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

375 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

378 
c0
 = *
py
++;

380 
c1
 = *
py
++;

383 
x1
 = *
px
++;

386 
ö1
 = (
q15_t
Ë
x2
;

387 
ö2
 = (
q15_t
Ë
x3
;

389 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

392 
ö1
 = (
q15_t
Ë
c0
;

393 
ö2
 = (
q15_t
Ë
c1
;

395 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

398 
acc0
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc0);

401 
ö1
 = (
q15_t
Ë
x3
;

402 
ö2
 = (
q15_t
Ë
x0
;

404 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

407 
acc1
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc1);

410 
ö1
 = (
q15_t
Ë
x0
;

411 
ö2
 = (
q15_t
Ë
x1
;

413 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

416 
acc2
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc2);

419 
x2
 = *
px
++;

422 
ö1
 = (
q15_t
Ë
x1
;

423 
ö2
 = (
q15_t
Ë
x2
;

425 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

428 
acc3
 = 
	`__SMLAD
(
öput1
, 
öput2
,ácc3);

430 } --
k
);

434 
k
 = 
§cBLí
 % 0x4u;

436 
k
 > 0u)

439 
c0
 = *
py
++;

442 
x3
 = *
px
++;

446 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

448 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

450 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

452 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

455 
x0
 = 
x1
;

456 
x1
 = 
x2
;

457 
x2
 = 
x3
;

460 
k
--;

464 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc0
 >> 7, 8));

466 
pOut
 +
öc
;

468 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc1
 >> 7, 8));

469 
pOut
 +
öc
;

471 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc2
 >> 7, 8));

472 
pOut
 +
öc
;

474 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
acc3
 >> 7, 8));

475 
pOut
 +
öc
;

477 
cou¡
 += 4u;

479 
px
 = 
pIn1
 + 
cou¡
;

480 
py
 = 
pIn2
;

483 
blkC¡
--;

488 
blkC¡
 = 
blockSize2
 % 0x4u;

490 
blkC¡
 > 0u)

493 
sum
 = 0;

496 
k
 = 
§cBLí
 >> 2u;

500 
k
 > 0u)

503 
ö1
 = (
q15_t
Ë* 
px
++;

504 
ö2
 = (
q15_t
Ë* 
px
++;

505 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

508 
ö1
 = (
q15_t
Ë* 
py
++;

509 
ö2
 = (
q15_t
Ë* 
py
++;

510 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

513 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

516 
ö1
 = (
q15_t
Ë* 
px
++;

517 
ö2
 = (
q15_t
Ë* 
px
++;

518 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

521 
ö1
 = (
q15_t
Ë* 
py
++;

522 
ö2
 = (
q15_t
Ë* 
py
++;

523 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

526 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

529 
k
--;

534 
k
 = 
§cBLí
 % 0x4u;

536 
k
 > 0u)

539 
sum
 +((
q15_t
Ë* 
px
++ * *
py
++);

542 
k
--;

546 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

548 
pOut
 +
öc
;

551 
cou¡
++;

554 
px
 = 
pIn1
 + 
cou¡
;

555 
py
 = 
pIn2
;

558 
blkC¡
--;

565 
blkC¡
 = 
blockSize2
;

567 
blkC¡
 > 0u)

570 
sum
 = 0;

573 
k
 = 
§cBLí
;

575 
k
 > 0u)

578 
sum
 +((
q15_t
Ë* 
px
++ * *
py
++);

581 
k
--;

585 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

587 
pOut
 +
öc
;

590 
cou¡
++;

593 
px
 = 
pIn1
 + 
cou¡
;

594 
py
 = 
pIn2
;

598 
blkC¡
--;

615 
cou¡
 = 
§cBLí
 - 1u;

618 
pSrc1
 = 
pIn1
 + (
§cALí
 - (
§cBLí
 - 1u));

619 
px
 = 
pSrc1
;

622 
py
 = 
pIn2
;

628 
blockSize3
 > 0u)

631 
sum
 = 0;

634 
k
 = 
cou¡
 >> 2u;

638 
k
 > 0u)

641 
ö1
 = (
q15_t
Ë* 
px
++;

642 
ö2
 = (
q15_t
Ë* 
px
++;

643 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

646 
ö1
 = (
q15_t
Ë* 
py
++;

647 
ö2
 = (
q15_t
Ë* 
py
++;

648 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

652 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

655 
ö1
 = (
q15_t
Ë* 
px
++;

656 
ö2
 = (
q15_t
Ë* 
px
++;

657 
öput1
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

660 
ö1
 = (
q15_t
Ë* 
py
++;

661 
ö2
 = (
q15_t
Ë* 
py
++;

662 
öput2
 = ((
q31_t
Ë
ö1
 & 0x0000FFFFË| ((q31_tË
ö2
 << 16);

666 
sum
 = 
	`__SMLAD
(
öput1
, 
öput2
, sum);

669 
k
--;

674 
k
 = 
cou¡
 % 0x4u;

676 
k
 > 0u)

679 
sum
 +((
q15_t
Ë* 
px
++ * *
py
++);

682 
k
--;

686 *
pOut
 = (
q7_t
Ë(
	`__SSAT
(
sum
 >> 7, 8));

688 
pOut
 +
öc
;

691 
px
 = ++
pSrc1
;

692 
py
 = 
pIn2
;

695 
cou¡
--;

698 
blockSize3
--;

705 
q7_t
 *
pIn1
 = 
pSrcA
;

706 
q7_t
 *
pIn2
 = 
pSrcB
 + (
§cBLí
 - 1u);

707 
q31_t
 
sum
;

708 
uöt32_t
 
i
 = 0u, 
j
;

709 
uöt32_t
 
öv
 = 0u;

710 
uöt32_t
 
tŸ
 = 0u;

729 
tŸ
 = ((
§cALí
 + 
§cBLí
) - 2u);

731 if(
§cALí
 > 
§cBLí
)

734 
j
 = 
§cALí
 - 
§cBLí
;

737 
pD°
 +
j
;

740 if(
§cALí
 < 
§cBLí
)

743 
pIn1
 = 
pSrcB
;

746 
pIn2
 = 
pSrcA
 + (
§cALí
 - 1u);

749 
pD°
 =ÖD° + 
tŸ
;

752 
j
 = 
§cALí
;

753 
§cALí
 = 
§cBLí
;

754 
§cBLí
 = 
j
;

757 
öv
 = 1;

762 
i
 = 0u; i <
tŸ
; i++)

765 
sum
 = 0;

768 
j
 = 0u; j <
i
; j++)

771 if((((
i
 - 
j
Ë< 
§cBLí
Ë&& (j < 
§cALí
)))

774 
sum
 +((
q15_t
Ë
pIn1
[
j
] * 
pIn2
[-((
öt32_t
Ë
i
 - j)]);

778 if(
öv
 == 1)

779 *
pD°
-- = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

781 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
sum
 >> 7u), 8u);

786 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c

41 
	~"¨m_m©h.h
"

141 
	$¨m_fú_decim©e_f32
(

142 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

143 
Êﬂt32_t
 * 
pSrc
,

144 
Êﬂt32_t
 * 
pD°
,

145 
uöt32_t
 
blockSize
)

147 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

148 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

149 
Êﬂt32_t
 *
pSèãCu∫t
;

150 
Êﬂt32_t
 *
px
, *
pb
;

151 
Êﬂt32_t
 
sum0
;

152 
Êﬂt32_t
 
x0
, 
c0
;

153 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

154 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

156 #i‚de‡
ARM_MATH_CM0_FAMILY


158 
uöt32_t
 
blkC¡N4
;

159 
Êﬂt32_t
 *
px0
, *
px1
, *
px2
, *
px3
;

160 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

161 
Êﬂt32_t
 
x1
, 
x2
, 
x3
;

167 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

170 
blkC¡
 = 
outBlockSize
 / 4;

171 
blkC¡N4
 = 
outBlockSize
 - (4 * 
blkC¡
);

173 
blkC¡
 > 0u)

176 
i
 = 4 * 
S
->
M
;

180 *
pSèãCu∫t
++ = *
pSrc
++;

182 } --
i
);

185 
acc0
 = 0.0f;

186 
acc1
 = 0.0f;

187 
acc2
 = 0.0f;

188 
acc3
 = 0.0f;

191 
px0
 = 
pSèã
;

192 
px1
 = 
pSèã
 + 
S
->
M
;

193 
px2
 = 
pSèã
 + 2 * 
S
->
M
;

194 
px3
 = 
pSèã
 + 3 * 
S
->
M
;

197 
pb
 = 
pC€ffs
;

200 
èpC¡
 = 
numT≠s
 >> 2;

205 
èpC¡
 > 0u)

208 
c0
 = *(
pb
++);

211 
x0
 = *(
px0
++);

213 
x1
 = *(
px1
++);

215 
x2
 = *(
px2
++);

217 
x3
 = *(
px3
++);

220 
acc0
 +
x0
 * 
c0
;

221 
acc1
 +
x1
 * 
c0
;

222 
acc2
 +
x2
 * 
c0
;

223 
acc3
 +
x3
 * 
c0
;

226 
c0
 = *(
pb
++);

229 
x0
 = *(
px0
++);

230 
x1
 = *(
px1
++);

231 
x2
 = *(
px2
++);

232 
x3
 = *(
px3
++);

235 
acc0
 +
x0
 * 
c0
;

236 
acc1
 +
x1
 * 
c0
;

237 
acc2
 +
x2
 * 
c0
;

238 
acc3
 +
x3
 * 
c0
;

241 
c0
 = *(
pb
++);

244 
x0
 = *(
px0
++);

245 
x1
 = *(
px1
++);

246 
x2
 = *(
px2
++);

247 
x3
 = *(
px3
++);

250 
acc0
 +
x0
 * 
c0
;

251 
acc1
 +
x1
 * 
c0
;

252 
acc2
 +
x2
 * 
c0
;

253 
acc3
 +
x3
 * 
c0
;

256 
c0
 = *(
pb
++);

259 
x0
 = *(
px0
++);

260 
x1
 = *(
px1
++);

261 
x2
 = *(
px2
++);

262 
x3
 = *(
px3
++);

265 
acc0
 +
x0
 * 
c0
;

266 
acc1
 +
x1
 * 
c0
;

267 
acc2
 +
x2
 * 
c0
;

268 
acc3
 +
x3
 * 
c0
;

271 
èpC¡
--;

275 
èpC¡
 = 
numT≠s
 % 0x4u;

277 
èpC¡
 > 0u)

280 
c0
 = *(
pb
++);

283 
x0
 = *(
px0
++);

284 
x1
 = *(
px1
++);

285 
x2
 = *(
px2
++);

286 
x3
 = *(
px3
++);

289 
acc0
 +
x0
 * 
c0
;

290 
acc1
 +
x1
 * 
c0
;

291 
acc2
 +
x2
 * 
c0
;

292 
acc3
 +
x3
 * 
c0
;

295 
èpC¡
--;

300 
pSèã
 =ÖSèã + 4 * 
S
->
M
;

303 *
pD°
++ = 
acc0
;

304 *
pD°
++ = 
acc1
;

305 *
pD°
++ = 
acc2
;

306 *
pD°
++ = 
acc3
;

309 
blkC¡
--;

312 
blkC¡N4
 > 0u)

315 
i
 = 
S
->
M
;

319 *
pSèãCu∫t
++ = *
pSrc
++;

321 } --
i
);

324 
sum0
 = 0.0f;

327 
px
 = 
pSèã
;

330 
pb
 = 
pC€ffs
;

333 
èpC¡
 = 
numT≠s
 >> 2;

337 
èpC¡
 > 0u)

340 
c0
 = *(
pb
++);

343 
x0
 = *(
px
++);

346 
sum0
 +
x0
 * 
c0
;

349 
c0
 = *(
pb
++);

352 
x0
 = *(
px
++);

355 
sum0
 +
x0
 * 
c0
;

358 
c0
 = *(
pb
++);

361 
x0
 = *(
px
++);

364 
sum0
 +
x0
 * 
c0
;

367 
c0
 = *(
pb
++);

370 
x0
 = *(
px
++);

373 
sum0
 +
x0
 * 
c0
;

376 
èpC¡
--;

380 
èpC¡
 = 
numT≠s
 % 0x4u;

382 
èpC¡
 > 0u)

385 
c0
 = *(
pb
++);

388 
x0
 = *(
px
++);

391 
sum0
 +
x0
 * 
c0
;

394 
èpC¡
--;

399 
pSèã
 =ÖSèã + 
S
->
M
;

402 *
pD°
++ = 
sum0
;

405 
blkC¡N4
--;

413 
pSèãCu∫t
 = 
S
->
pSèã
;

415 
i
 = (
numT≠s
 - 1u) >> 2;

418 
i
 > 0u)

420 *
pSèãCu∫t
++ = *
pSèã
++;

421 *
pSèãCu∫t
++ = *
pSèã
++;

422 *
pSèãCu∫t
++ = *
pSèã
++;

423 *
pSèãCu∫t
++ = *
pSèã
++;

426 
i
--;

429 
i
 = (
numT≠s
 - 1u) % 0x04u;

432 
i
 > 0u)

434 *
pSèãCu∫t
++ = *
pSèã
++;

437 
i
--;

446 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

449 
blkC¡
 = 
outBlockSize
;

451 
blkC¡
 > 0u)

454 
i
 = 
S
->
M
;

458 *
pSèãCu∫t
++ = *
pSrc
++;

460 } --
i
);

463 
sum0
 = 0.0f;

466 
px
 = 
pSèã
;

469 
pb
 = 
pC€ffs
;

471 
èpC¡
 = 
numT≠s
;

473 
èpC¡
 > 0u)

476 
c0
 = *
pb
++;

479 
x0
 = *
px
++;

482 
sum0
 +
x0
 * 
c0
;

485 
èpC¡
--;

490 
pSèã
 =ÖSèã + 
S
->
M
;

493 *
pD°
++ = 
sum0
;

496 
blkC¡
--;

504 
pSèãCu∫t
 = 
S
->
pSèã
;

507 
i
 = (
numT≠s
 - 1u);

510 
i
 > 0u)

512 *
pSèãCu∫t
++ = *
pSèã
++;

515 
i
--;

520 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q15.c

41 
	~"¨m_m©h.h
"

78 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


80 
	$¨m_fú_decim©e_Á°_q15
(

81 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

82 
q15_t
 * 
pSrc
,

83 
q15_t
 * 
pD°
,

84 
uöt32_t
 
blockSize
)

86 
q15_t
 *
pSèã
 = 
S
->pState;

87 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

88 
q15_t
 *
pSèãCu∫t
;

89 
q15_t
 *
px
;

90 
q15_t
 *
pb
;

91 
q31_t
 
x0
, 
x1
, 
c0
, 
c1
;

92 
q31_t
 
sum0
;

93 
q31_t
 
acc0
, 
acc1
;

94 
q15_t
 *
px0
, *
px1
;

95 
uöt32_t
 
blkC¡N3
;

96 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

97 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

102 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

106 
blkC¡
 = 
outBlockSize
 / 2;

107 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

110 
blkC¡
 > 0u)

113 
i
 = 2 * 
S
->
M
;

117 *
pSèãCu∫t
++ = *
pSrc
++;

119 } --
i
);

122 
acc0
 = 0;

123 
acc1
 = 0;

126 
px0
 = 
pSèã
;

128 
px1
 = 
pSèã
 + 
S
->
M
;

132 
pb
 = 
pC€ffs
;

135 
èpC¡
 = 
numT≠s
 >> 2;

139 
èpC¡
 > 0u)

142 
c0
 = *
	`__SIMD32
(
pb
)++;

145 
x0
 = *
	`__SIMD32
(
px0
)++;

147 
x1
 = *
	`__SIMD32
(
px1
)++;

150 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

152 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

155 
c0
 = *
	`__SIMD32
(
pb
)++;

158 
x0
 = *
	`__SIMD32
(
px0
)++;

160 
x1
 = *
	`__SIMD32
(
px1
)++;

163 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

165 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

168 
èpC¡
--;

172 
èpC¡
 = 
numT≠s
 % 0x4u;

174 
èpC¡
 > 0u)

177 
c0
 = *
pb
++;

180 
x0
 = *
px0
++;

182 
x1
 = *
px1
++;

185 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

186 
acc1
 = 
	`__SMLAD
(
x1
, 
c0
,ácc1);

189 
èpC¡
--;

194 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

198 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

199 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

202 
blkC¡
--;

207 
blkC¡N3
 > 0u)

210 
i
 = 
S
->
M
;

214 *
pSèãCu∫t
++ = *
pSrc
++;

216 } --
i
);

219 
sum0
 = 0;

222 
px
 = 
pSèã
;

225 
pb
 = 
pC€ffs
;

228 
èpC¡
 = 
numT≠s
 >> 2;

232 
èpC¡
 > 0u)

235 
c0
 = *
	`__SIMD32
(
pb
)++;

238 
x0
 = *
	`__SIMD32
(
px
)++;

241 
c1
 = *
	`__SIMD32
(
pb
)++;

244 
sum0
 = 
	`__SMLAD
(
x0
, 
c0
, sum0);

247 
x0
 = *
	`__SIMD32
(
px
)++;

250 
sum0
 = 
	`__SMLAD
(
x0
, 
c1
, sum0);

253 
èpC¡
--;

257 
èpC¡
 = 
numT≠s
 % 0x4u;

259 
èpC¡
 > 0u)

262 
c0
 = *
pb
++;

265 
x0
 = *
px
++;

268 
sum0
 = 
	`__SMLAD
(
x0
, 
c0
, sum0);

271 
èpC¡
--;

276 
pSèã
 =ÖSèã + 
S
->
M
;

280 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

283 
blkC¡N3
--;

291 
pSèãCu∫t
 = 
S
->
pSèã
;

293 
i
 = (
numT≠s
 - 1u) >> 2u;

296 
i
 > 0u)

298 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

299 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

302 
i
--;

305 
i
 = (
numT≠s
 - 1u) % 0x04u;

308 
i
 > 0u)

310 *
pSèãCu∫t
++ = *
pSèã
++;

313 
i
--;

315 
	}
}

320 
	$¨m_fú_decim©e_Á°_q15
(

321 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

322 
q15_t
 * 
pSrc
,

323 
q15_t
 * 
pD°
,

324 
uöt32_t
 
blockSize
)

326 
q15_t
 *
pSèã
 = 
S
->pState;

327 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

328 
q15_t
 *
pSèãCu∫t
;

329 
q15_t
 *
px
;

330 
q15_t
 *
pb
;

331 
q15_t
 
x0
, 
x1
, 
c0
;

332 
q31_t
 
sum0
;

333 
q31_t
 
acc0
, 
acc1
;

334 
q15_t
 *
px0
, *
px1
;

335 
uöt32_t
 
blkC¡N3
;

336 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

337 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

342 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

346 
blkC¡
 = 
outBlockSize
 / 2;

347 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

349 
blkC¡
 > 0u)

352 
i
 = 2 * 
S
->
M
;

356 *
pSèãCu∫t
++ = *
pSrc
++;

358 } --
i
);

361 
acc0
 = 0;

362 
acc1
 = 0;

365 
px0
 = 
pSèã
;

367 
px1
 = 
pSèã
 + 
S
->
M
;

371 
pb
 = 
pC€ffs
;

374 
èpC¡
 = 
numT≠s
 >> 2;

378 
èpC¡
 > 0u)

381 
c0
 = *
pb
++;

384 
x0
 = *
px0
++;

385 
x1
 = *
px1
++;

388 
acc0
 +
x0
 * 
c0
;

389 
acc1
 +
x1
 * 
c0
;

392 
c0
 = *
pb
++;

395 
x0
 = *
px0
++;

396 
x1
 = *
px1
++;

399 
acc0
 +
x0
 * 
c0
;

400 
acc1
 +
x1
 * 
c0
;

403 
c0
 = *
pb
++;

406 
x0
 = *
px0
++;

407 
x1
 = *
px1
++;

410 
acc0
 +
x0
 * 
c0
;

411 
acc1
 +
x1
 * 
c0
;

414 
c0
 = *
pb
++;

417 
x0
 = *
px0
++;

418 
x1
 = *
px1
++;

421 
acc0
 +
x0
 * 
c0
;

422 
acc1
 +
x1
 * 
c0
;

425 
èpC¡
--;

429 
èpC¡
 = 
numT≠s
 % 0x4u;

431 
èpC¡
 > 0u)

434 
c0
 = *
pb
++;

437 
x0
 = *
px0
++;

438 
x1
 = *
px1
++;

441 
acc0
 +
x0
 * 
c0
;

442 
acc1
 +
x1
 * 
c0
;

445 
èpC¡
--;

450 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

455 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

456 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

460 
blkC¡
--;

463 
blkC¡N3
 > 0u)

466 
i
 = 
S
->
M
;

470 *
pSèãCu∫t
++ = *
pSrc
++;

472 } --
i
);

475 
sum0
 = 0;

478 
px
 = 
pSèã
;

481 
pb
 = 
pC€ffs
;

484 
èpC¡
 = 
numT≠s
 >> 2;

488 
èpC¡
 > 0u)

491 
c0
 = *
pb
++;

494 
x0
 = *
px
++;

497 
sum0
 +
x0
 * 
c0
;

500 
c0
 = *
pb
++;

503 
x0
 = *
px
++;

506 
sum0
 +
x0
 * 
c0
;

509 
c0
 = *
pb
++;

512 
x0
 = *
px
++;

515 
sum0
 +
x0
 * 
c0
;

518 
c0
 = *
pb
++;

521 
x0
 = *
px
++;

524 
sum0
 +
x0
 * 
c0
;

527 
èpC¡
--;

531 
èpC¡
 = 
numT≠s
 % 0x4u;

533 
èpC¡
 > 0u)

536 
c0
 = *
pb
++;

539 
x0
 = *
px
++;

542 
sum0
 +
x0
 * 
c0
;

545 
èpC¡
--;

550 
pSèã
 =ÖSèã + 
S
->
M
;

554 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

557 
blkC¡N3
--;

565 
pSèãCu∫t
 = 
S
->
pSèã
;

567 
i
 = (
numT≠s
 - 1u) >> 2u;

570 
i
 > 0u)

572 *
pSèãCu∫t
++ = *
pSèã
++;

573 *
pSèãCu∫t
++ = *
pSèã
++;

574 *
pSèãCu∫t
++ = *
pSèã
++;

575 *
pSèãCu∫t
++ = *
pSèã
++;

578 
i
--;

581 
i
 = (
numT≠s
 - 1u) % 0x04u;

584 
i
 > 0u)

586 *
pSèãCu∫t
++ = *
pSèã
++;

589 
i
--;

591 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q31.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_fú_decim©e_Á°_q31
(

77 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

78 
q31_t
 * 
pSrc
,

79 
q31_t
 * 
pD°
,

80 
uöt32_t
 
blockSize
)

82 
q31_t
 *
pSèã
 = 
S
->pState;

83 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

84 
q31_t
 *
pSèãCu∫t
;

85 
q31_t
 
x0
, 
c0
;

86 
q31_t
 *
px
;

87 
q31_t
 *
pb
;

88 
q31_t
 
sum0
;

89 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

90 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

91 
uöt32_t
 
blkC¡N2
;

92 
q31_t
 
x1
;

93 
q31_t
 
acc0
, 
acc1
;

94 
q31_t
 *
px0
, *
px1
;

98 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

102 
blkC¡
 = 
outBlockSize
 / 2;

103 
blkC¡N2
 = 
outBlockSize
 - (2 * 
blkC¡
);

105 
blkC¡
 > 0u)

108 
i
 = 2 * 
S
->
M
;

112 *
pSèãCu∫t
++ = *
pSrc
++;

114 } --
i
);

117 
acc0
 = 0;

118 
acc1
 = 0;

121 
px0
 = 
pSèã
;

122 
px1
 = 
pSèã
 + 
S
->
M
;

125 
pb
 = 
pC€ffs
;

128 
èpC¡
 = 
numT≠s
 >> 2;

132 
èpC¡
 > 0u)

135 
c0
 = *(
pb
);

138 
x0
 = *(
px0
);

139 
x1
 = *(
px1
);

142 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

143 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

146 
c0
 = *(
pb
 + 1u);

149 
x0
 = *(
px0
 + 1u);

150 
x1
 = *(
px1
 + 1u);

153 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

154 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

157 
c0
 = *(
pb
 + 2u);

160 
x0
 = *(
px0
 + 2u);

161 
x1
 = *(
px1
 + 2u);

162 
pb
 += 4u;

165 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

166 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

169 
c0
 = *(
pb
 - 1u);

172 
x0
 = *(
px0
 + 3u);

173 
x1
 = *(
px1
 + 3u);

177 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

178 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

181 
px0
 += 4u;

182 
px1
 += 4u;

185 
èpC¡
--;

189 
èpC¡
 = 
numT≠s
 % 0x4u;

191 
èpC¡
 > 0u)

194 
c0
 = *(
pb
++);

197 
x0
 = *(
px0
++);

198 
x1
 = *(
px1
++);

201 
acc0
 = (
q31_t
Ë((((
q63_t
Ëacc0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

202 
acc1
 = (
q31_t
Ë((((
q63_t
Ëacc1 << 32Ë+ ((q63_tË
x1
 * 
c0
)) >> 32);

205 
èpC¡
--;

210 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

213 *
pD°
++ = (
q31_t
Ë(
acc0
 << 1);

214 *
pD°
++ = (
q31_t
Ë(
acc1
 << 1);

217 
blkC¡
--;

220 
blkC¡N2
 > 0u)

223 
i
 = 
S
->
M
;

227 *
pSèãCu∫t
++ = *
pSrc
++;

229 } --
i
);

232 
sum0
 = 0;

235 
px
 = 
pSèã
;

238 
pb
 = 
pC€ffs
;

241 
èpC¡
 = 
numT≠s
 >> 2;

245 
èpC¡
 > 0u)

248 
c0
 = *(
pb
++);

251 
x0
 = *(
px
++);

254 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

257 
c0
 = *(
pb
++);

260 
x0
 = *(
px
++);

263 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

266 
c0
 = *(
pb
++);

269 
x0
 = *(
px
++);

272 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

275 
c0
 = *(
pb
++);

278 
x0
 = *(
px
++);

281 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

284 
èpC¡
--;

288 
èpC¡
 = 
numT≠s
 % 0x4u;

290 
èpC¡
 > 0u)

293 
c0
 = *(
pb
++);

296 
x0
 = *(
px
++);

299 
sum0
 = (
q31_t
Ë((((
q63_t
Ësum0 << 32Ë+ ((q63_tË
x0
 * 
c0
)) >> 32);

302 
èpC¡
--;

307 
pSèã
 =ÖSèã + 
S
->
M
;

310 *
pD°
++ = (
q31_t
Ë(
sum0
 << 1);

313 
blkC¡N2
--;

321 
pSèãCu∫t
 = 
S
->
pSèã
;

323 
i
 = (
numT≠s
 - 1u) >> 2u;

326 
i
 > 0u)

328 *
pSèãCu∫t
++ = *
pSèã
++;

329 *
pSèãCu∫t
++ = *
pSèã
++;

330 *
pSèãCu∫t
++ = *
pSèã
++;

331 *
pSèãCu∫t
++ = *
pSèã
++;

334 
i
--;

337 
i
 = (
numT≠s
 - 1u) % 0x04u;

340 
i
 > 0u)

342 *
pSèãCu∫t
++ = *
pSèã
++;

345 
i
--;

347 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_f32.c

41 
	~"¨m_m©h.h
"

75 
¨m_°©us
 
	$¨m_fú_decim©e_öô_f32
(

76 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

77 
uöt16_t
 
numT≠s
,

78 
uöt8_t
 
M
,

79 
Êﬂt32_t
 * 
pC€ffs
,

80 
Êﬂt32_t
 * 
pSèã
,

81 
uöt32_t
 
blockSize
)

83 
¨m_°©us
 
°©us
;

86 if((
blockSize
 % 
M
) != 0u)

89 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

94 
S
->
numT≠s
 =ÇumTaps;

97 
S
->
pC€ffs
 =ÖCoeffs;

100 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
Êﬂt32_t
));

103 
S
->
pSèã
 =ÖState;

106 
S
->
M
 = M;

108 
°©us
 = 
ARM_MATH_SUCCESS
;

111  (
°©us
);

113 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q15.c

41 
	~"¨m_m©h.h
"

76 
¨m_°©us
 
	$¨m_fú_decim©e_öô_q15
(

77 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

78 
uöt16_t
 
numT≠s
,

79 
uöt8_t
 
M
,

80 
q15_t
 * 
pC€ffs
,

81 
q15_t
 * 
pSèã
,

82 
uöt32_t
 
blockSize
)

85 
¨m_°©us
 
°©us
;

88 if((
blockSize
 % 
M
) != 0u)

91 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

96 
S
->
numT≠s
 =ÇumTaps;

99 
S
->
pC€ffs
 =ÖCoeffs;

102 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

105 
S
->
pSèã
 =ÖState;

108 
S
->
M
 = M;

110 
°©us
 = 
ARM_MATH_SUCCESS
;

113  (
°©us
);

115 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q31.c

41 
	~"¨m_m©h.h
"

75 
¨m_°©us
 
	$¨m_fú_decim©e_öô_q31
(

76 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

77 
uöt16_t
 
numT≠s
,

78 
uöt8_t
 
M
,

79 
q31_t
 * 
pC€ffs
,

80 
q31_t
 * 
pSèã
,

81 
uöt32_t
 
blockSize
)

83 
¨m_°©us
 
°©us
;

86 if((
blockSize
 % 
M
) != 0u)

89 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

94 
S
->
numT≠s
 =ÇumTaps;

97 
S
->
pC€ffs
 =ÖCoeffs;

100 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1)Ë* (
q31_t
));

103 
S
->
pSèã
 =ÖState;

106 
S
->
M
 = M;

108 
°©us
 = 
ARM_MATH_SUCCESS
;

111  (
°©us
);

113 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q15.c

41 
	~"¨m_m©h.h
"

73 #i‚de‡
ARM_MATH_CM0_FAMILY


75 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


77 
	$¨m_fú_decim©e_q15
(

78 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

79 
q15_t
 * 
pSrc
,

80 
q15_t
 * 
pD°
,

81 
uöt32_t
 
blockSize
)

83 
q15_t
 *
pSèã
 = 
S
->pState;

84 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

85 
q15_t
 *
pSèãCu∫t
;

86 
q15_t
 *
px
;

87 
q15_t
 *
pb
;

88 
q31_t
 
x0
, 
x1
, 
c0
, 
c1
;

89 
q63_t
 
sum0
;

90 
q63_t
 
acc0
, 
acc1
;

91 
q15_t
 *
px0
, *
px1
;

92 
uöt32_t
 
blkC¡N3
;

93 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

94 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

99 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

103 
blkC¡
 = 
outBlockSize
 / 2;

104 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

107 
blkC¡
 > 0u)

110 
i
 = 2 * 
S
->
M
;

114 *
pSèãCu∫t
++ = *
pSrc
++;

116 } --
i
);

119 
acc0
 = 0;

120 
acc1
 = 0;

123 
px0
 = 
pSèã
;

125 
px1
 = 
pSèã
 + 
S
->
M
;

129 
pb
 = 
pC€ffs
;

132 
èpC¡
 = 
numT≠s
 >> 2;

136 
èpC¡
 > 0u)

139 
c0
 = *
	`__SIMD32
(
pb
)++;

142 
x0
 = *
	`__SIMD32
(
px0
)++;

144 
x1
 = *
	`__SIMD32
(
px1
)++;

147 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

149 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

152 
c0
 = *
	`__SIMD32
(
pb
)++;

155 
x0
 = *
	`__SIMD32
(
px0
)++;

157 
x1
 = *
	`__SIMD32
(
px1
)++;

160 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

162 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

165 
èpC¡
--;

169 
èpC¡
 = 
numT≠s
 % 0x4u;

171 
èpC¡
 > 0u)

174 
c0
 = *
pb
++;

177 
x0
 = *
px0
++;

179 
x1
 = *
px1
++;

182 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

183 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

186 
èpC¡
--;

191 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

195 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

196 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

199 
blkC¡
--;

204 
blkC¡N3
 > 0u)

207 
i
 = 
S
->
M
;

211 *
pSèãCu∫t
++ = *
pSrc
++;

213 } --
i
);

216 
sum0
 = 0;

219 
px
 = 
pSèã
;

222 
pb
 = 
pC€ffs
;

225 
èpC¡
 = 
numT≠s
 >> 2;

229 
èpC¡
 > 0u)

232 
c0
 = *
	`__SIMD32
(
pb
)++;

235 
x0
 = *
	`__SIMD32
(
px
)++;

238 
c1
 = *
	`__SIMD32
(
pb
)++;

241 
sum0
 = 
	`__SMLALD
(
x0
, 
c0
, sum0);

244 
x0
 = *
	`__SIMD32
(
px
)++;

247 
sum0
 = 
	`__SMLALD
(
x0
, 
c1
, sum0);

250 
èpC¡
--;

254 
èpC¡
 = 
numT≠s
 % 0x4u;

256 
èpC¡
 > 0u)

259 
c0
 = *
pb
++;

262 
x0
 = *
px
++;

265 
sum0
 = 
	`__SMLALD
(
x0
, 
c0
, sum0);

268 
èpC¡
--;

273 
pSèã
 =ÖSèã + 
S
->
M
;

277 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

280 
blkC¡N3
--;

288 
pSèãCu∫t
 = 
S
->
pSèã
;

290 
i
 = (
numT≠s
 - 1u) >> 2u;

293 
i
 > 0u)

295 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

296 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

299 
i
--;

302 
i
 = (
numT≠s
 - 1u) % 0x04u;

305 
i
 > 0u)

307 *
pSèãCu∫t
++ = *
pSèã
++;

310 
i
--;

312 
	}
}

317 
	$¨m_fú_decim©e_q15
(

318 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

319 
q15_t
 * 
pSrc
,

320 
q15_t
 * 
pD°
,

321 
uöt32_t
 
blockSize
)

323 
q15_t
 *
pSèã
 = 
S
->pState;

324 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

325 
q15_t
 *
pSèãCu∫t
;

326 
q15_t
 *
px
;

327 
q15_t
 *
pb
;

328 
q15_t
 
x0
, 
x1
, 
c0
;

329 
q63_t
 
sum0
;

330 
q63_t
 
acc0
, 
acc1
;

331 
q15_t
 *
px0
, *
px1
;

332 
uöt32_t
 
blkC¡N3
;

333 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

334 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

339 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

343 
blkC¡
 = 
outBlockSize
 / 2;

344 
blkC¡N3
 = 
outBlockSize
 - (2 * 
blkC¡
);

346 
blkC¡
 > 0u)

349 
i
 = 2 * 
S
->
M
;

353 *
pSèãCu∫t
++ = *
pSrc
++;

355 } --
i
);

358 
acc0
 = 0;

359 
acc1
 = 0;

362 
px0
 = 
pSèã
;

364 
px1
 = 
pSèã
 + 
S
->
M
;

368 
pb
 = 
pC€ffs
;

371 
èpC¡
 = 
numT≠s
 >> 2;

375 
èpC¡
 > 0u)

378 
c0
 = *
pb
++;

381 
x0
 = *
px0
++;

382 
x1
 = *
px1
++;

385 
acc0
 +
x0
 * 
c0
;

386 
acc1
 +
x1
 * 
c0
;

389 
c0
 = *
pb
++;

392 
x0
 = *
px0
++;

393 
x1
 = *
px1
++;

396 
acc0
 +
x0
 * 
c0
;

397 
acc1
 +
x1
 * 
c0
;

400 
c0
 = *
pb
++;

403 
x0
 = *
px0
++;

404 
x1
 = *
px1
++;

407 
acc0
 +
x0
 * 
c0
;

408 
acc1
 +
x1
 * 
c0
;

411 
c0
 = *
pb
++;

414 
x0
 = *
px0
++;

415 
x1
 = *
px1
++;

418 
acc0
 +
x0
 * 
c0
;

419 
acc1
 +
x1
 * 
c0
;

422 
èpC¡
--;

426 
èpC¡
 = 
numT≠s
 % 0x4u;

428 
èpC¡
 > 0u)

431 
c0
 = *
pb
++;

434 
x0
 = *
px0
++;

435 
x1
 = *
px1
++;

438 
acc0
 +
x0
 * 
c0
;

439 
acc1
 +
x1
 * 
c0
;

442 
èpC¡
--;

447 
pSèã
 =ÖSèã + 
S
->
M
 * 2;

452 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

453 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

456 
blkC¡
--;

459 
blkC¡N3
 > 0u)

462 
i
 = 
S
->
M
;

466 *
pSèãCu∫t
++ = *
pSrc
++;

468 } --
i
);

471 
sum0
 = 0;

474 
px
 = 
pSèã
;

477 
pb
 = 
pC€ffs
;

480 
èpC¡
 = 
numT≠s
 >> 2;

484 
èpC¡
 > 0u)

487 
c0
 = *
pb
++;

490 
x0
 = *
px
++;

493 
sum0
 +
x0
 * 
c0
;

496 
c0
 = *
pb
++;

499 
x0
 = *
px
++;

502 
sum0
 +
x0
 * 
c0
;

505 
c0
 = *
pb
++;

508 
x0
 = *
px
++;

511 
sum0
 +
x0
 * 
c0
;

514 
c0
 = *
pb
++;

517 
x0
 = *
px
++;

520 
sum0
 +
x0
 * 
c0
;

523 
èpC¡
--;

527 
èpC¡
 = 
numT≠s
 % 0x4u;

529 
èpC¡
 > 0u)

532 
c0
 = *
pb
++;

535 
x0
 = *
px
++;

538 
sum0
 +
x0
 * 
c0
;

541 
èpC¡
--;

546 
pSèã
 =ÖSèã + 
S
->
M
;

550 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

553 
blkC¡N3
--;

561 
pSèãCu∫t
 = 
S
->
pSèã
;

563 
i
 = (
numT≠s
 - 1u) >> 2u;

566 
i
 > 0u)

568 *
pSèãCu∫t
++ = *
pSèã
++;

569 *
pSèãCu∫t
++ = *
pSèã
++;

570 *
pSèãCu∫t
++ = *
pSèã
++;

571 *
pSèãCu∫t
++ = *
pSèã
++;

574 
i
--;

577 
i
 = (
numT≠s
 - 1u) % 0x04u;

580 
i
 > 0u)

582 *
pSèãCu∫t
++ = *
pSèã
++;

585 
i
--;

587 
	}
}

595 
	$¨m_fú_decim©e_q15
(

596 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

597 
q15_t
 * 
pSrc
,

598 
q15_t
 * 
pD°
,

599 
uöt32_t
 
blockSize
)

601 
q15_t
 *
pSèã
 = 
S
->pState;

602 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

603 
q15_t
 *
pSèãCu∫t
;

604 
q15_t
 *
px
;

605 
q15_t
 *
pb
;

606 
q31_t
 
x0
, 
c0
;

607 
q63_t
 
sum0
;

608 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

609 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

617 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

620 
blkC¡
 = 
outBlockSize
;

622 
blkC¡
 > 0u)

625 
i
 = 
S
->
M
;

629 *
pSèãCu∫t
++ = *
pSrc
++;

631 } --
i
);

634 
sum0
 = 0;

637 
px
 = 
pSèã
;

640 
pb
 = 
pC€ffs
;

642 
èpC¡
 = 
numT≠s
;

644 
èpC¡
 > 0u)

647 
c0
 = *
pb
++;

650 
x0
 = *
px
++;

653 
sum0
 +(
q31_t
Ë
x0
 *
c0
;

656 
èpC¡
--;

661 
pSèã
 =ÖSèã + 
S
->
M
;

665 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

668 
blkC¡
--;

676 
pSèãCu∫t
 = 
S
->
pSèã
;

678 
i
 = 
numT≠s
 - 1u;

681 
i
 > 0u)

683 *
pSèãCu∫t
++ = *
pSèã
++;

686 
i
--;

690 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_decim©e_q31
(

73 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

74 
q31_t
 * 
pSrc
,

75 
q31_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q31_t
 *
pSèã
 = 
S
->pState;

79 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

80 
q31_t
 *
pSèãCu∫t
;

81 
q31_t
 
x0
, 
c0
;

82 
q31_t
 *
px
;

83 
q31_t
 *
pb
;

84 
q63_t
 
sum0
;

85 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

86 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
outBlockSize
 = 
blockSize
 / 
S
->
M
;

89 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

98 
blkC¡
 = 
outBlockSize
;

100 
blkC¡
 > 0u)

103 
i
 = 
S
->
M
;

107 *
pSèãCu∫t
++ = *
pSrc
++;

109 } --
i
);

112 
sum0
 = 0;

115 
px
 = 
pSèã
;

118 
pb
 = 
pC€ffs
;

121 
èpC¡
 = 
numT≠s
 >> 2;

125 
èpC¡
 > 0u)

128 
c0
 = *(
pb
++);

131 
x0
 = *(
px
++);

134 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

137 
c0
 = *(
pb
++);

140 
x0
 = *(
px
++);

143 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

146 
c0
 = *(
pb
++);

149 
x0
 = *(
px
++);

152 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

155 
c0
 = *(
pb
++);

158 
x0
 = *(
px
++);

161 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

164 
èpC¡
--;

168 
èpC¡
 = 
numT≠s
 % 0x4u;

170 
èpC¡
 > 0u)

173 
c0
 = *(
pb
++);

176 
x0
 = *(
px
++);

179 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

182 
èpC¡
--;

187 
pSèã
 =ÖSèã + 
S
->
M
;

190 *
pD°
++ = (
q31_t
Ë(
sum0
 >> 31);

193 
blkC¡
--;

201 
pSèãCu∫t
 = 
S
->
pSèã
;

203 
i
 = (
numT≠s
 - 1u) >> 2u;

206 
i
 > 0u)

208 *
pSèãCu∫t
++ = *
pSèã
++;

209 *
pSèãCu∫t
++ = *
pSèã
++;

210 *
pSèãCu∫t
++ = *
pSèã
++;

211 *
pSèãCu∫t
++ = *
pSèã
++;

214 
i
--;

217 
i
 = (
numT≠s
 - 1u) % 0x04u;

220 
i
 > 0u)

222 *
pSèãCu∫t
++ = *
pSèã
++;

225 
i
--;

234 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

237 
blkC¡
 = 
outBlockSize
;

239 
blkC¡
 > 0u)

242 
i
 = 
S
->
M
;

246 *
pSèãCu∫t
++ = *
pSrc
++;

248 } --
i
);

251 
sum0
 = 0;

254 
px
 = 
pSèã
;

257 
pb
 = 
pC€ffs
;

259 
èpC¡
 = 
numT≠s
;

261 
èpC¡
 > 0u)

264 
c0
 = *
pb
++;

267 
x0
 = *
px
++;

270 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

273 
èpC¡
--;

278 
pSèã
 =ÖSèã + 
S
->
M
;

281 *
pD°
++ = (
q31_t
Ë(
sum0
 >> 31);

284 
blkC¡
--;

292 
pSèãCu∫t
 = 
S
->
pSèã
;

294 
i
 = 
numT≠s
 - 1u;

297 
i
 > 0u)

299 *
pSèãCu∫t
++ = *
pSèã
++;

302 
i
--;

307 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_f32.c

41 
	~"¨m_m©h.h
"

134 #i‡
deföed
(
ARM_MATH_CM7
)

136 
	$¨m_fú_f32
(

137 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

138 
Êﬂt32_t
 * 
pSrc
,

139 
Êﬂt32_t
 * 
pD°
,

140 
uöt32_t
 
blockSize
)

142 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

143 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

144 
Êﬂt32_t
 *
pSèãCu∫t
;

145 
Êﬂt32_t
 *
px
, *
pb
;

146 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

147 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
, 
x7
, 
c0
;

148 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

149 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

153 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

163 
blkC¡
 = 
blockSize
 >> 3;

167 
blkC¡
 > 0u)

170 *
pSèãCu∫t
++ = *
pSrc
++;

171 *
pSèãCu∫t
++ = *
pSrc
++;

172 *
pSèãCu∫t
++ = *
pSrc
++;

173 *
pSèãCu∫t
++ = *
pSrc
++;

176 
acc0
 = 0.0f;

177 
acc1
 = 0.0f;

178 
acc2
 = 0.0f;

179 
acc3
 = 0.0f;

180 
acc4
 = 0.0f;

181 
acc5
 = 0.0f;

182 
acc6
 = 0.0f;

183 
acc7
 = 0.0f;

186 
px
 = 
pSèã
;

189 
pb
 = (
pC€ffs
);

194 *
pSèãCu∫t
++ = *
pSrc
++;

195 *
pSèãCu∫t
++ = *
pSrc
++;

196 *
pSèãCu∫t
++ = *
pSrc
++;

197 *
pSèãCu∫t
++ = *
pSrc
++;

200 
x0
 = *
px
++;

201 
x1
 = *
px
++;

202 
x2
 = *
px
++;

203 
x3
 = *
px
++;

204 
x4
 = *
px
++;

205 
x5
 = *
px
++;

206 
x6
 = *
px
++;

209 
èpC¡
 = 
numT≠s
 >> 3u;

213 
èpC¡
 > 0u)

216 
c0
 = *(
pb
++);

219 
x7
 = *(
px
++);

222 
acc0
 +
x0
 * 
c0
;

225 
acc1
 +
x1
 * 
c0
;

228 
acc2
 +
x2
 * 
c0
;

231 
acc3
 +
x3
 * 
c0
;

234 
acc4
 +
x4
 * 
c0
;

237 
acc5
 +
x5
 * 
c0
;

240 
acc6
 +
x6
 * 
c0
;

243 
acc7
 +
x7
 * 
c0
;

246 
c0
 = *(
pb
++);

249 
x0
 = *(
px
++);

252 
acc0
 +
x1
 * 
c0
;

253 
acc1
 +
x2
 * 
c0
;

254 
acc2
 +
x3
 * 
c0
;

255 
acc3
 +
x4
 * 
c0
;

256 
acc4
 +
x5
 * 
c0
;

257 
acc5
 +
x6
 * 
c0
;

258 
acc6
 +
x7
 * 
c0
;

259 
acc7
 +
x0
 * 
c0
;

262 
c0
 = *(
pb
++);

265 
x1
 = *(
px
++);

268 
acc0
 +
x2
 * 
c0
;

269 
acc1
 +
x3
 * 
c0
;

270 
acc2
 +
x4
 * 
c0
;

271 
acc3
 +
x5
 * 
c0
;

272 
acc4
 +
x6
 * 
c0
;

273 
acc5
 +
x7
 * 
c0
;

274 
acc6
 +
x0
 * 
c0
;

275 
acc7
 +
x1
 * 
c0
;

278 
c0
 = *(
pb
++);

281 
x2
 = *(
px
++);

284 
acc0
 +
x3
 * 
c0
;

285 
acc1
 +
x4
 * 
c0
;

286 
acc2
 +
x5
 * 
c0
;

287 
acc3
 +
x6
 * 
c0
;

288 
acc4
 +
x7
 * 
c0
;

289 
acc5
 +
x0
 * 
c0
;

290 
acc6
 +
x1
 * 
c0
;

291 
acc7
 +
x2
 * 
c0
;

294 
c0
 = *(
pb
++);

297 
x3
 = *(
px
++);

299 
acc0
 +
x4
 * 
c0
;

300 
acc1
 +
x5
 * 
c0
;

301 
acc2
 +
x6
 * 
c0
;

302 
acc3
 +
x7
 * 
c0
;

303 
acc4
 +
x0
 * 
c0
;

304 
acc5
 +
x1
 * 
c0
;

305 
acc6
 +
x2
 * 
c0
;

306 
acc7
 +
x3
 * 
c0
;

309 
c0
 = *(
pb
++);

312 
x4
 = *(
px
++);

315 
acc0
 +
x5
 * 
c0
;

316 
acc1
 +
x6
 * 
c0
;

317 
acc2
 +
x7
 * 
c0
;

318 
acc3
 +
x0
 * 
c0
;

319 
acc4
 +
x1
 * 
c0
;

320 
acc5
 +
x2
 * 
c0
;

321 
acc6
 +
x3
 * 
c0
;

322 
acc7
 +
x4
 * 
c0
;

325 
c0
 = *(
pb
++);

328 
x5
 = *(
px
++);

331 
acc0
 +
x6
 * 
c0
;

332 
acc1
 +
x7
 * 
c0
;

333 
acc2
 +
x0
 * 
c0
;

334 
acc3
 +
x1
 * 
c0
;

335 
acc4
 +
x2
 * 
c0
;

336 
acc5
 +
x3
 * 
c0
;

337 
acc6
 +
x4
 * 
c0
;

338 
acc7
 +
x5
 * 
c0
;

341 
c0
 = *(
pb
++);

344 
x6
 = *(
px
++);

347 
acc0
 +
x7
 * 
c0
;

348 
acc1
 +
x0
 * 
c0
;

349 
acc2
 +
x1
 * 
c0
;

350 
acc3
 +
x2
 * 
c0
;

351 
acc4
 +
x3
 * 
c0
;

352 
acc5
 +
x4
 * 
c0
;

353 
acc6
 +
x5
 * 
c0
;

354 
acc7
 +
x6
 * 
c0
;

356 
èpC¡
--;

360 
èpC¡
 = 
numT≠s
 % 0x8u;

362 
èpC¡
 > 0u)

365 
c0
 = *(
pb
++);

368 
x7
 = *(
px
++);

371 
acc0
 +
x0
 * 
c0
;

372 
acc1
 +
x1
 * 
c0
;

373 
acc2
 +
x2
 * 
c0
;

374 
acc3
 +
x3
 * 
c0
;

375 
acc4
 +
x4
 * 
c0
;

376 
acc5
 +
x5
 * 
c0
;

377 
acc6
 +
x6
 * 
c0
;

378 
acc7
 +
x7
 * 
c0
;

381 
x0
 = 
x1
;

382 
x1
 = 
x2
;

383 
x2
 = 
x3
;

384 
x3
 = 
x4
;

385 
x4
 = 
x5
;

386 
x5
 = 
x6
;

387 
x6
 = 
x7
;

390 
èpC¡
--;

394 
pSèã
 =ÖState + 8;

397 *
pD°
++ = 
acc0
;

398 *
pD°
++ = 
acc1
;

399 *
pD°
++ = 
acc2
;

400 *
pD°
++ = 
acc3
;

401 *
pD°
++ = 
acc4
;

402 *
pD°
++ = 
acc5
;

403 *
pD°
++ = 
acc6
;

404 *
pD°
++ = 
acc7
;

406 
blkC¡
--;

411 
blkC¡
 = 
blockSize
 % 0x8u;

413 
blkC¡
 > 0u)

416 *
pSèãCu∫t
++ = *
pSrc
++;

419 
acc0
 = 0.0f;

422 
px
 = 
pSèã
;

425 
pb
 = (
pC€ffs
);

427 
i
 = 
numT≠s
;

432 
acc0
 +*
px
++ * *
pb
++;

433 
i
--;

435 } 
i
 > 0u);

438 *
pD°
++ = 
acc0
;

441 
pSèã
 =ÖState + 1;

443 
blkC¡
--;

451 
pSèãCu∫t
 = 
S
->
pSèã
;

453 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

456 
èpC¡
 > 0u)

458 *
pSèãCu∫t
++ = *
pSèã
++;

459 *
pSèãCu∫t
++ = *
pSèã
++;

460 *
pSèãCu∫t
++ = *
pSèã
++;

461 *
pSèãCu∫t
++ = *
pSèã
++;

464 
èpC¡
--;

468 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

471 
èpC¡
 > 0u)

473 *
pSèãCu∫t
++ = *
pSèã
++;

476 
èpC¡
--;

478 
	}
}

480 #ñi‡
deföed
(
ARM_MATH_CM0_FAMILY
)

482 
	$¨m_fú_f32
(

483 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

484 
Êﬂt32_t
 * 
pSrc
,

485 
Êﬂt32_t
 * 
pD°
,

486 
uöt32_t
 
blockSize
)

488 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

489 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

490 
Êﬂt32_t
 *
pSèãCu∫t
;

491 
Êﬂt32_t
 *
px
, *
pb
;

492 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

493 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

497 
Êﬂt32_t
 
acc
;

501 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

504 
blkC¡
 = 
blockSize
;

506 
blkC¡
 > 0u)

509 *
pSèãCu∫t
++ = *
pSrc
++;

512 
acc
 = 0.0f;

515 
px
 = 
pSèã
;

518 
pb
 = 
pC€ffs
;

520 
i
 = 
numT≠s
;

526 
acc
 +*
px
++ * *
pb
++;

527 
i
--;

529 } 
i
 > 0u);

532 *
pD°
++ = 
acc
;

535 
pSèã
 =ÖState + 1;

537 
blkC¡
--;

545 
pSèãCu∫t
 = 
S
->
pSèã
;

548 
èpC¡
 = 
numT≠s
 - 1u;

551 
èpC¡
 > 0u)

553 *
pSèãCu∫t
++ = *
pSèã
++;

556 
èpC¡
--;

559 
	}
}

565 
	$¨m_fú_f32
(

566 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

567 
Êﬂt32_t
 * 
pSrc
,

568 
Êﬂt32_t
 * 
pD°
,

569 
uöt32_t
 
blockSize
)

571 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

572 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

573 
Êﬂt32_t
 *
pSèãCu∫t
;

574 
Êﬂt32_t
 *
px
, *
pb
;

575 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
, 
acc4
, 
acc5
, 
acc6
, 
acc7
;

576 
Êﬂt32_t
 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
, 
x7
, 
c0
;

577 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

578 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

579 
Êﬂt32_t
 
p0
,
p1
,
p2
,
p3
,
p4
,
p5
,
p6
,
p7
;

583 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

593 
blkC¡
 = 
blockSize
 >> 3;

597 
blkC¡
 > 0u)

600 *
pSèãCu∫t
++ = *
pSrc
++;

601 *
pSèãCu∫t
++ = *
pSrc
++;

602 *
pSèãCu∫t
++ = *
pSrc
++;

603 *
pSèãCu∫t
++ = *
pSrc
++;

606 
acc0
 = 0.0f;

607 
acc1
 = 0.0f;

608 
acc2
 = 0.0f;

609 
acc3
 = 0.0f;

610 
acc4
 = 0.0f;

611 
acc5
 = 0.0f;

612 
acc6
 = 0.0f;

613 
acc7
 = 0.0f;

616 
px
 = 
pSèã
;

619 
pb
 = (
pC€ffs
);

624 *
pSèãCu∫t
++ = *
pSrc
++;

625 *
pSèãCu∫t
++ = *
pSrc
++;

626 *
pSèãCu∫t
++ = *
pSrc
++;

627 *
pSèãCu∫t
++ = *
pSrc
++;

630 
x0
 = *
px
++;

631 
x1
 = *
px
++;

632 
x2
 = *
px
++;

633 
x3
 = *
px
++;

634 
x4
 = *
px
++;

635 
x5
 = *
px
++;

636 
x6
 = *
px
++;

639 
èpC¡
 = 
numT≠s
 >> 3u;

643 
èpC¡
 > 0u)

646 
c0
 = *(
pb
++);

649 
x7
 = *(
px
++);

652 
p0
 = 
x0
 * 
c0
;

655 
p1
 = 
x1
 * 
c0
;

658 
p2
 = 
x2
 * 
c0
;

661 
p3
 = 
x3
 * 
c0
;

664 
p4
 = 
x4
 * 
c0
;

667 
p5
 = 
x5
 * 
c0
;

670 
p6
 = 
x6
 * 
c0
;

673 
p7
 = 
x7
 * 
c0
;

676 
c0
 = *(
pb
++);

679 
x0
 = *(
px
++);

681 
acc0
 +
p0
;

682 
acc1
 +
p1
;

683 
acc2
 +
p2
;

684 
acc3
 +
p3
;

685 
acc4
 +
p4
;

686 
acc5
 +
p5
;

687 
acc6
 +
p6
;

688 
acc7
 +
p7
;

692 
p0
 = 
x1
 * 
c0
;

693 
p1
 = 
x2
 * 
c0
;

694 
p2
 = 
x3
 * 
c0
;

695 
p3
 = 
x4
 * 
c0
;

696 
p4
 = 
x5
 * 
c0
;

697 
p5
 = 
x6
 * 
c0
;

698 
p6
 = 
x7
 * 
c0
;

699 
p7
 = 
x0
 * 
c0
;

702 
c0
 = *(
pb
++);

705 
x1
 = *(
px
++);

707 
acc0
 +
p0
;

708 
acc1
 +
p1
;

709 
acc2
 +
p2
;

710 
acc3
 +
p3
;

711 
acc4
 +
p4
;

712 
acc5
 +
p5
;

713 
acc6
 +
p6
;

714 
acc7
 +
p7
;

717 
p0
 = 
x2
 * 
c0
;

718 
p1
 = 
x3
 * 
c0
;

719 
p2
 = 
x4
 * 
c0
;

720 
p3
 = 
x5
 * 
c0
;

721 
p4
 = 
x6
 * 
c0
;

722 
p5
 = 
x7
 * 
c0
;

723 
p6
 = 
x0
 * 
c0
;

724 
p7
 = 
x1
 * 
c0
;

727 
c0
 = *(
pb
++);

730 
x2
 = *(
px
++);

732 
acc0
 +
p0
;

733 
acc1
 +
p1
;

734 
acc2
 +
p2
;

735 
acc3
 +
p3
;

736 
acc4
 +
p4
;

737 
acc5
 +
p5
;

738 
acc6
 +
p6
;

739 
acc7
 +
p7
;

742 
p0
 = 
x3
 * 
c0
;

743 
p1
 = 
x4
 * 
c0
;

744 
p2
 = 
x5
 * 
c0
;

745 
p3
 = 
x6
 * 
c0
;

746 
p4
 = 
x7
 * 
c0
;

747 
p5
 = 
x0
 * 
c0
;

748 
p6
 = 
x1
 * 
c0
;

749 
p7
 = 
x2
 * 
c0
;

752 
c0
 = *(
pb
++);

755 
x3
 = *(
px
++);

757 
acc0
 +
p0
;

758 
acc1
 +
p1
;

759 
acc2
 +
p2
;

760 
acc3
 +
p3
;

761 
acc4
 +
p4
;

762 
acc5
 +
p5
;

763 
acc6
 +
p6
;

764 
acc7
 +
p7
;

767 
p0
 = 
x4
 * 
c0
;

768 
p1
 = 
x5
 * 
c0
;

769 
p2
 = 
x6
 * 
c0
;

770 
p3
 = 
x7
 * 
c0
;

771 
p4
 = 
x0
 * 
c0
;

772 
p5
 = 
x1
 * 
c0
;

773 
p6
 = 
x2
 * 
c0
;

774 
p7
 = 
x3
 * 
c0
;

777 
c0
 = *(
pb
++);

780 
x4
 = *(
px
++);

782 
acc0
 +
p0
;

783 
acc1
 +
p1
;

784 
acc2
 +
p2
;

785 
acc3
 +
p3
;

786 
acc4
 +
p4
;

787 
acc5
 +
p5
;

788 
acc6
 +
p6
;

789 
acc7
 +
p7
;

792 
p0
 = 
x5
 * 
c0
;

793 
p1
 = 
x6
 * 
c0
;

794 
p2
 = 
x7
 * 
c0
;

795 
p3
 = 
x0
 * 
c0
;

796 
p4
 = 
x1
 * 
c0
;

797 
p5
 = 
x2
 * 
c0
;

798 
p6
 = 
x3
 * 
c0
;

799 
p7
 = 
x4
 * 
c0
;

802 
c0
 = *(
pb
++);

805 
x5
 = *(
px
++);

807 
acc0
 +
p0
;

808 
acc1
 +
p1
;

809 
acc2
 +
p2
;

810 
acc3
 +
p3
;

811 
acc4
 +
p4
;

812 
acc5
 +
p5
;

813 
acc6
 +
p6
;

814 
acc7
 +
p7
;

817 
p0
 = 
x6
 * 
c0
;

818 
p1
 = 
x7
 * 
c0
;

819 
p2
 = 
x0
 * 
c0
;

820 
p3
 = 
x1
 * 
c0
;

821 
p4
 = 
x2
 * 
c0
;

822 
p5
 = 
x3
 * 
c0
;

823 
p6
 = 
x4
 * 
c0
;

824 
p7
 = 
x5
 * 
c0
;

827 
c0
 = *(
pb
++);

830 
x6
 = *(
px
++);

832 
acc0
 +
p0
;

833 
acc1
 +
p1
;

834 
acc2
 +
p2
;

835 
acc3
 +
p3
;

836 
acc4
 +
p4
;

837 
acc5
 +
p5
;

838 
acc6
 +
p6
;

839 
acc7
 +
p7
;

842 
p0
 = 
x7
 * 
c0
;

843 
p1
 = 
x0
 * 
c0
;

844 
p2
 = 
x1
 * 
c0
;

845 
p3
 = 
x2
 * 
c0
;

846 
p4
 = 
x3
 * 
c0
;

847 
p5
 = 
x4
 * 
c0
;

848 
p6
 = 
x5
 * 
c0
;

849 
p7
 = 
x6
 * 
c0
;

851 
èpC¡
--;

853 
acc0
 +
p0
;

854 
acc1
 +
p1
;

855 
acc2
 +
p2
;

856 
acc3
 +
p3
;

857 
acc4
 +
p4
;

858 
acc5
 +
p5
;

859 
acc6
 +
p6
;

860 
acc7
 +
p7
;

864 
èpC¡
 = 
numT≠s
 % 0x8u;

866 
èpC¡
 > 0u)

869 
c0
 = *(
pb
++);

872 
x7
 = *(
px
++);

875 
p0
 = 
x0
 * 
c0
;

876 
p1
 = 
x1
 * 
c0
;

877 
p2
 = 
x2
 * 
c0
;

878 
p3
 = 
x3
 * 
c0
;

879 
p4
 = 
x4
 * 
c0
;

880 
p5
 = 
x5
 * 
c0
;

881 
p6
 = 
x6
 * 
c0
;

882 
p7
 = 
x7
 * 
c0
;

885 
x0
 = 
x1
;

886 
x1
 = 
x2
;

887 
x2
 = 
x3
;

888 
x3
 = 
x4
;

889 
x4
 = 
x5
;

890 
x5
 = 
x6
;

891 
x6
 = 
x7
;

893 
acc0
 +
p0
;

894 
acc1
 +
p1
;

895 
acc2
 +
p2
;

896 
acc3
 +
p3
;

897 
acc4
 +
p4
;

898 
acc5
 +
p5
;

899 
acc6
 +
p6
;

900 
acc7
 +
p7
;

903 
èpC¡
--;

907 
pSèã
 =ÖState + 8;

910 *
pD°
++ = 
acc0
;

911 *
pD°
++ = 
acc1
;

912 *
pD°
++ = 
acc2
;

913 *
pD°
++ = 
acc3
;

914 *
pD°
++ = 
acc4
;

915 *
pD°
++ = 
acc5
;

916 *
pD°
++ = 
acc6
;

917 *
pD°
++ = 
acc7
;

919 
blkC¡
--;

924 
blkC¡
 = 
blockSize
 % 0x8u;

926 
blkC¡
 > 0u)

929 *
pSèãCu∫t
++ = *
pSrc
++;

932 
acc0
 = 0.0f;

935 
px
 = 
pSèã
;

938 
pb
 = (
pC€ffs
);

940 
i
 = 
numT≠s
;

945 
acc0
 +*
px
++ * *
pb
++;

946 
i
--;

948 } 
i
 > 0u);

951 *
pD°
++ = 
acc0
;

954 
pSèã
 =ÖState + 1;

956 
blkC¡
--;

964 
pSèãCu∫t
 = 
S
->
pSèã
;

966 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

969 
èpC¡
 > 0u)

971 *
pSèãCu∫t
++ = *
pSèã
++;

972 *
pSèãCu∫t
++ = *
pSèã
++;

973 *
pSèãCu∫t
++ = *
pSèã
++;

974 *
pSèãCu∫t
++ = *
pSèã
++;

977 
èpC¡
--;

981 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

984 
èpC¡
 > 0u)

986 *
pSèãCu∫t
++ = *
pSèã
++;

989 
èpC¡
--;

991 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q15.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_Á°_q15
(

73 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

74 
q15_t
 * 
pSrc
,

75 
q15_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q15_t
 *
pSèã
 = 
S
->pState;

79 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

80 
q15_t
 *
pSèãCu∫t
;

81 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

82 
q15_t
 *
pb
;

83 
q15_t
 *
px
;

84 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

85 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

86 
uöt32_t
 
èpC¡
, 
blkC¡
;

91 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

102 
blkC¡
 = 
blockSize
 >> 2;

106 
blkC¡
 > 0u)

110 *
pSèãCu∫t
++ = *
pSrc
++;

111 *
pSèãCu∫t
++ = *
pSrc
++;

112 *
pSèãCu∫t
++ = *
pSrc
++;

113 *
pSèãCu∫t
++ = *
pSrc
++;

117 
acc0
 = 0;

118 
acc1
 = 0;

119 
acc2
 = 0;

120 
acc3
 = 0;

123 
px
 = 
pSèã
;

126 
pb
 = 
pC€ffs
;

129 
x0
 = *
	`__SIMD32
(
px
)++;

132 
x2
 = *
	`__SIMD32
(
px
)++;

136 
èpC¡
 = 
numT≠s
 >> 2;

138 
èpC¡
 > 0)

141 
c0
 = *
	`__SIMD32
(
pb
)++;

144 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

147 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

150 #i‚de‡
ARM_MATH_BIG_ENDIAN


151 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

153 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

157 
x0
 = 
	`_SIMD32_OFFSET
(
px
);

160 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

163 #i‚de‡
ARM_MATH_BIG_ENDIAN


164 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

166 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

170 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

173 
c0
 = *
	`__SIMD32
(
pb
)++;

176 
acc0
 = 
	`__SMLAD
(
x2
, 
c0
,ácc0);

179 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 2u);

182 
acc2
 = 
	`__SMLAD
(
x0
, 
c0
,ácc2);

185 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

188 #i‚de‡
ARM_MATH_BIG_ENDIAN


189 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

191 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

195 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

198 
px
 += 4u;

201 
èpC¡
--;

207 if((
numT≠s
 & 0x3u) != 0u)

211 
c0
 = *
	`__SIMD32
(
pb
)++;

214 
acc0
 = 
	`__SMLAD
(
x0
, 
c0
,ácc0);

215 
acc2
 = 
	`__SMLAD
(
x2
, 
c0
,ácc2);

218 #i‚de‡
ARM_MATH_BIG_ENDIAN


219 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

221 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

225 
x0
 = *
	`__SIMD32
(
px
);

228 
acc1
 = 
	`__SMLADX
(
x1
, 
c0
,ácc1);

231 #i‚de‡
ARM_MATH_BIG_ENDIAN


232 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

234 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

238 
acc3
 = 
	`__SMLADX
(
x1
, 
c0
,ácc3);

244 #i‚de‡
ARM_MATH_BIG_ENDIAN


246 *
	`__SIMD32
(
pD°
)++ =

247 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

249 *
	`__SIMD32
(
pD°
)++ =

250 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

254 *
	`__SIMD32
(
pD°
)++ =

255 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

257 *
	`__SIMD32
(
pD°
)++ =

258 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

264 
pSèã
 =ÖState + 4u;

267 
blkC¡
--;

272 
blkC¡
 = 
blockSize
 % 0x4u;

273 
blkC¡
 > 0u)

276 *
pSèãCu∫t
++ = *
pSrc
++;

279 
acc0
 = 0;

282 
px
 = 
pSèã
;

283 
pb
 = 
pC€ffs
;

285 
èpC¡
 = 
numT≠s
 >> 1u;

290 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

291 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

293 
èpC¡
--;

295 
èpC¡
 > 0u);

299 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

302 
pSèã
 =ÖState + 1u;

305 
blkC¡
--;

313 
pSèãCu∫t
 = 
S
->
pSèã
;

316 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

318 
èpC¡
 > 0u)

320 *
pSèãCu∫t
++ = *
pSèã
++;

321 *
pSèãCu∫t
++ = *
pSèã
++;

322 *
pSèãCu∫t
++ = *
pSèã
++;

323 *
pSèãCu∫t
++ = *
pSèã
++;

325 
èpC¡
--;

330 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

333 
èpC¡
 > 0u)

335 *
pSèãCu∫t
++ = *
pSèã
++;

338 
èpC¡
--;

341 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q31.c

41 
	~"¨m_m©h.h
"

74 
IAR_ONLY_LOW_OPTIMIZATION_ENTER


75 
	$¨m_fú_Á°_q31
(

76 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

77 
q31_t
 * 
pSrc
,

78 
q31_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
q31_t
 *
pSèã
 = 
S
->pState;

82 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

83 
q31_t
 *
pSèãCu∫t
;

84 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
;

85 
q31_t
 
c0
;

86 
q31_t
 *
px
;

87 
q31_t
 *
pb
;

88 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

89 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

90 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

94 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

104 
blkC¡
 = 
blockSize
 >> 2;

108 
blkC¡
 > 0u)

111 *
pSèãCu∫t
++ = *
pSrc
++;

112 *
pSèãCu∫t
++ = *
pSrc
++;

113 *
pSèãCu∫t
++ = *
pSrc
++;

114 *
pSèãCu∫t
++ = *
pSrc
++;

117 
acc0
 = 0;

118 
acc1
 = 0;

119 
acc2
 = 0;

120 
acc3
 = 0;

123 
px
 = 
pSèã
;

126 
pb
 = 
pC€ffs
;

130 
x0
 = *(
px
++);

131 
x1
 = *(
px
++);

132 
x2
 = *(
px
++);

135 
èpC¡
 = 
numT≠s
 >> 2;

136 
i
 = 
èpC¡
;

138 
i
 > 0u)

141 
c0
 = *
pb
;

144 
x3
 = *
px
;

147 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x0
, 
c0
);

150 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x1
, 
c0
);

153 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x2
, 
c0
);

156 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x3
, 
c0
);

159 
c0
 = *(
pb
 + 1u);

162 
x0
 = *(
px
 + 1u);

165 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x1
, 
c0
);

166 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x2
, 
c0
);

167 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x3
, 
c0
);

168 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x0
, 
c0
);

171 
c0
 = *(
pb
 + 2u);

174 
x1
 = *(
px
 + 2u);

177 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x2
, 
c0
);

178 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x3
, 
c0
);

179 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x0
, 
c0
);

180 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x1
, 
c0
);

183 
c0
 = *(
pb
 + 3u);

186 
x2
 = *(
px
 + 3u);

189 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x3
, 
c0
);

190 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x0
, 
c0
);

191 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x1
, 
c0
);

192 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x2
, 
c0
);

195 
pb
 += 4u;

196 
px
 += 4u;

199 
i
--;

204 
i
 = 
numT≠s
 - (
èpC¡
 * 4u);

205 
i
 > 0u)

208 
c0
 = *(
pb
++);

211 
x3
 = *(
px
++);

214 
	`mu…Acc_32x32_kìp32_R
(
acc0
, 
x0
, 
c0
);

215 
	`mu…Acc_32x32_kìp32_R
(
acc1
, 
x1
, 
c0
);

216 
	`mu…Acc_32x32_kìp32_R
(
acc2
, 
x2
, 
c0
);

217 
	`mu…Acc_32x32_kìp32_R
(
acc3
, 
x3
, 
c0
);

220 
x0
 = 
x1
;

221 
x1
 = 
x2
;

222 
x2
 = 
x3
;

225 
i
--;

229 
pSèã
 =ÖState + 4;

233 *
pD°
++ = (
q31_t
Ë(
acc0
 << 1);

234 *
pD°
++ = (
q31_t
Ë(
acc1
 << 1);

235 *
pD°
++ = (
q31_t
Ë(
acc2
 << 1);

236 *
pD°
++ = (
q31_t
Ë(
acc3
 << 1);

239 
blkC¡
--;

245 
blkC¡
 = 
blockSize
 % 4u;

247 
blkC¡
 > 0u)

250 *
pSèãCu∫t
++ = *
pSrc
++;

253 
acc0
 = 0;

256 
px
 = 
pSèã
;

259 
pb
 = (
pC€ffs
);

261 
i
 = 
numT≠s
;

266 
	`mu…Acc_32x32_kìp32_R
(
acc0
, (*
px
++), (*(
pb
++)));

267 
i
--;

268 } 
i
 > 0u);

272 *
pD°
++ = (
q31_t
Ë(
acc0
 << 1);

275 
pSèã
 =ÖState + 1;

278 
blkC¡
--;

286 
pSèãCu∫t
 = 
S
->
pSèã
;

289 
èpC¡
 = (
numT≠s
 - 1u);

292 
èpC¡
 > 0u)

294 *
pSèãCu∫t
++ = *
pSèã
++;

297 
èpC¡
--;

301 
	}
}

302 
	gIAR_ONLY_LOW_OPTIMIZATION_EXIT


	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_öô_f32
(

74 
¨m_fú_ö°™˚_f32
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
Êﬂt32_t
 * 
pC€ffs
,

77 
Êﬂt32_t
 * 
pSèã
,

78 
uöt32_t
 
blockSize
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
Êﬂt32_t
));

90 
S
->
pSèã
 =ÖState;

92 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q15.c

41 
	~"¨m_m©h.h
"

90 
¨m_°©us
 
	$¨m_fú_öô_q15
(

91 
¨m_fú_ö°™˚_q15
 * 
S
,

92 
uöt16_t
 
numT≠s
,

93 
q15_t
 * 
pC€ffs
,

94 
q15_t
 * 
pSèã
,

95 
uöt32_t
 
blockSize
)

97 
¨m_°©us
 
°©us
;

100 #i‚de‡
ARM_MATH_CM0_FAMILY


105 if(
numT≠s
 & 0x1u)

107 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

112 
S
->
numT≠s
 =ÇumTaps;

115 
S
->
pC€ffs
 =ÖCoeffs;

118 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
)Ë* (
q15_t
));

121 
S
->
pSèã
 =ÖState;

123 
°©us
 = 
ARM_MATH_SUCCESS
;

126  (
°©us
);

133 
S
->
numT≠s
 =ÇumTaps;

136 
S
->
pC€ffs
 =ÖCoeffs;

139 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

142 
S
->
pSèã
 =ÖState;

144 
°©us
 = 
ARM_MATH_SUCCESS
;

146  (
°©us
);

150 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q31.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_öô_q31
(

74 
¨m_fú_ö°™˚_q31
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
q31_t
 * 
pC€ffs
,

77 
q31_t
 * 
pSèã
,

78 
uöt32_t
 
blockSize
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
blockSize
 + ((
uöt32_t
Ë
numT≠s
 - 1u)Ë* (
q31_t
));

90 
S
->
pSèã
 =ÖState;

92 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q7.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_fú_öô_q7
(

71 
¨m_fú_ö°™˚_q7
 * 
S
,

72 
uöt16_t
 
numT≠s
,

73 
q7_t
 * 
pC€ffs
,

74 
q7_t
 * 
pSèã
,

75 
uöt32_t
 
blockSize
)

79 
S
->
numT≠s
 =ÇumTaps;

82 
S
->
pC€ffs
 =ÖCoeffs;

85 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q7_t
));

88 
S
->
pSèã
 =ÖState;

90 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_f32.c

41 
	~"¨m_m©h.h
"

144 #i‚de‡
ARM_MATH_CM0_FAMILY


148 
	$¨m_fú_öãΩﬁ©e_f32
(

149 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

150 
Êﬂt32_t
 * 
pSrc
,

151 
Êﬂt32_t
 * 
pD°
,

152 
uöt32_t
 
blockSize
)

154 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

155 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

156 
Êﬂt32_t
 *
pSèãCu∫t
;

157 
Êﬂt32_t
 *
±r1
, *
±r2
;

158 
Êﬂt32_t
 
sum0
;

159 
Êﬂt32_t
 
x0
, 
c0
;

160 
uöt32_t
 
i
, 
blkC¡
, 
j
;

161 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

162 
Êﬂt32_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

163 
Êﬂt32_t
 
x1
, 
x2
, 
x3
;

164 
uöt32_t
 
blkC¡N4
;

165 
Êﬂt32_t
 
c1
, 
c2
, 
c3
;

169 
pSèãCu∫t
 = 
S
->
pSèã
 + (
pha£Lí
 - 1u);

172 
blkC¡
 = 
blockSize
 / 4;

173 
blkC¡N4
 = 
blockSize
 - (4 * 
blkC¡
);

176 
blkC¡
 > 0u)

179 *
pSèãCu∫t
++ = *
pSrc
++;

180 *
pSèãCu∫t
++ = *
pSrc
++;

181 *
pSèãCu∫t
++ = *
pSrc
++;

182 *
pSèãCu∫t
++ = *
pSrc
++;

185 
j
 = 1u;

188 
i
 = (
S
->
L
);

190 
i
 > 0u)

193 
acc0
 = 0.0f;

194 
acc1
 = 0.0f;

195 
acc2
 = 0.0f;

196 
acc3
 = 0.0f;

199 
±r1
 = 
pSèã
;

202 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

206 
èpC¡
 = 
pha£Lí
 >> 2u;

208 
x0
 = *(
±r1
++);

209 
x1
 = *(
±r1
++);

210 
x2
 = *(
±r1
++);

212 
èpC¡
 > 0u)

216 
x3
 = *(
±r1
++);

219 
c0
 = *(
±r2
);

222 
acc0
 +
x0
 * 
c0
;

223 
acc1
 +
x1
 * 
c0
;

224 
acc2
 +
x2
 * 
c0
;

225 
acc3
 +
x3
 * 
c0
;

228 
c1
 = *(
±r2
 + 
S
->
L
);

231 
x0
 = *(
±r1
++);

234 
acc0
 +
x1
 * 
c1
;

235 
acc1
 +
x2
 * 
c1
;

236 
acc2
 +
x3
 * 
c1
;

237 
acc3
 +
x0
 * 
c1
;

240 
c2
 = *(
±r2
 + 
S
->
L
 * 2);

243 
x1
 = *(
±r1
++);

246 
acc0
 +
x2
 * 
c2
;

247 
acc1
 +
x3
 * 
c2
;

248 
acc2
 +
x0
 * 
c2
;

249 
acc3
 +
x1
 * 
c2
;

252 
c3
 = *(
±r2
 + 
S
->
L
 * 3);

255 
x2
 = *(
±r1
++);

258 
acc0
 +
x3
 * 
c3
;

259 
acc1
 +
x0
 * 
c3
;

260 
acc2
 +
x1
 * 
c3
;

261 
acc3
 +
x2
 * 
c3
;

267 
±r2
 +4 * 
S
->
L
;

270 
èpC¡
--;

274 
èpC¡
 = 
pha£Lí
 % 0x4u;

276 
èpC¡
 > 0u)

280 
x3
 = *(
±r1
++);

283 
c0
 = *(
±r2
);

286 
acc0
 +
x0
 * 
c0
;

287 
acc1
 +
x1
 * 
c0
;

288 
acc2
 +
x2
 * 
c0
;

289 
acc3
 +
x3
 * 
c0
;

292 
±r2
 +
S
->
L
;

295 
x0
 = 
x1
;

296 
x1
 = 
x2
;

297 
x2
 = 
x3
;

300 
èpC¡
--;

304 *
pD°
 = 
acc0
;

305 *(
pD°
 + 
S
->
L
Ë
acc1
;

306 *(
pD°
 + 2 * 
S
->
L
Ë
acc2
;

307 *(
pD°
 + 3 * 
S
->
L
Ë
acc3
;

309 
pD°
++;

312 
j
++;

315 
i
--;

320 
pSèã
 =ÖState + 4;

322 
pD°
 +
S
->
L
 * 3;

325 
blkC¡
--;

331 
blkC¡N4
 > 0u)

334 *
pSèãCu∫t
++ = *
pSrc
++;

337 
j
 = 1u;

340 
i
 = 
S
->
L
;

341 
i
 > 0u)

344 
sum0
 = 0.0f;

347 
±r1
 = 
pSèã
;

350 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

354 
èpC¡
 = 
pha£Lí
 >> 2u;

355 
èpC¡
 > 0u)

359 
c0
 = *(
±r2
);

364 
±r2
 +
S
->
L
;

367 
x0
 = *(
±r1
++);

370 
sum0
 +
x0
 * 
c0
;

373 
c0
 = *(
±r2
);

376 
±r2
 +
S
->
L
;

379 
x0
 = *(
±r1
++);

382 
sum0
 +
x0
 * 
c0
;

385 
c0
 = *(
±r2
);

388 
±r2
 +
S
->
L
;

391 
x0
 = *(
±r1
++);

394 
sum0
 +
x0
 * 
c0
;

397 
c0
 = *(
±r2
);

400 
±r2
 +
S
->
L
;

403 
x0
 = *(
±r1
++);

406 
sum0
 +
x0
 * 
c0
;

409 
èpC¡
--;

413 
èpC¡
 = 
pha£Lí
 % 0x4u;

415 
èpC¡
 > 0u)

418 
sum0
 +*(
±r1
++Ë* (*
±r2
);

421 
±r2
 +
S
->
L
;

424 
èpC¡
--;

428 *
pD°
++ = 
sum0
;

431 
j
++;

434 
i
--;

439 
pSèã
 =ÖState + 1;

442 
blkC¡N4
--;

450 
pSèãCu∫t
 = 
S
->
pSèã
;

452 
èpC¡
 = (
pha£Lí
 - 1u) >> 2u;

455 
èpC¡
 > 0u)

457 *
pSèãCu∫t
++ = *
pSèã
++;

458 *
pSèãCu∫t
++ = *
pSèã
++;

459 *
pSèãCu∫t
++ = *
pSèã
++;

460 *
pSèãCu∫t
++ = *
pSèã
++;

463 
èpC¡
--;

466 
èpC¡
 = (
pha£Lí
 - 1u) % 0x04u;

469 
èpC¡
 > 0u)

471 *
pSèãCu∫t
++ = *
pSèã
++;

474 
èpC¡
--;

476 
	}
}

482 
	$¨m_fú_öãΩﬁ©e_f32
(

483 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

484 
Êﬂt32_t
 * 
pSrc
,

485 
Êﬂt32_t
 * 
pD°
,

486 
uöt32_t
 
blockSize
)

488 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

489 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

490 
Êﬂt32_t
 *
pSèãCu∫t
;

491 
Êﬂt32_t
 *
±r1
, *
±r2
;

494 
Êﬂt32_t
 
sum
;

495 
uöt32_t
 
i
, 
blkC¡
;

496 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

501 
pSèãCu∫t
 = 
S
->
pSèã
 + (
pha£Lí
 - 1u);

504 
blkC¡
 = 
blockSize
;

507 
blkC¡
 > 0u)

510 *
pSèãCu∫t
++ = *
pSrc
++;

513 
i
 = 
S
->
L
;

515 
i
 > 0u)

518 
sum
 = 0.0f;

521 
±r1
 = 
pSèã
;

524 
±r2
 = 
pC€ffs
 + (
i
 - 1u);

527 
èpC¡
 = 
pha£Lí
;

529 
èpC¡
 > 0u)

532 
sum
 +*
±r1
++ * *
±r2
;

535 
±r2
 +
S
->
L
;

538 
èpC¡
--;

542 *
pD°
++ = 
sum
;

545 
i
--;

550 
pSèã
 =ÖState + 1;

553 
blkC¡
--;

561 
pSèãCu∫t
 = 
S
->
pSèã
;

563 
èpC¡
 = 
pha£Lí
 - 1u;

565 
èpC¡
 > 0u)

567 *
pSèãCu∫t
++ = *
pSèã
++;

570 
èpC¡
--;

573 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_f32.c

41 
	~"¨m_m©h.h
"

76 
¨m_°©us
 
	$¨m_fú_öãΩﬁ©e_öô_f32
(

77 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

78 
uöt8_t
 
L
,

79 
uöt16_t
 
numT≠s
,

80 
Êﬂt32_t
 * 
pC€ffs
,

81 
Êﬂt32_t
 * 
pSèã
,

82 
uöt32_t
 
blockSize
)

84 
¨m_°©us
 
°©us
;

87 if((
numT≠s
 % 
L
) != 0u)

90 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

96 
S
->
pC€ffs
 =ÖCoeffs;

99 
S
->
L
 = L;

102 
S
->
pha£Lígth
 = 
numT≠s
 / 
L
;

105 
	`mem£t
(
pSèã
, 0,

106 (
blockSize
 +

107 ((
uöt32_t
Ë
S
->
pha£Lígth
 - 1u)Ë* (
Êﬂt32_t
));

110 
S
->
pSèã
 =ÖState;

112 
°©us
 = 
ARM_MATH_SUCCESS
;

115  (
°©us
);

117 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q15.c

41 
	~"¨m_m©h.h
"

76 
¨m_°©us
 
	$¨m_fú_öãΩﬁ©e_öô_q15
(

77 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

78 
uöt8_t
 
L
,

79 
uöt16_t
 
numT≠s
,

80 
q15_t
 * 
pC€ffs
,

81 
q15_t
 * 
pSèã
,

82 
uöt32_t
 
blockSize
)

84 
¨m_°©us
 
°©us
;

87 if((
numT≠s
 % 
L
) != 0u)

90 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

96 
S
->
pC€ffs
 =ÖCoeffs;

99 
S
->
L
 = L;

102 
S
->
pha£Lígth
 = 
numT≠s
 / 
L
;

105 
	`mem£t
(
pSèã
, 0,

106 (
blockSize
 + ((
uöt32_t
Ë
S
->
pha£Lígth
 - 1u)Ë* (
q15_t
));

109 
S
->
pSèã
 =ÖState;

111 
°©us
 = 
ARM_MATH_SUCCESS
;

114  (
°©us
);

116 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q31.c

41 
	~"¨m_m©h.h
"

77 
¨m_°©us
 
	$¨m_fú_öãΩﬁ©e_öô_q31
(

78 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

79 
uöt8_t
 
L
,

80 
uöt16_t
 
numT≠s
,

81 
q31_t
 * 
pC€ffs
,

82 
q31_t
 * 
pSèã
,

83 
uöt32_t
 
blockSize
)

85 
¨m_°©us
 
°©us
;

88 if((
numT≠s
 % 
L
) != 0u)

91 
°©us
 = 
ARM_MATH_LENGTH_ERROR
;

97 
S
->
pC€ffs
 =ÖCoeffs;

100 
S
->
L
 = L;

103 
S
->
pha£Lígth
 = 
numT≠s
 / 
L
;

106 
	`mem£t
(
pSèã
, 0,

107 (
blockSize
 + ((
uöt32_t
Ë
S
->
pha£Lígth
 - 1u)Ë* (
q31_t
));

110 
S
->
pSèã
 =ÖState;

112 
°©us
 = 
ARM_MATH_SUCCESS
;

115  (
°©us
);

117 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q15.c

41 
	~"¨m_m©h.h
"

70 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
	$¨m_fú_öãΩﬁ©e_q15
(

75 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

76 
q15_t
 * 
pSrc
,

77 
q15_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
q15_t
 *
pSèã
 = 
S
->pState;

81 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

82 
q15_t
 *
pSèãCu∫t
;

83 
q15_t
 *
±r1
, *
±r2
;

84 
q63_t
 
sum0
;

85 
q15_t
 
x0
, 
c0
;

86 
uöt32_t
 
i
, 
blkC¡
, 
j
, 
èpC¡
;

87 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
;

88 
uöt32_t
 
blkC¡N2
;

89 
q63_t
 
acc0
, 
acc1
;

90 
q15_t
 
x1
;

94 
pSèãCu∫t
 = 
S
->
pSèã
 + ((
q31_t
Ë
pha£Lí
 - 1);

97 
blkC¡
 = 
blockSize
 / 2;

98 
blkC¡N2
 = 
blockSize
 - (2 * 
blkC¡
);

101 
blkC¡
 > 0u)

104 *
pSèãCu∫t
++ = *
pSrc
++;

105 *
pSèãCu∫t
++ = *
pSrc
++;

108 
j
 = 1u;

111 
i
 = (
S
->
L
);

113 
i
 > 0u)

116 
acc0
 = 0;

117 
acc1
 = 0;

120 
±r1
 = 
pSèã
;

123 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

127 
èpC¡
 = 
pha£Lí
 >> 2u;

129 
x0
 = *(
±r1
++);

131 
èpC¡
 > 0u)

135 
x1
 = *(
±r1
++);

138 
c0
 = *(
±r2
);

141 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

142 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

146 
c0
 = *(
±r2
 + 
S
->
L
);

149 
x0
 = *(
±r1
++);

152 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

153 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

157 
c0
 = *(
±r2
 + 
S
->
L
 * 2);

160 
x1
 = *(
±r1
++);

163 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

164 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

167 
c0
 = *(
±r2
 + 
S
->
L
 * 3);

170 
x0
 = *(
±r1
++);

173 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

174 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

180 
±r2
 +4 * 
S
->
L
;

183 
èpC¡
--;

187 
èpC¡
 = 
pha£Lí
 % 0x4u;

189 
èpC¡
 > 0u)

193 
x1
 = *(
±r1
++);

196 
c0
 = *(
±r2
);

199 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

200 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

203 
±r2
 +
S
->
L
;

206 
x0
 = 
x1
;

209 
èpC¡
--;

213 *
pD°
 = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

214 *(
pD°
 + 
S
->
L
Ë(
q15_t
Ë(
	`__SSAT
((
acc1
 >> 15), 16));

216 
pD°
++;

219 
j
++;

222 
i
--;

227 
pSèã
 =ÖState + 2;

229 
pD°
 +
S
->
L
;

232 
blkC¡
--;

237 
blkC¡
 = 
blkC¡N2
;

240 
blkC¡
 > 0u)

243 *
pSèãCu∫t
++ = *
pSrc
++;

246 
j
 = 1u;

249 
i
 = 
S
->
L
;

250 
i
 > 0u)

253 
sum0
 = 0;

256 
±r1
 = 
pSèã
;

259 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

263 
èpC¡
 = 
pha£Lí
 >> 2;

264 
èpC¡
 > 0u)

268 
c0
 = *(
±r2
);

273 
±r2
 +
S
->
L
;

276 
x0
 = *(
±r1
++);

279 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

282 
c0
 = *(
±r2
);

285 
±r2
 +
S
->
L
;

288 
x0
 = *(
±r1
++);

291 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

294 
c0
 = *(
±r2
);

297 
±r2
 +
S
->
L
;

300 
x0
 = *(
±r1
++);

303 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

306 
c0
 = *(
±r2
);

309 
±r2
 +
S
->
L
;

312 
x0
 = *(
±r1
++);

315 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

318 
èpC¡
--;

322 
èpC¡
 = 
pha£Lí
 & 0x3u;

324 
èpC¡
 > 0u)

327 
c0
 = *(
±r2
);

330 
±r2
 +
S
->
L
;

333 
x0
 = *(
±r1
++);

336 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

339 
èpC¡
--;

343 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum0
 >> 15), 16));

345 
j
++;

348 
i
--;

353 
pSèã
 =ÖState + 1;

356 
blkC¡
--;

365 
pSèãCu∫t
 = 
S
->
pSèã
;

367 
i
 = ((
uöt32_t
Ë
pha£Lí
 - 1u) >> 2u;

370 
i
 > 0u)

372 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


374 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

375 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

379 *
pSèãCu∫t
++ = *
pSèã
++;

380 *
pSèãCu∫t
++ = *
pSèã
++;

381 *
pSèãCu∫t
++ = *
pSèã
++;

382 *
pSèãCu∫t
++ = *
pSèã
++;

387 
i
--;

390 
i
 = ((
uöt32_t
Ë
pha£Lí
 - 1u) % 0x04u;

392 
i
 > 0u)

394 *
pSèãCu∫t
++ = *
pSèã
++;

397 
i
--;

399 
	}
}

405 
	$¨m_fú_öãΩﬁ©e_q15
(

406 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

407 
q15_t
 * 
pSrc
,

408 
q15_t
 * 
pD°
,

409 
uöt32_t
 
blockSize
)

411 
q15_t
 *
pSèã
 = 
S
->pState;

412 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

413 
q15_t
 *
pSèãCu∫t
;

414 
q15_t
 *
±r1
, *
±r2
;

415 
q63_t
 
sum
;

416 
q15_t
 
x0
, 
c0
;

417 
uöt32_t
 
i
, 
blkC¡
, 
èpC¡
;

418 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
;

423 
pSèãCu∫t
 = 
S
->
pSèã
 + (
pha£Lí
 - 1u);

426 
blkC¡
 = 
blockSize
;

429 
blkC¡
 > 0u)

432 *
pSèãCu∫t
++ = *
pSrc
++;

435 
i
 = 
S
->
L
;

437 
i
 > 0u)

440 
sum
 = 0;

443 
±r1
 = 
pSèã
;

446 
±r2
 = 
pC€ffs
 + (
i
 - 1u);

449 
èpC¡
 = (
uöt32_t
Ë
pha£Lí
;

451 
èpC¡
 > 0u)

454 
c0
 = *
±r2
;

457 
±r2
 +
S
->
L
;

460 
x0
 = *
±r1
++;

463 
sum
 +((
q31_t
Ë
x0
 * 
c0
);

466 
èpC¡
--;

470 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

473 
i
--;

478 
pSèã
 =ÖState + 1;

481 
blkC¡
--;

489 
pSèãCu∫t
 = 
S
->
pSèã
;

491 
i
 = (
uöt32_t
Ë
pha£Lí
 - 1u;

493 
i
 > 0u)

495 *
pSèãCu∫t
++ = *
pSèã
++;

498 
i
--;

501 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q31.c

41 
	~"¨m_m©h.h
"

70 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
	$¨m_fú_öãΩﬁ©e_q31
(

75 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

76 
q31_t
 * 
pSrc
,

77 
q31_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
q31_t
 *
pSèã
 = 
S
->pState;

81 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

82 
q31_t
 *
pSèãCu∫t
;

83 
q31_t
 *
±r1
, *
±r2
;

84 
q63_t
 
sum0
;

85 
q31_t
 
x0
, 
c0
;

86 
uöt32_t
 
i
, 
blkC¡
, 
j
;

87 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

89 
uöt32_t
 
blkC¡N2
;

90 
q63_t
 
acc0
, 
acc1
;

91 
q31_t
 
x1
;

95 
pSèãCu∫t
 = 
S
->
pSèã
 + ((
q31_t
Ë
pha£Lí
 - 1);

98 
blkC¡
 = 
blockSize
 / 2;

99 
blkC¡N2
 = 
blockSize
 - (2 * 
blkC¡
);

102 
blkC¡
 > 0u)

105 *
pSèãCu∫t
++ = *
pSrc
++;

106 *
pSèãCu∫t
++ = *
pSrc
++;

109 
j
 = 1u;

112 
i
 = (
S
->
L
);

114 
i
 > 0u)

117 
acc0
 = 0;

118 
acc1
 = 0;

121 
±r1
 = 
pSèã
;

124 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

128 
èpC¡
 = 
pha£Lí
 >> 2u;

130 
x0
 = *(
±r1
++);

132 
èpC¡
 > 0u)

136 
x1
 = *(
±r1
++);

139 
c0
 = *(
±r2
);

142 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

143 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

147 
c0
 = *(
±r2
 + 
S
->
L
);

150 
x0
 = *(
±r1
++);

153 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

154 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

158 
c0
 = *(
±r2
 + 
S
->
L
 * 2);

161 
x1
 = *(
±r1
++);

164 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

165 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

168 
c0
 = *(
±r2
 + 
S
->
L
 * 3);

171 
x0
 = *(
±r1
++);

174 
acc0
 +(
q63_t
Ë
x1
 *
c0
;

175 
acc1
 +(
q63_t
Ë
x0
 *
c0
;

181 
±r2
 +4 * 
S
->
L
;

184 
èpC¡
--;

188 
èpC¡
 = 
pha£Lí
 % 0x4u;

190 
èpC¡
 > 0u)

194 
x1
 = *(
±r1
++);

197 
c0
 = *(
±r2
);

200 
acc0
 +(
q63_t
Ë
x0
 *
c0
;

201 
acc1
 +(
q63_t
Ë
x1
 *
c0
;

204 
±r2
 +
S
->
L
;

207 
x0
 = 
x1
;

210 
èpC¡
--;

214 *
pD°
 = (
q31_t
Ë(
acc0
 >> 31);

215 *(
pD°
 + 
S
->
L
Ë(
q31_t
Ë(
acc1
 >> 31);

218 
pD°
++;

221 
j
++;

224 
i
--;

229 
pSèã
 =ÖState + 2;

231 
pD°
 +
S
->
L
;

234 
blkC¡
--;

239 
blkC¡
 = 
blkC¡N2
;

242 
blkC¡
 > 0u)

245 *
pSèãCu∫t
++ = *
pSrc
++;

248 
j
 = 1u;

251 
i
 = 
S
->
L
;

252 
i
 > 0u)

255 
sum0
 = 0;

258 
±r1
 = 
pSèã
;

261 
±r2
 = 
pC€ffs
 + (
S
->
L
 - 
j
);

265 
èpC¡
 = 
pha£Lí
 >> 2;

266 
èpC¡
 > 0u)

270 
c0
 = *(
±r2
);

275 
±r2
 +
S
->
L
;

278 
x0
 = *(
±r1
++);

281 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

284 
c0
 = *(
±r2
);

287 
±r2
 +
S
->
L
;

290 
x0
 = *(
±r1
++);

293 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

296 
c0
 = *(
±r2
);

299 
±r2
 +
S
->
L
;

302 
x0
 = *(
±r1
++);

305 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

308 
c0
 = *(
±r2
);

311 
±r2
 +
S
->
L
;

314 
x0
 = *(
±r1
++);

317 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

320 
èpC¡
--;

324 
èpC¡
 = 
pha£Lí
 & 0x3u;

326 
èpC¡
 > 0u)

329 
c0
 = *(
±r2
);

332 
±r2
 +
S
->
L
;

335 
x0
 = *(
±r1
++);

338 
sum0
 +(
q63_t
Ë
x0
 *
c0
;

341 
èpC¡
--;

345 *
pD°
++ = (
q31_t
Ë(
sum0
 >> 31);

348 
j
++;

351 
i
--;

356 
pSèã
 =ÖState + 1;

359 
blkC¡
--;

367 
pSèãCu∫t
 = 
S
->
pSèã
;

369 
èpC¡
 = (
pha£Lí
 - 1u) >> 2u;

372 
èpC¡
 > 0u)

374 *
pSèãCu∫t
++ = *
pSèã
++;

375 *
pSèãCu∫t
++ = *
pSèã
++;

376 *
pSèãCu∫t
++ = *
pSèã
++;

377 *
pSèãCu∫t
++ = *
pSèã
++;

380 
èpC¡
--;

383 
èpC¡
 = (
pha£Lí
 - 1u) % 0x04u;

386 
èpC¡
 > 0u)

388 *
pSèãCu∫t
++ = *
pSèã
++;

391 
èpC¡
--;

394 
	}
}

399 
	$¨m_fú_öãΩﬁ©e_q31
(

400 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

401 
q31_t
 * 
pSrc
,

402 
q31_t
 * 
pD°
,

403 
uöt32_t
 
blockSize
)

405 
q31_t
 *
pSèã
 = 
S
->pState;

406 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

407 
q31_t
 *
pSèãCu∫t
;

408 
q31_t
 *
±r1
, *
±r2
;

412 
q63_t
 
sum
;

413 
q31_t
 
x0
, 
c0
;

414 
uöt32_t
 
i
, 
blkC¡
;

415 
uöt16_t
 
pha£Lí
 = 
S
->
pha£Lígth
, 
èpC¡
;

420 
pSèãCu∫t
 = 
S
->
pSèã
 + ((
q31_t
Ë
pha£Lí
 - 1);

423 
blkC¡
 = 
blockSize
;

426 
blkC¡
 > 0u)

429 *
pSèãCu∫t
++ = *
pSrc
++;

432 
i
 = 
S
->
L
;

434 
i
 > 0u)

437 
sum
 = 0;

440 
±r1
 = 
pSèã
;

443 
±r2
 = 
pC€ffs
 + (
i
 - 1u);

445 
èpC¡
 = 
pha£Lí
;

447 
èpC¡
 > 0u)

450 
c0
 = *(
±r2
);

453 
±r2
 +
S
->
L
;

456 
x0
 = *
±r1
++;

459 
sum
 +(
q63_t
Ë
x0
 *
c0
;

462 
èpC¡
--;

466 *
pD°
++ = (
q31_t
Ë(
sum
 >> 31);

469 
i
--;

474 
pSèã
 =ÖState + 1;

477 
blkC¡
--;

485 
pSèãCu∫t
 = 
S
->
pSèã
;

487 
èpC¡
 = 
pha£Lí
 - 1u;

490 
èpC¡
 > 0u)

492 *
pSèãCu∫t
++ = *
pSèã
++;

495 
èpC¡
--;

498 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_f32.c

41 
	~"¨m_m©h.h
"

131 
	$¨m_fú_œâi˚_f32
(

132 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

133 
Êﬂt32_t
 * 
pSrc
,

134 
Êﬂt32_t
 * 
pD°
,

135 
uöt32_t
 
blockSize
)

137 
Êﬂt32_t
 *
pSèã
;

138 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

139 
Êﬂt32_t
 *
px
;

140 
Êﬂt32_t
 *
pk
;

143 #i‚de‡
ARM_MATH_CM0_FAMILY


147 
Êﬂt32_t
 
fcuº1
, 
‚ext1
, 
gcuº1
, 
g√xt1
;

148 
Êﬂt32_t
 
fcuº2
, 
‚ext2
, 
g√xt2
;

149 
Êﬂt32_t
 
fcuº3
, 
‚ext3
, 
g√xt3
;

150 
Êﬂt32_t
 
fcuº4
, 
‚ext4
, 
g√xt4
;

151 
uöt32_t
 
numSèges
 = 
S
->numStages;

152 
uöt32_t
 
blkC¡
, 
°ageC¡
;

154 
gcuº1
 = 0.0f;

155 
pSèã
 = &
S
->pState[0];

157 
blkC¡
 = 
blockSize
 >> 2;

161 
blkC¡
 > 0u)

166 
fcuº1
 = *
pSrc
++;

167 
fcuº2
 = *
pSrc
++;

170 
pk
 = (
pC€ffs
);

173 
px
 = 
pSèã
;

176 
gcuº1
 = *
px
;

180 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

182 
g√xt1
 = (
fcuº1
 * (*
pk
)Ë+ 
gcuº1
;

186 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
fcuº1
);

187 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
fcuº1
;

191 
fcuº3
 = *
pSrc
++;

192 
fcuº4
 = *
pSrc
++;

196 *
px
++ = 
fcuº4
;

199 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
fcuº2
);

200 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
fcuº2
;

203 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
fcuº3
);

204 
g√xt4
 = (
fcuº4
 * (*
pk
++)Ë+ 
fcuº3
;

207 
fcuº1
 = 
‚ext1
;

208 
fcuº2
 = 
‚ext2
;

209 
fcuº3
 = 
‚ext3
;

210 
fcuº4
 = 
‚ext4
;

213 
°ageC¡
 = (
numSèges
 - 1u) >> 2u;

219 
°ageC¡
 > 0u)

222 
gcuº1
 = *
px
;

225 *
px
++ = 
g√xt4
;

230 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

233 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
g√xt1
);

235 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
g√xt2
);

237 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
g√xt3
);

241 
g√xt4
 = (
fcuº4
 * (*
pk
)Ë+ 
g√xt3
;

242 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
g√xt2
;

243 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
g√xt1
;

244 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

248 
gcuº1
 = *
px
;

251 *
px
++ = 
g√xt4
;

256 
fcuº1
 = 
‚ext1
 + ((*
pk
Ë* 
gcuº1
);

258 
fcuº2
 = 
‚ext2
 + ((*
pk
Ë* 
g√xt1
);

260 
fcuº3
 = 
‚ext3
 + ((*
pk
Ë* 
g√xt2
);

262 
fcuº4
 = 
‚ext4
 + ((*
pk
Ë* 
g√xt3
);

266 
g√xt4
 = (
‚ext4
 * (*
pk
)Ë+ 
g√xt3
;

267 
g√xt3
 = (
‚ext3
 * (*
pk
)Ë+ 
g√xt2
;

268 
g√xt2
 = (
‚ext2
 * (*
pk
)Ë+ 
g√xt1
;

269 
g√xt1
 = (
‚ext1
 * (*
pk
++)Ë+ 
gcuº1
;

273 
gcuº1
 = *
px
;

276 *
px
++ = 
g√xt4
;

281 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

284 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
g√xt1
);

286 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
g√xt2
);

288 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
g√xt3
);

292 
g√xt4
 = (
fcuº4
 * (*
pk
)Ë+ 
g√xt3
;

293 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
g√xt2
;

294 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
g√xt1
;

295 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

298 
gcuº1
 = *
px
;

301 *
px
++ = 
g√xt4
;

306 
fcuº1
 = 
‚ext1
 + ((*
pk
Ë* 
gcuº1
);

308 
fcuº2
 = 
‚ext2
 + ((*
pk
Ë* 
g√xt1
);

310 
fcuº3
 = 
‚ext3
 + ((*
pk
Ë* 
g√xt2
);

312 
fcuº4
 = 
‚ext4
 + ((*
pk
Ë* 
g√xt3
);

316 
g√xt4
 = (
‚ext4
 * (*
pk
)Ë+ 
g√xt3
;

317 
g√xt3
 = (
‚ext3
 * (*
pk
)Ë+ 
g√xt2
;

318 
g√xt2
 = (
‚ext2
 * (*
pk
)Ë+ 
g√xt1
;

319 
g√xt1
 = (
‚ext1
 * (*
pk
++)Ë+ 
gcuº1
;

321 
°ageC¡
--;

325 
°ageC¡
 = (
numSèges
 - 1u) % 0x4u;

327 
°ageC¡
 > 0u)

329 
gcuº1
 = *
px
;

332 *
px
++ = 
g√xt4
;

335 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

336 
‚ext2
 = 
fcuº2
 + ((*
pk
Ë* 
g√xt1
);

337 
‚ext3
 = 
fcuº3
 + ((*
pk
Ë* 
g√xt2
);

338 
‚ext4
 = 
fcuº4
 + ((*
pk
Ë* 
g√xt3
);

341 
g√xt4
 = (
fcuº4
 * (*
pk
)Ë+ 
g√xt3
;

342 
g√xt3
 = (
fcuº3
 * (*
pk
)Ë+ 
g√xt2
;

343 
g√xt2
 = (
fcuº2
 * (*
pk
)Ë+ 
g√xt1
;

344 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

347 
fcuº1
 = 
‚ext1
;

348 
fcuº2
 = 
‚ext2
;

349 
fcuº3
 = 
‚ext3
;

350 
fcuº4
 = 
‚ext4
;

352 
°ageC¡
--;

358 *
pD°
++ = 
fcuº1
;

359 *
pD°
++ = 
fcuº2
;

360 *
pD°
++ = 
fcuº3
;

361 *
pD°
++ = 
fcuº4
;

363 
blkC¡
--;

368 
blkC¡
 = 
blockSize
 % 0x4u;

370 
blkC¡
 > 0u)

373 
fcuº1
 = *
pSrc
++;

376 
pk
 = (
pC€ffs
);

379 
px
 = 
pSèã
;

382 
gcuº1
 = *
px
;

386 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

388 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

391 *
px
++ = 
fcuº1
;

395 
fcuº1
 = 
‚ext1
;

397 
°ageC¡
 = (
numSèges
 - 1u);

400 
°ageC¡
 > 0u)

403 
gcuº1
 = *
px
;

406 *
px
++ = 
g√xt1
;

410 
‚ext1
 = 
fcuº1
 + ((*
pk
Ë* 
gcuº1
);

412 
g√xt1
 = (
fcuº1
 * (*
pk
++)Ë+ 
gcuº1
;

416 
fcuº1
 = 
‚ext1
;

418 
°ageC¡
--;

423 *
pD°
++ = 
fcuº1
;

425 
blkC¡
--;

433 
Êﬂt32_t
 
fcuº
, 
‚ext
, 
gcuº
, 
g√xt
;

434 
uöt32_t
 
numSèges
 = 
S
->numStages;

435 
uöt32_t
 
blkC¡
, 
°ageC¡
;

437 
pSèã
 = &
S
->pState[0];

439 
blkC¡
 = 
blockSize
;

441 
blkC¡
 > 0u)

444 
fcuº
 = *
pSrc
++;

447 
pk
 = 
pC€ffs
;

450 
px
 = 
pSèã
;

453 
gcuº
 = *
px
;

457 
‚ext
 = 
fcuº
 + ((*
pk
Ë* 
gcuº
);

459 
g√xt
 = (
fcuº
 * (*
pk
++)Ë+ 
gcuº
;

462 *
px
++ = 
fcuº
;

466 
fcuº
 = 
‚ext
;

468 
°ageC¡
 = (
numSèges
 - 1u);

471 
°ageC¡
 > 0u)

474 
gcuº
 = *
px
;

477 *
px
++ = 
g√xt
;

481 
‚ext
 = 
fcuº
 + ((*
pk
Ë* 
gcuº
);

483 
g√xt
 = (
fcuº
 * (*
pk
++)Ë+ 
gcuº
;

487 
fcuº
 = 
‚ext
;

489 
°ageC¡
--;

494 *
pD°
++ = 
fcuº
;

496 
blkC¡
--;

502 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_f32.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fú_œâi˚_öô_f32
(

62 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

63 
uöt16_t
 
numSèges
,

64 
Êﬂt32_t
 * 
pC€ffs
,

65 
Êﬂt32_t
 * 
pSèã
)

68 
S
->
numSèges
 =ÇumStages;

71 
S
->
pC€ffs
 =ÖCoeffs;

74 
	`mem£t
(
pSèã
, 0, (
numSèges
Ë* (
Êﬂt32_t
));

77 
S
->
pSèã
 =ÖState;

79 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q15.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fú_œâi˚_öô_q15
(

62 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

63 
uöt16_t
 
numSèges
,

64 
q15_t
 * 
pC€ffs
,

65 
q15_t
 * 
pSèã
)

68 
S
->
numSèges
 =ÇumStages;

71 
S
->
pC€ffs
 =ÖCoeffs;

74 
	`mem£t
(
pSèã
, 0, (
numSèges
Ë* (
q15_t
));

77 
S
->
pSèã
 =ÖState;

79 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fú_œâi˚_öô_q31
(

62 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

63 
uöt16_t
 
numSèges
,

64 
q31_t
 * 
pC€ffs
,

65 
q31_t
 * 
pSèã
)

68 
S
->
numSèges
 =ÇumStages;

71 
S
->
pC€ffs
 =ÖCoeffs;

74 
	`mem£t
(
pSèã
, 0, (
numSèges
Ë* (
q31_t
));

77 
S
->
pSèã
 =ÖState;

79 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q15.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_fú_œâi˚_q15
(

63 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

64 
q15_t
 * 
pSrc
,

65 
q15_t
 * 
pD°
,

66 
uöt32_t
 
blockSize
)

68 
q15_t
 *
pSèã
;

69 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

70 
q15_t
 *
px
;

71 
q15_t
 *
pk
;

74 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
fcu∫t1
, 
‚ext1
, 
gcu∫t1
 = 0, 
g√xt1
;

79 
q31_t
 
fcu∫t2
, 
‚ext2
, 
g√xt2
;

80 
q31_t
 
fcu∫t3
, 
‚ext3
, 
g√xt3
;

81 
q31_t
 
fcu∫t4
, 
‚ext4
, 
g√xt4
;

82 
uöt32_t
 
numSèges
 = 
S
->numStages;

83 
uöt32_t
 
blkC¡
, 
°ageC¡
;

85 
pSèã
 = &
S
->pState[0];

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

96 
fcu∫t1
 = *
pSrc
++;

97 
fcu∫t2
 = *
pSrc
++;

100 
pk
 = (
pC€ffs
);

103 
px
 = 
pSèã
;

106 
gcu∫t1
 = *
px
;

110 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

111 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

114 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
)Ë>> 15uË+ 
gcu∫t1
;

115 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

119 
‚ext2
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

120 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

122 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

123 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

128 
fcu∫t3
 = *
pSrc
++;

129 
fcu∫t4
 = *
pSrc
++;

133 *
px
++ = (
q15_t
Ë
fcu∫t4
;

136 
‚ext3
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

137 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

138 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

139 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

142 
‚ext4
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

143 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

144 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
++)Ë>> 15uË+ 
fcu∫t3
;

145 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

148 
fcu∫t1
 = 
‚ext1
;

149 
fcu∫t2
 = 
‚ext2
;

150 
fcu∫t3
 = 
‚ext3
;

151 
fcu∫t4
 = 
‚ext4
;

155 
°ageC¡
 = (
numSèges
 - 1u) >> 2;

162 
°ageC¡
 > 0u)

165 
gcu∫t1
 = *
px
;

168 *
px
++ = (
q15_t
Ë
g√xt4
;

173 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

174 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

179 
‚ext2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

180 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

182 
‚ext3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

183 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

186 
‚ext4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

187 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

191 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

192 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

193 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

194 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

196 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

197 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

199 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

200 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

204 
gcu∫t1
 = *
px
;

207 *
px
++ = (
q15_t
Ë
g√xt4
;

212 
fcu∫t1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
‚ext1
;

213 
fcu∫t1
 = 
	`__SSAT
(fcurnt1, 16);

216 
fcu∫t2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
‚ext2
;

217 
fcu∫t2
 = 
	`__SSAT
(fcurnt2, 16);

220 
fcu∫t3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
‚ext3
;

221 
fcu∫t3
 = 
	`__SSAT
(fcurnt3, 16);

224 
fcu∫t4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
‚ext4
;

225 
fcu∫t4
 = 
	`__SSAT
(fcurnt4, 16);

229 
g√xt4
 = (
q31_t
Ë((
‚ext4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

230 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

232 
g√xt3
 = (
q31_t
Ë((
‚ext3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

233 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

235 
g√xt2
 = (
q31_t
Ë((
‚ext2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

236 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

238 
g√xt1
 = (
q31_t
Ë((
‚ext1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

239 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

242 
gcu∫t1
 = *
px
;

245 *
px
++ = (
q15_t
Ë
g√xt4
;

250 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

251 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

255 
‚ext2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

256 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

259 
‚ext3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

260 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

263 
‚ext4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

264 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

268 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

269 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

271 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

272 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

274 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

275 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

276 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

277 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

281 
gcu∫t1
 = *
px
;

284 *
px
++ = (
q15_t
Ë
g√xt4
;

289 
fcu∫t1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
‚ext1
;

290 
fcu∫t1
 = 
	`__SSAT
(fcurnt1, 16);

293 
fcu∫t2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
‚ext2
;

294 
fcu∫t2
 = 
	`__SSAT
(fcurnt2, 16);

297 
fcu∫t3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
‚ext3
;

298 
fcu∫t3
 = 
	`__SSAT
(fcurnt3, 16);

301 
fcu∫t4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
‚ext4
;

302 
fcu∫t4
 = 
	`__SSAT
(fcurnt4, 16);

306 
g√xt4
 = (
q31_t
Ë((
‚ext4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

307 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

308 
g√xt3
 = (
q31_t
Ë((
‚ext3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

309 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

310 
g√xt2
 = (
q31_t
Ë((
‚ext2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

311 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

312 
g√xt1
 = (
q31_t
Ë((
‚ext1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

313 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

315 
°ageC¡
--;

319 
°ageC¡
 = (
numSèges
 - 1u) % 0x4u;

321 
°ageC¡
 > 0u)

323 
gcu∫t1
 = *
px
;

326 *
px
++ = (
q15_t
Ë
g√xt4
;

329 
‚ext1
 = (
q31_t
Ë((
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

330 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

331 
‚ext2
 = (
q31_t
Ë((
g√xt1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t2
;

332 
‚ext2
 = 
	`__SSAT
(fnext2, 16);

334 
‚ext3
 = (
q31_t
Ë((
g√xt2
 * (*
pk
)Ë>> 15uË+ 
fcu∫t3
;

335 
‚ext3
 = 
	`__SSAT
(fnext3, 16);

337 
‚ext4
 = (
q31_t
Ë((
g√xt3
 * (*
pk
)Ë>> 15uË+ 
fcu∫t4
;

338 
‚ext4
 = 
	`__SSAT
(fnext4, 16);

341 
g√xt4
 = (
q31_t
Ë((
fcu∫t4
 * (*
pk
)Ë>> 15uË+ 
g√xt3
;

342 
g√xt4
 = 
	`__SSAT
(gnext4, 16);

343 
g√xt3
 = (
q31_t
Ë((
fcu∫t3
 * (*
pk
)Ë>> 15uË+ 
g√xt2
;

344 
g√xt3
 = 
	`__SSAT
(gnext3, 16);

345 
g√xt2
 = (
q31_t
Ë((
fcu∫t2
 * (*
pk
)Ë>> 15uË+ 
g√xt1
;

346 
g√xt2
 = 
	`__SSAT
(gnext2, 16);

347 
g√xt1
 = (
q31_t
Ë((
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

348 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

351 
fcu∫t1
 = 
‚ext1
;

352 
fcu∫t2
 = 
‚ext2
;

353 
fcu∫t3
 = 
‚ext3
;

354 
fcu∫t4
 = 
‚ext4
;

356 
°ageC¡
--;

363 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


365 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t1
, 
fcu∫t2
, 16);

366 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t3
, 
fcu∫t4
, 16);

370 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t2
, 
fcu∫t1
, 16);

371 *
	`__SIMD32
(
pD°
)++ = 
	`__PKHBT
(
fcu∫t4
, 
fcu∫t3
, 16);

375 
blkC¡
--;

380 
blkC¡
 = 
blockSize
 % 0x4u;

382 
blkC¡
 > 0u)

385 
fcu∫t1
 = *
pSrc
++;

388 
pk
 = (
pC€ffs
);

391 
px
 = 
pSèã
;

394 
gcu∫t1
 = *
px
;

398 
‚ext1
 = (((
q31_t
Ë
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

399 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

403 
g√xt1
 = (((
q31_t
Ë
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

404 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

407 *
px
++ = (
q15_t
Ë
fcu∫t1
;

411 
fcu∫t1
 = 
‚ext1
;

413 
°ageC¡
 = (
numSèges
 - 1u);

416 
°ageC¡
 > 0u)

419 
gcu∫t1
 = *
px
;

422 *
px
++ = (
q15_t
Ë
g√xt1
;

426 
‚ext1
 = (((
q31_t
Ë
gcu∫t1
 * (*
pk
)Ë>> 15uË+ 
fcu∫t1
;

427 
‚ext1
 = 
	`__SSAT
(fnext1, 16);

430 
g√xt1
 = (((
q31_t
Ë
fcu∫t1
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t1
;

431 
g√xt1
 = 
	`__SSAT
(gnext1, 16);

436 
fcu∫t1
 = 
‚ext1
;

438 
°ageC¡
--;

443 *
pD°
++ = 
	`__SSAT
(
fcu∫t1
, 16);

446 
blkC¡
--;

454 
q31_t
 
fcu∫t
, 
‚ext
, 
gcu∫t
, 
g√xt
;

455 
uöt32_t
 
numSèges
 = 
S
->numStages;

456 
uöt32_t
 
blkC¡
, 
°ageC¡
;

458 
pSèã
 = &
S
->pState[0];

460 
blkC¡
 = 
blockSize
;

462 
blkC¡
 > 0u)

465 
fcu∫t
 = *
pSrc
++;

468 
pk
 = (
pC€ffs
);

471 
px
 = 
pSèã
;

474 
gcu∫t
 = *
px
;

478 
‚ext
 = ((
gcu∫t
 * (*
pk
)Ë>> 15uË+ 
fcu∫t
;

479 
‚ext
 = 
	`__SSAT
(fnext, 16);

483 
g√xt
 = ((
fcu∫t
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t
;

484 
g√xt
 = 
	`__SSAT
(gnext, 16);

487 *
px
++ = (
q15_t
Ë
fcu∫t
;

491 
fcu∫t
 = 
‚ext
;

493 
°ageC¡
 = (
numSèges
 - 1u);

496 
°ageC¡
 > 0u)

499 
gcu∫t
 = *
px
;

502 *
px
++ = (
q15_t
Ë
g√xt
;

506 
‚ext
 = ((
gcu∫t
 * (*
pk
)Ë>> 15uË+ 
fcu∫t
;

507 
‚ext
 = 
	`__SSAT
(fnext, 16);

510 
g√xt
 = ((
fcu∫t
 * (*
pk
++)Ë>> 15uË+ 
gcu∫t
;

511 
g√xt
 = 
	`__SSAT
(gnext, 16);

516 
fcu∫t
 = 
‚ext
;

518 
°ageC¡
--;

523 *
pD°
++ = 
	`__SSAT
(
fcu∫t
, 16);

526 
blkC¡
--;

532 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q31.c

41 
	~"¨m_m©h.h
"

66 #i‚de‡
ARM_MATH_CM0_FAMILY


70 
	$¨m_fú_œâi˚_q31
(

71 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

72 
q31_t
 * 
pSrc
,

73 
q31_t
 * 
pD°
,

74 
uöt32_t
 
blockSize
)

76 
q31_t
 *
pSèã
;

77 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

78 
q31_t
 *
px
;

79 
q31_t
 *
pk
;

80 
q31_t
 
fcuº1
, 
‚ext1
, 
gcuº1
 = 0, 
g√xt1
;

81 
q31_t
 
fcuº2
, 
‚ext2
, 
g√xt2
;

82 
uöt32_t
 
numSèges
 = 
S
->numStages;

83 
uöt32_t
 
blkC¡
, 
°ageC¡
;

84 
q31_t
 
k
;

86 
pSèã
 = &
S
->pState[0];

88 
blkC¡
 = 
blockSize
 >> 1u;

92 
blkC¡
 > 0u)

95 
fcuº1
 = *
pSrc
++;

98 
fcuº2
 = *
pSrc
++;

101 
pk
 = (
pC€ffs
);

104 
px
 = 
pSèã
;

107 
gcuº1
 = *
px
;

110 
k
 = *
pk
++;

114 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

117 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

118 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

119 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

123 
‚ext2
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * 
k
) >> 32);

126 
g√xt2
 = (
q31_t
Ë(((
q63_t
Ë
fcuº2
 * (
k
)) >> 32);

127 
‚ext2
 = 
fcuº2
 + (fnext2 << 1u);

128 
g√xt2
 = 
fcuº1
 + (gnext2 << 1u);

131 *
px
++ = 
fcuº2
;

135 
fcuº1
 = 
‚ext1
;

136 
fcuº2
 = 
‚ext2
;

138 
°ageC¡
 = (
numSèges
 - 1u);

141 
°ageC¡
 > 0u)

145 
k
 = *
pk
++;

148 
gcuº1
 = *
px
;

151 *
px
++ = 
g√xt2
;

155 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

156 
‚ext2
 = (
q31_t
Ë(((
q63_t
Ë
g√xt1
 * 
k
) >> 32);

158 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

159 
‚ext2
 = 
fcuº2
 + (fnext2 << 1u);

162 
g√xt2
 = (
q31_t
Ë(((
q63_t
Ë
fcuº2
 * (
k
)) >> 32);

163 
g√xt2
 = 
g√xt1
 + (gnext2 << 1u);

166 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

167 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

171 
fcuº1
 = 
‚ext1
;

172 
fcuº2
 = 
‚ext2
;

174 
°ageC¡
--;

179 *
pD°
++ = 
fcuº1
;

180 *
pD°
++ = 
fcuº2
;

182 
blkC¡
--;

188 
blkC¡
 = 
blockSize
 % 0x2u;

190 
blkC¡
 > 0u)

193 
fcuº1
 = *
pSrc
++;

196 
pk
 = (
pC€ffs
);

199 
px
 = 
pSèã
;

202 
gcuº1
 = *
px
;

205 
k
 = *
pk
++;

209 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

210 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

213 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

214 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

217 *
px
++ = 
fcuº1
;

221 
fcuº1
 = 
‚ext1
;

223 
°ageC¡
 = (
numSèges
 - 1u);

226 
°ageC¡
 > 0u)

229 
k
 = *
pk
++;

232 
gcuº1
 = *
px
;

235 *
px
++ = 
g√xt1
;

239 
‚ext1
 = (
q31_t
Ë(((
q63_t
Ë
gcuº1
 * 
k
) >> 32);

240 
‚ext1
 = 
fcuº1
 + (fnext1 << 1u);

243 
g√xt1
 = (
q31_t
Ë(((
q63_t
Ë
fcuº1
 * (
k
)) >> 32);

244 
g√xt1
 = 
gcuº1
 + (gnext1 << 1u);

248 
fcuº1
 = 
‚ext1
;

250 
°ageC¡
--;

256 *
pD°
++ = 
fcuº1
;

258 
blkC¡
--;

263 
	}
}

270 
	$¨m_fú_œâi˚_q31
(

271 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

272 
q31_t
 * 
pSrc
,

273 
q31_t
 * 
pD°
,

274 
uöt32_t
 
blockSize
)

276 
q31_t
 *
pSèã
;

277 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

278 
q31_t
 *
px
;

279 
q31_t
 *
pk
;

280 
q31_t
 
fcuº
, 
‚ext
, 
gcuº
, 
g√xt
;

281 
uöt32_t
 
numSèges
 = 
S
->numStages;

282 
uöt32_t
 
blkC¡
, 
°ageC¡
;

284 
pSèã
 = &
S
->pState[0];

286 
blkC¡
 = 
blockSize
;

288 
blkC¡
 > 0u)

291 
fcuº
 = *
pSrc
++;

294 
pk
 = (
pC€ffs
);

297 
px
 = 
pSèã
;

300 
gcuº
 = *
px
;

304 
‚ext
 = (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)Ë>> 31Ë+ 
fcuº
;

306 
g√xt
 = (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)Ë>> 31Ë+ 
gcuº
;

308 *
px
++ = 
fcuº
;

312 
fcuº
 = 
‚ext
;

314 
°ageC¡
 = (
numSèges
 - 1u);

317 
°ageC¡
 > 0u)

320 
gcuº
 = *
px
;

323 *
px
++ = 
g√xt
;

327 
‚ext
 = (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)Ë>> 31Ë+ 
fcuº
;

329 
g√xt
 = (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)Ë>> 31Ë+ 
gcuº
;

333 
fcuº
 = 
‚ext
;

335 
°ageC¡
--;

340 *
pD°
++ = 
fcuº
;

342 
blkC¡
--;

346 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q15.c

41 
	~"¨m_m©h.h
"

78 #i‚de‡
ARM_MATH_CM0_FAMILY


82 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


85 
	$¨m_fú_q15
(

86 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

87 
q15_t
 * 
pSrc
,

88 
q15_t
 * 
pD°
,

89 
uöt32_t
 
blockSize
)

91 
q15_t
 *
pSèã
 = 
S
->pState;

92 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

93 
q15_t
 *
pSèãCu∫t
;

94 
q15_t
 *
px1
;

95 
q15_t
 *
pb
;

96 
q31_t
 
x0
, 
x1
, 
x2
, 
x3
, 
c0
;

97 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

98 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

99 
uöt32_t
 
èpC¡
, 
blkC¡
;

104 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

115 
blkC¡
 = 
blockSize
 >> 2;

119 
blkC¡
 > 0u)

123 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSrc
)++;

124 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSrc
)++;

127 
acc0
 = 0;

128 
acc1
 = 0;

129 
acc2
 = 0;

130 
acc3
 = 0;

133 
px1
 = 
pSèã
;

136 
pb
 = 
pC€ffs
;

139 
x0
 = 
	`_SIMD32_OFFSET
(
px1
);

142 
x1
 = 
	`_SIMD32_OFFSET
(
px1
 + 1u);

144 
px1
 += 2u;

148 
èpC¡
 = 
numT≠s
 >> 2;

150 
èpC¡
 > 0u)

153 
c0
 = *
	`__SIMD32
(
pb
)++;

156 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

159 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

162 
x2
 = 
	`_SIMD32_OFFSET
(
px1
);

165 
x3
 = 
	`_SIMD32_OFFSET
(
px1
 + 1u);

168 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

171 
acc3
 = 
	`__SMLALD
(
x3
, 
c0
,ácc3);

174 
c0
 = *
	`__SIMD32
(
pb
)++;

177 
acc0
 = 
	`__SMLALD
(
x2
, 
c0
,ácc0);

180 
acc1
 = 
	`__SMLALD
(
x3
, 
c0
,ácc1);

183 
x0
 = 
	`_SIMD32_OFFSET
(
px1
 + 2u);

186 
x1
 = 
	`_SIMD32_OFFSET
(
px1
 + 3u);

189 
acc2
 = 
	`__SMLALD
(
x0
, 
c0
,ácc2);

192 
acc3
 = 
	`__SMLALD
(
x1
, 
c0
,ácc3);

194 
px1
 += 4u;

196 
èpC¡
--;

203 if((
numT≠s
 & 0x3u) != 0u)

206 
c0
 = *
	`__SIMD32
(
pb
)++;

209 
x2
 = 
	`_SIMD32_OFFSET
(
px1
);

211 
x3
 = 
	`_SIMD32_OFFSET
(
px1
 + 1u);

214 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

216 
px1
 += 2u;

218 
acc1
 = 
	`__SMLALD
(
x1
, 
c0
,ácc1);

219 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

220 
acc3
 = 
	`__SMLALD
(
x3
, 
c0
,ácc3);

226 #i‚de‡
ARM_MATH_BIG_ENDIAN


228 *
	`__SIMD32
(
pD°
)++ =

229 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

230 *
	`__SIMD32
(
pD°
)++ =

231 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

235 *
	`__SIMD32
(
pD°
)++ =

236 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

237 *
	`__SIMD32
(
pD°
)++ =

238 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

245 
pSèã
 =ÖState + 4;

248 
blkC¡
--;

253 
blkC¡
 = 
blockSize
 % 0x4u;

254 
blkC¡
 > 0u)

257 *
pSèãCu∫t
++ = *
pSrc
++;

260 
acc0
 = 0;

263 
px1
 = 
pSèã
;

266 
pb
 = 
pC€ffs
;

268 
èpC¡
 = 
numT≠s
 >> 1;

273 
c0
 = *
	`__SIMD32
(
pb
)++;

274 
x0
 = *
	`__SIMD32
(
px1
)++;

276 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

277 
èpC¡
--;

279 
èpC¡
 > 0u);

283 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

286 
pSèã
 =ÖState + 1;

289 
blkC¡
--;

297 
pSèãCu∫t
 = 
S
->
pSèã
;

300 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

302 
èpC¡
 > 0u)

306 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

307 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

309 
èpC¡
--;

314 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

317 
èpC¡
 > 0u)

319 *
pSèãCu∫t
++ = *
pSèã
++;

322 
èpC¡
--;

324 
	}
}

328 
	$¨m_fú_q15
(

329 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

330 
q15_t
 * 
pSrc
,

331 
q15_t
 * 
pD°
,

332 
uöt32_t
 
blockSize
)

334 
q15_t
 *
pSèã
 = 
S
->pState;

335 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

336 
q15_t
 *
pSèãCu∫t
;

337 
q63_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

338 
q15_t
 *
pb
;

339 
q15_t
 *
px
;

340 
q31_t
 
x0
, 
x1
, 
x2
, 
c0
;

341 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

342 
uöt32_t
 
èpC¡
, 
blkC¡
;

347 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

358 
blkC¡
 = 
blockSize
 >> 2;

362 
blkC¡
 > 0u)

366 *
pSèãCu∫t
++ = *
pSrc
++;

367 *
pSèãCu∫t
++ = *
pSrc
++;

368 *
pSèãCu∫t
++ = *
pSrc
++;

369 *
pSèãCu∫t
++ = *
pSrc
++;

373 
acc0
 = 0;

374 
acc1
 = 0;

375 
acc2
 = 0;

376 
acc3
 = 0;

379 
px
 = 
pSèã
;

382 
pb
 = 
pC€ffs
;

385 
x0
 = *
	`__SIMD32
(
px
)++;

388 
x2
 = *
	`__SIMD32
(
px
)++;

392 
èpC¡
 = 
numT≠s
 >> 2;

394 
èpC¡
 > 0)

397 
c0
 = *
	`__SIMD32
(
pb
)++;

400 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

403 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

406 #i‚de‡
ARM_MATH_BIG_ENDIAN


407 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

409 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

413 
x0
 = 
	`_SIMD32_OFFSET
(
px
);

416 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

419 #i‚de‡
ARM_MATH_BIG_ENDIAN


420 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

422 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

426 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

429 
c0
 = *
	`__SIMD32
(
pb
)++;

432 
acc0
 = 
	`__SMLALD
(
x2
, 
c0
,ácc0);

435 
x2
 = 
	`_SIMD32_OFFSET
(
px
 + 2u);

438 
acc2
 = 
	`__SMLALD
(
x0
, 
c0
,ácc2);

441 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

444 #i‚de‡
ARM_MATH_BIG_ENDIAN


445 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

447 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

451 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

454 
px
 += 4u;

457 
èpC¡
--;

463 if((
numT≠s
 & 0x3u) != 0u)

467 
c0
 = *
	`__SIMD32
(
pb
)++;

470 
acc0
 = 
	`__SMLALD
(
x0
, 
c0
,ácc0);

471 
acc2
 = 
	`__SMLALD
(
x2
, 
c0
,ácc2);

474 #i‚de‡
ARM_MATH_BIG_ENDIAN


475 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

477 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

481 
x0
 = *
	`__SIMD32
(
px
);

484 
acc1
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc1);

487 #i‚de‡
ARM_MATH_BIG_ENDIAN


488 
x1
 = 
	`__PKHBT
(
x0
, 
x2
, 0);

490 
x1
 = 
	`__PKHBT
(
x2
, 
x0
, 0);

494 
acc3
 = 
	`__SMLALDX
(
x1
, 
c0
,ácc3);

500 #i‚de‡
ARM_MATH_BIG_ENDIAN


502 *
	`__SIMD32
(
pD°
)++ =

503 
	`__PKHBT
(
	`__SSAT
((
acc0
 >> 15), 16), __SSAT((
acc1
 >> 15), 16), 16);

505 *
	`__SIMD32
(
pD°
)++ =

506 
	`__PKHBT
(
	`__SSAT
((
acc2
 >> 15), 16), __SSAT((
acc3
 >> 15), 16), 16);

510 *
	`__SIMD32
(
pD°
)++ =

511 
	`__PKHBT
(
	`__SSAT
((
acc1
 >> 15), 16), __SSAT((
acc0
 >> 15), 16), 16);

513 *
	`__SIMD32
(
pD°
)++ =

514 
	`__PKHBT
(
	`__SSAT
((
acc3
 >> 15), 16), __SSAT((
acc2
 >> 15), 16), 16);

519 
pSèã
 =ÖState + 4;

522 
blkC¡
--;

527 
blkC¡
 = 
blockSize
 % 0x4u;

528 
blkC¡
 > 0u)

531 *
pSèãCu∫t
++ = *
pSrc
++;

534 
acc0
 = 0;

537 
px
 = 
pSèã
;

538 
pb
 = 
pC€ffs
;

540 
èpC¡
 = 
numT≠s
 >> 1u;

544 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

545 
acc0
 +(
q31_t
Ë* 
px
++ * *
pb
++;

546 
èpC¡
--;

548 
èpC¡
 > 0u);

552 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
acc0
 >> 15), 16));

555 
pSèã
 =ÖState + 1u;

558 
blkC¡
--;

566 
pSèãCu∫t
 = 
S
->
pSèã
;

569 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

571 
èpC¡
 > 0u)

573 *
pSèãCu∫t
++ = *
pSèã
++;

574 *
pSèãCu∫t
++ = *
pSèã
++;

575 *
pSèãCu∫t
++ = *
pSèã
++;

576 *
pSèãCu∫t
++ = *
pSèã
++;

578 
èpC¡
--;

583 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

586 
èpC¡
 > 0u)

588 *
pSèãCu∫t
++ = *
pSèã
++;

591 
èpC¡
--;

593 
	}
}

603 
	$¨m_fú_q15
(

604 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

605 
q15_t
 * 
pSrc
,

606 
q15_t
 * 
pD°
,

607 
uöt32_t
 
blockSize
)

609 
q15_t
 *
pSèã
 = 
S
->pState;

610 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

611 
q15_t
 *
pSèãCu∫t
;

615 
q15_t
 *
px
;

616 
q15_t
 *
pb
;

617 
q63_t
 
acc
;

618 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

619 
uöt32_t
 
èpC¡
, 
blkC¡
;

623 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

626 
blkC¡
 = 
blockSize
;

628 
blkC¡
 > 0u)

631 *
pSèãCu∫t
++ = *
pSrc
++;

634 
acc
 = 0;

637 
px
 = 
pSèã
;

640 
pb
 = 
pC€ffs
;

642 
èpC¡
 = 
numT≠s
;

648 
acc
 +(
q31_t
Ë* 
px
++ * *
pb
++;

649 
èpC¡
--;

650 } 
èpC¡
 > 0u);

654 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
acc
 >> 15u), 16);

657 
pSèã
 =ÖState + 1;

660 
blkC¡
--;

668 
pSèãCu∫t
 = 
S
->
pSèã
;

671 
èpC¡
 = (
numT≠s
 - 1u);

674 
èpC¡
 > 0u)

676 *
pSèãCu∫t
++ = *
pSèã
++;

679 
èpC¡
--;

682 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_q31
(

73 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

74 
q31_t
 * 
pSrc
,

75 
q31_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q31_t
 *
pSèã
 = 
S
->pState;

79 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

80 
q31_t
 *
pSèãCu∫t
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


87 
q31_t
 
x0
, 
x1
, 
x2
;

88 
q31_t
 
c0
;

89 
q31_t
 *
px
;

90 
q31_t
 *
pb
;

91 
q63_t
 
acc0
, 
acc1
, 
acc2
;

92 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

93 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
, 
èpC¡N3
;

97 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

107 
blkC¡
 = 
blockSize
 / 3;

108 
blockSize
 = blockSizê- (3 * 
blkC¡
);

110 
èpC¡
 = 
numT≠s
 / 3;

111 
èpC¡N3
 = 
numT≠s
 - (3 * 
èpC¡
);

115 
blkC¡
 > 0u)

118 *
pSèãCu∫t
++ = *
pSrc
++;

119 *
pSèãCu∫t
++ = *
pSrc
++;

120 *
pSèãCu∫t
++ = *
pSrc
++;

123 
acc0
 = 0;

124 
acc1
 = 0;

125 
acc2
 = 0;

128 
px
 = 
pSèã
;

131 
pb
 = 
pC€ffs
;

135 
x0
 = *(
px
++);

136 
x1
 = *(
px
++);

139 
i
 = 
èpC¡
;

141 
i
 > 0u)

144 
c0
 = *
pb
;

147 
x2
 = *(
px
++);

150 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

151 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

152 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

155 
c0
 = *(
pb
 + 1u);

156 
x0
 = *(
px
++);

159 
acc0
 +((
q63_t
Ë
x1
 * 
c0
);

160 
acc1
 +((
q63_t
Ë
x2
 * 
c0
);

161 
acc2
 +((
q63_t
Ë
x0
 * 
c0
);

164 
c0
 = *(
pb
 + 2u);

165 
x1
 = *(
px
++);

168 
pb
 += 3u;

171 
acc0
 +((
q63_t
Ë
x2
 * 
c0
);

172 
acc1
 +((
q63_t
Ë
x0
 * 
c0
);

173 
acc2
 +((
q63_t
Ë
x1
 * 
c0
);

176 
i
--;

181 
i
 = 
èpC¡N3
;

183 
i
 > 0u)

186 
c0
 = *(
pb
++);

189 
x2
 = *(
px
++);

192 
acc0
 +((
q63_t
Ë
x0
 * 
c0
);

193 
acc1
 +((
q63_t
Ë
x1
 * 
c0
);

194 
acc2
 +((
q63_t
Ë
x2
 * 
c0
);

197 
x0
 = 
x1
;

198 
x1
 = 
x2
;

201 
i
--;

205 
pSèã
 =ÖState + 3;

209 *
pD°
++ = (
q31_t
Ë(
acc0
 >> 31u);

210 *
pD°
++ = (
q31_t
Ë(
acc1
 >> 31u);

211 *
pD°
++ = (
q31_t
Ë(
acc2
 >> 31u);

214 
blkC¡
--;

220 
blockSize
 > 0u)

223 *
pSèãCu∫t
++ = *
pSrc
++;

226 
acc0
 = 0;

229 
px
 = 
pSèã
;

232 
pb
 = (
pC€ffs
);

234 
i
 = 
numT≠s
;

239 
acc0
 +(
q63_t
Ë* (
px
++Ë* (*(
pb
++));

240 
i
--;

241 } 
i
 > 0u);

245 *
pD°
++ = (
q31_t
Ë(
acc0
 >> 31u);

248 
pSèã
 =ÖState + 1;

251 
blockSize
--;

259 
pSèãCu∫t
 = 
S
->
pSèã
;

261 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

264 
èpC¡
 > 0u)

266 *
pSèãCu∫t
++ = *
pSèã
++;

267 *
pSèãCu∫t
++ = *
pSèã
++;

268 *
pSèãCu∫t
++ = *
pSèã
++;

269 *
pSèãCu∫t
++ = *
pSèã
++;

272 
èpC¡
--;

276 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

279 
èpC¡
 > 0u)

281 *
pSèãCu∫t
++ = *
pSèã
++;

284 
èpC¡
--;

291 
q31_t
 *
px
;

292 
q31_t
 *
pb
;

293 
q63_t
 
acc
;

294 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

295 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

299 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

302 
blkC¡
 = 
blockSize
;

304 
blkC¡
 > 0u)

307 *
pSèãCu∫t
++ = *
pSrc
++;

310 
acc
 = 0;

313 
px
 = 
pSèã
;

316 
pb
 = 
pC€ffs
;

318 
i
 = 
numT≠s
;

324 
acc
 +(
q63_t
Ë* 
px
++ * *
pb
++;

325 
i
--;

326 } 
i
 > 0u);

330 *
pD°
++ = (
q31_t
Ë(
acc
 >> 31u);

333 
pSèã
 =ÖState + 1;

336 
blkC¡
--;

344 
pSèãCu∫t
 = 
S
->
pSèã
;

347 
èpC¡
 = 
numT≠s
 - 1u;

350 
èpC¡
 > 0u)

352 *
pSèãCu∫t
++ = *
pSèã
++;

355 
èpC¡
--;

361 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q7.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_fú_q7
(

70 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

71 
q7_t
 * 
pSrc
,

72 
q7_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

76 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q7_t
 *
pSèã
 = 
S
->pState;

81 
q7_t
 *
pC€ffs
 = 
S
->pCoeffs;

82 
q7_t
 *
pSèãCu∫t
;

83 
q7_t
 
x0
, 
x1
, 
x2
, 
x3
;

84 
q7_t
 
c0
;

85 
q7_t
 *
px
;

86 
q7_t
 *
pb
;

87 
q31_t
 
acc0
, 
acc1
, 
acc2
, 
acc3
;

88 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

89 
uöt32_t
 
i
, 
èpC¡
, 
blkC¡
;

93 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

103 
blkC¡
 = 
blockSize
 >> 2;

107 
blkC¡
 > 0u)

110 *
pSèãCu∫t
++ = *
pSrc
++;

111 *
pSèãCu∫t
++ = *
pSrc
++;

112 *
pSèãCu∫t
++ = *
pSrc
++;

113 *
pSèãCu∫t
++ = *
pSrc
++;

116 
acc0
 = 0;

117 
acc1
 = 0;

118 
acc2
 = 0;

119 
acc3
 = 0;

122 
px
 = 
pSèã
;

125 
pb
 = 
pC€ffs
;

129 
x0
 = *(
px
++);

130 
x1
 = *(
px
++);

131 
x2
 = *(
px
++);

134 
èpC¡
 = 
numT≠s
 >> 2;

135 
i
 = 
èpC¡
;

137 
i
 > 0u)

140 
c0
 = *
pb
;

143 
x3
 = *
px
;

146 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

149 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

152 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

155 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

158 
c0
 = *(
pb
 + 1u);

161 
x0
 = *(
px
 + 1u);

164 
acc0
 +((
q15_t
Ë
x1
 * 
c0
);

165 
acc1
 +((
q15_t
Ë
x2
 * 
c0
);

166 
acc2
 +((
q15_t
Ë
x3
 * 
c0
);

167 
acc3
 +((
q15_t
Ë
x0
 * 
c0
);

170 
c0
 = *(
pb
 + 2u);

173 
x1
 = *(
px
 + 2u);

176 
acc0
 +((
q15_t
Ë
x2
 * 
c0
);

177 
acc1
 +((
q15_t
Ë
x3
 * 
c0
);

178 
acc2
 +((
q15_t
Ë
x0
 * 
c0
);

179 
acc3
 +((
q15_t
Ë
x1
 * 
c0
);

182 
c0
 = *(
pb
 + 3u);

185 
x2
 = *(
px
 + 3u);

188 
acc0
 +((
q15_t
Ë
x3
 * 
c0
);

189 
acc1
 +((
q15_t
Ë
x0
 * 
c0
);

190 
acc2
 +((
q15_t
Ë
x1
 * 
c0
);

191 
acc3
 +((
q15_t
Ë
x2
 * 
c0
);

194 
pb
 += 4u;

195 
px
 += 4u;

198 
i
--;

203 
i
 = 
numT≠s
 - (
èpC¡
 * 4u);

204 
i
 > 0u)

207 
c0
 = *(
pb
++);

210 
x3
 = *(
px
++);

213 
acc0
 +((
q15_t
Ë
x0
 * 
c0
);

214 
acc1
 +((
q15_t
Ë
x1
 * 
c0
);

215 
acc2
 +((
q15_t
Ë
x2
 * 
c0
);

216 
acc3
 +((
q15_t
Ë
x3
 * 
c0
);

219 
x0
 = 
x1
;

220 
x1
 = 
x2
;

221 
x2
 = 
x3
;

224 
i
--;

228 
pSèã
 =ÖState + 4;

232 
acc0
 = 
	`__SSAT
((acc0 >> 7u), 8);

233 *
pD°
++ = 
acc0
;

234 
acc1
 = 
	`__SSAT
((acc1 >> 7u), 8);

235 *
pD°
++ = 
acc1
;

236 
acc2
 = 
	`__SSAT
((acc2 >> 7u), 8);

237 *
pD°
++ = 
acc2
;

238 
acc3
 = 
	`__SSAT
((acc3 >> 7u), 8);

239 *
pD°
++ = 
acc3
;

242 
blkC¡
--;

248 
blkC¡
 = 
blockSize
 % 4u;

250 
blkC¡
 > 0u)

253 *
pSèãCu∫t
++ = *
pSrc
++;

256 
acc0
 = 0;

259 
px
 = 
pSèã
;

262 
pb
 = (
pC€ffs
);

264 
i
 = 
numT≠s
;

269 
acc0
 +(
q15_t
Ë* (
px
++Ë* (*(
pb
++));

270 
i
--;

271 } 
i
 > 0u);

275 *
pD°
++ = 
	`__SSAT
((
acc0
 >> 7u), 8);

278 
pSèã
 =ÖState + 1;

281 
blkC¡
--;

289 
pSèãCu∫t
 = 
S
->
pSèã
;

291 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

294 
èpC¡
 > 0u)

296 *
pSèãCu∫t
++ = *
pSèã
++;

297 *
pSèãCu∫t
++ = *
pSèã
++;

298 *
pSèãCu∫t
++ = *
pSèã
++;

299 *
pSèãCu∫t
++ = *
pSèã
++;

302 
èpC¡
--;

306 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

309 
èpC¡
 > 0u)

311 *
pSèãCu∫t
++ = *
pSèã
++;

314 
èpC¡
--;

321 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

322 
uöt32_t
 
i
, 
blkC¡
;

323 
q7_t
 *
pSèã
 = 
S
->pState;

324 
q7_t
 *
pC€ffs
 = 
S
->pCoeffs;

325 
q7_t
 *
px
, *
pb
;

326 
q31_t
 
acc
 = 0;

327 
q7_t
 *
pSèãCu∫t
;

332 
pSèãCu∫t
 = 
S
->
pSèã
 + (
numT≠s
 - 1u);

335 
blkC¡
 = 
blockSize
;

338 
blkC¡
 > 0u)

341 *
pSèãCu∫t
++ = *
pSrc
++;

344 
acc
 = 0;

347 
px
 = 
pSèã
;

350 
pb
 = 
pC€ffs
;

353 
i
 = 
numT≠s
;

355 
i
 > 0u)

358 
acc
 +(
q15_t
Ë* 
px
++ * *
pb
++;

359 
i
--;

363 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
acc
 >> 7), 8);

366 
pSèã
 =ÖState + 1;

369 
blkC¡
--;

378 
pSèãCu∫t
 = 
S
->
pSèã
;

382 
i
 = (
numT≠s
 - 1u);

385 
i
 > 0u)

387 *
pSèãCu∫t
++ = *
pSèã
++;

388 
i
--;

393 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_f32.c

40 
	~"¨m_m©h.h
"

123 
	$¨m_fú_•¨£_f32
(

124 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

125 
Êﬂt32_t
 * 
pSrc
,

126 
Êﬂt32_t
 * 
pD°
,

127 
Êﬂt32_t
 * 
pS¸©chIn
,

128 
uöt32_t
 
blockSize
)

131 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

132 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

133 
Êﬂt32_t
 *
px
;

134 
Êﬂt32_t
 *
py
 = 
pSèã
;

135 
Êﬂt32_t
 *
pb
 = 
pS¸©chIn
;

136 
Êﬂt32_t
 *
pOut
;

137 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

138 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

139 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

140 
öt32_t
 
ªadIndex
;

141 
uöt32_t
 
èpC¡
, 
blkC¡
;

142 
Êﬂt32_t
 
c€ff
 = *
pC€ffs
++;

148 
	`¨m_cúcuœrWrôe_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
S
->
°©eIndex
, 1,

149 (
öt32_t
 *Ë
pSrc
, 1, 
blockSize
);

153 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

156 if(
ªadIndex
 < 0)

158 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

162 
py
 = 
pSèã
;

165 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

166 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

167 
blockSize
);

170 
px
 = 
pb
;

173 
pOut
 = 
pD°
;

176 #i‚de‡
ARM_MATH_CM0_FAMILY


182 
blkC¡
 = 
blockSize
 >> 2u;

184 
blkC¡
 > 0u)

187 *
pOut
++ = *
px
++ * 
c€ff
;

188 *
pOut
++ = *
px
++ * 
c€ff
;

189 *
pOut
++ = *
px
++ * 
c€ff
;

190 *
pOut
++ = *
px
++ * 
c€ff
;

193 
blkC¡
--;

198 
blkC¡
 = 
blockSize
 % 0x4u;

200 
blkC¡
 > 0u)

203 *
pOut
++ = *
px
++ * 
c€ff
;

206 
blkC¡
--;

211 
c€ff
 = *
pC€ffs
++;

214 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

217 if(
ªadIndex
 < 0)

219 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

223 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

225 
èpC¡
 > 0u)

229 
py
 = 
pSèã
;

232 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

233 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

234 
blockSize
);

237 
px
 = 
pb
;

240 
pOut
 = 
pD°
;

244 
blkC¡
 = 
blockSize
 >> 2u;

246 
blkC¡
 > 0u)

249 *
pOut
++ +*
px
++ * 
c€ff
;

250 *
pOut
++ +*
px
++ * 
c€ff
;

251 *
pOut
++ +*
px
++ * 
c€ff
;

252 *
pOut
++ +*
px
++ * 
c€ff
;

255 
blkC¡
--;

260 
blkC¡
 = 
blockSize
 % 0x4u;

262 
blkC¡
 > 0u)

265 *
pOut
++ +*
px
++ * 
c€ff
;

268 
blkC¡
--;

273 
c€ff
 = *
pC€ffs
++;

276 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 -

277 (
öt32_t
Ë
blockSize
Ë- *
pT≠Dñay
++;

280 if(
ªadIndex
 < 0)

282 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

286 
èpC¡
--;

292 
py
 = 
pSèã
;

295 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

296 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

297 
blockSize
);

300 
px
 = 
pb
;

303 
pOut
 = 
pD°
;

307 
blkC¡
 = 
blockSize
 >> 2u;

309 
blkC¡
 > 0u)

312 *
pOut
++ +*
px
++ * 
c€ff
;

313 *
pOut
++ +*
px
++ * 
c€ff
;

314 *
pOut
++ +*
px
++ * 
c€ff
;

315 *
pOut
++ +*
px
++ * 
c€ff
;

318 
blkC¡
--;

323 
blkC¡
 = 
blockSize
 % 0x4u;

325 
blkC¡
 > 0u)

328 *
pOut
++ +*
px
++ * 
c€ff
;

331 
blkC¡
--;

338 
blkC¡
 = 
blockSize
;

340 
blkC¡
 > 0u)

343 *
pOut
++ = *
px
++ * 
c€ff
;

346 
blkC¡
--;

351 
c€ff
 = *
pC€ffs
++;

354 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

357 if(
ªadIndex
 < 0)

359 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

363 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

365 
èpC¡
 > 0u)

369 
py
 = 
pSèã
;

372 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

373 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

374 
blockSize
);

377 
px
 = 
pb
;

380 
pOut
 = 
pD°
;

382 
blkC¡
 = 
blockSize
;

384 
blkC¡
 > 0u)

387 *
pOut
++ +*
px
++ * 
c€ff
;

390 
blkC¡
--;

395 
c€ff
 = *
pC€ffs
++;

398 
ªadIndex
 =

399 ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

402 if(
ªadIndex
 < 0)

404 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

408 
èpC¡
--;

414 
py
 = 
pSèã
;

417 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

418 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

419 
blockSize
);

422 
px
 = 
pb
;

425 
pOut
 = 
pD°
;

427 
blkC¡
 = 
blockSize
;

429 
blkC¡
 > 0u)

432 *
pOut
++ +*
px
++ * 
c€ff
;

435 
blkC¡
--;

440 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_f32.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_öô_f32
(

74 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
Êﬂt32_t
 * 
pC€ffs
,

77 
Êﬂt32_t
 * 
pSèã
,

78 
öt32_t
 * 
pT≠Dñay
,

79 
uöt16_t
 
maxDñay
,

80 
uöt32_t
 
blockSize
)

83 
S
->
numT≠s
 =ÇumTaps;

86 
S
->
pC€ffs
 =ÖCoeffs;

89 
S
->
pT≠Dñay
 =ÖTapDelay;

92 
S
->
maxDñay
 = maxDelay;

95 
S
->
°©eIndex
 = 0u;

98 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
Êﬂt32_t
));

101 
S
->
pSèã
 =ÖState;

103 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_öô_q15
(

74 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
q15_t
 * 
pC€ffs
,

77 
q15_t
 * 
pSèã
,

78 
öt32_t
 * 
pT≠Dñay
,

79 
uöt16_t
 
maxDñay
,

80 
uöt32_t
 
blockSize
)

83 
S
->
numT≠s
 =ÇumTaps;

86 
S
->
pC€ffs
 =ÖCoeffs;

89 
S
->
pT≠Dñay
 =ÖTapDelay;

92 
S
->
maxDñay
 = maxDelay;

95 
S
->
°©eIndex
 = 0u;

98 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
q15_t
));

101 
S
->
pSèã
 =ÖState;

103 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_fú_•¨£_öô_q31
(

73 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

74 
uöt16_t
 
numT≠s
,

75 
q31_t
 * 
pC€ffs
,

76 
q31_t
 * 
pSèã
,

77 
öt32_t
 * 
pT≠Dñay
,

78 
uöt16_t
 
maxDñay
,

79 
uöt32_t
 
blockSize
)

82 
S
->
numT≠s
 =ÇumTaps;

85 
S
->
pC€ffs
 =ÖCoeffs;

88 
S
->
pT≠Dñay
 =ÖTapDelay;

91 
S
->
maxDñay
 = maxDelay;

94 
S
->
°©eIndex
 = 0u;

97 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
q31_t
));

100 
S
->
pSèã
 =ÖState;

102 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q7.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_öô_q7
(

74 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

75 
uöt16_t
 
numT≠s
,

76 
q7_t
 * 
pC€ffs
,

77 
q7_t
 * 
pSèã
,

78 
öt32_t
 * 
pT≠Dñay
,

79 
uöt16_t
 
maxDñay
,

80 
uöt32_t
 
blockSize
)

83 
S
->
numT≠s
 =ÇumTaps;

86 
S
->
pC€ffs
 =ÖCoeffs;

89 
S
->
pT≠Dñay
 =ÖTapDelay;

92 
S
->
maxDñay
 = maxDelay;

95 
S
->
°©eIndex
 = 0u;

98 
	`mem£t
(
pSèã
, 0, (
maxDñay
 + 
blockSize
Ë* (
q7_t
));

101 
S
->
pSèã
 =ÖState;

103 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q15.c

40 
	~"¨m_m©h.h
"

68 
	$¨m_fú_•¨£_q15
(

69 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

70 
q15_t
 * 
pSrc
,

71 
q15_t
 * 
pD°
,

72 
q15_t
 * 
pS¸©chIn
,

73 
q31_t
 * 
pS¸©chOut
,

74 
uöt32_t
 
blockSize
)

77 
q15_t
 *
pSèã
 = 
S
->pState;

78 
q15_t
 *
pIn
 = 
pSrc
;

79 
q15_t
 *
pOut
 = 
pD°
;

80 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

81 
q15_t
 *
px
;

82 
q15_t
 *
pb
 = 
pS¸©chIn
;

83 
q15_t
 *
py
 = 
pSèã
;

84 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

85 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

86 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

87 
öt32_t
 
ªadIndex
;

88 
uöt32_t
 
èpC¡
, 
blkC¡
;

89 
q15_t
 
c€ff
 = *
pC€ffs
++;

90 
q31_t
 *
pS¸2
 = 
pS¸©chOut
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
q31_t
 
ö1
, 
ö2
;

102 
	`¨m_cúcuœrWrôe_q15
(
py
, 
dñaySize
, &
S
->
°©eIndex
, 1, 
pIn
, 1, 
blockSize
);

105 
èpC¡
 = 
numT≠s
;

108 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

111 if(
ªadIndex
 < 0)

113 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

117 
py
 = 
pSèã
;

120 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

121 
pb
,Öb, 
blockSize
, 1, blockSize);

124 
px
 = 
pb
;

127 
pS¸©chOut
 = 
pS¸2
;

131 
blkC¡
 = 
blockSize
 >> 2;

133 
blkC¡
 > 0u)

136 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

137 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

138 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

139 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

142 
blkC¡
--;

147 
blkC¡
 = 
blockSize
 % 0x4u;

149 
blkC¡
 > 0u)

152 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

155 
blkC¡
--;

160 
c€ff
 = *
pC€ffs
++;

163 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

166 if(
ªadIndex
 < 0)

168 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

172 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

174 
èpC¡
 > 0u)

177 
py
 = 
pSèã
;

180 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

181 
pb
,Öb, 
blockSize
, 1, blockSize);

184 
px
 = 
pb
;

187 
pS¸©chOut
 = 
pS¸2
;

191 
blkC¡
 = 
blockSize
 >> 2;

193 
blkC¡
 > 0u)

196 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

197 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

198 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

199 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

202 
blkC¡
--;

207 
blkC¡
 = 
blockSize
 % 0x4u;

209 
blkC¡
 > 0u)

212 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

215 
blkC¡
--;

220 
c€ff
 = *
pC€ffs
++;

223 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

226 if(
ªadIndex
 < 0)

228 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

232 
èpC¡
--;

238 
py
 = 
pSèã
;

241 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

242 
pb
,Öb, 
blockSize
, 1, blockSize);

245 
px
 = 
pb
;

248 
pS¸©chOut
 = 
pS¸2
;

252 
blkC¡
 = 
blockSize
 >> 2;

254 
blkC¡
 > 0u)

257 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

258 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

259 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

260 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

263 
blkC¡
--;

268 
blkC¡
 = 
blockSize
 % 0x4u;

270 
blkC¡
 > 0u)

273 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

276 
blkC¡
--;

282 
blkC¡
 = 
blockSize
 >> 2;

284 
blkC¡
 > 0u)

286 
ö1
 = *
pS¸2
++;

287 
ö2
 = *
pS¸2
++;

289 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


291 *
	`__SIMD32
(
pOut
)++ =

292 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö1
 >> 15, 16), (q15_tË__SSAT(
ö2
 >> 15, 16),

296 *
	`__SIMD32
(
pOut
)++ =

297 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö2
 >> 15, 16), (q15_tË__SSAT(
ö1
 >> 15, 16),

302 
ö1
 = *
pS¸2
++;

304 
ö2
 = *
pS¸2
++;

306 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


308 *
	`__SIMD32
(
pOut
)++ =

309 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö1
 >> 15, 16), (q15_tË__SSAT(
ö2
 >> 15, 16),

314 *
	`__SIMD32
(
pOut
)++ =

315 
	`__PKHBT
((
q15_t
Ë
	`__SSAT
(
ö2
 >> 15, 16), (q15_tË__SSAT(
ö1
 >> 15, 16),

321 
blkC¡
--;

327 
blkC¡
 = 
blockSize
 % 0x4u;

329 
blkC¡
 > 0u)

331 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(*
pS¸2
++ >> 15, 16);

332 
blkC¡
--;

341 
	`¨m_cúcuœrWrôe_q15
(
py
, 
dñaySize
, &
S
->
°©eIndex
, 1, 
pIn
, 1, 
blockSize
);

344 
èpC¡
 = 
numT≠s
;

347 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

350 if(
ªadIndex
 < 0)

352 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

356 
py
 = 
pSèã
;

359 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

360 
pb
,Öb, 
blockSize
, 1, blockSize);

363 
px
 = 
pb
;

366 
pS¸©chOut
 = 
pS¸2
;

368 
blkC¡
 = 
blockSize
;

370 
blkC¡
 > 0u)

373 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

376 
blkC¡
--;

381 
c€ff
 = *
pC€ffs
++;

384 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

387 if(
ªadIndex
 < 0)

389 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

393 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

395 
èpC¡
 > 0u)

398 
py
 = 
pSèã
;

401 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

402 
pb
,Öb, 
blockSize
, 1, blockSize);

405 
px
 = 
pb
;

408 
pS¸©chOut
 = 
pS¸2
;

410 
blkC¡
 = 
blockSize
;

412 
blkC¡
 > 0u)

415 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

418 
blkC¡
--;

423 
c€ff
 = *
pC€ffs
++;

426 
ªadIndex
 = (
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

429 if(
ªadIndex
 < 0)

431 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

435 
èpC¡
--;

441 
py
 = 
pSèã
;

444 
	`¨m_cúcuœrRód_q15
(
py
, 
dñaySize
, &
ªadIndex
, 1,

445 
pb
,Öb, 
blockSize
, 1, blockSize);

448 
px
 = 
pb
;

451 
pS¸©chOut
 = 
pS¸2
;

453 
blkC¡
 = 
blockSize
;

455 
blkC¡
 > 0u)

458 *
pS¸©chOut
++ +(
q31_t
Ë* 
px
++ * 
c€ff
;

461 
blkC¡
--;

467 
blkC¡
 = 
blockSize
;

469 
blkC¡
 > 0u)

471 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(*
pS¸2
++ >> 15, 16);

472 
blkC¡
--;

477 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q31.c

40 
	~"¨m_m©h.h
"

66 
	$¨m_fú_•¨£_q31
(

67 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

68 
q31_t
 * 
pSrc
,

69 
q31_t
 * 
pD°
,

70 
q31_t
 * 
pS¸©chIn
,

71 
uöt32_t
 
blockSize
)

74 
q31_t
 *
pSèã
 = 
S
->pState;

75 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

76 
q31_t
 *
px
;

77 
q31_t
 *
py
 = 
pSèã
;

78 
q31_t
 *
pb
 = 
pS¸©chIn
;

79 
q31_t
 *
pOut
;

80 
q63_t
 
out
;

81 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

82 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

83 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

84 
öt32_t
 
ªadIndex
;

85 
uöt32_t
 
èpC¡
, 
blkC¡
;

86 
q31_t
 
c€ff
 = *
pC€ffs
++;

87 
q31_t
 
ö
;

92 
	`¨m_cúcuœrWrôe_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
S
->
°©eIndex
, 1,

93 (
öt32_t
 *Ë
pSrc
, 1, 
blockSize
);

96 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

99 if(
ªadIndex
 < 0)

101 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

105 
py
 = 
pSèã
;

108 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

109 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

110 
blockSize
);

113 
px
 = 
pb
;

116 
pOut
 = 
pD°
;

119 #i‚de‡
ARM_MATH_CM0_FAMILY


125 
blkC¡
 = 
blockSize
 >> 2;

127 
blkC¡
 > 0u)

130 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

131 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

132 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

133 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

143 
blkC¡
 > 0u)

146 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

149 
blkC¡
--;

154 
c€ff
 = *
pC€ffs
++;

157 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

160 if(
ªadIndex
 < 0)

162 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

166 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

168 
èpC¡
 > 0u)

171 
py
 = 
pSèã
;

174 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

175 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

176 
blockSize
);

179 
px
 = 
pb
;

182 
pOut
 = 
pD°
;

186 
blkC¡
 = 
blockSize
 >> 2;

188 
blkC¡
 > 0u)

190 
out
 = *
pOut
;

191 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

192 *
pOut
++ = (
q31_t
Ë(
out
);

194 
out
 = *
pOut
;

195 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

196 *
pOut
++ = (
q31_t
Ë(
out
);

198 
out
 = *
pOut
;

199 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

200 *
pOut
++ = (
q31_t
Ë(
out
);

202 
out
 = *
pOut
;

203 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

204 *
pOut
++ = (
q31_t
Ë(
out
);

207 
blkC¡
--;

212 
blkC¡
 = 
blockSize
 % 0x4u;

214 
blkC¡
 > 0u)

217 
out
 = *
pOut
;

218 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

219 *
pOut
++ = (
q31_t
Ë(
out
);

222 
blkC¡
--;

227 
c€ff
 = *
pC€ffs
++;

230 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

233 if(
ªadIndex
 < 0)

235 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

239 
èpC¡
--;

245 
py
 = 
pSèã
;

248 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

249 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

250 
blockSize
);

253 
px
 = 
pb
;

256 
pOut
 = 
pD°
;

260 
blkC¡
 = 
blockSize
 >> 2;

262 
blkC¡
 > 0u)

264 
out
 = *
pOut
;

265 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

266 *
pOut
++ = (
q31_t
Ë(
out
);

268 
out
 = *
pOut
;

269 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

270 *
pOut
++ = (
q31_t
Ë(
out
);

272 
out
 = *
pOut
;

273 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

274 *
pOut
++ = (
q31_t
Ë(
out
);

276 
out
 = *
pOut
;

277 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

278 *
pOut
++ = (
q31_t
Ë(
out
);

281 
blkC¡
--;

286 
blkC¡
 = 
blockSize
 % 0x4u;

288 
blkC¡
 > 0u)

291 
out
 = *
pOut
;

292 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

293 *
pOut
++ = (
q31_t
Ë(
out
);

296 
blkC¡
--;

300 
pOut
 = 
pD°
;

305 
blkC¡
 = 
blockSize
 >> 2;

307 
blkC¡
 > 0u)

309 
ö
 = *
pOut
 << 1;

310 *
pOut
++ = 
ö
;

311 
ö
 = *
pOut
 << 1;

312 *
pOut
++ = 
ö
;

313 
ö
 = *
pOut
 << 1;

314 *
pOut
++ = 
ö
;

315 
ö
 = *
pOut
 << 1;

316 *
pOut
++ = 
ö
;

319 
blkC¡
--;

324 
blkC¡
 = 
blockSize
 % 0x4u;

326 
blkC¡
 > 0u)

328 
ö
 = *
pOut
 << 1;

329 *
pOut
++ = 
ö
;

332 
blkC¡
--;

338 
blkC¡
 = 
blockSize
;

340 
blkC¡
 > 0u)

343 *
pOut
++ = (
q31_t
Ë(((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32);

346 
blkC¡
--;

351 
c€ff
 = *
pC€ffs
++;

354 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

357 if(
ªadIndex
 < 0)

359 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

363 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

365 
èpC¡
 > 0u)

368 
py
 = 
pSèã
;

371 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

372 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

373 
blockSize
);

376 
px
 = 
pb
;

379 
pOut
 = 
pD°
;

381 
blkC¡
 = 
blockSize
;

383 
blkC¡
 > 0u)

386 
out
 = *
pOut
;

387 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

388 *
pOut
++ = (
q31_t
Ë(
out
);

391 
blkC¡
--;

396 
c€ff
 = *
pC€ffs
++;

399 
ªadIndex
 = (
öt32_t
Ë(
S
->
°©eIndex
 - 
blockSize
Ë- *
pT≠Dñay
++;

402 if(
ªadIndex
 < 0)

404 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

408 
èpC¡
--;

414 
py
 = 
pSèã
;

417 
	`¨m_cúcuœrRód_f32
((
öt32_t
 *Ë
py
, 
dñaySize
, &
ªadIndex
, 1,

418 (
öt32_t
 *Ë
pb
, (öt32_à*Ëpb, 
blockSize
, 1,

419 
blockSize
);

422 
px
 = 
pb
;

425 
pOut
 = 
pD°
;

427 
blkC¡
 = 
blockSize
;

429 
blkC¡
 > 0u)

432 
out
 = *
pOut
;

433 
out
 +((
q63_t
Ë* 
px
++ * 
c€ff
) >> 32;

434 *
pOut
++ = (
q31_t
Ë(
out
);

437 
blkC¡
--;

441 
pOut
 = 
pD°
;

444 
blkC¡
 = 
blockSize
;

446 
blkC¡
 > 0u)

448 
ö
 = *
pOut
 << 1;

449 *
pOut
++ = 
ö
;

452 
blkC¡
--;

457 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q7.c

40 
	~"¨m_m©h.h
"

73 
	$¨m_fú_•¨£_q7
(

74 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

75 
q7_t
 * 
pSrc
,

76 
q7_t
 * 
pD°
,

77 
q7_t
 * 
pS¸©chIn
,

78 
q31_t
 * 
pS¸©chOut
,

79 
uöt32_t
 
blockSize
)

82 
q7_t
 *
pSèã
 = 
S
->pState;

83 
q7_t
 *
pC€ffs
 = 
S
->pCoeffs;

84 
q7_t
 *
px
;

85 
q7_t
 *
py
 = 
pSèã
;

86 
q7_t
 *
pb
 = 
pS¸©chIn
;

87 
q7_t
 *
pOut
 = 
pD°
;

88 
öt32_t
 *
pT≠Dñay
 = 
S
->pTapDelay;

89 
uöt32_t
 
dñaySize
 = 
S
->
maxDñay
 + 
blockSize
;

90 
uöt16_t
 
numT≠s
 = 
S
->numTaps;

91 
öt32_t
 
ªadIndex
;

92 
uöt32_t
 
èpC¡
, 
blkC¡
;

93 
q7_t
 
c€ff
 = *
pC€ffs
++;

94 
q31_t
 *
pS¸2
 = 
pS¸©chOut
;

95 
q31_t
 
ö
;

98 #i‚de‡
ARM_MATH_CM0_FAMILY


102 
q7_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

106 
	`¨m_cúcuœrWrôe_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
S
->
°©eIndex
, 1, 
pSrc
, 1,

107 
blockSize
);

110 
èpC¡
 = 
numT≠s
;

113 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

116 if(
ªadIndex
 < 0)

118 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

122 
py
 = 
pSèã
;

125 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

126 (
öt32_t
Ë
blockSize
, 1, blockSize);

129 
px
 = 
pb
;

132 
pS¸©chOut
 = 
pS¸2
;

136 
blkC¡
 = 
blockSize
 >> 2;

138 
blkC¡
 > 0u)

141 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

142 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

143 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

144 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

147 
blkC¡
--;

152 
blkC¡
 = 
blockSize
 % 0x4u;

154 
blkC¡
 > 0u)

157 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

160 
blkC¡
--;

165 
c€ff
 = *
pC€ffs
++;

168 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

171 if(
ªadIndex
 < 0)

173 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

177 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

179 
èpC¡
 > 0u)

182 
py
 = 
pSèã
;

185 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

186 (
öt32_t
Ë
blockSize
, 1, blockSize);

189 
px
 = 
pb
;

192 
pS¸©chOut
 = 
pS¸2
;

196 
blkC¡
 = 
blockSize
 >> 2;

198 
blkC¡
 > 0u)

201 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

202 *
pS¸©chOut
++ = 
ö
;

203 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

204 *
pS¸©chOut
++ = 
ö
;

205 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

206 *
pS¸©chOut
++ = 
ö
;

207 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

208 *
pS¸©chOut
++ = 
ö
;

211 
blkC¡
--;

216 
blkC¡
 = 
blockSize
 % 0x4u;

218 
blkC¡
 > 0u)

221 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

222 *
pS¸©chOut
++ = 
ö
;

225 
blkC¡
--;

230 
c€ff
 = *
pC€ffs
++;

233 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 -

234 (
öt32_t
Ë
blockSize
Ë- *
pT≠Dñay
++;

237 if(
ªadIndex
 < 0)

239 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

243 
èpC¡
--;

249 
py
 = 
pSèã
;

252 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

253 (
öt32_t
Ë
blockSize
, 1, blockSize);

256 
px
 = 
pb
;

259 
pS¸©chOut
 = 
pS¸2
;

263 
blkC¡
 = 
blockSize
 >> 2;

265 
blkC¡
 > 0u)

268 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

269 *
pS¸©chOut
++ = 
ö
;

270 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

271 *
pS¸©chOut
++ = 
ö
;

272 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

273 *
pS¸©chOut
++ = 
ö
;

274 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

275 *
pS¸©chOut
++ = 
ö
;

278 
blkC¡
--;

283 
blkC¡
 = 
blockSize
 % 0x4u;

285 
blkC¡
 > 0u)

288 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

289 *
pS¸©chOut
++ = 
ö
;

292 
blkC¡
--;

298 
blkC¡
 = 
blockSize
 >> 2;

300 
blkC¡
 > 0u)

302 
ö1
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

303 
ö2
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

304 
ö3
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

305 
ö4
 = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

307 *
	`__SIMD32
(
pOut
)++ = 
	`__PACKq7
(
ö1
, 
ö2
, 
ö3
, 
ö4
);

310 
blkC¡
--;

315 
blkC¡
 = 
blockSize
 % 0x4u;

317 
blkC¡
 > 0u)

319 *
pOut
++ = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

322 
blkC¡
--;

331 
	`¨m_cúcuœrWrôe_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
S
->
°©eIndex
, 1, 
pSrc
, 1,

332 
blockSize
);

335 
èpC¡
 = 
numT≠s
;

338 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

341 if(
ªadIndex
 < 0)

343 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

347 
py
 = 
pSèã
;

350 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

351 (
öt32_t
Ë
blockSize
, 1, blockSize);

354 
px
 = 
pb
;

357 
pS¸©chOut
 = 
pS¸2
;

360 
blkC¡
 = 
blockSize
;

362 
blkC¡
 > 0u)

365 *
pS¸©chOut
++ = ((
q31_t
Ë* 
px
++ * 
c€ff
);

368 
blkC¡
--;

373 
c€ff
 = *
pC€ffs
++;

376 
ªadIndex
 = ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

379 if(
ªadIndex
 < 0)

381 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

385 
èpC¡
 = (
uöt32_t
Ë
numT≠s
 - 2u;

387 
èpC¡
 > 0u)

390 
py
 = 
pSèã
;

393 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

394 (
öt32_t
Ë
blockSize
, 1, blockSize);

397 
px
 = 
pb
;

400 
pS¸©chOut
 = 
pS¸2
;

403 
blkC¡
 = 
blockSize
;

405 
blkC¡
 > 0u)

408 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

409 *
pS¸©chOut
++ = 
ö
;

412 
blkC¡
--;

417 
c€ff
 = *
pC€ffs
++;

420 
ªadIndex
 =

421 ((
öt32_t
Ë
S
->
°©eIndex
 - (öt32_tË
blockSize
Ë- *
pT≠Dñay
++;

424 if(
ªadIndex
 < 0)

426 
ªadIndex
 +(
öt32_t
Ë
dñaySize
;

430 
èpC¡
--;

436 
py
 = 
pSèã
;

439 
	`¨m_cúcuœrRód_q7
(
py
, (
öt32_t
Ë
dñaySize
, &
ªadIndex
, 1, 
pb
,Öb,

440 (
öt32_t
Ë
blockSize
, 1, blockSize);

443 
px
 = 
pb
;

446 
pS¸©chOut
 = 
pS¸2
;

449 
blkC¡
 = 
blockSize
;

451 
blkC¡
 > 0u)

454 
ö
 = *
pS¸©chOut
 + ((
q31_t
Ë* 
px
++ * 
c€ff
);

455 *
pS¸©chOut
++ = 
ö
;

458 
blkC¡
--;

464 
blkC¡
 = 
blockSize
;

466 
blkC¡
 > 0u)

468 *
pOut
++ = (
q7_t
Ë
	`__SSAT
(*
pS¸2
++ >> 7, 8);

471 
blkC¡
--;

476 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_f32.c

41 
	~"¨m_m©h.h
"

130 #i‚de‡
ARM_MATH_CM0_FAMILY


134 
	$¨m_iú_œâi˚_f32
(

135 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

136 
Êﬂt32_t
 * 
pSrc
,

137 
Êﬂt32_t
 * 
pD°
,

138 
uöt32_t
 
blockSize
)

140 
Êﬂt32_t
 
‚ext1
, 
gcuº1
, 
g√xt
;

141 
Êﬂt32_t
 
acc
;

142 
uöt32_t
 
blkC¡
, 
èpC¡
;

143 
Êﬂt32_t
 *
px1
, *
px2
, *
pk
, *
pv
;

144 
uöt32_t
 
numSèges
 = 
S
->numStages;

145 
Êﬂt32_t
 *
pSèã
;

146 
Êﬂt32_t
 *
pSèãCu∫t
;

147 
Êﬂt32_t
 
k1
, 
k2
;

148 
Êﬂt32_t
 
v1
, 
v2
, 
v3
, 
v4
;

149 
Êﬂt32_t
 
gcuº2
;

150 
Êﬂt32_t
 
‚ext2
;

153 
blkC¡
 = 
blockSize
;

156 
pSèã
 = &
S
->pState[0];

159 
blkC¡
 > 0u)

163 
‚ext2
 = *
pSrc
++;

166 
pv
 = &
S
->
pvC€ffs
[0];

168 
pk
 = &
S
->
pkC€ffs
[0];

171 
px1
 = 
pSèã
;

173 
px2
 = 
pSèã
;

176 
acc
 = 0.0;

179 
èpC¡
 = (
numSèges
) >> 2;

181 
èpC¡
 > 0u)

184 
gcuº1
 = *
px1
;

187 
k1
 = *
pk
;

190 
‚ext1
 = 
‚ext2
 - (
k1
 * 
gcuº1
);

193 
v1
 = *
pv
;

196 
k2
 = *(
pk
 + 1u);

199 
gcuº2
 = *(
px1
 + 1u);

202 
v2
 = *(
pv
 + 1u);

205 
‚ext2
 = 
‚ext1
 - (
k2
 * 
gcuº2
);

208 
g√xt
 = 
gcuº1
 + (
k1
 * 
‚ext1
);

211 
k1
 = *(
pk
 + 2u);

214 *
px2
++ = 
g√xt
;

217 
gcuº1
 = *(
px1
 + 2u);

220 
acc
 +(
g√xt
 * 
v1
);

223 
‚ext1
 = 
‚ext2
 - (
k1
 * 
gcuº1
);

226 
g√xt
 = 
gcuº2
 + (
k2
 * 
‚ext2
);

229 
gcuº2
 = *(
px1
 + 3u);

232 
acc
 +(
g√xt
 * 
v2
);

235 
k2
 = *(
pk
 + 3u);

238 *
px2
++ = 
g√xt
;

241 
‚ext2
 = 
‚ext1
 - (
k2
 * 
gcuº2
);

244 
g√xt
 = 
gcuº1
 + (
k1
 * 
‚ext1
);

247 
v3
 = *(
pv
 + 2u);

250 
acc
 +(
g√xt
 * 
v3
);

253 *
px2
++ = 
g√xt
;

256 
pk
 += 4u;

259 
g√xt
 = (
‚ext2
 * 
k2
Ë+ 
gcuº2
;

262 
v4
 = *(
pv
 + 3u);

265 
acc
 +(
g√xt
 * 
v4
);

268 *
px2
++ = 
g√xt
;

271 
px1
 += 4u;

272 
pv
 += 4u;

274 
èpC¡
--;

279 
èpC¡
 = (
numSèges
) % 0x4u;

281 
èpC¡
 > 0u)

283 
gcuº1
 = *
px1
++;

285 
‚ext1
 = 
‚ext2
 - ((*
pk
Ë* 
gcuº1
);

286 
g√xt
 = (
‚ext1
 * (*
pk
++)Ë+ 
gcuº1
;

288 
acc
 +(
g√xt
 * (*
pv
++));

289 *
px2
++ = 
g√xt
;

290 
‚ext2
 = 
‚ext1
;

292 
èpC¡
--;

297 
acc
 +(
‚ext2
 * (*
pv
));

299 *
px2
++ = 
‚ext2
;

302 *
pD°
++ = 
acc
;

305 
pSèã
 =ÖState + 1u;

307 
blkC¡
--;

315 
pSèãCu∫t
 = &
S
->
pSèã
[0];

316 
pSèã
 = &
S
->pSèã[
blockSize
];

318 
èpC¡
 = 
numSèges
 >> 2u;

321 
èpC¡
 > 0u)

323 *
pSèãCu∫t
++ = *
pSèã
++;

324 *
pSèãCu∫t
++ = *
pSèã
++;

325 *
pSèãCu∫t
++ = *
pSèã
++;

326 *
pSèãCu∫t
++ = *
pSèã
++;

329 
èpC¡
--;

334 
èpC¡
 = (
numSèges
) % 0x4u;

337 
èpC¡
 > 0u)

339 *
pSèãCu∫t
++ = *
pSèã
++;

342 
èpC¡
--;

344 
	}
}

348 
	$¨m_iú_œâi˚_f32
(

349 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

350 
Êﬂt32_t
 * 
pSrc
,

351 
Êﬂt32_t
 * 
pD°
,

352 
uöt32_t
 
blockSize
)

354 
Êﬂt32_t
 
fcuº
, 
‚ext
 = 0, 
gcuº
, 
g√xt
;

355 
Êﬂt32_t
 
acc
;

356 
uöt32_t
 
blkC¡
, 
èpC¡
;

357 
Êﬂt32_t
 *
px1
, *
px2
, *
pk
, *
pv
;

358 
uöt32_t
 
numSèges
 = 
S
->numStages;

359 
Êﬂt32_t
 *
pSèã
;

360 
Êﬂt32_t
 *
pSèãCu∫t
;

365 
blkC¡
 = 
blockSize
;

367 
pSèã
 = &
S
->pState[0];

370 
blkC¡
 > 0u)

374 
fcuº
 = *
pSrc
++;

377 
px1
 = 
pSèã
;

379 
px2
 = 
pSèã
;

381 
acc
 = 0.0f;

383 
pv
 = &
S
->
pvC€ffs
[0];

385 
pk
 = &
S
->
pkC€ffs
[0];

389 
èpC¡
 = 
numSèges
;

391 
èpC¡
 > 0u)

393 
gcuº
 = *
px1
++;

395 
‚ext
 = 
fcuº
 - ((*
pk
Ë* 
gcuº
);

396 
g√xt
 = (
‚ext
 * (*
pk
++)Ë+ 
gcuº
;

399 
acc
 +(
g√xt
 * (*
pv
++));

400 *
px2
++ = 
g√xt
;

401 
fcuº
 = 
‚ext
;

404 
èpC¡
--;

409 
acc
 +(
‚ext
 * (*
pv
));

411 *
px2
++ = 
‚ext
;

414 *
pD°
++ = 
acc
;

417 
pSèã
 =ÖState + 1u;

418 
blkC¡
--;

426 
pSèãCu∫t
 = &
S
->
pSèã
[0];

427 
pSèã
 = &
S
->pSèã[
blockSize
];

429 
èpC¡
 = 
numSèges
;

432 
èpC¡
 > 0u)

434 *
pSèãCu∫t
++ = *
pSèã
++;

437 
èpC¡
--;

440 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_f32.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_iú_œâi˚_öô_f32
(

64 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

65 
uöt16_t
 
numSèges
,

66 
Êﬂt32_t
 * 
pkC€ffs
,

67 
Êﬂt32_t
 * 
pvC€ffs
,

68 
Êﬂt32_t
 * 
pSèã
,

69 
uöt32_t
 
blockSize
)

72 
S
->
numSèges
 =ÇumStages;

75 
S
->
pkC€ffs
 =ÖkCoeffs;

78 
S
->
pvC€ffs
 =ÖvCoeffs;

81 
	`mem£t
(
pSèã
, 0, (
numSèges
 + 
blockSize
Ë* (
Êﬂt32_t
));

84 
S
->
pSèã
 =ÖState;

87 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q15.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_iú_œâi˚_öô_q15
(

64 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

65 
uöt16_t
 
numSèges
,

66 
q15_t
 * 
pkC€ffs
,

67 
q15_t
 * 
pvC€ffs
,

68 
q15_t
 * 
pSèã
,

69 
uöt32_t
 
blockSize
)

72 
S
->
numSèges
 =ÇumStages;

75 
S
->
pkC€ffs
 =ÖkCoeffs;

78 
S
->
pvC€ffs
 =ÖvCoeffs;

81 
	`mem£t
(
pSèã
, 0, (
numSèges
 + 
blockSize
Ë* (
q15_t
));

84 
S
->
pSèã
 =ÖState;

87 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q31.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_iú_œâi˚_öô_q31
(

64 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

65 
uöt16_t
 
numSèges
,

66 
q31_t
 * 
pkC€ffs
,

67 
q31_t
 * 
pvC€ffs
,

68 
q31_t
 * 
pSèã
,

69 
uöt32_t
 
blockSize
)

72 
S
->
numSèges
 =ÇumStages;

75 
S
->
pkC€ffs
 =ÖkCoeffs;

78 
S
->
pvC€ffs
 =ÖvCoeffs;

81 
	`mem£t
(
pSèã
, 0, (
numSèges
 + 
blockSize
Ë* (
q31_t
));

84 
S
->
pSèã
 =ÖState;

87 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q15.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_iú_œâi˚_q15
(

72 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

73 
q15_t
 * 
pSrc
,

74 
q15_t
 * 
pD°
,

75 
uöt32_t
 
blockSize
)

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
fcuº
, 
‚ext
, 
gcuº
 = 0, 
g√xt
;

84 
q15_t
 
g√xt1
, 
g√xt2
;

85 
uöt32_t
 
°gC¡
;

86 
q63_t
 
acc
;

87 
uöt32_t
 
blkC¡
, 
èpC¡
;

88 
q15_t
 *
px1
, *
px2
, *
pk
, *
pv
;

89 
uöt32_t
 
numSèges
 = 
S
->numStages;

90 
q15_t
 *
pSèã
;

91 
q15_t
 *
pSèãCu∫t
;

92 
q15_t
 
out
;

93 
q31_t
 
v
;

94 #ifde‡
UNALIGNED_SUPPORT_DISABLE


95 
q15_t
 
v1
, 
v2
;

99 
blkC¡
 = 
blockSize
;

101 
pSèã
 = &
S
->pState[0];

104 
blkC¡
 > 0u)

108 
fcuº
 = *
pSrc
++;

111 
px1
 = 
pSèã
;

113 
px2
 = 
pSèã
;

115 
acc
 = 0;

117 
pv
 = &
S
->
pvC€ffs
[0];

119 
pk
 = &
S
->
pkC€ffs
[0];

123 
gcuº
 = *
px1
++;

125 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

126 
‚ext
 = 
	`__SSAT
(fnext, 16);

128 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

129 
g√xt
 = 
	`__SSAT
(gnext, 16);

131 *
px2
++ = (
q15_t
Ë
g√xt
;

133 
acc
 +(
q31_t
Ë((
g√xt
 * (*
pv
++)));

137 
fcuº
 = 
‚ext
;

140 
èpC¡
 = (
numSèges
 - 1u) >> 2;

142 
èpC¡
 > 0u)

147 
gcuº
 = *
px1
++;

150 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

151 
‚ext
 = 
	`__SSAT
(fnext, 16);

153 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

154 
g√xt1
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

156 *
px2
++ = (
q15_t
Ë
g√xt1
;

161 
gcuº
 = *
px1
++;

164 
fcuº
 = 
‚ext
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

165 
fcuº
 = 
	`__SSAT
(fcurr, 16);

167 
g√xt
 = (((
q31_t
Ë
fcuº
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

168 
g√xt2
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

170 *
px2
++ = (
q15_t
Ë
g√xt2
;

173 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


175 
v
 = *
	`__SIMD32
(
pv
)++;

179 
v1
 = *
pv
++;

180 
v2
 = *
pv
++;

182 #i‚de‡
ARM_MATH_BIG_ENDIAN


184 
v
 = 
	`__PKHBT
(
v1
, 
v2
, 16);

188 
v
 = 
	`__PKHBT
(
v2
, 
v1
, 16);

197 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


199 
g√xt
 = 
	`__PKHBT
(
g√xt1
, 
g√xt2
, 16);

203 
g√xt
 = 
	`__PKHBT
(
g√xt2
, 
g√xt1
, 16);

211 
acc
 = 
	`__SMLALD
(
g√xt
, 
v
,ácc);

216 
gcuº
 = *
px1
++;

219 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

220 
‚ext
 = 
	`__SSAT
(fnext, 16);

222 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

223 
g√xt1
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

225 *
px2
++ = (
q15_t
Ë
g√xt1
;

230 
gcuº
 = *
px1
++;

233 
fcuº
 = 
‚ext
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

234 
fcuº
 = 
	`__SSAT
(fcurr, 16);

236 
g√xt
 = (((
q31_t
Ë
fcuº
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

237 
g√xt2
 = (
q15_t
Ë
	`__SSAT
(
g√xt
, 16);

239 *
px2
++ = (
q15_t
Ë
g√xt2
;

242 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


244 
v
 = *
	`__SIMD32
(
pv
)++;

248 
v1
 = *
pv
++;

249 
v2
 = *
pv
++;

251 #i‚de‡
ARM_MATH_BIG_ENDIAN


253 
v
 = 
	`__PKHBT
(
v1
, 
v2
, 16);

257 
v
 = 
	`__PKHBT
(
v2
, 
v1
, 16);

265 #i‚de‡ 
ARM_MATH_BIG_ENDIAN


267 
g√xt
 = 
	`__PKHBT
(
g√xt1
, 
g√xt2
, 16);

271 
g√xt
 = 
	`__PKHBT
(
g√xt2
, 
g√xt1
, 16);

279 
acc
 = 
	`__SMLALD
(
g√xt
, 
v
,ácc);

281 
èpC¡
--;

285 
‚ext
 = 
fcuº
;

288 
èpC¡
 = (
numSèges
 - 1u) % 0x4u;

290 
èpC¡
 > 0u)

292 
gcuº
 = *
px1
++;

294 
‚ext
 = 
fcuº
 - (((
q31_t
Ë
gcuº
 * (*
pk
)) >> 15);

295 
‚ext
 = 
	`__SSAT
(fnext, 16);

296 
g√xt
 = (((
q31_t
Ë
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

297 
g√xt
 = 
	`__SSAT
(gnext, 16);

299 
acc
 +(
q31_t
Ë(((q31_tË
g√xt
 * (*
pv
++)));

300 *
px2
++ = (
q15_t
Ë
g√xt
;

301 
fcuº
 = 
‚ext
;

303 
èpC¡
--;

307 
acc
 +(
q31_t
Ë(((q31_tË
‚ext
 * (*
pv
++)));

309 
out
 = (
q15_t
Ë
	`__SSAT
(
acc
 >> 15, 16);

310 *
px2
++ = (
q15_t
Ë
‚ext
;

313 *
pD°
++ = 
out
;

316 
pSèã
 =ÖState + 1u;

317 
blkC¡
--;

324 
pSèãCu∫t
 = &
S
->
pSèã
[0];

325 
pSèã
 = &
S
->pSèã[
blockSize
];

327 
°gC¡
 = (
numSèges
 >> 2u);

330 
°gC¡
 > 0u)

332 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


334 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

335 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

339 *
pSèãCu∫t
++ = *
pSèã
++;

340 *
pSèãCu∫t
++ = *
pSèã
++;

341 *
pSèãCu∫t
++ = *
pSèã
++;

342 *
pSèãCu∫t
++ = *
pSèã
++;

347 
°gC¡
--;

352 
°gC¡
 = (
numSèges
) % 0x4u;

355 
°gC¡
 > 0u)

357 *
pSèãCu∫t
++ = *
pSèã
++;

360 
°gC¡
--;

367 
q31_t
 
fcuº
, 
‚ext
 = 0, 
gcuº
 = 0, 
g√xt
;

368 
uöt32_t
 
°gC¡
;

369 
q63_t
 
acc
;

370 
uöt32_t
 
blkC¡
, 
èpC¡
;

371 
q15_t
 *
px1
, *
px2
, *
pk
, *
pv
;

372 
uöt32_t
 
numSèges
 = 
S
->numStages;

373 
q15_t
 *
pSèã
;

374 
q15_t
 *
pSèãCu∫t
;

375 
q15_t
 
out
;

378 
blkC¡
 = 
blockSize
;

380 
pSèã
 = &
S
->pState[0];

383 
blkC¡
 > 0u)

387 
fcuº
 = *
pSrc
++;

390 
px1
 = 
pSèã
;

392 
px2
 = 
pSèã
;

394 
acc
 = 0;

396 
pv
 = &
S
->
pvC€ffs
[0];

398 
pk
 = &
S
->
pkC€ffs
[0];

400 
èpC¡
 = 
numSèges
;

402 
èpC¡
 > 0u)

404 
gcuº
 = *
px1
++;

407 
‚ext
 = 
fcuº
 - ((
gcuº
 * (*
pk
)) >> 15);

408 
‚ext
 = 
	`__SSAT
(fnext, 16);

410 
g√xt
 = ((
‚ext
 * (*
pk
++)Ë>> 15Ë+ 
gcuº
;

411 
g√xt
 = 
	`__SSAT
(gnext, 16);

414 
acc
 +(
q31_t
Ë((
g√xt
 * (*
pv
++)));

416 *
px2
++ = (
q15_t
Ë
g√xt
;

418 
fcuº
 = 
‚ext
;

420 
èpC¡
--;

424 
acc
 +(
q31_t
Ë((
‚ext
 * (*
pv
++)));

426 
out
 = (
q15_t
Ë
	`__SSAT
(
acc
 >> 15, 16);

427 *
px2
++ = (
q15_t
Ë
‚ext
;

430 *
pD°
++ = 
out
;

433 
pSèã
 =ÖState + 1u;

434 
blkC¡
--;

441 
pSèãCu∫t
 = &
S
->
pSèã
[0];

442 
pSèã
 = &
S
->pSèã[
blockSize
];

444 
°gC¡
 = 
numSèges
;

447 
°gC¡
 > 0u)

449 *
pSèãCu∫t
++ = *
pSèã
++;

452 
°gC¡
--;

457 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_iú_œâi˚_q31
(

71 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

72 
q31_t
 * 
pSrc
,

73 
q31_t
 * 
pD°
,

74 
uöt32_t
 
blockSize
)

76 
q31_t
 
fcuº
, 
‚ext
 = 0, 
gcuº
 = 0, 
g√xt
;

77 
q63_t
 
acc
;

78 
uöt32_t
 
blkC¡
, 
èpC¡
;

79 
q31_t
 *
px1
, *
px2
, *
pk
, *
pv
;

80 
uöt32_t
 
numSèges
 = 
S
->numStages;

81 
q31_t
 *
pSèã
;

82 
q31_t
 *
pSèãCu∫t
;

84 
blkC¡
 = 
blockSize
;

86 
pSèã
 = &
S
->pState[0];

89 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
blkC¡
 > 0u)

98 
fcuº
 = *
pSrc
++;

101 
px1
 = 
pSèã
;

103 
px2
 = 
pSèã
;

105 
acc
 = 0;

107 
pv
 = &
S
->
pvC€ffs
[0];

109 
pk
 = &
S
->
pkC€ffs
[0];

113 
gcuº
 = *
px1
++;

115 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

117 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

119 *
px2
++ = 
g√xt
;

121 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

124 
fcuº
 = 
‚ext
;

127 
èpC¡
 = (
numSèges
 - 1u) >> 2;

129 
èpC¡
 > 0u)

134 
gcuº
 = *
px1
++;

136 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

138 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

141 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

143 *
px2
++ = 
g√xt
;

147 
gcuº
 = *
px1
++;

150 
fcuº
 = 
	`__QSUB
(
‚ext
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

152 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)) >> 31));

155 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

157 *
px2
++ = 
g√xt
;

162 
gcuº
 = *
px1
++;

165 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

167 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

170 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

172 *
px2
++ = 
g√xt
;

177 
gcuº
 = *
px1
++;

180 
fcuº
 = 
	`__QSUB
(
‚ext
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

182 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
fcuº
 * (*
pk
++)) >> 31));

185 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

187 *
px2
++ = 
g√xt
;

189 
èpC¡
--;

193 
‚ext
 = 
fcuº
;

196 
èpC¡
 = (
numSèges
 - 1u) % 0x4u;

198 
èpC¡
 > 0u)

200 
gcuº
 = *
px1
++;

202 
‚ext
 = 
	`__QSUB
(
fcuº
, (
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31));

203 
g√xt
 = 
	`__QADD
(
gcuº
, (
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31));

205 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

206 *
px2
++ = 
g√xt
;

207 
fcuº
 = 
‚ext
;

209 
èpC¡
--;

214 
acc
 +(
q63_t
Ë
‚ext
 *(

215 *
pv
++);

217 *
px2
++ = 
‚ext
;

220 *
pD°
++ = (
q31_t
Ë(
acc
 >> 31u);

223 
pSèã
 =ÖState + 1u;

224 
blkC¡
--;

232 
pSèãCu∫t
 = &
S
->
pSèã
[0];

233 
pSèã
 = &
S
->pSèã[
blockSize
];

235 
èpC¡
 = 
numSèges
 >> 2u;

238 
èpC¡
 > 0u)

240 *
pSèãCu∫t
++ = *
pSèã
++;

241 *
pSèãCu∫t
++ = *
pSèã
++;

242 *
pSèãCu∫t
++ = *
pSèã
++;

243 *
pSèãCu∫t
++ = *
pSèã
++;

246 
èpC¡
--;

251 
èpC¡
 = (
numSèges
) % 0x4u;

254 
èpC¡
 > 0u)

256 *
pSèãCu∫t
++ = *
pSèã
++;

259 
èpC¡
--;

266 
blkC¡
 > 0u)

270 
fcuº
 = *
pSrc
++;

273 
px1
 = 
pSèã
;

275 
px2
 = 
pSèã
;

277 
acc
 = 0;

279 
pv
 = &
S
->
pvC€ffs
[0];

281 
pk
 = &
S
->
pkC€ffs
[0];

283 
èpC¡
 = 
numSèges
;

285 
èpC¡
 > 0u)

287 
gcuº
 = *
px1
++;

290 
‚ext
 =

291 
	`˛ù_q63_to_q31
(((
q63_t
Ë
fcuº
 -

292 ((
q31_t
Ë(((
q63_t
Ë
gcuº
 * (*
pk
)) >> 31))));

294 
g√xt
 =

295 
	`˛ù_q63_to_q31
(((
q63_t
Ë
gcuº
 +

296 ((
q31_t
Ë(((
q63_t
Ë
‚ext
 * (*
pk
++)) >> 31))));

299 
acc
 +((
q63_t
Ë
g√xt
 * *
pv
++);

301 *
px2
++ = 
g√xt
;

303 
fcuº
 = 
‚ext
;

305 
èpC¡
--;

309 
acc
 +(
q63_t
Ë
‚ext
 *(

310 *
pv
++);

312 *
px2
++ = 
‚ext
;

315 *
pD°
++ = (
q31_t
Ë(
acc
 >> 31u);

318 
pSèã
 =ÖState + 1u;

319 
blkC¡
--;

327 
pSèãCu∫t
 = &
S
->
pSèã
[0];

328 
pSèã
 = &
S
->pSèã[
blockSize
];

330 
èpC¡
 = 
numSèges
;

333 
èpC¡
 > 0u)

335 *
pSèãCu∫t
++ = *
pSèã
++;

338 
èpC¡
--;

343 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_f32.c

41 
	~"¨m_m©h.h
"

181 
	$¨m_lms_f32
(

182 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

183 
Êﬂt32_t
 * 
pSrc
,

184 
Êﬂt32_t
 * 
pRef
,

185 
Êﬂt32_t
 * 
pOut
,

186 
Êﬂt32_t
 * 
pEº
,

187 
uöt32_t
 
blockSize
)

189 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

190 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

191 
Êﬂt32_t
 *
pSèãCu∫t
;

192 
Êﬂt32_t
 *
px
, *
pb
;

193 
Êﬂt32_t
 
mu
 = 
S
->mu;

194 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

195 
uöt32_t
 
èpC¡
, 
blkC¡
;

196 
Êﬂt32_t
 
sum
, 
e
, 
d
;

197 
Êﬂt32_t
 
w
 = 0.0f;

199 
e
 = 0.0f;

200 
d
 = 0.0f;

204 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

206 
blkC¡
 = 
blockSize
;

209 #i‚de‡
ARM_MATH_CM0_FAMILY


213 
blkC¡
 > 0u)

216 *
pSèãCu∫t
++ = *
pSrc
++;

219 
px
 = 
pSèã
;

222 
pb
 = (
pC€ffs
);

225 
sum
 = 0.0f;

228 
èpC¡
 = 
numT≠s
 >> 2;

230 
èpC¡
 > 0u)

233 
sum
 +(*
px
++Ë* (*
pb
++);

234 
sum
 +(*
px
++Ë* (*
pb
++);

235 
sum
 +(*
px
++Ë* (*
pb
++);

236 
sum
 +(*
px
++Ë* (*
pb
++);

239 
èpC¡
--;

243 
èpC¡
 = 
numT≠s
 % 0x4u;

245 
èpC¡
 > 0u)

248 
sum
 +(*
px
++Ë* (*
pb
++);

251 
èpC¡
--;

255 *
pOut
++ = 
sum
;

258 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

259 
e
 = 
d
 - 
sum
;

260 *
pEº
++ = 
e
;

263 
w
 = 
e
 * 
mu
;

266 
px
 = 
pSèã
;

269 
pb
 = (
pC€ffs
);

272 
èpC¡
 = 
numT≠s
 >> 2;

275 
èpC¡
 > 0u)

278 *
pb
 = *pb + (
w
 * (*
px
++));

279 
pb
++;

281 *
pb
 = *pb + (
w
 * (*
px
++));

282 
pb
++;

284 *
pb
 = *pb + (
w
 * (*
px
++));

285 
pb
++;

287 *
pb
 = *pb + (
w
 * (*
px
++));

288 
pb
++;

291 
èpC¡
--;

295 
èpC¡
 = 
numT≠s
 % 0x4u;

297 
èpC¡
 > 0u)

300 *
pb
 = *pb + (
w
 * (*
px
++));

301 
pb
++;

304 
èpC¡
--;

308 
pSèã
 =ÖState + 1;

311 
blkC¡
--;

320 
pSèãCu∫t
 = 
S
->
pSèã
;

323 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

326 
èpC¡
 > 0u)

328 *
pSèãCu∫t
++ = *
pSèã
++;

329 *
pSèãCu∫t
++ = *
pSèã
++;

330 *
pSèãCu∫t
++ = *
pSèã
++;

331 *
pSèãCu∫t
++ = *
pSèã
++;

334 
èpC¡
--;

338 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

341 
èpC¡
 > 0u)

343 *
pSèãCu∫t
++ = *
pSèã
++;

346 
èpC¡
--;

353 
blkC¡
 > 0u)

356 *
pSèãCu∫t
++ = *
pSrc
++;

359 
px
 = 
pSèã
;

362 
pb
 = 
pC€ffs
;

365 
sum
 = 0.0f;

368 
èpC¡
 = 
numT≠s
;

370 
èpC¡
 > 0u)

373 
sum
 +(*
px
++Ë* (*
pb
++);

376 
èpC¡
--;

380 *
pOut
++ = 
sum
;

383 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

384 
e
 = 
d
 - 
sum
;

385 *
pEº
++ = 
e
;

388 
w
 = 
e
 * 
mu
;

391 
px
 = 
pSèã
;

394 
pb
 = 
pC€ffs
;

397 
èpC¡
 = 
numT≠s
;

399 
èpC¡
 > 0u)

402 *
pb
 = *pb + (
w
 * (*
px
++));

403 
pb
++;

406 
èpC¡
--;

410 
pSèã
 =ÖState + 1;

413 
blkC¡
--;

422 
pSèãCu∫t
 = 
S
->
pSèã
;

425 
èpC¡
 = (
numT≠s
 - 1u);

428 
èpC¡
 > 0u)

430 *
pSèãCu∫t
++ = *
pSèã
++;

433 
èpC¡
--;

438 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_f32.c

41 
	~"¨m_m©h.h
"

69 
	$¨m_lms_öô_f32
(

70 
¨m_lms_ö°™˚_f32
 * 
S
,

71 
uöt16_t
 
numT≠s
,

72 
Êﬂt32_t
 * 
pC€ffs
,

73 
Êﬂt32_t
 * 
pSèã
,

74 
Êﬂt32_t
 
mu
,

75 
uöt32_t
 
blockSize
)

78 
S
->
numT≠s
 =ÇumTaps;

81 
S
->
pC€ffs
 =ÖCoeffs;

84 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1)Ë* (
Êﬂt32_t
));

87 
S
->
pSèã
 =ÖState;

90 
S
->
mu
 = mu;

91 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q15.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_lms_öô_q15
(

75 
¨m_lms_ö°™˚_q15
 * 
S
,

76 
uöt16_t
 
numT≠s
,

77 
q15_t
 * 
pC€ffs
,

78 
q15_t
 * 
pSèã
,

79 
q15_t
 
mu
,

80 
uöt32_t
 
blockSize
,

81 
uöt32_t
 
po°Shi·
)

84 
S
->
numT≠s
 =ÇumTaps;

87 
S
->
pC€ffs
 =ÖCoeffs;

90 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

93 
S
->
pSèã
 =ÖState;

96 
S
->
mu
 = mu;

99 
S
->
po°Shi·
 =ÖostShift;

101 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q31.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_lms_öô_q31
(

75 
¨m_lms_ö°™˚_q31
 * 
S
,

76 
uöt16_t
 
numT≠s
,

77 
q31_t
 * 
pC€ffs
,

78 
q31_t
 * 
pSèã
,

79 
q31_t
 
mu
,

80 
uöt32_t
 
blockSize
,

81 
uöt32_t
 
po°Shi·
)

84 
S
->
numT≠s
 =ÇumTaps;

87 
S
->
pC€ffs
 =ÖCoeffs;

90 
	`mem£t
(
pSèã
, 0, ((
uöt32_t
Ë
numT≠s
 + (
blockSize
 - 1u)Ë* (
q31_t
));

93 
S
->
pSèã
 =ÖState;

96 
S
->
mu
 = mu;

99 
S
->
po°Shi·
 =ÖostShift;

101 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_f32.c

41 
	~"¨m_m©h.h
"

173 
	$¨m_lms_n‹m_f32
(

174 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

175 
Êﬂt32_t
 * 
pSrc
,

176 
Êﬂt32_t
 * 
pRef
,

177 
Êﬂt32_t
 * 
pOut
,

178 
Êﬂt32_t
 * 
pEº
,

179 
uöt32_t
 
blockSize
)

181 
Êﬂt32_t
 *
pSèã
 = 
S
->pState;

182 
Êﬂt32_t
 *
pC€ffs
 = 
S
->pCoeffs;

183 
Êﬂt32_t
 *
pSèãCu∫t
;

184 
Êﬂt32_t
 *
px
, *
pb
;

185 
Êﬂt32_t
 
mu
 = 
S
->mu;

186 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

187 
uöt32_t
 
èpC¡
, 
blkC¡
;

188 
Êﬂt32_t
 
íîgy
;

189 
Êﬂt32_t
 
sum
, 
e
, 
d
;

190 
Êﬂt32_t
 
w
, 
x0
, 
ö
;

193 
e
 = 0.0f;

194 
d
 = 0.0f;

195 
w
 = 0.0f;

197 
íîgy
 = 
S
->energy;

198 
x0
 = 
S
->x0;

202 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

205 
blkC¡
 = 
blockSize
;

208 #i‚de‡
ARM_MATH_CM0_FAMILY


212 
blkC¡
 > 0u)

215 *
pSèãCu∫t
++ = *
pSrc
;

218 
px
 = 
pSèã
;

221 
pb
 = (
pC€ffs
);

224 
ö
 = *
pSrc
++;

227 
íîgy
 -
x0
 * x0;

228 
íîgy
 +
ö
 * in;

231 
sum
 = 0.0f;

234 
èpC¡
 = 
numT≠s
 >> 2;

236 
èpC¡
 > 0u)

239 
sum
 +(*
px
++Ë* (*
pb
++);

240 
sum
 +(*
px
++Ë* (*
pb
++);

241 
sum
 +(*
px
++Ë* (*
pb
++);

242 
sum
 +(*
px
++Ë* (*
pb
++);

245 
èpC¡
--;

249 
èpC¡
 = 
numT≠s
 % 0x4u;

251 
èpC¡
 > 0u)

254 
sum
 +(*
px
++Ë* (*
pb
++);

257 
èpC¡
--;

261 *
pOut
++ = 
sum
;

264 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

265 
e
 = 
d
 - 
sum
;

266 *
pEº
++ = 
e
;

270 
w
 = (
e
 * 
mu
Ë/ (
íîgy
 + 0.000000119209289f);

273 
px
 = 
pSèã
;

276 
pb
 = (
pC€ffs
);

279 
èpC¡
 = 
numT≠s
 >> 2;

282 
èpC¡
 > 0u)

285 *
pb
 +
w
 * (*
px
++);

286 
pb
++;

288 *
pb
 +
w
 * (*
px
++);

289 
pb
++;

291 *
pb
 +
w
 * (*
px
++);

292 
pb
++;

294 *
pb
 +
w
 * (*
px
++);

295 
pb
++;

299 
èpC¡
--;

303 
èpC¡
 = 
numT≠s
 % 0x4u;

305 
èpC¡
 > 0u)

308 *
pb
 +
w
 * (*
px
++);

309 
pb
++;

312 
èpC¡
--;

315 
x0
 = *
pSèã
;

318 
pSèã
 =ÖState + 1;

321 
blkC¡
--;

324 
S
->
íîgy
 =Énergy;

325 
S
->
x0
 = x0;

332 
pSèãCu∫t
 = 
S
->
pSèã
;

335 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

338 
èpC¡
 > 0u)

340 *
pSèãCu∫t
++ = *
pSèã
++;

341 *
pSèãCu∫t
++ = *
pSèã
++;

342 *
pSèãCu∫t
++ = *
pSèã
++;

343 *
pSèãCu∫t
++ = *
pSèã
++;

346 
èpC¡
--;

350 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

353 
èpC¡
 > 0u)

355 *
pSèãCu∫t
++ = *
pSèã
++;

358 
èpC¡
--;

365 
blkC¡
 > 0u)

368 *
pSèãCu∫t
++ = *
pSrc
;

371 
px
 = 
pSèã
;

374 
pb
 = 
pC€ffs
;

377 
ö
 = *
pSrc
++;

380 
íîgy
 -
x0
 * x0;

381 
íîgy
 +
ö
 * in;

384 
sum
 = 0.0f;

387 
èpC¡
 = 
numT≠s
;

389 
èpC¡
 > 0u)

392 
sum
 +(*
px
++Ë* (*
pb
++);

395 
èpC¡
--;

399 *
pOut
++ = 
sum
;

402 
d
 = (
Êﬂt32_t
Ë(*
pRef
++);

403 
e
 = 
d
 - 
sum
;

404 *
pEº
++ = 
e
;

408 
w
 = (
e
 * 
mu
Ë/ (
íîgy
 + 0.000000119209289f);

411 
px
 = 
pSèã
;

414 
pb
 = 
pC€ffs
;

417 
èpC¡
 = 
numT≠s
;

419 
èpC¡
 > 0u)

422 *
pb
 +
w
 * (*
px
++);

423 
pb
++;

426 
èpC¡
--;

429 
x0
 = *
pSèã
;

432 
pSèã
 =ÖState + 1;

435 
blkC¡
--;

438 
S
->
íîgy
 =Énergy;

439 
S
->
x0
 = x0;

446 
pSèãCu∫t
 = 
S
->
pSèã
;

449 
èpC¡
 = (
numT≠s
 - 1u);

452 
èpC¡
 > 0u)

454 *
pSèãCu∫t
++ = *
pSèã
++;

457 
èpC¡
--;

462 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_f32.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_lms_n‹m_öô_f32
(

73 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

74 
uöt16_t
 
numT≠s
,

75 
Êﬂt32_t
 * 
pC€ffs
,

76 
Êﬂt32_t
 * 
pSèã
,

77 
Êﬂt32_t
 
mu
,

78 
uöt32_t
 
blockSize
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
Êﬂt32_t
));

90 
S
->
pSèã
 =ÖState;

93 
S
->
mu
 = mu;

96 
S
->
íîgy
 = 0.0f;

99 
S
->
x0
 = 0.0f;

101 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

72 
	$¨m_lms_n‹m_öô_q15
(

73 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

74 
uöt16_t
 
numT≠s
,

75 
q15_t
 * 
pC€ffs
,

76 
q15_t
 * 
pSèã
,

77 
q15_t
 
mu
,

78 
uöt32_t
 
blockSize
,

79 
uöt8_t
 
po°Shi·
)

82 
S
->
numT≠s
 =ÇumTaps;

85 
S
->
pC€ffs
 =ÖCoeffs;

88 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q15_t
));

91 
S
->
po°Shi·
 =ÖostShift;

94 
S
->
pSèã
 =ÖState;

97 
S
->
mu
 = mu;

100 
S
->
ªcùTabÀ
 = (
q15_t
 *Ë
¨mRecùTabÀQ15
;

103 
S
->
íîgy
 = 0;

106 
S
->
x0
 = 0;

108 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

71 
	$¨m_lms_n‹m_öô_q31
(

72 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

73 
uöt16_t
 
numT≠s
,

74 
q31_t
 * 
pC€ffs
,

75 
q31_t
 * 
pSèã
,

76 
q31_t
 
mu
,

77 
uöt32_t
 
blockSize
,

78 
uöt8_t
 
po°Shi·
)

81 
S
->
numT≠s
 =ÇumTaps;

84 
S
->
pC€ffs
 =ÖCoeffs;

87 
	`mem£t
(
pSèã
, 0, (
numT≠s
 + (
blockSize
 - 1u)Ë* (
q31_t
));

90 
S
->
po°Shi·
 =ÖostShift;

93 
S
->
pSèã
 =ÖState;

96 
S
->
mu
 = mu;

99 
S
->
ªcùTabÀ
 = (
q31_t
 *Ë
¨mRecùTabÀQ31
;

102 
S
->
íîgy
 = 0;

105 
S
->
x0
 = 0;

107 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q15.c

41 
	~"¨m_m©h.h
"

79 
	$¨m_lms_n‹m_q15
(

80 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

81 
q15_t
 * 
pSrc
,

82 
q15_t
 * 
pRef
,

83 
q15_t
 * 
pOut
,

84 
q15_t
 * 
pEº
,

85 
uöt32_t
 
blockSize
)

87 
q15_t
 *
pSèã
 = 
S
->pState;

88 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

89 
q15_t
 *
pSèãCu∫t
;

90 
q15_t
 *
px
, *
pb
;

91 
q15_t
 
mu
 = 
S
->mu;

92 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

93 
uöt32_t
 
èpC¡
, 
blkC¡
;

94 
q31_t
 
íîgy
;

95 
q63_t
 
acc
;

96 
q15_t
 
e
 = 0, 
d
 = 0;

97 
q15_t
 
w
 = 0, 
ö
;

98 
q15_t
 
x0
;

100 
q15_t
 
îr‹Xmu
, 
⁄eByE√rgy
;

101 
q15_t
 
po°Shi·
;

102 
q31_t
 
c€f
;

103 
q31_t
 
acc_l
, 
acc_h
;

104 
öt32_t
 
lShi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

105 
öt32_t
 
uShi·
 = (32 - 
lShi·
);

107 
íîgy
 = 
S
->energy;

108 
x0
 = 
S
->x0;

112 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

115 
blkC¡
 = 
blockSize
;

118 #i‚de‡
ARM_MATH_CM0_FAMILY


122 
blkC¡
 > 0u)

125 *
pSèãCu∫t
++ = *
pSrc
;

128 
px
 = 
pSèã
;

131 
pb
 = (
pC€ffs
);

134 
ö
 = *
pSrc
++;

137 
íîgy
 -(((
q31_t
Ë
x0
 * (x0)) >> 15);

138 
íîgy
 +(((
q31_t
Ë
ö
 * (in)) >> 15);

141 
acc
 = 0;

144 
èpC¡
 = 
numT≠s
 >> 2;

146 
èpC¡
 > 0u)

150 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


152 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

153 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

157 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

158 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

159 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

160 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

165 
èpC¡
--;

169 
èpC¡
 = 
numT≠s
 % 0x4u;

171 
èpC¡
 > 0u)

174 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

177 
èpC¡
--;

181 
acc_l
 = 
acc
 & 0xffffffff;

184 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

187 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

190 
acc
 = 
	`__SSAT
(acc, 16u);

193 *
pOut
++ = (
q15_t
Ë
acc
;

196 
d
 = *
pRef
++;

197 
e
 = 
d
 - (
q15_t
Ë
acc
;

198 *
pEº
++ = 
e
;

201 
po°Shi·
 = 
	`¨m_ªcù_q15
((
q15_t
Ë
íîgy
 + 
DELTA_Q15
,

202 &
⁄eByE√rgy
, 
S
->
ªcùTabÀ
);

205 
îr‹Xmu
 = (
q15_t
Ë(((
q31_t
Ë
e
 * 
mu
) >> 15);

208 
acc
 = (((
q31_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (15 - 
po°Shi·
));

211 
w
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë
acc
, 16);

214 
px
 = 
pSèã
;

217 
pb
 = (
pC€ffs
);

220 
èpC¡
 = 
numT≠s
 >> 2;

223 
èpC¡
 > 0u)

225 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

226 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

227 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

228 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

229 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

230 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

231 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

232 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

235 
èpC¡
--;

239 
èpC¡
 = 
numT≠s
 % 0x4u;

241 
èpC¡
 > 0u)

244 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

245 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

248 
èpC¡
--;

252 
x0
 = *
pSèã
;

255 
pSèã
 =ÖState + 1u;

258 
blkC¡
--;

262 
S
->
íîgy
 = (
q15_t
)Énergy;

263 
S
->
x0
 = x0;

270 
pSèãCu∫t
 = 
S
->
pSèã
;

273 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

275 
èpC¡
 > 0u)

278 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


280 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

281 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

285 *
pSèãCu∫t
++ = *
pSèã
++;

286 *
pSèãCu∫t
++ = *
pSèã
++;

287 *
pSèãCu∫t
++ = *
pSèã
++;

288 *
pSèãCu∫t
++ = *
pSèã
++;

292 
èpC¡
--;

297 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

300 
èpC¡
 > 0u)

302 *
pSèãCu∫t
++ = *
pSèã
++;

305 
èpC¡
--;

312 
blkC¡
 > 0u)

315 *
pSèãCu∫t
++ = *
pSrc
;

318 
px
 = 
pSèã
;

321 
pb
 = 
pC€ffs
;

324 
ö
 = *
pSrc
++;

327 
íîgy
 -(((
q31_t
Ë
x0
 * (x0)) >> 15);

328 
íîgy
 +(((
q31_t
Ë
ö
 * (in)) >> 15);

331 
acc
 = 0;

334 
èpC¡
 = 
numT≠s
;

336 
èpC¡
 > 0u)

339 
acc
 +(((
q31_t
Ë* 
px
++ * (*
pb
++)));

342 
èpC¡
--;

346 
acc_l
 = 
acc
 & 0xffffffff;

349 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

352 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

355 
acc
 = 
	`__SSAT
(acc, 16u);

361 *
pOut
++ = (
q15_t
Ë
acc
;

364 
d
 = *
pRef
++;

365 
e
 = 
d
 - (
q15_t
Ë
acc
;

366 *
pEº
++ = 
e
;

369 
po°Shi·
 = 
	`¨m_ªcù_q15
((
q15_t
Ë
íîgy
 + 
DELTA_Q15
,

370 &
⁄eByE√rgy
, 
S
->
ªcùTabÀ
);

373 
îr‹Xmu
 = (
q15_t
Ë(((
q31_t
Ë
e
 * 
mu
) >> 15);

376 
acc
 = (((
q31_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (15 - 
po°Shi·
));

379 
w
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë
acc
, 16);

382 
px
 = 
pSèã
;

385 
pb
 = (
pC€ffs
);

388 
èpC¡
 = 
numT≠s
;

390 
èpC¡
 > 0u)

393 
c€f
 = *
pb
 + (((
q31_t
Ë
w
 * (*
px
++)) >> 15);

394 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

397 
èpC¡
--;

401 
x0
 = *
pSèã
;

404 
pSèã
 =ÖState + 1u;

407 
blkC¡
--;

411 
S
->
íîgy
 = (
q15_t
)Énergy;

412 
S
->
x0
 = x0;

419 
pSèãCu∫t
 = 
S
->
pSèã
;

422 
èpC¡
 = (
numT≠s
 - 1u);

425 
èpC¡
 > 0u)

427 *
pSèãCu∫t
++ = *
pSèã
++;

430 
èpC¡
--;

435 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q31.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_lms_n‹m_q31
(

81 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

82 
q31_t
 * 
pSrc
,

83 
q31_t
 * 
pRef
,

84 
q31_t
 * 
pOut
,

85 
q31_t
 * 
pEº
,

86 
uöt32_t
 
blockSize
)

88 
q31_t
 *
pSèã
 = 
S
->pState;

89 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

90 
q31_t
 *
pSèãCu∫t
;

91 
q31_t
 *
px
, *
pb
;

92 
q31_t
 
mu
 = 
S
->mu;

93 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

94 
uöt32_t
 
èpC¡
, 
blkC¡
;

95 
q63_t
 
íîgy
;

96 
q63_t
 
acc
;

97 
q31_t
 
e
 = 0, 
d
 = 0;

98 
q31_t
 
w
 = 0, 
ö
;

99 
q31_t
 
x0
;

101 
q31_t
 
îr‹Xmu
, 
⁄eByE√rgy
;

102 
q31_t
 
po°Shi·
;

103 
q31_t
 
c€f
;

104 
q31_t
 
acc_l
, 
acc_h
;

105 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

106 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

108 
íîgy
 = 
S
->energy;

109 
x0
 = 
S
->x0;

113 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

116 
blkC¡
 = 
blockSize
;

119 #i‚de‡
ARM_MATH_CM0_FAMILY


123 
blkC¡
 > 0u)

127 *
pSèãCu∫t
++ = *
pSrc
;

130 
px
 = 
pSèã
;

133 
pb
 = (
pC€ffs
);

136 
ö
 = *
pSrc
++;

139 
íîgy
 = (
q31_t
Ë((((
q63_t
)Énergy << 32) -

140 (((
q63_t
Ë
x0
 * x0) << 1)) >> 32);

141 
íîgy
 = (
q31_t
Ë(((((
q63_t
Ë
ö
 * in) << 1) + (energy << 32)) >> 32);

144 
acc
 = 0;

147 
èpC¡
 = 
numT≠s
 >> 2;

149 
èpC¡
 > 0u)

152 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

153 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

154 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

155 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

158 
èpC¡
--;

162 
èpC¡
 = 
numT≠s
 % 0x4u;

164 
èpC¡
 > 0u)

167 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

170 
èpC¡
--;

175 
acc_l
 = 
acc
 & 0xffffffff;

178 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

180 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

183 *
pOut
++ = (
q31_t
Ë
acc
;

186 
d
 = *
pRef
++;

187 
e
 = 
d
 - (
q31_t
Ë
acc
;

188 *
pEº
++ = 
e
;

191 
po°Shi·
 = 
	`¨m_ªcù_q31
(
íîgy
 + 
DELTA_Q31
,

192 &
⁄eByE√rgy
, &
S
->
ªcùTabÀ
[0]);

195 
îr‹Xmu
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

198 
w
 = 
	`˛ù_q63_to_q31
(((
q63_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (31 - 
po°Shi·
));

201 
px
 = 
pSèã
;

204 
pb
 = (
pC€ffs
);

207 
èpC¡
 = 
numT≠s
 >> 2;

210 
èpC¡
 > 0u)

215 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

217 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

219 
pb
++;

221 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

222 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

223 
pb
++;

225 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

226 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

227 
pb
++;

229 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

230 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

231 
pb
++;

234 
èpC¡
--;

238 
èpC¡
 = 
numT≠s
 % 0x4u;

240 
èpC¡
 > 0u)

243 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

244 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

245 
pb
++;

248 
èpC¡
--;

252 
x0
 = *
pSèã
;

255 
pSèã
 =ÖState + 1;

258 
blkC¡
--;

262 
S
->
íîgy
 = (
q31_t
)Énergy;

263 
S
->
x0
 = x0;

270 
pSèãCu∫t
 = 
S
->
pSèã
;

273 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

276 
èpC¡
 > 0u)

278 *
pSèãCu∫t
++ = *
pSèã
++;

279 *
pSèãCu∫t
++ = *
pSèã
++;

280 *
pSèãCu∫t
++ = *
pSèã
++;

281 *
pSèãCu∫t
++ = *
pSèã
++;

284 
èpC¡
--;

288 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

291 
èpC¡
 > 0u)

293 *
pSèãCu∫t
++ = *
pSèã
++;

296 
èpC¡
--;

303 
blkC¡
 > 0u)

307 *
pSèãCu∫t
++ = *
pSrc
;

310 
px
 = 
pSèã
;

313 
pb
 = 
pC€ffs
;

316 
ö
 = *
pSrc
++;

319 
íîgy
 =

320 (
q31_t
Ë((((
q63_t
Ë
íîgy
 << 32Ë- (((q63_tË
x0
 * x0) << 1)) >> 32);

321 
íîgy
 = (
q31_t
Ë(((((
q63_t
Ë
ö
 * in) << 1) + (energy << 32)) >> 32);

324 
acc
 = 0;

327 
èpC¡
 = 
numT≠s
;

329 
èpC¡
 > 0u)

332 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

335 
èpC¡
--;

341 
acc_l
 = 
acc
 & 0xffffffff;

344 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

346 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

352 *
pOut
++ = (
q31_t
Ë
acc
;

355 
d
 = *
pRef
++;

356 
e
 = 
d
 - (
q31_t
Ë
acc
;

357 *
pEº
++ = 
e
;

360 
po°Shi·
 =

361 
	`¨m_ªcù_q31
(
íîgy
 + 
DELTA_Q31
, &
⁄eByE√rgy
, &
S
->
ªcùTabÀ
[0]);

364 
îr‹Xmu
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

367 
w
 = 
	`˛ù_q63_to_q31
(((
q63_t
Ë
îr‹Xmu
 * 
⁄eByE√rgy
Ë>> (31 - 
po°Shi·
));

370 
px
 = 
pSèã
;

373 
pb
 = (
pC€ffs
);

376 
èpC¡
 = 
numT≠s
;

378 
èpC¡
 > 0u)

382 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
w
 * (*
px
++)) >> (32));

384 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

386 
pb
++;

389 
èpC¡
--;

393 
x0
 = *
pSèã
;

396 
pSèã
 =ÖState + 1;

399 
blkC¡
--;

403 
S
->
íîgy
 = (
q31_t
)Énergy;

404 
S
->
x0
 = x0;

411 
pSèãCu∫t
 = 
S
->
pSèã
;

414 
èpC¡
 = (
numT≠s
 - 1u);

417 
èpC¡
 > 0u)

419 *
pSèãCu∫t
++ = *
pSèã
++;

422 
èpC¡
--;

427 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q15.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_lms_q15
(

75 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

76 
q15_t
 * 
pSrc
,

77 
q15_t
 * 
pRef
,

78 
q15_t
 * 
pOut
,

79 
q15_t
 * 
pEº
,

80 
uöt32_t
 
blockSize
)

82 
q15_t
 *
pSèã
 = 
S
->pState;

83 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

84 
q15_t
 *
pC€ffs
 = 
S
->pCoeffs;

85 
q15_t
 *
pSèãCu∫t
;

86 
q15_t
 
mu
 = 
S
->mu;

87 
q15_t
 *
px
;

88 
q15_t
 *
pb
;

89 
uöt32_t
 
èpC¡
, 
blkC¡
;

90 
q63_t
 
acc
;

91 
q15_t
 
e
 = 0;

92 
q15_t
 
Æpha
;

93 
q31_t
 
c€f
;

94 
q31_t
 
acc_l
, 
acc_h
;

95 
öt32_t
 
lShi·
 = (15 - (öt32_tË
S
->
po°Shi·
);

96 
öt32_t
 
uShi·
 = (32 - 
lShi·
);

99 #i‚de‡
ARM_MATH_CM0_FAMILY


106 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

109 
blkC¡
 = 
blockSize
;

111 
blkC¡
 > 0u)

114 *
pSèãCu∫t
++ = *
pSrc
++;

117 
px
 = 
pSèã
;

120 
pb
 = 
pC€ffs
;

123 
acc
 = 0;

126 
èpC¡
 = 
numT≠s
 >> 2u;

128 
èpC¡
 > 0u)

132 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


134 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

135 
acc
 = 
	`__SMLALD
(*
	`__SIMD32
(
px
)++, (*__SIMD32(
pb
)++),ácc);

139 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

140 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

141 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

142 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

148 
èpC¡
--;

152 
èpC¡
 = 
numT≠s
 % 0x4u;

154 
èpC¡
 > 0u)

157 
acc
 +(
q63_t
Ë(((
q31_t
Ë(*
px
++Ë* (*
pb
++)));

160 
èpC¡
--;

164 
acc_l
 = 
acc
 & 0xffffffff;

167 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

170 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

173 
acc
 = 
	`__SSAT
(acc, 16);

176 *
pOut
++ = (
q15_t
Ë
acc
;

179 
e
 = *
pRef
++ - (
q15_t
Ë
acc
;

181 *
pEº
++ = (
q15_t
Ë
e
;

184 
Æpha
 = (
q15_t
Ë(((
q31_t
Ë
e
 * (
mu
)) >> 15);

188 
px
 = 
pSèã
++;

191 
pb
 = 
pC€ffs
;

194 
èpC¡
 = 
numT≠s
 >> 2u;

197 
èpC¡
 > 0u)

199 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

200 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

201 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

202 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

203 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

204 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

205 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

206 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

209 
èpC¡
--;

213 
èpC¡
 = 
numT≠s
 % 0x4u;

215 
èpC¡
 > 0u)

218 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

219 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

222 
èpC¡
--;

226 
blkC¡
--;

235 
pSèãCu∫t
 = 
S
->
pSèã
;

238 
èpC¡
 = (
numT≠s
 - 1u) >> 2;

240 
èpC¡
 > 0u)

243 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


245 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

246 *
	`__SIMD32
(
pSèãCu∫t
)++ = *__SIMD32(
pSèã
)++;

248 *
pSèãCu∫t
++ = *
pSèã
++;

249 *
pSèãCu∫t
++ = *
pSèã
++;

250 *
pSèãCu∫t
++ = *
pSèã
++;

251 *
pSèãCu∫t
++ = *
pSèã
++;

254 
èpC¡
--;

259 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

262 
èpC¡
 > 0u)

264 *
pSèãCu∫t
++ = *
pSèã
++;

267 
èpC¡
--;

276 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

279 
blkC¡
 = 
blockSize
;

281 
blkC¡
 > 0u)

284 *
pSèãCu∫t
++ = *
pSrc
++;

287 
px
 = 
pSèã
;

290 
pb
 = 
pC€ffs
;

293 
acc
 = 0;

296 
èpC¡
 = 
numT≠s
;

298 
èpC¡
 > 0u)

301 
acc
 +(
q63_t
Ë((
q31_t
Ë(*
px
++Ë* (*
pb
++));

304 
èpC¡
--;

308 
acc_l
 = 
acc
 & 0xffffffff;

311 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

314 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

317 
acc
 = 
	`__SSAT
(acc, 16);

320 *
pOut
++ = (
q15_t
Ë
acc
;

323 
e
 = *
pRef
++ - (
q15_t
Ë
acc
;

325 *
pEº
++ = (
q15_t
Ë
e
;

328 
Æpha
 = (
q15_t
Ë(((
q31_t
Ë
e
 * (
mu
)) >> 15);

332 
px
 = 
pSèã
++;

335 
pb
 = 
pC€ffs
;

338 
èpC¡
 = 
numT≠s
;

340 
èpC¡
 > 0u)

343 
c€f
 = (
q31_t
Ë* 
pb
 + (((q31_tË
Æpha
 * (*
px
++)) >> 15);

344 *
pb
++ = (
q15_t
Ë
	`__SSAT
((
c€f
), 16);

347 
èpC¡
--;

351 
blkC¡
--;

360 
pSèãCu∫t
 = 
S
->
pSèã
;

363 
èpC¡
 = (
numT≠s
 - 1u);

366 
èpC¡
 > 0u)

368 *
pSèãCu∫t
++ = *
pSèã
++;

371 
èpC¡
--;

376 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q31.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_lms_q31
(

78 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

79 
q31_t
 * 
pSrc
,

80 
q31_t
 * 
pRef
,

81 
q31_t
 * 
pOut
,

82 
q31_t
 * 
pEº
,

83 
uöt32_t
 
blockSize
)

85 
q31_t
 *
pSèã
 = 
S
->pState;

86 
uöt32_t
 
numT≠s
 = 
S
->numTaps;

87 
q31_t
 *
pC€ffs
 = 
S
->pCoeffs;

88 
q31_t
 *
pSèãCu∫t
;

89 
q31_t
 
mu
 = 
S
->mu;

90 
q31_t
 *
px
;

91 
q31_t
 *
pb
;

92 
uöt32_t
 
èpC¡
, 
blkC¡
;

93 
q63_t
 
acc
;

94 
q31_t
 
e
 = 0;

95 
q31_t
 
Æpha
;

96 
q31_t
 
c€f
;

97 
q31_t
 
acc_l
, 
acc_h
;

98 
uöt32_t
 
uShi·
 = ((uöt32_tË
S
->
po°Shi·
 + 1u);

99 
uöt32_t
 
lShi·
 = 32u - 
uShi·
;

103 
pSèãCu∫t
 = &(
S
->
pSèã
[(
numT≠s
 - 1u)]);

106 
blkC¡
 = 
blockSize
;

109 #i‚de‡
ARM_MATH_CM0_FAMILY


113 
blkC¡
 > 0u)

116 *
pSèãCu∫t
++ = *
pSrc
++;

119 
px
 = 
pSèã
;

122 
pb
 = 
pC€ffs
;

125 
acc
 = 0;

128 
èpC¡
 = 
numT≠s
 >> 2;

130 
èpC¡
 > 0u)

134 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

137 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

140 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

143 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

146 
èpC¡
--;

150 
èpC¡
 = 
numT≠s
 % 0x4u;

152 
èpC¡
 > 0u)

155 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

158 
èpC¡
--;

163 
acc_l
 = 
acc
 & 0xffffffff;

166 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

168 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

171 *
pOut
++ = (
q31_t
Ë
acc
;

174 
e
 = *
pRef
++ - (
q31_t
Ë
acc
;

176 *
pEº
++ = (
q31_t
Ë
e
;

179 
Æpha
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

183 
px
 = 
pSèã
++;

186 
pb
 = 
pC€ffs
;

189 
èpC¡
 = 
numT≠s
 >> 2;

192 
èpC¡
 > 0u)

195 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

197 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

199 
pb
++;

201 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

202 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

203 
pb
++;

205 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

206 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

207 
pb
++;

209 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

210 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

211 
pb
++;

214 
èpC¡
--;

218 
èpC¡
 = 
numT≠s
 % 0x4u;

220 
èpC¡
 > 0u)

223 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

224 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

225 
pb
++;

228 
èpC¡
--;

232 
blkC¡
--;

240 
pSèãCu∫t
 = 
S
->
pSèã
;

243 
èpC¡
 = (
numT≠s
 - 1u) >> 2u;

246 
èpC¡
 > 0u)

248 *
pSèãCu∫t
++ = *
pSèã
++;

249 *
pSèãCu∫t
++ = *
pSèã
++;

250 *
pSèãCu∫t
++ = *
pSèã
++;

251 *
pSèãCu∫t
++ = *
pSèã
++;

254 
èpC¡
--;

258 
èpC¡
 = (
numT≠s
 - 1u) % 0x4u;

261 
èpC¡
 > 0u)

263 *
pSèãCu∫t
++ = *
pSèã
++;

266 
èpC¡
--;

273 
blkC¡
 > 0u)

276 *
pSèãCu∫t
++ = *
pSrc
++;

279 
px
 = 
pSèã
;

282 
pb
 = 
pC€ffs
;

285 
acc
 = 0;

288 
èpC¡
 = 
numT≠s
;

290 
èpC¡
 > 0u)

293 
acc
 +((
q63_t
Ë(*
px
++)Ë* (*
pb
++);

296 
èpC¡
--;

302 
acc_l
 = 
acc
 & 0xffffffff;

305 
acc_h
 = (
acc
 >> 32) & 0xffffffff;

307 
acc
 = (
uöt32_t
Ë
acc_l
 >> 
lShi·
 | 
acc_h
 << 
uShi·
;

309 *
pOut
++ = (
q31_t
Ë
acc
;

312 
e
 = *
pRef
++ - (
q31_t
Ë
acc
;

314 *
pEº
++ = (
q31_t
Ë
e
;

317 
Æpha
 = (
q31_t
Ë(((
q63_t
Ë
e
 * 
mu
) >> 31);

321 
px
 = 
pSèã
++;

324 
pb
 = 
pC€ffs
;

327 
èpC¡
 = 
numT≠s
;

329 
èpC¡
 > 0u)

332 
c€f
 = (
q31_t
Ë(((
q63_t
Ë
Æpha
 * (*
px
++)) >> (32));

333 *
pb
 = 
	`˛ù_q63_to_q31
((
q63_t
Ë*Öb + (
c€f
 << 1u));

334 
pb
++;

337 
èpC¡
--;

341 
blkC¡
--;

349 
pSèãCu∫t
 = 
S
->
pSèã
;

352 
èpC¡
 = (
numT≠s
 - 1u);

355 
èpC¡
 > 0u)

357 *
pSèãCu∫t
++ = *
pSèã
++;

360 
èpC¡
--;

365 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_f32.c

41 
	~"¨m_m©h.h
"

73 
¨m_°©us
 
	$¨m_m©_add_f32
(

74 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

75 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

76 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

78 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

79 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

80 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
, 
out1
, 
out2
;

88 
uöt32_t
 
numSam∂es
;

89 
uöt32_t
 
blkC¡
;

90 
¨m_°©us
 
°©us
;

92 #ifde‡
ARM_MATH_MATRIX_CHECK


94 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

95 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

96 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

99 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

106 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

108 #i‚de‡
ARM_MATH_CM0_FAMILY


111 
blkC¡
 = 
numSam∂es
 >> 2u;

115 
blkC¡
 > 0u)

120 
öA1
 = 
pIn1
[0];

123 
öB1
 = 
pIn2
[0];

126 
öA2
 = 
pIn1
[1];

129 
out1
 = 
öA1
 + 
öB1
;

132 
öB2
 = 
pIn2
[1];

135 
öA1
 = 
pIn1
[2];

138 
out2
 = 
öA2
 + 
öB2
;

141 
öB1
 = 
pIn2
[2];

144 
pOut
[0] = 
out1
;

145 
pOut
[1] = 
out2
;

148 
öA2
 = 
pIn1
[3];

151 
öB2
 = 
pIn2
[3];

154 
out1
 = 
öA1
 + 
öB1
;

157 
out2
 = 
öA2
 + 
öB2
;

160 
pOut
[2] = 
out1
;

163 
pOut
[3] = 
out2
;

167 
pIn1
 += 4u;

168 
pIn2
 += 4u;

169 
pOut
 += 4u;

171 
blkC¡
--;

176 
blkC¡
 = 
numSam∂es
 % 0x4u;

183 
blkC¡
 = 
numSam∂es
;

187 
blkC¡
 > 0u)

191 *
pOut
++ = (*
pIn1
++Ë+ (*
pIn2
++);

194 
blkC¡
--;

198 
°©us
 = 
ARM_MATH_SUCCESS
;

203  (
°©us
);

204 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q15.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_m©_add_q15
(

67 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

68 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

69 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

71 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

72 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

73 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

74 
uöt16_t
 
numSam∂es
;

75 
uöt32_t
 
blkC¡
;

76 
¨m_°©us
 
°©us
;

78 #ifde‡
ARM_MATH_MATRIX_CHECK


82 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

83 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

84 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

87 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

94 
numSam∂es
 = (
uöt16_t
Ë(
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
);

96 #i‚de‡
ARM_MATH_CM0_FAMILY


101 
blkC¡
 = (
uöt32_t
Ë
numSam∂es
 >> 2u;

105 
blkC¡
 > 0u)

109 *
	`__SIMD32
(
pOut
)++ = 
	`__QADD16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

110 *
	`__SIMD32
(
pOut
)++ = 
	`__QADD16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

113 
blkC¡
--;

118 
blkC¡
 = (
uöt32_t
Ë
numSam∂es
 % 0x4u;

122 
blkC¡
 > 0u)

126 *
pOut
++ = (
q15_t
Ë
	`__QADD16
(*
pInA
++, *
pInB
++);

129 
blkC¡
--;

137 
blkC¡
 = (
uöt32_t
Ë
numSam∂es
;

141 
blkC¡
 > 0u)

145 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pInA
++ + *
pInB
++), 16);

148 
blkC¡
--;

154 
°©us
 = 
ARM_MATH_SUCCESS
;

158  (
°©us
);

159 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q31.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_m©_add_q31
(

67 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

68 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

69 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

71 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

72 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

73 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

74 
q31_t
 
öA1
, 
öB1
;

76 #i‚de‡
ARM_MATH_CM0_FAMILY


78 
q31_t
 
öA2
, 
öB2
;

79 
q31_t
 
out1
, 
out2
;

83 
uöt32_t
 
numSam∂es
;

84 
uöt32_t
 
blkC¡
;

85 
¨m_°©us
 
°©us
;

87 #ifde‡
ARM_MATH_MATRIX_CHECK


89 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

90 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

91 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

94 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

100 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

102 #i‚de‡
ARM_MATH_CM0_FAMILY


107 
blkC¡
 = 
numSam∂es
 >> 2u;

112 
blkC¡
 > 0u)

117 
öA1
 = 
pIn1
[0];

120 
öB1
 = 
pIn2
[0];

123 
öA2
 = 
pIn1
[1];

126 
out1
 = 
	`__QADD
(
öA1
, 
öB1
);

129 
öB2
 = 
pIn2
[1];

132 
öA1
 = 
pIn1
[2];

135 
out2
 = 
	`__QADD
(
öA2
, 
öB2
);

138 
öB1
 = 
pIn2
[2];

141 
pOut
[0] = 
out1
;

142 
pOut
[1] = 
out2
;

145 
öA2
 = 
pIn1
[3];

148 
öB2
 = 
pIn2
[3];

151 
out1
 = 
	`__QADD
(
öA1
, 
öB1
);

152 
out2
 = 
	`__QADD
(
öA2
, 
öB2
);

155 
pOut
[2] = 
out1
;

156 
pOut
[3] = 
out2
;

159 
pIn1
 += 4u;

160 
pIn2
 += 4u;

161 
pOut
 += 4u;

164 
blkC¡
--;

169 
blkC¡
 = 
numSam∂es
 % 0x4u;

176 
blkC¡
 = 
numSam∂es
;

181 
blkC¡
 > 0u)

185 
öA1
 = *
pIn1
++;

186 
öB1
 = *
pIn2
++;

188 
öA1
 = 
	`__QADD
(öA1, 
öB1
);

191 
blkC¡
--;

193 *
pOut
++ = 
öA1
;

198 
°©us
 = 
ARM_MATH_SUCCESS
;

202  (
°©us
);

203 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c

40 
	~"¨m_m©h.h
"

73 
¨m_°©us
 
	$¨m_m©_cm∂x_mu…_f32
(

74 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

75 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

76 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

78 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

79 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

80 
Êﬂt32_t
 *
pInA
 = 
pSrcA
->
pD©a
;

81 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

82 
Êﬂt32_t
 *
px
;

83 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

84 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

85 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

86 
Êﬂt32_t
 
sumRól1
, 
sumImag1
;

87 
Êﬂt32_t
 
a0
, 
b0
, 
c0
, 
d0
;

88 
Êﬂt32_t
 
a1
, 
b1
, 
c1
, 
d1
;

89 
Êﬂt32_t
 
sumRól2
, 
sumImag2
;

94 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

95 
¨m_°©us
 
°©us
;

97 #ifde‡
ARM_MATH_MATRIX_CHECK


101 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

102 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

106 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

117 
px
 = 
pOut
 + 2 * 
i
;

120 
cﬁ
 = 
numCﬁsB
;

124 
pIn2
 = 
pSrcB
->
pD©a
;

126 
j
 = 0u;

132 
sumRól1
 = 0.0f;

133 
sumImag1
 = 0.0f;

135 
sumRól2
 = 0.0f;

136 
sumImag2
 = 0.0f;

139 
pIn1
 = 
pInA
;

142 
cﬁC¡
 = 
numCﬁsA
 >> 2;

145 
cﬁC¡
 > 0u)

149 
a0
 = *
pIn1
;

152 
c0
 = *
pIn2
;

155 
b0
 = *(
pIn1
 + 1u);

158 
d0
 = *(
pIn2
 + 1u);

160 
sumRól1
 +
a0
 * 
c0
;

161 
sumImag1
 +
b0
 * 
c0
;

163 
pIn1
 += 2u;

164 
pIn2
 +2 * 
numCﬁsB
;

166 
sumRól2
 -
b0
 * 
d0
;

167 
sumImag2
 +
a0
 * 
d0
;

171 
a1
 = *
pIn1
;

172 
c1
 = *
pIn2
;

174 
b1
 = *(
pIn1
 + 1u);

175 
d1
 = *(
pIn2
 + 1u);

177 
sumRól1
 +
a1
 * 
c1
;

178 
sumImag1
 +
b1
 * 
c1
;

180 
pIn1
 += 2u;

181 
pIn2
 +2 * 
numCﬁsB
;

183 
sumRól2
 -
b1
 * 
d1
;

184 
sumImag2
 +
a1
 * 
d1
;

186 
a0
 = *
pIn1
;

187 
c0
 = *
pIn2
;

189 
b0
 = *(
pIn1
 + 1u);

190 
d0
 = *(
pIn2
 + 1u);

192 
sumRól1
 +
a0
 * 
c0
;

193 
sumImag1
 +
b0
 * 
c0
;

195 
pIn1
 += 2u;

196 
pIn2
 +2 * 
numCﬁsB
;

198 
sumRól2
 -
b0
 * 
d0
;

199 
sumImag2
 +
a0
 * 
d0
;

203 
a1
 = *
pIn1
;

204 
c1
 = *
pIn2
;

206 
b1
 = *(
pIn1
 + 1u);

207 
d1
 = *(
pIn2
 + 1u);

209 
sumRól1
 +
a1
 * 
c1
;

210 
sumImag1
 +
b1
 * 
c1
;

212 
pIn1
 += 2u;

213 
pIn2
 +2 * 
numCﬁsB
;

215 
sumRól2
 -
b1
 * 
d1
;

216 
sumImag2
 +
a1
 * 
d1
;

219 
cﬁC¡
--;

224 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

226 
cﬁC¡
 > 0u)

229 
a1
 = *
pIn1
;

230 
c1
 = *
pIn2
;

232 
b1
 = *(
pIn1
 + 1u);

233 
d1
 = *(
pIn2
 + 1u);

235 
sumRól1
 +
a1
 * 
c1
;

236 
sumImag1
 +
b1
 * 
c1
;

238 
pIn1
 += 2u;

239 
pIn2
 +2 * 
numCﬁsB
;

241 
sumRól2
 -
b1
 * 
d1
;

242 
sumImag2
 +
a1
 * 
d1
;

245 
cﬁC¡
--;

248 
sumRól1
 +
sumRól2
;

249 
sumImag1
 +
sumImag2
;

252 *
px
++ = 
sumRól1
;

253 *
px
++ = 
sumImag1
;

256 
j
++;

257 
pIn2
 = 
pSrcB
->
pD©a
 + 2u * 
j
;

260 
cﬁ
--;

262 } 
cﬁ
 > 0u);

265 
i
 = i + 
numCﬁsB
;

266 
pInA
 =ÖInA + 2 * 
numCﬁsA
;

269 
row
--;

271 } 
row
 > 0u);

274 
°©us
 = 
ARM_MATH_SUCCESS
;

278  (
°©us
);

279 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c

40 
	~"¨m_m©h.h
"

88 
¨m_°©us
 
	$¨m_m©_cm∂x_mu…_q15
(

89 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

90 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

91 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

92 
q15_t
 * 
pS¸©ch
)

95 
q15_t
 *
pSrcBT
 = 
pS¸©ch
;

96 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

97 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

98 
q15_t
 *
px
;

99 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

100 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

101 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

102 
uöt16_t
 
numRowsB
 = 
pSrcB
->
numRows
;

103 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsB
, 
cﬁC¡
;

104 
¨m_°©us
 
°©us
;

105 
q63_t
 
sumRól
, 
sumImag
;

107 #ifde‡
UNALIGNED_SUPPORT_DISABLE


108 
q15_t
 
ö
;

109 
q15_t
 
a
, 
b
, 
c
, 
d
;

111 
q31_t
 
ö
;

112 
q31_t
 
¥od1
, 
¥od2
;

113 
q31_t
 
pSour˚A
, 
pSour˚B
;

116 #ifde‡
ARM_MATH_MATRIX_CHECK


118 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

119 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

122 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

131 
cﬁ
 = 
numCﬁsB
 >> 2;

134 
px
 = 
pSrcBT
 + 
i
;

138 
cﬁ
 > 0u)

140 #ifde‡
UNALIGNED_SUPPORT_DISABLE


142 
ö
 = *
pInB
++;

143 *
px
 = 
ö
;

144 
ö
 = *
pInB
++;

145 
px
[1] = 
ö
;

148 
px
 +
numRowsB
 * 2;

151 
ö
 = *
pInB
++;

152 *
px
 = 
ö
;

153 
ö
 = *
pInB
++;

154 
px
[1] = 
ö
;

157 
px
 +
numRowsB
 * 2;

160 
ö
 = *
pInB
++;

161 *
px
 = 
ö
;

162 
ö
 = *
pInB
++;

163 
px
[1] = 
ö
;

166 
px
 +
numRowsB
 * 2;

169 
ö
 = *
pInB
++;

170 *
px
 = 
ö
;

171 
ö
 = *
pInB
++;

172 
px
[1] = 
ö
;

175 
px
 +
numRowsB
 * 2;

178 
cﬁ
--;

183 
cﬁ
 = 
numCﬁsB
 % 0x4u;

185 
cﬁ
 > 0u)

188 
ö
 = *
pInB
++;

189 *
px
 = 
ö
;

190 
ö
 = *
pInB
++;

191 
px
[1] = 
ö
;

195 
ö
 = *
	`__SIMD32
(
pInB
)++;

197 *
	`__SIMD32
(
px
Ë
ö
;

200 
px
 +
numRowsB
 * 2;

204 
ö
 = *
	`__SIMD32
(
pInB
)++;

206 *
	`__SIMD32
(
px
Ë
ö
;

209 
px
 +
numRowsB
 * 2;

212 
ö
 = *
	`__SIMD32
(
pInB
)++;

214 *
	`__SIMD32
(
px
Ë
ö
;

217 
px
 +
numRowsB
 * 2;

220 
ö
 = *
	`__SIMD32
(
pInB
)++;

222 *
	`__SIMD32
(
px
Ë
ö
;

225 
px
 +
numRowsB
 * 2;

228 
cﬁ
--;

233 
cﬁ
 = 
numCﬁsB
 % 0x4u;

235 
cﬁ
 > 0u)

238 
ö
 = *
	`__SIMD32
(
pInB
)++;

240 *
	`__SIMD32
(
px
Ë
ö
;

244 
px
 +
numRowsB
 * 2;

247 
cﬁ
--;

250 
i
 = i + 2u;

253 
row
--;

255 } 
row
 > 0u);

258 
row
 = 
numRowsA
;

259 
i
 = 0u;

260 
px
 = 
pD°
->
pD©a
;

267 
cﬁ
 = 
numCﬁsB
;

271 
pInB
 = 
pSrcBT
;

277 
sumRól
 = 0;

278 
sumImag
 = 0;

281 
cﬁC¡
 = 
numCﬁsA
 >> 1;

284 
pInA
 = 
pSrcA
->
pD©a
 + 
i
 * 2;

288 
cﬁC¡
 > 0u)

292 #ifde‡
UNALIGNED_SUPPORT_DISABLE


295 
a
 = *
pInA
;

296 
b
 = *(
pInA
 + 1u);

298 
c
 = *
pInB
;

299 
d
 = *(
pInB
 + 1u);

302 
sumRól
 +(
q31_t
Ë
a
 *
c
;

303 
sumImag
 +(
q31_t
Ë
a
 *
d
;

304 
sumRól
 -(
q31_t
Ë
b
 *
d
;

305 
sumImag
 +(
q31_t
Ë
b
 *
c
;

308 
a
 = *(
pInA
 + 2u);

309 
b
 = *(
pInA
 + 3u);

311 
c
 = *(
pInB
 + 2u);

312 
d
 = *(
pInB
 + 3u);

315 
pInA
 += 4u;

318 
sumRól
 +(
q31_t
Ë
a
 *
c
;

319 
sumImag
 +(
q31_t
Ë
a
 *
d
;

320 
sumRól
 -(
q31_t
Ë
b
 *
d
;

321 
sumImag
 +(
q31_t
Ë
b
 *
c
;

323 
pInB
 += 4u;

326 
pSour˚A
 = *
	`__SIMD32
(
pInA
)++;

327 
pSour˚B
 = *
	`__SIMD32
(
pInB
)++;

330 #ifde‡
ARM_MATH_BIG_ENDIAN


331 
¥od1
 = -
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

333 
¥od1
 = 
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

335 
¥od2
 = 
	`__SMUADX
(
pSour˚A
, 
pSour˚B
);

336 
sumRól
 +(
q63_t
Ë
¥od1
;

337 
sumImag
 +(
q63_t
Ë
¥od2
;

340 
pSour˚A
 = *
	`__SIMD32
(
pInA
)++;

341 
pSour˚B
 = *
	`__SIMD32
(
pInB
)++;

344 #ifde‡
ARM_MATH_BIG_ENDIAN


345 
¥od1
 = -
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

347 
¥od1
 = 
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

349 
¥od2
 = 
	`__SMUADX
(
pSour˚A
, 
pSour˚B
);

350 
sumRól
 +(
q63_t
Ë
¥od1
;

351 
sumImag
 +(
q63_t
Ë
¥od2
;

356 
cﬁC¡
--;

360 if((
numCﬁsA
 & 0x1u) > 0u)

364 #ifde‡
UNALIGNED_SUPPORT_DISABLE


367 
a
 = *
pInA
++;

368 
b
 = *
pInA
++;

369 
c
 = *
pInB
++;

370 
d
 = *
pInB
++;

373 
sumRól
 +(
q31_t
Ë
a
 *
c
;

374 
sumImag
 +(
q31_t
Ë
a
 *
d
;

375 
sumRól
 -(
q31_t
Ë
b
 *
d
;

376 
sumImag
 +(
q31_t
Ë
b
 *
c
;

380 
pSour˚A
 = *
	`__SIMD32
(
pInA
)++;

381 
pSour˚B
 = *
	`__SIMD32
(
pInB
)++;

384 #ifde‡
ARM_MATH_BIG_ENDIAN


385 
¥od1
 = -
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

387 
¥od1
 = 
	`__SMUSD
(
pSour˚A
, 
pSour˚B
);

389 
¥od2
 = 
	`__SMUADX
(
pSour˚A
, 
pSour˚B
);

390 
sumRól
 +(
q63_t
Ë
¥od1
;

391 
sumImag
 +(
q63_t
Ë
¥od2
;

399 *
px
++ = (
q15_t
Ë(
	`__SSAT
(
sumRól
 >> 15, 16));

400 *
px
++ = (
q15_t
Ë(
	`__SSAT
(
sumImag
 >> 15, 16));

403 
cﬁ
--;

405 } 
cﬁ
 > 0u);

407 
i
 = i + 
numCﬁsA
;

410 
row
--;

412 } 
row
 > 0u);

415 
°©us
 = 
ARM_MATH_SUCCESS
;

419  (
°©us
);

420 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c

40 
	~"¨m_m©h.h
"

75 
¨m_°©us
 
	$¨m_m©_cm∂x_mu…_q31
(

76 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

77 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

78 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

80 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

81 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

82 
q31_t
 *
pInA
 = 
pSrcA
->
pD©a
;

83 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

84 
q31_t
 *
px
;

85 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

86 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

87 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

88 
q63_t
 
sumRól1
, 
sumImag1
;

89 
q31_t
 
a0
, 
b0
, 
c0
, 
d0
;

90 
q31_t
 
a1
, 
b1
, 
c1
, 
d1
;

95 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

96 
¨m_°©us
 
°©us
;

98 #ifde‡
ARM_MATH_MATRIX_CHECK


102 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

103 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

107 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

118 
px
 = 
pOut
 + 2 * 
i
;

121 
cﬁ
 = 
numCﬁsB
;

125 
pIn2
 = 
pSrcB
->
pD©a
;

127 
j
 = 0u;

133 
sumRól1
 = 0.0;

134 
sumImag1
 = 0.0;

137 
pIn1
 = 
pInA
;

140 
cﬁC¡
 = 
numCﬁsA
 >> 2;

143 
cﬁC¡
 > 0u)

147 
a0
 = *
pIn1
;

150 
c0
 = *
pIn2
;

153 
b0
 = *(
pIn1
 + 1u);

156 
d0
 = *(
pIn2
 + 1u);

159 
sumRól1
 +(
q63_t
Ë
a0
 *
c0
;

160 
sumImag1
 +(
q63_t
Ë
b0
 *
c0
;

163 
pIn1
 += 2u;

164 
pIn2
 +2 * 
numCﬁsB
;

167 
sumRól1
 -(
q63_t
Ë
b0
 *
d0
;

168 
sumImag1
 +(
q63_t
Ë
a0
 *
d0
;

173 
a1
 = *
pIn1
;

174 
c1
 = *
pIn2
;

175 
b1
 = *(
pIn1
 + 1u);

176 
d1
 = *(
pIn2
 + 1u);

179 
sumRól1
 +(
q63_t
Ë
a1
 *
c1
;

180 
sumImag1
 +(
q63_t
Ë
b1
 *
c1
;

183 
pIn1
 += 2u;

184 
pIn2
 +2 * 
numCﬁsB
;

187 
sumRól1
 -(
q63_t
Ë
b1
 *
d1
;

188 
sumImag1
 +(
q63_t
Ë
a1
 *
d1
;

190 
a0
 = *
pIn1
;

191 
c0
 = *
pIn2
;

193 
b0
 = *(
pIn1
 + 1u);

194 
d0
 = *(
pIn2
 + 1u);

197 
sumRól1
 +(
q63_t
Ë
a0
 *
c0
;

198 
sumImag1
 +(
q63_t
Ë
b0
 *
c0
;

201 
pIn1
 += 2u;

202 
pIn2
 +2 * 
numCﬁsB
;

205 
sumRól1
 -(
q63_t
Ë
b0
 *
d0
;

206 
sumImag1
 +(
q63_t
Ë
a0
 *
d0
;

210 
a1
 = *
pIn1
;

211 
c1
 = *
pIn2
;

213 
b1
 = *(
pIn1
 + 1u);

214 
d1
 = *(
pIn2
 + 1u);

217 
sumRól1
 +(
q63_t
Ë
a1
 *
c1
;

218 
sumImag1
 +(
q63_t
Ë
b1
 *
c1
;

221 
pIn1
 += 2u;

222 
pIn2
 +2 * 
numCﬁsB
;

225 
sumRól1
 -(
q63_t
Ë
b1
 *
d1
;

226 
sumImag1
 +(
q63_t
Ë
a1
 *
d1
;

229 
cﬁC¡
--;

234 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

236 
cﬁC¡
 > 0u)

239 
a1
 = *
pIn1
;

240 
c1
 = *
pIn2
;

242 
b1
 = *(
pIn1
 + 1u);

243 
d1
 = *(
pIn2
 + 1u);

246 
sumRól1
 +(
q63_t
Ë
a1
 *
c1
;

247 
sumImag1
 +(
q63_t
Ë
b1
 *
c1
;

250 
pIn1
 += 2u;

251 
pIn2
 +2 * 
numCﬁsB
;

254 
sumRól1
 -(
q63_t
Ë
b1
 *
d1
;

255 
sumImag1
 +(
q63_t
Ë
a1
 *
d1
;

258 
cﬁC¡
--;

262 *
px
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
(
sumRól1
 >> 31);

263 *
px
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
(
sumImag1
 >> 31);

266 
j
++;

267 
pIn2
 = 
pSrcB
->
pD©a
 + 2u * 
j
;

270 
cﬁ
--;

272 } 
cﬁ
 > 0u);

275 
i
 = i + 
numCﬁsB
;

276 
pInA
 =ÖInA + 2 * 
numCﬁsA
;

279 
row
--;

281 } 
row
 > 0u);

284 
°©us
 = 
ARM_MATH_SUCCESS
;

288  (
°©us
);

289 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_f32.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_m©_öô_f32
(

71 
¨m_m©rix_ö°™˚_f32
 * 
S
,

72 
uöt16_t
 
nRows
,

73 
uöt16_t
 
nCﬁumns
,

74 
Êﬂt32_t
 * 
pD©a
)

77 
S
->
numRows
 = 
nRows
;

80 
S
->
numCﬁs
 = 
nCﬁumns
;

83 
S
->
pD©a
 =ÖData;

84 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q15.c

42 
	~"¨m_m©h.h
"

62 
	$¨m_m©_öô_q15
(

63 
¨m_m©rix_ö°™˚_q15
 * 
S
,

64 
uöt16_t
 
nRows
,

65 
uöt16_t
 
nCﬁumns
,

66 
q15_t
 * 
pD©a
)

69 
S
->
numRows
 = 
nRows
;

72 
S
->
numCﬁs
 = 
nCﬁumns
;

75 
S
->
pD©a
 =ÖData;

76 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q31.c

41 
	~"¨m_m©h.h
"

66 
	$¨m_m©_öô_q31
(

67 
¨m_m©rix_ö°™˚_q31
 * 
S
,

68 
uöt16_t
 
nRows
,

69 
uöt16_t
 
nCﬁumns
,

70 
q31_t
 * 
pD©a
)

73 
S
->
numRows
 = 
nRows
;

76 
S
->
numCﬁs
 = 
nCﬁumns
;

79 
S
->
pD©a
 =ÖData;

80 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f32.c

41 
	~"¨m_m©h.h
"

85 
¨m_°©us
 
	$¨m_m©_övî£_f32
(

86 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

87 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

89 
Êﬂt32_t
 *
pIn
 = 
pSrc
->
pD©a
;

90 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

91 
Êﬂt32_t
 *
pInT1
, *
pInT2
;

92 
Êﬂt32_t
 *
pOutT1
, *
pOutT2
;

93 
Êﬂt32_t
 *
pPivŸRowIn
, *
pPRT_ö
, *
pPivŸRowD°
, *
pPRT_pD°
;

94 
uöt32_t
 
numRows
 = 
pSrc
->numRows;

95 
uöt32_t
 
numCﬁs
 = 
pSrc
->numCols;

97 #i‚de‡
ARM_MATH_CM0_FAMILY


98 
Êﬂt32_t
 
maxC
;

102 
Êﬂt32_t
 
Xchg
, 
ö
 = 0.0f, 
ö1
;

103 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

104 
¨m_°©us
 
°©us
;

106 #ifde‡
ARM_MATH_MATRIX_CHECK


110 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

111 || (
pSrc
->
numRows
 !
pD°
->numRows))

114 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

158 
pOutT1
 = 
pOut
;

161 
rowC¡
 = 
numRows
;

164 
rowC¡
 > 0u)

167 
j
 = 
numRows
 - 
rowC¡
;

168 
j
 > 0u)

170 *
pOutT1
++ = 0.0f;

171 
j
--;

175 *
pOutT1
++ = 1.0f;

178 
j
 = 
rowC¡
 - 1u;

179 
j
 > 0u)

181 *
pOutT1
++ = 0.0f;

182 
j
--;

186 
rowC¡
--;

191 
lo›C¡
 = 
numCﬁs
;

194 
l
 = 0u;

196 
lo›C¡
 > 0u)

205 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

209 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

212 
ö
 = *
pInT1
;

215 
maxC
 = 0;

216 
i
 = 
l
; i < 
numRows
; i++)

218 
maxC
 = *
pInT1
 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);

219 
pInT1
 +
numCﬁs
;

223 if(
maxC
 == 0.0f)

225  
ARM_MATH_SINGULAR
;

229 
pInT1
 = 
pIn
;

232 
k
 = 1u;

235 if–(
ö
 > 0.0‡? i¿: -öË!
maxC
)

238 
i
 = 
numRows
 - (
l
 + 1u);

240 
i
 > 0u)

243 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

244 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

248 if((*
pInT2
 > 0.0‡? *pInT2: -*pInT2Ë=
maxC
)

252 
j
 = 
numCﬁs
 - 
l
;

254 
j
 > 0u)

257 
Xchg
 = *
pInT2
;

258 *
pInT2
++ = *
pInT1
;

259 *
pInT1
++ = 
Xchg
;

262 
j
--;

266 
j
 = 
numCﬁs
;

268 
j
 > 0u)

271 
Xchg
 = *
pOutT2
;

272 *
pOutT2
++ = *
pOutT1
;

273 *
pOutT1
++ = 
Xchg
;

276 
j
--;

280 
Êag
 = 1u;

287 
k
++;

290 
i
--;

295 if((
Êag
 !1uË&& (
ö
 == 0.0f))

297  
ARM_MATH_SINGULAR
;

301 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

302 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

305 
pInT1
 = 
pPivŸRowIn
;

306 
pInT2
 = 
pPivŸRowD°
;

309 
ö
 = *
pPivŸRowIn
;

313 
j
 = (
numCﬁs
 - 
l
);

315 
j
 > 0u)

319 
ö1
 = *
pInT1
;

320 *
pInT1
++ = 
ö1
 / 
ö
;

323 
j
--;

327 
j
 = 
numCﬁs
;

329 
j
 > 0u)

333 
ö1
 = *
pInT2
;

334 *
pInT2
++ = 
ö1
 / 
ö
;

337 
j
--;

344 
pInT1
 = 
pIn
;

345 
pInT2
 = 
pOut
;

348 
i
 = 0u;

352 
k
 = 
numRows
;

354 
k
 > 0u)

357 if(
i
 =
l
)

361 
pInT1
 +
numCﬁs
 - 
l
;

363 
pInT2
 +
numCﬁs
;

368 
ö
 = *
pInT1
;

371 
pPRT_ö
 = 
pPivŸRowIn
;

372 
pPRT_pD°
 = 
pPivŸRowD°
;

376 
j
 = (
numCﬁs
 - 
l
);

378 
j
 > 0u)

382 
ö1
 = *
pInT1
;

383 *
pInT1
++ = 
ö1
 - (
ö
 * *
pPRT_ö
++);

386 
j
--;

391 
j
 = 
numCﬁs
;

393 
j
 > 0u)

397 
ö1
 = *
pInT2
;

398 *
pInT2
++ = 
ö1
 - (
ö
 * *
pPRT_pD°
++);

401 
j
--;

407 
pInT1
 =ÖInT1 + 
l
;

410 
k
--;

413 
i
++;

417 
pIn
++;

420 
lo›C¡
--;

423 
l
++;

431 
Êﬂt32_t
 
Xchg
, 
ö
 = 0.0f;

432 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

433 
¨m_°©us
 
°©us
;

435 #ifde‡
ARM_MATH_MATRIX_CHECK


438 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

439 || (
pSrc
->
numRows
 !
pD°
->numRows))

442 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

484 
pOutT1
 = 
pOut
;

487 
rowC¡
 = 
numRows
;

490 
rowC¡
 > 0u)

493 
j
 = 
numRows
 - 
rowC¡
;

494 
j
 > 0u)

496 *
pOutT1
++ = 0.0f;

497 
j
--;

501 *
pOutT1
++ = 1.0f;

504 
j
 = 
rowC¡
 - 1u;

505 
j
 > 0u)

507 *
pOutT1
++ = 0.0f;

508 
j
--;

512 
rowC¡
--;

517 
lo›C¡
 = 
numCﬁs
;

520 
l
 = 0u;

522 
lo›C¡
 > 0u)

531 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

535 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

538 
ö
 = *
pInT1
;

541 
k
 = 1u;

544 if(*
pInT1
 == 0.0f)

547 
i
 = (
l
 + 1u); i < 
numRows
; i++)

550 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

551 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

555 if(*
pInT2
 != 0.0f)

559 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

562 
Xchg
 = *
pInT2
;

563 *
pInT2
++ = *
pInT1
;

564 *
pInT1
++ = 
Xchg
;

567 
j
 = 0u; j < 
numCﬁs
; j++)

569 
Xchg
 = *
pOutT2
;

570 *
pOutT2
++ = *
pOutT1
;

571 *
pOutT1
++ = 
Xchg
;

575 
Êag
 = 1u;

582 
k
++;

587 if((
Êag
 !1uË&& (
ö
 == 0.0f))

589  
ARM_MATH_SINGULAR
;

593 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

594 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

597 
pInT1
 = 
pPivŸRowIn
;

598 
pOutT1
 = 
pPivŸRowD°
;

601 
ö
 = *(
pIn
 + (
l
 * 
numCﬁs
));

605 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

609 *
pInT1
 = *pInT1 / 
ö
;

610 
pInT1
++;

612 
j
 = 0u; j < 
numCﬁs
; j++)

616 *
pOutT1
 = *pOutT1 / 
ö
;

617 
pOutT1
++;

624 
pInT1
 = 
pIn
;

625 
pOutT1
 = 
pOut
;

627 
i
 = 0u; i < 
numRows
; i++)

630 if(
i
 =
l
)

634 
pInT1
 +
numCﬁs
 - 
l
;

635 
pOutT1
 +
numCﬁs
;

640 
ö
 = *
pInT1
;

643 
pPRT_ö
 = 
pPivŸRowIn
;

644 
pPRT_pD°
 = 
pPivŸRowD°
;

648 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

652 *
pInT1
 = *pInT1 - (
ö
 * *
pPRT_ö
++);

653 
pInT1
++;

657 
j
 = 0u; j < 
numCﬁs
; j++)

661 *
pOutT1
 = *pOutT1 - (
ö
 * *
pPRT_pD°
++);

662 
pOutT1
++;

667 
pInT1
 =ÖInT1 + 
l
;

670 
pIn
++;

673 
lo›C¡
--;

675 
l
++;

682 
°©us
 = 
ARM_MATH_SUCCESS
;

684 if((
Êag
 !1uË&& (
ö
 == 0.0f))

686 
pIn
 = 
pSrc
->
pD©a
;

687 
i
 = 0; i < 
numRows
 * 
numCﬁs
; i++)

689 i‡(
pIn
[
i
] != 0.0f)

693 i‡(
i
 =
numRows
 * 
numCﬁs
)

694 
°©us
 = 
ARM_MATH_SINGULAR
;

698  (
°©us
);

699 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f64.c

41 
	~"¨m_m©h.h
"

85 
¨m_°©us
 
	$¨m_m©_övî£_f64
(

86 c⁄° 
¨m_m©rix_ö°™˚_f64
 * 
pSrc
,

87 
¨m_m©rix_ö°™˚_f64
 * 
pD°
)

89 
Êﬂt64_t
 *
pIn
 = 
pSrc
->
pD©a
;

90 
Êﬂt64_t
 *
pOut
 = 
pD°
->
pD©a
;

91 
Êﬂt64_t
 *
pInT1
, *
pInT2
;

92 
Êﬂt64_t
 *
pOutT1
, *
pOutT2
;

93 
Êﬂt64_t
 *
pPivŸRowIn
, *
pPRT_ö
, *
pPivŸRowD°
, *
pPRT_pD°
;

94 
uöt32_t
 
numRows
 = 
pSrc
->numRows;

95 
uöt32_t
 
numCﬁs
 = 
pSrc
->numCols;

97 #i‚de‡
ARM_MATH_CM0_FAMILY


98 
Êﬂt64_t
 
maxC
;

102 
Êﬂt64_t
 
Xchg
, 
ö
 = 0.0f, 
ö1
;

103 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

104 
¨m_°©us
 
°©us
;

106 #ifde‡
ARM_MATH_MATRIX_CHECK


110 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

111 || (
pSrc
->
numRows
 !
pD°
->numRows))

114 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

158 
pOutT1
 = 
pOut
;

161 
rowC¡
 = 
numRows
;

164 
rowC¡
 > 0u)

167 
j
 = 
numRows
 - 
rowC¡
;

168 
j
 > 0u)

170 *
pOutT1
++ = 0.0f;

171 
j
--;

175 *
pOutT1
++ = 1.0f;

178 
j
 = 
rowC¡
 - 1u;

179 
j
 > 0u)

181 *
pOutT1
++ = 0.0f;

182 
j
--;

186 
rowC¡
--;

191 
lo›C¡
 = 
numCﬁs
;

194 
l
 = 0u;

196 
lo›C¡
 > 0u)

205 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

209 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

212 
ö
 = *
pInT1
;

215 
maxC
 = 0;

216 
i
 = 
l
; i < 
numRows
; i++)

218 
maxC
 = *
pInT1
 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);

219 
pInT1
 +
numCﬁs
;

223 if(
maxC
 == 0.0f)

225  
ARM_MATH_SINGULAR
;

229 
pInT1
 = 
pIn
;

232 
k
 = 1u;

235 if–(
ö
 > 0.0‡? i¿: -öË!
maxC
)

238 
i
 = 
numRows
 - (
l
 + 1u);

240 
i
 > 0u)

243 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

244 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

248 if((*
pInT2
 > 0.0‡? *pInT2: -*pInT2Ë=
maxC
)

252 
j
 = 
numCﬁs
 - 
l
;

254 
j
 > 0u)

257 
Xchg
 = *
pInT2
;

258 *
pInT2
++ = *
pInT1
;

259 *
pInT1
++ = 
Xchg
;

262 
j
--;

266 
j
 = 
numCﬁs
;

268 
j
 > 0u)

271 
Xchg
 = *
pOutT2
;

272 *
pOutT2
++ = *
pOutT1
;

273 *
pOutT1
++ = 
Xchg
;

276 
j
--;

280 
Êag
 = 1u;

287 
k
++;

290 
i
--;

295 if((
Êag
 !1uË&& (
ö
 == 0.0f))

297  
ARM_MATH_SINGULAR
;

301 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

302 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

305 
pInT1
 = 
pPivŸRowIn
;

306 
pInT2
 = 
pPivŸRowD°
;

309 
ö
 = *
pPivŸRowIn
;

313 
j
 = (
numCﬁs
 - 
l
);

315 
j
 > 0u)

319 
ö1
 = *
pInT1
;

320 *
pInT1
++ = 
ö1
 / 
ö
;

323 
j
--;

327 
j
 = 
numCﬁs
;

329 
j
 > 0u)

333 
ö1
 = *
pInT2
;

334 *
pInT2
++ = 
ö1
 / 
ö
;

337 
j
--;

344 
pInT1
 = 
pIn
;

345 
pInT2
 = 
pOut
;

348 
i
 = 0u;

352 
k
 = 
numRows
;

354 
k
 > 0u)

357 if(
i
 =
l
)

361 
pInT1
 +
numCﬁs
 - 
l
;

363 
pInT2
 +
numCﬁs
;

368 
ö
 = *
pInT1
;

371 
pPRT_ö
 = 
pPivŸRowIn
;

372 
pPRT_pD°
 = 
pPivŸRowD°
;

376 
j
 = (
numCﬁs
 - 
l
);

378 
j
 > 0u)

382 
ö1
 = *
pInT1
;

383 *
pInT1
++ = 
ö1
 - (
ö
 * *
pPRT_ö
++);

386 
j
--;

391 
j
 = 
numCﬁs
;

393 
j
 > 0u)

397 
ö1
 = *
pInT2
;

398 *
pInT2
++ = 
ö1
 - (
ö
 * *
pPRT_pD°
++);

401 
j
--;

407 
pInT1
 =ÖInT1 + 
l
;

410 
k
--;

413 
i
++;

417 
pIn
++;

420 
lo›C¡
--;

423 
l
++;

431 
Êﬂt64_t
 
Xchg
, 
ö
 = 0.0f;

432 
uöt32_t
 
i
, 
rowC¡
, 
Êag
 = 0u, 
j
, 
lo›C¡
, 
k
, 
l
;

433 
¨m_°©us
 
°©us
;

435 #ifde‡
ARM_MATH_MATRIX_CHECK


438 if((
pSrc
->
numRows
 !pSrc->
numCﬁs
Ë|| (
pD°
->numRows !=ÖDst->numCols)

439 || (
pSrc
->
numRows
 !
pD°
->numRows))

442 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

484 
pOutT1
 = 
pOut
;

487 
rowC¡
 = 
numRows
;

490 
rowC¡
 > 0u)

493 
j
 = 
numRows
 - 
rowC¡
;

494 
j
 > 0u)

496 *
pOutT1
++ = 0.0f;

497 
j
--;

501 *
pOutT1
++ = 1.0f;

504 
j
 = 
rowC¡
 - 1u;

505 
j
 > 0u)

507 *
pOutT1
++ = 0.0f;

508 
j
--;

512 
rowC¡
--;

517 
lo›C¡
 = 
numCﬁs
;

520 
l
 = 0u;

522 
lo›C¡
 > 0u)

531 
pInT1
 = 
pIn
 + (
l
 * 
numCﬁs
);

535 
pOutT1
 = 
pOut
 + (
l
 * 
numCﬁs
);

538 
ö
 = *
pInT1
;

541 
k
 = 1u;

544 if(*
pInT1
 == 0.0f)

547 
i
 = (
l
 + 1u); i < 
numRows
; i++)

550 
pInT2
 = 
pInT1
 + (
numCﬁs
 * 
l
);

551 
pOutT2
 = 
pOutT1
 + (
numCﬁs
 * 
k
);

555 if(*
pInT2
 != 0.0f)

559 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

562 
Xchg
 = *
pInT2
;

563 *
pInT2
++ = *
pInT1
;

564 *
pInT1
++ = 
Xchg
;

567 
j
 = 0u; j < 
numCﬁs
; j++)

569 
Xchg
 = *
pOutT2
;

570 *
pOutT2
++ = *
pOutT1
;

571 *
pOutT1
++ = 
Xchg
;

575 
Êag
 = 1u;

582 
k
++;

587 if((
Êag
 !1uË&& (
ö
 == 0.0f))

589  
ARM_MATH_SINGULAR
;

593 
pPivŸRowIn
 = 
pIn
 + (
l
 * 
numCﬁs
);

594 
pPivŸRowD°
 = 
pOut
 + (
l
 * 
numCﬁs
);

597 
pInT1
 = 
pPivŸRowIn
;

598 
pOutT1
 = 
pPivŸRowD°
;

601 
ö
 = *(
pIn
 + (
l
 * 
numCﬁs
));

605 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

609 *
pInT1
 = *pInT1 / 
ö
;

610 
pInT1
++;

612 
j
 = 0u; j < 
numCﬁs
; j++)

616 *
pOutT1
 = *pOutT1 / 
ö
;

617 
pOutT1
++;

624 
pInT1
 = 
pIn
;

625 
pOutT1
 = 
pOut
;

627 
i
 = 0u; i < 
numRows
; i++)

630 if(
i
 =
l
)

634 
pInT1
 +
numCﬁs
 - 
l
;

635 
pOutT1
 +
numCﬁs
;

640 
ö
 = *
pInT1
;

643 
pPRT_ö
 = 
pPivŸRowIn
;

644 
pPRT_pD°
 = 
pPivŸRowD°
;

648 
j
 = 0u; j < (
numCﬁs
 - 
l
); j++)

652 *
pInT1
 = *pInT1 - (
ö
 * *
pPRT_ö
++);

653 
pInT1
++;

657 
j
 = 0u; j < 
numCﬁs
; j++)

661 *
pOutT1
 = *pOutT1 - (
ö
 * *
pPRT_pD°
++);

662 
pOutT1
++;

667 
pInT1
 =ÖInT1 + 
l
;

670 
pIn
++;

673 
lo›C¡
--;

675 
l
++;

682 
°©us
 = 
ARM_MATH_SUCCESS
;

684 if((
Êag
 !1uË&& (
ö
 == 0.0f))

686 
pIn
 = 
pSrc
->
pD©a
;

687 
i
 = 0; i < 
numRows
 * 
numCﬁs
; i++)

689 i‡(
pIn
[
i
] != 0.0f)

693 i‡(
i
 =
numRows
 * 
numCﬁs
)

694 
°©us
 = 
ARM_MATH_SINGULAR
;

698  (
°©us
);

699 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_f32.c

41 
	~"¨m_m©h.h
"

78 
¨m_°©us
 
	$¨m_m©_mu…_f32
(

79 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

80 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

81 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

83 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

84 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

85 
Êﬂt32_t
 *
pInA
 = 
pSrcA
->
pD©a
;

86 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

87 
Êﬂt32_t
 *
px
;

88 
Êﬂt32_t
 
sum
;

89 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

90 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

91 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

98 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

99 
¨m_°©us
 
°©us
;

101 #ifde‡
ARM_MATH_MATRIX_CHECK


105 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

106 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

110 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

121 
px
 = 
pOut
 + 
i
;

124 
cﬁ
 = 
numCﬁsB
;

128 
pIn2
 = 
pSrcB
->
pD©a
;

130 
j
 = 0u;

136 
sum
 = 0.0f;

139 
pIn1
 = 
pInA
;

142 
cﬁC¡
 = 
numCﬁsA
 >> 2u;

145 
cﬁC¡
 > 0u)

148 
ö3
 = *
pIn2
;

149 
pIn2
 +
numCﬁsB
;

150 
ö1
 = 
pIn1
[0];

151 
ö2
 = 
pIn1
[1];

152 
sum
 +
ö1
 * 
ö3
;

153 
ö4
 = *
pIn2
;

154 
pIn2
 +
numCﬁsB
;

155 
sum
 +
ö2
 * 
ö4
;

157 
ö3
 = *
pIn2
;

158 
pIn2
 +
numCﬁsB
;

159 
ö1
 = 
pIn1
[2];

160 
ö2
 = 
pIn1
[3];

161 
sum
 +
ö1
 * 
ö3
;

162 
ö4
 = *
pIn2
;

163 
pIn2
 +
numCﬁsB
;

164 
sum
 +
ö2
 * 
ö4
;

165 
pIn1
 += 4u;

168 
cﬁC¡
--;

173 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

175 
cﬁC¡
 > 0u)

178 
sum
 +*
pIn1
++ * (*
pIn2
);

179 
pIn2
 +
numCﬁsB
;

182 
cﬁC¡
--;

186 *
px
++ = 
sum
;

189 
j
++;

190 
pIn2
 = 
pSrcB
->
pD©a
 + 
j
;

193 
cﬁ
--;

195 } 
cﬁ
 > 0u);

201 
Êﬂt32_t
 *
pInB
 = 
pSrcB
->
pD©a
;

202 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsA
, 
cﬁC¡
;

203 
¨m_°©us
 
°©us
;

205 #ifde‡
ARM_MATH_MATRIX_CHECK


208 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

209 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

213 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

224 
px
 = 
pOut
 + 
i
;

227 
cﬁ
 = 
numCﬁsB
;

231 
pIn2
 = 
pSrcB
->
pD©a
;

237 
sum
 = 0.0f;

240 
pIn1
 = 
pInA
;

243 
cﬁC¡
 = 
numCﬁsA
;

245 
cﬁC¡
 > 0u)

248 
sum
 +*
pIn1
++ * (*
pIn2
);

249 
pIn2
 +
numCﬁsB
;

252 
cﬁC¡
--;

256 *
px
++ = 
sum
;

259 
cﬁ
--;

262 
pIn2
 = 
pInB
 + (
numCﬁsB
 - 
cﬁ
);

264 } 
cﬁ
 > 0u);

269 
i
 = i + 
numCﬁsB
;

270 
pInA
 =ÖInA + 
numCﬁsA
;

273 
row
--;

275 } 
row
 > 0u);

277 
°©us
 = 
ARM_MATH_SUCCESS
;

281  (
°©us
);

282 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q15.c

41 
	~"¨m_m©h.h
"

85 
¨m_°©us
 
	$¨m_m©_mu…_Á°_q15
(

86 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

87 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

88 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

89 
q15_t
 * 
pSèã
)

91 
q31_t
 
sum
;

92 
q15_t
 *
pSrcBT
 = 
pSèã
;

93 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

94 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

95 
q15_t
 *
px
;

96 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

97 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

98 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

99 
uöt16_t
 
numRowsB
 = 
pSrcB
->
numRows
;

100 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsB
, 
cﬁC¡
;

101 
¨m_°©us
 
°©us
;

103 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


105 
q31_t
 
ö
;

106 
q31_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

110 
q15_t
 
ö
;

111 
q15_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
;

115 #ifde‡
ARM_MATH_MATRIX_CHECK


117 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

118 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

121 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

130 
cﬁ
 = 
numCﬁsB
 >> 2;

133 
px
 = 
pSrcBT
 + 
i
;

137 
cﬁ
 > 0u)

139 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


141 
ö
 = *
	`__SIMD32
(
pInB
)++;

144 #i‚de‡
ARM_MATH_BIG_ENDIAN


146 *
px
 = (
q15_t
Ë
ö
;

150 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

155 
px
 +
numRowsB
;

158 #i‚de‡
ARM_MATH_BIG_ENDIAN


160 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

164 *
px
 = (
q15_t
Ë
ö
;

169 
px
 +
numRowsB
;

172 
ö
 = *
	`__SIMD32
(
pInB
)++;

175 #i‚de‡
ARM_MATH_BIG_ENDIAN


177 *
px
 = (
q15_t
Ë
ö
;

181 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

186 
px
 +
numRowsB
;

190 #i‚de‡
ARM_MATH_BIG_ENDIAN


192 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

196 *
px
 = (
q15_t
Ë
ö
;

203 
ö
 = *
pInB
++;

206 *
px
 = 
ö
;

209 
px
 +
numRowsB
;

212 
ö
 = *
pInB
++;

215 *
px
 = 
ö
;

218 
px
 +
numRowsB
;

221 
ö
 = *
pInB
++;

224 *
px
 = 
ö
;

227 
px
 +
numRowsB
;

230 
ö
 = *
pInB
++;

233 *
px
 = 
ö
;

238 
px
 +
numRowsB
;

241 
cﬁ
--;

246 
cﬁ
 = 
numCﬁsB
 % 0x4u;

248 
cﬁ
 > 0u)

251 *
px
 = *
pInB
++;

254 
px
 +
numRowsB
;

257 
cﬁ
--;

260 
i
++;

263 
row
--;

265 } 
row
 > 0u);

268 
row
 = 
numRowsA
;

269 
i
 = 0u;

270 
px
 = 
pD°
->
pD©a
;

277 
cﬁ
 = 
numCﬁsB
;

281 
pInB
 = 
pSrcBT
;

287 
sum
 = 0;

290 
cﬁC¡
 = 
numCﬁsA
 >> 2;

293 
pInA
 = 
pSrcA
->
pD©a
 + 
i
;

296 
cﬁC¡
 > 0u)

299 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


301 
öA1
 = *
	`__SIMD32
(
pInA
)++;

302 
öB1
 = *
	`__SIMD32
(
pInB
)++;

303 
öA2
 = *
	`__SIMD32
(
pInA
)++;

304 
öB2
 = *
	`__SIMD32
(
pInB
)++;

306 
sum
 = 
	`__SMLAD
(
öA1
, 
öB1
, sum);

307 
sum
 = 
	`__SMLAD
(
öA2
, 
öB2
, sum);

311 
öA1
 = *
pInA
++;

312 
öB1
 = *
pInB
++;

313 
öA2
 = *
pInA
++;

314 
sum
 +
öA1
 * 
öB1
;

315 
öB2
 = *
pInB
++;

317 
öA1
 = *
pInA
++;

318 
öB1
 = *
pInB
++;

319 
sum
 +
öA2
 * 
öB2
;

320 
öA2
 = *
pInA
++;

321 
öB2
 = *
pInB
++;

323 
sum
 +
öA1
 * 
öB1
;

324 
sum
 +
öA2
 * 
öB2
;

329 
cﬁC¡
--;

333 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

335 
cﬁC¡
 > 0u)

338 
sum
 +(
q31_t
Ë(*
pInA
++Ë* (*
pInB
++);

340 
cﬁC¡
--;

344 *
px
 = (
q15_t
Ë(
sum
 >> 15);

345 
px
++;

348 
cﬁ
--;

350 } 
cﬁ
 > 0u);

352 
i
 = i + 
numCﬁsA
;

355 
row
--;

357 } 
row
 > 0u);

360 
°©us
 = 
ARM_MATH_SUCCESS
;

364  (
°©us
);

365 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q31.c

41 
	~"¨m_m©h.h
"

83 
¨m_°©us
 
	$¨m_m©_mu…_Á°_q31
(

84 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

85 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

86 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

88 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

89 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

90 
q31_t
 *
pInA
 = 
pSrcA
->
pD©a
;

92 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

93 
q31_t
 *
px
;

94 
q31_t
 
sum
;

95 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

96 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

97 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

98 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

99 
¨m_°©us
 
°©us
;

100 
q31_t
 
öA1
, 
öA2
, 
öA3
, 
öA4
, 
öB1
, 
öB2
, 
öB3
, 
öB4
;

102 #ifde‡
ARM_MATH_MATRIX_CHECK


106 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

107 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

110 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

121 
px
 = 
pOut
 + 
i
;

124 
cﬁ
 = 
numCﬁsB
;

128 
pIn2
 = 
pSrcB
->
pD©a
;

130 
j
 = 0u;

136 
sum
 = 0;

139 
pIn1
 = 
pInA
;

142 
cﬁC¡
 = 
numCﬁsA
 >> 2;

146 
cﬁC¡
 > 0u)

150 
öB1
 = *
pIn2
;

151 
pIn2
 +
numCﬁsB
;

153 
öA1
 = 
pIn1
[0];

154 
öA2
 = 
pIn1
[1];

156 
öB2
 = *
pIn2
;

157 
pIn2
 +
numCﬁsB
;

159 
öB3
 = *
pIn2
;

160 
pIn2
 +
numCﬁsB
;

162 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA1
 * 
öB1
)) >> 32);

163 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA2
 * 
öB2
)) >> 32);

165 
öA3
 = 
pIn1
[2];

166 
öA4
 = 
pIn1
[3];

168 
öB4
 = *
pIn2
;

169 
pIn2
 +
numCﬁsB
;

171 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA3
 * 
öB3
)) >> 32);

172 
sum
 = (
q31_t
Ë((((
q63_t
Ësum << 32Ë+ ((q63_tË
öA4
 * 
öB4
)) >> 32);

174 
pIn1
 += 4u;

177 
cﬁC¡
--;

182 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

184 
cﬁC¡
 > 0u)

188 
sum
 = (
q31_t
Ë((((
q63_t
) sum << 32) +

189 ((
q63_t
Ë* 
pIn1
++ * (*
pIn2
))) >> 32);

190 
pIn2
 +
numCﬁsB
;

193 
cﬁC¡
--;

197 *
px
++ = 
sum
 << 1;

200 
j
++;

201 
pIn2
 = 
pSrcB
->
pD©a
 + 
j
;

204 
cﬁ
--;

206 } 
cﬁ
 > 0u);

209 
i
 = i + 
numCﬁsB
;

210 
pInA
 =ÖInA + 
numCﬁsA
;

213 
row
--;

215 } 
row
 > 0u);

218 
°©us
 = 
ARM_MATH_SUCCESS
;

221  (
°©us
);

222 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q15.c

41 
	~"¨m_m©h.h
"

79 
¨m_°©us
 
	$¨m_m©_mu…_q15
(

80 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

81 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

82 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

83 
q15_t
 * 
pSèã
 
CMSIS_UNUSED
)

85 
q63_t
 
sum
;

87 #i‚de‡
ARM_MATH_CM0_FAMILY


91 
q15_t
 *
pSrcBT
 = 
pSèã
;

92 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

93 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

94 
q15_t
 *
px
;

95 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

96 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

97 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

98 
uöt16_t
 
numRowsB
 = 
pSrcB
->
numRows
;

99 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsB
, 
cﬁC¡
;

100 
¨m_°©us
 
°©us
;

102 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


104 
q31_t
 
ö
;

105 
q31_t
 
pSour˚A1
, 
pSour˚B1
, 
pSour˚A2
, 
pSour˚B2
;

109 
q15_t
 
ö
;

110 
q15_t
 
öA1
, 
öB1
, 
öA2
, 
öB2
;

114 #ifde‡
ARM_MATH_MATRIX_CHECK


116 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

117 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

120 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

129 
cﬁ
 = 
numCﬁsB
 >> 2;

132 
px
 = 
pSrcBT
 + 
i
;

136 
cﬁ
 > 0u)

138 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


141 
ö
 = *
	`__SIMD32
(
pInB
)++;

144 #i‚de‡
ARM_MATH_BIG_ENDIAN


146 *
px
 = (
q15_t
Ë
ö
;

150 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

155 
px
 +
numRowsB
;

158 #i‚de‡
ARM_MATH_BIG_ENDIAN


160 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

164 *
px
 = (
q15_t
Ë
ö
;

169 
px
 +
numRowsB
;

172 
ö
 = *
	`__SIMD32
(
pInB
)++;

175 #i‚de‡
ARM_MATH_BIG_ENDIAN


177 *
px
 = (
q15_t
Ë
ö
;

181 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

186 
px
 +
numRowsB
;

190 #i‚de‡
ARM_MATH_BIG_ENDIAN


192 *
px
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

196 *
px
 = (
q15_t
Ë
ö
;

201 
px
 +
numRowsB
;

206 
ö
 = *
pInB
++;

209 *
px
 = 
ö
;

212 
px
 +
numRowsB
;

215 
ö
 = *
pInB
++;

218 *
px
 = 
ö
;

221 
px
 +
numRowsB
;

224 
ö
 = *
pInB
++;

227 *
px
 = 
ö
;

230 
px
 +
numRowsB
;

233 
ö
 = *
pInB
++;

236 *
px
 = 
ö
;

239 
px
 +
numRowsB
;

244 
cﬁ
--;

249 
cﬁ
 = 
numCﬁsB
 % 0x4u;

251 
cﬁ
 > 0u)

254 *
px
 = *
pInB
++;

257 
px
 +
numRowsB
;

260 
cﬁ
--;

263 
i
++;

266 
row
--;

268 } 
row
 > 0u);

271 
row
 = 
numRowsA
;

272 
i
 = 0u;

273 
px
 = 
pD°
->
pD©a
;

280 
cﬁ
 = 
numCﬁsB
;

284 
pInB
 = 
pSrcBT
;

290 
sum
 = 0;

293 
cﬁC¡
 = 
numCﬁsA
 >> 2;

296 
pInA
 = 
pSrcA
->
pD©a
 + 
i
;

300 
cﬁC¡
 > 0u)

303 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


306 
pSour˚A1
 = *
	`__SIMD32
(
pInA
)++;

307 
pSour˚B1
 = *
	`__SIMD32
(
pInB
)++;

309 
pSour˚A2
 = *
	`__SIMD32
(
pInA
)++;

310 
pSour˚B2
 = *
	`__SIMD32
(
pInB
)++;

313 
sum
 = 
	`__SMLALD
(
pSour˚A1
, 
pSour˚B1
, sum);

314 
sum
 = 
	`__SMLALD
(
pSour˚A2
, 
pSour˚B2
, sum);

318 
öA1
 = *
pInA
++;

319 
öB1
 = *
pInB
++;

320 
öA2
 = *
pInA
++;

322 
sum
 +
öA1
 * 
öB1
;

323 
öB2
 = *
pInB
++;

325 
öA1
 = *
pInA
++;

326 
öB1
 = *
pInB
++;

328 
sum
 +
öA2
 * 
öB2
;

329 
öA2
 = *
pInA
++;

330 
öB2
 = *
pInB
++;

333 
sum
 +
öA1
 * 
öB1
;

334 
sum
 +
öA2
 * 
öB2
;

339 
cﬁC¡
--;

343 
cﬁC¡
 = 
numCﬁsA
 & 3u;

345 
cﬁC¡
 > 0u)

348 
sum
 +*
pInA
++ * *
pInB
++;

351 
cﬁC¡
--;

355 *
px
 = (
q15_t
Ë(
	`__SSAT
((
sum
 >> 15), 16));

356 
px
++;

359 
cﬁ
--;

361 } 
cﬁ
 > 0u);

363 
i
 = i + 
numCﬁsA
;

366 
row
--;

368 } 
row
 > 0u);

374 
q15_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

375 
q15_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

376 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

377 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

378 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

379 
q15_t
 *
px
;

380 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

381 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

382 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

383 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsA
, 
cﬁC¡
;

384 
¨m_°©us
 
°©us
;

386 #ifde‡
ARM_MATH_MATRIX_CHECK


389 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

390 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

393 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

404 
px
 = 
pOut
 + 
i
;

407 
cﬁ
 = 
numCﬁsB
;

411 
pIn2
 = 
pSrcB
->
pD©a
;

417 
sum
 = 0;

420 
pIn1
 = 
pInA
;

423 
cﬁC¡
 = 
numCﬁsA
;

426 
cﬁC¡
 > 0u)

430 
sum
 +(
q31_t
Ë* 
pIn1
++ * *
pIn2
;

431 
pIn2
 +
numCﬁsB
;

434 
cﬁC¡
--;

439 *
px
++ = (
q15_t
Ë
	`__SSAT
((
sum
 >> 15), 16);

442 
cﬁ
--;

445 
pIn2
 = 
pInB
 + (
numCﬁsB
 - 
cﬁ
);

447 } 
cﬁ
 > 0u);

450 
i
 = i + 
numCﬁsB
;

451 
pInA
 =ÖInA + 
numCﬁsA
;

454 
row
--;

456 } 
row
 > 0u);

460 
°©us
 = 
ARM_MATH_SUCCESS
;

464  (
°©us
);

465 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q31.c

41 
	~"¨m_m©h.h
"

78 
¨m_°©us
 
	$¨m_m©_mu…_q31
(

79 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

80 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

81 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

83 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

84 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

85 
q31_t
 *
pInA
 = 
pSrcA
->
pD©a
;

86 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

87 
q31_t
 *
px
;

88 
q63_t
 
sum
;

89 
uöt16_t
 
numRowsA
 = 
pSrcA
->
numRows
;

90 
uöt16_t
 
numCﬁsB
 = 
pSrcB
->
numCﬁs
;

91 
uöt16_t
 
numCﬁsA
 = 
pSrcA
->
numCﬁs
;

93 #i‚de‡
ARM_MATH_CM0_FAMILY


97 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
j
, 
row
 = 
numRowsA
, 
cﬁC¡
;

98 
¨m_°©us
 
°©us
;

99 
q31_t
 
a0
, 
a1
, 
a2
, 
a3
, 
b0
, 
b1
, 
b2
, 
b3
;

101 #ifde‡
ARM_MATH_MATRIX_CHECK


105 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

106 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

109 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

120 
px
 = 
pOut
 + 
i
;

123 
cﬁ
 = 
numCﬁsB
;

127 
pIn2
 = 
pSrcB
->
pD©a
;

129 
j
 = 0u;

135 
sum
 = 0;

138 
pIn1
 = 
pInA
;

141 
cﬁC¡
 = 
numCﬁsA
 >> 2;

145 
cﬁC¡
 > 0u)

149 
b0
 = *
pIn2
;

150 
pIn2
 +
numCﬁsB
;

152 
a0
 = *
pIn1
++;

153 
a1
 = *
pIn1
++;

155 
b1
 = *
pIn2
;

156 
pIn2
 +
numCﬁsB
;

157 
b2
 = *
pIn2
;

158 
pIn2
 +
numCﬁsB
;

160 
sum
 +(
q63_t
Ë
a0
 *
b0
;

161 
sum
 +(
q63_t
Ë
a1
 *
b1
;

163 
a2
 = *
pIn1
++;

164 
a3
 = *
pIn1
++;

166 
b3
 = *
pIn2
;

167 
pIn2
 +
numCﬁsB
;

169 
sum
 +(
q63_t
Ë
a2
 *
b2
;

170 
sum
 +(
q63_t
Ë
a3
 *
b3
;

173 
cﬁC¡
--;

178 
cﬁC¡
 = 
numCﬁsA
 % 0x4u;

180 
cﬁC¡
 > 0u)

184 
sum
 +(
q63_t
Ë* 
pIn1
++ * *
pIn2
;

185 
pIn2
 +
numCﬁsB
;

188 
cﬁC¡
--;

192 *
px
++ = (
q31_t
Ë(
sum
 >> 31);

195 
j
++;

196 
pIn2
 = (
pSrcB
->
pD©a
Ë+ 
j
;

199 
cﬁ
--;

201 } 
cﬁ
 > 0u);

207 
q31_t
 *
pInB
 = 
pSrcB
->
pD©a
;

208 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
numRowsA
, 
cﬁC¡
;

209 
¨m_°©us
 
°©us
;

212 #ifde‡
ARM_MATH_MATRIX_CHECK


215 if((
pSrcA
->
numCﬁs
 !
pSrcB
->
numRows
) ||

216 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (
pSrcB
->
numCﬁs
 !=ÖDst->numCols))

219 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

230 
px
 = 
pOut
 + 
i
;

233 
cﬁ
 = 
numCﬁsB
;

237 
pIn2
 = 
pSrcB
->
pD©a
;

243 
sum
 = 0;

246 
pIn1
 = 
pInA
;

249 
cﬁC¡
 = 
numCﬁsA
;

252 
cﬁC¡
 > 0u)

256 
sum
 +(
q63_t
Ë* 
pIn1
++ * *
pIn2
;

257 
pIn2
 +
numCﬁsB
;

260 
cﬁC¡
--;

264 *
px
++ = (
q31_t
Ë
	`˛ù_q63_to_q31
(
sum
 >> 31);

267 
cﬁ
--;

270 
pIn2
 = 
pInB
 + (
numCﬁsB
 - 
cﬁ
);

272 } 
cﬁ
 > 0u);

277 
i
 = i + 
numCﬁsB
;

278 
pInA
 =ÖInA + 
numCﬁsA
;

281 
row
--;

283 } 
row
 > 0u);

286 
°©us
 = 
ARM_MATH_SUCCESS
;

289  (
°©us
);

290 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_f32.c

41 
	~"¨m_m©h.h
"

80 
¨m_°©us
 
	$¨m_m©_sˇÀ_f32
(

81 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

82 
Êﬂt32_t
 
sˇÀ
,

83 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

85 
Êﬂt32_t
 *
pIn
 = 
pSrc
->
pD©a
;

86 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

87 
uöt32_t
 
numSam∂es
;

88 
uöt32_t
 
blkC¡
;

89 
¨m_°©us
 
°©us
;

91 #i‚de‡
ARM_MATH_CM0_FAMILY


93 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

94 
Êﬂt32_t
 
out1
, 
out2
, 
out3
, 
out4
;

98 #ifde‡
ARM_MATH_MATRIX_CHECK


100 if((
pSrc
->
numRows
 !
pD°
->numRowsË|| (pSrc->
numCﬁs
 !=ÖDst->numCols))

103 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

109 
numSam∂es
 = (
uöt32_t
Ë
pSrc
->
numRows
 *ÖSrc->
numCﬁs
;

111 #i‚de‡
ARM_MATH_CM0_FAMILY


116 
blkC¡
 = 
numSam∂es
 >> 2;

120 
blkC¡
 > 0u)

124 
ö1
 = 
pIn
[0];

125 
ö2
 = 
pIn
[1];

126 
ö3
 = 
pIn
[2];

127 
ö4
 = 
pIn
[3];

129 
out1
 = 
ö1
 * 
sˇÀ
;

130 
out2
 = 
ö2
 * 
sˇÀ
;

131 
out3
 = 
ö3
 * 
sˇÀ
;

132 
out4
 = 
ö4
 * 
sˇÀ
;

135 
pOut
[0] = 
out1
;

136 
pOut
[1] = 
out2
;

137 
pOut
[2] = 
out3
;

138 
pOut
[3] = 
out4
;

141 
pIn
 += 4u;

142 
pOut
 += 4u;

145 
blkC¡
--;

150 
blkC¡
 = 
numSam∂es
 % 0x4u;

157 
blkC¡
 = 
numSam∂es
;

161 
blkC¡
 > 0u)

165 *
pOut
++ = (*
pIn
++Ë* 
sˇÀ
;

168 
blkC¡
--;

172 
°©us
 = 
ARM_MATH_SUCCESS
;

176  (
°©us
);

177 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q15.c

41 
	~"¨m_m©h.h
"

68 
¨m_°©us
 
	$¨m_m©_sˇÀ_q15
(

69 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

70 
q15_t
 
sˇÀFø˘
,

71 
öt32_t
 
shi·
,

72 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

74 
q15_t
 *
pIn
 = 
pSrc
->
pD©a
;

75 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

76 
uöt32_t
 
numSam∂es
;

77 
öt32_t
 
tŸShi·
 = 15 - 
shi·
;

78 
uöt32_t
 
blkC¡
;

79 
¨m_°©us
 
°©us
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q15_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

84 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

85 
q31_t
 
öA1
, 
öA2
;

89 #ifde‡
ARM_MATH_MATRIX_CHECK


91 if((
pSrc
->
numRows
 !
pD°
->numRowsË|| (pSrc->
numCﬁs
 !=ÖDst->numCols))

94 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

100 
numSam∂es
 = (
uöt32_t
Ë
pSrc
->
numRows
 *ÖSrc->
numCﬁs
;

102 #i‚de‡
ARM_MATH_CM0_FAMILY


106 
blkC¡
 = 
numSam∂es
 >> 2;

110 
blkC¡
 > 0u)

115 
öA1
 = 
	`_SIMD32_OFFSET
(
pIn
);

116 
öA2
 = 
	`_SIMD32_OFFSET
(
pIn
 + 2);

121 
out1
 = (
q31_t
Ë((
q15_t
Ë(
öA1
 >> 16Ë* 
sˇÀFø˘
);

122 
out2
 = (
q31_t
Ë((
q15_t
Ë
öA1
 * 
sˇÀFø˘
);

123 
out3
 = (
q31_t
Ë((
q15_t
Ë(
öA2
 >> 16Ë* 
sˇÀFø˘
);

124 
out4
 = (
q31_t
Ë((
q15_t
Ë
öA2
 * 
sˇÀFø˘
);

126 
out1
 = out1 >> 
tŸShi·
;

127 
öA1
 = 
	`_SIMD32_OFFSET
(
pIn
 + 4);

128 
out2
 = out2 >> 
tŸShi·
;

129 
öA2
 = 
	`_SIMD32_OFFSET
(
pIn
 + 6);

130 
out3
 = out3 >> 
tŸShi·
;

131 
out4
 = out4 >> 
tŸShi·
;

133 
ö1
 = (
q15_t
Ë(
	`__SSAT
(
out1
, 16));

134 
ö2
 = (
q15_t
Ë(
	`__SSAT
(
out2
, 16));

135 
ö3
 = (
q15_t
Ë(
	`__SSAT
(
out3
, 16));

136 
ö4
 = (
q15_t
Ë(
	`__SSAT
(
out4
, 16));

138 
	`_SIMD32_OFFSET
(
pOut
Ë
	`__PKHBT
(
ö2
, 
ö1
, 16);

139 
	`_SIMD32_OFFSET
(
pOut
 + 2Ë
	`__PKHBT
(
ö4
, 
ö3
, 16);

142 
pIn
 += 4u;

143 
pOut
 += 4u;

147 
blkC¡
--;

152 
blkC¡
 = 
numSam∂es
 % 0x4u;

159 
blkC¡
 = 
numSam∂es
;

163 
blkC¡
 > 0u)

167 *
pOut
++ =

168 (
q15_t
Ë(
	`__SSAT
(((
q31_t
Ë(*
pIn
++Ë* 
sˇÀFø˘
Ë>> 
tŸShi·
, 16));

171 
blkC¡
--;

174 
°©us
 = 
ARM_MATH_SUCCESS
;

178  (
°©us
);

179 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q31.c

40 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_m©_sˇÀ_q31
(

68 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

69 
q31_t
 
sˇÀFø˘
,

70 
öt32_t
 
shi·
,

71 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

73 
q31_t
 *
pIn
 = 
pSrc
->
pD©a
;

74 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

75 
uöt32_t
 
numSam∂es
;

76 
öt32_t
 
tŸShi·
 = 
shi·
 + 1;

77 
uöt32_t
 
blkC¡
;

78 
¨m_°©us
 
°©us
;

79 
q31_t
 
ö1
, 
ö2
, 
out1
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö3
, 
ö4
, 
out2
, 
out3
, 
out4
;

87 #ifde‡
ARM_MATH_MATRIX_CHECK


89 if((
pSrc
->
numRows
 !
pD°
->numRowsË|| (pSrc->
numCﬁs
 !=ÖDst->numCols))

92 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

98 
numSam∂es
 = (
uöt32_t
Ë
pSrc
->
numRows
 *ÖSrc->
numCﬁs
;

100 #i‚de‡
ARM_MATH_CM0_FAMILY


105 
blkC¡
 = 
numSam∂es
 >> 2u;

109 
blkC¡
 > 0u)

113 
ö1
 = *
pIn
;

114 
ö2
 = *(
pIn
 + 1);

115 
ö3
 = *(
pIn
 + 2);

116 
ö4
 = *(
pIn
 + 3);

119 
ö1
 = ((
q63_t
Ëö1 * 
sˇÀFø˘
) >> 32;

120 
ö2
 = ((
q63_t
Ëö2 * 
sˇÀFø˘
) >> 32;

121 
ö3
 = ((
q63_t
Ëö3 * 
sˇÀFø˘
) >> 32;

122 
ö4
 = ((
q63_t
Ëö4 * 
sˇÀFø˘
) >> 32;

125 
out1
 = 
ö1
 << 
tŸShi·
;

126 
out2
 = 
ö2
 << 
tŸShi·
;

129 if(
ö1
 !(
out1
 >> 
tŸShi·
))

130 
out1
 = 0x7FFFFFFF ^ (
ö1
 >> 31);

132 if(
ö2
 !(
out2
 >> 
tŸShi·
))

133 
out2
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

135 
out3
 = 
ö3
 << 
tŸShi·
;

136 
out4
 = 
ö4
 << 
tŸShi·
;

138 *
pOut
 = 
out1
;

139 *(
pOut
 + 1Ë
out2
;

141 if(
ö3
 !(
out3
 >> 
tŸShi·
))

142 
out3
 = 0x7FFFFFFF ^ (
ö3
 >> 31);

144 if(
ö4
 !(
out4
 >> 
tŸShi·
))

145 
out4
 = 0x7FFFFFFF ^ (
ö4
 >> 31);

148 *(
pOut
 + 2Ë
out3
;

149 *(
pOut
 + 3Ë
out4
;

152 
pIn
 += 4u;

153 
pOut
 += 4u;

157 
blkC¡
--;

162 
blkC¡
 = 
numSam∂es
 % 0x4u;

169 
blkC¡
 = 
numSam∂es
;

173 
blkC¡
 > 0u)

177 
ö1
 = *
pIn
++;

179 
ö2
 = ((
q63_t
Ë
ö1
 * 
sˇÀFø˘
) >> 32;

181 
out1
 = 
ö2
 << 
tŸShi·
;

183 if(
ö2
 !(
out1
 >> 
tŸShi·
))

184 
out1
 = 0x7FFFFFFF ^ (
ö2
 >> 31);

186 *
pOut
++ = 
out1
;

189 
blkC¡
--;

193 
°©us
 = 
ARM_MATH_SUCCESS
;

197  (
°©us
);

198 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_f32.c

41 
	~"¨m_m©h.h
"

72 
¨m_°©us
 
	$¨m_m©_sub_f32
(

73 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

74 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

75 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

77 
Êﬂt32_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

78 
Êﬂt32_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

79 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
Êﬂt32_t
 
öA1
, 
öA2
, 
öB1
, 
öB2
, 
out1
, 
out2
;

87 
uöt32_t
 
numSam∂es
;

88 
uöt32_t
 
blkC¡
;

89 
¨m_°©us
 
°©us
;

91 #ifde‡
ARM_MATH_MATRIX_CHECK


93 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

94 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

95 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

98 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

104 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

106 #i‚de‡
ARM_MATH_CM0_FAMILY


111 
blkC¡
 = 
numSam∂es
 >> 2u;

115 
blkC¡
 > 0u)

120 
öA1
 = 
pIn1
[0];

123 
öB1
 = 
pIn2
[0];

126 
öA2
 = 
pIn1
[1];

129 
out1
 = 
öA1
 - 
öB1
;

132 
öB2
 = 
pIn2
[1];

135 
öA1
 = 
pIn1
[2];

138 
out2
 = 
öA2
 - 
öB2
;

141 
öB1
 = 
pIn2
[2];

144 
pOut
[0] = 
out1
;

145 
pOut
[1] = 
out2
;

148 
öA2
 = 
pIn1
[3];

151 
öB2
 = 
pIn2
[3];

154 
out1
 = 
öA1
 - 
öB1
;

158 
out2
 = 
öA2
 - 
öB2
;

161 
pOut
[2] = 
out1
;

164 
pOut
[3] = 
out2
;

168 
pIn1
 += 4u;

169 
pIn2
 += 4u;

170 
pOut
 += 4u;

173 
blkC¡
--;

178 
blkC¡
 = 
numSam∂es
 % 0x4u;

185 
blkC¡
 = 
numSam∂es
;

189 
blkC¡
 > 0u)

193 *
pOut
++ = (*
pIn1
++Ë- (*
pIn2
++);

196 
blkC¡
--;

200 
°©us
 = 
ARM_MATH_SUCCESS
;

204  (
°©us
);

205 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q15.c

41 
	~"¨m_m©h.h
"

66 
¨m_°©us
 
	$¨m_m©_sub_q15
(

67 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

68 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

69 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

71 
q15_t
 *
pInA
 = 
pSrcA
->
pD©a
;

72 
q15_t
 *
pInB
 = 
pSrcB
->
pD©a
;

73 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

74 
uöt32_t
 
numSam∂es
;

75 
uöt32_t
 
blkC¡
;

76 
¨m_°©us
 
°©us
;

79 #ifde‡
ARM_MATH_MATRIX_CHECK


83 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

84 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

85 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

88 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

95 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

97 #i‚de‡
ARM_MATH_CM0_FAMILY


102 
blkC¡
 = 
numSam∂es
 >> 2u;

106 
blkC¡
 > 0u)

110 *
	`__SIMD32
(
pOut
)++ = 
	`__QSUB16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

111 *
	`__SIMD32
(
pOut
)++ = 
	`__QSUB16
(*__SIMD32(
pInA
)++, *__SIMD32(
pInB
)++);

114 
blkC¡
--;

119 
blkC¡
 = 
numSam∂es
 % 0x4u;

121 
blkC¡
 > 0u)

125 *
pOut
++ = (
q15_t
Ë
	`__QSUB16
(*
pInA
++, *
pInB
++);

128 
blkC¡
--;

136 
blkC¡
 = 
numSam∂es
;

138 
blkC¡
 > 0u)

142 *
pOut
++ = (
q15_t
Ë
	`__SSAT
(((
q31_t
Ë* 
pInA
++ - *
pInB
++), 16);

145 
blkC¡
--;

151 
°©us
 = 
ARM_MATH_SUCCESS
;

155  (
°©us
);

156 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q31.c

41 
	~"¨m_m©h.h
"

67 
¨m_°©us
 
	$¨m_m©_sub_q31
(

68 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

69 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

70 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

72 
q31_t
 *
pIn1
 = 
pSrcA
->
pD©a
;

73 
q31_t
 *
pIn2
 = 
pSrcB
->
pD©a
;

74 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

75 
q31_t
 
öA1
, 
öB1
;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
q31_t
 
öA2
, 
öB2
;

80 
q31_t
 
out1
, 
out2
;

84 
uöt32_t
 
numSam∂es
;

85 
uöt32_t
 
blkC¡
;

86 
¨m_°©us
 
°©us
;

89 #ifde‡
ARM_MATH_MATRIX_CHECK


91 if((
pSrcA
->
numRows
 !
pSrcB
->numRows) ||

92 (
pSrcA
->
numCﬁs
 !
pSrcB
->numCols) ||

93 (
pSrcA
->
numRows
 !
pD°
->numRowsË|| (pSrcA->
numCﬁs
 !=ÖDst->numCols))

96 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

102 
numSam∂es
 = (
uöt32_t
Ë
pSrcA
->
numRows
 *ÖSrcA->
numCﬁs
;

104 #i‚de‡
ARM_MATH_CM0_FAMILY


109 
blkC¡
 = 
numSam∂es
 >> 2u;

113 
blkC¡
 > 0u)

118 
öA1
 = 
pIn1
[0];

121 
öB1
 = 
pIn2
[0];

124 
öA2
 = 
pIn1
[1];

127 
out1
 = 
	`__QSUB
(
öA1
, 
öB1
);

130 
öB2
 = 
pIn2
[1];

133 
öA1
 = 
pIn1
[2];

136 
out2
 = 
	`__QSUB
(
öA2
, 
öB2
);

139 
öB1
 = 
pIn2
[2];

142 
pOut
[0] = 
out1
;

143 
pOut
[1] = 
out2
;

146 
öA2
 = 
pIn1
[3];

149 
öB2
 = 
pIn2
[3];

152 
out1
 = 
	`__QSUB
(
öA1
, 
öB1
);

155 
out2
 = 
	`__QSUB
(
öA2
, 
öB2
);

158 
pOut
[2] = 
out1
;

159 
pOut
[3] = 
out2
;

162 
pIn1
 += 4u;

163 
pIn2
 += 4u;

164 
pOut
 += 4u;

167 
blkC¡
--;

172 
blkC¡
 = 
numSam∂es
 % 0x4u;

179 
blkC¡
 = 
numSam∂es
;

183 
blkC¡
 > 0u)

187 
öA1
 = *
pIn1
++;

188 
öB1
 = *
pIn2
++;

190 
öA1
 = 
	`__QSUB
(öA1, 
öB1
);

192 *
pOut
++ = 
öA1
;

195 
blkC¡
--;

199 
°©us
 = 
ARM_MATH_SUCCESS
;

203  (
°©us
);

204 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_f32.c

49 
	~"¨m_m©h.h
"

69 
¨m_°©us
 
	$¨m_m©_å™s_f32
(

70 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

71 
¨m_m©rix_ö°™˚_f32
 * 
pD°
)

73 
Êﬂt32_t
 *
pIn
 = 
pSrc
->
pD©a
;

74 
Êﬂt32_t
 *
pOut
 = 
pD°
->
pD©a
;

75 
Êﬂt32_t
 *
px
;

76 
uöt16_t
 
nRows
 = 
pSrc
->
numRows
;

77 
uöt16_t
 
nCﬁumns
 = 
pSrc
->
numCﬁs
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
uöt16_t
 
blkC¡
, 
i
 = 0u, 
row
 = 
nRows
;

84 
¨m_°©us
 
°©us
;

87 #ifde‡
ARM_MATH_MATRIX_CHECK


91 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

94 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

105 
blkC¡
 = 
nCﬁumns
 >> 2;

108 
px
 = 
pOut
 + 
i
;

112 
blkC¡
 > 0u)

115 *
px
 = *
pIn
++;

118 
px
 +
nRows
;

121 *
px
 = *
pIn
++;

124 
px
 +
nRows
;

127 *
px
 = *
pIn
++;

130 
px
 +
nRows
;

133 *
px
 = *
pIn
++;

136 
px
 +
nRows
;

139 
blkC¡
--;

143 
blkC¡
 = 
nCﬁumns
 % 0x4u;

145 
blkC¡
 > 0u)

148 *
px
 = *
pIn
++;

151 
px
 +
nRows
;

154 
blkC¡
--;

161 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
nRows
;

162 
¨m_°©us
 
°©us
;

165 #ifde‡
ARM_MATH_MATRIX_CHECK


168 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

171 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

182 
px
 = 
pOut
 + 
i
;

185 
cﬁ
 = 
nCﬁumns
;

187 
cﬁ
 > 0u)

190 *
px
 = *
pIn
++;

193 
px
 +
nRows
;

196 
cﬁ
--;

201 
i
++;

204 
row
--;

206 } 
row
 > 0u);

209 
°©us
 = 
ARM_MATH_SUCCESS
;

213  (
°©us
);

214 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q15.c

41 
	~"¨m_m©h.h
"

60 
¨m_°©us
 
	$¨m_m©_å™s_q15
(

61 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

62 
¨m_m©rix_ö°™˚_q15
 * 
pD°
)

64 
q15_t
 *
pSrcA
 = 
pSrc
->
pD©a
;

65 
q15_t
 *
pOut
 = 
pD°
->
pD©a
;

66 
uöt16_t
 
nRows
 = 
pSrc
->
numRows
;

67 
uöt16_t
 
nCﬁumns
 = 
pSrc
->
numCﬁs
;

68 
uöt16_t
 
cﬁ
, 
row
 = 
nRows
, 
i
 = 0u;

69 
¨m_°©us
 
°©us
;

71 #i‚de‡
ARM_MATH_CM0_FAMILY


74 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


76 
q31_t
 
ö
;

80 
q15_t
 
ö
;

84 #ifde‡
ARM_MATH_MATRIX_CHECK


88 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

91 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

103 
cﬁ
 = 
nCﬁumns
 >> 2u;

106 
pOut
 = 
pD°
->
pD©a
 + 
i
;

110 
cﬁ
 > 0u)

112 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


115 
ö
 = *
	`__SIMD32
(
pSrcA
)++;

118 #i‚de‡
ARM_MATH_BIG_ENDIAN


120 *
pOut
 = (
q15_t
Ë
ö
;

124 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

129 
pOut
 +
nRows
;

133 #i‚de‡
ARM_MATH_BIG_ENDIAN


135 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

139 *
pOut
 = (
q15_t
Ë
ö
;

144 
pOut
 +
nRows
;

147 #i‚de‡
ARM_MATH_BIG_ENDIAN


149 
ö
 = *
	`__SIMD32
(
pSrcA
)++;

153 
ö
 = *
	`__SIMD32
(
pSrcA
)++;

158 #i‚de‡
ARM_MATH_BIG_ENDIAN


160 *
pOut
 = (
q15_t
Ë
ö
;

164 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

169 
pOut
 +
nRows
;

172 #i‚de‡
ARM_MATH_BIG_ENDIAN


174 *
pOut
 = (
q15_t
Ë((
ö
 & (
q31_t
) 0xffff0000) >> 16);

178 *
pOut
 = (
q15_t
Ë
ö
;

184 
ö
 = *
pSrcA
++;

187 *
pOut
 = 
ö
;

190 
pOut
 +
nRows
;

193 
ö
 = *
pSrcA
++;

196 *
pOut
 = 
ö
;

199 
pOut
 +
nRows
;

202 
ö
 = *
pSrcA
++;

205 *
pOut
 = 
ö
;

208 
pOut
 +
nRows
;

211 
ö
 = *
pSrcA
++;

214 *
pOut
 = 
ö
;

219 
pOut
 +
nRows
;

222 
cﬁ
--;

226 
cﬁ
 = 
nCﬁumns
 % 0x4u;

232 #ifde‡
ARM_MATH_MATRIX_CHECK


235 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

238 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

249 
pOut
 = 
pD°
->
pD©a
 + 
i
;

252 
cﬁ
 = 
nCﬁumns
;

256 
cﬁ
 > 0u)

259 *
pOut
 = *
pSrcA
++;

262 
pOut
 +
nRows
;

265 
cﬁ
--;

268 
i
++;

271 
row
--;

273 } 
row
 > 0u);

276 
°©us
 = 
ARM_MATH_SUCCESS
;

279  (
°©us
);

280 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q31.c

41 
	~"¨m_m©h.h
"

60 
¨m_°©us
 
	$¨m_m©_å™s_q31
(

61 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

62 
¨m_m©rix_ö°™˚_q31
 * 
pD°
)

64 
q31_t
 *
pIn
 = 
pSrc
->
pD©a
;

65 
q31_t
 *
pOut
 = 
pD°
->
pD©a
;

66 
q31_t
 *
px
;

67 
uöt16_t
 
nRows
 = 
pSrc
->
numRows
;

68 
uöt16_t
 
nCﬁumns
 = 
pSrc
->
numCﬁs
;

70 #i‚de‡
ARM_MATH_CM0_FAMILY


74 
uöt16_t
 
blkC¡
, 
i
 = 0u, 
row
 = 
nRows
;

75 
¨m_°©us
 
°©us
;

78 #ifde‡
ARM_MATH_MATRIX_CHECK


82 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

85 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

96 
blkC¡
 = 
nCﬁumns
 >> 2u;

99 
px
 = 
pOut
 + 
i
;

103 
blkC¡
 > 0u)

106 *
px
 = *
pIn
++;

109 
px
 +
nRows
;

112 *
px
 = *
pIn
++;

115 
px
 +
nRows
;

118 *
px
 = *
pIn
++;

121 
px
 +
nRows
;

124 *
px
 = *
pIn
++;

127 
px
 +
nRows
;

130 
blkC¡
--;

134 
blkC¡
 = 
nCﬁumns
 % 0x4u;

136 
blkC¡
 > 0u)

139 *
px
 = *
pIn
++;

142 
px
 +
nRows
;

145 
blkC¡
--;

152 
uöt16_t
 
cﬁ
, 
i
 = 0u, 
row
 = 
nRows
;

153 
¨m_°©us
 
°©us
;

156 #ifde‡
ARM_MATH_MATRIX_CHECK


159 if((
pSrc
->
numRows
 !
pD°
->
numCﬁs
) || (pSrc->numCols !=ÖDst->numRows))

162 
°©us
 = 
ARM_MATH_SIZE_MISMATCH
;

173 
px
 = 
pOut
 + 
i
;

176 
cﬁ
 = 
nCﬁumns
;

178 
cﬁ
 > 0u)

181 *
px
 = *
pIn
++;

184 
px
 +
nRows
;

187 
cﬁ
--;

192 
i
++;

195 
row
--;

198 
row
 > 0u);

201 
°©us
 = 
ARM_MATH_SUCCESS
;

205  (
°©us
);

206 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_f32.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_max_f32
(

71 
Êﬂt32_t
 * 
pSrc
,

72 
uöt32_t
 
blockSize
,

73 
Êﬂt32_t
 * 
pResu…
,

74 
uöt32_t
 * 
pIndex
)

76 #i‚de‡
ARM_MATH_CM0_FAMILY


79 
Êﬂt32_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

80 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

83 
cou¡
 = 0u;

85 
outIndex
 = 0u;

87 
out
 = *
pSrc
++;

90 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

93 
blkC¡
 > 0u)

96 
maxVÆ1
 = *
pSrc
++;

98 
maxVÆ2
 = *
pSrc
++;

101 if(
out
 < 
maxVÆ1
)

104 
out
 = 
maxVÆ1
;

105 
outIndex
 = 
cou¡
 + 1u;

108 
maxVÆ1
 = *
pSrc
++;

111 if(
out
 < 
maxVÆ2
)

114 
out
 = 
maxVÆ2
;

115 
outIndex
 = 
cou¡
 + 2u;

118 
maxVÆ2
 = *
pSrc
++;

121 if(
out
 < 
maxVÆ1
)

124 
out
 = 
maxVÆ1
;

125 
outIndex
 = 
cou¡
 + 3u;

129 if(
out
 < 
maxVÆ2
)

132 
out
 = 
maxVÆ2
;

133 
outIndex
 = 
cou¡
 + 4u;

136 
cou¡
 += 4u;

139 
blkC¡
--;

143 
blkC¡
 = (
blockSize
 - 1u) % 4u;

148 
Êﬂt32_t
 
maxVÆ1
, 
out
;

149 
uöt32_t
 
blkC¡
, 
outIndex
;

152 
outIndex
 = 0u;

154 
out
 = *
pSrc
++;

156 
blkC¡
 = (
blockSize
 - 1u);

160 
blkC¡
 > 0u)

163 
maxVÆ1
 = *
pSrc
++;

166 if(
out
 < 
maxVÆ1
)

169 
out
 = 
maxVÆ1
;

170 
outIndex
 = 
blockSize
 - 
blkC¡
;

175 
blkC¡
--;

180 *
pResu…
 = 
out
;

181 *
pIndex
 = 
outIndex
;

182 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q15.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_max_q15
(

63 
q15_t
 * 
pSrc
,

64 
uöt32_t
 
blockSize
,

65 
q15_t
 * 
pResu…
,

66 
uöt32_t
 * 
pIndex
)

68 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
q15_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

72 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

75 
cou¡
 = 0u;

77 
outIndex
 = 0u;

79 
out
 = *
pSrc
++;

82 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

85 
blkC¡
 > 0u)

88 
maxVÆ1
 = *
pSrc
++;

90 
maxVÆ2
 = *
pSrc
++;

93 if(
out
 < 
maxVÆ1
)

96 
out
 = 
maxVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
maxVÆ1
 = *
pSrc
++;

103 if(
out
 < 
maxVÆ2
)

106 
out
 = 
maxVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
maxVÆ2
 = *
pSrc
++;

113 if(
out
 < 
maxVÆ1
)

116 
out
 = 
maxVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 < 
maxVÆ2
)

124 
out
 = 
maxVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q15_t
 
maxVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

143 
blkC¡
 = (
blockSize
 - 1u);

146 
outIndex
 = 0u;

148 
out
 = *
pSrc
++;

152 
blkC¡
 > 0u)

155 
maxVÆ1
 = *
pSrc
++;

158 if(
out
 < 
maxVÆ1
)

161 
out
 = 
maxVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

172 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q31.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_max_q31
(

63 
q31_t
 * 
pSrc
,

64 
uöt32_t
 
blockSize
,

65 
q31_t
 * 
pResu…
,

66 
uöt32_t
 * 
pIndex
)

68 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
q31_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

72 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

75 
cou¡
 = 0u;

77 
outIndex
 = 0u;

79 
out
 = *
pSrc
++;

82 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

85 
blkC¡
 > 0u)

88 
maxVÆ1
 = *
pSrc
++;

90 
maxVÆ2
 = *
pSrc
++;

93 if(
out
 < 
maxVÆ1
)

96 
out
 = 
maxVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
maxVÆ1
 = *
pSrc
++;

103 if(
out
 < 
maxVÆ2
)

106 
out
 = 
maxVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
maxVÆ2
 = *
pSrc
++;

113 if(
out
 < 
maxVÆ1
)

116 
out
 = 
maxVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 < 
maxVÆ2
)

124 
out
 = 
maxVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q31_t
 
maxVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

144 
outIndex
 = 0u;

146 
out
 = *
pSrc
++;

148 
blkC¡
 = (
blockSize
 - 1u);

152 
blkC¡
 > 0u)

155 
maxVÆ1
 = *
pSrc
++;

158 if(
out
 < 
maxVÆ1
)

161 
out
 = 
maxVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

166 
blkC¡
--;

171 *
pResu…
 = 
out
;

172 *
pIndex
 = 
outIndex
;

173 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q7.c

41 
	~"¨m_m©h.h
"

62 
	$¨m_max_q7
(

63 
q7_t
 * 
pSrc
,

64 
uöt32_t
 
blockSize
,

65 
q7_t
 * 
pResu…
,

66 
uöt32_t
 * 
pIndex
)

68 #i‚de‡
ARM_MATH_CM0_FAMILY


71 
q7_t
 
maxVÆ1
, 
maxVÆ2
, 
out
;

72 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

75 
cou¡
 = 0u;

77 
outIndex
 = 0u;

79 
out
 = *
pSrc
++;

82 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

85 
blkC¡
 > 0u)

88 
maxVÆ1
 = *
pSrc
++;

90 
maxVÆ2
 = *
pSrc
++;

93 if(
out
 < 
maxVÆ1
)

96 
out
 = 
maxVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
maxVÆ1
 = *
pSrc
++;

103 if(
out
 < 
maxVÆ2
)

106 
out
 = 
maxVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
maxVÆ2
 = *
pSrc
++;

113 if(
out
 < 
maxVÆ1
)

116 
out
 = 
maxVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 < 
maxVÆ2
)

124 
out
 = 
maxVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q7_t
 
maxVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

144 
outIndex
 = 0u;

146 
out
 = *
pSrc
++;

148 
blkC¡
 = (
blockSize
 - 1u);

152 
blkC¡
 > 0u)

155 
maxVÆ1
 = *
pSrc
++;

158 if(
out
 < 
maxVÆ1
)

161 
out
 = 
maxVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

173 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_f32.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_món_f32
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
uöt32_t
 
blockSize
,

78 
Êﬂt32_t
 * 
pResu…
)

80 
Êﬂt32_t
 
sum
 = 0.0f;

81 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

96 
ö1
 = *
pSrc
++;

97 
ö2
 = *
pSrc
++;

98 
ö3
 = *
pSrc
++;

99 
ö4
 = *
pSrc
++;

101 
sum
 +
ö1
;

102 
sum
 +
ö2
;

103 
sum
 +
ö3
;

104 
sum
 +
ö4
;

107 
blkC¡
--;

112 
blkC¡
 = 
blockSize
 % 0x4u;

119 
blkC¡
 = 
blockSize
;

123 
blkC¡
 > 0u)

126 
sum
 +*
pSrc
++;

129 
blkC¡
--;

134 *
pResu…
 = 
sum
 / (
Êﬂt32_t
Ë
blockSize
;

135 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q15.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_món_q15
(

73 
q15_t
 * 
pSrc
,

74 
uöt32_t
 
blockSize
,

75 
q15_t
 * 
pResu…
)

77 
q31_t
 
sum
 = 0;

78 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

93 
ö
 = *
	`__SIMD32
(
pSrc
)++;

94 
sum
 +((
ö
 << 16) >> 16);

95 
sum
 +(
ö
 >> 16);

96 
ö
 = *
	`__SIMD32
(
pSrc
)++;

97 
sum
 +((
ö
 << 16) >> 16);

98 
sum
 +(
ö
 >> 16);

101 
blkC¡
--;

106 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 = 
blockSize
;

117 
blkC¡
 > 0u)

120 
sum
 +*
pSrc
++;

123 
blkC¡
--;

128 *
pResu…
 = (
q15_t
Ë(
sum
 / (
q31_t
)
blockSize
);

129 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q31.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_món_q31
(

73 
q31_t
 * 
pSrc
,

74 
uöt32_t
 
blockSize
,

75 
q31_t
 * 
pResu…
)

77 
q63_t
 
sum
 = 0;

78 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

93 
ö1
 = *
pSrc
++;

94 
ö2
 = *
pSrc
++;

95 
ö3
 = *
pSrc
++;

96 
ö4
 = *
pSrc
++;

98 
sum
 +
ö1
;

99 
sum
 +
ö2
;

100 
sum
 +
ö3
;

101 
sum
 +
ö4
;

104 
blkC¡
--;

109 
blkC¡
 = 
blockSize
 % 0x4u;

116 
blkC¡
 = 
blockSize
;

120 
blkC¡
 > 0u)

123 
sum
 +*
pSrc
++;

126 
blkC¡
--;

131 *
pResu…
 = (
q31_t
Ë(
sum
 / (
öt32_t
Ë
blockSize
);

132 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q7.c

41 
	~"¨m_m©h.h
"

72 
	$¨m_món_q7
(

73 
q7_t
 * 
pSrc
,

74 
uöt32_t
 
blockSize
,

75 
q7_t
 * 
pResu…
)

77 
q31_t
 
sum
 = 0;

78 
uöt32_t
 
blkC¡
;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


83 
q31_t
 
ö
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

93 
ö
 = *
	`__SIMD32
(
pSrc
)++;

95 
sum
 +((
ö
 << 24) >> 24);

96 
sum
 +((
ö
 << 16) >> 24);

97 
sum
 +((
ö
 << 8) >> 24);

98 
sum
 +(
ö
 >> 24);

101 
blkC¡
--;

106 
blkC¡
 = 
blockSize
 % 0x4u;

113 
blkC¡
 = 
blockSize
;

117 
blkC¡
 > 0u)

120 
sum
 +*
pSrc
++;

123 
blkC¡
--;

128 *
pResu…
 = (
q7_t
Ë(
sum
 / (
öt32_t
Ë
blockSize
);

129 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_f32.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_mö_f32
(

72 
Êﬂt32_t
 * 
pSrc
,

73 
uöt32_t
 
blockSize
,

74 
Êﬂt32_t
 * 
pResu…
,

75 
uöt32_t
 * 
pIndex
)

77 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
Êﬂt32_t
 
möVÆ1
, 
möVÆ2
, 
out
;

82 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

85 
cou¡
 = 0u;

87 
outIndex
 = 0u;

89 
out
 = *
pSrc
++;

92 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

94 
blkC¡
 > 0)

97 
möVÆ1
 = *
pSrc
++;

98 
möVÆ2
 = *
pSrc
++;

101 if(
out
 > 
möVÆ1
)

104 
out
 = 
möVÆ1
;

105 
outIndex
 = 
cou¡
 + 1u;

108 
möVÆ1
 = *
pSrc
++;

111 if(
out
 > 
möVÆ2
)

114 
out
 = 
möVÆ2
;

115 
outIndex
 = 
cou¡
 + 2u;

118 
möVÆ2
 = *
pSrc
++;

121 if(
out
 > 
möVÆ1
)

124 
out
 = 
möVÆ1
;

125 
outIndex
 = 
cou¡
 + 3u;

129 if(
out
 > 
möVÆ2
)

132 
out
 = 
möVÆ2
;

133 
outIndex
 = 
cou¡
 + 4u;

136 
cou¡
 += 4u;

138 
blkC¡
--;

142 
blkC¡
 = (
blockSize
 - 1u) % 4u;

147 
Êﬂt32_t
 
möVÆ1
, 
out
;

148 
uöt32_t
 
blkC¡
, 
outIndex
;

151 
outIndex
 = 0u;

153 
out
 = *
pSrc
++;

155 
blkC¡
 = (
blockSize
 - 1u);

159 
blkC¡
 > 0)

162 
möVÆ1
 = *
pSrc
++;

165 if(
out
 > 
möVÆ1
)

168 
out
 = 
möVÆ1
;

169 
outIndex
 = 
blockSize
 - 
blkC¡
;

172 
blkC¡
--;

177 *
pResu…
 = 
out
;

178 *
pIndex
 = 
outIndex
;

179 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q15.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_mö_q15
(

65 
q15_t
 * 
pSrc
,

66 
uöt32_t
 
blockSize
,

67 
q15_t
 * 
pResu…
,

68 
uöt32_t
 * 
pIndex
)

70 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
q15_t
 
möVÆ1
, 
möVÆ2
, 
out
;

74 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

77 
cou¡
 = 0u;

79 
outIndex
 = 0u;

81 
out
 = *
pSrc
++;

84 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

86 
blkC¡
 > 0)

89 
möVÆ1
 = *
pSrc
++;

90 
möVÆ2
 = *
pSrc
++;

93 if(
out
 > 
möVÆ1
)

96 
out
 = 
möVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
möVÆ1
 = *
pSrc
++;

103 if(
out
 > 
möVÆ2
)

106 
out
 = 
möVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
möVÆ2
 = *
pSrc
++;

113 if(
out
 > 
möVÆ1
)

116 
out
 = 
möVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 > 
möVÆ2
)

124 
out
 = 
möVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

130 
blkC¡
--;

134 
blkC¡
 = (
blockSize
 - 1u) % 4u;

139 
q15_t
 
möVÆ1
, 
out
;

140 
uöt32_t
 
blkC¡
, 
outIndex
;

142 
blkC¡
 = (
blockSize
 - 1u);

145 
outIndex
 = 0u;

147 
out
 = *
pSrc
++;

151 
blkC¡
 > 0)

154 
möVÆ1
 = *
pSrc
++;

157 if(
out
 > 
möVÆ1
)

160 
out
 = 
möVÆ1
;

161 
outIndex
 = 
blockSize
 - 
blkC¡
;

164 
blkC¡
--;

171 *
pResu…
 = 
out
;

172 *
pIndex
 = 
outIndex
;

173 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q31.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_mö_q31
(

65 
q31_t
 * 
pSrc
,

66 
uöt32_t
 
blockSize
,

67 
q31_t
 * 
pResu…
,

68 
uöt32_t
 * 
pIndex
)

70 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
q31_t
 
möVÆ1
, 
möVÆ2
, 
out
;

74 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

77 
cou¡
 = 0u;

79 
outIndex
 = 0u;

81 
out
 = *
pSrc
++;

85 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

87 
blkC¡
 > 0)

90 
möVÆ1
 = *
pSrc
++;

91 
möVÆ2
 = *
pSrc
++;

94 if(
out
 > 
möVÆ1
)

97 
out
 = 
möVÆ1
;

98 
outIndex
 = 
cou¡
 + 1u;

101 
möVÆ1
 = *
pSrc
++;

104 if(
out
 > 
möVÆ2
)

107 
out
 = 
möVÆ2
;

108 
outIndex
 = 
cou¡
 + 2u;

111 
möVÆ2
 = *
pSrc
++;

114 if(
out
 > 
möVÆ1
)

117 
out
 = 
möVÆ1
;

118 
outIndex
 = 
cou¡
 + 3u;

122 if(
out
 > 
möVÆ2
)

125 
out
 = 
möVÆ2
;

126 
outIndex
 = 
cou¡
 + 4u;

129 
cou¡
 += 4u;

131 
blkC¡
--;

135 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q31_t
 
möVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

143 
blkC¡
 = (
blockSize
 - 1u);

146 
outIndex
 = 0u;

148 
out
 = *
pSrc
++;

152 
blkC¡
 > 0)

155 
möVÆ1
 = *
pSrc
++;

158 if(
out
 > 
möVÆ1
)

161 
out
 = 
möVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

172 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q7.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_mö_q7
(

64 
q7_t
 * 
pSrc
,

65 
uöt32_t
 
blockSize
,

66 
q7_t
 * 
pResu…
,

67 
uöt32_t
 * 
pIndex
)

69 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
q7_t
 
möVÆ1
, 
möVÆ2
, 
out
;

74 
uöt32_t
 
blkC¡
, 
outIndex
, 
cou¡
;

77 
cou¡
 = 0u;

79 
outIndex
 = 0u;

81 
out
 = *
pSrc
++;

84 
blkC¡
 = (
blockSize
 - 1u) >> 2u;

86 
blkC¡
 > 0)

89 
möVÆ1
 = *
pSrc
++;

90 
möVÆ2
 = *
pSrc
++;

93 if(
out
 > 
möVÆ1
)

96 
out
 = 
möVÆ1
;

97 
outIndex
 = 
cou¡
 + 1u;

100 
möVÆ1
 = *
pSrc
++;

103 if(
out
 > 
möVÆ2
)

106 
out
 = 
möVÆ2
;

107 
outIndex
 = 
cou¡
 + 2u;

110 
möVÆ2
 = *
pSrc
++;

113 if(
out
 > 
möVÆ1
)

116 
out
 = 
möVÆ1
;

117 
outIndex
 = 
cou¡
 + 3u;

121 if(
out
 > 
möVÆ2
)

124 
out
 = 
möVÆ2
;

125 
outIndex
 = 
cou¡
 + 4u;

128 
cou¡
 += 4u;

130 
blkC¡
--;

134 
blkC¡
 = (
blockSize
 - 1u) % 4u;

140 
q7_t
 
möVÆ1
, 
out
;

141 
uöt32_t
 
blkC¡
, 
outIndex
;

144 
outIndex
 = 0u;

146 
out
 = *
pSrc
++;

148 
blkC¡
 = (
blockSize
 - 1u);

152 
blkC¡
 > 0)

155 
möVÆ1
 = *
pSrc
++;

158 if(
out
 > 
möVÆ1
)

161 
out
 = 
möVÆ1
;

162 
outIndex
 = 
blockSize
 - 
blkC¡
;

165 
blkC¡
--;

170 *
pResu…
 = 
out
;

171 *
pIndex
 = 
outIndex
;

174 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_f32.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_powî_f32
(

77 
Êﬂt32_t
 * 
pSrc
,

78 
uöt32_t
 
blockSize
,

79 
Êﬂt32_t
 * 
pResu…
)

81 
Êﬂt32_t
 
sum
 = 0.0f;

82 
Êﬂt32_t
 
ö
;

83 
uöt32_t
 
blkC¡
;

85 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 
ö
 = *
pSrc
++;

99 
sum
 +
ö
 * in;

100 
ö
 = *
pSrc
++;

101 
sum
 +
ö
 * in;

102 
ö
 = *
pSrc
++;

103 
sum
 +
ö
 * in;

104 
ö
 = *
pSrc
++;

105 
sum
 +
ö
 * in;

108 
blkC¡
--;

113 
blkC¡
 = 
blockSize
 % 0x4u;

121 
blkC¡
 = 
blockSize
;

126 
blkC¡
 > 0u)

130 
ö
 = *
pSrc
++;

131 
sum
 +
ö
 * in;

134 
blkC¡
--;

138 *
pResu…
 = 
sum
;

139 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_powî_q15
(

74 
q15_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q63_t
 * 
pResu…
)

78 
q63_t
 
sum
 = 0;

80 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
q31_t
 
ö32
;

85 
q15_t
 
ö16
;

86 
uöt32_t
 
blkC¡
;

90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 
ö32
 = *
	`__SIMD32
(
pSrc
)++;

99 
sum
 = 
	`__SMLALD
(
ö32
, in32, sum);

100 
ö32
 = *
	`__SIMD32
(
pSrc
)++;

101 
sum
 = 
	`__SMLALD
(
ö32
, in32, sum);

104 
blkC¡
--;

109 
blkC¡
 = 
blockSize
 % 0x4u;

111 
blkC¡
 > 0u)

115 
ö16
 = *
pSrc
++;

116 
sum
 = 
	`__SMLALD
(
ö16
, in16, sum);

119 
blkC¡
--;

126 
q15_t
 
ö
;

127 
uöt32_t
 
blkC¡
;

131 
blkC¡
 = 
blockSize
;

133 
blkC¡
 > 0u)

137 
ö
 = *
pSrc
++;

138 
sum
 +((
q31_t
Ë
ö
 * in);

141 
blkC¡
--;

147 *
pResu…
 = 
sum
;

148 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q31.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_powî_q31
(

75 
q31_t
 * 
pSrc
,

76 
uöt32_t
 
blockSize
,

77 
q63_t
 * 
pResu…
)

79 
q63_t
 
sum
 = 0;

80 
q31_t
 
ö
;

81 
uöt32_t
 
blkC¡
;

84 #i‚de‡
ARM_MATH_CM0_FAMILY


89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

97 
ö
 = *
pSrc
++;

98 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

100 
ö
 = *
pSrc
++;

101 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

103 
ö
 = *
pSrc
++;

104 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

106 
ö
 = *
pSrc
++;

107 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

110 
blkC¡
--;

115 
blkC¡
 = 
blockSize
 % 0x4u;

122 
blkC¡
 = 
blockSize
;

126 
blkC¡
 > 0u)

130 
ö
 = *
pSrc
++;

131 
sum
 +((
q63_t
Ë
ö
 * in) >> 14u;

134 
blkC¡
--;

138 *
pResu…
 = 
sum
;

139 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q7.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_powî_q7
(

74 
q7_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q31_t
 * 
pResu…
)

78 
q31_t
 
sum
 = 0;

79 
q7_t
 
ö
;

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
q31_t
 
öput1
;

87 
q31_t
 
ö1
, 
ö2
;

90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

97 
öput1
 = *
	`__SIMD32
(
pSrc
)++;

99 
ö1
 = 
	`__SXTB16
(
	`__ROR
(
öput1
, 8));

100 
ö2
 = 
	`__SXTB16
(
öput1
);

104 
sum
 = 
	`__SMLAD
(
ö1
, in1, sum);

105 
sum
 = 
	`__SMLAD
(
ö2
, in2, sum);

108 
blkC¡
--;

113 
blkC¡
 = 
blockSize
 % 0x4u;

120 
blkC¡
 = 
blockSize
;

124 
blkC¡
 > 0u)

128 
ö
 = *
pSrc
++;

129 
sum
 +((
q15_t
Ë
ö
 * in);

132 
blkC¡
--;

136 *
pResu…
 = 
sum
;

137 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_f32.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_rms_f32
(

77 
Êﬂt32_t
 * 
pSrc
,

78 
uöt32_t
 
blockSize
,

79 
Êﬂt32_t
 * 
pResu…
)

81 
Êﬂt32_t
 
sum
 = 0.0f;

82 
Êﬂt32_t
 
ö
;

83 
uöt32_t
 
blkC¡
;

85 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 
ö
 = *
pSrc
++;

99 
sum
 +
ö
 * in;

100 
ö
 = *
pSrc
++;

101 
sum
 +
ö
 * in;

102 
ö
 = *
pSrc
++;

103 
sum
 +
ö
 * in;

104 
ö
 = *
pSrc
++;

105 
sum
 +
ö
 * in;

108 
blkC¡
--;

113 
blkC¡
 = 
blockSize
 % 0x4u;

120 
blkC¡
 = 
blockSize
;

124 
blkC¡
 > 0u)

128 
ö
 = *
pSrc
++;

129 
sum
 +
ö
 * in;

132 
blkC¡
--;

136 
	`¨m_sqπ_f32
(
sum
 / (
Êﬂt32_t
Ë
blockSize
, 
pResu…
);

137 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q15.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_rms_q15
(

71 
q15_t
 * 
pSrc
,

72 
uöt32_t
 
blockSize
,

73 
q15_t
 * 
pResu…
)

75 
q63_t
 
sum
 = 0;

77 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö
;

82 
q15_t
 
ö1
;

83 
uöt32_t
 
blkC¡
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

94 
ö
 = *
	`__SIMD32
(
pSrc
)++;

95 
sum
 = 
	`__SMLALD
(
ö
, in, sum);

96 
ö
 = *
	`__SIMD32
(
pSrc
)++;

97 
sum
 = 
	`__SMLALD
(
ö
, in, sum);

100 
blkC¡
--;

105 
blkC¡
 = 
blockSize
 % 0x4u;

107 
blkC¡
 > 0u)

111 
ö1
 = *
pSrc
++;

112 
sum
 = 
	`__SMLALD
(
ö1
, in1, sum);

115 
blkC¡
--;

120 
	`¨m_sqπ_q15
(
	`__SSAT
((
sum
 / (
q63_t
)
blockSize
Ë>> 15, 16), 
pResu…
);

126 
q15_t
 
ö
;

127 
uöt32_t
 
blkC¡
;

130 
blkC¡
 = 
blockSize
;

132 
blkC¡
 > 0u)

136 
ö
 = *
pSrc
++;

137 
sum
 +((
q31_t
Ë
ö
 * in);

140 
blkC¡
--;

145 
	`¨m_sqπ_q15
(
	`__SSAT
((
sum
 / (
q63_t
)
blockSize
Ë>> 15, 16), 
pResu…
);

149 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q31.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_rms_q31
(

74 
q31_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q31_t
 * 
pResu…
)

78 
q63_t
 
sum
 = 0;

79 
q31_t
 
ö
;

80 
uöt32_t
 
blkC¡
;

82 #i‚de‡
ARM_MATH_CM0_FAMILY


86 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

98 
ö1
 = 
pSrc
[0];

99 
ö2
 = 
pSrc
[1];

102 
sum
 +(
q63_t
Ë
ö1
 *in1;

103 
sum
 +(
q63_t
Ë
ö2
 *in2;

106 
ö3
 = 
pSrc
[2];

107 
ö4
 = 
pSrc
[3];

110 
sum
 +(
q63_t
Ë
ö3
 *in3;

111 
sum
 +(
q63_t
Ë
ö4
 *in4;

115 
pSrc
 += 4u;

118 
blkC¡
--;

123 
blkC¡
 = 
blockSize
 % 0x4u;

128 
blkC¡
 = 
blockSize
;

132 
blkC¡
 > 0u)

136 
ö
 = *
pSrc
++;

137 
sum
 +(
q63_t
Ë
ö
 *in;

140 
blkC¡
--;

145 
	`¨m_sqπ_q31
(
	`˛ù_q63_to_q31
((
sum
 / (
q63_t
Ë
blockSize
Ë>> 31), 
pResu…
);

146 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_f32.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_°d_f32
(

81 
Êﬂt32_t
 * 
pSrc
,

82 
uöt32_t
 
blockSize
,

83 
Êﬂt32_t
 * 
pResu…
)

85 
Êﬂt32_t
 
sum
 = 0.0f;

86 
Êﬂt32_t
 
sumOfSqu¨es
 = 0.0f;

87 
Êﬂt32_t
 
ö
;

88 
uöt32_t
 
blkC¡
;

90 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
Êﬂt32_t
 
mónOfSqu¨es
, 
món
, 
squ¨eOfMón
;

96 if(
blockSize
 == 1)

98 *
pResu…
 = 0;

103 
blkC¡
 = 
blockSize
 >> 2u;

107 
blkC¡
 > 0u)

112 
ö
 = *
pSrc
++;

113 
sum
 +
ö
;

114 
sumOfSqu¨es
 +
ö
 * in;

115 
ö
 = *
pSrc
++;

116 
sum
 +
ö
;

117 
sumOfSqu¨es
 +
ö
 * in;

118 
ö
 = *
pSrc
++;

119 
sum
 +
ö
;

120 
sumOfSqu¨es
 +
ö
 * in;

121 
ö
 = *
pSrc
++;

122 
sum
 +
ö
;

123 
sumOfSqu¨es
 +
ö
 * in;

126 
blkC¡
--;

131 
blkC¡
 = 
blockSize
 % 0x4u;

133 
blkC¡
 > 0u)

138 
ö
 = *
pSrc
++;

139 
sum
 +
ö
;

140 
sumOfSqu¨es
 +
ö
 * in;

143 
blkC¡
--;

148 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / ((
Êﬂt32_t
Ë
blockSize
 - 1.0f);

151 
món
 = 
sum
 / (
Êﬂt32_t
Ë
blockSize
;

154 
squ¨eOfMón
 = (
món
 * mónË* (((
Êﬂt32_t
Ë
blockSize
) /

155 ((
Êﬂt32_t
Ë
blockSize
 - 1.0f));

158 
	`¨m_sqπ_f32
((
mónOfSqu¨es
 - 
squ¨eOfMón
), 
pResu…
);

164 
Êﬂt32_t
 
squ¨eOfSum
;

165 
Êﬂt32_t
 
v¨
;

167 if(
blockSize
 == 1)

169 *
pResu…
 = 0;

174 
blkC¡
 = 
blockSize
;

176 
blkC¡
 > 0u)

181 
ö
 = *
pSrc
++;

182 
sumOfSqu¨es
 +
ö
 * in;

187 
sum
 +
ö
;

190 
blkC¡
--;

194 
squ¨eOfSum
 = ((
sum
 * sumË/ (
Êﬂt32_t
Ë
blockSize
);

197 
v¨
 = ((
sumOfSqu¨es
 - 
squ¨eOfSum
Ë/ (
Êﬂt32_t
Ë(
blockSize
 - 1.0f));

200 
	`¨m_sqπ_f32
(
v¨
, 
pResu…
);

204 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_°d_q15
(

74 
q15_t
 * 
pSrc
,

75 
uöt32_t
 
blockSize
,

76 
q15_t
 * 
pResu…
)

78 
q31_t
 
sum
 = 0;

79 
q31_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

80 
uöt32_t
 
blkC¡
;

81 
q63_t
 
sumOfSqu¨es
 = 0;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


87 
q31_t
 
ö
;

88 
q15_t
 
ö1
;

90 if(
blockSize
 == 1)

92 *
pResu…
 = 0;

97 
blkC¡
 = 
blockSize
 >> 2u;

101 
blkC¡
 > 0u)

106 
ö
 = *
	`__SIMD32
(
pSrc
)++;

107 
sum
 +((
ö
 << 16) >> 16);

108 
sum
 +(
ö
 >> 16);

109 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

110 
ö
 = *
	`__SIMD32
(
pSrc
)++;

111 
sum
 +((
ö
 << 16) >> 16);

112 
sum
 +(
ö
 >> 16);

113 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

116 
blkC¡
--;

121 
blkC¡
 = 
blockSize
 % 0x4u;

123 
blkC¡
 > 0u)

128 
ö1
 = *
pSrc
++;

129 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö1
, in1, sumOfSquares);

130 
sum
 +
ö1
;

133 
blkC¡
--;

138 
mónOfSqu¨es
 = (
q31_t
)(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

141 
squ¨eOfMón
 = (
q31_t
Ë((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

145 
	`¨m_sqπ_q15
(
	`__SSAT
((
mónOfSqu¨es
 - 
squ¨eOfMón
Ë>> 15, 16u), 
pResu…
);

150 
q15_t
 
ö
;

152 if(
blockSize
 == 1)

154 *
pResu…
 = 0;

159 
blkC¡
 = 
blockSize
;

161 
blkC¡
 > 0u)

166 
ö
 = *
pSrc
++;

167 
sumOfSqu¨es
 +(
ö
 * in);

171 
sum
 +
ö
;

174 
blkC¡
--;

179 
mónOfSqu¨es
 = (
q31_t
)(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

182 
squ¨eOfMón
 = (
q31_t
Ë((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

186 
	`¨m_sqπ_q15
(
	`__SSAT
((
mónOfSqu¨es
 - 
squ¨eOfMón
Ë>> 15, 16u), 
pResu…
);

191 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_°d_q31
(

79 
q31_t
 * 
pSrc
,

80 
uöt32_t
 
blockSize
,

81 
q31_t
 * 
pResu…
)

83 
q63_t
 
sum
 = 0;

84 
q63_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

85 
q31_t
 
ö
;

86 
uöt32_t
 
blkC¡
;

87 
q63_t
 
sumOfSqu¨es
 = 0;

89 if(
blockSize
 == 1)

91 *
pResu…
 = 0;

95 #i‚de‡
ARM_MATH_CM0_FAMILY


100 
blkC¡
 = 
blockSize
 >> 2u;

104 
blkC¡
 > 0u)

109 
ö
 = *
pSrc
++ >> 8;

110 
sum
 +
ö
;

111 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

112 
ö
 = *
pSrc
++ >> 8;

113 
sum
 +
ö
;

114 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

115 
ö
 = *
pSrc
++ >> 8;

116 
sum
 +
ö
;

117 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

118 
ö
 = *
pSrc
++ >> 8;

119 
sum
 +
ö
;

120 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

123 
blkC¡
--;

128 
blkC¡
 = 
blockSize
 % 0x4u;

130 
blkC¡
 > 0u)

135 
ö
 = *
pSrc
++ >> 8;

136 
sum
 +
ö
;

137 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

140 
blkC¡
--;

145 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

152 
blkC¡
 = 
blockSize
;

154 
blkC¡
 > 0u)

159 
ö
 = *
pSrc
++ >> 8;

160 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

164 
sum
 +
ö
;

167 
blkC¡
--;

172 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

177 
squ¨eOfMón
 = 
sum
 * sum / (
q63_t
)(
blockSize
 * (blockSize - 1u));

180 
	`¨m_sqπ_q31
((
mónOfSqu¨es
 - 
squ¨eOfMón
Ë>> 15, 
pResu…
);

182 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_f32.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_v¨_f32
(

81 
Êﬂt32_t
 * 
pSrc
,

82 
uöt32_t
 
blockSize
,

83 
Êﬂt32_t
 * 
pResu…
)

86 
Êﬂt32_t
 
sum
 = 0.0f;

87 
Êﬂt32_t
 
sumOfSqu¨es
 = 0.0f;

88 
Êﬂt32_t
 
ö
;

89 
uöt32_t
 
blkC¡
;

91 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
Êﬂt32_t
 
mónOfSqu¨es
, 
món
, 
squ¨eOfMón
;

97 if(
blockSize
 == 1)

99 *
pResu…
 = 0;

104 
blkC¡
 = 
blockSize
 >> 2u;

108 
blkC¡
 > 0u)

113 
ö
 = *
pSrc
++;

114 
sum
 +
ö
;

115 
sumOfSqu¨es
 +
ö
 * in;

116 
ö
 = *
pSrc
++;

117 
sum
 +
ö
;

118 
sumOfSqu¨es
 +
ö
 * in;

119 
ö
 = *
pSrc
++;

120 
sum
 +
ö
;

121 
sumOfSqu¨es
 +
ö
 * in;

122 
ö
 = *
pSrc
++;

123 
sum
 +
ö
;

124 
sumOfSqu¨es
 +
ö
 * in;

127 
blkC¡
--;

132 
blkC¡
 = 
blockSize
 % 0x4u;

134 
blkC¡
 > 0u)

139 
ö
 = *
pSrc
++;

140 
sum
 +
ö
;

141 
sumOfSqu¨es
 +
ö
 * in;

144 
blkC¡
--;

149 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / ((
Êﬂt32_t
Ë
blockSize
 - 1.0f);

152 
món
 = 
sum
 / (
Êﬂt32_t
Ë
blockSize
;

155 
squ¨eOfMón
 = (
món
 * mónË* (((
Êﬂt32_t
Ë
blockSize
) /

156 ((
Êﬂt32_t
Ë
blockSize
 - 1.0f));

159 *
pResu…
 = 
mónOfSqu¨es
 - 
squ¨eOfMón
;

164 
Êﬂt32_t
 
squ¨eOfSum
;

166 if(
blockSize
 == 1)

168 *
pResu…
 = 0;

173 
blkC¡
 = 
blockSize
;

175 
blkC¡
 > 0u)

180 
ö
 = *
pSrc
++;

181 
sumOfSqu¨es
 +
ö
 * in;

186 
sum
 +
ö
;

189 
blkC¡
--;

193 
squ¨eOfSum
 = ((
sum
 * sumË/ (
Êﬂt32_t
Ë
blockSize
);

196 *
pResu…
 = ((
sumOfSqu¨es
 - 
squ¨eOfSum
Ë/ (
Êﬂt32_t
Ë(
blockSize
 - 1.0f));

200 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q15.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_v¨_q15
(

76 
q15_t
 * 
pSrc
,

77 
uöt32_t
 
blockSize
,

78 
q15_t
 * 
pResu…
)

81 
q31_t
 
sum
 = 0;

82 
q31_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

83 
uöt32_t
 
blkC¡
;

84 
q63_t
 
sumOfSqu¨es
 = 0;

86 #i‚de‡
ARM_MATH_CM0_FAMILY


90 
q31_t
 
ö
;

91 
q15_t
 
ö1
;

93 if(
blockSize
 == 1)

95 *
pResu…
 = 0;

100 
blkC¡
 = 
blockSize
 >> 2u;

104 
blkC¡
 > 0u)

109 
ö
 = *
	`__SIMD32
(
pSrc
)++;

110 
sum
 +((
ö
 << 16) >> 16);

111 
sum
 +(
ö
 >> 16);

112 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

113 
ö
 = *
	`__SIMD32
(
pSrc
)++;

114 
sum
 +((
ö
 << 16) >> 16);

115 
sum
 +(
ö
 >> 16);

116 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö
, in, sumOfSquares);

119 
blkC¡
--;

124 
blkC¡
 = 
blockSize
 % 0x4u;

126 
blkC¡
 > 0u)

131 
ö1
 = *
pSrc
++;

132 
sumOfSqu¨es
 = 
	`__SMLALD
(
ö1
, in1, sumOfSquares);

133 
sum
 +
ö1
;

136 
blkC¡
--;

141 
mónOfSqu¨es
 = (
q31_t
Ë(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

144 
squ¨eOfMón
 = (
q31_t
)((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

147 *
pResu…
 = (
mónOfSqu¨es
 - 
squ¨eOfMón
) >> 15;

152 
q15_t
 
ö
;

154 if(
blockSize
 == 1)

156 *
pResu…
 = 0;

161 
blkC¡
 = 
blockSize
;

163 
blkC¡
 > 0u)

168 
ö
 = *
pSrc
++;

169 
sumOfSqu¨es
 +(
ö
 * in);

173 
sum
 +
ö
;

176 
blkC¡
--;

181 
mónOfSqu¨es
 = (
q31_t
Ë(
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1));

184 
squ¨eOfMón
 = (
q31_t
)((
q63_t
)
sum
 * sum / (q63_t)(
blockSize
 * (blockSize - 1)));

187 *
pResu…
 = (
mónOfSqu¨es
 - 
squ¨eOfMón
) >> 15;

191 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q31.c

41 
	~"¨m_m©h.h
"

78 
	$¨m_v¨_q31
(

79 
q31_t
 * 
pSrc
,

80 
uöt32_t
 
blockSize
,

81 
q31_t
 * 
pResu…
)

83 
q63_t
 
sum
 = 0;

84 
q63_t
 
mónOfSqu¨es
, 
squ¨eOfMón
;

85 
q31_t
 
ö
;

86 
uöt32_t
 
blkC¡
;

87 
q63_t
 
sumOfSqu¨es
 = 0;

89 if(
blockSize
 == 1)

91 *
pResu…
 = 0;

95 #i‚de‡
ARM_MATH_CM0_FAMILY


100 
blkC¡
 = 
blockSize
 >> 2u;

104 
blkC¡
 > 0u)

109 
ö
 = *
pSrc
++ >> 8;

110 
sum
 +
ö
;

111 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

112 
ö
 = *
pSrc
++ >> 8;

113 
sum
 +
ö
;

114 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

115 
ö
 = *
pSrc
++ >> 8;

116 
sum
 +
ö
;

117 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

118 
ö
 = *
pSrc
++ >> 8;

119 
sum
 +
ö
;

120 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

123 
blkC¡
--;

128 
blkC¡
 = 
blockSize
 % 0x4u;

130 
blkC¡
 > 0u)

135 
ö
 = *
pSrc
++ >> 8;

136 
sum
 +
ö
;

137 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

140 
blkC¡
--;

145 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

152 
blkC¡
 = 
blockSize
;

154 
blkC¡
 > 0u)

159 
ö
 = *
pSrc
++ >> 8;

160 
sumOfSqu¨es
 +((
q63_t
Ë(
ö
) * (in));

164 
sum
 +
ö
;

167 
blkC¡
--;

172 
mónOfSqu¨es
 = 
sumOfSqu¨es
 / (
q63_t
)(
blockSize
 - 1);

177 
squ¨eOfMón
 = 
sum
 * sum / (
q63_t
)(
blockSize
 * (blockSize - 1u));

181 *
pResu…
 = (
mónOfSqu¨es
 - 
squ¨eOfMón
) >> 15;

183 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_c›y_f32
(

75 
Êﬂt32_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

87 
blkC¡
 = 
blockSize
 >> 2u;

91 
blkC¡
 > 0u)

95 
ö1
 = *
pSrc
++;

96 
ö2
 = *
pSrc
++;

97 
ö3
 = *
pSrc
++;

98 
ö4
 = *
pSrc
++;

100 *
pD°
++ = 
ö1
;

101 *
pD°
++ = 
ö2
;

102 *
pD°
++ = 
ö3
;

103 *
pD°
++ = 
ö4
;

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

118 
blkC¡
 = 
blockSize
;

122 
blkC¡
 > 0u)

126 *
pD°
++ = *
pSrc
++;

129 
blkC¡
--;

131 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q15.c

41 
	~"¨m_m©h.h
"

60 
	$¨m_c›y_q15
(

61 
q15_t
 * 
pSrc
,

62 
q15_t
 * 
pD°
,

63 
uöt32_t
 
blockSize
)

65 
uöt32_t
 
blkC¡
;

67 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
blkC¡
 = 
blockSize
 >> 2u;

76 
blkC¡
 > 0u)

80 *
	`__SIMD32
(
pD°
)++ = *__SIMD32(
pSrc
)++;

81 *
	`__SIMD32
(
pD°
)++ = *__SIMD32(
pSrc
)++;

84 
blkC¡
--;

89 
blkC¡
 = 
blockSize
 % 0x4u;

97 
blkC¡
 = 
blockSize
;

101 
blkC¡
 > 0u)

105 *
pD°
++ = *
pSrc
++;

108 
blkC¡
--;

110 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_c›y_q31
(

62 
q31_t
 * 
pSrc
,

63 
q31_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

69 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

75 
blkC¡
 = 
blockSize
 >> 2u;

79 
blkC¡
 > 0u)

83 
ö1
 = *
pSrc
++;

84 
ö2
 = *
pSrc
++;

85 
ö3
 = *
pSrc
++;

86 
ö4
 = *
pSrc
++;

88 *
pD°
++ = 
ö1
;

89 *
pD°
++ = 
ö2
;

90 *
pD°
++ = 
ö3
;

91 *
pD°
++ = 
ö4
;

94 
blkC¡
--;

99 
blkC¡
 = 
blockSize
 % 0x4u;

106 
blkC¡
 = 
blockSize
;

110 
blkC¡
 > 0u)

114 *
pD°
++ = *
pSrc
++;

117 
blkC¡
--;

119 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q7.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_c›y_q7
(

62 
q7_t
 * 
pSrc
,

63 
q7_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

68 #i‚de‡
ARM_MATH_CM0_FAMILY


73 
blkC¡
 = 
blockSize
 >> 2u;

77 
blkC¡
 > 0u)

82 *
	`__SIMD32
(
pD°
)++ = *__SIMD32(
pSrc
)++;

85 
blkC¡
--;

90 
blkC¡
 = 
blockSize
 % 0x4u;

97 
blkC¡
 = 
blockSize
;

102 
blkC¡
 > 0u)

106 *
pD°
++ = *
pSrc
++;

109 
blkC¡
--;

111 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_f32.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_fûl_f32
(

75 
Êﬂt32_t
 
vÆue
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


84 
Êﬂt32_t
 
ö1
 = 
vÆue
;

85 
Êﬂt32_t
 
ö2
 = 
vÆue
;

86 
Êﬂt32_t
 
ö3
 = 
vÆue
;

87 
Êﬂt32_t
 
ö4
 = 
vÆue
;

90 
blkC¡
 = 
blockSize
 >> 2u;

94 
blkC¡
 > 0u)

98 *
pD°
++ = 
ö1
;

99 *
pD°
++ = 
ö2
;

100 *
pD°
++ = 
ö3
;

101 *
pD°
++ = 
ö4
;

104 
blkC¡
--;

109 
blkC¡
 = 
blockSize
 % 0x4u;

116 
blkC¡
 = 
blockSize
;

121 
blkC¡
 > 0u)

125 *
pD°
++ = 
vÆue
;

128 
blkC¡
--;

130 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q15.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fûl_q15
(

62 
q15_t
 
vÆue
,

63 
q15_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

68 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
∑ckedVÆue
;

76 
blkC¡
 = 
blockSize
 >> 2u;

79 
∑ckedVÆue
 = 
	`__PKHBT
(
vÆue
, value, 16u);

83 
blkC¡
 > 0u)

87 *
	`__SIMD32
(
pD°
)++ = 
∑ckedVÆue
;

88 *
	`__SIMD32
(
pD°
)++ = 
∑ckedVÆue
;

91 
blkC¡
--;

96 
blkC¡
 = 
blockSize
 % 0x4u;

103 
blkC¡
 = 
blockSize
;

107 
blkC¡
 > 0u)

111 *
pD°
++ = 
vÆue
;

114 
blkC¡
--;

116 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q31.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fûl_q31
(

62 
q31_t
 
vÆue
,

63 
q31_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

69 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
ö1
 = 
vÆue
;

73 
q31_t
 
ö2
 = 
vÆue
;

74 
q31_t
 
ö3
 = 
vÆue
;

75 
q31_t
 
ö4
 = 
vÆue
;

78 
blkC¡
 = 
blockSize
 >> 2u;

82 
blkC¡
 > 0u)

86 *
pD°
++ = 
ö1
;

87 *
pD°
++ = 
ö2
;

88 *
pD°
++ = 
ö3
;

89 *
pD°
++ = 
ö4
;

92 
blkC¡
--;

97 
blkC¡
 = 
blockSize
 % 0x4u;

104 
blkC¡
 = 
blockSize
;

108 
blkC¡
 > 0u)

112 *
pD°
++ = 
vÆue
;

115 
blkC¡
--;

117 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q7.c

41 
	~"¨m_m©h.h
"

61 
	$¨m_fûl_q7
(

62 
q7_t
 
vÆue
,

63 
q7_t
 * 
pD°
,

64 
uöt32_t
 
blockSize
)

66 
uöt32_t
 
blkC¡
;

68 #i‚de‡
ARM_MATH_CM0_FAMILY


72 
q31_t
 
∑ckedVÆue
;

75 
blkC¡
 = 
blockSize
 >> 2u;

78 
∑ckedVÆue
 = 
	`__PACKq7
(
vÆue
, value, value, value);

82 
blkC¡
 > 0u)

86 *
	`__SIMD32
(
pD°
)++ = 
∑ckedVÆue
;

89 
blkC¡
--;

94 
blkC¡
 = 
blockSize
 % 0x4u;

101 
blkC¡
 = 
blockSize
;

105 
blkC¡
 > 0u)

109 *
pD°
++ = 
vÆue
;

112 
blkC¡
--;

114 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q15.c

41 
	~"¨m_m©h.h
"

76 
	$¨m_Êﬂt_to_q15
(

77 
Êﬂt32_t
 * 
pSrc
,

78 
q15_t
 * 
pD°
,

79 
uöt32_t
 
blockSize
)

81 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

82 
uöt32_t
 
blkC¡
;

84 #ifde‡
ARM_MATH_ROUNDING


86 
Êﬂt32_t
 
ö
;

90 #i‚de‡
ARM_MATH_CM0_FAMILY


95 
blkC¡
 = 
blockSize
 >> 2u;

99 
blkC¡
 > 0u)

102 #ifde‡
ARM_MATH_ROUNDING


105 
ö
 = *
pIn
++;

106 
ö
 = (in * 32768.0f);

107 
ö
 += in > 0.0f ? 0.5f : -0.5f;

108 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

110 
ö
 = *
pIn
++;

111 
ö
 = (in * 32768.0f);

112 
ö
 += in > 0.0f ? 0.5f : -0.5f;

113 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

115 
ö
 = *
pIn
++;

116 
ö
 = (in * 32768.0f);

117 
ö
 += in > 0.0f ? 0.5f : -0.5f;

118 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

120 
ö
 = *
pIn
++;

121 
ö
 = (in * 32768.0f);

122 
ö
 += in > 0.0f ? 0.5f : -0.5f;

123 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

129 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

130 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

131 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

132 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

137 
blkC¡
--;

142 
blkC¡
 = 
blockSize
 % 0x4u;

144 
blkC¡
 > 0u)

147 #ifde‡
ARM_MATH_ROUNDING


150 
ö
 = *
pIn
++;

151 
ö
 = (in * 32768.0f);

152 
ö
 += in > 0.0f ? 0.5f : -0.5f;

153 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

159 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

164 
blkC¡
--;

173 
blkC¡
 = 
blockSize
;

175 
blkC¡
 > 0u)

178 #ifde‡
ARM_MATH_ROUNDING


181 
ö
 = *
pIn
++;

182 
ö
 = (in * 32768.0f);

183 
ö
 += in > 0 ? 0.5f : -0.5f;

184 *
pD°
++ = (
q15_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 16));

190 *
pD°
++ = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 32768.0f), 16);

195 
blkC¡
--;

200 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q31.c

41 
	~"¨m_m©h.h
"

80 
	$¨m_Êﬂt_to_q31
(

81 
Êﬂt32_t
 * 
pSrc
,

82 
q31_t
 * 
pD°
,

83 
uöt32_t
 
blockSize
)

85 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

86 
uöt32_t
 
blkC¡
;

88 #ifde‡
ARM_MATH_ROUNDING


90 
Êﬂt32_t
 
ö
;

94 #i‚de‡
ARM_MATH_CM0_FAMILY


99 
blkC¡
 = 
blockSize
 >> 2u;

103 
blkC¡
 > 0u)

106 #ifde‡
ARM_MATH_ROUNDING


110 
ö
 = *
pIn
++;

111 
ö
 = (in * 2147483648.0f);

112 
ö
 += in > 0.0f ? 0.5f : -0.5f;

113 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

115 
ö
 = *
pIn
++;

116 
ö
 = (in * 2147483648.0f);

117 
ö
 += in > 0.0f ? 0.5f : -0.5f;

118 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

120 
ö
 = *
pIn
++;

121 
ö
 = (in * 2147483648.0f);

122 
ö
 += in > 0.0f ? 0.5f : -0.5f;

123 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

125 
ö
 = *
pIn
++;

126 
ö
 = (in * 2147483648.0f);

127 
ö
 += in > 0.0f ? 0.5f : -0.5f;

128 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

134 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

135 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

136 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

137 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

142 
blkC¡
--;

147 
blkC¡
 = 
blockSize
 % 0x4u;

149 
blkC¡
 > 0u)

152 #ifde‡
ARM_MATH_ROUNDING


156 
ö
 = *
pIn
++;

157 
ö
 = (in * 2147483648.0f);

158 
ö
 += in > 0.0f ? 0.5f : -0.5f;

159 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

165 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

170 
blkC¡
--;

179 
blkC¡
 = 
blockSize
;

181 
blkC¡
 > 0u)

184 #ifde‡
ARM_MATH_ROUNDING


188 
ö
 = *
pIn
++;

189 
ö
 = (in * 2147483648.0f);

190 
ö
 += in > 0 ? 0.5f : -0.5f;

191 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(
ö
));

197 *
pD°
++ = 
	`˛ù_q63_to_q31
((
q63_t
Ë(*
pIn
++ * 2147483648.0f));

202 
blkC¡
--;

207 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q7.c

41 
	~"¨m_m©h.h
"

75 
	$¨m_Êﬂt_to_q7
(

76 
Êﬂt32_t
 * 
pSrc
,

77 
q7_t
 * 
pD°
,

78 
uöt32_t
 
blockSize
)

80 
Êﬂt32_t
 *
pIn
 = 
pSrc
;

81 
uöt32_t
 
blkC¡
;

83 #ifde‡
ARM_MATH_ROUNDING


85 
Êﬂt32_t
 
ö
;

89 #i‚de‡
ARM_MATH_CM0_FAMILY


94 
blkC¡
 = 
blockSize
 >> 2u;

98 
blkC¡
 > 0u)

101 #ifde‡
ARM_MATH_ROUNDING


104 
ö
 = *
pIn
++;

105 
ö
 = (in * 128);

106 
ö
 += in > 0.0f ? 0.5f : -0.5f;

107 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

109 
ö
 = *
pIn
++;

110 
ö
 = (in * 128);

111 
ö
 += in > 0.0f ? 0.5f : -0.5f;

112 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

114 
ö
 = *
pIn
++;

115 
ö
 = (in * 128);

116 
ö
 += in > 0.0f ? 0.5f : -0.5f;

117 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

119 
ö
 = *
pIn
++;

120 
ö
 = (in * 128);

121 
ö
 += in > 0.0f ? 0.5f : -0.5f;

122 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

128 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

129 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

130 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

131 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

136 
blkC¡
--;

141 
blkC¡
 = 
blockSize
 % 0x4u;

143 
blkC¡
 > 0u)

146 #ifde‡
ARM_MATH_ROUNDING


149 
ö
 = *
pIn
++;

150 
ö
 = (in * 128);

151 
ö
 += in > 0.0f ? 0.5f : -0.5f;

152 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q15_t
Ë(
ö
), 8));

158 *
pD°
++ = 
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

163 
blkC¡
--;

173 
blkC¡
 = 
blockSize
;

175 
blkC¡
 > 0u)

177 #ifde‡
ARM_MATH_ROUNDING


180 
ö
 = *
pIn
++;

181 
ö
 = (in * 128.0f);

182 
ö
 += in > 0 ? 0.5f : -0.5f;

183 *
pD°
++ = (
q7_t
Ë(
	`__SSAT
((
q31_t
Ë(
ö
), 8));

189 *
pD°
++ = (
q7_t
Ë
	`__SSAT
((
q31_t
Ë(*
pIn
++ * 128.0f), 8);

194 
blkC¡
--;

199 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_float.c

41 
	~"¨m_m©h.h
"

77 
	$¨m_q15_to_Êﬂt
(

78 
q15_t
 * 
pSrc
,

79 
Êﬂt32_t
 * 
pD°
,

80 
uöt32_t
 
blockSize
)

82 
q15_t
 *
pIn
 = 
pSrc
;

83 
uöt32_t
 
blkC¡
;

86 #i‚de‡
ARM_MATH_CM0_FAMILY


91 
blkC¡
 = 
blockSize
 >> 2u;

95 
blkC¡
 > 0u)

99 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

100 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

101 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

102 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

105 
blkC¡
--;

110 
blkC¡
 = 
blockSize
 % 0x4u;

117 
blkC¡
 = 
blockSize
;

121 
blkC¡
 > 0u)

125 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 32768.0f);

128 
blkC¡
--;

130 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q15_to_q31
(

71 
q15_t
 * 
pSrc
,

72 
q31_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q15_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö1
, 
ö2
;

82 
q31_t
 
out1
, 
out2
, 
out3
, 
out4
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö1
 = *
	`__SIMD32
(
pIn
)++;

94 
ö2
 = *
	`__SIMD32
(
pIn
)++;

96 #i‚de‡
ARM_MATH_BIG_ENDIAN


99 
out1
 = 
ö1
 << 16u;

101 
out2
 = 
ö1
 & 0xFFFF0000;

103 
out3
 = 
ö2
 << 16u;

105 
out4
 = 
ö2
 & 0xFFFF0000;

110 
out1
 = 
ö1
 & 0xFFFF0000;

112 
out2
 = 
ö1
 << 16u;

114 
out3
 = 
ö2
 & 0xFFFF0000;

116 
out4
 = 
ö2
 << 16u;

120 *
pD°
++ = 
out1
;

121 *
pD°
++ = 
out2
;

122 *
pD°
++ = 
out3
;

123 *
pD°
++ = 
out4
;

126 
blkC¡
--;

131 
blkC¡
 = 
blockSize
 % 0x4u;

138 
blkC¡
 = 
blockSize
;

142 
blkC¡
 > 0u)

146 *
pD°
++ = (
q31_t
Ë* 
pIn
++ << 16;

149 
blkC¡
--;

152 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q7.c

41 
	~"¨m_m©h.h
"

71 
	$¨m_q15_to_q7
(

72 
q15_t
 * 
pSrc
,

73 
q7_t
 * 
pD°
,

74 
uöt32_t
 
blockSize
)

76 
q15_t
 *
pIn
 = 
pSrc
;

77 
uöt32_t
 
blkC¡
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY


82 
q31_t
 
ö1
, 
ö2
;

83 
q31_t
 
out1
, 
out2
;

86 
blkC¡
 = 
blockSize
 >> 2u;

90 
blkC¡
 > 0u)

94 
ö1
 = *
	`__SIMD32
(
pIn
)++;

95 
ö2
 = *
	`__SIMD32
(
pIn
)++;

97 #i‚de‡
ARM_MATH_BIG_ENDIAN


99 
out1
 = 
	`__PKHTB
(
ö2
, 
ö1
, 16);

100 
out2
 = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

104 
out1
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

105 
out2
 = 
	`__PKHBT
(
ö1
, 
ö2
, 16);

110 
out2
 = ((
uöt32_t
) out2 << 8) | ((uint32_t) out2 >> 24);

113 
out1
 = out1 & 0xFF00FF00;

115 
out2
 = out2 & 0x00FF00FF;

118 
out1
 = out1 | 
out2
;

121 *
	`__SIMD32
(
pD°
)++ = 
out1
;

124 
blkC¡
--;

129 
blkC¡
 = 
blockSize
 % 0x4u;

136 
blkC¡
 = 
blockSize
;

140 
blkC¡
 > 0u)

144 *
pD°
++ = (
q7_t
Ë(*
pIn
++ >> 8);

147 
blkC¡
--;

150 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_float.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_q31_to_Êﬂt
(

75 
q31_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
q31_t
 *
pIn
 = 
pSrc
;

80 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

96 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

97 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

98 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

99 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

102 
blkC¡
--;

107 
blkC¡
 = 
blockSize
 % 0x4u;

114 
blkC¡
 = 
blockSize
;

118 
blkC¡
 > 0u)

122 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 2147483648.0f);

125 
blkC¡
--;

127 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q15.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q31_to_q15
(

71 
q31_t
 * 
pSrc
,

72 
q15_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q31_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

82 
q31_t
 
out1
, 
out2
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö1
 = *
pIn
++;

94 
ö2
 = *
pIn
++;

95 
ö3
 = *
pIn
++;

96 
ö4
 = *
pIn
++;

99 #i‚de‡
ARM_MATH_BIG_ENDIAN


101 
out1
 = 
	`__PKHTB
(
ö2
, 
ö1
, 16);

102 
out2
 = 
	`__PKHTB
(
ö4
, 
ö3
, 16);

106 
out1
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

107 
out2
 = 
	`__PKHTB
(
ö3
, 
ö4
, 16);

111 *
	`__SIMD32
(
pD°
)++ = 
out1
;

112 *
	`__SIMD32
(
pD°
)++ = 
out2
;

115 
blkC¡
--;

120 
blkC¡
 = 
blockSize
 % 0x4u;

127 
blkC¡
 = 
blockSize
;

131 
blkC¡
 > 0u)

135 *
pD°
++ = (
q15_t
Ë(*
pIn
++ >> 16);

138 
blkC¡
--;

141 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q7.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q31_to_q7
(

71 
q31_t
 * 
pSrc
,

72 
q7_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q31_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


81 
q31_t
 
ö1
, 
ö2
, 
ö3
, 
ö4
;

82 
q7_t
 
out1
, 
out2
, 
out3
, 
out4
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö1
 = *
pIn
++;

94 
ö2
 = *
pIn
++;

95 
ö3
 = *
pIn
++;

96 
ö4
 = *
pIn
++;

98 
out1
 = (
q7_t
Ë(
ö1
 >> 24);

99 
out2
 = (
q7_t
Ë(
ö2
 >> 24);

100 
out3
 = (
q7_t
Ë(
ö3
 >> 24);

101 
out4
 = (
q7_t
Ë(
ö4
 >> 24);

103 *
	`__SIMD32
(
pD°
)++ = 
	`__PACKq7
(
out1
, 
out2
, 
out3
, 
out4
);

106 
blkC¡
--;

111 
blkC¡
 = 
blockSize
 % 0x4u;

118 
blkC¡
 = 
blockSize
;

122 
blkC¡
 > 0u)

126 *
pD°
++ = (
q7_t
Ë(*
pIn
++ >> 24);

129 
blkC¡
--;

132 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_float.c

41 
	~"¨m_m©h.h
"

74 
	$¨m_q7_to_Êﬂt
(

75 
q7_t
 * 
pSrc
,

76 
Êﬂt32_t
 * 
pD°
,

77 
uöt32_t
 
blockSize
)

79 
q7_t
 *
pIn
 = 
pSrc
;

80 
uöt32_t
 
blkC¡
;

83 #i‚de‡
ARM_MATH_CM0_FAMILY


88 
blkC¡
 = 
blockSize
 >> 2u;

92 
blkC¡
 > 0u)

96 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

97 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

98 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

99 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

102 
blkC¡
--;

107 
blkC¡
 = 
blockSize
 % 0x4u;

114 
blkC¡
 = 
blockSize
;

118 
blkC¡
 > 0u)

122 *
pD°
++ = ((
Êﬂt32_t
Ë* 
pIn
++ / 128.0f);

125 
blkC¡
--;

127 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q15.c

41 
	~"¨m_m©h.h
"

73 
	$¨m_q7_to_q15
(

74 
q7_t
 * 
pSrc
,

75 
q15_t
 * 
pD°
,

76 
uöt32_t
 
blockSize
)

78 
q7_t
 *
pIn
 = 
pSrc
;

79 
uöt32_t
 
blkC¡
;

81 #i‚de‡
ARM_MATH_CM0_FAMILY


82 
q31_t
 
ö
;

83 
q31_t
 
ö1
, 
ö2
;

84 
q31_t
 
out1
, 
out2
;

89 
blkC¡
 = 
blockSize
 >> 2u;

93 
blkC¡
 > 0u)

97 
ö
 = *
	`__SIMD32
(
pIn
)++;

100 
ö1
 = 
	`__SXTB16
(
	`__ROR
(
ö
, 8));

103 
ö2
 = 
	`__SXTB16
(
ö
);

105 
ö1
 = in1 << 8u;

106 
ö2
 = in2 << 8u;

108 
ö1
 = in1 & 0xFF00FF00;

109 
ö2
 = in2 & 0xFF00FF00;

111 #i‚de‡
ARM_MATH_BIG_ENDIAN


113 
out2
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

114 
out1
 = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

118 
out1
 = 
	`__PKHTB
(
ö1
, 
ö2
, 16);

119 
out2
 = 
	`__PKHBT
(
ö2
, 
ö1
, 16);

123 *
	`__SIMD32
(
pD°
)++ = 
out1
;

124 *
	`__SIMD32
(
pD°
)++ = 
out2
;

127 
blkC¡
--;

132 
blkC¡
 = 
blockSize
 % 0x4u;

139 
blkC¡
 = 
blockSize
;

143 
blkC¡
 > 0u)

147 *
pD°
++ = (
q15_t
Ë* 
pIn
++ << 8;

150 
blkC¡
--;

153 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q31.c

41 
	~"¨m_m©h.h
"

70 
	$¨m_q7_to_q31
(

71 
q7_t
 * 
pSrc
,

72 
q31_t
 * 
pD°
,

73 
uöt32_t
 
blockSize
)

75 
q7_t
 *
pIn
 = 
pSrc
;

76 
uöt32_t
 
blkC¡
;

78 #i‚de‡
ARM_MATH_CM0_FAMILY


80 
q31_t
 
ö
;

85 
blkC¡
 = 
blockSize
 >> 2u;

89 
blkC¡
 > 0u)

93 
ö
 = *
	`__SIMD32
(
pIn
)++;

95 #i‚de‡
ARM_MATH_BIG_ENDIAN


97 *
pD°
++ = (
	`__ROR
(
ö
, 8)) & 0xFF000000;

98 *
pD°
++ = (
	`__ROR
(
ö
, 16)) & 0xFF000000;

99 *
pD°
++ = (
	`__ROR
(
ö
, 24)) & 0xFF000000;

100 *
pD°
++ = (
ö
 & 0xFF000000);

104 *
pD°
++ = (
ö
 & 0xFF000000);

105 *
pD°
++ = (
	`__ROR
(
ö
, 24)) & 0xFF000000;

106 *
pD°
++ = (
	`__ROR
(
ö
, 16)) & 0xFF000000;

107 *
pD°
++ = (
	`__ROR
(
ö
, 8)) & 0xFF000000;

112 
blkC¡
--;

117 
blkC¡
 = 
blockSize
 % 0x4u;

124 
blkC¡
 = 
blockSize
;

128 
blkC¡
 > 0u)

132 *
pD°
++ = (
q31_t
Ë* 
pIn
++ << 24;

135 
blkC¡
--;

138 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_bitreversal.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

53 
	$¨m_bôªvîßl_f32
(

54 
Êﬂt32_t
 * 
pSrc
,

55 
uöt16_t
 
f·Size
,

56 
uöt16_t
 
bôRevFa˘‹
,

57 
uöt16_t
 * 
pBôRevTab
)

59 
uöt16_t
 
f·LíBy2
, 
f·LíBy2p1
;

60 
uöt16_t
 
i
, 
j
;

61 
Êﬂt32_t
 
ö
;

64 
j
 = 0u;

65 
f·LíBy2
 = 
f·Size
 >> 1u;

66 
f·LíBy2p1
 = (
f·Size
 >> 1u) + 1u;

69 
i
 = 0u; i <(
f·LíBy2
 - 2u); i += 2u)

71 if(
i
 < 
j
)

74 
ö
 = 
pSrc
[2u * 
i
];

75 
pSrc
[2u * 
i
] =ÖSrc[2u * 
j
];

76 
pSrc
[2u * 
j
] = 
ö
;

79 
ö
 = 
pSrc
[(2u * 
i
) + 1u];

80 
pSrc
[(2u * 
i
Ë+ 1u] =ÖSrc[(2u * 
j
) + 1u];

81 
pSrc
[(2u * 
j
Ë+ 1u] = 
ö
;

84 
ö
 = 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)];

85 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)] =ÖSrc[2u * (
j
 + fftLenBy2p1)];

86 
pSrc
[2u * (
j
 + 
f·LíBy2p1
)] = 
ö
;

89 
ö
 = 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u];

90 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u] =

91 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)) + 1u];

92 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)Ë+ 1u] = 
ö
;

97 
ö
 = 
pSrc
[2u * (
i
 + 1u)];

98 
pSrc
[2u * (
i
 + 1u)] =ÖSrc[2u * (
j
 + 
f·LíBy2
)];

99 
pSrc
[2u * (
j
 + 
f·LíBy2
)] = 
ö
;

102 
ö
 = 
pSrc
[(2u * (
i
 + 1u)) + 1u];

103 
pSrc
[(2u * (
i
 + 1u)Ë+ 1u] =ÖSrc[(2u * (
j
 + 
f·LíBy2
)) + 1u];

104 
pSrc
[(2u * (
j
 + 
f·LíBy2
)Ë+ 1u] = 
ö
;

107 
j
 = *
pBôRevTab
;

110 
pBôRevTab
 +
bôRevFa˘‹
;

112 
	}
}

125 
	$¨m_bôªvîßl_q31
(

126 
q31_t
 * 
pSrc
,

127 
uöt32_t
 
f·Lí
,

128 
uöt16_t
 
bôRevFa˘‹
,

129 
uöt16_t
 * 
pBôRevTabÀ
)

131 
uöt32_t
 
f·LíBy2
, 
f·LíBy2p1
, 
i
, 
j
;

132 
q31_t
 
ö
;

135 
j
 = 0u;

136 
f·LíBy2
 = 
f·Lí
 / 2u;

137 
f·LíBy2p1
 = (
f·Lí
 / 2u) + 1u;

140 
i
 = 0u; i <(
f·LíBy2
 - 2u); i += 2u)

142 if(
i
 < 
j
)

145 
ö
 = 
pSrc
[2u * 
i
];

146 
pSrc
[2u * 
i
] =ÖSrc[2u * 
j
];

147 
pSrc
[2u * 
j
] = 
ö
;

150 
ö
 = 
pSrc
[(2u * 
i
) + 1u];

151 
pSrc
[(2u * 
i
Ë+ 1u] =ÖSrc[(2u * 
j
) + 1u];

152 
pSrc
[(2u * 
j
Ë+ 1u] = 
ö
;

155 
ö
 = 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)];

156 
pSrc
[2u * (
i
 + 
f·LíBy2p1
)] =ÖSrc[2u * (
j
 + fftLenBy2p1)];

157 
pSrc
[2u * (
j
 + 
f·LíBy2p1
)] = 
ö
;

160 
ö
 = 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u];

161 
pSrc
[(2u * (
i
 + 
f·LíBy2p1
)) + 1u] =

162 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)) + 1u];

163 
pSrc
[(2u * (
j
 + 
f·LíBy2p1
)Ë+ 1u] = 
ö
;

168 
ö
 = 
pSrc
[2u * (
i
 + 1u)];

169 
pSrc
[2u * (
i
 + 1u)] =ÖSrc[2u * (
j
 + 
f·LíBy2
)];

170 
pSrc
[2u * (
j
 + 
f·LíBy2
)] = 
ö
;

173 
ö
 = 
pSrc
[(2u * (
i
 + 1u)) + 1u];

174 
pSrc
[(2u * (
i
 + 1u)Ë+ 1u] =ÖSrc[(2u * (
j
 + 
f·LíBy2
)) + 1u];

175 
pSrc
[(2u * (
j
 + 
f·LíBy2
)Ë+ 1u] = 
ö
;

178 
j
 = *
pBôRevTabÀ
;

181 
pBôRevTabÀ
 +
bôRevFa˘‹
;

183 
	}
}

196 
	$¨m_bôªvîßl_q15
(

197 
q15_t
 * 
pSrc16
,

198 
uöt32_t
 
f·Lí
,

199 
uöt16_t
 
bôRevFa˘‹
,

200 
uöt16_t
 * 
pBôRevTab
)

202 
q31_t
 *
pSrc
 = (q31_à*Ë
pSrc16
;

203 
q31_t
 
ö
;

204 
uöt32_t
 
f·LíBy2
, 
f·LíBy2p1
;

205 
uöt32_t
 
i
, 
j
;

208 
j
 = 0u;

209 
f·LíBy2
 = 
f·Lí
 / 2u;

210 
f·LíBy2p1
 = (
f·Lí
 / 2u) + 1u;

213 
i
 = 0u; i <(
f·LíBy2
 - 2u); i += 2u)

215 if(
i
 < 
j
)

219 
ö
 = 
pSrc
[
i
];

220 
pSrc
[
i
] =ÖSrc[
j
];

221 
pSrc
[
j
] = 
ö
;

225 
ö
 = 
pSrc
[
i
 + 
f·LíBy2p1
];

226 
pSrc
[
i
 + 
f·LíBy2p1
] =ÖSrc[
j
 + fftLenBy2p1];

227 
pSrc
[
j
 + 
f·LíBy2p1
] = 
ö
;

232 
ö
 = 
pSrc
[
i
 + 1u];

233 
pSrc
[
i
 + 1u] =ÖSrc[
j
 + 
f·LíBy2
];

234 
pSrc
[
j
 + 
f·LíBy2
] = 
ö
;

237 
j
 = *
pBôRevTab
;

240 
pBôRevTab
 +
bôRevFa˘‹
;

242 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

44 
¨m_ødix8_buâîÊy_f32
(

45 
Êﬂt32_t
 * 
pSrc
,

46 
uöt16_t
 
f·Lí
,

47 c⁄° 
Êﬂt32_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_bôªvîßl_32
(

51 
uöt32_t
 * 
pSrc
,

52 c⁄° 
uöt16_t
 
bôRevLí
,

53 c⁄° 
uöt16_t
 * 
pBôRevTabÀ
);

207 
	$¨m_cf·_ødix8by2_f32
–
¨m_cf·_ö°™˚_f32
 * 
S
, 
Êﬂt32_t
 * 
p1
)

209 
uöt32_t
 
L
 = 
S
->
f·Lí
;

210 
Êﬂt32_t
 * 
pCﬁ1
, * 
pCﬁ2
, * 
pMid1
, * 
pMid2
;

211 
Êﬂt32_t
 * 
p2
 = 
p1
 + 
L
;

212 c⁄° 
Êﬂt32_t
 * 
tw
 = (Êﬂt32_à*Ë
S
->
pTwiddÀ
;

213 
Êﬂt32_t
 
t1
[4], 
t2
[4], 
t3
[4], 
t4
[4], 
twR
, 
twI
;

214 
Êﬂt32_t
 
m0
, 
m1
, 
m2
, 
m3
;

215 
uöt32_t
 
l
;

217 
pCﬁ1
 = 
p1
;

218 
pCﬁ2
 = 
p2
;

221 
L
 >>= 1;

223 
pMid1
 = 
p1
 + 
L
;

224 
pMid2
 = 
p2
 + 
L
;

227  
l
 = 
L
 >> 2;Ü > 0;Ü-- )

229 
t1
[0] = 
p1
[0];

230 
t1
[1] = 
p1
[1];

231 
t1
[2] = 
p1
[2];

232 
t1
[3] = 
p1
[3];

234 
t2
[0] = 
p2
[0];

235 
t2
[1] = 
p2
[1];

236 
t2
[2] = 
p2
[2];

237 
t2
[3] = 
p2
[3];

239 
t3
[0] = 
pMid1
[0];

240 
t3
[1] = 
pMid1
[1];

241 
t3
[2] = 
pMid1
[2];

242 
t3
[3] = 
pMid1
[3];

244 
t4
[0] = 
pMid2
[0];

245 
t4
[1] = 
pMid2
[1];

246 
t4
[2] = 
pMid2
[2];

247 
t4
[3] = 
pMid2
[3];

249 *
p1
++ = 
t1
[0] + 
t2
[0];

250 *
p1
++ = 
t1
[1] + 
t2
[1];

251 *
p1
++ = 
t1
[2] + 
t2
[2];

252 *
p1
++ = 
t1
[3] + 
t2
[3];

254 
t2
[0] = 
t1
[0] -Å2[0];

255 
t2
[1] = 
t1
[1] -Å2[1];

256 
t2
[2] = 
t1
[2] -Å2[2];

257 
t2
[3] = 
t1
[3] -Å2[3];

259 *
pMid1
++ = 
t3
[0] + 
t4
[0];

260 *
pMid1
++ = 
t3
[1] + 
t4
[1];

261 *
pMid1
++ = 
t3
[2] + 
t4
[2];

262 *
pMid1
++ = 
t3
[3] + 
t4
[3];

264 
t4
[0] =Å4[0] - 
t3
[0];

265 
t4
[1] =Å4[1] - 
t3
[1];

266 
t4
[2] =Å4[2] - 
t3
[2];

267 
t4
[3] =Å4[3] - 
t3
[3];

269 
twR
 = *
tw
++;

270 
twI
 = *
tw
++;

273 
m0
 = 
t2
[0] * 
twR
;

274 
m1
 = 
t2
[1] * 
twI
;

275 
m2
 = 
t2
[1] * 
twR
;

276 
m3
 = 
t2
[0] * 
twI
;

279 *
p2
++ = 
m0
 + 
m1
;

281 *
p2
++ = 
m2
 - 
m3
;

285 
m0
 = 
t4
[0] * 
twI
;

286 
m1
 = 
t4
[1] * 
twR
;

287 
m2
 = 
t4
[1] * 
twI
;

288 
m3
 = 
t4
[0] * 
twR
;

290 *
pMid2
++ = 
m0
 - 
m1
;

291 *
pMid2
++ = 
m2
 + 
m3
;

293 
twR
 = *
tw
++;

294 
twI
 = *
tw
++;

296 
m0
 = 
t2
[2] * 
twR
;

297 
m1
 = 
t2
[3] * 
twI
;

298 
m2
 = 
t2
[3] * 
twR
;

299 
m3
 = 
t2
[2] * 
twI
;

301 *
p2
++ = 
m0
 + 
m1
;

302 *
p2
++ = 
m2
 - 
m3
;

304 
m0
 = 
t4
[2] * 
twI
;

305 
m1
 = 
t4
[3] * 
twR
;

306 
m2
 = 
t4
[3] * 
twI
;

307 
m3
 = 
t4
[2] * 
twR
;

309 *
pMid2
++ = 
m0
 - 
m1
;

310 *
pMid2
++ = 
m2
 + 
m3
;

314 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ1
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 2u);

316 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ2
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 2u);

317 
	}
}

319 
	$¨m_cf·_ødix8by4_f32
–
¨m_cf·_ö°™˚_f32
 * 
S
, 
Êﬂt32_t
 * 
p1
)

321 
uöt32_t
 
L
 = 
S
->
f·Lí
 >> 1;

322 
Êﬂt32_t
 * 
pCﬁ1
, *
pCﬁ2
, *
pCﬁ3
, *
pCﬁ4
, *
pEnd1
, *
pEnd2
, *
pEnd3
, *
pEnd4
;

323 c⁄° 
Êﬂt32_t
 *
tw2
, *
tw3
, *
tw4
;

324 
Êﬂt32_t
 * 
p2
 = 
p1
 + 
L
;

325 
Êﬂt32_t
 * 
p3
 = 
p2
 + 
L
;

326 
Êﬂt32_t
 * 
p4
 = 
p3
 + 
L
;

327 
Êﬂt32_t
 
t2
[4], 
t3
[4], 
t4
[4], 
twR
, 
twI
;

328 
Êﬂt32_t
 
p1≠3_0
, 
p1•3_0
, 
p1≠3_1
, 
p1•3_1
;

329 
Êﬂt32_t
 
m0
, 
m1
, 
m2
, 
m3
;

330 
uöt32_t
 
l
, 
twMod2
, 
twMod3
, 
twMod4
;

332 
pCﬁ1
 = 
p1
;

333 
pCﬁ2
 = 
p2
;

334 
pCﬁ3
 = 
p3
;

335 
pCﬁ4
 = 
p4
;

336 
pEnd1
 = 
p2
 - 1;

337 
pEnd2
 = 
p3
 - 1;

338 
pEnd3
 = 
p4
 - 1;

339 
pEnd4
 = 
pEnd3
 + 
L
;

341 
tw2
 = 
tw3
 = 
tw4
 = (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
;

343 
L
 >>= 1;

347 
twMod2
 = 2;

348 
twMod3
 = 4;

349 
twMod4
 = 6;

352 
p1≠3_0
 = 
p1
[0] + 
p3
[0];

353 
p1•3_0
 = 
p1
[0] - 
p3
[0];

354 
p1≠3_1
 = 
p1
[1] + 
p3
[1];

355 
p1•3_1
 = 
p1
[1] - 
p3
[1];

358 
t2
[0] = 
p1•3_0
 + 
p2
[1] - 
p4
[1];

359 
t2
[1] = 
p1•3_1
 - 
p2
[0] + 
p4
[0];

361 
t3
[0] = 
p1≠3_0
 - 
p2
[0] - 
p4
[0];

362 
t3
[1] = 
p1≠3_1
 - 
p2
[1] - 
p4
[1];

364 
t4
[0] = 
p1•3_0
 - 
p2
[1] + 
p4
[1];

365 
t4
[1] = 
p1•3_1
 + 
p2
[0] - 
p4
[0];

367 *
p1
++ = 
p1≠3_0
 + 
p2
[0] + 
p4
[0];

368 *
p1
++ = 
p1≠3_1
 + 
p2
[1] + 
p4
[1];

371 *
p2
++ = 
t2
[0];

372 *
p2
++ = 
t2
[1];

373 *
p3
++ = 
t3
[0];

374 *
p3
++ = 
t3
[1];

375 *
p4
++ = 
t4
[0];

376 *
p4
++ = 
t4
[1];

378 
tw2
 +
twMod2
;

379 
tw3
 +
twMod3
;

380 
tw4
 +
twMod4
;

382 
l
 = (
L
 - 2) >> 1;Ü > 0;Ü-- )

385 
p1≠3_0
 = 
p1
[0] + 
p3
[0];

386 
p1•3_0
 = 
p1
[0] - 
p3
[0];

387 
p1≠3_1
 = 
p1
[1] + 
p3
[1];

388 
p1•3_1
 = 
p1
[1] - 
p3
[1];

390 
t2
[0] = 
p1•3_0
 + 
p2
[1] - 
p4
[1];

391 
t2
[1] = 
p1•3_1
 - 
p2
[0] + 
p4
[0];

393 
t3
[0] = 
p1≠3_0
 - 
p2
[0] - 
p4
[0];

394 
t3
[1] = 
p1≠3_1
 - 
p2
[1] - 
p4
[1];

396 
t4
[0] = 
p1•3_0
 - 
p2
[1] + 
p4
[1];

397 
t4
[1] = 
p1•3_1
 + 
p2
[0] - 
p4
[0];

399 *
p1
++ = 
p1≠3_0
 + 
p2
[0] + 
p4
[0];

400 *
p1
++ = 
p1≠3_1
 + 
p2
[1] + 
p4
[1];

403 
p1≠3_1
 = 
pEnd1
[-1] + 
pEnd3
[-1];

404 
p1•3_1
 = 
pEnd1
[-1] - 
pEnd3
[-1];

405 
p1≠3_0
 = 
pEnd1
[0] + 
pEnd3
[0];

406 
p1•3_0
 = 
pEnd1
[0] - 
pEnd3
[0];

408 
t2
[2] = 
pEnd2
[0] - 
pEnd4
[0] + 
p1•3_1
;

409 
t2
[3] = 
pEnd1
[0] - 
pEnd3
[0] - 
pEnd2
[-1] + 
pEnd4
[-1];

411 
t3
[2] = 
p1≠3_1
 - 
pEnd2
[-1] - 
pEnd4
[-1];

412 
t3
[3] = 
p1≠3_0
 - 
pEnd2
[0] - 
pEnd4
[0];

414 
t4
[2] = 
pEnd2
[0] - 
pEnd4
[0] - 
p1•3_1
;

415 
t4
[3] = 
pEnd4
[-1] - 
pEnd2
[-1] - 
p1•3_0
;

417 *
pEnd1
-- = 
p1≠3_0
 + 
pEnd2
[0] + 
pEnd4
[0];

418 *
pEnd1
-- = 
p1≠3_1
 + 
pEnd2
[-1] + 
pEnd4
[-1];

422 
twR
 = *
tw2
++;

423 
twI
 = *
tw2
++;

429 
m0
 = 
t2
[0] * 
twR
;

430 
m1
 = 
t2
[1] * 
twI
;

431 
m2
 = 
t2
[1] * 
twR
;

432 
m3
 = 
t2
[0] * 
twI
;

434 *
p2
++ = 
m0
 + 
m1
;

435 *
p2
++ = 
m2
 - 
m3
;

439 
m0
 = 
t2
[3] * 
twI
;

440 
m1
 = 
t2
[2] * 
twR
;

441 
m2
 = 
t2
[2] * 
twI
;

442 
m3
 = 
t2
[3] * 
twR
;

444 *
pEnd2
-- = 
m0
 - 
m1
;

445 *
pEnd2
-- = 
m2
 + 
m3
;

448 
twR
 = 
tw3
[0];

449 
twI
 = 
tw3
[1];

450 
tw3
 +
twMod3
;

452 
m0
 = 
t3
[0] * 
twR
;

453 
m1
 = 
t3
[1] * 
twI
;

454 
m2
 = 
t3
[1] * 
twR
;

455 
m3
 = 
t3
[0] * 
twI
;

457 *
p3
++ = 
m0
 + 
m1
;

458 *
p3
++ = 
m2
 - 
m3
;

462 
m0
 = -
t3
[3] * 
twR
;

463 
m1
 = 
t3
[2] * 
twI
;

464 
m2
 = 
t3
[2] * 
twR
;

465 
m3
 = 
t3
[3] * 
twI
;

467 *
pEnd3
-- = 
m0
 - 
m1
;

468 *
pEnd3
-- = 
m3
 - 
m2
;

471 
twR
 = 
tw4
[0];

472 
twI
 = 
tw4
[1];

473 
tw4
 +
twMod4
;

475 
m0
 = 
t4
[0] * 
twR
;

476 
m1
 = 
t4
[1] * 
twI
;

477 
m2
 = 
t4
[1] * 
twR
;

478 
m3
 = 
t4
[0] * 
twI
;

480 *
p4
++ = 
m0
 + 
m1
;

481 *
p4
++ = 
m2
 - 
m3
;

485 
m0
 = 
t4
[3] * 
twI
;

486 
m1
 = 
t4
[2] * 
twR
;

487 
m2
 = 
t4
[2] * 
twI
;

488 
m3
 = 
t4
[3] * 
twR
;

490 *
pEnd4
-- = 
m0
 - 
m1
;

491 *
pEnd4
-- = 
m2
 + 
m3
;

497 
p1≠3_0
 = 
p1
[0] + 
p3
[0];

498 
p1•3_0
 = 
p1
[0] - 
p3
[0];

499 
p1≠3_1
 = 
p1
[1] + 
p3
[1];

500 
p1•3_1
 = 
p1
[1] - 
p3
[1];

503 
t2
[0] = 
p1•3_0
 + 
p2
[1] - 
p4
[1];

504 
t2
[1] = 
p1•3_1
 - 
p2
[0] + 
p4
[0];

506 
t3
[0] = 
p1≠3_0
 - 
p2
[0] - 
p4
[0];

507 
t3
[1] = 
p1≠3_1
 - 
p2
[1] - 
p4
[1];

509 
t4
[0] = 
p1•3_0
 - 
p2
[1] + 
p4
[1];

510 
t4
[1] = 
p1•3_1
 + 
p2
[0] - 
p4
[0];

512 *
p1
++ = 
p1≠3_0
 + 
p2
[0] + 
p4
[0];

513 *
p1
++ = 
p1≠3_1
 + 
p2
[1] + 
p4
[1];

516 
twR
 = 
tw2
[0];

517 
twI
 = 
tw2
[1];

519 
m0
 = 
t2
[0] * 
twR
;

520 
m1
 = 
t2
[1] * 
twI
;

521 
m2
 = 
t2
[1] * 
twR
;

522 
m3
 = 
t2
[0] * 
twI
;

524 *
p2
++ = 
m0
 + 
m1
;

525 *
p2
++ = 
m2
 - 
m3
;

527 
twR
 = 
tw3
[0];

528 
twI
 = 
tw3
[1];

530 
m0
 = 
t3
[0] * 
twR
;

531 
m1
 = 
t3
[1] * 
twI
;

532 
m2
 = 
t3
[1] * 
twR
;

533 
m3
 = 
t3
[0] * 
twI
;

535 *
p3
++ = 
m0
 + 
m1
;

536 *
p3
++ = 
m2
 - 
m3
;

538 
twR
 = 
tw4
[0];

539 
twI
 = 
tw4
[1];

541 
m0
 = 
t4
[0] * 
twR
;

542 
m1
 = 
t4
[1] * 
twI
;

543 
m2
 = 
t4
[1] * 
twR
;

544 
m3
 = 
t4
[0] * 
twI
;

546 *
p4
++ = 
m0
 + 
m1
;

547 *
p4
++ = 
m2
 - 
m3
;

550 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ1
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

552 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ2
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

554 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ3
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

556 
	`¨m_ødix8_buâîÊy_f32
–
pCﬁ4
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 4u);

557 
	}
}

574 
	$¨m_cf·_f32
(

575 c⁄° 
¨m_cf·_ö°™˚_f32
 * 
S
,

576 
Êﬂt32_t
 * 
p1
,

577 
uöt8_t
 
if·Fœg
,

578 
uöt8_t
 
bôRevî£Fœg
)

580 
uöt32_t
 
L
 = 
S
->
f·Lí
, 
l
;

581 
Êﬂt32_t
 
övL
, * 
pSrc
;

583 if(
if·Fœg
 == 1u)

586 
pSrc
 = 
p1
 + 1;

587 
l
=0;Ü<
L
;Ü++)

589 *
pSrc
 = -*pSrc;

590 
pSrc
 += 2;

594 
L
)

599 
	`¨m_cf·_ødix8by2_f32
 ( (
¨m_cf·_ö°™˚_f32
 *Ë
S
, 
p1
);

604 
	`¨m_cf·_ødix8by4_f32
 ( (
¨m_cf·_ö°™˚_f32
 *Ë
S
, 
p1
);

609 
	`¨m_ødix8_buâîÊy_f32
–
p1
, 
L
, (
Êﬂt32_t
 *Ë
S
->
pTwiddÀ
, 1);

613 if–
bôRevî£Fœg
 )

614 
	`¨m_bôªvîßl_32
((
uöt32_t
*)
p1
,
S
->
bôRevLígth
,S->
pBôRevTabÀ
);

616 if(
if·Fœg
 == 1u)

618 
övL
 = 1.0f/(
Êﬂt32_t
)
L
;

620 
pSrc
 = 
p1
;

621 
l
=0;Ü<
L
;Ü++)

623 *
pSrc
++ *
övL
 ;

624 *
pSrc
 = -(*pSrcË* 
övL
;

625 
pSrc
++;

628 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q15.c

41 
	~"¨m_m©h.h
"

43 
¨m_ødix4_buâîÊy_q15
(

44 
q15_t
 * 
pSrc
,

45 
uöt32_t
 
f·Lí
,

46 
q15_t
 * 
pC€f
,

47 
uöt32_t
 
twidC€fModifõr
);

49 
¨m_ødix4_buâîÊy_övî£_q15
(

50 
q15_t
 * 
pSrc
,

51 
uöt32_t
 
f·Lí
,

52 
q15_t
 * 
pC€f
,

53 
uöt32_t
 
twidC€fModifõr
);

55 
¨m_bôªvîßl_16
(

56 
uöt16_t
 * 
pSrc
,

57 c⁄° 
uöt16_t
 
bôRevLí
,

58 c⁄° 
uöt16_t
 * 
pBôRevTabÀ
);

60 
¨m_cf·_ødix4by2_q15
(

61 
q15_t
 * 
pSrc
,

62 
uöt32_t
 
f·Lí
,

63 c⁄° 
q15_t
 * 
pC€f
);

65 
¨m_cf·_ødix4by2_övî£_q15
(

66 
q15_t
 * 
pSrc
,

67 
uöt32_t
 
f·Lí
,

68 c⁄° 
q15_t
 * 
pC€f
);

89 
	$¨m_cf·_q15
(

90 c⁄° 
¨m_cf·_ö°™˚_q15
 * 
S
,

91 
q15_t
 * 
p1
,

92 
uöt8_t
 
if·Fœg
,

93 
uöt8_t
 
bôRevî£Fœg
)

95 
uöt32_t
 
L
 = 
S
->
f·Lí
;

97 if(
if·Fœg
 == 1u)

99 
L
)

106 
	`¨m_ødix4_buâîÊy_övî£_q15
 ( 
p1
, 
L
, (
q15_t
*)
S
->
pTwiddÀ
, 1 );

113 
	`¨m_cf·_ødix4by2_övî£_q15
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

119 
L
)

126 
	`¨m_ødix4_buâîÊy_q15
 ( 
p1
, 
L
, (
q15_t
*)
S
->
pTwiddÀ
, 1 );

133 
	`¨m_cf·_ødix4by2_q15
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

138 if–
bôRevî£Fœg
 )

139 
	`¨m_bôªvîßl_16
((
uöt16_t
*)
p1
,
S
->
bôRevLígth
,S->
pBôRevTabÀ
);

140 
	}
}

146 
	$¨m_cf·_ødix4by2_q15
(

147 
q15_t
 * 
pSrc
,

148 
uöt32_t
 
f·Lí
,

149 c⁄° 
q15_t
 * 
pC€f
)

151 
uöt32_t
 
i
;

152 
uöt32_t
 
n2
;

153 
q15_t
 
p0
, 
p1
, 
p2
, 
p3
;

154 #i‚de‡
ARM_MATH_CM0_FAMILY


155 
q31_t
 
T
, 
S
, 
R
;

156 
q31_t
 
c€ff
, 
out1
, 
out2
;

157 c⁄° 
q15_t
 *
pC
 = 
pC€f
;

158 
q15_t
 *
pSi
 = 
pSrc
;

159 
q15_t
 *
pSl
 = 
pSrc
 + 
f·Lí
;

161 
uöt32_t
 
ü
, 
l
;

162 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

165 
n2
 = 
f·Lí
 >> 1;

167 #i‚de‡
ARM_MATH_CM0_FAMILY


169 
i
 = 
n2
; i > 0; i--)

171 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC
);

172 
pC
 += 2;

174 
T
 = 
	`_SIMD32_OFFSET
(
pSi
);

175 
T
 = 
	`__SHADD16
(T, 0);

177 
S
 = 
	`_SIMD32_OFFSET
(
pSl
);

178 
S
 = 
	`__SHADD16
(S, 0);

180 
R
 = 
	`__QSUB16
(
T
, 
S
);

182 
	`_SIMD32_OFFSET
(
pSi
Ë
	`__SHADD16
(
T
, 
S
);

183 
pSi
 += 2;

185 #i‚de‡
ARM_MATH_BIG_ENDIAN


187 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

188 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

192 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

193 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

197 
	`_SIMD32_OFFSET
(
pSl
) =

198 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

199 
pSl
 += 2;

204 
ü
 = 0;

205 
i
 = 0; i < 
n2
; i++)

207 
cosVÆ
 = 
pC€f
[
ü
 * 2];

208 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

209 
ü
++;

211 
l
 = 
i
 + 
n2
;

213 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

214 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

216 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

217 
pSrc
[2 * 
i
 + 1] =

218 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

220 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) +

221 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

223 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) -

224 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

230 
	`¨m_ødix4_buâîÊy_q15
–
pSrc
, 
n2
, (
q15_t
*)
pC€f
, 2u);

232 
	`¨m_ødix4_buâîÊy_q15
–
pSrc
 + 
f·Lí
, 
n2
, (
q15_t
*)
pC€f
, 2u);

234 
i
 = 0; i < 
f·Lí
 >> 1; i++)

236 
p0
 = 
pSrc
[4*
i
+0];

237 
p1
 = 
pSrc
[4*
i
+1];

238 
p2
 = 
pSrc
[4*
i
+2];

239 
p3
 = 
pSrc
[4*
i
+3];

241 
p0
 <<= 1;

242 
p1
 <<= 1;

243 
p2
 <<= 1;

244 
p3
 <<= 1;

246 
pSrc
[4*
i
+0] = 
p0
;

247 
pSrc
[4*
i
+1] = 
p1
;

248 
pSrc
[4*
i
+2] = 
p2
;

249 
pSrc
[4*
i
+3] = 
p3
;

251 
	}
}

253 
	$¨m_cf·_ødix4by2_övî£_q15
(

254 
q15_t
 * 
pSrc
,

255 
uöt32_t
 
f·Lí
,

256 c⁄° 
q15_t
 * 
pC€f
)

258 
uöt32_t
 
i
;

259 
uöt32_t
 
n2
;

260 
q15_t
 
p0
, 
p1
, 
p2
, 
p3
;

261 #i‚de‡
ARM_MATH_CM0_FAMILY


262 
q31_t
 
T
, 
S
, 
R
;

263 
q31_t
 
c€ff
, 
out1
, 
out2
;

264 c⁄° 
q15_t
 *
pC
 = 
pC€f
;

265 
q15_t
 *
pSi
 = 
pSrc
;

266 
q15_t
 *
pSl
 = 
pSrc
 + 
f·Lí
;

268 
uöt32_t
 
ü
, 
l
;

269 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

272 
n2
 = 
f·Lí
 >> 1;

274 #i‚de‡
ARM_MATH_CM0_FAMILY


276 
i
 = 
n2
; i > 0; i--)

278 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC
);

279 
pC
 += 2;

281 
T
 = 
	`_SIMD32_OFFSET
(
pSi
);

282 
T
 = 
	`__SHADD16
(T, 0);

284 
S
 = 
	`_SIMD32_OFFSET
(
pSl
);

285 
S
 = 
	`__SHADD16
(S, 0);

287 
R
 = 
	`__QSUB16
(
T
, 
S
);

289 
	`_SIMD32_OFFSET
(
pSi
Ë
	`__SHADD16
(
T
, 
S
);

290 
pSi
 += 2;

292 #i‚de‡
ARM_MATH_BIG_ENDIAN


294 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

295 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

298 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

299 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

303 
	`_SIMD32_OFFSET
(
pSl
) =

304 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

305 
pSl
 += 2;

310 
ü
 = 0;

311 
i
 = 0; i < 
n2
; i++)

313 
cosVÆ
 = 
pC€f
[
ü
 * 2];

314 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

315 
ü
++;

317 
l
 = 
i
 + 
n2
;

318 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

319 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

321 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

322 
pSrc
[2 * 
i
 + 1] =

323 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

325 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) -

326 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

328 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) +

329 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

335 
	`¨m_ødix4_buâîÊy_övî£_q15
–
pSrc
, 
n2
, (
q15_t
*)
pC€f
, 2u);

337 
	`¨m_ødix4_buâîÊy_övî£_q15
–
pSrc
 + 
f·Lí
, 
n2
, (
q15_t
*)
pC€f
, 2u);

339 
i
 = 0; i < 
f·Lí
 >> 1; i++)

341 
p0
 = 
pSrc
[4*
i
+0];

342 
p1
 = 
pSrc
[4*
i
+1];

343 
p2
 = 
pSrc
[4*
i
+2];

344 
p3
 = 
pSrc
[4*
i
+3];

346 
p0
 <<= 1;

347 
p1
 <<= 1;

348 
p2
 <<= 1;

349 
p3
 <<= 1;

351 
pSrc
[4*
i
+0] = 
p0
;

352 
pSrc
[4*
i
+1] = 
p1
;

353 
pSrc
[4*
i
+2] = 
p2
;

354 
pSrc
[4*
i
+3] = 
p3
;

356 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q31.c

41 
	~"¨m_m©h.h
"

43 
¨m_ødix4_buâîÊy_q31
(

44 
q31_t
 * 
pSrc
,

45 
uöt32_t
 
f·Lí
,

46 
q31_t
 * 
pC€f
,

47 
uöt32_t
 
twidC€fModifõr
);

49 
¨m_ødix4_buâîÊy_övî£_q31
(

50 
q31_t
 * 
pSrc
,

51 
uöt32_t
 
f·Lí
,

52 
q31_t
 * 
pC€f
,

53 
uöt32_t
 
twidC€fModifõr
);

55 
¨m_bôªvîßl_32
(

56 
uöt32_t
 * 
pSrc
,

57 c⁄° 
uöt16_t
 
bôRevLí
,

58 c⁄° 
uöt16_t
 * 
pBôRevTabÀ
);

60 
¨m_cf·_ødix4by2_q31
(

61 
q31_t
 * 
pSrc
,

62 
uöt32_t
 
f·Lí
,

63 c⁄° 
q31_t
 * 
pC€f
);

65 
¨m_cf·_ødix4by2_övî£_q31
(

66 
q31_t
 * 
pSrc
,

67 
uöt32_t
 
f·Lí
,

68 c⁄° 
q31_t
 * 
pC€f
);

89 
	$¨m_cf·_q31
(

90 c⁄° 
¨m_cf·_ö°™˚_q31
 * 
S
,

91 
q31_t
 * 
p1
,

92 
uöt8_t
 
if·Fœg
,

93 
uöt8_t
 
bôRevî£Fœg
)

95 
uöt32_t
 
L
 = 
S
->
f·Lí
;

97 if(
if·Fœg
 == 1u)

99 
L
)

106 
	`¨m_ødix4_buâîÊy_övî£_q31
 ( 
p1
, 
L
, (
q31_t
*)
S
->
pTwiddÀ
, 1 );

113 
	`¨m_cf·_ødix4by2_övî£_q31
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

119 
L
)

126 
	`¨m_ødix4_buâîÊy_q31
 ( 
p1
, 
L
, (
q31_t
*)
S
->
pTwiddÀ
, 1 );

133 
	`¨m_cf·_ødix4by2_q31
 ( 
p1
, 
L
, 
S
->
pTwiddÀ
 );

138 if–
bôRevî£Fœg
 )

139 
	`¨m_bôªvîßl_32
((
uöt32_t
*)
p1
,
S
->
bôRevLígth
,S->
pBôRevTabÀ
);

140 
	}
}

146 
	$¨m_cf·_ødix4by2_q31
(

147 
q31_t
 * 
pSrc
,

148 
uöt32_t
 
f·Lí
,

149 c⁄° 
q31_t
 * 
pC€f
)

151 
uöt32_t
 
i
, 
l
;

152 
uöt32_t
 
n2
, 
ü
;

153 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

154 
q31_t
 
p0
, 
p1
;

156 
n2
 = 
f·Lí
 >> 1;

157 
ü
 = 0;

158 
i
 = 0; i < 
n2
; i++)

160 
cosVÆ
 = 
pC€f
[2*
ü
];

161 
söVÆ
 = 
pC€f
[2*
ü
 + 1];

162 
ü
++;

164 
l
 = 
i
 + 
n2
;

165 
xt
 = (
pSrc
[2 * 
i
] >> 2Ë- (pSrc[2 * 
l
] >> 2);

166 
pSrc
[2 * 
i
] = (pSrc[2 * i] >> 2Ë+ (pSrc[2 * 
l
] >> 2);

168 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 2Ë- (pSrc[2 * 
l
 + 1] >> 2);

169 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] >> 2) + (pSrc[2 * i + 1] >> 2);

171 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

172 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

173 
	`mu…Acc_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

174 
	`mu…Sub_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

176 
pSrc
[2u * 
l
] = 
p0
 << 1;

177 
pSrc
[2u * 
l
 + 1u] = 
p1
 << 1;

182 
	`¨m_ødix4_buâîÊy_q31
–
pSrc
, 
n2
, (
q31_t
*)
pC€f
, 2u);

184 
	`¨m_ødix4_buâîÊy_q31
–
pSrc
 + 
f·Lí
, 
n2
, (
q31_t
*)
pC€f
, 2u);

186 
i
 = 0; i < 
f·Lí
 >> 1; i++)

188 
p0
 = 
pSrc
[4*
i
+0];

189 
p1
 = 
pSrc
[4*
i
+1];

190 
xt
 = 
pSrc
[4*
i
+2];

191 
yt
 = 
pSrc
[4*
i
+3];

193 
p0
 <<= 1;

194 
p1
 <<= 1;

195 
xt
 <<= 1;

196 
yt
 <<= 1;

198 
pSrc
[4*
i
+0] = 
p0
;

199 
pSrc
[4*
i
+1] = 
p1
;

200 
pSrc
[4*
i
+2] = 
xt
;

201 
pSrc
[4*
i
+3] = 
yt
;

204 
	}
}

206 
	$¨m_cf·_ødix4by2_övî£_q31
(

207 
q31_t
 * 
pSrc
,

208 
uöt32_t
 
f·Lí
,

209 c⁄° 
q31_t
 * 
pC€f
)

211 
uöt32_t
 
i
, 
l
;

212 
uöt32_t
 
n2
, 
ü
;

213 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

214 
q31_t
 
p0
, 
p1
;

216 
n2
 = 
f·Lí
 >> 1;

217 
ü
 = 0;

218 
i
 = 0; i < 
n2
; i++)

220 
cosVÆ
 = 
pC€f
[2*
ü
];

221 
söVÆ
 = 
pC€f
[2*
ü
 + 1];

222 
ü
++;

224 
l
 = 
i
 + 
n2
;

225 
xt
 = (
pSrc
[2 * 
i
] >> 2Ë- (pSrc[2 * 
l
] >> 2);

226 
pSrc
[2 * 
i
] = (pSrc[2 * i] >> 2Ë+ (pSrc[2 * 
l
] >> 2);

228 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 2Ë- (pSrc[2 * 
l
 + 1] >> 2);

229 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] >> 2) + (pSrc[2 * i + 1] >> 2);

231 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

232 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

233 
	`mu…Sub_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

234 
	`mu…Acc_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

236 
pSrc
[2u * 
l
] = 
p0
 << 1;

237 
pSrc
[2u * 
l
 + 1u] = 
p1
 << 1;

242 
	`¨m_ødix4_buâîÊy_övî£_q31
–
pSrc
, 
n2
, (
q31_t
*)
pC€f
, 2u);

244 
	`¨m_ødix4_buâîÊy_övî£_q31
–
pSrc
 + 
f·Lí
, 
n2
, (
q31_t
*)
pC€f
, 2u);

246 
i
 = 0; i < 
f·Lí
 >> 1; i++)

248 
p0
 = 
pSrc
[4*
i
+0];

249 
p1
 = 
pSrc
[4*
i
+1];

250 
xt
 = 
pSrc
[4*
i
+2];

251 
yt
 = 
pSrc
[4*
i
+3];

253 
p0
 <<= 1;

254 
p1
 <<= 1;

255 
xt
 <<= 1;

256 
yt
 <<= 1;

258 
pSrc
[4*
i
+0] = 
p0
;

259 
pSrc
[4*
i
+1] = 
p1
;

260 
pSrc
[4*
i
+2] = 
xt
;

261 
pSrc
[4*
i
+3] = 
yt
;

263 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_f32.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix2_buâîÊy_f32
(

45 
Êﬂt32_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
Êﬂt32_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_ødix2_buâîÊy_övî£_f32
(

51 
Êﬂt32_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
Êﬂt32_t
 * 
pC€f
,

54 
uöt16_t
 
twidC€fModifõr
,

55 
Êﬂt32_t
 
⁄ebyf·Lí
);

57 
¨m_bôªvîßl_f32
(

58 
Êﬂt32_t
 * 
pSrc
,

59 
uöt16_t
 
f·Size
,

60 
uöt16_t
 
bôRevFa˘‹
,

61 
uöt16_t
 * 
pBôRevTab
);

82 
	$¨m_cf·_ødix2_f32
(

83 c⁄° 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

84 
Êﬂt32_t
 * 
pSrc
)

87 if(
S
->
if·Fœg
 == 1u)

90 
	`¨m_ødix2_buâîÊy_övî£_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

91 
S
->
twidC€fModifõr
, S->
⁄ebyf·Lí
);

96 
	`¨m_ødix2_buâîÊy_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

97 
S
->
twidC€fModifõr
);

100 if(
S
->
bôRevî£Fœg
 == 1u)

103 
	`¨m_bôªvîßl_f32
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

106 
	}
}

128 
	$¨m_ødix2_buâîÊy_f32
(

129 
Êﬂt32_t
 * 
pSrc
,

130 
uöt32_t
 
f·Lí
,

131 
Êﬂt32_t
 * 
pC€f
,

132 
uöt16_t
 
twidC€fModifõr
)

135 
uöt32_t
 
i
, 
j
, 
k
, 
l
;

136 
uöt32_t
 
n1
, 
n2
, 
ü
;

137 
Êﬂt32_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

138 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
;

139 
Êﬂt32_t
 
a0
, 
a1
;

141 #i‚de‡
ARM_MATH_CM0_FAMILY


144 
n2
 = 
f·Lí
 >> 1;

145 
ü
 = 0;

146 
i
 = 0;

149 
k
 = 
n2
; k > 0; k--)

151 
cosVÆ
 = 
pC€f
[
ü
 * 2];

152 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

155 
ü
 +
twidC€fModifõr
;

159 
l
 = 
i
 + 
n2
;

162 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

163 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

165 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

166 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

168 
p0
 = 
xt
 * 
cosVÆ
;

169 
p1
 = 
yt
 * 
söVÆ
;

170 
p2
 = 
yt
 * 
cosVÆ
;

171 
p3
 = 
xt
 * 
söVÆ
;

173 
pSrc
[2 * 
i
] = 
a0
;

174 
pSrc
[2 * 
i
 + 1] = 
a1
;

176 
pSrc
[2 * 
l
] = 
p0
 + 
p1
;

177 
pSrc
[2 * 
l
 + 1] = 
p2
 - 
p3
;

179 
i
++;

182 
twidC€fModifõr
 <<= 1u;

185 
k
 = 
n2
; k > 2; k = k >> 1)

187 
n1
 = 
n2
;

188 
n2
 =Ç2 >> 1;

189 
ü
 = 0;

192 
j
 = 0;

195 
cosVÆ
 = 
pC€f
[
ü
 * 2];

196 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

197 
ü
 +
twidC€fModifõr
;

200 
i
 = 
j
;

203 
l
 = 
i
 + 
n2
;

204 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

205 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

207 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

208 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

210 
p0
 = 
xt
 * 
cosVÆ
;

211 
p1
 = 
yt
 * 
söVÆ
;

212 
p2
 = 
yt
 * 
cosVÆ
;

213 
p3
 = 
xt
 * 
söVÆ
;

215 
pSrc
[2 * 
i
] = 
a0
;

216 
pSrc
[2 * 
i
 + 1] = 
a1
;

218 
pSrc
[2 * 
l
] = 
p0
 + 
p1
;

219 
pSrc
[2 * 
l
 + 1] = 
p2
 - 
p3
;

221 
i
 +
n1
;

222 }  
i
 < 
f·Lí
 );

223 
j
++;

224 }  
j
 < 
n2
);

225 
twidC€fModifõr
 <<= 1u;

229 
i
 = 0; i < 
f·Lí
; i += 2)

231 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * i + 2];

232 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * i + 2];

234 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * i + 3];

235 
a1
 = 
pSrc
[2 * 
i
 + 3] +ÖSrc[2 * i + 1];

237 
pSrc
[2 * 
i
] = 
a0
;

238 
pSrc
[2 * 
i
 + 1] = 
a1
;

239 
pSrc
[2 * 
i
 + 2] = 
xt
;

240 
pSrc
[2 * 
i
 + 3] = 
yt
;

245 
n2
 = 
f·Lí
;

248 
k
 = 
f·Lí
; k > 1; k = k >> 1)

250 
n1
 = 
n2
;

251 
n2
 =Ç2 >> 1;

252 
ü
 = 0;

255 
j
 = 0;

258 
cosVÆ
 = 
pC€f
[
ü
 * 2];

259 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

260 
ü
 +
twidC€fModifõr
;

263 
i
 = 
j
;

266 
l
 = 
i
 + 
n2
;

267 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

268 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

270 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

271 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

273 
p0
 = 
xt
 * 
cosVÆ
;

274 
p1
 = 
yt
 * 
söVÆ
;

275 
p2
 = 
yt
 * 
cosVÆ
;

276 
p3
 = 
xt
 * 
söVÆ
;

278 
pSrc
[2 * 
i
] = 
a0
;

279 
pSrc
[2 * 
i
 + 1] = 
a1
;

281 
pSrc
[2 * 
l
] = 
p0
 + 
p1
;

282 
pSrc
[2 * 
l
 + 1] = 
p2
 - 
p3
;

284 
i
 +
n1
;

285 } 
i
 < 
f·Lí
);

286 
j
++;

287 } 
j
 < 
n2
);

288 
twidC€fModifõr
 <<= 1u;

293 
	}
}

296 
	$¨m_ødix2_buâîÊy_övî£_f32
(

297 
Êﬂt32_t
 * 
pSrc
,

298 
uöt32_t
 
f·Lí
,

299 
Êﬂt32_t
 * 
pC€f
,

300 
uöt16_t
 
twidC€fModifõr
,

301 
Êﬂt32_t
 
⁄ebyf·Lí
)

304 
uöt32_t
 
i
, 
j
, 
k
, 
l
;

305 
uöt32_t
 
n1
, 
n2
, 
ü
;

306 
Êﬂt32_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

307 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
;

308 
Êﬂt32_t
 
a0
, 
a1
;

310 #i‚de‡
ARM_MATH_CM0_FAMILY


312 
n2
 = 
f·Lí
 >> 1;

313 
ü
 = 0;

316 
i
 = 0; i < 
n2
; i++)

318 
cosVÆ
 = 
pC€f
[
ü
 * 2];

319 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

320 
ü
 +
twidC€fModifõr
;

322 
l
 = 
i
 + 
n2
;

323 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

324 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

326 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

327 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

329 
p0
 = 
xt
 * 
cosVÆ
;

330 
p1
 = 
yt
 * 
söVÆ
;

331 
p2
 = 
yt
 * 
cosVÆ
;

332 
p3
 = 
xt
 * 
söVÆ
;

334 
pSrc
[2 * 
i
] = 
a0
;

335 
pSrc
[2 * 
i
 + 1] = 
a1
;

337 
pSrc
[2 * 
l
] = 
p0
 - 
p1
;

338 
pSrc
[2 * 
l
 + 1] = 
p2
 + 
p3
;

341 
twidC€fModifõr
 <<= 1u;

344 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

346 
n1
 = 
n2
;

347 
n2
 =Ç2 >> 1;

348 
ü
 = 0;

351 
j
 = 0;

354 
cosVÆ
 = 
pC€f
[
ü
 * 2];

355 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

356 
ü
 +
twidC€fModifõr
;

359 
i
 = 
j
;

362 
l
 = 
i
 + 
n2
;

363 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

364 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

366 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

367 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

369 
p0
 = 
xt
 * 
cosVÆ
;

370 
p1
 = 
yt
 * 
söVÆ
;

371 
p2
 = 
yt
 * 
cosVÆ
;

372 
p3
 = 
xt
 * 
söVÆ
;

374 
pSrc
[2 * 
i
] = 
a0
;

375 
pSrc
[2 * 
i
 + 1] = 
a1
;

377 
pSrc
[2 * 
l
] = 
p0
 - 
p1
;

378 
pSrc
[2 * 
l
 + 1] = 
p2
 + 
p3
;

380 
i
 +
n1
;

381 }  
i
 < 
f·Lí
 );

382 
j
++;

383 } 
j
 < 
n2
);

385 
twidC€fModifõr
 <<= 1u;

389 
i
 = 0; i < 
f·Lí
; i += 2)

391 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * i + 2];

392 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * i + 2];

394 
a1
 = 
pSrc
[2 * 
i
 + 3] +ÖSrc[2 * i + 1];

395 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * i + 3];

397 
p0
 = 
a0
 * 
⁄ebyf·Lí
;

398 
p2
 = 
xt
 * 
⁄ebyf·Lí
;

399 
p1
 = 
a1
 * 
⁄ebyf·Lí
;

400 
p3
 = 
yt
 * 
⁄ebyf·Lí
;

402 
pSrc
[2 * 
i
] = 
p0
;

403 
pSrc
[2 * 
i
 + 1] = 
p1
;

404 
pSrc
[2 * 
i
 + 2] = 
p2
;

405 
pSrc
[2 * 
i
 + 3] = 
p3
;

410 
n2
 = 
f·Lí
;

413 
k
 = 
f·Lí
; k > 2; k = k >> 1)

415 
n1
 = 
n2
;

416 
n2
 =Ç2 >> 1;

417 
ü
 = 0;

420 
j
 = 0;

423 
cosVÆ
 = 
pC€f
[
ü
 * 2];

424 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

425 
ü
 = i®+ 
twidC€fModifõr
;

428 
i
 = 
j
;

431 
l
 = 
i
 + 
n2
;

432 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

433 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

435 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

436 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

438 
p0
 = 
xt
 * 
cosVÆ
;

439 
p1
 = 
yt
 * 
söVÆ
;

440 
p2
 = 
yt
 * 
cosVÆ
;

441 
p3
 = 
xt
 * 
söVÆ
;

443 
pSrc
[2 * 
i
] = 
a0
;

444 
pSrc
[2 * 
i
 + 1] = 
a1
;

446 
pSrc
[2 * 
l
] = 
p0
 - 
p1
;

447 
pSrc
[2 * 
l
 + 1] = 
p2
 + 
p3
;

449 
i
 +
n1
;

450 }  
i
 < 
f·Lí
 );

451 
j
++;

452 }  
j
 < 
n2
 );

454 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

457 
n1
 = 
n2
;

458 
n2
 =Ç2 >> 1;

461 
i
 = 0; i < 
f·Lí
; i +
n1
)

463 
l
 = 
i
 + 
n2
;

465 
a0
 = 
pSrc
[2 * 
i
] +ÖSrc[2 * 
l
];

466 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

468 
a1
 = 
pSrc
[2 * 
l
 + 1] +ÖSrc[2 * 
i
 + 1];

469 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

471 
p0
 = 
a0
 * 
⁄ebyf·Lí
;

472 
p2
 = 
xt
 * 
⁄ebyf·Lí
;

473 
p1
 = 
a1
 * 
⁄ebyf·Lí
;

474 
p3
 = 
yt
 * 
⁄ebyf·Lí
;

476 
pSrc
[2 * 
i
] = 
p0
;

477 
pSrc
[2u * 
l
] = 
p2
;

479 
pSrc
[2 * 
i
 + 1] = 
p1
;

480 
pSrc
[2u * 
l
 + 1u] = 
p3
;

485 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_f32.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

76 
¨m_°©us
 
	$¨m_cf·_ødix2_öô_f32
(

77 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

78 
uöt16_t
 
f·Lí
,

79 
uöt8_t
 
if·Fœg
,

80 
uöt8_t
 
bôRevî£Fœg
)

83 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

86 
S
->
f·Lí
 = fftLen;

89 
S
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f
;

92 
S
->
if·Fœg
 = ifftFlag;

95 
S
->
bôRevî£Fœg
 = bitReverseFlag;

98 
S
->
f·Lí
)

105 
S
->
twidC€fModifõr
 = 1u;

107 
S
->
bôRevFa˘‹
 = 1u;

109 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

111 
S
->
⁄ebyf·Lí
 = 0.000244140625;

118 
S
->
twidC€fModifõr
 = 2u;

120 
S
->
bôRevFa˘‹
 = 2u;

122 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[1];

124 
S
->
⁄ebyf·Lí
 = 0.00048828125;

131 
S
->
twidC€fModifõr
 = 4u;

133 
S
->
bôRevFa˘‹
 = 4u;

135 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

137 
S
->
⁄ebyf·Lí
 = 0.0009765625f;

144 
S
->
twidC€fModifõr
 = 8u;

146 
S
->
bôRevFa˘‹
 = 8u;

148 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[7];

150 
S
->
⁄ebyf·Lí
 = 0.001953125;

155 
S
->
twidC€fModifõr
 = 16u;

156 
S
->
bôRevFa˘‹
 = 16u;

157 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

158 
S
->
⁄ebyf·Lí
 = 0.00390625f;

163 
S
->
twidC€fModifõr
 = 32u;

164 
S
->
bôRevFa˘‹
 = 32u;

165 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[31];

166 
S
->
⁄ebyf·Lí
 = 0.0078125;

171 
S
->
twidC€fModifõr
 = 64u;

172 
S
->
bôRevFa˘‹
 = 64u;

173 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

174 
S
->
⁄ebyf·Lí
 = 0.015625f;

179 
S
->
twidC€fModifõr
 = 128u;

180 
S
->
bôRevFa˘‹
 = 128u;

181 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[127];

182 
S
->
⁄ebyf·Lí
 = 0.03125;

187 
S
->
twidC€fModifõr
 = 256u;

188 
S
->
bôRevFa˘‹
 = 256u;

189 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

190 
S
->
⁄ebyf·Lí
 = 0.0625f;

196 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

200  (
°©us
);

201 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

76 
¨m_°©us
 
	$¨m_cf·_ødix2_öô_q15
(

77 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

78 
uöt16_t
 
f·Lí
,

79 
uöt8_t
 
if·Fœg
,

80 
uöt8_t
 
bôRevî£Fœg
)

83 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

86 
S
->
f·Lí
 = fftLen;

89 
S
->
pTwiddÀ
 = (
q15_t
 *Ë
twiddÀC€f_4096_q15
;

91 
S
->
if·Fœg
 = ifftFlag;

93 
S
->
bôRevî£Fœg
 = bitReverseFlag;

96 
S
->
f·Lí
)

102 
S
->
twidC€fModifõr
 = 1u;

104 
S
->
bôRevFa˘‹
 = 1u;

106 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

114 
S
->
twidC€fModifõr
 = 2u;

116 
S
->
bôRevFa˘‹
 = 2u;

118 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[1];

124 
S
->
twidC€fModifõr
 = 4u;

125 
S
->
bôRevFa˘‹
 = 4u;

126 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

132 
S
->
twidC€fModifõr
 = 8u;

133 
S
->
bôRevFa˘‹
 = 8u;

134 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[7];

140 
S
->
twidC€fModifõr
 = 16u;

141 
S
->
bôRevFa˘‹
 = 16u;

142 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

148 
S
->
twidC€fModifõr
 = 32u;

149 
S
->
bôRevFa˘‹
 = 32u;

150 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[31];

156 
S
->
twidC€fModifõr
 = 64u;

157 
S
->
bôRevFa˘‹
 = 64u;

158 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

164 
S
->
twidC€fModifõr
 = 128u;

165 
S
->
bôRevFa˘‹
 = 128u;

166 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[127];

172 
S
->
twidC€fModifõr
 = 256u;

173 
S
->
bôRevFa˘‹
 = 256u;

174 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

180 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

184  (
°©us
);

185 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q31.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

78 
¨m_°©us
 
	$¨m_cf·_ødix2_öô_q31
(

79 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

80 
uöt16_t
 
f·Lí
,

81 
uöt8_t
 
if·Fœg
,

82 
uöt8_t
 
bôRevî£Fœg
)

85 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

88 
S
->
f·Lí
 = fftLen;

91 
S
->
pTwiddÀ
 = (
q31_t
 *Ë
twiddÀC€f_4096_q31
;

93 
S
->
if·Fœg
 = ifftFlag;

95 
S
->
bôRevî£Fœg
 = bitReverseFlag;

98 
S
->
f·Lí
)

103 
S
->
twidC€fModifõr
 = 1u;

105 
S
->
bôRevFa˘‹
 = 1u;

107 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

113 
S
->
twidC€fModifõr
 = 2u;

115 
S
->
bôRevFa˘‹
 = 2u;

117 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[1];

123 
S
->
twidC€fModifõr
 = 4u;

125 
S
->
bôRevFa˘‹
 = 4u;

127 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

133 
S
->
twidC€fModifõr
 = 8u;

135 
S
->
bôRevFa˘‹
 = 8u;

137 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[7];

142 
S
->
twidC€fModifõr
 = 16u;

143 
S
->
bôRevFa˘‹
 = 16u;

144 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

149 
S
->
twidC€fModifõr
 = 32u;

150 
S
->
bôRevFa˘‹
 = 32u;

151 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[31];

156 
S
->
twidC€fModifõr
 = 64u;

157 
S
->
bôRevFa˘‹
 = 64u;

158 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

163 
S
->
twidC€fModifõr
 = 128u;

164 
S
->
bôRevFa˘‹
 = 128u;

165 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[127];

170 
S
->
twidC€fModifõr
 = 256u;

171 
S
->
bôRevFa˘‹
 = 256u;

172 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

178 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

182  (
°©us
);

183 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q15.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix2_buâîÊy_q15
(

45 
q15_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
q15_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_ødix2_buâîÊy_övî£_q15
(

51 
q15_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
q15_t
 * 
pC€f
,

54 
uöt16_t
 
twidC€fModifõr
);

56 
¨m_bôªvîßl_q15
(

57 
q15_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

80 
	$¨m_cf·_ødix2_q15
(

81 c⁄° 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

82 
q15_t
 * 
pSrc
)

85 if(
S
->
if·Fœg
 == 1u)

87 
	`¨m_ødix2_buâîÊy_övî£_q15
(
pSrc
, 
S
->
f·Lí
,

88 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

92 
	`¨m_ødix2_buâîÊy_q15
(
pSrc
, 
S
->
f·Lí
,

93 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

96 
	`¨m_bôªvîßl_q15
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

97 
	}
}

103 
	$¨m_ødix2_buâîÊy_q15
(

104 
q15_t
 * 
pSrc
,

105 
uöt32_t
 
f·Lí
,

106 
q15_t
 * 
pC€f
,

107 
uöt16_t
 
twidC€fModifõr
)

109 #i‚de‡
ARM_MATH_CM0_FAMILY


111 
i
, 
j
, 
k
, 
l
;

112 
n1
, 
n2
, 
ü
;

113 
q15_t
 
ö
;

114 
q31_t
 
T
, 
S
, 
R
;

115 
q31_t
 
c€ff
, 
out1
, 
out2
;

118 
n2
 = 
f·Lí
;

120 
n1
 = 
n2
;

121 
n2
 =Ç2 >> 1;

122 
ü
 = 0;

125 
i
 = 0; i < 
n2
; i++)

127 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

129 
ü
 = i®+ 
twidC€fModifõr
;

131 
l
 = 
i
 + 
n2
;

133 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

134 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

135 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

137 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

138 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

139 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

141 
R
 = 
	`__QSUB16
(
T
, 
S
);

143 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

145 #i‚de‡
ARM_MATH_BIG_ENDIAN


147 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

148 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

152 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

153 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

157 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

158 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

160 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

162 
ü
 = i®+ 
twidC€fModifõr
;

165 
i
++;

166 
l
++;

168 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

169 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

170 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

172 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

173 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

174 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

176 
R
 = 
	`__QSUB16
(
T
, 
S
);

178 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

180 #i‚de‡
ARM_MATH_BIG_ENDIAN


182 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

183 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

187 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

188 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

192 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

193 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

197 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

200 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

202 
n1
 = 
n2
;

203 
n2
 =Ç2 >> 1;

204 
ü
 = 0;

207 
j
 = 0; j < 
n2
; j++)

209 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

211 
ü
 = i®+ 
twidC€fModifõr
;

214 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

216 
l
 = 
i
 + 
n2
;

218 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

220 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

222 
R
 = 
	`__QSUB16
(
T
, 
S
);

224 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

226 #i‚de‡
ARM_MATH_BIG_ENDIAN


228 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

229 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

233 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

234 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

238 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

239 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

241 
i
 +
n1
;

243 
l
 = 
i
 + 
n2
;

245 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

247 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

249 
R
 = 
	`__QSUB16
(
T
, 
S
);

251 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

253 #i‚de‡
ARM_MATH_BIG_ENDIAN


255 
out1
 = 
	`__SMUAD
(
c€ff
, 
R
) >> 16;

256 
out2
 = 
	`__SMUSDX
(
c€ff
, 
R
);

260 
out1
 = 
	`__SMUSDX
(
R
, 
c€ff
) >> 16u;

261 
out2
 = 
	`__SMUAD
(
c€ff
, 
R
);

265 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

266 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

272 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

275 
n1
 = 
n2
;

276 
n2
 =Ç2 >> 1;

277 
ü
 = 0;

279 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

281 
ü
 = i®+ 
twidC€fModifõr
;

284 
i
 = 0; i < 
f·Lí
; i +
n1
)

286 
l
 = 
i
 + 
n2
;

288 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

290 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

292 
R
 = 
	`__QSUB16
(
T
, 
S
);

294 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__QADD16
(
T
, 
S
);

296 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)Ë
R
;

298 
i
 +
n1
;

299 
l
 = 
i
 + 
n2
;

301 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

303 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

305 
R
 = 
	`__QSUB16
(
T
, 
S
);

307 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__QADD16
(
T
, 
S
);

309 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)Ë
R
;

316 
i
, 
j
, 
k
, 
l
;

317 
n1
, 
n2
, 
ü
;

318 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

322 
n2
 = 
f·Lí
;

324 
n1
 = 
n2
;

325 
n2
 =Ç2 >> 1;

326 
ü
 = 0;

329 
j
 = 0; j < 
n2
; j++)

331 
cosVÆ
 = 
pC€f
[
ü
 * 2];

332 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

333 
ü
 = i®+ 
twidC€fModifõr
;

336 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

338 
l
 = 
i
 + 
n2
;

339 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

340 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

342 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

343 
pSrc
[2 * 
i
 + 1] =

344 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

346 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) +

347 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

349 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) -

350 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

356 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

359 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

361 
n1
 = 
n2
;

362 
n2
 =Ç2 >> 1;

363 
ü
 = 0;

366 
j
 = 0; j < 
n2
; j++)

368 
cosVÆ
 = 
pC€f
[
ü
 * 2];

369 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

370 
ü
 = i®+ 
twidC€fModifõr
;

373 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

375 
l
 = 
i
 + 
n2
;

376 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

377 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

379 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

380 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

382 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) +

383 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

385 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) -

386 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

392 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

395 
n1
 = 
n2
;

396 
n2
 =Ç2 >> 1;

397 
ü
 = 0;

400 
j
 = 0; j < 
n2
; j++)

402 
cosVÆ
 = 
pC€f
[
ü
 * 2];

403 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

405 
ü
 = i®+ 
twidC€fModifõr
;

408 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

410 
l
 = 
i
 + 
n2
;

411 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

412 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

414 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

415 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

417 
pSrc
[2u * 
l
] = 
xt
;

419 
pSrc
[2u * 
l
 + 1u] = 
yt
;

425 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

429 
	}
}

432 
	$¨m_ødix2_buâîÊy_övî£_q15
(

433 
q15_t
 * 
pSrc
,

434 
uöt32_t
 
f·Lí
,

435 
q15_t
 * 
pC€f
,

436 
uöt16_t
 
twidC€fModifõr
)

438 #i‚de‡
ARM_MATH_CM0_FAMILY


440 
i
, 
j
, 
k
, 
l
;

441 
n1
, 
n2
, 
ü
;

442 
q15_t
 
ö
;

443 
q31_t
 
T
, 
S
, 
R
;

444 
q31_t
 
c€ff
, 
out1
, 
out2
;

447 
n2
 = 
f·Lí
;

449 
n1
 = 
n2
;

450 
n2
 =Ç2 >> 1;

451 
ü
 = 0;

454 
i
 = 0; i < 
n2
; i++)

456 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

458 
ü
 = i®+ 
twidC€fModifõr
;

460 
l
 = 
i
 + 
n2
;

462 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

463 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

464 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

466 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

467 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

468 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

470 
R
 = 
	`__QSUB16
(
T
, 
S
);

472 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

474 #i‚de‡
ARM_MATH_BIG_ENDIAN


476 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

477 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

480 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

481 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

485 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

486 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

488 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

490 
ü
 = i®+ 
twidC€fModifõr
;

493 
i
++;

494 
l
++;

496 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

497 
ö
 = ((
öt16_t
Ë(
T
 & 0xFFFF)) >> 1;

498 
T
 = ((T >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

500 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

501 
ö
 = ((
öt16_t
Ë(
S
 & 0xFFFF)) >> 1;

502 
S
 = ((S >> 1Ë& 0xFFFF0000Ë| (
ö
 & 0xFFFF);

504 
R
 = 
	`__QSUB16
(
T
, 
S
);

506 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

508 #i‚de‡
ARM_MATH_BIG_ENDIAN


510 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

511 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

514 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

515 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

519 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

520 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

524 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

527 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

529 
n1
 = 
n2
;

530 
n2
 =Ç2 >> 1;

531 
ü
 = 0;

534 
j
 = 0; j < 
n2
; j++)

536 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

538 
ü
 = i®+ 
twidC€fModifõr
;

541 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

543 
l
 = 
i
 + 
n2
;

545 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

547 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

549 
R
 = 
	`__QSUB16
(
T
, 
S
);

551 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

553 #i‚de‡
ARM_MATH_BIG_ENDIAN


555 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

556 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

560 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

561 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

565 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

566 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

568 
i
 +
n1
;

570 
l
 = 
i
 + 
n2
;

572 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

574 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

576 
R
 = 
	`__QSUB16
(
T
, 
S
);

578 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__SHADD16
(
T
, 
S
);

580 #i‚de‡
ARM_MATH_BIG_ENDIAN


582 
out1
 = 
	`__SMUSD
(
c€ff
, 
R
) >> 16;

583 
out2
 = 
	`__SMUADX
(
c€ff
, 
R
);

586 
out1
 = 
	`__SMUADX
(
R
, 
c€ff
) >> 16u;

587 
out2
 = 
	`__SMUSD
(
	`__QSUB
(0, 
c€ff
), 
R
);

591 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)) =

592 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

598 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

601 
n1
 = 
n2
;

602 
n2
 =Ç2 >> 1;

603 
ü
 = 0;

606 
j
 = 0; j < 
n2
; j++)

608 
c€ff
 = 
	`_SIMD32_OFFSET
(
pC€f
 + (
ü
 * 2u));

610 
ü
 = i®+ 
twidC€fModifõr
;

613 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

615 
l
 = 
i
 + 
n2
;

617 
T
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
));

619 
S
 = 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
l
));

621 
R
 = 
	`__QSUB16
(
T
, 
S
);

623 
	`_SIMD32_OFFSET
(
pSrc
 + (2 * 
i
)Ë
	`__QADD16
(
T
, 
S
);

625 
	`_SIMD32_OFFSET
(
pSrc
 + (2u * 
l
)Ë
R
;

631 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

636 
i
, 
j
, 
k
, 
l
;

637 
n1
, 
n2
, 
ü
;

638 
q15_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

641 
n2
 = 
f·Lí
;

643 
n1
 = 
n2
;

644 
n2
 =Ç2 >> 1;

645 
ü
 = 0;

648 
j
 = 0; j < 
n2
; j++)

650 
cosVÆ
 = 
pC€f
[
ü
 * 2];

651 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

652 
ü
 = i®+ 
twidC€fModifõr
;

655 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

657 
l
 = 
i
 + 
n2
;

658 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

659 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

661 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

662 
pSrc
[2 * 
i
 + 1] =

663 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

665 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) -

666 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

668 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) +

669 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

675 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

678 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

680 
n1
 = 
n2
;

681 
n2
 =Ç2 >> 1;

682 
ü
 = 0;

685 
j
 = 0; j < 
n2
; j++)

687 
cosVÆ
 = 
pC€f
[
ü
 * 2];

688 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

689 
ü
 = i®+ 
twidC€fModifõr
;

692 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

694 
l
 = 
i
 + 
n2
;

695 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

696 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

698 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

699 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

701 
pSrc
[2u * 
l
] = (((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
cosVÆ
) >> 16)) -

702 ((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
söVÆ
) >> 16)));

704 
pSrc
[2u * 
l
 + 1u] = (((
öt16_t
Ë(((
q31_t
Ë
yt
 * 
cosVÆ
) >> 16)) +

705 ((
öt16_t
Ë(((
q31_t
Ë
xt
 * 
söVÆ
) >> 16)));

711 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

714 
n1
 = 
n2
;

715 
n2
 =Ç2 >> 1;

716 
ü
 = 0;

718 
cosVÆ
 = 
pC€f
[
ü
 * 2];

719 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

721 
ü
 = i®+ 
twidC€fModifõr
;

724 
i
 = 0; i < 
f·Lí
; i +
n1
)

726 
l
 = 
i
 + 
n2
;

727 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

728 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

730 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

731 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

733 
pSrc
[2u * 
l
] = 
xt
;

735 
pSrc
[2u * 
l
 + 1u] = 
yt
;

742 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q31.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix2_buâîÊy_q31
(

45 
q31_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
q31_t
 * 
pC€f
,

48 
uöt16_t
 
twidC€fModifõr
);

50 
¨m_ødix2_buâîÊy_övî£_q31
(

51 
q31_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
q31_t
 * 
pC€f
,

54 
uöt16_t
 
twidC€fModifõr
);

56 
¨m_bôªvîßl_q31
(

57 
q31_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

80 
	$¨m_cf·_ødix2_q31
(

81 c⁄° 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

82 
q31_t
 * 
pSrc
)

85 if(
S
->
if·Fœg
 == 1u)

87 
	`¨m_ødix2_buâîÊy_övî£_q31
(
pSrc
, 
S
->
f·Lí
,

88 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

92 
	`¨m_ødix2_buâîÊy_q31
(
pSrc
, 
S
->
f·Lí
,

93 
S
->
pTwiddÀ
, S->
twidC€fModifõr
);

96 
	`¨m_bôªvîßl_q31
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

97 
	}
}

103 
	$¨m_ødix2_buâîÊy_q31
(

104 
q31_t
 * 
pSrc
,

105 
uöt32_t
 
f·Lí
,

106 
q31_t
 * 
pC€f
,

107 
uöt16_t
 
twidC€fModifõr
)

110 
i
, 
j
, 
k
, 
l
, 
m
;

111 
n1
, 
n2
, 
ü
;

112 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

113 
q31_t
 
p0
, 
p1
;

116 
n2
 = 
f·Lí
;

118 
n1
 = 
n2
;

119 
n2
 =Ç2 >> 1;

120 
ü
 = 0;

123 
i
 = 0; i < 
n2
; i++)

125 
cosVÆ
 = 
pC€f
[
ü
 * 2];

126 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

127 
ü
 = i®+ 
twidC€fModifõr
;

129 
l
 = 
i
 + 
n2
;

130 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

131 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

133 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

134 
pSrc
[2 * 
i
 + 1] =

135 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

137 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

138 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

139 
	`mu…Acc_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

140 
	`mu…Sub_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

142 
pSrc
[2u * 
l
] = 
p0
;

143 
pSrc
[2u * 
l
 + 1u] = 
p1
;

147 
twidC€fModifõr
 <<= 1u;

150 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

152 
n1
 = 
n2
;

153 
n2
 =Ç2 >> 1;

154 
ü
 = 0;

157 
j
 = 0; j < 
n2
; j++)

159 
cosVÆ
 = 
pC€f
[
ü
 * 2];

160 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

161 
ü
 = i®+ 
twidC€fModifõr
;

164 
i
 = 
j
;

165 
m
 = 
f·Lí
 / 
n1
;

168 
l
 = 
i
 + 
n2
;

169 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

170 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

172 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

173 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

175 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

176 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

177 
	`mu…Acc_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

178 
	`mu…Sub_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

180 
pSrc
[2u * 
l
] = 
p0
;

181 
pSrc
[2u * 
l
 + 1u] = 
p1
;

182 
i
 +
n1
;

183 
m
--;

184 }  
m
 > 0);

188 
twidC€fModifõr
 <<= 1u;

191 
n1
 = 
n2
;

192 
n2
 =Ç2 >> 1;

193 
ü
 = 0;

195 
cosVÆ
 = 
pC€f
[
ü
 * 2];

196 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

197 
ü
 = i®+ 
twidC€fModifõr
;

200 
i
 = 0; i < 
f·Lí
; i +
n1
)

202 
l
 = 
i
 + 
n2
;

203 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

204 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

206 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

207 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

209 
pSrc
[2u * 
l
] = 
xt
;

211 
pSrc
[2u * 
l
 + 1u] = 
yt
;

213 
i
 +
n1
;

214 
l
 = 
i
 + 
n2
;

216 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

217 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

219 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

220 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

222 
pSrc
[2u * 
l
] = 
xt
;

224 
pSrc
[2u * 
l
 + 1u] = 
yt
;

228 
	}
}

231 
	$¨m_ødix2_buâîÊy_övî£_q31
(

232 
q31_t
 * 
pSrc
,

233 
uöt32_t
 
f·Lí
,

234 
q31_t
 * 
pC€f
,

235 
uöt16_t
 
twidC€fModifõr
)

238 
i
, 
j
, 
k
, 
l
;

239 
n1
, 
n2
, 
ü
;

240 
q31_t
 
xt
, 
yt
, 
cosVÆ
, 
söVÆ
;

241 
q31_t
 
p0
, 
p1
;

244 
n2
 = 
f·Lí
;

246 
n1
 = 
n2
;

247 
n2
 =Ç2 >> 1;

248 
ü
 = 0;

251 
i
 = 0; i < 
n2
; i++)

253 
cosVÆ
 = 
pC€f
[
ü
 * 2];

254 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

255 
ü
 = i®+ 
twidC€fModifõr
;

257 
l
 = 
i
 + 
n2
;

258 
xt
 = (
pSrc
[2 * 
i
] >> 1uË- (pSrc[2 * 
l
] >> 1u);

259 
pSrc
[2 * 
i
] = (’Src[2 * i] >> 1uË+ (pSrc[2 * 
l
] >> 1u)) >> 1u;

261 
yt
 = (
pSrc
[2 * 
i
 + 1] >> 1uË- (pSrc[2 * 
l
 + 1] >> 1u);

262 
pSrc
[2 * 
i
 + 1] =

263 ((
pSrc
[2 * 
l
 + 1] >> 1uË+ (pSrc[2 * 
i
 + 1] >> 1u)) >> 1u;

265 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

266 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

267 
	`mu…Sub_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

268 
	`mu…Acc_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

270 
pSrc
[2u * 
l
] = 
p0
;

271 
pSrc
[2u * 
l
 + 1u] = 
p1
;

274 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

277 
k
 = 
f·Lí
 / 2; k > 2; k = k >> 1)

279 
n1
 = 
n2
;

280 
n2
 =Ç2 >> 1;

281 
ü
 = 0;

284 
j
 = 0; j < 
n2
; j++)

286 
cosVÆ
 = 
pC€f
[
ü
 * 2];

287 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

288 
ü
 = i®+ 
twidC€fModifõr
;

291 
i
 = 
j
; i < 
f·Lí
; i +
n1
)

293 
l
 = 
i
 + 
n2
;

294 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

295 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]) >> 1u;

297 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

298 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]) >> 1u;

300 
	`mu…_32x32_kìp32_R
(
p0
, 
xt
, 
cosVÆ
);

301 
	`mu…_32x32_kìp32_R
(
p1
, 
yt
, 
cosVÆ
);

302 
	`mu…Sub_32x32_kìp32_R
(
p0
, 
yt
, 
söVÆ
);

303 
	`mu…Acc_32x32_kìp32_R
(
p1
, 
xt
, 
söVÆ
);

305 
pSrc
[2u * 
l
] = 
p0
;

306 
pSrc
[2u * 
l
 + 1u] = 
p1
;

311 
twidC€fModifõr
 =ÅwidCoefModifier << 1u;

314 
n1
 = 
n2
;

315 
n2
 =Ç2 >> 1;

316 
ü
 = 0;

318 
cosVÆ
 = 
pC€f
[
ü
 * 2];

319 
söVÆ
 = 
pC€f
[(
ü
 * 2) + 1];

320 
ü
 = i®+ 
twidC€fModifõr
;

323 
i
 = 0; i < 
f·Lí
; i +
n1
)

325 
l
 = 
i
 + 
n2
;

326 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

327 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

329 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

330 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

332 
pSrc
[2u * 
l
] = 
xt
;

334 
pSrc
[2u * 
l
 + 1u] = 
yt
;

336 
i
 +
n1
;

337 
l
 = 
i
 + 
n2
;

339 
xt
 = 
pSrc
[2 * 
i
] -ÖSrc[2 * 
l
];

340 
pSrc
[2 * 
i
] = (pSrc[2 * i] +ÖSrc[2 * 
l
]);

342 
yt
 = 
pSrc
[2 * 
i
 + 1] -ÖSrc[2 * 
l
 + 1];

343 
pSrc
[2 * 
i
 + 1] = (pSrc[2 * 
l
 + 1] +ÖSrc[2 * i + 1]);

345 
pSrc
[2u * 
l
] = 
xt
;

347 
pSrc
[2u * 
l
 + 1u] = 
yt
;

351 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_f32.c

42 
	~"¨m_m©h.h
"

44 
¨m_bôªvîßl_f32
(

45 
Êﬂt32_t
 * 
pSrc
,

46 
uöt16_t
 
f·Size
,

47 
uöt16_t
 
bôRevFa˘‹
,

48 
uöt16_t
 * 
pBôRevTab
);

67 
	$¨m_ødix4_buâîÊy_f32
(

68 
Êﬂt32_t
 * 
pSrc
,

69 
uöt16_t
 
f·Lí
,

70 
Êﬂt32_t
 * 
pC€f
,

71 
uöt16_t
 
twidC€fModifõr
)

74 
Êﬂt32_t
 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

75 
uöt32_t
 
ü1
, 
ü2
, 
ü3
;

76 
uöt32_t
 
i0
, 
i1
, 
i2
, 
i3
;

77 
uöt32_t
 
n1
, 
n2
, 
j
, 
k
;

79 #i‚de‡
ARM_MATH_CM0_FAMILY_FAMILY


83 
Êﬂt32_t
 
xaIn
, 
yaIn
, 
xbIn
, 
ybIn
, 
xcIn
, 
ycIn
, 
xdIn
, 
ydIn
;

84 
Êﬂt32_t
 
X≠lusc
, 
Xb∂usd
, 
Y≠lusc
, 
Yb∂usd
, 
Xamöusc
, 
Xbmöusd
, 
Yamöusc
,

85 
Ybmöusd
;

86 
Êﬂt32_t
 
Xb12C_out
, 
Yb12C_out
, 
Xc12C_out
, 
Yc12C_out
, 
Xd12C_out
, 
Yd12C_out
;

87 
Êﬂt32_t
 
Xb12_out
, 
Yb12_out
, 
Xc12_out
, 
Yc12_out
, 
Xd12_out
, 
Yd12_out
;

88 
Êﬂt32_t
 *
±r1
;

89 
Êﬂt32_t
 
p0
,
p1
,
p2
,
p3
,
p4
,
p5
;

90 
Êﬂt32_t
 
a0
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
;

93 
n2
 = 
f·Lí
;

94 
n1
 = 
n2
;

97 
n2
 >>= 2u;

98 
i0
 = 0u;

99 
ü1
 = 0u;

101 
j
 = 
n2
;

108 
i1
 = 
i0
 + 
n2
;

109 
i2
 = 
i1
 + 
n2
;

110 
i3
 = 
i2
 + 
n2
;

112 
xaIn
 = 
pSrc
[(2u * 
i0
)];

113 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

115 
xbIn
 = 
pSrc
[(2u * 
i1
)];

116 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

118 
xcIn
 = 
pSrc
[(2u * 
i2
)];

119 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

121 
xdIn
 = 
pSrc
[(2u * 
i3
)];

122 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

125 
X≠lusc
 = 
xaIn
 + 
xcIn
;

127 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

129 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

131 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

134 
ü2
 = 
ü1
 + ia1;

135 
co2
 = 
pC€f
[
ü2
 * 2u];

136 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

139 
Xamöusc
 = 
xaIn
 - 
xcIn
;

141 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

143 
Yamöusc
 = 
yaIn
 - 
ycIn
;

145 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

148 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

150 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

153 
Xb12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

155 
Yb12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

157 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

159 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

161 
Xd12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

163 
Yd12C_out
 = (
Xbmöusd
 + 
Yamöusc
);

165 
co1
 = 
pC€f
[
ü1
 * 2u];

166 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

169 
ü3
 = 
ü2
 + 
ü1
;

170 
co3
 = 
pC€f
[
ü3
 * 2u];

171 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

173 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

174 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

175 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

176 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

177 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

178 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

182 
p0
 = 
Yb12C_out
 * 
si1
;

185 
p1
 = 
Xb12C_out
 * 
si1
;

188 
p2
 = 
Yc12C_out
 * 
si2
;

191 
p3
 = 
Xc12C_out
 * 
si2
;

194 
p4
 = 
Yd12C_out
 * 
si3
;

197 
p5
 = 
Xd12C_out
 * 
si3
;

199 
Xb12_out
 +
p0
;

200 
Yb12_out
 -
p1
;

201 
Xc12_out
 +
p2
;

202 
Yc12_out
 -
p3
;

203 
Xd12_out
 +
p4
;

204 
Yd12_out
 -
p5
;

207 
pSrc
[2u * 
i1
] = 
Xc12_out
;

210 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

213 
pSrc
[2u * 
i2
] = 
Xb12_out
;

216 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

219 
pSrc
[2u * 
i3
] = 
Xd12_out
;

222 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

225 
ü1
 +
twidC€fModifõr
;

228 
i0
++;

231 --
j
);

233 
twidC€fModifõr
 <<= 2u;

236 
k
 = 
f·Lí
 >> 2u; k > 4u; k >>= 2u)

239 
n1
 = 
n2
;

240 
n2
 >>= 2u;

241 
ü1
 = 0u;

244 
j
 = 0;

248 
ü2
 = 
ü1
 + ia1;

249 
ü3
 = 
ü2
 + 
ü1
;

250 
co1
 = 
pC€f
[
ü1
 * 2u];

251 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

252 
co2
 = 
pC€f
[
ü2
 * 2u];

253 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

254 
co3
 = 
pC€f
[
ü3
 * 2u];

255 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

258 
ü1
 +
twidC€fModifõr
;

260 
i0
 = 
j
;

265 
i1
 = 
i0
 + 
n2
;

266 
i2
 = 
i1
 + 
n2
;

267 
i3
 = 
i2
 + 
n2
;

269 
xaIn
 = 
pSrc
[(2u * 
i0
)];

270 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

272 
xbIn
 = 
pSrc
[(2u * 
i1
)];

273 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

275 
xcIn
 = 
pSrc
[(2u * 
i2
)];

276 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

278 
xdIn
 = 
pSrc
[(2u * 
i3
)];

279 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

282 
Xamöusc
 = 
xaIn
 - 
xcIn
;

284 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

286 
Yamöusc
 = 
yaIn
 - 
ycIn
;

288 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

291 
X≠lusc
 = 
xaIn
 + 
xcIn
;

293 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

295 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

297 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

300 
Xb12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

302 
Yb12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

304 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

306 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

308 
Xd12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

310 
Yd12C_out
 = (
Xbmöusd
 + 
Yamöusc
);

312 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

313 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

315 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

316 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

317 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

318 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

319 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

320 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

324 
p0
 = 
Yb12C_out
 * 
si1
;

327 
p1
 = 
Xb12C_out
 * 
si1
;

330 
p2
 = 
Yc12C_out
 * 
si2
;

333 
p3
 = 
Xc12C_out
 * 
si2
;

336 
p4
 = 
Yd12C_out
 * 
si3
;

339 
p5
 = 
Xd12C_out
 * 
si3
;

341 
Xb12_out
 +
p0
;

342 
Yb12_out
 -
p1
;

343 
Xc12_out
 +
p2
;

344 
Yc12_out
 -
p3
;

345 
Xd12_out
 +
p4
;

346 
Yd12_out
 -
p5
;

349 
pSrc
[2u * 
i1
] = 
Xc12_out
;

352 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

355 
pSrc
[2u * 
i2
] = 
Xb12_out
;

358 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

361 
pSrc
[2u * 
i3
] = 
Xd12_out
;

364 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

366 
i0
 +
n1
;

367 } 
i0
 < 
f·Lí
);

368 
j
++;

369 } 
j
 <(
n2
 - 1u));

370 
twidC€fModifõr
 <<= 2u;

373 
j
 = 
f·Lí
 >> 2;

374 
±r1
 = &
pSrc
[0];

379 
xaIn
 = 
±r1
[0];

380 
yaIn
 = 
±r1
[1];

381 
xbIn
 = 
±r1
[2];

382 
ybIn
 = 
±r1
[3];

383 
xcIn
 = 
±r1
[4];

384 
ycIn
 = 
±r1
[5];

385 
xdIn
 = 
±r1
[6];

386 
ydIn
 = 
±r1
[7];

389 
X≠lusc
 = 
xaIn
 + 
xcIn
;

392 
Xamöusc
 = 
xaIn
 - 
xcIn
;

395 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

398 
Yamöusc
 = 
yaIn
 - 
ycIn
;

401 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

404 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

407 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

410 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

413 
a0
 = (
X≠lusc
 + 
Xb∂usd
);

415 
a1
 = (
Y≠lusc
 + 
Yb∂usd
);

417 
a2
 = (
X≠lusc
 - 
Xb∂usd
);

419 
a3
 = (
Y≠lusc
 - 
Yb∂usd
);

421 
a4
 = (
Xamöusc
 + 
Ybmöusd
);

423 
a5
 = (
Yamöusc
 - 
Xbmöusd
);

425 
a6
 = (
Xamöusc
 - 
Ybmöusd
);

427 
a7
 = (
Xbmöusd
 + 
Yamöusc
);

429 
±r1
[0] = 
a0
;

430 
±r1
[1] = 
a1
;

431 
±r1
[2] = 
a2
;

432 
±r1
[3] = 
a3
;

433 
±r1
[4] = 
a4
;

434 
±r1
[5] = 
a5
;

435 
±r1
[6] = 
a6
;

436 
±r1
[7] = 
a7
;

439 
±r1
 += 8u;

440 } --
j
);

444 
Êﬂt32_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
;

449 
n2
 = 
f·Lí
;

450 
n1
 = 
n2
;

451 
k
 = 
f·Lí
; k > 1u; k >>= 2u)

454 
n1
 = 
n2
;

455 
n2
 >>= 2u;

456 
ü1
 = 0u;

459 
j
 = 0;

463 
ü2
 = 
ü1
 + ia1;

464 
ü3
 = 
ü2
 + 
ü1
;

465 
co1
 = 
pC€f
[
ü1
 * 2u];

466 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

467 
co2
 = 
pC€f
[
ü2
 * 2u];

468 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

469 
co3
 = 
pC€f
[
ü3
 * 2u];

470 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

473 
ü1
 = ia1 + 
twidC€fModifõr
;

475 
i0
 = 
j
;

480 
i1
 = 
i0
 + 
n2
;

481 
i2
 = 
i1
 + 
n2
;

482 
i3
 = 
i2
 + 
n2
;

485 
r1
 = 
pSrc
[(2u * 
i0
)] +ÖSrc[(2u * 
i2
)];

488 
r2
 = 
pSrc
[(2u * 
i0
)] -ÖSrc[(2u * 
i2
)];

491 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

494 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

497 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

500 
pSrc
[2u * 
i0
] = 
r1
 + 
t1
;

503 
r1
 =Ñ1 - 
t1
;

506 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

509 
pSrc
[(2u * 
i0
Ë+ 1u] = 
s1
 + 
t2
;

512 
s1
 = s1 - 
t2
;

515 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

518 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

521 
pSrc
[2u * 
i1
] = (
r1
 * 
co2
Ë+ (
s1
 * 
si2
);

524 
pSrc
[(2u * 
i1
Ë+ 1u] = (
s1
 * 
co2
Ë- (
r1
 * 
si2
);

527 
r1
 = 
r2
 + 
t1
;

530 
r2
 =Ñ2 - 
t1
;

533 
s1
 = 
s2
 - 
t2
;

536 
s2
 = s2 + 
t2
;

539 
pSrc
[2u * 
i2
] = (
r1
 * 
co1
Ë+ (
s1
 * 
si1
);

542 
pSrc
[(2u * 
i2
Ë+ 1u] = (
s1
 * 
co1
Ë- (
r1
 * 
si1
);

545 
pSrc
[2u * 
i3
] = (
r2
 * 
co3
Ë+ (
s2
 * 
si3
);

548 
pSrc
[(2u * 
i3
Ë+ 1u] = (
s2
 * 
co3
Ë- (
r2
 * 
si3
);

550 
i0
 +
n1
;

551 }  
i0
 < 
f·Lí
);

552 
j
++;

553 } 
j
 <(
n2
 - 1u));

554 
twidC€fModifõr
 <<= 2u;

559 
	}
}

571 
	$¨m_ødix4_buâîÊy_övî£_f32
(

572 
Êﬂt32_t
 * 
pSrc
,

573 
uöt16_t
 
f·Lí
,

574 
Êﬂt32_t
 * 
pC€f
,

575 
uöt16_t
 
twidC€fModifõr
,

576 
Êﬂt32_t
 
⁄ebyf·Lí
)

578 
Êﬂt32_t
 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

579 
uöt32_t
 
ü1
, 
ü2
, 
ü3
;

580 
uöt32_t
 
i0
, 
i1
, 
i2
, 
i3
;

581 
uöt32_t
 
n1
, 
n2
, 
j
, 
k
;

583 #i‚de‡
ARM_MATH_CM0_FAMILY_FAMILY


585 
Êﬂt32_t
 
xaIn
, 
yaIn
, 
xbIn
, 
ybIn
, 
xcIn
, 
ycIn
, 
xdIn
, 
ydIn
;

586 
Êﬂt32_t
 
X≠lusc
, 
Xb∂usd
, 
Y≠lusc
, 
Yb∂usd
, 
Xamöusc
, 
Xbmöusd
, 
Yamöusc
,

587 
Ybmöusd
;

588 
Êﬂt32_t
 
Xb12C_out
, 
Yb12C_out
, 
Xc12C_out
, 
Yc12C_out
, 
Xd12C_out
, 
Yd12C_out
;

589 
Êﬂt32_t
 
Xb12_out
, 
Yb12_out
, 
Xc12_out
, 
Yc12_out
, 
Xd12_out
, 
Yd12_out
;

590 
Êﬂt32_t
 *
±r1
;

591 
Êﬂt32_t
 
p0
,
p1
,
p2
,
p3
,
p4
,
p5
,
p6
,
p7
;

592 
Êﬂt32_t
 
a0
,
a1
,
a2
,
a3
,
a4
,
a5
,
a6
,
a7
;

596 
n2
 = 
f·Lí
;

597 
n1
 = 
n2
;

600 
n2
 >>= 2u;

601 
i0
 = 0u;

602 
ü1
 = 0u;

604 
j
 = 
n2
;

611 
i1
 = 
i0
 + 
n2
;

612 
i2
 = 
i1
 + 
n2
;

613 
i3
 = 
i2
 + 
n2
;

616 
xaIn
 = 
pSrc
[(2u * 
i0
)];

617 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

619 
xcIn
 = 
pSrc
[(2u * 
i2
)];

620 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

622 
xbIn
 = 
pSrc
[(2u * 
i1
)];

623 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

625 
xdIn
 = 
pSrc
[(2u * 
i3
)];

626 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

629 
X≠lusc
 = 
xaIn
 + 
xcIn
;

631 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

633 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

635 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

638 
ü2
 = 
ü1
 + ia1;

639 
co2
 = 
pC€f
[
ü2
 * 2u];

640 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

643 
Xamöusc
 = 
xaIn
 - 
xcIn
;

645 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

647 
Yamöusc
 = 
yaIn
 - 
ycIn
;

649 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

652 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

655 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

658 
Xb12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

660 
Yb12C_out
 = (
Yamöusc
 + 
Xbmöusd
);

662 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

664 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

666 
Xd12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

668 
Yd12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

670 
co1
 = 
pC€f
[
ü1
 * 2u];

671 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

674 
ü3
 = 
ü2
 + 
ü1
;

675 
co3
 = 
pC€f
[
ü3
 * 2u];

676 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

678 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

679 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

680 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

681 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

682 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

683 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

687 
p0
 = 
Yb12C_out
 * 
si1
;

690 
p1
 = 
Xb12C_out
 * 
si1
;

693 
p2
 = 
Yc12C_out
 * 
si2
;

696 
p3
 = 
Xc12C_out
 * 
si2
;

699 
p4
 = 
Yd12C_out
 * 
si3
;

702 
p5
 = 
Xd12C_out
 * 
si3
;

704 
Xb12_out
 -
p0
;

705 
Yb12_out
 +
p1
;

706 
Xc12_out
 -
p2
;

707 
Yc12_out
 +
p3
;

708 
Xd12_out
 -
p4
;

709 
Yd12_out
 +
p5
;

712 
pSrc
[2u * 
i1
] = 
Xc12_out
;

715 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

718 
pSrc
[2u * 
i2
] = 
Xb12_out
;

721 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

724 
pSrc
[2u * 
i3
] = 
Xd12_out
;

727 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

730 
ü1
 = ia1 + 
twidC€fModifõr
;

733 
i0
 = i0 + 1u;

735 } --
j
);

737 
twidC€fModifõr
 <<= 2u;

740 
k
 = 
f·Lí
 >> 2u; k > 4u; k >>= 2u)

743 
n1
 = 
n2
;

744 
n2
 >>= 2u;

745 
ü1
 = 0u;

748 
j
 = 0;

752 
ü2
 = 
ü1
 + ia1;

753 
ü3
 = 
ü2
 + 
ü1
;

754 
co1
 = 
pC€f
[
ü1
 * 2u];

755 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

756 
co2
 = 
pC€f
[
ü2
 * 2u];

757 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

758 
co3
 = 
pC€f
[
ü3
 * 2u];

759 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

762 
ü1
 = ia1 + 
twidC€fModifõr
;

764 
i0
 = 
j
;

769 
i1
 = 
i0
 + 
n2
;

770 
i2
 = 
i1
 + 
n2
;

771 
i3
 = 
i2
 + 
n2
;

773 
xaIn
 = 
pSrc
[(2u * 
i0
)];

774 
yaIn
 = 
pSrc
[(2u * 
i0
) + 1u];

776 
xbIn
 = 
pSrc
[(2u * 
i1
)];

777 
ybIn
 = 
pSrc
[(2u * 
i1
) + 1u];

779 
xcIn
 = 
pSrc
[(2u * 
i2
)];

780 
ycIn
 = 
pSrc
[(2u * 
i2
) + 1u];

782 
xdIn
 = 
pSrc
[(2u * 
i3
)];

783 
ydIn
 = 
pSrc
[(2u * 
i3
) + 1u];

786 
Xamöusc
 = 
xaIn
 - 
xcIn
;

788 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

790 
Yamöusc
 = 
yaIn
 - 
ycIn
;

792 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

795 
X≠lusc
 = 
xaIn
 + 
xcIn
;

797 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

799 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

801 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

804 
Xb12C_out
 = (
Xamöusc
 - 
Ybmöusd
);

806 
Yb12C_out
 = (
Yamöusc
 + 
Xbmöusd
);

808 
Xc12C_out
 = (
X≠lusc
 - 
Xb∂usd
);

810 
Yc12C_out
 = (
Y≠lusc
 - 
Yb∂usd
);

812 
Xd12C_out
 = (
Xamöusc
 + 
Ybmöusd
);

814 
Yd12C_out
 = (
Yamöusc
 - 
Xbmöusd
);

816 
pSrc
[(2u * 
i0
)] = 
X≠lusc
 + 
Xb∂usd
;

817 
pSrc
[(2u * 
i0
Ë+ 1u] = 
Y≠lusc
 + 
Yb∂usd
;

819 
Xb12_out
 = 
Xb12C_out
 * 
co1
;

820 
Yb12_out
 = 
Yb12C_out
 * 
co1
;

821 
Xc12_out
 = 
Xc12C_out
 * 
co2
;

822 
Yc12_out
 = 
Yc12C_out
 * 
co2
;

823 
Xd12_out
 = 
Xd12C_out
 * 
co3
;

824 
Yd12_out
 = 
Yd12C_out
 * 
co3
;

828 
p0
 = 
Yb12C_out
 * 
si1
;

831 
p1
 = 
Xb12C_out
 * 
si1
;

834 
p2
 = 
Yc12C_out
 * 
si2
;

837 
p3
 = 
Xc12C_out
 * 
si2
;

840 
p4
 = 
Yd12C_out
 * 
si3
;

843 
p5
 = 
Xd12C_out
 * 
si3
;

845 
Xb12_out
 -
p0
;

846 
Yb12_out
 +
p1
;

847 
Xc12_out
 -
p2
;

848 
Yc12_out
 +
p3
;

849 
Xd12_out
 -
p4
;

850 
Yd12_out
 +
p5
;

853 
pSrc
[2u * 
i1
] = 
Xc12_out
;

856 
pSrc
[(2u * 
i1
Ë+ 1u] = 
Yc12_out
;

859 
pSrc
[2u * 
i2
] = 
Xb12_out
;

862 
pSrc
[(2u * 
i2
Ë+ 1u] = 
Yb12_out
;

865 
pSrc
[2u * 
i3
] = 
Xd12_out
;

868 
pSrc
[(2u * 
i3
Ë+ 1u] = 
Yd12_out
;

870 
i0
 +
n1
;

871 } 
i0
 < 
f·Lí
);

872 
j
++;

873 } 
j
 <(
n2
 - 1u));

874 
twidC€fModifõr
 <<= 2u;

878 
j
 = 
f·Lí
 >> 2;

879 
±r1
 = &
pSrc
[0];

884 
xaIn
 = 
±r1
[0];

885 
yaIn
 = 
±r1
[1];

886 
xbIn
 = 
±r1
[2];

887 
ybIn
 = 
±r1
[3];

888 
xcIn
 = 
±r1
[4];

889 
ycIn
 = 
±r1
[5];

890 
xdIn
 = 
±r1
[6];

891 
ydIn
 = 
±r1
[7];

895 
X≠lusc
 = 
xaIn
 + 
xcIn
;

898 
Xamöusc
 = 
xaIn
 - 
xcIn
;

901 
Y≠lusc
 = 
yaIn
 + 
ycIn
;

904 
Yamöusc
 = 
yaIn
 - 
ycIn
;

907 
Xb∂usd
 = 
xbIn
 + 
xdIn
;

910 
Yb∂usd
 = 
ybIn
 + 
ydIn
;

913 
Xbmöusd
 = 
xbIn
 - 
xdIn
;

916 
Ybmöusd
 = 
ybIn
 - 
ydIn
;

919 
a0
 = (
X≠lusc
 + 
Xb∂usd
);

921 
a1
 = (
Y≠lusc
 + 
Yb∂usd
);

923 
a2
 = (
X≠lusc
 - 
Xb∂usd
);

925 
a3
 = (
Y≠lusc
 - 
Yb∂usd
);

927 
a4
 = (
Xamöusc
 - 
Ybmöusd
);

929 
a5
 = (
Yamöusc
 + 
Xbmöusd
);

931 
a6
 = (
Xamöusc
 + 
Ybmöusd
);

933 
a7
 = (
Yamöusc
 - 
Xbmöusd
);

935 
p0
 = 
a0
 * 
⁄ebyf·Lí
;

936 
p1
 = 
a1
 * 
⁄ebyf·Lí
;

937 
p2
 = 
a2
 * 
⁄ebyf·Lí
;

938 
p3
 = 
a3
 * 
⁄ebyf·Lí
;

939 
p4
 = 
a4
 * 
⁄ebyf·Lí
;

940 
p5
 = 
a5
 * 
⁄ebyf·Lí
;

941 
p6
 = 
a6
 * 
⁄ebyf·Lí
;

942 
p7
 = 
a7
 * 
⁄ebyf·Lí
;

945 
±r1
[0] = 
p0
;

947 
±r1
[1] = 
p1
;

949 
±r1
[2] = 
p2
;

951 
±r1
[3] = 
p3
;

953 
±r1
[4] = 
p4
;

955 
±r1
[5] = 
p5
;

957 
±r1
[6] = 
p6
;

959 
±r1
[7] = 
p7
;

962 
±r1
 =Ötr1 + 8u;

964 } --
j
);

968 
Êﬂt32_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
;

973 
n2
 = 
f·Lí
;

974 
n1
 = 
n2
;

977 
k
 = 
f·Lí
; k > 4u; k >>= 2u)

980 
n1
 = 
n2
;

981 
n2
 >>= 2u;

982 
ü1
 = 0u;

985 
j
 = 0;

989 
ü2
 = 
ü1
 + ia1;

990 
ü3
 = 
ü2
 + 
ü1
;

991 
co1
 = 
pC€f
[
ü1
 * 2u];

992 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

993 
co2
 = 
pC€f
[
ü2
 * 2u];

994 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

995 
co3
 = 
pC€f
[
ü3
 * 2u];

996 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

999 
ü1
 = ia1 + 
twidC€fModifõr
;

1001 
i0
 = 
j
;

1006 
i1
 = 
i0
 + 
n2
;

1007 
i2
 = 
i1
 + 
n2
;

1008 
i3
 = 
i2
 + 
n2
;

1011 
r1
 = 
pSrc
[(2u * 
i0
)] +ÖSrc[(2u * 
i2
)];

1014 
r2
 = 
pSrc
[(2u * 
i0
)] -ÖSrc[(2u * 
i2
)];

1017 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

1020 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

1023 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

1026 
pSrc
[2u * 
i0
] = 
r1
 + 
t1
;

1029 
r1
 =Ñ1 - 
t1
;

1032 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

1035 
pSrc
[(2u * 
i0
Ë+ 1u] = 
s1
 + 
t2
;

1038 
s1
 = s1 - 
t2
;

1041 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

1044 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

1047 
pSrc
[2u * 
i1
] = (
r1
 * 
co2
Ë- (
s1
 * 
si2
);

1050 
pSrc
[(2u * 
i1
Ë+ 1u] = (
s1
 * 
co2
Ë+ (
r1
 * 
si2
);

1053 
r1
 = 
r2
 - 
t1
;

1056 
r2
 =Ñ2 + 
t1
;

1059 
s1
 = 
s2
 + 
t2
;

1062 
s2
 = s2 - 
t2
;

1065 
pSrc
[2u * 
i2
] = (
r1
 * 
co1
Ë- (
s1
 * 
si1
);

1068 
pSrc
[(2u * 
i2
Ë+ 1u] = (
s1
 * 
co1
Ë+ (
r1
 * 
si1
);

1071 
pSrc
[2u * 
i3
] = (
r2
 * 
co3
Ë- (
s2
 * 
si3
);

1074 
pSrc
[(2u * 
i3
Ë+ 1u] = (
s2
 * 
co3
Ë+ (
r2
 * 
si3
);

1076 
i0
 +
n1
;

1077 }  
i0
 < 
f·Lí
);

1078 
j
++;

1079 } 
j
 <(
n2
 - 1u));

1080 
twidC€fModifõr
 <<= 2u;

1083 
n1
 = 
n2
;

1084 
n2
 >>= 2u;

1087 
i0
 = 0u; i0 <(
f·Lí
 - 
n1
); i0 +=Ç1)

1091 
i1
 = 
i0
 + 
n2
;

1092 
i2
 = 
i1
 + 
n2
;

1093 
i3
 = 
i2
 + 
n2
;

1097 
r1
 = 
pSrc
[2u * 
i0
] +ÖSrc[2u * 
i2
];

1100 
r2
 = 
pSrc
[2u * 
i0
] -ÖSrc[2u * 
i2
];

1103 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

1106 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

1109 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

1112 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
Ë* 
⁄ebyf·Lí
;

1115 
r1
 =Ñ1 - 
t1
;

1118 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

1121 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
Ë* 
⁄ebyf·Lí
;

1124 
s1
 = s1 - 
t2
;

1127 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

1130 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

1133 
pSrc
[2u * 
i1
] = 
r1
 * 
⁄ebyf·Lí
;

1136 
pSrc
[(2u * 
i1
Ë+ 1u] = 
s1
 * 
⁄ebyf·Lí
;

1139 
r1
 = 
r2
 - 
t1
;

1142 
r2
 =Ñ2 + 
t1
;

1145 
s1
 = 
s2
 + 
t2
;

1148 
s2
 = s2 - 
t2
;

1151 
pSrc
[2u * 
i2
] = 
r1
 * 
⁄ebyf·Lí
;

1154 
pSrc
[(2u * 
i2
Ë+ 1u] = 
s1
 * 
⁄ebyf·Lí
;

1157 
pSrc
[2u * 
i3
] = 
r2
 * 
⁄ebyf·Lí
;

1160 
pSrc
[(2u * 
i3
Ë+ 1u] = 
s2
 * 
⁄ebyf·Lí
;

1164 
	}
}

1181 
	$¨m_cf·_ødix4_f32
(

1182 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1183 
Êﬂt32_t
 * 
pSrc
)

1186 if(
S
->
if·Fœg
 == 1u)

1189 
	`¨m_ødix4_buâîÊy_övî£_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

1190 
S
->
twidC€fModifõr
, S->
⁄ebyf·Lí
);

1195 
	`¨m_ødix4_buâîÊy_f32
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

1196 
S
->
twidC€fModifõr
);

1199 if(
S
->
bôRevî£Fœg
 == 1u)

1202 
	`¨m_bôªvîßl_f32
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

1205 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_f32.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

77 
¨m_°©us
 
	$¨m_cf·_ødix4_öô_f32
(

78 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

79 
uöt16_t
 
f·Lí
,

80 
uöt8_t
 
if·Fœg
,

81 
uöt8_t
 
bôRevî£Fœg
)

84 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

87 
S
->
f·Lí
 = fftLen;

90 
S
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f
;

93 
S
->
if·Fœg
 = ifftFlag;

96 
S
->
bôRevî£Fœg
 = bitReverseFlag;

99 
S
->
f·Lí
)

106 
S
->
twidC€fModifõr
 = 1u;

108 
S
->
bôRevFa˘‹
 = 1u;

110 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

112 
S
->
⁄ebyf·Lí
 = 0.000244140625;

119 
S
->
twidC€fModifõr
 = 4u;

121 
S
->
bôRevFa˘‹
 = 4u;

123 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

125 
S
->
⁄ebyf·Lí
 = 0.0009765625f;

131 
S
->
twidC€fModifõr
 = 16u;

132 
S
->
bôRevFa˘‹
 = 16u;

133 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

134 
S
->
⁄ebyf·Lí
 = 0.00390625f;

139 
S
->
twidC€fModifõr
 = 64u;

140 
S
->
bôRevFa˘‹
 = 64u;

141 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

142 
S
->
⁄ebyf·Lí
 = 0.015625f;

147 
S
->
twidC€fModifõr
 = 256u;

148 
S
->
bôRevFa˘‹
 = 256u;

149 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

150 
S
->
⁄ebyf·Lí
 = 0.0625f;

156 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

160  (
°©us
);

161 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q15.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

77 
¨m_°©us
 
	$¨m_cf·_ødix4_öô_q15
(

78 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

79 
uöt16_t
 
f·Lí
,

80 
uöt8_t
 
if·Fœg
,

81 
uöt8_t
 
bôRevî£Fœg
)

84 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

86 
S
->
f·Lí
 = fftLen;

88 
S
->
pTwiddÀ
 = (
q15_t
 *Ë
twiddÀC€f_4096_q15
;

90 
S
->
if·Fœg
 = ifftFlag;

92 
S
->
bôRevî£Fœg
 = bitReverseFlag;

95 
S
->
f·Lí
)

101 
S
->
twidC€fModifõr
 = 1u;

103 
S
->
bôRevFa˘‹
 = 1u;

105 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

111 
S
->
twidC€fModifõr
 = 4u;

112 
S
->
bôRevFa˘‹
 = 4u;

113 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

119 
S
->
twidC€fModifõr
 = 16u;

120 
S
->
bôRevFa˘‹
 = 16u;

121 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

127 
S
->
twidC€fModifõr
 = 64u;

128 
S
->
bôRevFa˘‹
 = 64u;

129 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

135 
S
->
twidC€fModifõr
 = 256u;

136 
S
->
bôRevFa˘‹
 = 256u;

137 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

143 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

147  (
°©us
);

148 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

76 
¨m_°©us
 
	$¨m_cf·_ødix4_öô_q31
(

77 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

78 
uöt16_t
 
f·Lí
,

79 
uöt8_t
 
if·Fœg
,

80 
uöt8_t
 
bôRevî£Fœg
)

83 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

85 
S
->
f·Lí
 = fftLen;

87 
S
->
pTwiddÀ
 = (
q31_t
 *Ë
twiddÀC€f_4096_q31
;

89 
S
->
if·Fœg
 = ifftFlag;

91 
S
->
bôRevî£Fœg
 = bitReverseFlag;

94 
S
->
f·Lí
)

99 
S
->
twidC€fModifõr
 = 1u;

101 
S
->
bôRevFa˘‹
 = 1u;

103 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë
¨mBôRevTabÀ
;

109 
S
->
twidC€fModifõr
 = 4u;

111 
S
->
bôRevFa˘‹
 = 4u;

113 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[3];

118 
S
->
twidC€fModifõr
 = 16u;

119 
S
->
bôRevFa˘‹
 = 16u;

120 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[15];

125 
S
->
twidC€fModifõr
 = 64u;

126 
S
->
bôRevFa˘‹
 = 64u;

127 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[63];

132 
S
->
twidC€fModifõr
 = 256u;

133 
S
->
bôRevFa˘‹
 = 256u;

134 
S
->
pBôRevTabÀ
 = (
uöt16_t
 *Ë& 
¨mBôRevTabÀ
[255];

139 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

143  (
°©us
);

144 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q15.c

42 
	~"¨m_m©h.h
"

45 
¨m_ødix4_buâîÊy_q15
(

46 
q15_t
 * 
pSrc16
,

47 
uöt32_t
 
f·Lí
,

48 
q15_t
 * 
pC€f16
,

49 
uöt32_t
 
twidC€fModifõr
);

51 
¨m_ødix4_buâîÊy_övî£_q15
(

52 
q15_t
 * 
pSrc16
,

53 
uöt32_t
 
f·Lí
,

54 
q15_t
 * 
pC€f16
,

55 
uöt32_t
 
twidC€fModifõr
);

57 
¨m_bôªvîßl_q15
(

58 
q15_t
 * 
pSrc
,

59 
uöt32_t
 
f·Lí
,

60 
uöt16_t
 
bôRevFa˘‹
,

61 
uöt16_t
 * 
pBôRevTab
);

91 
	$¨m_cf·_ødix4_q15
(

92 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

93 
q15_t
 * 
pSrc
)

95 if(
S
->
if·Fœg
 == 1u)

98 
	`¨m_ødix4_buâîÊy_övî£_q15
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

99 
S
->
twidC€fModifõr
);

104 
	`¨m_ødix4_buâîÊy_q15
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

105 
S
->
twidC€fModifõr
);

108 if(
S
->
bôRevî£Fœg
 == 1u)

111 
	`¨m_bôªvîßl_q15
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

114 
	}
}

163 
	$¨m_ødix4_buâîÊy_q15
(

164 
q15_t
 * 
pSrc16
,

165 
uöt32_t
 
f·Lí
,

166 
q15_t
 * 
pC€f16
,

167 
uöt32_t
 
twidC€fModifõr
)

170 #i‚de‡
ARM_MATH_CM0_FAMILY


174 
q31_t
 
R
, 
S
, 
T
, 
U
;

175 
q31_t
 
C1
, 
C2
, 
C3
, 
out1
, 
out2
;

176 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
j
, 
k
;

178 
q15_t
 *
±r1
;

179 
q15_t
 *
pSi0
;

180 
q15_t
 *
pSi1
;

181 
q15_t
 *
pSi2
;

182 
q15_t
 *
pSi3
;

184 
q31_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

191 
n2
 = 
f·Lí
;

192 
n1
 = 
n2
;

195 
n2
 >>= 2u;

198 
ic
 = 0u;

201 
j
 = 
n2
;

203 
pSi0
 = 
pSrc16
;

204 
pSi1
 = 
pSi0
 + 2 * 
n2
;

205 
pSi2
 = 
pSi1
 + 2 * 
n2
;

206 
pSi3
 = 
pSi2
 + 2 * 
n2
;

217 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

218 
T
 = 
	`__SHADD16
(T, 0);

219 
T
 = 
	`__SHADD16
(T, 0);

224 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

225 
S
 = 
	`__SHADD16
(S, 0);

226 
S
 = 
	`__SHADD16
(S, 0);

229 
R
 = 
	`__QADD16
(
T
, 
S
);

232 
S
 = 
	`__QSUB16
(
T
, S);

236 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

237 
T
 = 
	`__SHADD16
(T, 0);

238 
T
 = 
	`__SHADD16
(T, 0);

241 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

242 
U
 = 
	`__SHADD16
(U, 0);

243 
U
 = 
	`__SHADD16
(U, 0);

246 
T
 = 
	`__QADD16
(T, 
U
);

251 
	`_SIMD32_OFFSET
(
pSi0
Ë
	`__SHADD16
(
R
, 
T
);

252 
pSi0
 += 2;

255 
R
 = 
	`__QSUB16
(R, 
T
);

258 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

260 #i‚de‡
ARM_MATH_BIG_ENDIAN


263 
out1
 = 
	`__SMUAD
(
C2
, 
R
) >> 16u;

265 
out2
 = 
	`__SMUSDX
(
C2
, 
R
);

270 
out1
 = 
	`__SMUSDX
(
R
, 
C2
) >> 16u;

272 
out2
 = 
	`__SMUAD
(
C2
, 
R
);

278 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

279 
T
 = 
	`__SHADD16
(T, 0);

280 
T
 = 
	`__SHADD16
(T, 0);

284 
	`_SIMD32_OFFSET
(
pSi1
) =

285 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

286 
pSi1
 += 2;

290 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

291 
U
 = 
	`__SHADD16
(U, 0);

292 
U
 = 
	`__SHADD16
(U, 0);

295 
T
 = 
	`__QSUB16
(T, 
U
);

297 #i‚de‡
ARM_MATH_BIG_ENDIAN


300 
R
 = 
	`__QASX
(
S
, 
T
);

302 
S
 = 
	`__QSAX
(S, 
T
);

307 
R
 = 
	`__QSAX
(
S
, 
T
);

309 
S
 = 
	`__QASX
(S, 
T
);

314 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

317 #i‚de‡
ARM_MATH_BIG_ENDIAN


320 
out1
 = 
	`__SMUAD
(
C1
, 
S
) >> 16u;

322 
out2
 = 
	`__SMUSDX
(
C1
, 
S
);

327 
out1
 = 
	`__SMUSDX
(
S
, 
C1
) >> 16u;

329 
out2
 = 
	`__SMUAD
(
C1
, 
S
);

334 
	`_SIMD32_OFFSET
(
pSi2
) =

335 ((
out2
Ë& 0xFFFF0000Ë| ((
out1
) & 0x0000FFFF);

336 
pSi2
 += 2;

340 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

343 #i‚de‡
ARM_MATH_BIG_ENDIAN


346 
out1
 = 
	`__SMUAD
(
C3
, 
R
) >> 16u;

348 
out2
 = 
	`__SMUSDX
(
C3
, 
R
);

353 
out1
 = 
	`__SMUSDX
(
R
, 
C3
) >> 16u;

355 
out2
 = 
	`__SMUAD
(
C3
, 
R
);

360 
	`_SIMD32_OFFSET
(
pSi3
) =

361 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

362 
pSi3
 += 2;

365 
ic
 = i¯+ 
twidC€fModifõr
;

367 } --
j
);

376 
twidC€fModifõr
 <<= 2u;

379 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

382 
n1
 = 
n2
;

383 
n2
 >>= 2u;

384 
ic
 = 0u;

386 
j
 = 0u; j <(
n2
 - 1u); j++)

389 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

390 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

391 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

394 
ic
 = i¯+ 
twidC€fModifõr
;

396 
pSi0
 = 
pSrc16
 + 2 * 
j
;

397 
pSi1
 = 
pSi0
 + 2 * 
n2
;

398 
pSi2
 = 
pSi1
 + 2 * 
n2
;

399 
pSi3
 = 
pSi2
 + 2 * 
n2
;

402 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

406 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

409 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

412 
R
 = 
	`__QADD16
(
T
, 
S
);

415 
S
 = 
	`__QSUB16
(
T
, S);

419 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

422 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

425 
T
 = 
	`__QADD16
(T, 
U
);

431 
out1
 = 
	`__SHADD16
(
R
, 
T
);

432 
out1
 = 
	`__SHADD16
(out1, 0);

433 
	`_SIMD32_OFFSET
(
pSi0
Ë
out1
;

434 
pSi0
 +2 * 
n1
;

437 
R
 = 
	`__SHSUB16
(R, 
T
);

439 #i‚de‡
ARM_MATH_BIG_ENDIAN


442 
out1
 = 
	`__SMUAD
(
C2
, 
R
) >> 16u;

445 
out2
 = 
	`__SMUSDX
(
C2
, 
R
);

450 
out1
 = 
	`__SMUSDX
(
R
, 
C2
) >> 16u;

453 
out2
 = 
	`__SMUAD
(
C2
, 
R
);

459 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

464 
	`_SIMD32_OFFSET
(
pSi1
) =

465 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

466 
pSi1
 +2 * 
n1
;

471 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

474 
T
 = 
	`__QSUB16
(T, 
U
);

476 #i‚de‡
ARM_MATH_BIG_ENDIAN


479 
R
 = 
	`__SHASX
(
S
, 
T
);

482 
S
 = 
	`__SHSAX
(S, 
T
);

486 
out1
 = 
	`__SMUAD
(
C1
, 
S
) >> 16u;

487 
out2
 = 
	`__SMUSDX
(
C1
, 
S
);

492 
R
 = 
	`__SHSAX
(
S
, 
T
);

495 
S
 = 
	`__SHASX
(S, 
T
);

499 
out1
 = 
	`__SMUSDX
(
S
, 
C1
) >> 16u;

500 
out2
 = 
	`__SMUAD
(
C1
, 
S
);

506 
	`_SIMD32_OFFSET
(
pSi2
) =

507 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

508 
pSi2
 +2 * 
n1
;

512 #i‚de‡
ARM_MATH_BIG_ENDIAN


514 
out1
 = 
	`__SMUAD
(
C3
, 
R
) >> 16u;

515 
out2
 = 
	`__SMUSDX
(
C3
, 
R
);

519 
out1
 = 
	`__SMUSDX
(
R
, 
C3
) >> 16u;

520 
out2
 = 
	`__SMUAD
(
C3
, 
R
);

526 
	`_SIMD32_OFFSET
(
pSi3
) =

527 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

528 
pSi3
 +2 * 
n1
;

532 
twidC€fModifõr
 <<= 2u;

543 
j
 = 
f·Lí
 >> 2;

545 
±r1
 = &
pSrc16
[0];

553 
xaya
 = *
	`__SIMD32
(
±r1
)++;

556 
xbyb
 = *
	`__SIMD32
(
±r1
)++;

559 
xcyc
 = *
	`__SIMD32
(
±r1
)++;

562 
xdyd
 = *
	`__SIMD32
(
±r1
)++;

565 
R
 = 
	`__QADD16
(
xaya
, 
xcyc
);

568 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

571 
±r1
 =Ötr1 - 8u;

576 *
	`__SIMD32
(
±r1
)++ = 
	`__SHADD16
(
R
, 
T
);

579 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

583 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSUB16
(
R
, 
T
);

586 
S
 = 
	`__QSUB16
(
xaya
, 
xcyc
);

590 
U
 = 
	`__QSUB16
(
xbyb
, 
xdyd
);

592 #i‚de‡
ARM_MATH_BIG_ENDIAN


596 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

601 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

607 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

612 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

616 } --
j
);

630 
q15_t
 
R0
, 
R1
, 
S0
, 
S1
, 
T0
, 
T1
, 
U0
, 
U1
;

631 
q15_t
 
Co1
, 
Si1
, 
Co2
, 
Si2
, 
Co3
, 
Si3
, 
out1
, 
out2
;

632 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

639 
n2
 = 
f·Lí
;

640 
n1
 = 
n2
;

643 
n2
 >>= 2u;

646 
ic
 = 0u;

649 
i0
 = 0u;

650 
j
 = 
n2
;

661 
i1
 = 
i0
 + 
n2
;

662 
i2
 = 
i1
 + 
n2
;

663 
i3
 = 
i2
 + 
n2
;

669 
T0
 = 
pSrc16
[
i0
 * 2u] >> 2u;

670 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u] >> 2u;

674 
S0
 = 
pSrc16
[
i2
 * 2u] >> 2u;

675 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u] >> 2u;

678 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

680 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

683 
S0
 = 
	`__SSAT
(
T0
 - S0, 16);

685 
S1
 = 
	`__SSAT
(
T1
 - S1, 16);

690 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2u;

691 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u] >> 2u;

695 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2u;

696 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1] >> 2u;

699 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

701 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

706 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

707 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

711 
R0
 = 
	`__SSAT
(R0 - 
T0
, 16u);

712 
R1
 = 
	`__SSAT
(R1 - 
T1
, 16u);

715 
Co2
 = 
pC€f16
[2u * 
ic
 * 2u];

716 
Si2
 = 
pC€f16
[(2u * 
ic
 * 2u) + 1];

719 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 + 
Si2
 * 
R1
) >> 16u);

721 
out2
 = (
q15_t
Ë((-
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16u);

726 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2;

727 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1] >> 2;

731 
pSrc16
[
i1
 * 2u] = 
out1
;

732 
pSrc16
[(
i1
 * 2uË+ 1] = 
out2
;

737 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2;

738 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1] >> 2;

740 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16);

742 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16);

745 
R0
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S0
 - 
T1
), 16);

746 
R1
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S1
 + 
T0
), 16);

749 
S0
 = (
q15_t
Ë
	`__SSAT
(((
q31_t
ËS0 + 
T1
), 16u);

750 
S1
 = (
q15_t
Ë
	`__SSAT
(((
q31_t
ËS1 - 
T0
), 16u);

753 
Co1
 = 
pC€f16
[
ic
 * 2u];

754 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1];

757 
out1
 = (
q15_t
Ë((
Si1
 * 
S1
 + 
Co1
 * 
S0
) >> 16);

759 
out2
 = (
q15_t
Ë((-
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16);

762 
pSrc16
[
i2
 * 2u] = 
out1
;

763 
pSrc16
[(
i2
 * 2uË+ 1] = 
out2
;

766 
Co3
 = 
pC€f16
[3u * (
ic
 * 2u)];

767 
Si3
 = 
pC€f16
[(3u * (
ic
 * 2u)) + 1];

770 
out1
 = (
q15_t
Ë((
Si3
 * 
R1
 + 
Co3
 * 
R0
) >> 16u);

772 
out2
 = (
q15_t
Ë((-
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

774 
pSrc16
[
i3
 * 2u] = 
out1
;

775 
pSrc16
[(
i3
 * 2uË+ 1] = 
out2
;

778 
ic
 = i¯+ 
twidC€fModifõr
;

781 
i0
 = i0 + 1u;

783 } --
j
);

792 
twidC€fModifõr
 <<= 2u;

795 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

798 
n1
 = 
n2
;

799 
n2
 >>= 2u;

800 
ic
 = 0u;

802 
j
 = 0u; j <(
n2
 - 1u); j++)

805 
Co1
 = 
pC€f16
[
ic
 * 2u];

806 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1u];

807 
Co2
 = 
pC€f16
[2u * (
ic
 * 2u)];

808 
Si2
 = 
pC€f16
[(2u * (
ic
 * 2u)) + 1u];

809 
Co3
 = 
pC€f16
[3u * (
ic
 * 2u)];

810 
Si3
 = 
pC€f16
[(3u * (
ic
 * 2u)) + 1u];

813 
ic
 = i¯+ 
twidC€fModifõr
;

816 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

820 
i1
 = 
i0
 + 
n2
;

821 
i2
 = 
i1
 + 
n2
;

822 
i3
 = 
i2
 + 
n2
;

826 
T0
 = 
pSrc16
[
i0
 * 2u];

827 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

830 
S0
 = 
pSrc16
[
i2
 * 2u];

831 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

834 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16);

835 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16);

838 
S0
 = 
	`__SSAT
(
T0
 - S0, 16);

839 
S1
 = 
	`__SSAT
(
T1
 - S1, 16);

843 
T0
 = 
pSrc16
[
i1
 * 2u];

844 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

847 
U0
 = 
pSrc16
[
i3
 * 2u];

848 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

852 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16);

853 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16);

859 
out1
 = ((
R0
 >> 1uË+ (
T0
 >> 1u)) >> 1u;

860 
out2
 = ((
R1
 >> 1uË+ (
T1
 >> 1u)) >> 1u;

862 
pSrc16
[
i0
 * 2u] = 
out1
;

863 
pSrc16
[(2u * 
i0
Ë+ 1u] = 
out2
;

866 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

867 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

870 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 + 
Si2
 * 
R1
) >> 16u);

873 
out2
 = (
q15_t
Ë((-
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16u);

877 
T0
 = 
pSrc16
[
i1
 * 2u];

878 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

883 
pSrc16
[
i1
 * 2u] = 
out1
;

884 
pSrc16
[(
i1
 * 2uË+ 1u] = 
out2
;

889 
U0
 = 
pSrc16
[
i3
 * 2u];

890 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

893 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16);

894 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16);

897 
R0
 = (
S0
 >> 1uË- (
T1
 >> 1u);

898 
R1
 = (
S1
 >> 1uË+ (
T0
 >> 1u);

901 
S0
 = (S0 >> 1uË+ (
T1
 >> 1u);

902 
S1
 = (S1 >> 1uË- (
T0
 >> 1u);

905 
out1
 = (
q15_t
Ë((
Co1
 * 
S0
 + 
Si1
 * 
S1
) >> 16u);

907 
out2
 = (
q15_t
Ë((-
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16u);

911 
pSrc16
[
i2
 * 2u] = 
out1
;

912 
pSrc16
[(
i2
 * 2uË+ 1u] = 
out2
;

915 
out1
 = (
q15_t
Ë((
Si3
 * 
R1
 + 
Co3
 * 
R0
) >> 16u);

917 
out2
 = (
q15_t
Ë((-
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

920 
pSrc16
[
i3
 * 2u] = 
out1
;

921 
pSrc16
[(
i3
 * 2uË+ 1u] = 
out2
;

925 
twidC€fModifõr
 <<= 2u;

936 
n1
 = 
n2
;

937 
n2
 >>= 2u;

942 
i0
 = 0u; i0 <(
f·Lí
 - 
n1
); i0 +=Ç1)

946 
i1
 = 
i0
 + 
n2
;

947 
i2
 = 
i1
 + 
n2
;

948 
i3
 = 
i2
 + 
n2
;

952 
T0
 = 
pSrc16
[
i0
 * 2u];

953 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

956 
S0
 = 
pSrc16
[
i2
 * 2u];

957 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

960 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

961 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

964 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

965 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

969 
T0
 = 
pSrc16
[
i1
 * 2u];

970 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

972 
U0
 = 
pSrc16
[
i3
 * 2u];

973 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

976 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

977 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

982 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

983 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

986 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

987 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

989 
T0
 = 
pSrc16
[
i1
 * 2u];

990 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

995 
pSrc16
[
i1
 * 2u] = 
R0
;

996 
pSrc16
[(
i1
 * 2uË+ 1u] = 
R1
;

999 
U0
 = 
pSrc16
[
i3
 * 2u];

1000 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1002 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1003 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1008 
pSrc16
[
i2
 * 2u] = (
S0
 >> 1uË+ (
T1
 >> 1u);

1009 
pSrc16
[(
i2
 * 2uË+ 1u] = (
S1
 >> 1uË- (
T0
 >> 1u);

1014 
pSrc16
[
i3
 * 2u] = (
S0
 >> 1uË- (
T1
 >> 1u);

1015 
pSrc16
[(
i3
 * 2uË+ 1u] = (
S1
 >> 1uË+ (
T0
 >> 1u);

1028 
	}
}

1080 
	$¨m_ødix4_buâîÊy_övî£_q15
(

1081 
q15_t
 * 
pSrc16
,

1082 
uöt32_t
 
f·Lí
,

1083 
q15_t
 * 
pC€f16
,

1084 
uöt32_t
 
twidC€fModifõr
)

1087 #i‚de‡
ARM_MATH_CM0_FAMILY


1091 
q31_t
 
R
, 
S
, 
T
, 
U
;

1092 
q31_t
 
C1
, 
C2
, 
C3
, 
out1
, 
out2
;

1093 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
j
, 
k
;

1095 
q15_t
 *
±r1
;

1096 
q15_t
 *
pSi0
;

1097 
q15_t
 *
pSi1
;

1098 
q15_t
 *
pSi2
;

1099 
q15_t
 *
pSi3
;

1101 
q31_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

1108 
n2
 = 
f·Lí
;

1109 
n1
 = 
n2
;

1112 
n2
 >>= 2u;

1115 
ic
 = 0u;

1118 
j
 = 
n2
;

1120 
pSi0
 = 
pSrc16
;

1121 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1122 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1123 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1134 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

1135 
T
 = 
	`__SHADD16
(T, 0);

1136 
T
 = 
	`__SHADD16
(T, 0);

1139 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

1140 
S
 = 
	`__SHADD16
(S, 0);

1141 
S
 = 
	`__SHADD16
(S, 0);

1144 
R
 = 
	`__QADD16
(
T
, 
S
);

1147 
S
 = 
	`__QSUB16
(
T
, S);

1151 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1152 
T
 = 
	`__SHADD16
(T, 0);

1153 
T
 = 
	`__SHADD16
(T, 0);

1156 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1157 
U
 = 
	`__SHADD16
(U, 0);

1158 
U
 = 
	`__SHADD16
(U, 0);

1161 
T
 = 
	`__QADD16
(T, 
U
);

1166 
	`_SIMD32_OFFSET
(
pSi0
Ë
	`__SHADD16
(
R
, 
T
);

1167 
pSi0
 += 2;

1170 
R
 = 
	`__QSUB16
(R, 
T
);

1173 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

1175 #i‚de‡
ARM_MATH_BIG_ENDIAN


1178 
out1
 = 
	`__SMUSD
(
C2
, 
R
) >> 16u;

1180 
out2
 = 
	`__SMUADX
(
C2
, 
R
);

1185 
out1
 = 
	`__SMUADX
(
C2
, 
R
) >> 16u;

1187 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C2
), 
R
);

1193 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1194 
T
 = 
	`__SHADD16
(T, 0);

1195 
T
 = 
	`__SHADD16
(T, 0);

1199 
	`_SIMD32_OFFSET
(
pSi1
) =

1200 (
q31_t
Ë((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1201 
pSi1
 += 2;

1205 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1206 
U
 = 
	`__SHADD16
(U, 0);

1207 
U
 = 
	`__SHADD16
(U, 0);

1210 
T
 = 
	`__QSUB16
(T, 
U
);

1212 #i‚de‡
ARM_MATH_BIG_ENDIAN


1215 
R
 = 
	`__QSAX
(
S
, 
T
);

1217 
S
 = 
	`__QASX
(S, 
T
);

1222 
R
 = 
	`__QASX
(
S
, 
T
);

1224 
S
 = 
	`__QSAX
(S, 
T
);

1229 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

1232 #i‚de‡
ARM_MATH_BIG_ENDIAN


1235 
out1
 = 
	`__SMUSD
(
C1
, 
S
) >> 16u;

1237 
out2
 = 
	`__SMUADX
(
C1
, 
S
);

1242 
out1
 = 
	`__SMUADX
(
C1
, 
S
) >> 16u;

1244 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C1
), 
S
);

1249 
	`_SIMD32_OFFSET
(
pSi2
) =

1250 ((
out2
Ë& 0xFFFF0000Ë| ((
out1
) & 0x0000FFFF);

1251 
pSi2
 += 2;

1255 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

1258 #i‚de‡
ARM_MATH_BIG_ENDIAN


1261 
out1
 = 
	`__SMUSD
(
C3
, 
R
) >> 16u;

1263 
out2
 = 
	`__SMUADX
(
C3
, 
R
);

1268 
out1
 = 
	`__SMUADX
(
C3
, 
R
) >> 16u;

1270 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C3
), 
R
);

1275 
	`_SIMD32_OFFSET
(
pSi3
) =

1276 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1277 
pSi3
 += 2;

1280 
ic
 = i¯+ 
twidC€fModifõr
;

1282 } --
j
);

1291 
twidC€fModifõr
 <<= 2u;

1294 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

1297 
n1
 = 
n2
;

1298 
n2
 >>= 2u;

1299 
ic
 = 0u;

1301 
j
 = 0u; j <(
n2
 - 1u); j++)

1304 
C1
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (2u * 
ic
));

1305 
C2
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (4u * 
ic
));

1306 
C3
 = 
	`_SIMD32_OFFSET
(
pC€f16
 + (6u * 
ic
));

1309 
ic
 = i¯+ 
twidC€fModifõr
;

1311 
pSi0
 = 
pSrc16
 + 2 * 
j
;

1312 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1313 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1314 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1317 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

1321 
T
 = 
	`_SIMD32_OFFSET
(
pSi0
);

1324 
S
 = 
	`_SIMD32_OFFSET
(
pSi2
);

1327 
R
 = 
	`__QADD16
(
T
, 
S
);

1330 
S
 = 
	`__QSUB16
(
T
, S);

1334 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1337 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1340 
T
 = 
	`__QADD16
(T, 
U
);

1346 
out1
 = 
	`__SHADD16
(
R
, 
T
);

1347 
out1
 = 
	`__SHADD16
(out1, 0);

1348 
	`_SIMD32_OFFSET
(
pSi0
Ë
out1
;

1349 
pSi0
 +2 * 
n1
;

1352 
R
 = 
	`__SHSUB16
(R, 
T
);

1354 #i‚de‡
ARM_MATH_BIG_ENDIAN


1357 
out1
 = 
	`__SMUSD
(
C2
, 
R
) >> 16u;

1360 
out2
 = 
	`__SMUADX
(
C2
, 
R
);

1365 
out1
 = 
	`__SMUADX
(
R
, 
C2
) >> 16u;

1368 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C2
), 
R
);

1374 
T
 = 
	`_SIMD32_OFFSET
(
pSi1
);

1379 
	`_SIMD32_OFFSET
(
pSi1
) =

1380 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1381 
pSi1
 +2 * 
n1
;

1386 
U
 = 
	`_SIMD32_OFFSET
(
pSi3
);

1389 
T
 = 
	`__QSUB16
(T, 
U
);

1391 #i‚de‡
ARM_MATH_BIG_ENDIAN


1394 
R
 = 
	`__SHSAX
(
S
, 
T
);

1397 
S
 = 
	`__SHASX
(S, 
T
);

1401 
out1
 = 
	`__SMUSD
(
C1
, 
S
) >> 16u;

1402 
out2
 = 
	`__SMUADX
(
C1
, 
S
);

1407 
R
 = 
	`__SHASX
(
S
, 
T
);

1410 
S
 = 
	`__SHSAX
(S, 
T
);

1414 
out1
 = 
	`__SMUADX
(
S
, 
C1
) >> 16u;

1415 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C1
), 
S
);

1421 
	`_SIMD32_OFFSET
(
pSi2
) =

1422 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1423 
pSi2
 +2 * 
n1
;

1427 #i‚de‡
ARM_MATH_BIG_ENDIAN


1429 
out1
 = 
	`__SMUSD
(
C3
, 
R
) >> 16u;

1430 
out2
 = 
	`__SMUADX
(
C3
, 
R
);

1434 
out1
 = 
	`__SMUADX
(
C3
, 
R
) >> 16u;

1435 
out2
 = 
	`__SMUSD
(
	`__QSUB16
(0, 
C3
), 
R
);

1441 
	`_SIMD32_OFFSET
(
pSi3
) =

1442 ((
out2
Ë& 0xFFFF0000Ë| (
out1
 & 0x0000FFFF);

1443 
pSi3
 +2 * 
n1
;

1447 
twidC€fModifõr
 <<= 2u;

1457 
j
 = 
f·Lí
 >> 2;

1459 
±r1
 = &
pSrc16
[0];

1467 
xaya
 = *
	`__SIMD32
(
±r1
)++;

1470 
xbyb
 = *
	`__SIMD32
(
±r1
)++;

1473 
xcyc
 = *
	`__SIMD32
(
±r1
)++;

1476 
xdyd
 = *
	`__SIMD32
(
±r1
)++;

1479 
R
 = 
	`__QADD16
(
xaya
, 
xcyc
);

1482 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

1485 
±r1
 =Ötr1 - 8u;

1490 *
	`__SIMD32
(
±r1
)++ = 
	`__SHADD16
(
R
, 
T
);

1493 
T
 = 
	`__QADD16
(
xbyb
, 
xdyd
);

1497 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSUB16
(
R
, 
T
);

1500 
S
 = 
	`__QSUB16
(
xaya
, 
xcyc
);

1504 
U
 = 
	`__QSUB16
(
xbyb
, 
xdyd
);

1506 #i‚de‡
ARM_MATH_BIG_ENDIAN


1510 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

1515 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

1521 *
	`__SIMD32
(
±r1
)++ = 
	`__SHSAX
(
S
, 
U
);

1526 *
	`__SIMD32
(
±r1
)++ = 
	`__SHASX
(
S
, 
U
);

1531 } --
j
);

1545 
q15_t
 
R0
, 
R1
, 
S0
, 
S1
, 
T0
, 
T1
, 
U0
, 
U1
;

1546 
q15_t
 
Co1
, 
Si1
, 
Co2
, 
Si2
, 
Co3
, 
Si3
, 
out1
, 
out2
;

1547 
uöt32_t
 
n1
, 
n2
, 
ic
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

1554 
n2
 = 
f·Lí
;

1555 
n1
 = 
n2
;

1558 
n2
 >>= 2u;

1561 
ic
 = 0u;

1564 
i0
 = 0u;

1566 
j
 = 
n2
;

1577 
i1
 = 
i0
 + 
n2
;

1578 
i2
 = 
i1
 + 
n2
;

1579 
i3
 = 
i2
 + 
n2
;

1584 
T0
 = 
pSrc16
[
i0
 * 2u] >> 2u;

1585 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u] >> 2u;

1588 
S0
 = 
pSrc16
[
i2
 * 2u] >> 2u;

1589 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u] >> 2u;

1592 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

1593 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

1595 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

1596 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

1601 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2u;

1602 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u] >> 2u;

1605 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2u;

1606 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u] >> 2u;

1609 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

1610 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

1615 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

1616 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

1619 
R0
 = 
	`__SSAT
(R0 - 
T0
, 16u);

1620 
R1
 = 
	`__SSAT
(R1 - 
T1
, 16u);

1622 
Co2
 = 
pC€f16
[2u * 
ic
 * 2u];

1623 
Si2
 = 
pC€f16
[(2u * 
ic
 * 2u) + 1u];

1625 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 - 
Si2
 * 
R1
) >> 16u);

1627 
out2
 = (
q15_t
Ë((
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16u);

1632 
T0
 = 
pSrc16
[
i1
 * 2u] >> 2u;

1633 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u] >> 2u;

1637 
pSrc16
[
i1
 * 2u] = 
out1
;

1638 
pSrc16
[(
i1
 * 2uË+ 1u] = 
out2
;

1643 
U0
 = 
pSrc16
[
i3
 * 2u] >> 2u;

1644 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u] >> 2u;

1647 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1648 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1650 
R0
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S0
 + 
T1
), 16);

1651 
R1
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(
S1
 - 
T0
), 16);

1653 
S0
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(S0 - 
T1
), 16);

1654 
S1
 = (
q15_t
Ë
	`__SSAT
((
q31_t
Ë(S1 + 
T0
), 16);

1657 
Co1
 = 
pC€f16
[
ic
 * 2u];

1658 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1u];

1661 
out1
 = (
q15_t
Ë((
Co1
 * 
S0
 - 
Si1
 * 
S1
) >> 16u);

1663 
out2
 = (
q15_t
Ë((
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16u);

1665 
pSrc16
[
i2
 * 2u] = 
out1
;

1666 
pSrc16
[(
i2
 * 2uË+ 1u] = 
out2
;

1669 
Co3
 = 
pC€f16
[3u * 
ic
 * 2u];

1670 
Si3
 = 
pC€f16
[(3u * 
ic
 * 2u) + 1u];

1673 
out1
 = (
q15_t
Ë((
Co3
 * 
R0
 - 
Si3
 * 
R1
) >> 16u);

1675 
out2
 = (
q15_t
Ë((
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

1677 
pSrc16
[
i3
 * 2u] = 
out1
;

1678 
pSrc16
[(
i3
 * 2uË+ 1u] = 
out2
;

1681 
ic
 = i¯+ 
twidC€fModifõr
;

1684 
i0
 = i0 + 1u;

1686 } --
j
);

1696 
twidC€fModifõr
 <<= 2u;

1699 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

1702 
n1
 = 
n2
;

1703 
n2
 >>= 2u;

1704 
ic
 = 0u;

1706 
j
 = 0u; j <(
n2
 - 1u); j++)

1709 
Co1
 = 
pC€f16
[
ic
 * 2u];

1710 
Si1
 = 
pC€f16
[(
ic
 * 2u) + 1u];

1711 
Co2
 = 
pC€f16
[2u * 
ic
 * 2u];

1712 
Si2
 = 
pC€f16
[2u * 
ic
 * 2u + 1u];

1713 
Co3
 = 
pC€f16
[3u * 
ic
 * 2u];

1714 
Si3
 = 
pC€f16
[(3u * 
ic
 * 2u) + 1u];

1717 
ic
 = i¯+ 
twidC€fModifõr
;

1720 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

1724 
i1
 = 
i0
 + 
n2
;

1725 
i2
 = 
i1
 + 
n2
;

1726 
i3
 = 
i2
 + 
n2
;

1730 
T0
 = 
pSrc16
[
i0
 * 2u];

1731 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

1734 
S0
 = 
pSrc16
[
i2
 * 2u];

1735 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

1739 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

1740 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

1742 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

1743 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

1747 
T0
 = 
pSrc16
[
i1
 * 2u];

1748 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1751 
U0
 = 
pSrc16
[
i3
 * 2u];

1752 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1755 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

1756 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

1761 
pSrc16
[
i0
 * 2u] = ((
R0
 >> 1uË+ (
T0
 >> 1u)) >> 1u;

1762 
pSrc16
[(
i0
 * 2uË+ 1u] = ((
R1
 >> 1uË+ (
T1
 >> 1u)) >> 1u;

1765 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

1766 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

1769 
out1
 = (
q15_t
Ë((
Co2
 * 
R0
 - 
Si2
 * 
R1
) >> 16);

1771 
out2
 = (
q15_t
Ë((
Si2
 * 
R0
 + 
Co2
 * 
R1
) >> 16);

1775 
T0
 = 
pSrc16
[
i1
 * 2u];

1776 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1781 
pSrc16
[
i1
 * 2u] = 
out1
;

1782 
pSrc16
[(
i1
 * 2uË+ 1u] = 
out2
;

1786 
U0
 = 
pSrc16
[
i3
 * 2u];

1787 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1790 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1791 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1794 
R0
 = (
S0
 >> 1uË+ (
T1
 >> 1u);

1795 
R1
 = (
S1
 >> 1uË- (
T0
 >> 1u);

1798 
S0
 = (S0 >> 1uË- (
T1
 >> 1u);

1799 
S1
 = (S1 >> 1uË+ (
T0
 >> 1u);

1802 
out1
 = (
q15_t
Ë((
Co1
 * 
S0
 - 
Si1
 * 
S1
) >> 16u);

1803 
out2
 = (
q15_t
Ë((
Si1
 * 
S0
 + 
Co1
 * 
S1
) >> 16u);

1806 
pSrc16
[
i2
 * 2u] = 
out1
;

1807 
pSrc16
[(
i2
 * 2uË+ 1u] = 
out2
;

1810 
out1
 = (
q15_t
Ë((
Co3
 * 
R0
 - 
Si3
 * 
R1
) >> 16u);

1812 
out2
 = (
q15_t
Ë((
Si3
 * 
R0
 + 
Co3
 * 
R1
) >> 16u);

1815 
pSrc16
[
i3
 * 2u] = 
out1
;

1816 
pSrc16
[(
i3
 * 2uË+ 1u] = 
out2
;

1822 
twidC€fModifõr
 <<= 2u;

1836 
n1
 = 
n2
;

1837 
n2
 >>= 2u;

1840 
i0
 = 0u; i0 <(
f·Lí
 - 
n1
); i0 +=Ç1)

1844 
i1
 = 
i0
 + 
n2
;

1845 
i2
 = 
i1
 + 
n2
;

1846 
i3
 = 
i2
 + 
n2
;

1850 
T0
 = 
pSrc16
[
i0
 * 2u];

1851 
T1
 = 
pSrc16
[(
i0
 * 2u) + 1u];

1853 
S0
 = 
pSrc16
[
i2
 * 2u];

1854 
S1
 = 
pSrc16
[(
i2
 * 2u) + 1u];

1857 
R0
 = 
	`__SSAT
(
T0
 + 
S0
, 16u);

1858 
R1
 = 
	`__SSAT
(
T1
 + 
S1
, 16u);

1860 
S0
 = 
	`__SSAT
(
T0
 - S0, 16u);

1861 
S1
 = 
	`__SSAT
(
T1
 - S1, 16u);

1865 
T0
 = 
pSrc16
[
i1
 * 2u];

1866 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1868 
U0
 = 
pSrc16
[
i3
 * 2u];

1869 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1872 
T0
 = 
	`__SSAT
(T0 + 
U0
, 16u);

1873 
T1
 = 
	`__SSAT
(T1 + 
U1
, 16u);

1878 
pSrc16
[
i0
 * 2u] = (
R0
 >> 1uË+ (
T0
 >> 1u);

1879 
pSrc16
[(
i0
 * 2uË+ 1u] = (
R1
 >> 1uË+ (
T1
 >> 1u);

1882 
R0
 = (R0 >> 1uË- (
T0
 >> 1u);

1883 
R1
 = (R1 >> 1uË- (
T1
 >> 1u);

1886 
T0
 = 
pSrc16
[
i1
 * 2u];

1887 
T1
 = 
pSrc16
[(
i1
 * 2u) + 1u];

1892 
pSrc16
[
i1
 * 2u] = 
R0
;

1893 
pSrc16
[(
i1
 * 2uË+ 1u] = 
R1
;

1896 
U0
 = 
pSrc16
[
i3
 * 2u];

1897 
U1
 = 
pSrc16
[(
i3
 * 2u) + 1u];

1899 
T0
 = 
	`__SSAT
(T0 - 
U0
, 16u);

1900 
T1
 = 
	`__SSAT
(T1 - 
U1
, 16u);

1905 
pSrc16
[
i2
 * 2u] = (
S0
 >> 1uË- (
T1
 >> 1u);

1906 
pSrc16
[(
i2
 * 2uË+ 1u] = (
S1
 >> 1uË+ (
T0
 >> 1u);

1912 
pSrc16
[
i3
 * 2u] = (
S0
 >> 1uË+ (
T1
 >> 1u);

1913 
pSrc16
[(
i3
 * 2uË+ 1u] = (
S1
 >> 1uË- (
T0
 >> 1u);

1924 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q31.c

42 
	~"¨m_m©h.h
"

44 
¨m_ødix4_buâîÊy_övî£_q31
(

45 
q31_t
 * 
pSrc
,

46 
uöt32_t
 
f·Lí
,

47 
q31_t
 * 
pC€f
,

48 
uöt32_t
 
twidC€fModifõr
);

50 
¨m_ødix4_buâîÊy_q31
(

51 
q31_t
 * 
pSrc
,

52 
uöt32_t
 
f·Lí
,

53 
q31_t
 * 
pC€f
,

54 
uöt32_t
 
twidC€fModifõr
);

56 
¨m_bôªvîßl_q31
(

57 
q31_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

90 
	$¨m_cf·_ødix4_q31
(

91 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

92 
q31_t
 * 
pSrc
)

94 if(
S
->
if·Fœg
 == 1u)

97 
	`¨m_ødix4_buâîÊy_övî£_q31
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

98 
S
->
twidC€fModifõr
);

103 
	`¨m_ødix4_buâîÊy_q31
(
pSrc
, 
S
->
f·Lí
, S->
pTwiddÀ
,

104 
S
->
twidC€fModifõr
);

108 if(
S
->
bôRevî£Fœg
 == 1u)

111 
	`¨m_bôªvîßl_q31
(
pSrc
, 
S
->
f·Lí
, S->
bôRevFa˘‹
, S->
pBôRevTabÀ
);

114 
	}
}

163 
	$¨m_ødix4_buâîÊy_q31
(

164 
q31_t
 * 
pSrc
,

165 
uöt32_t
 
f·Lí
,

166 
q31_t
 * 
pC€f
,

167 
uöt32_t
 
twidC€fModifõr
)

169 #i‡
	`deföed
(
ARM_MATH_CM7
)

170 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

171 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

173 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

174 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

175 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

176 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

178 
q31_t
 *
±r1
;

179 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

188 
n2
 = 
f·Lí
;

189 
n1
 = 
n2
;

191 
n2
 >>= 2u;

192 
i0
 = 0u;

193 
ü1
 = 0u;

195 
j
 = 
n2
;

202 
i1
 = 
i0
 + 
n2
;

203 
i2
 = 
i1
 + 
n2
;

204 
i3
 = 
i2
 + 
n2
;

210 
r1
 = (
pSrc
[(2u * 
i0
)] >> 4uË+ (pSrc[(2u * 
i2
)] >> 4u);

212 
r2
 = (
pSrc
[2u * 
i0
] >> 4uË- (pSrc[2u * 
i2
] >> 4u);

215 
t1
 = (
pSrc
[2u * 
i1
] >> 4uË+ (pSrc[2u * 
i3
] >> 4u);

218 
s1
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i2
) + 1u] >> 4u);

220 
s2
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i2
) + 1u] >> 4u);

223 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
);

225 
r1
 =Ñ1 - 
t1
;

227 
t2
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i3
) + 1u] >> 4u);

230 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
);

233 
s1
 = s1 - 
t2
;

236 
t1
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i3
) + 1u] >> 4u);

238 
t2
 = (
pSrc
[2u * 
i1
] >> 4uË- (pSrc[2u * 
i3
] >> 4u);

241 
ü2
 = 2u * 
ü1
;

242 
co2
 = 
pC€f
[
ü2
 * 2u];

243 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

246 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

247 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

250 
pSrc
[(2u * 
i1
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

251 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

254 
r1
 = 
r2
 + 
t1
;

256 
r2
 =Ñ2 - 
t1
;

259 
s1
 = 
s2
 - 
t2
;

261 
s2
 = s2 + 
t2
;

263 
co1
 = 
pC€f
[
ü1
 * 2u];

264 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

267 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

268 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

271 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

272 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

275 
ü3
 = 3u * 
ü1
;

276 
co3
 = 
pC€f
[
ü3
 * 2u];

277 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

280 
pSrc
[2u * 
i3
] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

281 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

284 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

285 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

288 
ü1
 = ia1 + 
twidC€fModifõr
;

291 
i0
 = i0 + 1u;

293 } --
j
);

305 
twidC€fModifõr
 <<= 2u;

308 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

311 
n1
 = 
n2
;

312 
n2
 >>= 2u;

313 
ü1
 = 0u;

316 
j
 = 0u; j <(
n2
 - 1u); j++)

319 
ü2
 = 
ü1
 + ia1;

320 
ü3
 = 
ü2
 + 
ü1
;

321 
co1
 = 
pC€f
[
ü1
 * 2u];

322 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

323 
co2
 = 
pC€f
[
ü2
 * 2u];

324 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

325 
co3
 = 
pC€f
[
ü3
 * 2u];

326 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

328 
ü1
 = ia1 + 
twidC€fModifõr
;

330 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

334 
i1
 = 
i0
 + 
n2
;

335 
i2
 = 
i1
 + 
n2
;

336 
i3
 = 
i2
 + 
n2
;

340 
r1
 = 
pSrc
[2u * 
i0
] +ÖSrc[2u * 
i2
];

342 
r2
 = 
pSrc
[2u * 
i0
] -ÖSrc[2u * 
i2
];

345 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

347 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

350 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

353 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
) >> 2u;

355 
r1
 =Ñ1 - 
t1
;

358 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

360 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
) >> 2u;

363 
s1
 = s1 - 
t2
;

366 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

368 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

371 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

372 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) >> 1u;

375 
pSrc
[(2u * 
i1
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

376 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) >> 1u;

379 
r1
 = 
r2
 + 
t1
;

381 
r2
 =Ñ2 - 
t1
;

384 
s1
 = 
s2
 - 
t2
;

386 
s2
 = s2 + 
t2
;

389 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

390 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

393 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

394 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

397 
pSrc
[2u * 
i3
] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

398 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

401 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

402 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

405 
twidC€fModifõr
 <<= 2u;

408 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
j
, 
k
;

409 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

411 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

412 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

413 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

414 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

416 
q31_t
 *
±r1
;

417 
q31_t
 *
pSi0
;

418 
q31_t
 *
pSi1
;

419 
q31_t
 *
pSi2
;

420 
q31_t
 *
pSi3
;

421 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

430 
n2
 = 
f·Lí
;

431 
n1
 = 
n2
;

433 
n2
 >>= 2u;

435 
ü1
 = 0u;

437 
j
 = 
n2
;

439 
pSi0
 = 
pSrc
;

440 
pSi1
 = 
pSi0
 + 2 * 
n2
;

441 
pSi2
 = 
pSi1
 + 2 * 
n2
;

442 
pSi3
 = 
pSi2
 + 2 * 
n2
;

451 
r1
 = (
pSi0
[0] >> 4uË+ (
pSi2
[0] >> 4u);

453 
r2
 = (
pSi0
[0] >> 4uË- (
pSi2
[0] >> 4u);

456 
t1
 = (
pSi1
[0] >> 4uË+ (
pSi3
[0] >> 4u);

459 
s1
 = (
pSi0
[1] >> 4uË+ (
pSi2
[1] >> 4u);

461 
s2
 = (
pSi0
[1] >> 4uË- (
pSi2
[1] >> 4u);

464 *
pSi0
++ = (
r1
 + 
t1
);

466 
r1
 =Ñ1 - 
t1
;

468 
t2
 = (
pSi1
[1] >> 4uË+ (
pSi3
[1] >> 4u);

471 *
pSi0
++ = (
s1
 + 
t2
);

474 
s1
 = s1 - 
t2
;

477 
t1
 = (
pSi1
[1] >> 4uË- (
pSi3
[1] >> 4u);

479 
t2
 = (
pSi1
[0] >> 4uË- (
pSi3
[0] >> 4u);

482 
ü2
 = 2u * 
ü1
;

483 
co2
 = 
pC€f
[
ü2
 * 2u];

484 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

487 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

488 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

491 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

492 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

495 
r1
 = 
r2
 + 
t1
;

497 
r2
 =Ñ2 - 
t1
;

500 
s1
 = 
s2
 - 
t2
;

502 
s2
 = s2 + 
t2
;

504 
co1
 = 
pC€f
[
ü1
 * 2u];

505 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

508 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

509 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

512 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

513 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

516 
ü3
 = 3u * 
ü1
;

517 
co3
 = 
pC€f
[
ü3
 * 2u];

518 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

521 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

522 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

525 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

526 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

529 
ü1
 = ia1 + 
twidC€fModifõr
;

531 } --
j
);

543 
twidC€fModifõr
 <<= 2u;

546 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

549 
n1
 = 
n2
;

550 
n2
 >>= 2u;

551 
ü1
 = 0u;

554 
j
 = 0u; j <(
n2
 - 1u); j++)

557 
ü2
 = 
ü1
 + ia1;

558 
ü3
 = 
ü2
 + 
ü1
;

559 
co1
 = 
pC€f
[
ü1
 * 2u];

560 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

561 
co2
 = 
pC€f
[
ü2
 * 2u];

562 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

563 
co3
 = 
pC€f
[
ü3
 * 2u];

564 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

566 
ü1
 = ia1 + 
twidC€fModifõr
;

568 
pSi0
 = 
pSrc
 + 2 * 
j
;

569 
pSi1
 = 
pSi0
 + 2 * 
n2
;

570 
pSi2
 = 
pSi1
 + 2 * 
n2
;

571 
pSi3
 = 
pSi2
 + 2 * 
n2
;

573 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

577 
r1
 = 
pSi0
[0] + 
pSi2
[0];

580 
r2
 = 
pSi0
[0] - 
pSi2
[0];

584 
s1
 = 
pSi0
[1] + 
pSi2
[1];

587 
s2
 = 
pSi0
[1] - 
pSi2
[1];

591 
t1
 = 
pSi1
[0] + 
pSi3
[0];

595 
pSi0
[0] = (
r1
 + 
t1
) >> 2u;

597 
r1
 =Ñ1 - 
t1
;

600 
t2
 = 
pSi1
[1] + 
pSi3
[1];

603 
pSi0
[1] = (
s1
 + 
t2
) >> 2u;

604 
pSi0
 +2 * 
n1
;

607 
s1
 = s1 - 
t2
;

610 
t1
 = 
pSi1
[1] - 
pSi3
[1];

613 
t2
 = 
pSi1
[0] - 
pSi3
[0];

617 
pSi1
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) +

618 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) >> 1u;

621 
pSi1
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) -

622 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) >> 1u;

623 
pSi1
 +2 * 
n1
;

626 
r1
 = 
r2
 + 
t1
;

628 
r2
 =Ñ2 - 
t1
;

631 
s1
 = 
s2
 - 
t2
;

633 
s2
 = s2 + 
t2
;

636 
pSi2
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) +

637 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

640 
pSi2
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) -

641 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

642 
pSi2
 +2 * 
n1
;

645 
pSi3
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) +

646 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

649 
pSi3
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) -

650 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

651 
pSi3
 +2 * 
n1
;

654 
twidC€fModifõr
 <<= 2u;

668 
j
 = 
f·Lí
 >> 2;

669 
±r1
 = &
pSrc
[0];

675 #i‚de‡
ARM_MATH_BIG_ENDIAN


678 
xaya
 = *
	`__SIMD64
(
±r1
)++;

679 
xa
 = (
q31_t
Ë
xaya
;

680 
ya
 = (
q31_t
Ë(
xaya
 >> 32);

683 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

684 
xb
 = (
q31_t
Ë
xbyb
;

685 
yb
 = (
q31_t
Ë(
xbyb
 >> 32);

688 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

689 
xc
 = (
q31_t
Ë
xcyc
;

690 
yc
 = (
q31_t
Ë(
xcyc
 >> 32);

693 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

694 
xd
 = (
q31_t
Ë
xdyd
;

695 
yd
 = (
q31_t
Ë(
xdyd
 >> 32);

700 
xaya
 = *
	`__SIMD64
(
±r1
)++;

701 
ya
 = (
q31_t
Ë
xaya
;

702 
xa
 = (
q31_t
Ë(
xaya
 >> 32);

705 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

706 
yb
 = (
q31_t
Ë
xbyb
;

707 
xb
 = (
q31_t
Ë(
xbyb
 >> 32);

710 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

711 
yc
 = (
q31_t
Ë
xcyc
;

712 
xc
 = (
q31_t
Ë(
xcyc
 >> 32);

715 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

716 
yd
 = (
q31_t
Ë
xdyd
;

717 
xd
 = (
q31_t
Ë(
xdyd
 >> 32);

723 
xa_out
 = 
xa
 + 
xb
 + 
xc
 + 
xd
;

726 
ya_out
 = 
ya
 + 
yb
 + 
yc
 + 
yd
;

729 
±r1
 =Ötr1 - 8u;

732 *
±r1
++ = 
xa_out
;

733 *
±r1
++ = 
ya_out
;

735 
xc_out
 = (
xa
 - 
xb
 + 
xc
 - 
xd
);

736 
yc_out
 = (
ya
 - 
yb
 + 
yc
 - 
yd
);

739 *
±r1
++ = 
xc_out
;

740 *
±r1
++ = 
yc_out
;

742 
xb_out
 = (
xa
 + 
yb
 - 
xc
 - 
yd
);

743 
yb_out
 = (
ya
 - 
xb
 - 
yc
 + 
xd
);

746 *
±r1
++ = 
xb_out
;

747 *
±r1
++ = 
yb_out
;

749 
xd_out
 = (
xa
 - 
yb
 - 
xc
 + 
yd
);

750 
yd_out
 = (
ya
 + 
xb
 - 
yc
 - 
xd
);

753 *
±r1
++ = 
xd_out
;

754 *
±r1
++ = 
yd_out
;

757 } --
j
);

766 
	}
}

819 
	$¨m_ødix4_buâîÊy_övî£_q31
(

820 
q31_t
 * 
pSrc
,

821 
uöt32_t
 
f·Lí
,

822 
q31_t
 * 
pC€f
,

823 
uöt32_t
 
twidC€fModifõr
)

825 #i‡
	`deföed
(
ARM_MATH_CM7
)

826 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
i1
, 
i2
, 
i3
, 
j
, 
k
;

827 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

828 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

829 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

830 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

831 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

833 
q31_t
 *
±r1
;

834 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

843 
n2
 = 
f·Lí
;

844 
n1
 = 
n2
;

846 
n2
 >>= 2u;

847 
i0
 = 0u;

848 
ü1
 = 0u;

850 
j
 = 
n2
;

859 
i1
 = 
i0
 + 
n2
;

860 
i2
 = 
i1
 + 
n2
;

861 
i3
 = 
i2
 + 
n2
;

865 
r1
 = (
pSrc
[2u * 
i0
] >> 4uË+ (pSrc[2u * 
i2
] >> 4u);

867 
r2
 = (
pSrc
[2u * 
i0
] >> 4uË- (pSrc[2u * 
i2
] >> 4u);

870 
t1
 = (
pSrc
[2u * 
i1
] >> 4uË+ (pSrc[2u * 
i3
] >> 4u);

873 
s1
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i2
) + 1u] >> 4u);

875 
s2
 = (
pSrc
[(2u * 
i0
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i2
) + 1u] >> 4u);

878 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
);

880 
r1
 =Ñ1 - 
t1
;

882 
t2
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË+ (pSrc[(2u * 
i3
) + 1u] >> 4u);

884 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
);

887 
s1
 = s1 - 
t2
;

890 
t1
 = (
pSrc
[(2u * 
i1
Ë+ 1u] >> 4uË- (pSrc[(2u * 
i3
) + 1u] >> 4u);

892 
t2
 = (
pSrc
[2u * 
i1
] >> 4uË- (pSrc[2u * 
i3
] >> 4u);

895 
ü2
 = 2u * 
ü1
;

896 
co2
 = 
pC€f
[
ü2
 * 2u];

897 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

900 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) -

901 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

904 
pSrc
[2u * 
i1
 + 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) +

905 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

908 
r1
 = 
r2
 - 
t1
;

910 
r2
 =Ñ2 + 
t1
;

913 
s1
 = 
s2
 + 
t2
;

915 
s2
 = s2 - 
t2
;

917 
co1
 = 
pC€f
[
ü1
 * 2u];

918 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

921 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

922 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

925 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

926 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

929 
ü3
 = 3u * 
ü1
;

930 
co3
 = 
pC€f
[
ü3
 * 2u];

931 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

934 
pSrc
[2u * 
i3
] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

935 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

938 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

939 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

942 
ü1
 = ia1 + 
twidC€fModifõr
;

945 
i0
 = i0 + 1u;

947 } --
j
);

955 
twidC€fModifõr
 <<= 2u;

958 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

961 
n1
 = 
n2
;

962 
n2
 >>= 2u;

963 
ü1
 = 0u;

965 
j
 = 0; j <(
n2
 - 1u); j++)

968 
ü2
 = 
ü1
 + ia1;

969 
ü3
 = 
ü2
 + 
ü1
;

970 
co1
 = 
pC€f
[
ü1
 * 2u];

971 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

972 
co2
 = 
pC€f
[
ü2
 * 2u];

973 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

974 
co3
 = 
pC€f
[
ü3
 * 2u];

975 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

977 
ü1
 = ia1 + 
twidC€fModifõr
;

979 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

983 
i1
 = 
i0
 + 
n2
;

984 
i2
 = 
i1
 + 
n2
;

985 
i3
 = 
i2
 + 
n2
;

989 
r1
 = 
pSrc
[2u * 
i0
] +ÖSrc[2u * 
i2
];

991 
r2
 = 
pSrc
[2u * 
i0
] -ÖSrc[2u * 
i2
];

994 
s1
 = 
pSrc
[(2u * 
i0
Ë+ 1u] +ÖSrc[(2u * 
i2
) + 1u];

996 
s2
 = 
pSrc
[(2u * 
i0
Ë+ 1u] -ÖSrc[(2u * 
i2
) + 1u];

999 
t1
 = 
pSrc
[2u * 
i1
] +ÖSrc[2u * 
i3
];

1002 
pSrc
[2u * 
i0
] = (
r1
 + 
t1
) >> 2u;

1004 
r1
 =Ñ1 - 
t1
;

1006 
t2
 = 
pSrc
[(2u * 
i1
Ë+ 1u] +ÖSrc[(2u * 
i3
) + 1u];

1008 
pSrc
[(2u * 
i0
Ë+ 1u] = (
s1
 + 
t2
) >> 2u;

1011 
s1
 = s1 - 
t2
;

1014 
t1
 = 
pSrc
[(2u * 
i1
Ë+ 1u] -ÖSrc[(2u * 
i3
) + 1u];

1016 
t2
 = 
pSrc
[2u * 
i1
] -ÖSrc[2u * 
i3
];

1019 
pSrc
[2u * 
i1
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32u)) -

1020 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32u))) >> 1u;

1023 
pSrc
[(2u * 
i1
) + 1u] =

1024 (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32u)) +

1025 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32u))) >> 1u;

1028 
r1
 = 
r2
 - 
t1
;

1030 
r2
 =Ñ2 + 
t1
;

1033 
s1
 = 
s2
 + 
t2
;

1035 
s2
 = s2 - 
t2
;

1038 
pSrc
[2u * 
i2
] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

1039 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

1042 
pSrc
[(2u * 
i2
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

1043 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

1046 
pSrc
[(2u * 
i3
)] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

1047 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

1050 
pSrc
[(2u * 
i3
Ë+ 1u] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

1051 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

1054 
twidC€fModifõr
 <<= 2u;

1057 
uöt32_t
 
n1
, 
n2
, 
ü1
, 
ü2
, 
ü3
, 
i0
, 
j
, 
k
;

1058 
q31_t
 
t1
, 
t2
, 
r1
, 
r2
, 
s1
, 
s2
, 
co1
, 
co2
, 
co3
, 
si1
, 
si2
, 
si3
;

1059 
q31_t
 
xa
, 
xb
, 
xc
, 
xd
;

1060 
q31_t
 
ya
, 
yb
, 
yc
, 
yd
;

1061 
q31_t
 
xa_out
, 
xb_out
, 
xc_out
, 
xd_out
;

1062 
q31_t
 
ya_out
, 
yb_out
, 
yc_out
, 
yd_out
;

1064 
q31_t
 *
±r1
;

1065 
q31_t
 *
pSi0
;

1066 
q31_t
 *
pSi1
;

1067 
q31_t
 *
pSi2
;

1068 
q31_t
 *
pSi3
;

1069 
q63_t
 
xaya
, 
xbyb
, 
xcyc
, 
xdyd
;

1078 
n2
 = 
f·Lí
;

1079 
n1
 = 
n2
;

1081 
n2
 >>= 2u;

1083 
ü1
 = 0u;

1085 
j
 = 
n2
;

1087 
pSi0
 = 
pSrc
;

1088 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1089 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1090 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1096 
r1
 = (
pSi0
[0] >> 4uË+ (
pSi2
[0] >> 4u);

1098 
r2
 = (
pSi0
[0] >> 4uË- (
pSi2
[0] >> 4u);

1101 
t1
 = (
pSi1
[0] >> 4uË+ (
pSi3
[0] >> 4u);

1104 
s1
 = (
pSi0
[1] >> 4uË+ (
pSi2
[1] >> 4u);

1106 
s2
 = (
pSi0
[1] >> 4uË- (
pSi2
[1] >> 4u);

1109 *
pSi0
++ = (
r1
 + 
t1
);

1111 
r1
 =Ñ1 - 
t1
;

1113 
t2
 = (
pSi1
[1] >> 4uË+ (
pSi3
[1] >> 4u);

1115 *
pSi0
++ = (
s1
 + 
t2
);

1118 
s1
 = s1 - 
t2
;

1121 
t1
 = (
pSi1
[1] >> 4uË- (
pSi3
[1] >> 4u);

1123 
t2
 = (
pSi1
[0] >> 4uË- (
pSi3
[0] >> 4u);

1126 
ü2
 = 2u * 
ü1
;

1127 
co2
 = 
pC€f
[
ü2
 * 2u];

1128 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

1131 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32)) -

1132 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32))) << 1u;

1135 *
pSi1
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32)) +

1136 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32))) << 1u;

1139 
r1
 = 
r2
 - 
t1
;

1141 
r2
 =Ñ2 + 
t1
;

1144 
s1
 = 
s2
 + 
t2
;

1146 
s2
 = s2 - 
t2
;

1148 
co1
 = 
pC€f
[
ü1
 * 2u];

1149 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

1152 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

1153 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) << 1u;

1156 *
pSi2
++ = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

1157 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) << 1u;

1160 
ü3
 = 3u * 
ü1
;

1161 
co3
 = 
pC€f
[
ü3
 * 2u];

1162 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

1165 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

1166 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) << 1u;

1169 *
pSi3
++ = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

1170 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) << 1u;

1173 
ü1
 = ia1 + 
twidC€fModifõr
;

1175 } --
j
);

1183 
twidC€fModifõr
 <<= 2u;

1186 
k
 = 
f·Lí
 / 4u; k > 4u; k >>= 2u)

1189 
n1
 = 
n2
;

1190 
n2
 >>= 2u;

1191 
ü1
 = 0u;

1193 
j
 = 0; j <(
n2
 - 1u); j++)

1196 
ü2
 = 
ü1
 + ia1;

1197 
ü3
 = 
ü2
 + 
ü1
;

1198 
co1
 = 
pC€f
[
ü1
 * 2u];

1199 
si1
 = 
pC€f
[(
ü1
 * 2u) + 1u];

1200 
co2
 = 
pC€f
[
ü2
 * 2u];

1201 
si2
 = 
pC€f
[(
ü2
 * 2u) + 1u];

1202 
co3
 = 
pC€f
[
ü3
 * 2u];

1203 
si3
 = 
pC€f
[(
ü3
 * 2u) + 1u];

1205 
ü1
 = ia1 + 
twidC€fModifõr
;

1207 
pSi0
 = 
pSrc
 + 2 * 
j
;

1208 
pSi1
 = 
pSi0
 + 2 * 
n2
;

1209 
pSi2
 = 
pSi1
 + 2 * 
n2
;

1210 
pSi3
 = 
pSi2
 + 2 * 
n2
;

1212 
i0
 = 
j
; i0 < 
f·Lí
; i0 +
n1
)

1216 
r1
 = 
pSi0
[0] + 
pSi2
[0];

1219 
r2
 = 
pSi0
[0] - 
pSi2
[0];

1223 
s1
 = 
pSi0
[1] + 
pSi2
[1];

1226 
s2
 = 
pSi0
[1] - 
pSi2
[1];

1230 
t1
 = 
pSi1
[0] + 
pSi3
[0];

1234 
pSi0
[0] = (
r1
 + 
t1
) >> 2u;

1236 
r1
 =Ñ1 - 
t1
;

1238 
t2
 = 
pSi1
[1] + 
pSi3
[1];

1241 
pSi0
[1] = (
s1
 + 
t2
) >> 2u;

1242 
pSi0
 +2 * 
n1
;

1245 
s1
 = s1 - 
t2
;

1248 
t1
 = 
pSi1
[1] - 
pSi3
[1];

1251 
t2
 = 
pSi1
[0] - 
pSi3
[0];

1255 
pSi1
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co2
) >> 32u)) -

1256 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si2
) >> 32u))) >> 1u;

1259 
pSi1
[1] =

1261 (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co2
) >> 32u)) +

1262 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si2
) >> 32u))) >> 1u;

1263 
pSi1
 +2 * 
n1
;

1266 
r1
 = 
r2
 - 
t1
;

1268 
r2
 =Ñ2 + 
t1
;

1271 
s1
 = 
s2
 + 
t2
;

1273 
s2
 = s2 - 
t2
;

1276 
pSi2
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
co1
) >> 32)) -

1277 ((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
si1
) >> 32))) >> 1u;

1280 
pSi2
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s1
 * 
co1
) >> 32)) +

1281 ((
öt32_t
Ë(((
q63_t
Ë
r1
 * 
si1
) >> 32))) >> 1u;

1282 
pSi2
 +2 * 
n1
;

1285 
pSi3
[0] = (((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
co3
) >> 32)) -

1286 ((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
si3
) >> 32))) >> 1u;

1289 
pSi3
[1] = (((
öt32_t
Ë(((
q63_t
Ë
s2
 * 
co3
) >> 32)) +

1290 ((
öt32_t
Ë(((
q63_t
Ë
r2
 * 
si3
) >> 32))) >> 1u;

1291 
pSi3
 +2 * 
n1
;

1294 
twidC€fModifõr
 <<= 2u;

1310 
j
 = 
f·Lí
 >> 2;

1311 
±r1
 = &
pSrc
[0];

1316 #i‚de‡
ARM_MATH_BIG_ENDIAN


1318 
xaya
 = *
	`__SIMD64
(
±r1
)++;

1319 
xa
 = (
q31_t
Ë
xaya
;

1320 
ya
 = (
q31_t
Ë(
xaya
 >> 32);

1323 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

1324 
xb
 = (
q31_t
Ë
xbyb
;

1325 
yb
 = (
q31_t
Ë(
xbyb
 >> 32);

1328 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

1329 
xc
 = (
q31_t
Ë
xcyc
;

1330 
yc
 = (
q31_t
Ë(
xcyc
 >> 32);

1333 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

1334 
xd
 = (
q31_t
Ë
xdyd
;

1335 
yd
 = (
q31_t
Ë(
xdyd
 >> 32);

1340 
xaya
 = *
	`__SIMD64
(
±r1
)++;

1341 
ya
 = (
q31_t
Ë
xaya
;

1342 
xa
 = (
q31_t
Ë(
xaya
 >> 32);

1345 
xbyb
 = *
	`__SIMD64
(
±r1
)++;

1346 
yb
 = (
q31_t
Ë
xbyb
;

1347 
xb
 = (
q31_t
Ë(
xbyb
 >> 32);

1350 
xcyc
 = *
	`__SIMD64
(
±r1
)++;

1351 
yc
 = (
q31_t
Ë
xcyc
;

1352 
xc
 = (
q31_t
Ë(
xcyc
 >> 32);

1355 
xdyd
 = *
	`__SIMD64
(
±r1
)++;

1356 
yd
 = (
q31_t
Ë
xdyd
;

1357 
xd
 = (
q31_t
Ë(
xdyd
 >> 32);

1363 
xa_out
 = 
xa
 + 
xb
 + 
xc
 + 
xd
;

1366 
ya_out
 = 
ya
 + 
yb
 + 
yc
 + 
yd
;

1369 
±r1
 =Ötr1 - 8u;

1372 *
±r1
++ = 
xa_out
;

1373 *
±r1
++ = 
ya_out
;

1375 
xc_out
 = (
xa
 - 
xb
 + 
xc
 - 
xd
);

1376 
yc_out
 = (
ya
 - 
yb
 + 
yc
 - 
yd
);

1379 *
±r1
++ = 
xc_out
;

1380 *
±r1
++ = 
yc_out
;

1382 
xb_out
 = (
xa
 - 
yb
 - 
xc
 + 
yd
);

1383 
yb_out
 = (
ya
 + 
xb
 - 
yc
 - 
xd
);

1386 *
±r1
++ = 
xb_out
;

1387 *
±r1
++ = 
yb_out
;

1389 
xd_out
 = (
xa
 + 
yb
 - 
xc
 - 
yd
);

1390 
yd_out
 = (
ya
 - 
xb
 - 
yc
 + 
xd
);

1393 *
±r1
++ = 
xd_out
;

1394 *
±r1
++ = 
yd_out
;

1396 } --
j
);

1404 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix8_f32.c

41 
	~"¨m_m©h.h
"

140 
	$¨m_ødix8_buâîÊy_f32
(

141 
Êﬂt32_t
 * 
pSrc
,

142 
uöt16_t
 
f·Lí
,

143 c⁄° 
Êﬂt32_t
 * 
pC€f
,

144 
uöt16_t
 
twidC€fModifõr
)

146 
uöt32_t
 
ü1
, 
ü2
, 
ü3
, 
ü4
, 
ü5
, 
ü6
, 
ü7
;

147 
uöt32_t
 
i1
, 
i2
, 
i3
, 
i4
, 
i5
, 
i6
, 
i7
, 
i8
;

148 
uöt32_t
 
id
;

149 
uöt32_t
 
n1
, 
n2
, 
j
;

151 
Êﬂt32_t
 
r1
, 
r2
, 
r3
, 
r4
, 
r5
, 
r6
, 
r7
, 
r8
;

152 
Êﬂt32_t
 
t1
, 
t2
;

153 
Êﬂt32_t
 
s1
, 
s2
, 
s3
, 
s4
, 
s5
, 
s6
, 
s7
, 
s8
;

154 
Êﬂt32_t
 
p1
, 
p2
, 
p3
, 
p4
;

155 
Êﬂt32_t
 
co2
, 
co3
, 
co4
, 
co5
, 
co6
, 
co7
, 
co8
;

156 
Êﬂt32_t
 
si2
, 
si3
, 
si4
, 
si5
, 
si6
, 
si7
, 
si8
;

157 c⁄° 
Êﬂt32_t
 
C81
 = 0.70710678118f;

159 
n2
 = 
f·Lí
;

163 
n1
 = 
n2
;

164 
n2
 =Ç2 >> 3;

165 
i1
 = 0;

169 
i2
 = 
i1
 + 
n2
;

170 
i3
 = 
i2
 + 
n2
;

171 
i4
 = 
i3
 + 
n2
;

172 
i5
 = 
i4
 + 
n2
;

173 
i6
 = 
i5
 + 
n2
;

174 
i7
 = 
i6
 + 
n2
;

175 
i8
 = 
i7
 + 
n2
;

176 
r1
 = 
pSrc
[2 * 
i1
] +ÖSrc[2 * 
i5
];

177 
r5
 = 
pSrc
[2 * 
i1
] -ÖSrc[2 * 
i5
];

178 
r2
 = 
pSrc
[2 * 
i2
] +ÖSrc[2 * 
i6
];

179 
r6
 = 
pSrc
[2 * 
i2
] -ÖSrc[2 * 
i6
];

180 
r3
 = 
pSrc
[2 * 
i3
] +ÖSrc[2 * 
i7
];

181 
r7
 = 
pSrc
[2 * 
i3
] -ÖSrc[2 * 
i7
];

182 
r4
 = 
pSrc
[2 * 
i4
] +ÖSrc[2 * 
i8
];

183 
r8
 = 
pSrc
[2 * 
i4
] -ÖSrc[2 * 
i8
];

184 
t1
 = 
r1
 - 
r3
;

185 
r1
 =Ñ1 + 
r3
;

186 
r3
 = 
r2
 - 
r4
;

187 
r2
 =Ñ2 + 
r4
;

188 
pSrc
[2 * 
i1
] = 
r1
 + 
r2
;

189 
pSrc
[2 * 
i5
] = 
r1
 - 
r2
;

190 
r1
 = 
pSrc
[2 * 
i1
 + 1] +ÖSrc[2 * 
i5
 + 1];

191 
s5
 = 
pSrc
[2 * 
i1
 + 1] -ÖSrc[2 * 
i5
 + 1];

192 
r2
 = 
pSrc
[2 * 
i2
 + 1] +ÖSrc[2 * 
i6
 + 1];

193 
s6
 = 
pSrc
[2 * 
i2
 + 1] -ÖSrc[2 * 
i6
 + 1];

194 
s3
 = 
pSrc
[2 * 
i3
 + 1] +ÖSrc[2 * 
i7
 + 1];

195 
s7
 = 
pSrc
[2 * 
i3
 + 1] -ÖSrc[2 * 
i7
 + 1];

196 
r4
 = 
pSrc
[2 * 
i4
 + 1] +ÖSrc[2 * 
i8
 + 1];

197 
s8
 = 
pSrc
[2 * 
i4
 + 1] -ÖSrc[2 * 
i8
 + 1];

198 
t2
 = 
r1
 - 
s3
;

199 
r1
 =Ñ1 + 
s3
;

200 
s3
 = 
r2
 - 
r4
;

201 
r2
 =Ñ2 + 
r4
;

202 
pSrc
[2 * 
i1
 + 1] = 
r1
 + 
r2
;

203 
pSrc
[2 * 
i5
 + 1] = 
r1
 - 
r2
;

204 
pSrc
[2 * 
i3
] = 
t1
 + 
s3
;

205 
pSrc
[2 * 
i7
] = 
t1
 - 
s3
;

206 
pSrc
[2 * 
i3
 + 1] = 
t2
 - 
r3
;

207 
pSrc
[2 * 
i7
 + 1] = 
t2
 + 
r3
;

208 
r1
 = (
r6
 - 
r8
Ë* 
C81
;

209 
r6
 = (r6 + 
r8
Ë* 
C81
;

210 
r2
 = (
s6
 - 
s8
Ë* 
C81
;

211 
s6
 = (s6 + 
s8
Ë* 
C81
;

212 
t1
 = 
r5
 - 
r1
;

213 
r5
 =Ñ5 + 
r1
;

214 
r8
 = 
r7
 - 
r6
;

215 
r7
 =Ñ7 + 
r6
;

216 
t2
 = 
s5
 - 
r2
;

217 
s5
 = s5 + 
r2
;

218 
s8
 = 
s7
 - 
s6
;

219 
s7
 = s7 + 
s6
;

220 
pSrc
[2 * 
i2
] = 
r5
 + 
s7
;

221 
pSrc
[2 * 
i8
] = 
r5
 - 
s7
;

222 
pSrc
[2 * 
i6
] = 
t1
 + 
s8
;

223 
pSrc
[2 * 
i4
] = 
t1
 - 
s8
;

224 
pSrc
[2 * 
i2
 + 1] = 
s5
 - 
r7
;

225 
pSrc
[2 * 
i8
 + 1] = 
s5
 + 
r7
;

226 
pSrc
[2 * 
i6
 + 1] = 
t2
 - 
r8
;

227 
pSrc
[2 * 
i4
 + 1] = 
t2
 + 
r8
;

229 
i1
 +
n1
;

230 } 
i1
 < 
f·Lí
);

232 if(
n2
 < 8)

235 
ü1
 = 0;

236 
j
 = 1;

241 
id
 = 
ü1
 + 
twidC€fModifõr
;

242 
ü1
 = 
id
;

243 
ü2
 = 
ü1
 + 
id
;

244 
ü3
 = 
ü2
 + 
id
;

245 
ü4
 = 
ü3
 + 
id
;

246 
ü5
 = 
ü4
 + 
id
;

247 
ü6
 = 
ü5
 + 
id
;

248 
ü7
 = 
ü6
 + 
id
;

250 
co2
 = 
pC€f
[2 * 
ü1
];

251 
co3
 = 
pC€f
[2 * 
ü2
];

252 
co4
 = 
pC€f
[2 * 
ü3
];

253 
co5
 = 
pC€f
[2 * 
ü4
];

254 
co6
 = 
pC€f
[2 * 
ü5
];

255 
co7
 = 
pC€f
[2 * 
ü6
];

256 
co8
 = 
pC€f
[2 * 
ü7
];

257 
si2
 = 
pC€f
[2 * 
ü1
 + 1];

258 
si3
 = 
pC€f
[2 * 
ü2
 + 1];

259 
si4
 = 
pC€f
[2 * 
ü3
 + 1];

260 
si5
 = 
pC€f
[2 * 
ü4
 + 1];

261 
si6
 = 
pC€f
[2 * 
ü5
 + 1];

262 
si7
 = 
pC€f
[2 * 
ü6
 + 1];

263 
si8
 = 
pC€f
[2 * 
ü7
 + 1];

265 
i1
 = 
j
;

270 
i2
 = 
i1
 + 
n2
;

271 
i3
 = 
i2
 + 
n2
;

272 
i4
 = 
i3
 + 
n2
;

273 
i5
 = 
i4
 + 
n2
;

274 
i6
 = 
i5
 + 
n2
;

275 
i7
 = 
i6
 + 
n2
;

276 
i8
 = 
i7
 + 
n2
;

277 
r1
 = 
pSrc
[2 * 
i1
] +ÖSrc[2 * 
i5
];

278 
r5
 = 
pSrc
[2 * 
i1
] -ÖSrc[2 * 
i5
];

279 
r2
 = 
pSrc
[2 * 
i2
] +ÖSrc[2 * 
i6
];

280 
r6
 = 
pSrc
[2 * 
i2
] -ÖSrc[2 * 
i6
];

281 
r3
 = 
pSrc
[2 * 
i3
] +ÖSrc[2 * 
i7
];

282 
r7
 = 
pSrc
[2 * 
i3
] -ÖSrc[2 * 
i7
];

283 
r4
 = 
pSrc
[2 * 
i4
] +ÖSrc[2 * 
i8
];

284 
r8
 = 
pSrc
[2 * 
i4
] -ÖSrc[2 * 
i8
];

285 
t1
 = 
r1
 - 
r3
;

286 
r1
 =Ñ1 + 
r3
;

287 
r3
 = 
r2
 - 
r4
;

288 
r2
 =Ñ2 + 
r4
;

289 
pSrc
[2 * 
i1
] = 
r1
 + 
r2
;

290 
r2
 = 
r1
 -Ñ2;

291 
s1
 = 
pSrc
[2 * 
i1
 + 1] +ÖSrc[2 * 
i5
 + 1];

292 
s5
 = 
pSrc
[2 * 
i1
 + 1] -ÖSrc[2 * 
i5
 + 1];

293 
s2
 = 
pSrc
[2 * 
i2
 + 1] +ÖSrc[2 * 
i6
 + 1];

294 
s6
 = 
pSrc
[2 * 
i2
 + 1] -ÖSrc[2 * 
i6
 + 1];

295 
s3
 = 
pSrc
[2 * 
i3
 + 1] +ÖSrc[2 * 
i7
 + 1];

296 
s7
 = 
pSrc
[2 * 
i3
 + 1] -ÖSrc[2 * 
i7
 + 1];

297 
s4
 = 
pSrc
[2 * 
i4
 + 1] +ÖSrc[2 * 
i8
 + 1];

298 
s8
 = 
pSrc
[2 * 
i4
 + 1] -ÖSrc[2 * 
i8
 + 1];

299 
t2
 = 
s1
 - 
s3
;

300 
s1
 = s1 + 
s3
;

301 
s3
 = 
s2
 - 
s4
;

302 
s2
 = s2 + 
s4
;

303 
r1
 = 
t1
 + 
s3
;

304 
t1
 =Å1 - 
s3
;

305 
pSrc
[2 * 
i1
 + 1] = 
s1
 + 
s2
;

306 
s2
 = 
s1
 - s2;

307 
s1
 = 
t2
 - 
r3
;

308 
t2
 =Å2 + 
r3
;

309 
p1
 = 
co5
 * 
r2
;

310 
p2
 = 
si5
 * 
s2
;

311 
p3
 = 
co5
 * 
s2
;

312 
p4
 = 
si5
 * 
r2
;

313 
pSrc
[2 * 
i5
] = 
p1
 + 
p2
;

314 
pSrc
[2 * 
i5
 + 1] = 
p3
 - 
p4
;

315 
p1
 = 
co3
 * 
r1
;

316 
p2
 = 
si3
 * 
s1
;

317 
p3
 = 
co3
 * 
s1
;

318 
p4
 = 
si3
 * 
r1
;

319 
pSrc
[2 * 
i3
] = 
p1
 + 
p2
;

320 
pSrc
[2 * 
i3
 + 1] = 
p3
 - 
p4
;

321 
p1
 = 
co7
 * 
t1
;

322 
p2
 = 
si7
 * 
t2
;

323 
p3
 = 
co7
 * 
t2
;

324 
p4
 = 
si7
 * 
t1
;

325 
pSrc
[2 * 
i7
] = 
p1
 + 
p2
;

326 
pSrc
[2 * 
i7
 + 1] = 
p3
 - 
p4
;

327 
r1
 = (
r6
 - 
r8
Ë* 
C81
;

328 
r6
 = (r6 + 
r8
Ë* 
C81
;

329 
s1
 = (
s6
 - 
s8
Ë* 
C81
;

330 
s6
 = (s6 + 
s8
Ë* 
C81
;

331 
t1
 = 
r5
 - 
r1
;

332 
r5
 =Ñ5 + 
r1
;

333 
r8
 = 
r7
 - 
r6
;

334 
r7
 =Ñ7 + 
r6
;

335 
t2
 = 
s5
 - 
s1
;

336 
s5
 = s5 + 
s1
;

337 
s8
 = 
s7
 - 
s6
;

338 
s7
 = s7 + 
s6
;

339 
r1
 = 
r5
 + 
s7
;

340 
r5
 =Ñ5 - 
s7
;

341 
r6
 = 
t1
 + 
s8
;

342 
t1
 =Å1 - 
s8
;

343 
s1
 = 
s5
 - 
r7
;

344 
s5
 = s5 + 
r7
;

345 
s6
 = 
t2
 - 
r8
;

346 
t2
 =Å2 + 
r8
;

347 
p1
 = 
co2
 * 
r1
;

348 
p2
 = 
si2
 * 
s1
;

349 
p3
 = 
co2
 * 
s1
;

350 
p4
 = 
si2
 * 
r1
;

351 
pSrc
[2 * 
i2
] = 
p1
 + 
p2
;

352 
pSrc
[2 * 
i2
 + 1] = 
p3
 - 
p4
;

353 
p1
 = 
co8
 * 
r5
;

354 
p2
 = 
si8
 * 
s5
;

355 
p3
 = 
co8
 * 
s5
;

356 
p4
 = 
si8
 * 
r5
;

357 
pSrc
[2 * 
i8
] = 
p1
 + 
p2
;

358 
pSrc
[2 * 
i8
 + 1] = 
p3
 - 
p4
;

359 
p1
 = 
co6
 * 
r6
;

360 
p2
 = 
si6
 * 
s6
;

361 
p3
 = 
co6
 * 
s6
;

362 
p4
 = 
si6
 * 
r6
;

363 
pSrc
[2 * 
i6
] = 
p1
 + 
p2
;

364 
pSrc
[2 * 
i6
 + 1] = 
p3
 - 
p4
;

365 
p1
 = 
co4
 * 
t1
;

366 
p2
 = 
si4
 * 
t2
;

367 
p3
 = 
co4
 * 
t2
;

368 
p4
 = 
si4
 * 
t1
;

369 
pSrc
[2 * 
i4
] = 
p1
 + 
p2
;

370 
pSrc
[2 * 
i4
 + 1] = 
p3
 - 
p4
;

372 
i1
 +
n1
;

373 } 
i1
 < 
f·Lí
);

375 
j
++;

376 } 
j
 < 
n2
);

378 
twidC€fModifõr
 <<= 3;

379 } 
n2
 > 7);

380 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_f32.c

41 
	~"¨m_m©h.h
"

137 
	$¨m_d˘4_f32
(

138 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

139 
Êﬂt32_t
 * 
pSèã
,

140 
Êﬂt32_t
 * 
pI∆öeBuf„r
)

142 
uöt32_t
 
i
;

143 
Êﬂt32_t
 *
weights
 = 
S
->
pTwiddÀ
;

144 
Êﬂt32_t
 *
cosFa˘
 = 
S
->
pCosFa˘‹
;

145 
Êﬂt32_t
 *
pS1
, *
pS2
, *
pbuff
;

146 
Êﬂt32_t
 
ö
;

170 
	`¨m_sˇÀ_f32
(
pI∆öeBuf„r
, 2.0f,ÖI∆öeBuf„r, 
S
->
N
);

171 
	`¨m_mu…_f32
(
pI∆öeBuf„r
, 
cosFa˘
,ÖI∆öeBuf„r, 
S
->
N
);

180 
pS1
 = 
pSèã
;

183 
pS2
 = 
pSèã
 + (
S
->
N
 - 1u);

186 
pbuff
 = 
pI∆öeBuf„r
;

188 #i‚de‡
ARM_MATH_CM0_FAMILY


193 
i
 = (
uöt32_t
Ë
S
->
Nby2
 >> 2u;

201 *
pS1
++ = *
pbuff
++;

203 *
pS2
-- = *
pbuff
++;

205 *
pS1
++ = *
pbuff
++;

206 *
pS2
-- = *
pbuff
++;

208 *
pS1
++ = *
pbuff
++;

209 *
pS2
-- = *
pbuff
++;

211 *
pS1
++ = *
pbuff
++;

212 *
pS2
-- = *
pbuff
++;

215 
i
--;

216 } 
i
 > 0u);

219 
pbuff
 = 
pI∆öeBuf„r
;

222 
pS1
 = 
pSèã
;

225 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

232 *
pbuff
++ = *
pS1
++;

233 *
pbuff
++ = *
pS1
++;

234 *
pbuff
++ = *
pS1
++;

235 *
pbuff
++ = *
pS1
++;

238 
i
--;

239 } 
i
 > 0u);

246 
	`¨m_rf·_f32
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

251 
	`¨m_cm∂x_mu…_cm∂x_f32
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

260 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) >> 2u;

263 
pbuff
 = 
pI∆öeBuf„r
;

266 
pS1
 = 
pSèã
;

269 
ö
 = *
pS1
++ * (
Êﬂt32_t
) 0.5;

271 *
pbuff
++ = 
ö
;

274 
pS1
++;

282 
ö
 = *
pS1
++ - in;

283 *
pbuff
++ = 
ö
;

285 
pS1
++;

287 
ö
 = *
pS1
++ - in;

288 *
pbuff
++ = 
ö
;

289 
pS1
++;

291 
ö
 = *
pS1
++ - in;

292 *
pbuff
++ = 
ö
;

293 
pS1
++;

295 
ö
 = *
pS1
++ - in;

296 *
pbuff
++ = 
ö
;

297 
pS1
++;

300 
i
--;

301 } 
i
 > 0u);

305 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) % 0x4u;

307 
i
 > 0u)

311 
ö
 = *
pS1
++ - in;

312 *
pbuff
++ = 
ö
;

314 
pS1
++;

317 
i
--;

324 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

327 
pbuff
 = 
pI∆öeBuf„r
;

333 
ö
 = *
pbuff
;

334 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

336 
ö
 = *
pbuff
;

337 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

339 
ö
 = *
pbuff
;

340 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

342 
ö
 = *
pbuff
;

343 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

346 
i
--;

347 } 
i
 > 0u);

355 
i
 = (
uöt32_t
Ë
S
->
Nby2
;

361 *
pS1
++ = *
pbuff
++;

363 *
pS2
-- = *
pbuff
++;

366 
i
--;

367 } 
i
 > 0u);

370 
pbuff
 = 
pI∆öeBuf„r
;

373 
pS1
 = 
pSèã
;

376 
i
 = (
uöt32_t
Ë
S
->
N
;

381 *
pbuff
++ = *
pS1
++;

384 
i
--;

385 } 
i
 > 0u);

392 
	`¨m_rf·_f32
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

397 
	`¨m_cm∂x_mu…_cm∂x_f32
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

406 
pbuff
 = 
pI∆öeBuf„r
;

409 
pS1
 = 
pSèã
;

412 
ö
 = *
pS1
++ * (
Êﬂt32_t
) 0.5;

414 *
pbuff
++ = 
ö
;

417 
pS1
++;

420 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u);

426 
ö
 = *
pS1
++ - in;

427 *
pbuff
++ = 
ö
;

429 
pS1
++;

433 
i
--;

434 } 
i
 > 0u);

440 
i
 = (
uöt32_t
Ë
S
->
N
;

443 
pbuff
 = 
pI∆öeBuf„r
;

448 
ö
 = *
pbuff
;

449 *
pbuff
++ = 
ö
 * 
S
->
n‹mÆize
;

452 
i
--;

453 } 
i
 > 0u);

457 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_f32.c

42 
	~"¨m_m©h.h
"

75 c⁄° 
Êﬂt32_t
 
	gWeights_128
[256] = {

206 c⁄° 
Êﬂt32_t
 
	gWeights_512
[1024] = {

721 c⁄° 
Êﬂt32_t
 
	gWeights_2048
[4096] = {

2772 c⁄° 
Êﬂt32_t
 
	gWeights_8192
[16384] = {

10981 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_128
[128] = {

11048 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_512
[512] = {

11307 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_2048
[2048] = {

12334 c⁄° 
Êﬂt32_t
 
	gcos_Á˘‹s_8192
[8192] = {

16449 
¨m_°©us
 
	$¨m_d˘4_öô_f32
(

16450 
¨m_d˘4_ö°™˚_f32
 * 
S
,

16451 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

16452 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

16453 
uöt16_t
 
N
,

16454 
uöt16_t
 
Nby2
,

16455 
Êﬂt32_t
 
n‹mÆize
)

16458 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

16461 
Êﬂt32_t
 *
twiddÀPå
[4] =

16462 { (
Êﬂt32_t
 *Ë
Weights_128
, (Êﬂt32_à*Ë
Weights_512
,

16463 (
Êﬂt32_t
 *Ë
Weights_2048
, (Êﬂt32_à*Ë
Weights_8192


16467 
Êﬂt32_t
 *
pCosFa˘‹
[4] =

16468 { (
Êﬂt32_t
 *Ë
cos_Á˘‹s_128
, (Êﬂt32_à*Ë
cos_Á˘‹s_512
,

16469 (
Êﬂt32_t
 *Ë
cos_Á˘‹s_2048
, (Êﬂt32_à*Ë
cos_Á˘‹s_8192


16473 
S
->
N
 = N;

16476 
S
->
Nby2
 = Nby2;

16479 
S
->
n‹mÆize
 =Çormalize;

16482 
S
->
pRf·
 = 
S_RFFT
;

16485 
S
->
pCf·
 = 
S_CFFT
;

16487 
N
)

16491 
S
->
pTwiddÀ
 = 
twiddÀPå
[3];

16492 
S
->
pCosFa˘‹
 =ÖCosFactor[3];

16495 
S
->
pTwiddÀ
 = 
twiddÀPå
[2];

16496 
S
->
pCosFa˘‹
 =ÖCosFactor[2];

16499 
S
->
pTwiddÀ
 = 
twiddÀPå
[1];

16500 
S
->
pCosFa˘‹
 =ÖCosFactor[1];

16503 
S
->
pTwiddÀ
 = 
twiddÀPå
[0];

16504 
S
->
pCosFa˘‹
 =ÖCosFactor[0];

16507 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

16511 
	`¨m_rf·_öô_f32
(
S
->
pRf·
, S->
pCf·
, S->
N
, 0u, 1u);

16514  (
°©us
);

16515 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q15.c

42 
	~"¨m_m©h.h
"

77 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_128
[256] = {

112 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_512
[1024] = {

243 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_2048
[4096] = {

758 c⁄° 
q15_t
 
ALIGN4
 
	gWeightsQ15_8192
[16384] = {

2827 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_128
[128] = {

2846 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_512
[512] = {

2913 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_2048
[2048] = {

3173 c⁄° 
q15_t
 
ALIGN4
 
	gcos_Á˘‹sQ15_8192
[8192] = {

4215 
¨m_°©us
 
	$¨m_d˘4_öô_q15
(

4216 
¨m_d˘4_ö°™˚_q15
 * 
S
,

4217 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

4218 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

4219 
uöt16_t
 
N
,

4220 
uöt16_t
 
Nby2
,

4221 
q15_t
 
n‹mÆize
)

4224 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

4227 
q15_t
 *
twiddÀPå
[4] = { (q15_à*Ë
WeightsQ15_128
, (q15_à*Ë
WeightsQ15_512
,

4228 (
q15_t
 *Ë
WeightsQ15_2048
, (q15_à*Ë
WeightsQ15_8192


4232 
q15_t
 *
pCosFa˘‹
[4] =

4233 { (
q15_t
 *Ë
cos_Á˘‹sQ15_128
, (q15_à*Ë
cos_Á˘‹sQ15_512
,

4234 (
q15_t
 *Ë
cos_Á˘‹sQ15_2048
, (q15_à*Ë
cos_Á˘‹sQ15_8192


4238 
S
->
N
 = N;

4241 
S
->
Nby2
 = Nby2;

4244 
S
->
n‹mÆize
 =Çormalize;

4247 
S
->
pRf·
 = 
S_RFFT
;

4250 
S
->
pCf·
 = 
S_CFFT
;

4252 
N
)

4256 
S
->
pTwiddÀ
 = 
twiddÀPå
[3];

4257 
S
->
pCosFa˘‹
 =ÖCosFactor[3];

4260 
S
->
pTwiddÀ
 = 
twiddÀPå
[2];

4261 
S
->
pCosFa˘‹
 =ÖCosFactor[2];

4264 
S
->
pTwiddÀ
 = 
twiddÀPå
[1];

4265 
S
->
pCosFa˘‹
 =ÖCosFactor[1];

4268 
S
->
pTwiddÀ
 = 
twiddÀPå
[0];

4269 
S
->
pCosFa˘‹
 =ÖCosFactor[0];

4272 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

4276 
	`¨m_rf·_öô_q15
(
S
->
pRf·
, S->
N
, 0u, 1u);

4279  (
°©us
);

4280 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q31.c

42 
	~"¨m_m©h.h
"

77 c⁄° 
q31_t
 
	gWeightsQ31_128
[256] = {

144 c⁄° 
q31_t
 
	gWeightsQ31_512
[1024] = {

403 c⁄° 
q31_t
 
	gWeightsQ31_2048
[4096] = {

1430 c⁄° 
q31_t
 
	gWeightsQ31_8192
[16384] = {

5547 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_128
[128] = {

5582 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_512
[512] = {

5713 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_2048
[2048] = {

6229 c⁄° 
q31_t
 
	gcos_Á˘‹sQ31_8192
[8192] = {

8295 
¨m_°©us
 
	$¨m_d˘4_öô_q31
(

8296 
¨m_d˘4_ö°™˚_q31
 * 
S
,

8297 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

8298 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

8299 
uöt16_t
 
N
,

8300 
uöt16_t
 
Nby2
,

8301 
q31_t
 
n‹mÆize
)

8304 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

8307 
q31_t
 *
twiddÀPå
[4] = { (q31_à*Ë
WeightsQ31_128
, (q31_à*Ë
WeightsQ31_512
,

8308 (
q31_t
 *Ë
WeightsQ31_2048
, (q31_à*Ë
WeightsQ31_8192


8312 
q31_t
 *
pCosFa˘‹
[4] =

8313 { (
q31_t
 *Ë
cos_Á˘‹sQ31_128
, (q31_à*Ë
cos_Á˘‹sQ31_512
,

8314 (
q31_t
 *Ë
cos_Á˘‹sQ31_2048
, (q31_à*Ë
cos_Á˘‹sQ31_8192


8318 
S
->
N
 = N;

8321 
S
->
Nby2
 = Nby2;

8324 
S
->
n‹mÆize
 =Çormalize;

8327 
S
->
pRf·
 = 
S_RFFT
;

8330 
S
->
pCf·
 = 
S_CFFT
;

8332 
N
)

8336 
S
->
pTwiddÀ
 = 
twiddÀPå
[3];

8337 
S
->
pCosFa˘‹
 =ÖCosFactor[3];

8340 
S
->
pTwiddÀ
 = 
twiddÀPå
[2];

8341 
S
->
pCosFa˘‹
 =ÖCosFactor[2];

8344 
S
->
pTwiddÀ
 = 
twiddÀPå
[1];

8345 
S
->
pCosFa˘‹
 =ÖCosFactor[1];

8348 
S
->
pTwiddÀ
 = 
twiddÀPå
[0];

8349 
S
->
pCosFa˘‹
 =ÖCosFactor[0];

8352 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

8356 
	`¨m_rf·_öô_q31
(
S
->
pRf·
, S->
N
, 0, 1);

8359  (
°©us
);

8360 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q15.c

41 
	~"¨m_m©h.h
"

63 
	$¨m_d˘4_q15
(

64 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

65 
q15_t
 * 
pSèã
,

66 
q15_t
 * 
pI∆öeBuf„r
)

68 
uöt32_t
 
i
;

69 
q15_t
 *
weights
 = 
S
->
pTwiddÀ
;

70 
q15_t
 *
cosFa˘
 = 
S
->
pCosFa˘‹
;

71 
q15_t
 *
pS1
, *
pS2
, *
pbuff
;

72 
q15_t
 
ö
;

96 
	`¨m_mu…_q15
(
pI∆öeBuf„r
, 
cosFa˘
,ÖI∆öeBuf„r, 
S
->
N
);

97 
	`¨m_shi·_q15
(
pI∆öeBuf„r
, 1,ÖI∆öeBuf„r, 
S
->
N
);

106 
pS1
 = 
pSèã
;

109 
pS2
 = 
pSèã
 + (
S
->
N
 - 1u);

112 
pbuff
 = 
pI∆öeBuf„r
;

115 #i‚de‡
ARM_MATH_CM0_FAMILY


120 
i
 = (
uöt32_t
Ë
S
->
Nby2
 >> 2u;

128 *
pS1
++ = *
pbuff
++;

130 *
pS2
-- = *
pbuff
++;

132 *
pS1
++ = *
pbuff
++;

133 *
pS2
-- = *
pbuff
++;

135 *
pS1
++ = *
pbuff
++;

136 *
pS2
-- = *
pbuff
++;

138 *
pS1
++ = *
pbuff
++;

139 *
pS2
-- = *
pbuff
++;

142 
i
--;

143 } 
i
 > 0u);

146 
pbuff
 = 
pI∆öeBuf„r
;

149 
pS1
 = 
pSèã
;

152 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

159 *
pbuff
++ = *
pS1
++;

160 *
pbuff
++ = *
pS1
++;

161 *
pbuff
++ = *
pS1
++;

162 *
pbuff
++ = *
pS1
++;

165 
i
--;

166 } 
i
 > 0u);

173 
	`¨m_rf·_q15
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

178 
	`¨m_cm∂x_mu…_cm∂x_q15
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

182 
	`¨m_shi·_q15
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

191 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) >> 2u;

194 
pbuff
 = 
pI∆öeBuf„r
;

197 
pS1
 = 
pSèã
;

200 
ö
 = *
pS1
++ >> 1u;

202 *
pbuff
++ = 
ö
;

205 
pS1
++;

213 
ö
 = *
pS1
++ - in;

214 *
pbuff
++ = 
ö
;

216 
pS1
++;

218 
ö
 = *
pS1
++ - in;

219 *
pbuff
++ = 
ö
;

220 
pS1
++;

222 
ö
 = *
pS1
++ - in;

223 *
pbuff
++ = 
ö
;

224 
pS1
++;

226 
ö
 = *
pS1
++ - in;

227 *
pbuff
++ = 
ö
;

228 
pS1
++;

231 
i
--;

232 } 
i
 > 0u);

236 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u) % 0x4u;

238 
i
 > 0u)

242 
ö
 = *
pS1
++ - in;

243 *
pbuff
++ = 
ö
;

245 
pS1
++;

248 
i
--;

255 
i
 = (
uöt32_t
Ë
S
->
N
 >> 2u;

258 
pbuff
 = 
pI∆öeBuf„r
;

264 
ö
 = *
pbuff
;

265 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

267 
ö
 = *
pbuff
;

268 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

270 
ö
 = *
pbuff
;

271 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

273 
ö
 = *
pbuff
;

274 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

277 
i
--;

278 } 
i
 > 0u);

286 
i
 = (
uöt32_t
Ë
S
->
Nby2
;

292 *
pS1
++ = *
pbuff
++;

294 *
pS2
-- = *
pbuff
++;

297 
i
--;

298 } 
i
 > 0u);

301 
pbuff
 = 
pI∆öeBuf„r
;

304 
pS1
 = 
pSèã
;

307 
i
 = (
uöt32_t
Ë
S
->
N
;

312 *
pbuff
++ = *
pS1
++;

315 
i
--;

316 } 
i
 > 0u);

323 
	`¨m_rf·_q15
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

328 
	`¨m_cm∂x_mu…_cm∂x_q15
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

332 
	`¨m_shi·_q15
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

341 
i
 = ((
uöt32_t
Ë
S
->
N
 - 1u);

344 
pbuff
 = 
pI∆öeBuf„r
;

347 
pS1
 = 
pSèã
;

350 
ö
 = *
pS1
++ >> 1u;

352 *
pbuff
++ = 
ö
;

355 
pS1
++;

361 
ö
 = *
pS1
++ - in;

362 *
pbuff
++ = 
ö
;

364 
pS1
++;

367 
i
--;

368 } 
i
 > 0u);

373 
i
 = (
uöt32_t
Ë
S
->
N
;

376 
pbuff
 = 
pI∆öeBuf„r
;

381 
ö
 = *
pbuff
;

382 *
pbuff
++ = ((
q15_t
Ë(((
q31_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 15));

385 
i
--;

386 } 
i
 > 0u);

390 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q31.c

41 
	~"¨m_m©h.h
"

64 
	$¨m_d˘4_q31
(

65 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

66 
q31_t
 * 
pSèã
,

67 
q31_t
 * 
pI∆öeBuf„r
)

69 
uöt16_t
 
i
;

70 
q31_t
 *
weights
 = 
S
->
pTwiddÀ
;

71 
q31_t
 *
cosFa˘
 = 
S
->
pCosFa˘‹
;

72 
q31_t
 *
pS1
, *
pS2
, *
pbuff
;

73 
q31_t
 
ö
;

97 
	`¨m_mu…_q31
(
pI∆öeBuf„r
, 
cosFa˘
,ÖI∆öeBuf„r, 
S
->
N
);

98 
	`¨m_shi·_q31
(
pI∆öeBuf„r
, 1,ÖI∆öeBuf„r, 
S
->
N
);

107 
pS1
 = 
pSèã
;

110 
pS2
 = 
pSèã
 + (
S
->
N
 - 1u);

113 
pbuff
 = 
pI∆öeBuf„r
;

115 #i‚de‡
ARM_MATH_CM0_FAMILY


120 
i
 = 
S
->
Nby2
 >> 2u;

128 *
pS1
++ = *
pbuff
++;

130 *
pS2
-- = *
pbuff
++;

132 *
pS1
++ = *
pbuff
++;

133 *
pS2
-- = *
pbuff
++;

135 *
pS1
++ = *
pbuff
++;

136 *
pS2
-- = *
pbuff
++;

138 *
pS1
++ = *
pbuff
++;

139 *
pS2
-- = *
pbuff
++;

142 
i
--;

143 } 
i
 > 0u);

146 
pbuff
 = 
pI∆öeBuf„r
;

149 
pS1
 = 
pSèã
;

152 
i
 = 
S
->
N
 >> 2u;

159 *
pbuff
++ = *
pS1
++;

160 *
pbuff
++ = *
pS1
++;

161 *
pbuff
++ = *
pS1
++;

162 *
pbuff
++ = *
pS1
++;

165 
i
--;

166 } 
i
 > 0u);

173 
	`¨m_rf·_q31
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

178 
	`¨m_cm∂x_mu…_cm∂x_q31
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

182 
	`¨m_shi·_q31
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

191 
i
 = (
S
->
N
 - 1u) >> 2u;

194 
pbuff
 = 
pI∆öeBuf„r
;

197 
pS1
 = 
pSèã
;

200 
ö
 = *
pS1
++ >> 1u;

202 *
pbuff
++ = 
ö
;

205 
pS1
++;

213 
ö
 = *
pS1
++ - in;

214 *
pbuff
++ = 
ö
;

216 
pS1
++;

218 
ö
 = *
pS1
++ - in;

219 *
pbuff
++ = 
ö
;

220 
pS1
++;

222 
ö
 = *
pS1
++ - in;

223 *
pbuff
++ = 
ö
;

224 
pS1
++;

226 
ö
 = *
pS1
++ - in;

227 *
pbuff
++ = 
ö
;

228 
pS1
++;

231 
i
--;

232 } 
i
 > 0u);

236 
i
 = (
S
->
N
 - 1u) % 0x4u;

238 
i
 > 0u)

242 
ö
 = *
pS1
++ - in;

243 *
pbuff
++ = 
ö
;

245 
pS1
++;

248 
i
--;

255 
i
 = 
S
->
N
 >> 2u;

258 
pbuff
 = 
pI∆öeBuf„r
;

264 
ö
 = *
pbuff
;

265 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

267 
ö
 = *
pbuff
;

268 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

270 
ö
 = *
pbuff
;

271 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

273 
ö
 = *
pbuff
;

274 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

277 
i
--;

278 } 
i
 > 0u);

286 
i
 = 
S
->
Nby2
;

292 *
pS1
++ = *
pbuff
++;

294 *
pS2
-- = *
pbuff
++;

297 
i
--;

298 } 
i
 > 0u);

301 
pbuff
 = 
pI∆öeBuf„r
;

304 
pS1
 = 
pSèã
;

307 
i
 = 
S
->
N
;

312 *
pbuff
++ = *
pS1
++;

315 
i
--;

316 } 
i
 > 0u);

323 
	`¨m_rf·_q31
(
S
->
pRf·
, 
pI∆öeBuf„r
, 
pSèã
);

328 
	`¨m_cm∂x_mu…_cm∂x_q31
(
pSèã
, 
weights
,ÖSèã, 
S
->
N
);

332 
	`¨m_shi·_q31
(
pSèã
, 2,ÖSèã, 
S
->
N
 * 2);

341 
pbuff
 = 
pI∆öeBuf„r
;

344 
pS1
 = 
pSèã
;

347 
ö
 = *
pS1
++ >> 1u;

349 *
pbuff
++ = 
ö
;

352 
pS1
++;

355 
i
 = (
S
->
N
 - 1u);

357 
i
 > 0u)

361 
ö
 = *
pS1
++ - in;

362 *
pbuff
++ = 
ö
;

364 
pS1
++;

367 
i
--;

374 
i
 = 
S
->
N
;

377 
pbuff
 = 
pI∆öeBuf„r
;

382 
ö
 = *
pbuff
;

383 *
pbuff
++ = ((
q31_t
Ë(((
q63_t
Ë
ö
 * 
S
->
n‹mÆize
) >> 31));

386 
i
--;

387 } 
i
 > 0u);

391 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_f32.c

41 
	~"¨m_m©h.h
"

43 
¨m_ødix4_buâîÊy_f32
(

44 
Êﬂt32_t
 * 
pSrc
,

45 
uöt16_t
 
f·Lí
,

46 
Êﬂt32_t
 * 
pC€f
,

47 
uöt16_t
 
twidC€fModifõr
);

49 
¨m_ødix4_buâîÊy_övî£_f32
(

50 
Êﬂt32_t
 * 
pSrc
,

51 
uöt16_t
 
f·Lí
,

52 
Êﬂt32_t
 * 
pC€f
,

53 
uöt16_t
 
twidC€fModifõr
,

54 
Êﬂt32_t
 
⁄ebyf·Lí
);

56 
¨m_bôªvîßl_f32
(

57 
Êﬂt32_t
 * 
pSrc
,

58 
uöt16_t
 
f·Size
,

59 
uöt16_t
 
bôRevFa˘‹
,

60 
uöt16_t
 * 
pBôRevTab
);

70 
¨m_•lô_rf·_f32
(

71 
Êﬂt32_t
 * 
pSrc
,

72 
uöt32_t
 
f·Lí
,

73 
Êﬂt32_t
 * 
pATabÀ
,

74 
Êﬂt32_t
 * 
pBTabÀ
,

75 
Êﬂt32_t
 * 
pD°
,

76 
uöt32_t
 
modifõr
);

77 
¨m_•lô_rif·_f32
(

78 
Êﬂt32_t
 * 
pSrc
,

79 
uöt32_t
 
f·Lí
,

80 
Êﬂt32_t
 * 
pATabÀ
,

81 
Êﬂt32_t
 * 
pBTabÀ
,

82 
Êﬂt32_t
 * 
pD°
,

83 
uöt32_t
 
modifõr
);

100 
	$¨m_rf·_f32
(

101 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

102 
Êﬂt32_t
 * 
pSrc
,

103 
Êﬂt32_t
 * 
pD°
)

105 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 *
S_CFFT
 = 
S
->
pCf·
;

109 if(
S
->
if·FœgR
 == 1u)

112 
	`¨m_•lô_rif·_f32
(
pSrc
, 
S
->
f·LíBy2
, S->
pTwiddÀARól
,

113 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

117 
	`¨m_ødix4_buâîÊy_övî£_f32
(
pD°
, 
S_CFFT
->
f·Lí
,

118 
S_CFFT
->
pTwiddÀ
,

119 
S_CFFT
->
twidC€fModifõr
,

120 
S_CFFT
->
⁄ebyf·Lí
);

123 if(
S
->
bôRevî£FœgR
 == 1u)

125 
	`¨m_bôªvîßl_f32
(
pD°
, 
S_CFFT
->
f·Lí
,

126 
S_CFFT
->
bôRevFa˘‹
, S_CFFT->
pBôRevTabÀ
);

135 
	`¨m_ødix4_buâîÊy_f32
(
pSrc
, 
S_CFFT
->
f·Lí
,

136 
S_CFFT
->
pTwiddÀ
, S_CFFT->
twidC€fModifõr
);

139 if(
S
->
bôRevî£FœgR
 == 1u)

141 
	`¨m_bôªvîßl_f32
(
pSrc
, 
S_CFFT
->
f·Lí
,

142 
S_CFFT
->
bôRevFa˘‹
, S_CFFT->
pBôRevTabÀ
);

147 
	`¨m_•lô_rf·_f32
(
pSrc
, 
S
->
f·LíBy2
, S->
pTwiddÀARól
,

148 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

151 
	}
}

168 
	$¨m_•lô_rf·_f32
(

169 
Êﬂt32_t
 * 
pSrc
,

170 
uöt32_t
 
f·Lí
,

171 
Êﬂt32_t
 * 
pATabÀ
,

172 
Êﬂt32_t
 * 
pBTabÀ
,

173 
Êﬂt32_t
 * 
pD°
,

174 
uöt32_t
 
modifõr
)

176 
uöt32_t
 
i
;

177 
Êﬂt32_t
 
outR
, 
outI
;

178 
Êﬂt32_t
 *
pC€fA
, *
pC€fB
;

179 
Êﬂt32_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

180 
Êﬂt32_t
 *
pD°1
 = &
pD°
[2], *
pD°2
 = &pD°[(4u * 
f·Lí
) - 1u];

181 
Êﬂt32_t
 *
pSrc1
 = &
pSrc
[2], *
pSrc2
 = &pSrc[(2u * 
f·Lí
) - 1u];

184 
pC€fA
 = &
pATabÀ
[
modifõr
 * 2u];

185 
pC€fB
 = &
pBTabÀ
[
modifõr
 * 2u];

187 
i
 = 
f·Lí
 - 1u;

189 
i
 > 0u)

202 
C€fA1
 = *
pC€fA
++;

204 
C€fA2
 = *
pC€fA
;

207 
outR
 = *
pSrc1
 * 
C€fA1
;

209 
outI
 = *
pSrc1
++ * 
C€fA2
;

212 
outR
 -(*
pSrc1
 + *
pSrc2
Ë* 
C€fA2
;

214 
outI
 +*
pSrc1
++ * 
C€fA1
;

216 
C€fB1
 = *
pC€fB
;

219 
outI
 -*
pSrc2
-- * 
C€fB1
;

221 
outI
 -*
pSrc2
 * 
C€fA2
;

224 
outR
 +*
pSrc2
-- * 
C€fB1
;

227 *
pD°1
++ = 
outR
;

228 *
pD°1
++ = 
outI
;

231 *
pD°2
-- = -
outI
;

232 *
pD°2
-- = 
outR
;

235 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

236 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

238 
i
--;

242 
pD°
[2u * 
f·Lí
] = 
pSrc
[0] -ÖSrc[1];

243 
pD°
[(2u * 
f·Lí
) + 1u] = 0.0f;

245 
pD°
[0] = 
pSrc
[0] +ÖSrc[1];

246 
pD°
[1] = 0.0f;

248 
	}
}

262 
	$¨m_•lô_rif·_f32
(

263 
Êﬂt32_t
 * 
pSrc
,

264 
uöt32_t
 
f·Lí
,

265 
Êﬂt32_t
 * 
pATabÀ
,

266 
Êﬂt32_t
 * 
pBTabÀ
,

267 
Êﬂt32_t
 * 
pD°
,

268 
uöt32_t
 
modifõr
)

270 
Êﬂt32_t
 
outR
, 
outI
;

271 
Êﬂt32_t
 *
pC€fA
, *
pC€fB
;

272 
Êﬂt32_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

273 
Êﬂt32_t
 *
pSrc1
 = &
pSrc
[0], *
pSrc2
 = &pSrc[(2u * 
f·Lí
) + 1u];

275 
pC€fA
 = &
pATabÀ
[0];

276 
pC€fB
 = &
pBTabÀ
[0];

278 
f·Lí
 > 0u)

291 
C€fA1
 = *
pC€fA
++;

292 
C€fA2
 = *
pC€fA
;

295 
outR
 = *
pSrc1
 * 
C€fA1
;

298 
outI
 = -(*
pSrc1
++Ë* 
C€fA2
;

301 
outR
 +(*
pSrc1
 + *
pSrc2
Ë* 
C€fA2
;

304 
outI
 +(*
pSrc1
++Ë* 
C€fA1
;

306 
C€fB1
 = *
pC€fB
;

309 
outI
 -*
pSrc2
-- * 
C€fB1
;

312 
outR
 +*
pSrc2
 * 
C€fB1
;

315 
outI
 +*
pSrc2
-- * 
C€fA2
;

318 *
pD°
++ = 
outR
;

319 *
pD°
++ = 
outI
;

322 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

323 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

326 
f·Lí
--;

329 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_f32.c

41 
	~"¨m_m©h.h
"

43 
	$°age_rf·_f32
(

44 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

45 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
)

47 
uöt32_t
 
k
;

48 
Êﬂt32_t
 
twR
, 
twI
;

49 
Êﬂt32_t
 * 
pC€ff
 = 
S
->
pTwiddÀRFFT
;

50 
Êﬂt32_t
 *
pA
 = 
p
;

51 
Êﬂt32_t
 *
pB
 = 
p
;

52 
Êﬂt32_t
 
xAR
, 
xAI
, 
xBR
, 
xBI
;

53 
Êﬂt32_t
 
t1a
, 
t1b
;

54 
Êﬂt32_t
 
p0
, 
p1
, 
p2
, 
p3
;

57 
k
 = (
S
->
Söt
).
f·Lí
 - 1;

61 
xBR
 = 
pB
[0];

62 
xBI
 = 
pB
[1];

63 
xAR
 = 
pA
[0];

64 
xAI
 = 
pA
[1];

66 
twR
 = *
pC€ff
++ ;

67 
twI
 = *
pC€ff
++ ;

70 
t1a
 = 
xBR
 + 
xAR
 ;

73 
t1b
 = 
xBI
 + 
xAI
 ;

77 *
pOut
++ = 0.5‡* ( 
t1a
 + 
t1b
 );

78 *
pOut
++ = 0.5‡* ( 
t1a
 - 
t1b
 );

81 
pB
 = 
p
 + 2*
k
;

82 
pA
 += 2;

101 
xBI
 = 
pB
[1];

102 
xBR
 = 
pB
[0];

103 
xAR
 = 
pA
[0];

104 
xAI
 = 
pA
[1];

106 
twR
 = *
pC€ff
++;

107 
twI
 = *
pC€ff
++;

109 
t1a
 = 
xBR
 - 
xAR
 ;

110 
t1b
 = 
xBI
 + 
xAI
 ;

114 
p0
 = 
twR
 * 
t1a
;

115 
p1
 = 
twI
 * 
t1a
;

116 
p2
 = 
twR
 * 
t1b
;

117 
p3
 = 
twI
 * 
t1b
;

119 *
pOut
++ = 0.5‡* (
xAR
 + 
xBR
 + 
p0
 + 
p3
 );

120 *
pOut
++ = 0.5‡* (
xAI
 - 
xBI
 + 
p1
 - 
p2
 );

122 
pA
 += 2;

123 
pB
 -= 2;

124 
k
--;

125 } 
k
 > 0u);

126 
	}
}

129 
	$mîge_rf·_f32
(

130 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

131 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
)

133 
uöt32_t
 
k
;

134 
Êﬂt32_t
 
twR
, 
twI
;

135 
Êﬂt32_t
 *
pC€ff
 = 
S
->
pTwiddÀRFFT
;

136 
Êﬂt32_t
 *
pA
 = 
p
;

137 
Êﬂt32_t
 *
pB
 = 
p
;

138 
Êﬂt32_t
 
xAR
, 
xAI
, 
xBR
, 
xBI
;

139 
Êﬂt32_t
 
t1a
, 
t1b
, 
r
, 
s
, 
t
, 
u
;

141 
k
 = (
S
->
Söt
).
f·Lí
 - 1;

143 
xAR
 = 
pA
[0];

144 
xAI
 = 
pA
[1];

146 
pC€ff
 += 2 ;

148 *
pOut
++ = 0.5‡* ( 
xAR
 + 
xAI
 );

149 *
pOut
++ = 0.5‡* ( 
xAR
 - 
xAI
 );

151 
pB
 = 
p
 + 2*
k
 ;

152 
pA
 += 2 ;

154 
k
 > 0u)

159 
xBI
 = 
pB
[1] ;

160 
xBR
 = 
pB
[0] ;

161 
xAR
 = 
pA
[0];

162 
xAI
 = 
pA
[1];

164 
twR
 = *
pC€ff
++;

165 
twI
 = *
pC€ff
++;

167 
t1a
 = 
xAR
 - 
xBR
 ;

168 
t1b
 = 
xAI
 + 
xBI
 ;

170 
r
 = 
twR
 * 
t1a
;

171 
s
 = 
twI
 * 
t1b
;

172 
t
 = 
twI
 * 
t1a
;

173 
u
 = 
twR
 * 
t1b
;

177 *
pOut
++ = 0.5‡* (
xAR
 + 
xBR
 - 
r
 - 
s
 );

178 *
pOut
++ = 0.5‡* (
xAI
 - 
xBI
 + 
t
 - 
u
 );

180 
pA
 += 2;

181 
pB
 -= 2;

182 
k
--;

185 
	}
}

324 
	$¨m_rf·_Á°_f32
(

325 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

326 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
,

327 
uöt8_t
 
if·Fœg
)

329 
¨m_cf·_ö°™˚_f32
 * 
Söt
 = &(
S
->Sint);

330 
Söt
->
f·Lí
 = 
S
->
f·LíRFFT
 / 2;

333 if(
if·Fœg
)

336 
	`mîge_rf·_f32
(
S
, 
p
, 
pOut
);

339 
	`¨m_cf·_f32
–
Söt
, 
pOut
, 
if·Fœg
, 1);

344 
	`¨m_cf·_f32
–
Söt
, 
p
, 
if·Fœg
, 1);

347 
	`°age_rf·_f32
(
S
, 
p
, 
pOut
);

349 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_init_f32.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

65 
¨m_°©us
 
	$¨m_rf·_Á°_öô_f32
(

66 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

67 
uöt16_t
 
f·Lí
)

69 
¨m_cf·_ö°™˚_f32
 * 
Söt
;

71 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

73 
Söt
 = &(
S
->Sint);

74 
Söt
->
f·Lí
 = fftLen/2;

75 
S
->
f·LíRFFT
 = 
f·Lí
;

78 
Söt
->
f·Lí
)

83 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
;

85 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ2048
;

87 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_2048
;

88 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_4096
;

91 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
;

92 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ1024
;

93 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_1024
;

94 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_2048
;

97 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
;

98 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ512
;

99 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_512
;

100 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_1024
;

103 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
;

104 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ256
;

105 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_256
;

106 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_512
;

109 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
;

110 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ128
;

111 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_128
;

112 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_256
;

115 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
;

116 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ64
;

117 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_64
;

118 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_128
;

121 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
;

122 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ32
;

123 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_32
;

124 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_64
;

127 
Söt
->
bôRevLígth
 = 
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
;

128 
Söt
->
pBôRevTabÀ
 = (
uöt16_t
 *)
¨mBôRevIndexTabÀ16
;

129 
Söt
->
pTwiddÀ
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_16
;

130 
S
->
pTwiddÀRFFT
 = (
Êﬂt32_t
 *Ë
twiddÀC€f_rf·_32
;

134 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

138  (
°©us
);

139 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_f32.c

42 
	~"¨m_m©h.h
"

67 c⁄° 
Êﬂt32_t
 
	gªÆC€fA
[8192] = {

4179 c⁄° 
Êﬂt32_t
 
	gªÆC€fB
[8192] = {

8304 
¨m_°©us
 
	$¨m_rf·_öô_f32
(

8305 
¨m_rf·_ö°™˚_f32
 * 
S
,

8306 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

8307 
uöt32_t
 
f·LíRól
,

8308 
uöt32_t
 
if·FœgR
,

8309 
uöt32_t
 
bôRevî£Fœg
)

8313 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

8316 
S
->
f·LíRól
 = (
uöt16_t
) fftLenReal;

8319 
S
->
f·LíBy2
 = (
uöt16_t
Ë
f·LíRól
 / 2u;

8322 
S
->
pTwiddÀARól
 = (
Êﬂt32_t
 *Ë
ªÆC€fA
;

8325 
S
->
pTwiddÀBRól
 = (
Êﬂt32_t
 *Ë
ªÆC€fB
;

8328 
S
->
if·FœgR
 = (
uöt8_t
) ifftFlagR;

8331 
S
->
bôRevî£FœgR
 = (
uöt8_t
Ë
bôRevî£Fœg
;

8334 
S
->
f·LíRól
)

8338 
S
->
twidC€fRModifõr
 = 1u;

8341 
S
->
twidC€fRModifõr
 = 4u;

8344 
S
->
twidC€fRModifõr
 = 16u;

8347 
S
->
twidC€fRModifõr
 = 64u;

8351 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

8356 
S
->
pCf·
 = 
S_CFFT
;

8358 if(
S
->
if·FœgR
)

8361 
	`¨m_cf·_ødix4_öô_f32
(
S
->
pCf·
, S->
f·LíBy2
, 1u, 0u);

8366 
	`¨m_cf·_ødix4_öô_f32
(
S
->
pCf·
, S->
f·LíBy2
, 0u, 0u);

8370  (
°©us
);

8372 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q15.c

42 
	~"¨m_m©h.h
"

43 
	~"¨m_comm⁄_èbÀs.h
"

44 
	~"¨m_c⁄°_°ru˘s.h
"

71 c⁄° 
q15_t
 
ALIGN4
 
	gªÆC€fAQ15
[8192] = {

1113 c⁄° 
q15_t
 
ALIGN4
 
	gªÆC€fBQ15
[8192] = {

2160 
¨m_°©us
 
	$¨m_rf·_öô_q15
(

2161 
¨m_rf·_ö°™˚_q15
 * 
S
,

2162 
uöt32_t
 
f·LíRól
,

2163 
uöt32_t
 
if·FœgR
,

2164 
uöt32_t
 
bôRevî£Fœg
)

2167 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

2170 
S
->
f·LíRól
 = (
uöt16_t
) fftLenReal;

2173 
S
->
pTwiddÀARól
 = (
q15_t
 *Ë
ªÆC€fAQ15
;

2176 
S
->
pTwiddÀBRól
 = (
q15_t
 *Ë
ªÆC€fBQ15
;

2179 
S
->
if·FœgR
 = (
uöt8_t
) ifftFlagR;

2182 
S
->
bôRevî£FœgR
 = (
uöt8_t
Ë
bôRevî£Fœg
;

2185 
S
->
f·LíRól
)

2188 
S
->
twidC€fRModifõr
 = 1u;

2189 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn4096
;

2192 
S
->
twidC€fRModifõr
 = 2u;

2193 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn2048
;

2196 
S
->
twidC€fRModifõr
 = 4u;

2197 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn1024
;

2200 
S
->
twidC€fRModifõr
 = 8u;

2201 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn512
;

2204 
S
->
twidC€fRModifõr
 = 16u;

2205 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn256
;

2208 
S
->
twidC€fRModifõr
 = 32u;

2209 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn128
;

2212 
S
->
twidC€fRModifõr
 = 64u;

2213 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn64
;

2216 
S
->
twidC€fRModifõr
 = 128u;

2217 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn32
;

2220 
S
->
twidC€fRModifõr
 = 256u;

2221 
S
->
pCf·
 = &
¨m_cf·_sR_q15_Àn16
;

2225 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

2230  (
°©us
);

2231 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q31.c

41 
	~"¨m_m©h.h
"

42 
	~"¨m_comm⁄_èbÀs.h
"

43 
	~"¨m_c⁄°_°ru˘s.h
"

70 c⁄° 
q31_t
 
	gªÆC€fAQ31
[8192] = {

2138 c⁄° 
q31_t
 
	gªÆC€fBQ31
[8192] = {

4210 
¨m_°©us
 
	$¨m_rf·_öô_q31
(

4211 
¨m_rf·_ö°™˚_q31
 * 
S
,

4212 
uöt32_t
 
f·LíRól
,

4213 
uöt32_t
 
if·FœgR
,

4214 
uöt32_t
 
bôRevî£Fœg
)

4217 
¨m_°©us
 
°©us
 = 
ARM_MATH_SUCCESS
;

4220 
S
->
f·LíRól
 = (
uöt16_t
) fftLenReal;

4223 
S
->
pTwiddÀARól
 = (
q31_t
 *Ë
ªÆC€fAQ31
;

4226 
S
->
pTwiddÀBRól
 = (
q31_t
 *Ë
ªÆC€fBQ31
;

4229 
S
->
if·FœgR
 = (
uöt8_t
) ifftFlagR;

4232 
S
->
bôRevî£FœgR
 = (
uöt8_t
Ë
bôRevî£Fœg
;

4235 
S
->
f·LíRól
)

4238 
S
->
twidC€fRModifõr
 = 1u;

4239 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn4096
;

4242 
S
->
twidC€fRModifõr
 = 2u;

4243 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn2048
;

4246 
S
->
twidC€fRModifõr
 = 4u;

4247 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn1024
;

4250 
S
->
twidC€fRModifõr
 = 8u;

4251 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn512
;

4254 
S
->
twidC€fRModifõr
 = 16u;

4255 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn256
;

4258 
S
->
twidC€fRModifõr
 = 32u;

4259 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn128
;

4262 
S
->
twidC€fRModifõr
 = 64u;

4263 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn64
;

4266 
S
->
twidC€fRModifõr
 = 128u;

4267 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn32
;

4270 
S
->
twidC€fRModifõr
 = 256u;

4271 
S
->
pCf·
 = &
¨m_cf·_sR_q31_Àn16
;

4275 
°©us
 = 
ARM_MATH_ARGUMENT_ERROR
;

4280  (
°©us
);

4281 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q15.c

42 
	~"¨m_m©h.h
"

48 
¨m_•lô_rf·_q15
(

49 
q15_t
 * 
pSrc
,

50 
uöt32_t
 
f·Lí
,

51 
q15_t
 * 
pATabÀ
,

52 
q15_t
 * 
pBTabÀ
,

53 
q15_t
 * 
pD°
,

54 
uöt32_t
 
modifõr
);

56 
¨m_•lô_rif·_q15
(

57 
q15_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
q15_t
 * 
pATabÀ
,

60 
q15_t
 * 
pBTabÀ
,

61 
q15_t
 * 
pD°
,

62 
uöt32_t
 
modifõr
);

87 
	$¨m_rf·_q15
(

88 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

89 
q15_t
 * 
pSrc
,

90 
q15_t
 * 
pD°
)

92 c⁄° 
¨m_cf·_ö°™˚_q15
 *
S_CFFT
 = 
S
->
pCf·
;

93 
uöt32_t
 
i
;

94 
uöt32_t
 
L2
 = 
S
->
f·LíRól
 >> 1;

97 if(
S
->
if·FœgR
 == 1u)

100 
	`¨m_•lô_rif·_q15
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

101 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

104 
	`¨m_cf·_q15
(
S_CFFT
, 
pD°
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

106 
i
=0;i<
S
->
f·LíRól
;i++)

108 
pD°
[
i
] =ÖDst[i] << 1;

116 
	`¨m_cf·_q15
(
S_CFFT
, 
pSrc
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

119 
	`¨m_•lô_rf·_q15
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

120 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

122 
	}
}

140 
	$¨m_•lô_rf·_q15
(

141 
q15_t
 * 
pSrc
,

142 
uöt32_t
 
f·Lí
,

143 
q15_t
 * 
pATabÀ
,

144 
q15_t
 * 
pBTabÀ
,

145 
q15_t
 * 
pD°
,

146 
uöt32_t
 
modifõr
)

148 
uöt32_t
 
i
;

149 
q31_t
 
outR
, 
outI
;

150 
q15_t
 *
pC€fA
, *
pC€fB
;

151 
q15_t
 *
pSrc1
, *
pSrc2
;

152 #i‚de‡
ARM_MATH_CM0_FAMILY


153 
q15_t
 *
pD1
, *
pD2
;

159 
pC€fA
 = &
pATabÀ
[
modifõr
 * 2u];

160 
pC€fB
 = &
pBTabÀ
[
modifõr
 * 2u];

162 
pSrc1
 = &
pSrc
[2];

163 
pSrc2
 = &
pSrc
[(2u * 
f·Lí
) - 2u];

165 #i‚de‡
ARM_MATH_CM0_FAMILY


168 
i
 = 1u;

169 
pD1
 = 
pD°
 + 2;

170 
pD2
 = 
pD°
 + (4u * 
f·Lí
) - 2;

172 
i
 = 
f·Lí
 - 1; i > 0; i--)

185 #i‚de‡
ARM_MATH_BIG_ENDIAN


188 
outR
 = 
	`__SMUSD
(*
	`__SIMD32
(
pSrc1
), *__SIMD32(
pC€fA
));

193 
outR
 = -(
	`__SMUSD
(*
	`__SIMD32
(
pSrc1
), *__SIMD32(
pC€fA
)));

199 
outR
 = 
	`__SMLAD
(*
	`__SIMD32
(
pSrc2
), *__SIMD32(
pC€fB
), outR) >> 16u;

204 #i‚de‡
ARM_MATH_BIG_ENDIAN


206 
outI
 = 
	`__SMUSDX
(*
	`__SIMD32
(
pSrc2
)--, *__SIMD32(
pC€fB
));

210 
outI
 = 
	`__SMUSDX
(*
	`__SIMD32
(
pC€fB
), *__SIMD32(
pSrc2
)--);

215 
outI
 = 
	`__SMLADX
(*
	`__SIMD32
(
pSrc1
)++, *__SIMD32(
pC€fA
), outI);

218 *
pD1
++ = (
q15_t
Ë
outR
;

219 *
pD1
++ = 
outI
 >> 16u;

222 
pD2
[0] = (
q15_t
Ë
outR
;

223 
pD2
[1] = -(
outI
 >> 16u);

224 
pD2
 -= 2;

227 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

228 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

231 
pD°
[2u * 
f·Lí
] = (
pSrc
[0] -ÖSrc[1]) >> 1;

232 
pD°
[(2u * 
f·Lí
) + 1u] = 0;

234 
pD°
[0] = (
pSrc
[0] +ÖSrc[1]) >> 1;

235 
pD°
[1] = 0;

240 
i
 = 1u;

242 
i
 < 
f·Lí
)

250 
outR
 = *
pSrc1
 * *
pC€fA
;

251 
outR
 = outR - (*(
pSrc1
 + 1Ë* *(
pC€fA
 + 1));

252 
outR
 = outR + (*
pSrc2
 * *
pC€fB
);

253 
outR
 = (outR + (*(
pSrc2
 + 1Ë* *(
pC€fB
 + 1))) >> 16;

261 
outI
 = *
pSrc2
 * *(
pC€fB
 + 1);

262 
outI
 = outI - (*(
pSrc2
 + 1Ë* *
pC€fB
);

263 
outI
 = outI + (*(
pSrc1
 + 1Ë* *
pC€fA
);

264 
outI
 = outI + (*
pSrc1
 * *(
pC€fA
 + 1));

267 
pSrc1
 += 2u;

268 
pSrc2
 -= 2u;

271 
pD°
[2u * 
i
] = (
q15_t
Ë
outR
;

272 
pD°
[(2u * 
i
Ë+ 1u] = 
outI
 >> 16u;

275 
pD°
[(4u * 
f·Lí
Ë- (2u * 
i
)] = (
q15_t
Ë
outR
;

276 
pD°
[((4u * 
f·Lí
Ë- (2u * 
i
)Ë+ 1u] = -(
outI
 >> 16u);

279 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

280 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

282 
i
++;

285 
pD°
[2u * 
f·Lí
] = (
pSrc
[0] -ÖSrc[1]) >> 1;

286 
pD°
[(2u * 
f·Lí
) + 1u] = 0;

288 
pD°
[0] = (
pSrc
[0] +ÖSrc[1]) >> 1;

289 
pD°
[1] = 0;

292 
	}
}

306 
	$¨m_•lô_rif·_q15
(

307 
q15_t
 * 
pSrc
,

308 
uöt32_t
 
f·Lí
,

309 
q15_t
 * 
pATabÀ
,

310 
q15_t
 * 
pBTabÀ
,

311 
q15_t
 * 
pD°
,

312 
uöt32_t
 
modifõr
)

314 
uöt32_t
 
i
;

315 
q31_t
 
outR
, 
outI
;

316 
q15_t
 *
pC€fA
, *
pC€fB
;

317 
q15_t
 *
pSrc1
, *
pSrc2
;

318 
q15_t
 *
pD°1
 = &
pD°
[0];

320 
pC€fA
 = &
pATabÀ
[0];

321 
pC€fB
 = &
pBTabÀ
[0];

323 
pSrc1
 = &
pSrc
[0];

324 
pSrc2
 = &
pSrc
[2u * 
f·Lí
];

326 #i‚de‡
ARM_MATH_CM0_FAMILY


329 
i
 = 
f·Lí
;

331 
i
 > 0u)

344 #i‚de‡
ARM_MATH_BIG_ENDIAN


348 
outR
 = 
	`__SMUSD
(*
	`__SIMD32
(
pSrc2
), *__SIMD32(
pC€fB
));

354 
outR
 = -(
	`__SMUSD
(*
	`__SIMD32
(
pSrc2
), *__SIMD32(
pC€fB
)));

360 
outR
 = 
	`__SMLAD
(*
	`__SIMD32
(
pSrc1
), *__SIMD32(
pC€fA
), outR) >> 16u;

365 
outI
 = 
	`__SMUADX
(*
	`__SIMD32
(
pSrc2
)--, *__SIMD32(
pC€fB
));

369 #i‚de‡
ARM_MATH_BIG_ENDIAN


371 
outI
 = 
	`__SMLSDX
(*
	`__SIMD32
(
pC€fA
), *__SIMD32(
pSrc1
)++, -outI);

375 
outI
 = 
	`__SMLSDX
(*
	`__SIMD32
(
pSrc1
)++, *__SIMD32(
pC€fA
), -outI);

380 #i‚de‡
ARM_MATH_BIG_ENDIAN


382 *
	`__SIMD32
(
pD°1
)++ = 
	`__PKHBT
(
outR
, (
outI
 >> 16u), 16);

386 *
	`__SIMD32
(
pD°1
)++ = 
	`__PKHBT
((
outI
 >> 16u), 
outR
, 16);

391 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

392 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

394 
i
--;

398 
i
 = 
f·Lí
;

400 
i
 > 0u)

408 
outR
 = *
pSrc2
 * *
pC€fB
;

409 
outR
 = outR - (*(
pSrc2
 + 1Ë* *(
pC€fB
 + 1));

410 
outR
 = outR + (*
pSrc1
 * *
pC€fA
);

411 
outR
 = (outR + (*(
pSrc1
 + 1Ë* *(
pC€fA
 + 1))) >> 16;

419 
outI
 = *(
pSrc1
 + 1Ë* *
pC€fA
;

420 
outI
 = outI - (*
pSrc1
 * *(
pC€fA
 + 1));

421 
outI
 = outI - (*
pSrc2
 * *(
pC€fB
 + 1));

422 
outI
 = outI - (*(
pSrc2
 + 1Ë* *(
pC€fB
));

425 
pSrc1
 += 2u;

426 
pSrc2
 -= 2u;

429 *
pD°1
++ = (
q15_t
Ë
outR
;

430 *
pD°1
++ = (
q15_t
Ë(
outI
 >> 16);

433 
pC€fB
 =ÖC€fB + (2u * 
modifõr
);

434 
pC€fA
 =ÖC€fA + (2u * 
modifõr
);

436 
i
--;

439 
	}
}

	@Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q31.c

42 
	~"¨m_m©h.h
"

48 
¨m_•lô_rf·_q31
(

49 
q31_t
 * 
pSrc
,

50 
uöt32_t
 
f·Lí
,

51 
q31_t
 * 
pATabÀ
,

52 
q31_t
 * 
pBTabÀ
,

53 
q31_t
 * 
pD°
,

54 
uöt32_t
 
modifõr
);

56 
¨m_•lô_rif·_q31
(

57 
q31_t
 * 
pSrc
,

58 
uöt32_t
 
f·Lí
,

59 
q31_t
 * 
pATabÀ
,

60 
q31_t
 * 
pBTabÀ
,

61 
q31_t
 * 
pD°
,

62 
uöt32_t
 
modifõr
);

87 
	$¨m_rf·_q31
(

88 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

89 
q31_t
 * 
pSrc
,

90 
q31_t
 * 
pD°
)

92 c⁄° 
¨m_cf·_ö°™˚_q31
 *
S_CFFT
 = 
S
->
pCf·
;

93 
uöt32_t
 
i
;

94 
uöt32_t
 
L2
 = 
S
->
f·LíRól
 >> 1;

97 if(
S
->
if·FœgR
 == 1u)

100 
	`¨m_•lô_rif·_q31
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

101 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

104 
	`¨m_cf·_q31
(
S_CFFT
, 
pD°
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

106 
i
=0;i<
S
->
f·LíRól
;i++)

108 
pD°
[
i
] =ÖDst[i] << 1;

116 
	`¨m_cf·_q31
(
S_CFFT
, 
pSrc
, 
S
->
if·FœgR
, S->
bôRevî£FœgR
);

119 
	`¨m_•lô_rf·_q31
(
pSrc
, 
L2
, 
S
->
pTwiddÀARól
,

120 
S
->
pTwiddÀBRól
, 
pD°
, S->
twidC€fRModifõr
);

122 
	}
}

138 
	$¨m_•lô_rf·_q31
(

139 
q31_t
 * 
pSrc
,

140 
uöt32_t
 
f·Lí
,

141 
q31_t
 * 
pATabÀ
,

142 
q31_t
 * 
pBTabÀ
,

143 
q31_t
 * 
pD°
,

144 
uöt32_t
 
modifõr
)

146 
uöt32_t
 
i
;

147 
q31_t
 
outR
, 
outI
;

148 
q31_t
 *
pC€fA
, *
pC€fB
;

149 
q31_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

150 
q31_t
 *
pOut1
 = &
pD°
[2], *
pOut2
 = &pD°[(4u * 
f·Lí
) - 1u];

151 
q31_t
 *
pIn1
 = &
pSrc
[2], *
pIn2
 = &pSrc[(2u * 
f·Lí
) - 1u];

154 
pC€fA
 = &
pATabÀ
[
modifõr
 * 2u];

155 
pC€fB
 = &
pBTabÀ
[
modifõr
 * 2u];

157 
i
 = 
f·Lí
 - 1u;

159 
i
 > 0u)

171 
C€fA1
 = *
pC€fA
++;

172 
C€fA2
 = *
pC€fA
;

175 
	`mu…_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA1
);

178 
	`mu…_32x32_kìp32_R
(
outI
, *
pIn1
++, 
C€fA2
);

181 
	`mu…Sub_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA2
);

184 
	`mu…Acc_32x32_kìp32_R
(
outI
, *
pIn1
++, 
C€fA1
);

187 
	`mu…Sub_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fA2
);

188 
C€fB1
 = *
pC€fB
;

191 
	`mu…Sub_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fB1
);

194 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fB1
);

197 
	`mu…Sub_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fA2
);

200 *
pOut1
++ = 
outR
;

201 *
pOut1
++ = 
outI
;

204 *
pOut2
-- = -
outI
;

205 *
pOut2
-- = 
outR
;

208 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

209 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

211 
i
--;

213 
pD°
[2u * 
f·Lí
] = (
pSrc
[0] -ÖSrc[1]) >> 1;

214 
pD°
[(2u * 
f·Lí
) + 1u] = 0;

216 
pD°
[0] = (
pSrc
[0] +ÖSrc[1]) >> 1;

217 
pD°
[1] = 0;

218 
	}
}

230 
	$¨m_•lô_rif·_q31
(

231 
q31_t
 * 
pSrc
,

232 
uöt32_t
 
f·Lí
,

233 
q31_t
 * 
pATabÀ
,

234 
q31_t
 * 
pBTabÀ
,

235 
q31_t
 * 
pD°
,

236 
uöt32_t
 
modifõr
)

238 
q31_t
 
outR
, 
outI
;

239 
q31_t
 *
pC€fA
, *
pC€fB
;

240 
q31_t
 
C€fA1
, 
C€fA2
, 
C€fB1
;

241 
q31_t
 *
pIn1
 = &
pSrc
[0], *
pIn2
 = &pSrc[(2u * 
f·Lí
) + 1u];

243 
pC€fA
 = &
pATabÀ
[0];

244 
pC€fB
 = &
pBTabÀ
[0];

246 
f·Lí
 > 0u)

257 
C€fA1
 = *
pC€fA
++;

258 
C€fA2
 = *
pC€fA
;

261 
	`mu…_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA1
);

264 
	`mu…_32x32_kìp32_R
(
outI
, *
pIn1
++, -
C€fA2
);

267 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn1
, 
C€fA2
);

270 
	`mu…Acc_32x32_kìp32_R
(
outI
, *
pIn1
++, 
C€fA1
);

273 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fA2
);

274 
C€fB1
 = *
pC€fB
;

277 
	`mu…Sub_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fB1
);

280 
	`mu…Acc_32x32_kìp32_R
(
outR
, *
pIn2
, 
C€fB1
);

283 
	`mu…Acc_32x32_kìp32_R
(
outI
, *
pIn2
--, 
C€fA2
);

286 *
pD°
++ = 
outR
;

287 *
pD°
++ = 
outI
;

290 
pC€fB
 =ÖC€fB + (
modifõr
 * 2u);

291 
pC€fA
 =ÖC€fA + ((
modifõr
 * 2u) - 1u);

294 
f·Lí
--;

296 
	}
}

	@Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l053xx.h

52 #i‚de‡
__STM32L053xx_H


53 
	#__STM32L053xx_H


	)

55 #ifde‡
__˝lu•lus


66 
	#__CM0PLUS_REV
 0

	)

67 
	#__MPU_PRESENT
 1

	)

68 
	#__VTOR_PRESENT
 1

	)

69 
	#__NVIC_PRIO_BITS
 2

	)

70 
	#__Víd‹_SysTickC⁄fig
 0

	)

89 
N⁄MaskabÀI¡_IRQn
 = -14,

90 
H¨dFau…_IRQn
 = -13,

91 
SVC_IRQn
 = -5,

92 
PídSV_IRQn
 = -2,

93 
SysTick_IRQn
 = -1,

96 
WWDG_IRQn
 = 0,

97 
PVD_IRQn
 = 1,

98 
RTC_IRQn
 = 2,

99 
FLASH_IRQn
 = 3,

100 
RCC_CRS_IRQn
 = 4,

101 
EXTI0_1_IRQn
 = 5,

102 
EXTI2_3_IRQn
 = 6,

103 
EXTI4_15_IRQn
 = 7,

104 
TSC_IRQn
 = 8,

105 
DMA1_Ch™√l1_IRQn
 = 9,

106 
DMA1_Ch™√l2_3_IRQn
 = 10,

107 
DMA1_Ch™√l4_5_6_7_IRQn
 = 11,

108 
ADC1_COMP_IRQn
 = 12,

109 
LPTIM1_IRQn
 = 13,

110 
TIM2_IRQn
 = 15,

111 
TIM6_DAC_IRQn
 = 17,

112 
TIM21_IRQn
 = 20,

113 
TIM22_IRQn
 = 22,

114 
I2C1_IRQn
 = 23,

115 
I2C2_IRQn
 = 24,

116 
SPI1_IRQn
 = 25,

117 
SPI2_IRQn
 = 26,

118 
USART1_IRQn
 = 27,

119 
USART2_IRQn
 = 28,

120 
RNG_LPUART1_IRQn
 = 29,

121 
LCD_IRQn
 = 30,

122 
USB_IRQn
 = 31,

123 } 
	tIRQn_Ty≥
;

129 
	~"c‹e_cm0∂us.h
"

130 
	~"sy°em_°m32l0xx.h
"

131 
	~<°döt.h
>

143 
__IO
 
uöt32_t
 
ISR
;

144 
__IO
 
uöt32_t
 
IER
;

145 
__IO
 
uöt32_t
 
CR
;

146 
__IO
 
uöt32_t
 
CFGR1
;

147 
__IO
 
uöt32_t
 
CFGR2
;

148 
__IO
 
uöt32_t
 
SMPR
;

149 
uöt32_t
 
RESERVED1
;

150 
uöt32_t
 
RESERVED2
;

151 
__IO
 
uöt32_t
 
TR
;

152 
uöt32_t
 
RESERVED3
;

153 
__IO
 
uöt32_t
 
CHSELR
;

154 
uöt32_t
 
RESERVED4
[5];

155 
__IO
 
uöt32_t
 
DR
;

156 
uöt32_t
 
RESERVED5
[28];

157 
__IO
 
uöt32_t
 
CALFACT
;

158 } 
	tADC_Ty≥Def
;

162 
__IO
 
uöt32_t
 
CCR
;

163 } 
	tADC_Comm⁄_Ty≥Def
;

172 
__IO
 
uöt32_t
 
CSR
;

173 } 
	tCOMP_Ty≥Def
;

177 
__IO
 
uöt32_t
 
CSR
;

178 } 
	tCOMP_Comm⁄_Ty≥Def
;

187 
__IO
 
uöt32_t
 
DR
;

188 
__IO
 
uöt8_t
 
IDR
;

189 
uöt8_t
 
RESERVED0
;

190 
uöt16_t
 
RESERVED1
;

191 
__IO
 
uöt32_t
 
CR
;

192 
uöt32_t
 
RESERVED2
;

193 
__IO
 
uöt32_t
 
INIT
;

194 
__IO
 
uöt32_t
 
POL
;

195 } 
	tCRC_Ty≥Def
;

203 
__IO
 
uöt32_t
 
CR
;

204 
__IO
 
uöt32_t
 
CFGR
;

205 
__IO
 
uöt32_t
 
ISR
;

206 
__IO
 
uöt32_t
 
ICR
;

207 } 
	tCRS_Ty≥Def
;

215 
__IO
 
uöt32_t
 
CR
;

216 
__IO
 
uöt32_t
 
SWTRIGR
;

217 
__IO
 
uöt32_t
 
DHR12R1
;

218 
__IO
 
uöt32_t
 
DHR12L1
;

219 
__IO
 
uöt32_t
 
DHR8R1
;

220 
uöt32_t
 
RESERVED0
[6];

221 
__IO
 
uöt32_t
 
DOR1
;

222 
uöt32_t
 
RESERVED1
;

223 
__IO
 
uöt32_t
 
SR
;

224 } 
	tDAC_Ty≥Def
;

232 
__IO
 
uöt32_t
 
IDCODE
;

233 
__IO
 
uöt32_t
 
CR
;

234 
__IO
 
uöt32_t
 
APB1FZ
;

235 
__IO
 
uöt32_t
 
APB2FZ
;

236 }
	tDBGMCU_Ty≥Def
;

244 
__IO
 
uöt32_t
 
CCR
;

245 
__IO
 
uöt32_t
 
CNDTR
;

246 
__IO
 
uöt32_t
 
CPAR
;

247 
__IO
 
uöt32_t
 
CMAR
;

248 } 
	tDMA_Ch™√l_Ty≥Def
;

252 
__IO
 
uöt32_t
 
ISR
;

253 
__IO
 
uöt32_t
 
IFCR
;

254 } 
	tDMA_Ty≥Def
;

258 
__IO
 
uöt32_t
 
CSELR
;

259 } 
	tDMA_Reque°_Ty≥Def
;

267 
__IO
 
uöt32_t
 
IMR
;

268 
__IO
 
uöt32_t
 
EMR
;

269 
__IO
 
uöt32_t
 
RTSR
;

270 
__IO
 
uöt32_t
 
FTSR
;

271 
__IO
 
uöt32_t
 
SWIER
;

272 
__IO
 
uöt32_t
 
PR
;

273 }
	tEXTI_Ty≥Def
;

280 
__IO
 
uöt32_t
 
ACR
;

281 
__IO
 
uöt32_t
 
PECR
;

282 
__IO
 
uöt32_t
 
PDKEYR
;

283 
__IO
 
uöt32_t
 
PEKEYR
;

284 
__IO
 
uöt32_t
 
PRGKEYR
;

285 
__IO
 
uöt32_t
 
OPTKEYR
;

286 
__IO
 
uöt32_t
 
SR
;

287 
__IO
 
uöt32_t
 
OPTR
;

288 
__IO
 
uöt32_t
 
WRPR
;

289 } 
	tFLASH_Ty≥Def
;

297 
__IO
 
uöt32_t
 
RDP
;

298 
__IO
 
uöt32_t
 
USER
;

299 
__IO
 
uöt32_t
 
WRP01
;

300 } 
	tOB_Ty≥Def
;

309 
__IO
 
uöt32_t
 
MODER
;

310 
__IO
 
uöt32_t
 
OTYPER
;

311 
__IO
 
uöt32_t
 
OSPEEDR
;

312 
__IO
 
uöt32_t
 
PUPDR
;

313 
__IO
 
uöt32_t
 
IDR
;

314 
__IO
 
uöt32_t
 
ODR
;

315 
__IO
 
uöt32_t
 
BSRR
;

316 
__IO
 
uöt32_t
 
LCKR
;

317 
__IO
 
uöt32_t
 
AFR
[2];

318 
__IO
 
uöt32_t
 
BRR
;

319 }
	tGPIO_Ty≥Def
;

326 
__IO
 
uöt32_t
 
ISR
;

327 
__IO
 
uöt32_t
 
ICR
;

328 
__IO
 
uöt32_t
 
IER
;

329 
__IO
 
uöt32_t
 
CFGR
;

330 
__IO
 
uöt32_t
 
CR
;

331 
__IO
 
uöt32_t
 
CMP
;

332 
__IO
 
uöt32_t
 
ARR
;

333 
__IO
 
uöt32_t
 
CNT
;

334 } 
	tLPTIM_Ty≥Def
;

342 
__IO
 
uöt32_t
 
CFGR1
;

343 
__IO
 
uöt32_t
 
CFGR2
;

344 
__IO
 
uöt32_t
 
EXTICR
[4];

345 
uöt32_t
 
RESERVED
[2];

346 
__IO
 
uöt32_t
 
CFGR3
;

347 } 
	tSYSCFG_Ty≥Def
;

357 
__IO
 
uöt32_t
 
CR1
;

358 
__IO
 
uöt32_t
 
CR2
;

359 
__IO
 
uöt32_t
 
OAR1
;

360 
__IO
 
uöt32_t
 
OAR2
;

361 
__IO
 
uöt32_t
 
TIMINGR
;

362 
__IO
 
uöt32_t
 
TIMEOUTR
;

363 
__IO
 
uöt32_t
 
ISR
;

364 
__IO
 
uöt32_t
 
ICR
;

365 
__IO
 
uöt32_t
 
PECR
;

366 
__IO
 
uöt32_t
 
RXDR
;

367 
__IO
 
uöt32_t
 
TXDR
;

368 }
	tI2C_Ty≥Def
;

376 
__IO
 
uöt32_t
 
KR
;

377 
__IO
 
uöt32_t
 
PR
;

378 
__IO
 
uöt32_t
 
RLR
;

379 
__IO
 
uöt32_t
 
SR
;

380 
__IO
 
uöt32_t
 
WINR
;

381 } 
	tIWDG_Ty≥Def
;

388 
__IO
 
uöt32_t
 
CR
;

389 
__IO
 
uöt32_t
 
FCR
;

390 
__IO
 
uöt32_t
 
SR
;

391 
__IO
 
uöt32_t
 
CLR
;

392 
uöt32_t
 
RESERVED
;

393 
__IO
 
uöt32_t
 
RAM
[16];

394 } 
	tLCD_Ty≥Def
;

401 
__IO
 
uöt32_t
 
CSSA
;

402 
__IO
 
uöt32_t
 
CSL
;

403 
__IO
 
uöt32_t
 
NVDSSA
;

404 
__IO
 
uöt32_t
 
NVDSL
;

405 
__IO
 
uöt32_t
 
VDSSA
 ;

406 
__IO
 
uöt32_t
 
VDSL
 ;

407 
__IO
 
uöt32_t
 
LSSA
 ;

408 
__IO
 
uöt32_t
 
LSL
 ;

409 
__IO
 
uöt32_t
 
CR
 ;

411 } 
	tFIREWALL_Ty≥Def
;

418 
__IO
 
uöt32_t
 
CR
;

419 
__IO
 
uöt32_t
 
CSR
;

420 } 
	tPWR_Ty≥Def
;

427 
__IO
 
uöt32_t
 
CR
;

428 
__IO
 
uöt32_t
 
ICSCR
;

429 
__IO
 
uöt32_t
 
CRRCR
;

430 
__IO
 
uöt32_t
 
CFGR
;

431 
__IO
 
uöt32_t
 
CIER
;

432 
__IO
 
uöt32_t
 
CIFR
;

433 
__IO
 
uöt32_t
 
CICR
;

434 
__IO
 
uöt32_t
 
IOPRSTR
;

435 
__IO
 
uöt32_t
 
AHBRSTR
;

436 
__IO
 
uöt32_t
 
APB2RSTR
;

437 
__IO
 
uöt32_t
 
APB1RSTR
;

438 
__IO
 
uöt32_t
 
IOPENR
;

439 
__IO
 
uöt32_t
 
AHBENR
;

440 
__IO
 
uöt32_t
 
APB2ENR
;

441 
__IO
 
uöt32_t
 
APB1ENR
;

442 
__IO
 
uöt32_t
 
IOPSMENR
;

443 
__IO
 
uöt32_t
 
AHBSMENR
;

444 
__IO
 
uöt32_t
 
APB2SMENR
;

445 
__IO
 
uöt32_t
 
APB1SMENR
;

446 
__IO
 
uöt32_t
 
CCIPR
;

447 
__IO
 
uöt32_t
 
CSR
;

448 } 
	tRCC_Ty≥Def
;

455 
__IO
 
uöt32_t
 
CR
;

456 
__IO
 
uöt32_t
 
SR
;

457 
__IO
 
uöt32_t
 
DR
;

458 } 
	tRNG_Ty≥Def
;

465 
__IO
 
uöt32_t
 
TR
;

466 
__IO
 
uöt32_t
 
DR
;

467 
__IO
 
uöt32_t
 
CR
;

468 
__IO
 
uöt32_t
 
ISR
;

469 
__IO
 
uöt32_t
 
PRER
;

470 
__IO
 
uöt32_t
 
WUTR
;

471 
uöt32_t
 
RESERVED
;

472 
__IO
 
uöt32_t
 
ALRMAR
;

473 
__IO
 
uöt32_t
 
ALRMBR
;

474 
__IO
 
uöt32_t
 
WPR
;

475 
__IO
 
uöt32_t
 
SSR
;

476 
__IO
 
uöt32_t
 
SHIFTR
;

477 
__IO
 
uöt32_t
 
TSTR
;

478 
__IO
 
uöt32_t
 
TSDR
;

479 
__IO
 
uöt32_t
 
TSSSR
;

480 
__IO
 
uöt32_t
 
CALR
;

481 
__IO
 
uöt32_t
 
TAMPCR
;

482 
__IO
 
uöt32_t
 
ALRMASSR
;

483 
__IO
 
uöt32_t
 
ALRMBSSR
;

484 
__IO
 
uöt32_t
 
OR
;

485 
__IO
 
uöt32_t
 
BKP0R
;

486 
__IO
 
uöt32_t
 
BKP1R
;

487 
__IO
 
uöt32_t
 
BKP2R
;

488 
__IO
 
uöt32_t
 
BKP3R
;

489 
__IO
 
uöt32_t
 
BKP4R
;

490 } 
	tRTC_Ty≥Def
;

498 
__IO
 
uöt32_t
 
CR1
;

499 
__IO
 
uöt32_t
 
CR2
;

500 
__IO
 
uöt32_t
 
SR
;

501 
__IO
 
uöt32_t
 
DR
;

502 
__IO
 
uöt32_t
 
CRCPR
;

503 
__IO
 
uöt32_t
 
RXCRCR
;

504 
__IO
 
uöt32_t
 
TXCRCR
;

505 
__IO
 
uöt32_t
 
I2SCFGR
;

506 
__IO
 
uöt32_t
 
I2SPR
;

507 } 
	tSPI_Ty≥Def
;

514 
__IO
 
uöt32_t
 
CR1
;

515 
__IO
 
uöt32_t
 
CR2
;

516 
__IO
 
uöt32_t
 
SMCR
;

517 
__IO
 
uöt32_t
 
DIER
;

518 
__IO
 
uöt32_t
 
SR
;

519 
__IO
 
uöt32_t
 
EGR
;

520 
__IO
 
uöt32_t
 
CCMR1
;

521 
__IO
 
uöt32_t
 
CCMR2
;

522 
__IO
 
uöt32_t
 
CCER
;

523 
__IO
 
uöt32_t
 
CNT
;

524 
__IO
 
uöt32_t
 
PSC
;

525 
__IO
 
uöt32_t
 
ARR
;

526 
uöt32_t
 
RESERVED12
;

527 
__IO
 
uöt32_t
 
CCR1
;

528 
__IO
 
uöt32_t
 
CCR2
;

529 
__IO
 
uöt32_t
 
CCR3
;

530 
__IO
 
uöt32_t
 
CCR4
;

531 
uöt32_t
 
RESERVED17
;

532 
__IO
 
uöt32_t
 
DCR
;

533 
__IO
 
uöt32_t
 
DMAR
;

534 
__IO
 
uöt32_t
 
OR
;

535 } 
	tTIM_Ty≥Def
;

542 
__IO
 
uöt32_t
 
CR
;

543 
__IO
 
uöt32_t
 
IER
;

544 
__IO
 
uöt32_t
 
ICR
;

545 
__IO
 
uöt32_t
 
ISR
;

546 
__IO
 
uöt32_t
 
IOHCR
;

547 
uöt32_t
 
RESERVED1
;

548 
__IO
 
uöt32_t
 
IOASCR
;

549 
uöt32_t
 
RESERVED2
;

550 
__IO
 
uöt32_t
 
IOSCR
;

551 
uöt32_t
 
RESERVED3
;

552 
__IO
 
uöt32_t
 
IOCCR
;

553 
uöt32_t
 
RESERVED4
;

554 
__IO
 
uöt32_t
 
IOGCSR
;

555 
__IO
 
uöt32_t
 
IOGXCR
[8];

556 } 
	tTSC_Ty≥Def
;

563 
__IO
 
uöt32_t
 
CR1
;

564 
__IO
 
uöt32_t
 
CR2
;

565 
__IO
 
uöt32_t
 
CR3
;

566 
__IO
 
uöt32_t
 
BRR
;

567 
__IO
 
uöt32_t
 
GTPR
;

568 
__IO
 
uöt32_t
 
RTOR
;

569 
__IO
 
uöt32_t
 
RQR
;

570 
__IO
 
uöt32_t
 
ISR
;

571 
__IO
 
uöt32_t
 
ICR
;

572 
__IO
 
uöt32_t
 
RDR
;

573 
__IO
 
uöt32_t
 
TDR
;

574 } 
	tUSART_Ty≥Def
;

581 
__IO
 
uöt32_t
 
CR
;

582 
__IO
 
uöt32_t
 
CFR
;

583 
__IO
 
uöt32_t
 
SR
;

584 } 
	tWWDG_Ty≥Def
;

591 
__IO
 
uöt16_t
 
EP0R
;

592 
__IO
 
uöt16_t
 
RESERVED0
;

593 
__IO
 
uöt16_t
 
EP1R
;

594 
__IO
 
uöt16_t
 
RESERVED1
;

595 
__IO
 
uöt16_t
 
EP2R
;

596 
__IO
 
uöt16_t
 
RESERVED2
;

597 
__IO
 
uöt16_t
 
EP3R
;

598 
__IO
 
uöt16_t
 
RESERVED3
;

599 
__IO
 
uöt16_t
 
EP4R
;

600 
__IO
 
uöt16_t
 
RESERVED4
;

601 
__IO
 
uöt16_t
 
EP5R
;

602 
__IO
 
uöt16_t
 
RESERVED5
;

603 
__IO
 
uöt16_t
 
EP6R
;

604 
__IO
 
uöt16_t
 
RESERVED6
;

605 
__IO
 
uöt16_t
 
EP7R
;

606 
__IO
 
uöt16_t
 
RESERVED7
[17];

607 
__IO
 
uöt16_t
 
CNTR
;

608 
__IO
 
uöt16_t
 
RESERVED8
;

609 
__IO
 
uöt16_t
 
ISTR
;

610 
__IO
 
uöt16_t
 
RESERVED9
;

611 
__IO
 
uöt16_t
 
FNR
;

612 
__IO
 
uöt16_t
 
RESERVEDA
;

613 
__IO
 
uöt16_t
 
DADDR
;

614 
__IO
 
uöt16_t
 
RESERVEDB
;

615 
__IO
 
uöt16_t
 
BTABLE
;

616 
__IO
 
uöt16_t
 
RESERVEDC
;

617 
__IO
 
uöt16_t
 
LPMCSR
;

618 
__IO
 
uöt16_t
 
RESERVEDD
;

619 
__IO
 
uöt16_t
 
BCDR
;

620 
__IO
 
uöt16_t
 
RESERVEDE
;

621 } 
	tUSB_Ty≥Def
;

630 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000UË

	)

631 
	#FLASH_END
 ((
uöt32_t
)0x0800FFFFUË

	)

632 
	#DATA_EEPROM_BASE
 ((
uöt32_t
)0x08080000UË

	)

633 
	#DATA_EEPROM_END
 ((
uöt32_t
)0x080807FFUË

	)

634 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000UË

	)

635 
	#SRAM_SIZE_MAX
 ((
uöt32_t
)0x00002000UË

	)

637 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000UË

	)

640 
	#APBPERIPH_BASE
 
PERIPH_BASE


	)

641 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000U)

	)

642 
	#IOPPERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000U)

	)

644 
	#TIM2_BASE
 (
APBPERIPH_BASE
 + 0x00000000U)

	)

645 
	#TIM6_BASE
 (
APBPERIPH_BASE
 + 0x00001000U)

	)

646 
	#LCD_BASE
 (
APBPERIPH_BASE
 + 0x00002400U)

	)

647 
	#RTC_BASE
 (
APBPERIPH_BASE
 + 0x00002800U)

	)

648 
	#WWDG_BASE
 (
APBPERIPH_BASE
 + 0x00002C00U)

	)

649 
	#IWDG_BASE
 (
APBPERIPH_BASE
 + 0x00003000U)

	)

650 
	#SPI2_BASE
 (
APBPERIPH_BASE
 + 0x00003800U)

	)

651 
	#USART2_BASE
 (
APBPERIPH_BASE
 + 0x00004400U)

	)

652 
	#LPUART1_BASE
 (
APBPERIPH_BASE
 + 0x00004800U)

	)

653 
	#I2C1_BASE
 (
APBPERIPH_BASE
 + 0x00005400U)

	)

654 
	#I2C2_BASE
 (
APBPERIPH_BASE
 + 0x00005800U)

	)

655 
	#CRS_BASE
 (
APBPERIPH_BASE
 + 0x00006C00U)

	)

656 
	#PWR_BASE
 (
APBPERIPH_BASE
 + 0x00007000U)

	)

657 
	#DAC_BASE
 (
APBPERIPH_BASE
 + 0x00007400U)

	)

658 
	#LPTIM1_BASE
 (
APBPERIPH_BASE
 + 0x00007C00U)

	)

660 
	#SYSCFG_BASE
 (
APBPERIPH_BASE
 + 0x00010000U)

	)

661 
	#COMP1_BASE
 (
APBPERIPH_BASE
 + 0x00010018U)

	)

662 
	#COMP2_BASE
 (
APBPERIPH_BASE
 + 0x0001001CU)

	)

663 
	#COMP12_COMMON
 ((
COMP_Comm⁄_Ty≥Def
 *Ë
COMP1_BASE
)

	)

664 
	#EXTI_BASE
 (
APBPERIPH_BASE
 + 0x00010400U)

	)

665 
	#TIM21_BASE
 (
APBPERIPH_BASE
 + 0x00010800U)

	)

666 
	#TIM22_BASE
 (
APBPERIPH_BASE
 + 0x00011400U)

	)

667 
	#FIREWALL_BASE
 (
APBPERIPH_BASE
 + 0x00011C00U)

	)

668 
	#ADC1_BASE
 (
APBPERIPH_BASE
 + 0x00012400U)

	)

669 
	#ADC_BASE
 (
APBPERIPH_BASE
 + 0x00012708U)

	)

670 
	#SPI1_BASE
 (
APBPERIPH_BASE
 + 0x00013000U)

	)

671 
	#USART1_BASE
 (
APBPERIPH_BASE
 + 0x00013800U)

	)

672 
	#DBGMCU_BASE
 (
APBPERIPH_BASE
 + 0x00015800U)

	)

674 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x00000000U)

	)

675 
	#DMA1_Ch™√l1_BASE
 (
DMA1_BASE
 + 0x00000008U)

	)

676 
	#DMA1_Ch™√l2_BASE
 (
DMA1_BASE
 + 0x0000001CU)

	)

677 
	#DMA1_Ch™√l3_BASE
 (
DMA1_BASE
 + 0x00000030U)

	)

678 
	#DMA1_Ch™√l4_BASE
 (
DMA1_BASE
 + 0x00000044U)

	)

679 
	#DMA1_Ch™√l5_BASE
 (
DMA1_BASE
 + 0x00000058U)

	)

680 
	#DMA1_Ch™√l6_BASE
 (
DMA1_BASE
 + 0x0000006CU)

	)

681 
	#DMA1_Ch™√l7_BASE
 (
DMA1_BASE
 + 0x00000080U)

	)

682 
	#DMA1_CSELR_BASE
 (
DMA1_BASE
 + 0x000000A8U)

	)

685 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x00001000U)

	)

686 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x00002000UË

	)

687 
	#OB_BASE
 ((
uöt32_t
)0x1FF80000UË

	)

688 
	#FLASHSIZE_BASE
 ((
uöt32_t
)0x1FF8007CUË

	)

689 
	#UID_BASE
 ((
uöt32_t
)0x1FF80050UË

	)

690 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x00003000U)

	)

691 
	#TSC_BASE
 (
AHBPERIPH_BASE
 + 0x00004000U)

	)

692 
	#RNG_BASE
 (
AHBPERIPH_BASE
 + 0x00005000U)

	)

694 
	#GPIOA_BASE
 (
IOPPERIPH_BASE
 + 0x00000000U)

	)

695 
	#GPIOB_BASE
 (
IOPPERIPH_BASE
 + 0x00000400U)

	)

696 
	#GPIOC_BASE
 (
IOPPERIPH_BASE
 + 0x00000800U)

	)

697 
	#GPIOD_BASE
 (
IOPPERIPH_BASE
 + 0x00000C00U)

	)

698 
	#GPIOH_BASE
 (
IOPPERIPH_BASE
 + 0x00001C00U)

	)

708 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

709 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

710 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

711 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

712 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

713 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

714 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

715 
	#LPUART1
 ((
USART_Ty≥Def
 *Ë
LPUART1_BASE
)

	)

716 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

717 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

718 
	#CRS
 ((
CRS_Ty≥Def
 *Ë
CRS_BASE
)

	)

719 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

720 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

721 
	#DAC1
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

722 
	#LPTIM1
 ((
LPTIM_Ty≥Def
 *Ë
LPTIM1_BASE
)

	)

723 
	#LCD
 ((
LCD_Ty≥Def
 *Ë
LCD_BASE
)

	)

725 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

726 
	#COMP1
 ((
COMP_Ty≥Def
 *Ë
COMP1_BASE
)

	)

727 
	#COMP2
 ((
COMP_Ty≥Def
 *Ë
COMP2_BASE
)

	)

728 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

729 
	#TIM21
 ((
TIM_Ty≥Def
 *Ë
TIM21_BASE
)

	)

730 
	#TIM22
 ((
TIM_Ty≥Def
 *Ë
TIM22_BASE
)

	)

731 
	#FIREWALL
 ((
FIREWALL_Ty≥Def
 *Ë
FIREWALL_BASE
)

	)

732 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

733 
	#ADC1_COMMON
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

735 
	#ADC
 
ADC1_COMMON


	)

736 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

737 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

738 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

740 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

741 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

742 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

743 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

744 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

745 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

746 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

747 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

748 
	#DMA1_CSELR
 ((
DMA_Reque°_Ty≥Def
 *Ë
DMA1_CSELR_BASE
)

	)

751 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

752 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

753 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

754 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

755 
	#TSC
 ((
TSC_Ty≥Def
 *Ë
TSC_BASE
)

	)

756 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

758 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

759 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

760 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

761 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

762 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

764 
	#USB
 ((
USB_Ty≥Def
 *Ë
USB_BASE
)

	)

787 
	#ADC_ISR_EOCAL_Pos
 (11U)

	)

788 
	#ADC_ISR_EOCAL_Msk
 (0x1U << 
ADC_ISR_EOCAL_Pos
Ë

	)

789 
	#ADC_ISR_EOCAL
 
ADC_ISR_EOCAL_Msk


	)

790 
	#ADC_ISR_AWD_Pos
 (7U)

	)

791 
	#ADC_ISR_AWD_Msk
 (0x1U << 
ADC_ISR_AWD_Pos
Ë

	)

792 
	#ADC_ISR_AWD
 
ADC_ISR_AWD_Msk


	)

793 
	#ADC_ISR_OVR_Pos
 (4U)

	)

794 
	#ADC_ISR_OVR_Msk
 (0x1U << 
ADC_ISR_OVR_Pos
Ë

	)

795 
	#ADC_ISR_OVR
 
ADC_ISR_OVR_Msk


	)

796 
	#ADC_ISR_EOSEQ_Pos
 (3U)

	)

797 
	#ADC_ISR_EOSEQ_Msk
 (0x1U << 
ADC_ISR_EOSEQ_Pos
Ë

	)

798 
	#ADC_ISR_EOSEQ
 
ADC_ISR_EOSEQ_Msk


	)

799 
	#ADC_ISR_EOC_Pos
 (2U)

	)

800 
	#ADC_ISR_EOC_Msk
 (0x1U << 
ADC_ISR_EOC_Pos
Ë

	)

801 
	#ADC_ISR_EOC
 
ADC_ISR_EOC_Msk


	)

802 
	#ADC_ISR_EOSMP_Pos
 (1U)

	)

803 
	#ADC_ISR_EOSMP_Msk
 (0x1U << 
ADC_ISR_EOSMP_Pos
Ë

	)

804 
	#ADC_ISR_EOSMP
 
ADC_ISR_EOSMP_Msk


	)

805 
	#ADC_ISR_ADRDY_Pos
 (0U)

	)

806 
	#ADC_ISR_ADRDY_Msk
 (0x1U << 
ADC_ISR_ADRDY_Pos
Ë

	)

807 
	#ADC_ISR_ADRDY
 
ADC_ISR_ADRDY_Msk


	)

810 
	#ADC_ISR_EOS
 
ADC_ISR_EOSEQ


	)

813 
	#ADC_IER_EOCALIE_Pos
 (11U)

	)

814 
	#ADC_IER_EOCALIE_Msk
 (0x1U << 
ADC_IER_EOCALIE_Pos
Ë

	)

815 
	#ADC_IER_EOCALIE
 
ADC_IER_EOCALIE_Msk


	)

816 
	#ADC_IER_AWDIE_Pos
 (7U)

	)

817 
	#ADC_IER_AWDIE_Msk
 (0x1U << 
ADC_IER_AWDIE_Pos
Ë

	)

818 
	#ADC_IER_AWDIE
 
ADC_IER_AWDIE_Msk


	)

819 
	#ADC_IER_OVRIE_Pos
 (4U)

	)

820 
	#ADC_IER_OVRIE_Msk
 (0x1U << 
ADC_IER_OVRIE_Pos
Ë

	)

821 
	#ADC_IER_OVRIE
 
ADC_IER_OVRIE_Msk


	)

822 
	#ADC_IER_EOSEQIE_Pos
 (3U)

	)

823 
	#ADC_IER_EOSEQIE_Msk
 (0x1U << 
ADC_IER_EOSEQIE_Pos
Ë

	)

824 
	#ADC_IER_EOSEQIE
 
ADC_IER_EOSEQIE_Msk


	)

825 
	#ADC_IER_EOCIE_Pos
 (2U)

	)

826 
	#ADC_IER_EOCIE_Msk
 (0x1U << 
ADC_IER_EOCIE_Pos
Ë

	)

827 
	#ADC_IER_EOCIE
 
ADC_IER_EOCIE_Msk


	)

828 
	#ADC_IER_EOSMPIE_Pos
 (1U)

	)

829 
	#ADC_IER_EOSMPIE_Msk
 (0x1U << 
ADC_IER_EOSMPIE_Pos
Ë

	)

830 
	#ADC_IER_EOSMPIE
 
ADC_IER_EOSMPIE_Msk


	)

831 
	#ADC_IER_ADRDYIE_Pos
 (0U)

	)

832 
	#ADC_IER_ADRDYIE_Msk
 (0x1U << 
ADC_IER_ADRDYIE_Pos
Ë

	)

833 
	#ADC_IER_ADRDYIE
 
ADC_IER_ADRDYIE_Msk


	)

836 
	#ADC_IER_EOSIE
 
ADC_IER_EOSEQIE


	)

839 
	#ADC_CR_ADCAL_Pos
 (31U)

	)

840 
	#ADC_CR_ADCAL_Msk
 (0x1U << 
ADC_CR_ADCAL_Pos
Ë

	)

841 
	#ADC_CR_ADCAL
 
ADC_CR_ADCAL_Msk


	)

842 
	#ADC_CR_ADVREGEN_Pos
 (28U)

	)

843 
	#ADC_CR_ADVREGEN_Msk
 (0x1U << 
ADC_CR_ADVREGEN_Pos
Ë

	)

844 
	#ADC_CR_ADVREGEN
 
ADC_CR_ADVREGEN_Msk


	)

845 
	#ADC_CR_ADSTP_Pos
 (4U)

	)

846 
	#ADC_CR_ADSTP_Msk
 (0x1U << 
ADC_CR_ADSTP_Pos
Ë

	)

847 
	#ADC_CR_ADSTP
 
ADC_CR_ADSTP_Msk


	)

848 
	#ADC_CR_ADSTART_Pos
 (2U)

	)

849 
	#ADC_CR_ADSTART_Msk
 (0x1U << 
ADC_CR_ADSTART_Pos
Ë

	)

850 
	#ADC_CR_ADSTART
 
ADC_CR_ADSTART_Msk


	)

851 
	#ADC_CR_ADDIS_Pos
 (1U)

	)

852 
	#ADC_CR_ADDIS_Msk
 (0x1U << 
ADC_CR_ADDIS_Pos
Ë

	)

853 
	#ADC_CR_ADDIS
 
ADC_CR_ADDIS_Msk


	)

854 
	#ADC_CR_ADEN_Pos
 (0U)

	)

855 
	#ADC_CR_ADEN_Msk
 (0x1U << 
ADC_CR_ADEN_Pos
Ë

	)

856 
	#ADC_CR_ADEN
 
ADC_CR_ADEN_Msk


	)

859 
	#ADC_CFGR1_AWDCH_Pos
 (26U)

	)

860 
	#ADC_CFGR1_AWDCH_Msk
 (0x1FU << 
ADC_CFGR1_AWDCH_Pos
Ë

	)

861 
	#ADC_CFGR1_AWDCH
 
ADC_CFGR1_AWDCH_Msk


	)

862 
	#ADC_CFGR1_AWDCH_0
 (0x01U << 
ADC_CFGR1_AWDCH_Pos
Ë

	)

863 
	#ADC_CFGR1_AWDCH_1
 (0x02U << 
ADC_CFGR1_AWDCH_Pos
Ë

	)

864 
	#ADC_CFGR1_AWDCH_2
 (0x04U << 
ADC_CFGR1_AWDCH_Pos
Ë

	)

865 
	#ADC_CFGR1_AWDCH_3
 (0x08U << 
ADC_CFGR1_AWDCH_Pos
Ë

	)

866 
	#ADC_CFGR1_AWDCH_4
 (0x10U << 
ADC_CFGR1_AWDCH_Pos
Ë

	)

867 
	#ADC_CFGR1_AWDEN_Pos
 (23U)

	)

868 
	#ADC_CFGR1_AWDEN_Msk
 (0x1U << 
ADC_CFGR1_AWDEN_Pos
Ë

	)

869 
	#ADC_CFGR1_AWDEN
 
ADC_CFGR1_AWDEN_Msk


	)

870 
	#ADC_CFGR1_AWDSGL_Pos
 (22U)

	)

871 
	#ADC_CFGR1_AWDSGL_Msk
 (0x1U << 
ADC_CFGR1_AWDSGL_Pos
Ë

	)

872 
	#ADC_CFGR1_AWDSGL
 
ADC_CFGR1_AWDSGL_Msk


	)

873 
	#ADC_CFGR1_DISCEN_Pos
 (16U)

	)

874 
	#ADC_CFGR1_DISCEN_Msk
 (0x1U << 
ADC_CFGR1_DISCEN_Pos
Ë

	)

875 
	#ADC_CFGR1_DISCEN
 
ADC_CFGR1_DISCEN_Msk


	)

876 
	#ADC_CFGR1_AUTOFF_Pos
 (15U)

	)

877 
	#ADC_CFGR1_AUTOFF_Msk
 (0x1U << 
ADC_CFGR1_AUTOFF_Pos
Ë

	)

878 
	#ADC_CFGR1_AUTOFF
 
ADC_CFGR1_AUTOFF_Msk


	)

879 
	#ADC_CFGR1_WAIT_Pos
 (14U)

	)

880 
	#ADC_CFGR1_WAIT_Msk
 (0x1U << 
ADC_CFGR1_WAIT_Pos
Ë

	)

881 
	#ADC_CFGR1_WAIT
 
ADC_CFGR1_WAIT_Msk


	)

882 
	#ADC_CFGR1_CONT_Pos
 (13U)

	)

883 
	#ADC_CFGR1_CONT_Msk
 (0x1U << 
ADC_CFGR1_CONT_Pos
Ë

	)

884 
	#ADC_CFGR1_CONT
 
ADC_CFGR1_CONT_Msk


	)

885 
	#ADC_CFGR1_OVRMOD_Pos
 (12U)

	)

886 
	#ADC_CFGR1_OVRMOD_Msk
 (0x1U << 
ADC_CFGR1_OVRMOD_Pos
Ë

	)

887 
	#ADC_CFGR1_OVRMOD
 
ADC_CFGR1_OVRMOD_Msk


	)

888 
	#ADC_CFGR1_EXTEN_Pos
 (10U)

	)

889 
	#ADC_CFGR1_EXTEN_Msk
 (0x3U << 
ADC_CFGR1_EXTEN_Pos
Ë

	)

890 
	#ADC_CFGR1_EXTEN
 
ADC_CFGR1_EXTEN_Msk


	)

891 
	#ADC_CFGR1_EXTEN_0
 (0x1U << 
ADC_CFGR1_EXTEN_Pos
Ë

	)

892 
	#ADC_CFGR1_EXTEN_1
 (0x2U << 
ADC_CFGR1_EXTEN_Pos
Ë

	)

893 
	#ADC_CFGR1_EXTSEL_Pos
 (6U)

	)

894 
	#ADC_CFGR1_EXTSEL_Msk
 (0x7U << 
ADC_CFGR1_EXTSEL_Pos
Ë

	)

895 
	#ADC_CFGR1_EXTSEL
 
ADC_CFGR1_EXTSEL_Msk


	)

896 
	#ADC_CFGR1_EXTSEL_0
 (0x1U << 
ADC_CFGR1_EXTSEL_Pos
Ë

	)

897 
	#ADC_CFGR1_EXTSEL_1
 (0x2U << 
ADC_CFGR1_EXTSEL_Pos
Ë

	)

898 
	#ADC_CFGR1_EXTSEL_2
 (0x4U << 
ADC_CFGR1_EXTSEL_Pos
Ë

	)

899 
	#ADC_CFGR1_ALIGN_Pos
 (5U)

	)

900 
	#ADC_CFGR1_ALIGN_Msk
 (0x1U << 
ADC_CFGR1_ALIGN_Pos
Ë

	)

901 
	#ADC_CFGR1_ALIGN
 
ADC_CFGR1_ALIGN_Msk


	)

902 
	#ADC_CFGR1_RES_Pos
 (3U)

	)

903 
	#ADC_CFGR1_RES_Msk
 (0x3U << 
ADC_CFGR1_RES_Pos
Ë

	)

904 
	#ADC_CFGR1_RES
 
ADC_CFGR1_RES_Msk


	)

905 
	#ADC_CFGR1_RES_0
 (0x1U << 
ADC_CFGR1_RES_Pos
Ë

	)

906 
	#ADC_CFGR1_RES_1
 (0x2U << 
ADC_CFGR1_RES_Pos
Ë

	)

907 
	#ADC_CFGR1_SCANDIR_Pos
 (2U)

	)

908 
	#ADC_CFGR1_SCANDIR_Msk
 (0x1U << 
ADC_CFGR1_SCANDIR_Pos
Ë

	)

909 
	#ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR_Msk


	)

910 
	#ADC_CFGR1_DMACFG_Pos
 (1U)

	)

911 
	#ADC_CFGR1_DMACFG_Msk
 (0x1U << 
ADC_CFGR1_DMACFG_Pos
Ë

	)

912 
	#ADC_CFGR1_DMACFG
 
ADC_CFGR1_DMACFG_Msk


	)

913 
	#ADC_CFGR1_DMAEN_Pos
 (0U)

	)

914 
	#ADC_CFGR1_DMAEN_Msk
 (0x1U << 
ADC_CFGR1_DMAEN_Pos
Ë

	)

915 
	#ADC_CFGR1_DMAEN
 
ADC_CFGR1_DMAEN_Msk


	)

918 
	#ADC_CFGR1_AUTDLY
 
ADC_CFGR1_WAIT


	)

921 
	#ADC_CFGR2_TOVS_Pos
 (9U)

	)

922 
	#ADC_CFGR2_TOVS_Msk
 (0x1U << 
ADC_CFGR2_TOVS_Pos
Ë

	)

923 
	#ADC_CFGR2_TOVS
 
ADC_CFGR2_TOVS_Msk


	)

924 
	#ADC_CFGR2_OVSS_Pos
 (5U)

	)

925 
	#ADC_CFGR2_OVSS_Msk
 (0xFU << 
ADC_CFGR2_OVSS_Pos
Ë

	)

926 
	#ADC_CFGR2_OVSS
 
ADC_CFGR2_OVSS_Msk


	)

927 
	#ADC_CFGR2_OVSS_0
 (0x1U << 
ADC_CFGR2_OVSS_Pos
Ë

	)

928 
	#ADC_CFGR2_OVSS_1
 (0x2U << 
ADC_CFGR2_OVSS_Pos
Ë

	)

929 
	#ADC_CFGR2_OVSS_2
 (0x4U << 
ADC_CFGR2_OVSS_Pos
Ë

	)

930 
	#ADC_CFGR2_OVSS_3
 (0x8U << 
ADC_CFGR2_OVSS_Pos
Ë

	)

931 
	#ADC_CFGR2_OVSR_Pos
 (2U)

	)

932 
	#ADC_CFGR2_OVSR_Msk
 (0x7U << 
ADC_CFGR2_OVSR_Pos
Ë

	)

933 
	#ADC_CFGR2_OVSR
 
ADC_CFGR2_OVSR_Msk


	)

934 
	#ADC_CFGR2_OVSR_0
 (0x1U << 
ADC_CFGR2_OVSR_Pos
Ë

	)

935 
	#ADC_CFGR2_OVSR_1
 (0x2U << 
ADC_CFGR2_OVSR_Pos
Ë

	)

936 
	#ADC_CFGR2_OVSR_2
 (0x4U << 
ADC_CFGR2_OVSR_Pos
Ë

	)

937 
	#ADC_CFGR2_OVSE_Pos
 (0U)

	)

938 
	#ADC_CFGR2_OVSE_Msk
 (0x1U << 
ADC_CFGR2_OVSE_Pos
Ë

	)

939 
	#ADC_CFGR2_OVSE
 
ADC_CFGR2_OVSE_Msk


	)

940 
	#ADC_CFGR2_CKMODE_Pos
 (30U)

	)

941 
	#ADC_CFGR2_CKMODE_Msk
 (0x3U << 
ADC_CFGR2_CKMODE_Pos
Ë

	)

942 
	#ADC_CFGR2_CKMODE
 
ADC_CFGR2_CKMODE_Msk


	)

943 
	#ADC_CFGR2_CKMODE_0
 (0x1U << 
ADC_CFGR2_CKMODE_Pos
Ë

	)

944 
	#ADC_CFGR2_CKMODE_1
 (0x2U << 
ADC_CFGR2_CKMODE_Pos
Ë

	)

948 
	#ADC_SMPR_SMP_Pos
 (0U)

	)

949 
	#ADC_SMPR_SMP_Msk
 (0x7U << 
ADC_SMPR_SMP_Pos
Ë

	)

950 
	#ADC_SMPR_SMP
 
ADC_SMPR_SMP_Msk


	)

951 
	#ADC_SMPR_SMP_0
 (0x1U << 
ADC_SMPR_SMP_Pos
Ë

	)

952 
	#ADC_SMPR_SMP_1
 (0x2U << 
ADC_SMPR_SMP_Pos
Ë

	)

953 
	#ADC_SMPR_SMP_2
 (0x4U << 
ADC_SMPR_SMP_Pos
Ë

	)

956 
	#ADC_SMPR_SMPR
 
ADC_SMPR_SMP


	)

957 
	#ADC_SMPR_SMPR_0
 
ADC_SMPR_SMP_0


	)

958 
	#ADC_SMPR_SMPR_1
 
ADC_SMPR_SMP_1


	)

959 
	#ADC_SMPR_SMPR_2
 
ADC_SMPR_SMP_2


	)

962 
	#ADC_TR_HT_Pos
 (16U)

	)

963 
	#ADC_TR_HT_Msk
 (0xFFFU << 
ADC_TR_HT_Pos
Ë

	)

964 
	#ADC_TR_HT
 
ADC_TR_HT_Msk


	)

965 
	#ADC_TR_LT_Pos
 (0U)

	)

966 
	#ADC_TR_LT_Msk
 (0xFFFU << 
ADC_TR_LT_Pos
Ë

	)

967 
	#ADC_TR_LT
 
ADC_TR_LT_Msk


	)

970 
	#ADC_CHSELR_CHSEL_Pos
 (0U)

	)

971 
	#ADC_CHSELR_CHSEL_Msk
 (0x7FFFFU << 
ADC_CHSELR_CHSEL_Pos
Ë

	)

972 
	#ADC_CHSELR_CHSEL
 
ADC_CHSELR_CHSEL_Msk


	)

973 
	#ADC_CHSELR_CHSEL18_Pos
 (18U)

	)

974 
	#ADC_CHSELR_CHSEL18_Msk
 (0x1U << 
ADC_CHSELR_CHSEL18_Pos
Ë

	)

975 
	#ADC_CHSELR_CHSEL18
 
ADC_CHSELR_CHSEL18_Msk


	)

976 
	#ADC_CHSELR_CHSEL17_Pos
 (17U)

	)

977 
	#ADC_CHSELR_CHSEL17_Msk
 (0x1U << 
ADC_CHSELR_CHSEL17_Pos
Ë

	)

978 
	#ADC_CHSELR_CHSEL17
 
ADC_CHSELR_CHSEL17_Msk


	)

979 
	#ADC_CHSELR_CHSEL16_Pos
 (16U)

	)

980 
	#ADC_CHSELR_CHSEL16_Msk
 (0x1U << 
ADC_CHSELR_CHSEL16_Pos
Ë

	)

981 
	#ADC_CHSELR_CHSEL16
 
ADC_CHSELR_CHSEL16_Msk


	)

982 
	#ADC_CHSELR_CHSEL15_Pos
 (15U)

	)

983 
	#ADC_CHSELR_CHSEL15_Msk
 (0x1U << 
ADC_CHSELR_CHSEL15_Pos
Ë

	)

984 
	#ADC_CHSELR_CHSEL15
 
ADC_CHSELR_CHSEL15_Msk


	)

985 
	#ADC_CHSELR_CHSEL14_Pos
 (14U)

	)

986 
	#ADC_CHSELR_CHSEL14_Msk
 (0x1U << 
ADC_CHSELR_CHSEL14_Pos
Ë

	)

987 
	#ADC_CHSELR_CHSEL14
 
ADC_CHSELR_CHSEL14_Msk


	)

988 
	#ADC_CHSELR_CHSEL13_Pos
 (13U)

	)

989 
	#ADC_CHSELR_CHSEL13_Msk
 (0x1U << 
ADC_CHSELR_CHSEL13_Pos
Ë

	)

990 
	#ADC_CHSELR_CHSEL13
 
ADC_CHSELR_CHSEL13_Msk


	)

991 
	#ADC_CHSELR_CHSEL12_Pos
 (12U)

	)

992 
	#ADC_CHSELR_CHSEL12_Msk
 (0x1U << 
ADC_CHSELR_CHSEL12_Pos
Ë

	)

993 
	#ADC_CHSELR_CHSEL12
 
ADC_CHSELR_CHSEL12_Msk


	)

994 
	#ADC_CHSELR_CHSEL11_Pos
 (11U)

	)

995 
	#ADC_CHSELR_CHSEL11_Msk
 (0x1U << 
ADC_CHSELR_CHSEL11_Pos
Ë

	)

996 
	#ADC_CHSELR_CHSEL11
 
ADC_CHSELR_CHSEL11_Msk


	)

997 
	#ADC_CHSELR_CHSEL10_Pos
 (10U)

	)

998 
	#ADC_CHSELR_CHSEL10_Msk
 (0x1U << 
ADC_CHSELR_CHSEL10_Pos
Ë

	)

999 
	#ADC_CHSELR_CHSEL10
 
ADC_CHSELR_CHSEL10_Msk


	)

1000 
	#ADC_CHSELR_CHSEL9_Pos
 (9U)

	)

1001 
	#ADC_CHSELR_CHSEL9_Msk
 (0x1U << 
ADC_CHSELR_CHSEL9_Pos
Ë

	)

1002 
	#ADC_CHSELR_CHSEL9
 
ADC_CHSELR_CHSEL9_Msk


	)

1003 
	#ADC_CHSELR_CHSEL8_Pos
 (8U)

	)

1004 
	#ADC_CHSELR_CHSEL8_Msk
 (0x1U << 
ADC_CHSELR_CHSEL8_Pos
Ë

	)

1005 
	#ADC_CHSELR_CHSEL8
 
ADC_CHSELR_CHSEL8_Msk


	)

1006 
	#ADC_CHSELR_CHSEL7_Pos
 (7U)

	)

1007 
	#ADC_CHSELR_CHSEL7_Msk
 (0x1U << 
ADC_CHSELR_CHSEL7_Pos
Ë

	)

1008 
	#ADC_CHSELR_CHSEL7
 
ADC_CHSELR_CHSEL7_Msk


	)

1009 
	#ADC_CHSELR_CHSEL6_Pos
 (6U)

	)

1010 
	#ADC_CHSELR_CHSEL6_Msk
 (0x1U << 
ADC_CHSELR_CHSEL6_Pos
Ë

	)

1011 
	#ADC_CHSELR_CHSEL6
 
ADC_CHSELR_CHSEL6_Msk


	)

1012 
	#ADC_CHSELR_CHSEL5_Pos
 (5U)

	)

1013 
	#ADC_CHSELR_CHSEL5_Msk
 (0x1U << 
ADC_CHSELR_CHSEL5_Pos
Ë

	)

1014 
	#ADC_CHSELR_CHSEL5
 
ADC_CHSELR_CHSEL5_Msk


	)

1015 
	#ADC_CHSELR_CHSEL4_Pos
 (4U)

	)

1016 
	#ADC_CHSELR_CHSEL4_Msk
 (0x1U << 
ADC_CHSELR_CHSEL4_Pos
Ë

	)

1017 
	#ADC_CHSELR_CHSEL4
 
ADC_CHSELR_CHSEL4_Msk


	)

1018 
	#ADC_CHSELR_CHSEL3_Pos
 (3U)

	)

1019 
	#ADC_CHSELR_CHSEL3_Msk
 (0x1U << 
ADC_CHSELR_CHSEL3_Pos
Ë

	)

1020 
	#ADC_CHSELR_CHSEL3
 
ADC_CHSELR_CHSEL3_Msk


	)

1021 
	#ADC_CHSELR_CHSEL2_Pos
 (2U)

	)

1022 
	#ADC_CHSELR_CHSEL2_Msk
 (0x1U << 
ADC_CHSELR_CHSEL2_Pos
Ë

	)

1023 
	#ADC_CHSELR_CHSEL2
 
ADC_CHSELR_CHSEL2_Msk


	)

1024 
	#ADC_CHSELR_CHSEL1_Pos
 (1U)

	)

1025 
	#ADC_CHSELR_CHSEL1_Msk
 (0x1U << 
ADC_CHSELR_CHSEL1_Pos
Ë

	)

1026 
	#ADC_CHSELR_CHSEL1
 
ADC_CHSELR_CHSEL1_Msk


	)

1027 
	#ADC_CHSELR_CHSEL0_Pos
 (0U)

	)

1028 
	#ADC_CHSELR_CHSEL0_Msk
 (0x1U << 
ADC_CHSELR_CHSEL0_Pos
Ë

	)

1029 
	#ADC_CHSELR_CHSEL0
 
ADC_CHSELR_CHSEL0_Msk


	)

1032 
	#ADC_DR_DATA_Pos
 (0U)

	)

1033 
	#ADC_DR_DATA_Msk
 (0xFFFFU << 
ADC_DR_DATA_Pos
Ë

	)

1034 
	#ADC_DR_DATA
 
ADC_DR_DATA_Msk


	)

1037 
	#ADC_CALFACT_CALFACT_Pos
 (0U)

	)

1038 
	#ADC_CALFACT_CALFACT_Msk
 (0x7FU << 
ADC_CALFACT_CALFACT_Pos
Ë

	)

1039 
	#ADC_CALFACT_CALFACT
 
ADC_CALFACT_CALFACT_Msk


	)

1042 
	#ADC_CCR_LFMEN_Pos
 (25U)

	)

1043 
	#ADC_CCR_LFMEN_Msk
 (0x1U << 
ADC_CCR_LFMEN_Pos
Ë

	)

1044 
	#ADC_CCR_LFMEN
 
ADC_CCR_LFMEN_Msk


	)

1045 
	#ADC_CCR_VLCDEN_Pos
 (24U)

	)

1046 
	#ADC_CCR_VLCDEN_Msk
 (0x1U << 
ADC_CCR_VLCDEN_Pos
Ë

	)

1047 
	#ADC_CCR_VLCDEN
 
ADC_CCR_VLCDEN_Msk


	)

1048 
	#ADC_CCR_TSEN_Pos
 (23U)

	)

1049 
	#ADC_CCR_TSEN_Msk
 (0x1U << 
ADC_CCR_TSEN_Pos
Ë

	)

1050 
	#ADC_CCR_TSEN
 
ADC_CCR_TSEN_Msk


	)

1051 
	#ADC_CCR_VREFEN_Pos
 (22U)

	)

1052 
	#ADC_CCR_VREFEN_Msk
 (0x1U << 
ADC_CCR_VREFEN_Pos
Ë

	)

1053 
	#ADC_CCR_VREFEN
 
ADC_CCR_VREFEN_Msk


	)

1054 
	#ADC_CCR_PRESC_Pos
 (18U)

	)

1055 
	#ADC_CCR_PRESC_Msk
 (0xFU << 
ADC_CCR_PRESC_Pos
Ë

	)

1056 
	#ADC_CCR_PRESC
 
ADC_CCR_PRESC_Msk


	)

1057 
	#ADC_CCR_PRESC_0
 (0x1U << 
ADC_CCR_PRESC_Pos
Ë

	)

1058 
	#ADC_CCR_PRESC_1
 (0x2U << 
ADC_CCR_PRESC_Pos
Ë

	)

1059 
	#ADC_CCR_PRESC_2
 (0x4U << 
ADC_CCR_PRESC_Pos
Ë

	)

1060 
	#ADC_CCR_PRESC_3
 (0x8U << 
ADC_CCR_PRESC_Pos
Ë

	)

1069 
	#COMP_CSR_COMP1EN_Pos
 (0U)

	)

1070 
	#COMP_CSR_COMP1EN_Msk
 (0x1U << 
COMP_CSR_COMP1EN_Pos
Ë

	)

1071 
	#COMP_CSR_COMP1EN
 
COMP_CSR_COMP1EN_Msk


	)

1072 
	#COMP_CSR_COMP1INNSEL_Pos
 (4U)

	)

1073 
	#COMP_CSR_COMP1INNSEL_Msk
 (0x3U << 
COMP_CSR_COMP1INNSEL_Pos
Ë

	)

1074 
	#COMP_CSR_COMP1INNSEL
 
COMP_CSR_COMP1INNSEL_Msk


	)

1075 
	#COMP_CSR_COMP1INNSEL_0
 (0x1U << 
COMP_CSR_COMP1INNSEL_Pos
Ë

	)

1076 
	#COMP_CSR_COMP1INNSEL_1
 (0x2U << 
COMP_CSR_COMP1INNSEL_Pos
Ë

	)

1077 
	#COMP_CSR_COMP1WM_Pos
 (8U)

	)

1078 
	#COMP_CSR_COMP1WM_Msk
 (0x1U << 
COMP_CSR_COMP1WM_Pos
Ë

	)

1079 
	#COMP_CSR_COMP1WM
 
COMP_CSR_COMP1WM_Msk


	)

1080 
	#COMP_CSR_COMP1LPTIM1IN1_Pos
 (12U)

	)

1081 
	#COMP_CSR_COMP1LPTIM1IN1_Msk
 (0x1U << 
COMP_CSR_COMP1LPTIM1IN1_Pos
Ë

	)

1082 
	#COMP_CSR_COMP1LPTIM1IN1
 
COMP_CSR_COMP1LPTIM1IN1_Msk


	)

1083 
	#COMP_CSR_COMP1POLARITY_Pos
 (15U)

	)

1084 
	#COMP_CSR_COMP1POLARITY_Msk
 (0x1U << 
COMP_CSR_COMP1POLARITY_Pos
Ë

	)

1085 
	#COMP_CSR_COMP1POLARITY
 
COMP_CSR_COMP1POLARITY_Msk


	)

1086 
	#COMP_CSR_COMP1VALUE_Pos
 (30U)

	)

1087 
	#COMP_CSR_COMP1VALUE_Msk
 (0x1U << 
COMP_CSR_COMP1VALUE_Pos
Ë

	)

1088 
	#COMP_CSR_COMP1VALUE
 
COMP_CSR_COMP1VALUE_Msk


	)

1089 
	#COMP_CSR_COMP1LOCK_Pos
 (31U)

	)

1090 
	#COMP_CSR_COMP1LOCK_Msk
 (0x1U << 
COMP_CSR_COMP1LOCK_Pos
Ë

	)

1091 
	#COMP_CSR_COMP1LOCK
 
COMP_CSR_COMP1LOCK_Msk


	)

1093 
	#COMP_CSR_COMP2EN_Pos
 (0U)

	)

1094 
	#COMP_CSR_COMP2EN_Msk
 (0x1U << 
COMP_CSR_COMP2EN_Pos
Ë

	)

1095 
	#COMP_CSR_COMP2EN
 
COMP_CSR_COMP2EN_Msk


	)

1096 
	#COMP_CSR_COMP2SPEED_Pos
 (3U)

	)

1097 
	#COMP_CSR_COMP2SPEED_Msk
 (0x1U << 
COMP_CSR_COMP2SPEED_Pos
Ë

	)

1098 
	#COMP_CSR_COMP2SPEED
 
COMP_CSR_COMP2SPEED_Msk


	)

1099 
	#COMP_CSR_COMP2INNSEL_Pos
 (4U)

	)

1100 
	#COMP_CSR_COMP2INNSEL_Msk
 (0x7U << 
COMP_CSR_COMP2INNSEL_Pos
Ë

	)

1101 
	#COMP_CSR_COMP2INNSEL
 
COMP_CSR_COMP2INNSEL_Msk


	)

1102 
	#COMP_CSR_COMP2INNSEL_0
 (0x1U << 
COMP_CSR_COMP2INNSEL_Pos
Ë

	)

1103 
	#COMP_CSR_COMP2INNSEL_1
 (0x2U << 
COMP_CSR_COMP2INNSEL_Pos
Ë

	)

1104 
	#COMP_CSR_COMP2INNSEL_2
 (0x4U << 
COMP_CSR_COMP2INNSEL_Pos
Ë

	)

1105 
	#COMP_CSR_COMP2INPSEL_Pos
 (8U)

	)

1106 
	#COMP_CSR_COMP2INPSEL_Msk
 (0x7U << 
COMP_CSR_COMP2INPSEL_Pos
Ë

	)

1107 
	#COMP_CSR_COMP2INPSEL
 
COMP_CSR_COMP2INPSEL_Msk


	)

1108 
	#COMP_CSR_COMP2INPSEL_0
 (0x1U << 
COMP_CSR_COMP2INPSEL_Pos
Ë

	)

1109 
	#COMP_CSR_COMP2INPSEL_1
 (0x2U << 
COMP_CSR_COMP2INPSEL_Pos
Ë

	)

1110 
	#COMP_CSR_COMP2INPSEL_2
 (0x4U << 
COMP_CSR_COMP2INPSEL_Pos
Ë

	)

1111 
	#COMP_CSR_COMP2LPTIM1IN2_Pos
 (12U)

	)

1112 
	#COMP_CSR_COMP2LPTIM1IN2_Msk
 (0x1U << 
COMP_CSR_COMP2LPTIM1IN2_Pos
Ë

	)

1113 
	#COMP_CSR_COMP2LPTIM1IN2
 
COMP_CSR_COMP2LPTIM1IN2_Msk


	)

1114 
	#COMP_CSR_COMP2LPTIM1IN1_Pos
 (13U)

	)

1115 
	#COMP_CSR_COMP2LPTIM1IN1_Msk
 (0x1U << 
COMP_CSR_COMP2LPTIM1IN1_Pos
Ë

	)

1116 
	#COMP_CSR_COMP2LPTIM1IN1
 
COMP_CSR_COMP2LPTIM1IN1_Msk


	)

1117 
	#COMP_CSR_COMP2POLARITY_Pos
 (15U)

	)

1118 
	#COMP_CSR_COMP2POLARITY_Msk
 (0x1U << 
COMP_CSR_COMP2POLARITY_Pos
Ë

	)

1119 
	#COMP_CSR_COMP2POLARITY
 
COMP_CSR_COMP2POLARITY_Msk


	)

1120 
	#COMP_CSR_COMP2VALUE_Pos
 (30U)

	)

1121 
	#COMP_CSR_COMP2VALUE_Msk
 (0x1U << 
COMP_CSR_COMP2VALUE_Pos
Ë

	)

1122 
	#COMP_CSR_COMP2VALUE
 
COMP_CSR_COMP2VALUE_Msk


	)

1123 
	#COMP_CSR_COMP2LOCK_Pos
 (31U)

	)

1124 
	#COMP_CSR_COMP2LOCK_Msk
 (0x1U << 
COMP_CSR_COMP2LOCK_Pos
Ë

	)

1125 
	#COMP_CSR_COMP2LOCK
 
COMP_CSR_COMP2LOCK_Msk


	)

1128 
	#COMP_CSR_COMPxEN_Pos
 (0U)

	)

1129 
	#COMP_CSR_COMPxEN_Msk
 (0x1U << 
COMP_CSR_COMPxEN_Pos
Ë

	)

1130 
	#COMP_CSR_COMPxEN
 
COMP_CSR_COMPxEN_Msk


	)

1131 
	#COMP_CSR_COMPxPOLARITY_Pos
 (15U)

	)

1132 
	#COMP_CSR_COMPxPOLARITY_Msk
 (0x1U << 
COMP_CSR_COMPxPOLARITY_Pos
Ë

	)

1133 
	#COMP_CSR_COMPxPOLARITY
 
COMP_CSR_COMPxPOLARITY_Msk


	)

1134 
	#COMP_CSR_COMPxOUTVALUE_Pos
 (30U)

	)

1135 
	#COMP_CSR_COMPxOUTVALUE_Msk
 (0x1U << 
COMP_CSR_COMPxOUTVALUE_Pos
Ë

	)

1136 
	#COMP_CSR_COMPxOUTVALUE
 
COMP_CSR_COMPxOUTVALUE_Msk


	)

1137 
	#COMP_CSR_COMPxLOCK_Pos
 (31U)

	)

1138 
	#COMP_CSR_COMPxLOCK_Msk
 (0x1U << 
COMP_CSR_COMPxLOCK_Pos
Ë

	)

1139 
	#COMP_CSR_COMPxLOCK
 
COMP_CSR_COMPxLOCK_Msk


	)

1142 
	#COMP_CSR_WINMODE
 
COMP_CSR_COMP1WM


	)

1150 
	#CRC_DR_DR_Pos
 (0U)

	)

1151 
	#CRC_DR_DR_Msk
 (0xFFFFFFFFU << 
CRC_DR_DR_Pos
Ë

	)

1152 
	#CRC_DR_DR
 
CRC_DR_DR_Msk


	)

1155 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFUË

	)

1158 
	#CRC_CR_RESET_Pos
 (0U)

	)

1159 
	#CRC_CR_RESET_Msk
 (0x1U << 
CRC_CR_RESET_Pos
Ë

	)

1160 
	#CRC_CR_RESET
 
CRC_CR_RESET_Msk


	)

1161 
	#CRC_CR_POLYSIZE_Pos
 (3U)

	)

1162 
	#CRC_CR_POLYSIZE_Msk
 (0x3U << 
CRC_CR_POLYSIZE_Pos
Ë

	)

1163 
	#CRC_CR_POLYSIZE
 
CRC_CR_POLYSIZE_Msk


	)

1164 
	#CRC_CR_POLYSIZE_0
 (0x1U << 
CRC_CR_POLYSIZE_Pos
Ë

	)

1165 
	#CRC_CR_POLYSIZE_1
 (0x2U << 
CRC_CR_POLYSIZE_Pos
Ë

	)

1166 
	#CRC_CR_REV_IN_Pos
 (5U)

	)

1167 
	#CRC_CR_REV_IN_Msk
 (0x3U << 
CRC_CR_REV_IN_Pos
Ë

	)

1168 
	#CRC_CR_REV_IN
 
CRC_CR_REV_IN_Msk


	)

1169 
	#CRC_CR_REV_IN_0
 (0x1U << 
CRC_CR_REV_IN_Pos
Ë

	)

1170 
	#CRC_CR_REV_IN_1
 (0x2U << 
CRC_CR_REV_IN_Pos
Ë

	)

1171 
	#CRC_CR_REV_OUT_Pos
 (7U)

	)

1172 
	#CRC_CR_REV_OUT_Msk
 (0x1U << 
CRC_CR_REV_OUT_Pos
Ë

	)

1173 
	#CRC_CR_REV_OUT
 
CRC_CR_REV_OUT_Msk


	)

1176 
	#CRC_INIT_INIT_Pos
 (0U)

	)

1177 
	#CRC_INIT_INIT_Msk
 (0xFFFFFFFFU << 
CRC_INIT_INIT_Pos
Ë

	)

1178 
	#CRC_INIT_INIT
 
CRC_INIT_INIT_Msk


	)

1181 
	#CRC_POL_POL_Pos
 (0U)

	)

1182 
	#CRC_POL_POL_Msk
 (0xFFFFFFFFU << 
CRC_POL_POL_Pos
Ë

	)

1183 
	#CRC_POL_POL
 
CRC_POL_POL_Msk


	)

1192 
	#CRS_CR_SYNCOKIE_Pos
 (0U)

	)

1193 
	#CRS_CR_SYNCOKIE_Msk
 (0x1U << 
CRS_CR_SYNCOKIE_Pos
Ë

	)

1194 
	#CRS_CR_SYNCOKIE
 
CRS_CR_SYNCOKIE_Msk


	)

1195 
	#CRS_CR_SYNCWARNIE_Pos
 (1U)

	)

1196 
	#CRS_CR_SYNCWARNIE_Msk
 (0x1U << 
CRS_CR_SYNCWARNIE_Pos
Ë

	)

1197 
	#CRS_CR_SYNCWARNIE
 
CRS_CR_SYNCWARNIE_Msk


	)

1198 
	#CRS_CR_ERRIE_Pos
 (2U)

	)

1199 
	#CRS_CR_ERRIE_Msk
 (0x1U << 
CRS_CR_ERRIE_Pos
Ë

	)

1200 
	#CRS_CR_ERRIE
 
CRS_CR_ERRIE_Msk


	)

1201 
	#CRS_CR_ESYNCIE_Pos
 (3U)

	)

1202 
	#CRS_CR_ESYNCIE_Msk
 (0x1U << 
CRS_CR_ESYNCIE_Pos
Ë

	)

1203 
	#CRS_CR_ESYNCIE
 
CRS_CR_ESYNCIE_Msk


	)

1204 
	#CRS_CR_CEN_Pos
 (5U)

	)

1205 
	#CRS_CR_CEN_Msk
 (0x1U << 
CRS_CR_CEN_Pos
Ë

	)

1206 
	#CRS_CR_CEN
 
CRS_CR_CEN_Msk


	)

1207 
	#CRS_CR_AUTOTRIMEN_Pos
 (6U)

	)

1208 
	#CRS_CR_AUTOTRIMEN_Msk
 (0x1U << 
CRS_CR_AUTOTRIMEN_Pos
Ë

	)

1209 
	#CRS_CR_AUTOTRIMEN
 
CRS_CR_AUTOTRIMEN_Msk


	)

1210 
	#CRS_CR_SWSYNC_Pos
 (7U)

	)

1211 
	#CRS_CR_SWSYNC_Msk
 (0x1U << 
CRS_CR_SWSYNC_Pos
Ë

	)

1212 
	#CRS_CR_SWSYNC
 
CRS_CR_SWSYNC_Msk


	)

1213 
	#CRS_CR_TRIM_Pos
 (8U)

	)

1214 
	#CRS_CR_TRIM_Msk
 (0x3FU << 
CRS_CR_TRIM_Pos
Ë

	)

1215 
	#CRS_CR_TRIM
 
CRS_CR_TRIM_Msk


	)

1218 
	#CRS_CFGR_RELOAD_Pos
 (0U)

	)

1219 
	#CRS_CFGR_RELOAD_Msk
 (0xFFFFU << 
CRS_CFGR_RELOAD_Pos
Ë

	)

1220 
	#CRS_CFGR_RELOAD
 
CRS_CFGR_RELOAD_Msk


	)

1221 
	#CRS_CFGR_FELIM_Pos
 (16U)

	)

1222 
	#CRS_CFGR_FELIM_Msk
 (0xFFU << 
CRS_CFGR_FELIM_Pos
Ë

	)

1223 
	#CRS_CFGR_FELIM
 
CRS_CFGR_FELIM_Msk


	)

1225 
	#CRS_CFGR_SYNCDIV_Pos
 (24U)

	)

1226 
	#CRS_CFGR_SYNCDIV_Msk
 (0x7U << 
CRS_CFGR_SYNCDIV_Pos
Ë

	)

1227 
	#CRS_CFGR_SYNCDIV
 
CRS_CFGR_SYNCDIV_Msk


	)

1228 
	#CRS_CFGR_SYNCDIV_0
 (0x1U << 
CRS_CFGR_SYNCDIV_Pos
Ë

	)

1229 
	#CRS_CFGR_SYNCDIV_1
 (0x2U << 
CRS_CFGR_SYNCDIV_Pos
Ë

	)

1230 
	#CRS_CFGR_SYNCDIV_2
 (0x4U << 
CRS_CFGR_SYNCDIV_Pos
Ë

	)

1232 
	#CRS_CFGR_SYNCSRC_Pos
 (28U)

	)

1233 
	#CRS_CFGR_SYNCSRC_Msk
 (0x3U << 
CRS_CFGR_SYNCSRC_Pos
Ë

	)

1234 
	#CRS_CFGR_SYNCSRC
 
CRS_CFGR_SYNCSRC_Msk


	)

1235 
	#CRS_CFGR_SYNCSRC_0
 (0x1U << 
CRS_CFGR_SYNCSRC_Pos
Ë

	)

1236 
	#CRS_CFGR_SYNCSRC_1
 (0x2U << 
CRS_CFGR_SYNCSRC_Pos
Ë

	)

1238 
	#CRS_CFGR_SYNCPOL_Pos
 (31U)

	)

1239 
	#CRS_CFGR_SYNCPOL_Msk
 (0x1U << 
CRS_CFGR_SYNCPOL_Pos
Ë

	)

1240 
	#CRS_CFGR_SYNCPOL
 
CRS_CFGR_SYNCPOL_Msk


	)

1243 
	#CRS_ISR_SYNCOKF_Pos
 (0U)

	)

1244 
	#CRS_ISR_SYNCOKF_Msk
 (0x1U << 
CRS_ISR_SYNCOKF_Pos
Ë

	)

1245 
	#CRS_ISR_SYNCOKF
 
CRS_ISR_SYNCOKF_Msk


	)

1246 
	#CRS_ISR_SYNCWARNF_Pos
 (1U)

	)

1247 
	#CRS_ISR_SYNCWARNF_Msk
 (0x1U << 
CRS_ISR_SYNCWARNF_Pos
Ë

	)

1248 
	#CRS_ISR_SYNCWARNF
 
CRS_ISR_SYNCWARNF_Msk


	)

1249 
	#CRS_ISR_ERRF_Pos
 (2U)

	)

1250 
	#CRS_ISR_ERRF_Msk
 (0x1U << 
CRS_ISR_ERRF_Pos
Ë

	)

1251 
	#CRS_ISR_ERRF
 
CRS_ISR_ERRF_Msk


	)

1252 
	#CRS_ISR_ESYNCF_Pos
 (3U)

	)

1253 
	#CRS_ISR_ESYNCF_Msk
 (0x1U << 
CRS_ISR_ESYNCF_Pos
Ë

	)

1254 
	#CRS_ISR_ESYNCF
 
CRS_ISR_ESYNCF_Msk


	)

1255 
	#CRS_ISR_SYNCERR_Pos
 (8U)

	)

1256 
	#CRS_ISR_SYNCERR_Msk
 (0x1U << 
CRS_ISR_SYNCERR_Pos
Ë

	)

1257 
	#CRS_ISR_SYNCERR
 
CRS_ISR_SYNCERR_Msk


	)

1258 
	#CRS_ISR_SYNCMISS_Pos
 (9U)

	)

1259 
	#CRS_ISR_SYNCMISS_Msk
 (0x1U << 
CRS_ISR_SYNCMISS_Pos
Ë

	)

1260 
	#CRS_ISR_SYNCMISS
 
CRS_ISR_SYNCMISS_Msk


	)

1261 
	#CRS_ISR_TRIMOVF_Pos
 (10U)

	)

1262 
	#CRS_ISR_TRIMOVF_Msk
 (0x1U << 
CRS_ISR_TRIMOVF_Pos
Ë

	)

1263 
	#CRS_ISR_TRIMOVF
 
CRS_ISR_TRIMOVF_Msk


	)

1264 
	#CRS_ISR_FEDIR_Pos
 (15U)

	)

1265 
	#CRS_ISR_FEDIR_Msk
 (0x1U << 
CRS_ISR_FEDIR_Pos
Ë

	)

1266 
	#CRS_ISR_FEDIR
 
CRS_ISR_FEDIR_Msk


	)

1267 
	#CRS_ISR_FECAP_Pos
 (16U)

	)

1268 
	#CRS_ISR_FECAP_Msk
 (0xFFFFU << 
CRS_ISR_FECAP_Pos
Ë

	)

1269 
	#CRS_ISR_FECAP
 
CRS_ISR_FECAP_Msk


	)

1272 
	#CRS_ICR_SYNCOKC_Pos
 (0U)

	)

1273 
	#CRS_ICR_SYNCOKC_Msk
 (0x1U << 
CRS_ICR_SYNCOKC_Pos
Ë

	)

1274 
	#CRS_ICR_SYNCOKC
 
CRS_ICR_SYNCOKC_Msk


	)

1275 
	#CRS_ICR_SYNCWARNC_Pos
 (1U)

	)

1276 
	#CRS_ICR_SYNCWARNC_Msk
 (0x1U << 
CRS_ICR_SYNCWARNC_Pos
Ë

	)

1277 
	#CRS_ICR_SYNCWARNC
 
CRS_ICR_SYNCWARNC_Msk


	)

1278 
	#CRS_ICR_ERRC_Pos
 (2U)

	)

1279 
	#CRS_ICR_ERRC_Msk
 (0x1U << 
CRS_ICR_ERRC_Pos
Ë

	)

1280 
	#CRS_ICR_ERRC
 
CRS_ICR_ERRC_Msk


	)

1281 
	#CRS_ICR_ESYNCC_Pos
 (3U)

	)

1282 
	#CRS_ICR_ESYNCC_Msk
 (0x1U << 
CRS_ICR_ESYNCC_Pos
Ë

	)

1283 
	#CRS_ICR_ESYNCC
 
CRS_ICR_ESYNCC_Msk


	)

1297 
	#DAC_CR_EN1_Pos
 (0U)

	)

1298 
	#DAC_CR_EN1_Msk
 (0x1U << 
DAC_CR_EN1_Pos
Ë

	)

1299 
	#DAC_CR_EN1
 
DAC_CR_EN1_Msk


	)

1300 
	#DAC_CR_BOFF1_Pos
 (1U)

	)

1301 
	#DAC_CR_BOFF1_Msk
 (0x1U << 
DAC_CR_BOFF1_Pos
Ë

	)

1302 
	#DAC_CR_BOFF1
 
DAC_CR_BOFF1_Msk


	)

1303 
	#DAC_CR_TEN1_Pos
 (2U)

	)

1304 
	#DAC_CR_TEN1_Msk
 (0x1U << 
DAC_CR_TEN1_Pos
Ë

	)

1305 
	#DAC_CR_TEN1
 
DAC_CR_TEN1_Msk


	)

1307 
	#DAC_CR_TSEL1_Pos
 (3U)

	)

1308 
	#DAC_CR_TSEL1_Msk
 (0x7U << 
DAC_CR_TSEL1_Pos
Ë

	)

1309 
	#DAC_CR_TSEL1
 
DAC_CR_TSEL1_Msk


	)

1310 
	#DAC_CR_TSEL1_0
 (0x1U << 
DAC_CR_TSEL1_Pos
Ë

	)

1311 
	#DAC_CR_TSEL1_1
 (0x2U << 
DAC_CR_TSEL1_Pos
Ë

	)

1312 
	#DAC_CR_TSEL1_2
 (0x4U << 
DAC_CR_TSEL1_Pos
Ë

	)

1314 
	#DAC_CR_WAVE1_Pos
 (6U)

	)

1315 
	#DAC_CR_WAVE1_Msk
 (0x3U << 
DAC_CR_WAVE1_Pos
Ë

	)

1316 
	#DAC_CR_WAVE1
 
DAC_CR_WAVE1_Msk


	)

1317 
	#DAC_CR_WAVE1_0
 (0x1U << 
DAC_CR_WAVE1_Pos
Ë

	)

1318 
	#DAC_CR_WAVE1_1
 (0x2U << 
DAC_CR_WAVE1_Pos
Ë

	)

1320 
	#DAC_CR_MAMP1_Pos
 (8U)

	)

1321 
	#DAC_CR_MAMP1_Msk
 (0xFU << 
DAC_CR_MAMP1_Pos
Ë

	)

1322 
	#DAC_CR_MAMP1
 
DAC_CR_MAMP1_Msk


	)

1323 
	#DAC_CR_MAMP1_0
 (0x1U << 
DAC_CR_MAMP1_Pos
Ë

	)

1324 
	#DAC_CR_MAMP1_1
 (0x2U << 
DAC_CR_MAMP1_Pos
Ë

	)

1325 
	#DAC_CR_MAMP1_2
 (0x4U << 
DAC_CR_MAMP1_Pos
Ë

	)

1326 
	#DAC_CR_MAMP1_3
 (0x8U << 
DAC_CR_MAMP1_Pos
Ë

	)

1328 
	#DAC_CR_DMAEN1_Pos
 (12U)

	)

1329 
	#DAC_CR_DMAEN1_Msk
 (0x1U << 
DAC_CR_DMAEN1_Pos
Ë

	)

1330 
	#DAC_CR_DMAEN1
 
DAC_CR_DMAEN1_Msk


	)

1331 
	#DAC_CR_DMAUDRIE1_Pos
 (13U)

	)

1332 
	#DAC_CR_DMAUDRIE1_Msk
 (0x1U << 
DAC_CR_DMAUDRIE1_Pos
Ë

	)

1333 
	#DAC_CR_DMAUDRIE1
 
DAC_CR_DMAUDRIE1_Msk


	)

1336 
	#DAC_SWTRIGR_SWTRIG1_Pos
 (0U)

	)

1337 
	#DAC_SWTRIGR_SWTRIG1_Msk
 (0x1U << 
DAC_SWTRIGR_SWTRIG1_Pos
Ë

	)

1338 
	#DAC_SWTRIGR_SWTRIG1
 
DAC_SWTRIGR_SWTRIG1_Msk


	)

1341 
	#DAC_DHR12R1_DACC1DHR_Pos
 (0U)

	)

1342 
	#DAC_DHR12R1_DACC1DHR_Msk
 (0xFFFU << 
DAC_DHR12R1_DACC1DHR_Pos
Ë

	)

1343 
	#DAC_DHR12R1_DACC1DHR
 
DAC_DHR12R1_DACC1DHR_Msk


	)

1346 
	#DAC_DHR12L1_DACC1DHR_Pos
 (4U)

	)

1347 
	#DAC_DHR12L1_DACC1DHR_Msk
 (0xFFFU << 
DAC_DHR12L1_DACC1DHR_Pos
Ë

	)

1348 
	#DAC_DHR12L1_DACC1DHR
 
DAC_DHR12L1_DACC1DHR_Msk


	)

1351 
	#DAC_DHR8R1_DACC1DHR_Pos
 (0U)

	)

1352 
	#DAC_DHR8R1_DACC1DHR_Msk
 (0xFFU << 
DAC_DHR8R1_DACC1DHR_Pos
Ë

	)

1353 
	#DAC_DHR8R1_DACC1DHR
 
DAC_DHR8R1_DACC1DHR_Msk


	)

1356 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x00000FFFUË

	)

1359 
	#DAC_SR_DMAUDR1_Pos
 (13U)

	)

1360 
	#DAC_SR_DMAUDR1_Msk
 (0x1U << 
DAC_SR_DMAUDR1_Pos
Ë

	)

1361 
	#DAC_SR_DMAUDR1
 
DAC_SR_DMAUDR1_Msk


	)

1370 
	#DBGMCU_IDCODE_DEV_ID_Pos
 (0U)

	)

1371 
	#DBGMCU_IDCODE_DEV_ID_Msk
 (0xFFFU << 
DBGMCU_IDCODE_DEV_ID_Pos
Ë

	)

1372 
	#DBGMCU_IDCODE_DEV_ID
 
DBGMCU_IDCODE_DEV_ID_Msk


	)

1374 
	#DBGMCU_IDCODE_REV_ID_Pos
 (16U)

	)

1375 
	#DBGMCU_IDCODE_REV_ID_Msk
 (0xFFFFU << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1376 
	#DBGMCU_IDCODE_REV_ID
 
DBGMCU_IDCODE_REV_ID_Msk


	)

1377 
	#DBGMCU_IDCODE_REV_ID_0
 (0x0001U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1378 
	#DBGMCU_IDCODE_REV_ID_1
 (0x0002U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1379 
	#DBGMCU_IDCODE_REV_ID_2
 (0x0004U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1380 
	#DBGMCU_IDCODE_REV_ID_3
 (0x0008U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1381 
	#DBGMCU_IDCODE_REV_ID_4
 (0x0010U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1382 
	#DBGMCU_IDCODE_REV_ID_5
 (0x0020U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1383 
	#DBGMCU_IDCODE_REV_ID_6
 (0x0040U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1384 
	#DBGMCU_IDCODE_REV_ID_7
 (0x0080U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1385 
	#DBGMCU_IDCODE_REV_ID_8
 (0x0100U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1386 
	#DBGMCU_IDCODE_REV_ID_9
 (0x0200U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1387 
	#DBGMCU_IDCODE_REV_ID_10
 (0x0400U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1388 
	#DBGMCU_IDCODE_REV_ID_11
 (0x0800U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1389 
	#DBGMCU_IDCODE_REV_ID_12
 (0x1000U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1390 
	#DBGMCU_IDCODE_REV_ID_13
 (0x2000U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1391 
	#DBGMCU_IDCODE_REV_ID_14
 (0x4000U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1392 
	#DBGMCU_IDCODE_REV_ID_15
 (0x8000U << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

1395 
	#DBGMCU_CR_DBG_Pos
 (0U)

	)

1396 
	#DBGMCU_CR_DBG_Msk
 (0x7U << 
DBGMCU_CR_DBG_Pos
Ë

	)

1397 
	#DBGMCU_CR_DBG
 
DBGMCU_CR_DBG_Msk


	)

1398 
	#DBGMCU_CR_DBG_SLEEP_Pos
 (0U)

	)

1399 
	#DBGMCU_CR_DBG_SLEEP_Msk
 (0x1U << 
DBGMCU_CR_DBG_SLEEP_Pos
Ë

	)

1400 
	#DBGMCU_CR_DBG_SLEEP
 
DBGMCU_CR_DBG_SLEEP_Msk


	)

1401 
	#DBGMCU_CR_DBG_STOP_Pos
 (1U)

	)

1402 
	#DBGMCU_CR_DBG_STOP_Msk
 (0x1U << 
DBGMCU_CR_DBG_STOP_Pos
Ë

	)

1403 
	#DBGMCU_CR_DBG_STOP
 
DBGMCU_CR_DBG_STOP_Msk


	)

1404 
	#DBGMCU_CR_DBG_STANDBY_Pos
 (2U)

	)

1405 
	#DBGMCU_CR_DBG_STANDBY_Msk
 (0x1U << 
DBGMCU_CR_DBG_STANDBY_Pos
Ë

	)

1406 
	#DBGMCU_CR_DBG_STANDBY
 
DBGMCU_CR_DBG_STANDBY_Msk


	)

1409 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos
 (0U)

	)

1410 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos
Ë

	)

1411 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 
DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk


	)

1412 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos
 (4U)

	)

1413 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos
Ë

	)

1414 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 
DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk


	)

1415 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos
 (10U)

	)

1416 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos
Ë

	)

1417 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 
DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk


	)

1418 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos
 (11U)

	)

1419 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos
Ë

	)

1420 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 
DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk


	)

1421 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos
 (12U)

	)

1422 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos
Ë

	)

1423 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk


	)

1424 
	#DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos
 (21U)

	)

1425 
	#DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos
Ë

	)

1426 
	#DBGMCU_APB1_FZ_DBG_I2C1_STOP
 
DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk


	)

1427 
	#DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos
 (22U)

	)

1428 
	#DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos
Ë

	)

1429 
	#DBGMCU_APB1_FZ_DBG_I2C2_STOP
 
DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk


	)

1430 
	#DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos
 (31U)

	)

1431 
	#DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk
 (0x1U << 
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos
Ë

	)

1432 
	#DBGMCU_APB1_FZ_DBG_LPTIMER_STOP
 
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk


	)

1434 
	#DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos
 (5U)

	)

1435 
	#DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk
 (0x1U << 
DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos
Ë

	)

1436 
	#DBGMCU_APB2_FZ_DBG_TIM22_STOP
 
DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk


	)

1437 
	#DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos
 (2U)

	)

1438 
	#DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk
 (0x1U << 
DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos
Ë

	)

1439 
	#DBGMCU_APB2_FZ_DBG_TIM21_STOP
 
DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk


	)

1448 
	#DMA_ISR_GIF1_Pos
 (0U)

	)

1449 
	#DMA_ISR_GIF1_Msk
 (0x1U << 
DMA_ISR_GIF1_Pos
Ë

	)

1450 
	#DMA_ISR_GIF1
 
DMA_ISR_GIF1_Msk


	)

1451 
	#DMA_ISR_TCIF1_Pos
 (1U)

	)

1452 
	#DMA_ISR_TCIF1_Msk
 (0x1U << 
DMA_ISR_TCIF1_Pos
Ë

	)

1453 
	#DMA_ISR_TCIF1
 
DMA_ISR_TCIF1_Msk


	)

1454 
	#DMA_ISR_HTIF1_Pos
 (2U)

	)

1455 
	#DMA_ISR_HTIF1_Msk
 (0x1U << 
DMA_ISR_HTIF1_Pos
Ë

	)

1456 
	#DMA_ISR_HTIF1
 
DMA_ISR_HTIF1_Msk


	)

1457 
	#DMA_ISR_TEIF1_Pos
 (3U)

	)

1458 
	#DMA_ISR_TEIF1_Msk
 (0x1U << 
DMA_ISR_TEIF1_Pos
Ë

	)

1459 
	#DMA_ISR_TEIF1
 
DMA_ISR_TEIF1_Msk


	)

1460 
	#DMA_ISR_GIF2_Pos
 (4U)

	)

1461 
	#DMA_ISR_GIF2_Msk
 (0x1U << 
DMA_ISR_GIF2_Pos
Ë

	)

1462 
	#DMA_ISR_GIF2
 
DMA_ISR_GIF2_Msk


	)

1463 
	#DMA_ISR_TCIF2_Pos
 (5U)

	)

1464 
	#DMA_ISR_TCIF2_Msk
 (0x1U << 
DMA_ISR_TCIF2_Pos
Ë

	)

1465 
	#DMA_ISR_TCIF2
 
DMA_ISR_TCIF2_Msk


	)

1466 
	#DMA_ISR_HTIF2_Pos
 (6U)

	)

1467 
	#DMA_ISR_HTIF2_Msk
 (0x1U << 
DMA_ISR_HTIF2_Pos
Ë

	)

1468 
	#DMA_ISR_HTIF2
 
DMA_ISR_HTIF2_Msk


	)

1469 
	#DMA_ISR_TEIF2_Pos
 (7U)

	)

1470 
	#DMA_ISR_TEIF2_Msk
 (0x1U << 
DMA_ISR_TEIF2_Pos
Ë

	)

1471 
	#DMA_ISR_TEIF2
 
DMA_ISR_TEIF2_Msk


	)

1472 
	#DMA_ISR_GIF3_Pos
 (8U)

	)

1473 
	#DMA_ISR_GIF3_Msk
 (0x1U << 
DMA_ISR_GIF3_Pos
Ë

	)

1474 
	#DMA_ISR_GIF3
 
DMA_ISR_GIF3_Msk


	)

1475 
	#DMA_ISR_TCIF3_Pos
 (9U)

	)

1476 
	#DMA_ISR_TCIF3_Msk
 (0x1U << 
DMA_ISR_TCIF3_Pos
Ë

	)

1477 
	#DMA_ISR_TCIF3
 
DMA_ISR_TCIF3_Msk


	)

1478 
	#DMA_ISR_HTIF3_Pos
 (10U)

	)

1479 
	#DMA_ISR_HTIF3_Msk
 (0x1U << 
DMA_ISR_HTIF3_Pos
Ë

	)

1480 
	#DMA_ISR_HTIF3
 
DMA_ISR_HTIF3_Msk


	)

1481 
	#DMA_ISR_TEIF3_Pos
 (11U)

	)

1482 
	#DMA_ISR_TEIF3_Msk
 (0x1U << 
DMA_ISR_TEIF3_Pos
Ë

	)

1483 
	#DMA_ISR_TEIF3
 
DMA_ISR_TEIF3_Msk


	)

1484 
	#DMA_ISR_GIF4_Pos
 (12U)

	)

1485 
	#DMA_ISR_GIF4_Msk
 (0x1U << 
DMA_ISR_GIF4_Pos
Ë

	)

1486 
	#DMA_ISR_GIF4
 
DMA_ISR_GIF4_Msk


	)

1487 
	#DMA_ISR_TCIF4_Pos
 (13U)

	)

1488 
	#DMA_ISR_TCIF4_Msk
 (0x1U << 
DMA_ISR_TCIF4_Pos
Ë

	)

1489 
	#DMA_ISR_TCIF4
 
DMA_ISR_TCIF4_Msk


	)

1490 
	#DMA_ISR_HTIF4_Pos
 (14U)

	)

1491 
	#DMA_ISR_HTIF4_Msk
 (0x1U << 
DMA_ISR_HTIF4_Pos
Ë

	)

1492 
	#DMA_ISR_HTIF4
 
DMA_ISR_HTIF4_Msk


	)

1493 
	#DMA_ISR_TEIF4_Pos
 (15U)

	)

1494 
	#DMA_ISR_TEIF4_Msk
 (0x1U << 
DMA_ISR_TEIF4_Pos
Ë

	)

1495 
	#DMA_ISR_TEIF4
 
DMA_ISR_TEIF4_Msk


	)

1496 
	#DMA_ISR_GIF5_Pos
 (16U)

	)

1497 
	#DMA_ISR_GIF5_Msk
 (0x1U << 
DMA_ISR_GIF5_Pos
Ë

	)

1498 
	#DMA_ISR_GIF5
 
DMA_ISR_GIF5_Msk


	)

1499 
	#DMA_ISR_TCIF5_Pos
 (17U)

	)

1500 
	#DMA_ISR_TCIF5_Msk
 (0x1U << 
DMA_ISR_TCIF5_Pos
Ë

	)

1501 
	#DMA_ISR_TCIF5
 
DMA_ISR_TCIF5_Msk


	)

1502 
	#DMA_ISR_HTIF5_Pos
 (18U)

	)

1503 
	#DMA_ISR_HTIF5_Msk
 (0x1U << 
DMA_ISR_HTIF5_Pos
Ë

	)

1504 
	#DMA_ISR_HTIF5
 
DMA_ISR_HTIF5_Msk


	)

1505 
	#DMA_ISR_TEIF5_Pos
 (19U)

	)

1506 
	#DMA_ISR_TEIF5_Msk
 (0x1U << 
DMA_ISR_TEIF5_Pos
Ë

	)

1507 
	#DMA_ISR_TEIF5
 
DMA_ISR_TEIF5_Msk


	)

1508 
	#DMA_ISR_GIF6_Pos
 (20U)

	)

1509 
	#DMA_ISR_GIF6_Msk
 (0x1U << 
DMA_ISR_GIF6_Pos
Ë

	)

1510 
	#DMA_ISR_GIF6
 
DMA_ISR_GIF6_Msk


	)

1511 
	#DMA_ISR_TCIF6_Pos
 (21U)

	)

1512 
	#DMA_ISR_TCIF6_Msk
 (0x1U << 
DMA_ISR_TCIF6_Pos
Ë

	)

1513 
	#DMA_ISR_TCIF6
 
DMA_ISR_TCIF6_Msk


	)

1514 
	#DMA_ISR_HTIF6_Pos
 (22U)

	)

1515 
	#DMA_ISR_HTIF6_Msk
 (0x1U << 
DMA_ISR_HTIF6_Pos
Ë

	)

1516 
	#DMA_ISR_HTIF6
 
DMA_ISR_HTIF6_Msk


	)

1517 
	#DMA_ISR_TEIF6_Pos
 (23U)

	)

1518 
	#DMA_ISR_TEIF6_Msk
 (0x1U << 
DMA_ISR_TEIF6_Pos
Ë

	)

1519 
	#DMA_ISR_TEIF6
 
DMA_ISR_TEIF6_Msk


	)

1520 
	#DMA_ISR_GIF7_Pos
 (24U)

	)

1521 
	#DMA_ISR_GIF7_Msk
 (0x1U << 
DMA_ISR_GIF7_Pos
Ë

	)

1522 
	#DMA_ISR_GIF7
 
DMA_ISR_GIF7_Msk


	)

1523 
	#DMA_ISR_TCIF7_Pos
 (25U)

	)

1524 
	#DMA_ISR_TCIF7_Msk
 (0x1U << 
DMA_ISR_TCIF7_Pos
Ë

	)

1525 
	#DMA_ISR_TCIF7
 
DMA_ISR_TCIF7_Msk


	)

1526 
	#DMA_ISR_HTIF7_Pos
 (26U)

	)

1527 
	#DMA_ISR_HTIF7_Msk
 (0x1U << 
DMA_ISR_HTIF7_Pos
Ë

	)

1528 
	#DMA_ISR_HTIF7
 
DMA_ISR_HTIF7_Msk


	)

1529 
	#DMA_ISR_TEIF7_Pos
 (27U)

	)

1530 
	#DMA_ISR_TEIF7_Msk
 (0x1U << 
DMA_ISR_TEIF7_Pos
Ë

	)

1531 
	#DMA_ISR_TEIF7
 
DMA_ISR_TEIF7_Msk


	)

1534 
	#DMA_IFCR_CGIF1_Pos
 (0U)

	)

1535 
	#DMA_IFCR_CGIF1_Msk
 (0x1U << 
DMA_IFCR_CGIF1_Pos
Ë

	)

1536 
	#DMA_IFCR_CGIF1
 
DMA_IFCR_CGIF1_Msk


	)

1537 
	#DMA_IFCR_CTCIF1_Pos
 (1U)

	)

1538 
	#DMA_IFCR_CTCIF1_Msk
 (0x1U << 
DMA_IFCR_CTCIF1_Pos
Ë

	)

1539 
	#DMA_IFCR_CTCIF1
 
DMA_IFCR_CTCIF1_Msk


	)

1540 
	#DMA_IFCR_CHTIF1_Pos
 (2U)

	)

1541 
	#DMA_IFCR_CHTIF1_Msk
 (0x1U << 
DMA_IFCR_CHTIF1_Pos
Ë

	)

1542 
	#DMA_IFCR_CHTIF1
 
DMA_IFCR_CHTIF1_Msk


	)

1543 
	#DMA_IFCR_CTEIF1_Pos
 (3U)

	)

1544 
	#DMA_IFCR_CTEIF1_Msk
 (0x1U << 
DMA_IFCR_CTEIF1_Pos
Ë

	)

1545 
	#DMA_IFCR_CTEIF1
 
DMA_IFCR_CTEIF1_Msk


	)

1546 
	#DMA_IFCR_CGIF2_Pos
 (4U)

	)

1547 
	#DMA_IFCR_CGIF2_Msk
 (0x1U << 
DMA_IFCR_CGIF2_Pos
Ë

	)

1548 
	#DMA_IFCR_CGIF2
 
DMA_IFCR_CGIF2_Msk


	)

1549 
	#DMA_IFCR_CTCIF2_Pos
 (5U)

	)

1550 
	#DMA_IFCR_CTCIF2_Msk
 (0x1U << 
DMA_IFCR_CTCIF2_Pos
Ë

	)

1551 
	#DMA_IFCR_CTCIF2
 
DMA_IFCR_CTCIF2_Msk


	)

1552 
	#DMA_IFCR_CHTIF2_Pos
 (6U)

	)

1553 
	#DMA_IFCR_CHTIF2_Msk
 (0x1U << 
DMA_IFCR_CHTIF2_Pos
Ë

	)

1554 
	#DMA_IFCR_CHTIF2
 
DMA_IFCR_CHTIF2_Msk


	)

1555 
	#DMA_IFCR_CTEIF2_Pos
 (7U)

	)

1556 
	#DMA_IFCR_CTEIF2_Msk
 (0x1U << 
DMA_IFCR_CTEIF2_Pos
Ë

	)

1557 
	#DMA_IFCR_CTEIF2
 
DMA_IFCR_CTEIF2_Msk


	)

1558 
	#DMA_IFCR_CGIF3_Pos
 (8U)

	)

1559 
	#DMA_IFCR_CGIF3_Msk
 (0x1U << 
DMA_IFCR_CGIF3_Pos
Ë

	)

1560 
	#DMA_IFCR_CGIF3
 
DMA_IFCR_CGIF3_Msk


	)

1561 
	#DMA_IFCR_CTCIF3_Pos
 (9U)

	)

1562 
	#DMA_IFCR_CTCIF3_Msk
 (0x1U << 
DMA_IFCR_CTCIF3_Pos
Ë

	)

1563 
	#DMA_IFCR_CTCIF3
 
DMA_IFCR_CTCIF3_Msk


	)

1564 
	#DMA_IFCR_CHTIF3_Pos
 (10U)

	)

1565 
	#DMA_IFCR_CHTIF3_Msk
 (0x1U << 
DMA_IFCR_CHTIF3_Pos
Ë

	)

1566 
	#DMA_IFCR_CHTIF3
 
DMA_IFCR_CHTIF3_Msk


	)

1567 
	#DMA_IFCR_CTEIF3_Pos
 (11U)

	)

1568 
	#DMA_IFCR_CTEIF3_Msk
 (0x1U << 
DMA_IFCR_CTEIF3_Pos
Ë

	)

1569 
	#DMA_IFCR_CTEIF3
 
DMA_IFCR_CTEIF3_Msk


	)

1570 
	#DMA_IFCR_CGIF4_Pos
 (12U)

	)

1571 
	#DMA_IFCR_CGIF4_Msk
 (0x1U << 
DMA_IFCR_CGIF4_Pos
Ë

	)

1572 
	#DMA_IFCR_CGIF4
 
DMA_IFCR_CGIF4_Msk


	)

1573 
	#DMA_IFCR_CTCIF4_Pos
 (13U)

	)

1574 
	#DMA_IFCR_CTCIF4_Msk
 (0x1U << 
DMA_IFCR_CTCIF4_Pos
Ë

	)

1575 
	#DMA_IFCR_CTCIF4
 
DMA_IFCR_CTCIF4_Msk


	)

1576 
	#DMA_IFCR_CHTIF4_Pos
 (14U)

	)

1577 
	#DMA_IFCR_CHTIF4_Msk
 (0x1U << 
DMA_IFCR_CHTIF4_Pos
Ë

	)

1578 
	#DMA_IFCR_CHTIF4
 
DMA_IFCR_CHTIF4_Msk


	)

1579 
	#DMA_IFCR_CTEIF4_Pos
 (15U)

	)

1580 
	#DMA_IFCR_CTEIF4_Msk
 (0x1U << 
DMA_IFCR_CTEIF4_Pos
Ë

	)

1581 
	#DMA_IFCR_CTEIF4
 
DMA_IFCR_CTEIF4_Msk


	)

1582 
	#DMA_IFCR_CGIF5_Pos
 (16U)

	)

1583 
	#DMA_IFCR_CGIF5_Msk
 (0x1U << 
DMA_IFCR_CGIF5_Pos
Ë

	)

1584 
	#DMA_IFCR_CGIF5
 
DMA_IFCR_CGIF5_Msk


	)

1585 
	#DMA_IFCR_CTCIF5_Pos
 (17U)

	)

1586 
	#DMA_IFCR_CTCIF5_Msk
 (0x1U << 
DMA_IFCR_CTCIF5_Pos
Ë

	)

1587 
	#DMA_IFCR_CTCIF5
 
DMA_IFCR_CTCIF5_Msk


	)

1588 
	#DMA_IFCR_CHTIF5_Pos
 (18U)

	)

1589 
	#DMA_IFCR_CHTIF5_Msk
 (0x1U << 
DMA_IFCR_CHTIF5_Pos
Ë

	)

1590 
	#DMA_IFCR_CHTIF5
 
DMA_IFCR_CHTIF5_Msk


	)

1591 
	#DMA_IFCR_CTEIF5_Pos
 (19U)

	)

1592 
	#DMA_IFCR_CTEIF5_Msk
 (0x1U << 
DMA_IFCR_CTEIF5_Pos
Ë

	)

1593 
	#DMA_IFCR_CTEIF5
 
DMA_IFCR_CTEIF5_Msk


	)

1594 
	#DMA_IFCR_CGIF6_Pos
 (20U)

	)

1595 
	#DMA_IFCR_CGIF6_Msk
 (0x1U << 
DMA_IFCR_CGIF6_Pos
Ë

	)

1596 
	#DMA_IFCR_CGIF6
 
DMA_IFCR_CGIF6_Msk


	)

1597 
	#DMA_IFCR_CTCIF6_Pos
 (21U)

	)

1598 
	#DMA_IFCR_CTCIF6_Msk
 (0x1U << 
DMA_IFCR_CTCIF6_Pos
Ë

	)

1599 
	#DMA_IFCR_CTCIF6
 
DMA_IFCR_CTCIF6_Msk


	)

1600 
	#DMA_IFCR_CHTIF6_Pos
 (22U)

	)

1601 
	#DMA_IFCR_CHTIF6_Msk
 (0x1U << 
DMA_IFCR_CHTIF6_Pos
Ë

	)

1602 
	#DMA_IFCR_CHTIF6
 
DMA_IFCR_CHTIF6_Msk


	)

1603 
	#DMA_IFCR_CTEIF6_Pos
 (23U)

	)

1604 
	#DMA_IFCR_CTEIF6_Msk
 (0x1U << 
DMA_IFCR_CTEIF6_Pos
Ë

	)

1605 
	#DMA_IFCR_CTEIF6
 
DMA_IFCR_CTEIF6_Msk


	)

1606 
	#DMA_IFCR_CGIF7_Pos
 (24U)

	)

1607 
	#DMA_IFCR_CGIF7_Msk
 (0x1U << 
DMA_IFCR_CGIF7_Pos
Ë

	)

1608 
	#DMA_IFCR_CGIF7
 
DMA_IFCR_CGIF7_Msk


	)

1609 
	#DMA_IFCR_CTCIF7_Pos
 (25U)

	)

1610 
	#DMA_IFCR_CTCIF7_Msk
 (0x1U << 
DMA_IFCR_CTCIF7_Pos
Ë

	)

1611 
	#DMA_IFCR_CTCIF7
 
DMA_IFCR_CTCIF7_Msk


	)

1612 
	#DMA_IFCR_CHTIF7_Pos
 (26U)

	)

1613 
	#DMA_IFCR_CHTIF7_Msk
 (0x1U << 
DMA_IFCR_CHTIF7_Pos
Ë

	)

1614 
	#DMA_IFCR_CHTIF7
 
DMA_IFCR_CHTIF7_Msk


	)

1615 
	#DMA_IFCR_CTEIF7_Pos
 (27U)

	)

1616 
	#DMA_IFCR_CTEIF7_Msk
 (0x1U << 
DMA_IFCR_CTEIF7_Pos
Ë

	)

1617 
	#DMA_IFCR_CTEIF7
 
DMA_IFCR_CTEIF7_Msk


	)

1620 
	#DMA_CCR_EN_Pos
 (0U)

	)

1621 
	#DMA_CCR_EN_Msk
 (0x1U << 
DMA_CCR_EN_Pos
Ë

	)

1622 
	#DMA_CCR_EN
 
DMA_CCR_EN_Msk


	)

1623 
	#DMA_CCR_TCIE_Pos
 (1U)

	)

1624 
	#DMA_CCR_TCIE_Msk
 (0x1U << 
DMA_CCR_TCIE_Pos
Ë

	)

1625 
	#DMA_CCR_TCIE
 
DMA_CCR_TCIE_Msk


	)

1626 
	#DMA_CCR_HTIE_Pos
 (2U)

	)

1627 
	#DMA_CCR_HTIE_Msk
 (0x1U << 
DMA_CCR_HTIE_Pos
Ë

	)

1628 
	#DMA_CCR_HTIE
 
DMA_CCR_HTIE_Msk


	)

1629 
	#DMA_CCR_TEIE_Pos
 (3U)

	)

1630 
	#DMA_CCR_TEIE_Msk
 (0x1U << 
DMA_CCR_TEIE_Pos
Ë

	)

1631 
	#DMA_CCR_TEIE
 
DMA_CCR_TEIE_Msk


	)

1632 
	#DMA_CCR_DIR_Pos
 (4U)

	)

1633 
	#DMA_CCR_DIR_Msk
 (0x1U << 
DMA_CCR_DIR_Pos
Ë

	)

1634 
	#DMA_CCR_DIR
 
DMA_CCR_DIR_Msk


	)

1635 
	#DMA_CCR_CIRC_Pos
 (5U)

	)

1636 
	#DMA_CCR_CIRC_Msk
 (0x1U << 
DMA_CCR_CIRC_Pos
Ë

	)

1637 
	#DMA_CCR_CIRC
 
DMA_CCR_CIRC_Msk


	)

1638 
	#DMA_CCR_PINC_Pos
 (6U)

	)

1639 
	#DMA_CCR_PINC_Msk
 (0x1U << 
DMA_CCR_PINC_Pos
Ë

	)

1640 
	#DMA_CCR_PINC
 
DMA_CCR_PINC_Msk


	)

1641 
	#DMA_CCR_MINC_Pos
 (7U)

	)

1642 
	#DMA_CCR_MINC_Msk
 (0x1U << 
DMA_CCR_MINC_Pos
Ë

	)

1643 
	#DMA_CCR_MINC
 
DMA_CCR_MINC_Msk


	)

1645 
	#DMA_CCR_PSIZE_Pos
 (8U)

	)

1646 
	#DMA_CCR_PSIZE_Msk
 (0x3U << 
DMA_CCR_PSIZE_Pos
Ë

	)

1647 
	#DMA_CCR_PSIZE
 
DMA_CCR_PSIZE_Msk


	)

1648 
	#DMA_CCR_PSIZE_0
 (0x1U << 
DMA_CCR_PSIZE_Pos
Ë

	)

1649 
	#DMA_CCR_PSIZE_1
 (0x2U << 
DMA_CCR_PSIZE_Pos
Ë

	)

1651 
	#DMA_CCR_MSIZE_Pos
 (10U)

	)

1652 
	#DMA_CCR_MSIZE_Msk
 (0x3U << 
DMA_CCR_MSIZE_Pos
Ë

	)

1653 
	#DMA_CCR_MSIZE
 
DMA_CCR_MSIZE_Msk


	)

1654 
	#DMA_CCR_MSIZE_0
 (0x1U << 
DMA_CCR_MSIZE_Pos
Ë

	)

1655 
	#DMA_CCR_MSIZE_1
 (0x2U << 
DMA_CCR_MSIZE_Pos
Ë

	)

1657 
	#DMA_CCR_PL_Pos
 (12U)

	)

1658 
	#DMA_CCR_PL_Msk
 (0x3U << 
DMA_CCR_PL_Pos
Ë

	)

1659 
	#DMA_CCR_PL
 
DMA_CCR_PL_Msk


	)

1660 
	#DMA_CCR_PL_0
 (0x1U << 
DMA_CCR_PL_Pos
Ë

	)

1661 
	#DMA_CCR_PL_1
 (0x2U << 
DMA_CCR_PL_Pos
Ë

	)

1663 
	#DMA_CCR_MEM2MEM_Pos
 (14U)

	)

1664 
	#DMA_CCR_MEM2MEM_Msk
 (0x1U << 
DMA_CCR_MEM2MEM_Pos
Ë

	)

1665 
	#DMA_CCR_MEM2MEM
 
DMA_CCR_MEM2MEM_Msk


	)

1668 
	#DMA_CNDTR_NDT_Pos
 (0U)

	)

1669 
	#DMA_CNDTR_NDT_Msk
 (0xFFFFU << 
DMA_CNDTR_NDT_Pos
Ë

	)

1670 
	#DMA_CNDTR_NDT
 
DMA_CNDTR_NDT_Msk


	)

1673 
	#DMA_CPAR_PA_Pos
 (0U)

	)

1674 
	#DMA_CPAR_PA_Msk
 (0xFFFFFFFFU << 
DMA_CPAR_PA_Pos
Ë

	)

1675 
	#DMA_CPAR_PA
 
DMA_CPAR_PA_Msk


	)

1678 
	#DMA_CMAR_MA_Pos
 (0U)

	)

1679 
	#DMA_CMAR_MA_Msk
 (0xFFFFFFFFU << 
DMA_CMAR_MA_Pos
Ë

	)

1680 
	#DMA_CMAR_MA
 
DMA_CMAR_MA_Msk


	)

1684 
	#DMA_CSELR_C1S_Pos
 (0U)

	)

1685 
	#DMA_CSELR_C1S_Msk
 (0xFU << 
DMA_CSELR_C1S_Pos
Ë

	)

1686 
	#DMA_CSELR_C1S
 
DMA_CSELR_C1S_Msk


	)

1687 
	#DMA_CSELR_C2S_Pos
 (4U)

	)

1688 
	#DMA_CSELR_C2S_Msk
 (0xFU << 
DMA_CSELR_C2S_Pos
Ë

	)

1689 
	#DMA_CSELR_C2S
 
DMA_CSELR_C2S_Msk


	)

1690 
	#DMA_CSELR_C3S_Pos
 (8U)

	)

1691 
	#DMA_CSELR_C3S_Msk
 (0xFU << 
DMA_CSELR_C3S_Pos
Ë

	)

1692 
	#DMA_CSELR_C3S
 
DMA_CSELR_C3S_Msk


	)

1693 
	#DMA_CSELR_C4S_Pos
 (12U)

	)

1694 
	#DMA_CSELR_C4S_Msk
 (0xFU << 
DMA_CSELR_C4S_Pos
Ë

	)

1695 
	#DMA_CSELR_C4S
 
DMA_CSELR_C4S_Msk


	)

1696 
	#DMA_CSELR_C5S_Pos
 (16U)

	)

1697 
	#DMA_CSELR_C5S_Msk
 (0xFU << 
DMA_CSELR_C5S_Pos
Ë

	)

1698 
	#DMA_CSELR_C5S
 
DMA_CSELR_C5S_Msk


	)

1699 
	#DMA_CSELR_C6S_Pos
 (20U)

	)

1700 
	#DMA_CSELR_C6S_Msk
 (0xFU << 
DMA_CSELR_C6S_Pos
Ë

	)

1701 
	#DMA_CSELR_C6S
 
DMA_CSELR_C6S_Msk


	)

1702 
	#DMA_CSELR_C7S_Pos
 (24U)

	)

1703 
	#DMA_CSELR_C7S_Msk
 (0xFU << 
DMA_CSELR_C7S_Pos
Ë

	)

1704 
	#DMA_CSELR_C7S
 
DMA_CSELR_C7S_Msk


	)

1713 
	#EXTI_IMR_IM0_Pos
 (0U)

	)

1714 
	#EXTI_IMR_IM0_Msk
 (0x1U << 
EXTI_IMR_IM0_Pos
Ë

	)

1715 
	#EXTI_IMR_IM0
 
EXTI_IMR_IM0_Msk


	)

1716 
	#EXTI_IMR_IM1_Pos
 (1U)

	)

1717 
	#EXTI_IMR_IM1_Msk
 (0x1U << 
EXTI_IMR_IM1_Pos
Ë

	)

1718 
	#EXTI_IMR_IM1
 
EXTI_IMR_IM1_Msk


	)

1719 
	#EXTI_IMR_IM2_Pos
 (2U)

	)

1720 
	#EXTI_IMR_IM2_Msk
 (0x1U << 
EXTI_IMR_IM2_Pos
Ë

	)

1721 
	#EXTI_IMR_IM2
 
EXTI_IMR_IM2_Msk


	)

1722 
	#EXTI_IMR_IM3_Pos
 (3U)

	)

1723 
	#EXTI_IMR_IM3_Msk
 (0x1U << 
EXTI_IMR_IM3_Pos
Ë

	)

1724 
	#EXTI_IMR_IM3
 
EXTI_IMR_IM3_Msk


	)

1725 
	#EXTI_IMR_IM4_Pos
 (4U)

	)

1726 
	#EXTI_IMR_IM4_Msk
 (0x1U << 
EXTI_IMR_IM4_Pos
Ë

	)

1727 
	#EXTI_IMR_IM4
 
EXTI_IMR_IM4_Msk


	)

1728 
	#EXTI_IMR_IM5_Pos
 (5U)

	)

1729 
	#EXTI_IMR_IM5_Msk
 (0x1U << 
EXTI_IMR_IM5_Pos
Ë

	)

1730 
	#EXTI_IMR_IM5
 
EXTI_IMR_IM5_Msk


	)

1731 
	#EXTI_IMR_IM6_Pos
 (6U)

	)

1732 
	#EXTI_IMR_IM6_Msk
 (0x1U << 
EXTI_IMR_IM6_Pos
Ë

	)

1733 
	#EXTI_IMR_IM6
 
EXTI_IMR_IM6_Msk


	)

1734 
	#EXTI_IMR_IM7_Pos
 (7U)

	)

1735 
	#EXTI_IMR_IM7_Msk
 (0x1U << 
EXTI_IMR_IM7_Pos
Ë

	)

1736 
	#EXTI_IMR_IM7
 
EXTI_IMR_IM7_Msk


	)

1737 
	#EXTI_IMR_IM8_Pos
 (8U)

	)

1738 
	#EXTI_IMR_IM8_Msk
 (0x1U << 
EXTI_IMR_IM8_Pos
Ë

	)

1739 
	#EXTI_IMR_IM8
 
EXTI_IMR_IM8_Msk


	)

1740 
	#EXTI_IMR_IM9_Pos
 (9U)

	)

1741 
	#EXTI_IMR_IM9_Msk
 (0x1U << 
EXTI_IMR_IM9_Pos
Ë

	)

1742 
	#EXTI_IMR_IM9
 
EXTI_IMR_IM9_Msk


	)

1743 
	#EXTI_IMR_IM10_Pos
 (10U)

	)

1744 
	#EXTI_IMR_IM10_Msk
 (0x1U << 
EXTI_IMR_IM10_Pos
Ë

	)

1745 
	#EXTI_IMR_IM10
 
EXTI_IMR_IM10_Msk


	)

1746 
	#EXTI_IMR_IM11_Pos
 (11U)

	)

1747 
	#EXTI_IMR_IM11_Msk
 (0x1U << 
EXTI_IMR_IM11_Pos
Ë

	)

1748 
	#EXTI_IMR_IM11
 
EXTI_IMR_IM11_Msk


	)

1749 
	#EXTI_IMR_IM12_Pos
 (12U)

	)

1750 
	#EXTI_IMR_IM12_Msk
 (0x1U << 
EXTI_IMR_IM12_Pos
Ë

	)

1751 
	#EXTI_IMR_IM12
 
EXTI_IMR_IM12_Msk


	)

1752 
	#EXTI_IMR_IM13_Pos
 (13U)

	)

1753 
	#EXTI_IMR_IM13_Msk
 (0x1U << 
EXTI_IMR_IM13_Pos
Ë

	)

1754 
	#EXTI_IMR_IM13
 
EXTI_IMR_IM13_Msk


	)

1755 
	#EXTI_IMR_IM14_Pos
 (14U)

	)

1756 
	#EXTI_IMR_IM14_Msk
 (0x1U << 
EXTI_IMR_IM14_Pos
Ë

	)

1757 
	#EXTI_IMR_IM14
 
EXTI_IMR_IM14_Msk


	)

1758 
	#EXTI_IMR_IM15_Pos
 (15U)

	)

1759 
	#EXTI_IMR_IM15_Msk
 (0x1U << 
EXTI_IMR_IM15_Pos
Ë

	)

1760 
	#EXTI_IMR_IM15
 
EXTI_IMR_IM15_Msk


	)

1761 
	#EXTI_IMR_IM16_Pos
 (16U)

	)

1762 
	#EXTI_IMR_IM16_Msk
 (0x1U << 
EXTI_IMR_IM16_Pos
Ë

	)

1763 
	#EXTI_IMR_IM16
 
EXTI_IMR_IM16_Msk


	)

1764 
	#EXTI_IMR_IM17_Pos
 (17U)

	)

1765 
	#EXTI_IMR_IM17_Msk
 (0x1U << 
EXTI_IMR_IM17_Pos
Ë

	)

1766 
	#EXTI_IMR_IM17
 
EXTI_IMR_IM17_Msk


	)

1767 
	#EXTI_IMR_IM18_Pos
 (18U)

	)

1768 
	#EXTI_IMR_IM18_Msk
 (0x1U << 
EXTI_IMR_IM18_Pos
Ë

	)

1769 
	#EXTI_IMR_IM18
 
EXTI_IMR_IM18_Msk


	)

1770 
	#EXTI_IMR_IM19_Pos
 (19U)

	)

1771 
	#EXTI_IMR_IM19_Msk
 (0x1U << 
EXTI_IMR_IM19_Pos
Ë

	)

1772 
	#EXTI_IMR_IM19
 
EXTI_IMR_IM19_Msk


	)

1773 
	#EXTI_IMR_IM20_Pos
 (20U)

	)

1774 
	#EXTI_IMR_IM20_Msk
 (0x1U << 
EXTI_IMR_IM20_Pos
Ë

	)

1775 
	#EXTI_IMR_IM20
 
EXTI_IMR_IM20_Msk


	)

1776 
	#EXTI_IMR_IM21_Pos
 (21U)

	)

1777 
	#EXTI_IMR_IM21_Msk
 (0x1U << 
EXTI_IMR_IM21_Pos
Ë

	)

1778 
	#EXTI_IMR_IM21
 
EXTI_IMR_IM21_Msk


	)

1779 
	#EXTI_IMR_IM22_Pos
 (22U)

	)

1780 
	#EXTI_IMR_IM22_Msk
 (0x1U << 
EXTI_IMR_IM22_Pos
Ë

	)

1781 
	#EXTI_IMR_IM22
 
EXTI_IMR_IM22_Msk


	)

1782 
	#EXTI_IMR_IM23_Pos
 (23U)

	)

1783 
	#EXTI_IMR_IM23_Msk
 (0x1U << 
EXTI_IMR_IM23_Pos
Ë

	)

1784 
	#EXTI_IMR_IM23
 
EXTI_IMR_IM23_Msk


	)

1785 
	#EXTI_IMR_IM25_Pos
 (25U)

	)

1786 
	#EXTI_IMR_IM25_Msk
 (0x1U << 
EXTI_IMR_IM25_Pos
Ë

	)

1787 
	#EXTI_IMR_IM25
 
EXTI_IMR_IM25_Msk


	)

1788 
	#EXTI_IMR_IM26_Pos
 (26U)

	)

1789 
	#EXTI_IMR_IM26_Msk
 (0x1U << 
EXTI_IMR_IM26_Pos
Ë

	)

1790 
	#EXTI_IMR_IM26
 
EXTI_IMR_IM26_Msk


	)

1791 
	#EXTI_IMR_IM28_Pos
 (28U)

	)

1792 
	#EXTI_IMR_IM28_Msk
 (0x1U << 
EXTI_IMR_IM28_Pos
Ë

	)

1793 
	#EXTI_IMR_IM28
 
EXTI_IMR_IM28_Msk


	)

1794 
	#EXTI_IMR_IM29_Pos
 (29U)

	)

1795 
	#EXTI_IMR_IM29_Msk
 (0x1U << 
EXTI_IMR_IM29_Pos
Ë

	)

1796 
	#EXTI_IMR_IM29
 
EXTI_IMR_IM29_Msk


	)

1798 
	#EXTI_IMR_IM_Pos
 (0U)

	)

1799 
	#EXTI_IMR_IM_Msk
 (0x36FFFFFFU << 
EXTI_IMR_IM_Pos
Ë

	)

1800 
	#EXTI_IMR_IM
 
EXTI_IMR_IM_Msk


	)

1803 
	#EXTI_EMR_EM0_Pos
 (0U)

	)

1804 
	#EXTI_EMR_EM0_Msk
 (0x1U << 
EXTI_EMR_EM0_Pos
Ë

	)

1805 
	#EXTI_EMR_EM0
 
EXTI_EMR_EM0_Msk


	)

1806 
	#EXTI_EMR_EM1_Pos
 (1U)

	)

1807 
	#EXTI_EMR_EM1_Msk
 (0x1U << 
EXTI_EMR_EM1_Pos
Ë

	)

1808 
	#EXTI_EMR_EM1
 
EXTI_EMR_EM1_Msk


	)

1809 
	#EXTI_EMR_EM2_Pos
 (2U)

	)

1810 
	#EXTI_EMR_EM2_Msk
 (0x1U << 
EXTI_EMR_EM2_Pos
Ë

	)

1811 
	#EXTI_EMR_EM2
 
EXTI_EMR_EM2_Msk


	)

1812 
	#EXTI_EMR_EM3_Pos
 (3U)

	)

1813 
	#EXTI_EMR_EM3_Msk
 (0x1U << 
EXTI_EMR_EM3_Pos
Ë

	)

1814 
	#EXTI_EMR_EM3
 
EXTI_EMR_EM3_Msk


	)

1815 
	#EXTI_EMR_EM4_Pos
 (4U)

	)

1816 
	#EXTI_EMR_EM4_Msk
 (0x1U << 
EXTI_EMR_EM4_Pos
Ë

	)

1817 
	#EXTI_EMR_EM4
 
EXTI_EMR_EM4_Msk


	)

1818 
	#EXTI_EMR_EM5_Pos
 (5U)

	)

1819 
	#EXTI_EMR_EM5_Msk
 (0x1U << 
EXTI_EMR_EM5_Pos
Ë

	)

1820 
	#EXTI_EMR_EM5
 
EXTI_EMR_EM5_Msk


	)

1821 
	#EXTI_EMR_EM6_Pos
 (6U)

	)

1822 
	#EXTI_EMR_EM6_Msk
 (0x1U << 
EXTI_EMR_EM6_Pos
Ë

	)

1823 
	#EXTI_EMR_EM6
 
EXTI_EMR_EM6_Msk


	)

1824 
	#EXTI_EMR_EM7_Pos
 (7U)

	)

1825 
	#EXTI_EMR_EM7_Msk
 (0x1U << 
EXTI_EMR_EM7_Pos
Ë

	)

1826 
	#EXTI_EMR_EM7
 
EXTI_EMR_EM7_Msk


	)

1827 
	#EXTI_EMR_EM8_Pos
 (8U)

	)

1828 
	#EXTI_EMR_EM8_Msk
 (0x1U << 
EXTI_EMR_EM8_Pos
Ë

	)

1829 
	#EXTI_EMR_EM8
 
EXTI_EMR_EM8_Msk


	)

1830 
	#EXTI_EMR_EM9_Pos
 (9U)

	)

1831 
	#EXTI_EMR_EM9_Msk
 (0x1U << 
EXTI_EMR_EM9_Pos
Ë

	)

1832 
	#EXTI_EMR_EM9
 
EXTI_EMR_EM9_Msk


	)

1833 
	#EXTI_EMR_EM10_Pos
 (10U)

	)

1834 
	#EXTI_EMR_EM10_Msk
 (0x1U << 
EXTI_EMR_EM10_Pos
Ë

	)

1835 
	#EXTI_EMR_EM10
 
EXTI_EMR_EM10_Msk


	)

1836 
	#EXTI_EMR_EM11_Pos
 (11U)

	)

1837 
	#EXTI_EMR_EM11_Msk
 (0x1U << 
EXTI_EMR_EM11_Pos
Ë

	)

1838 
	#EXTI_EMR_EM11
 
EXTI_EMR_EM11_Msk


	)

1839 
	#EXTI_EMR_EM12_Pos
 (12U)

	)

1840 
	#EXTI_EMR_EM12_Msk
 (0x1U << 
EXTI_EMR_EM12_Pos
Ë

	)

1841 
	#EXTI_EMR_EM12
 
EXTI_EMR_EM12_Msk


	)

1842 
	#EXTI_EMR_EM13_Pos
 (13U)

	)

1843 
	#EXTI_EMR_EM13_Msk
 (0x1U << 
EXTI_EMR_EM13_Pos
Ë

	)

1844 
	#EXTI_EMR_EM13
 
EXTI_EMR_EM13_Msk


	)

1845 
	#EXTI_EMR_EM14_Pos
 (14U)

	)

1846 
	#EXTI_EMR_EM14_Msk
 (0x1U << 
EXTI_EMR_EM14_Pos
Ë

	)

1847 
	#EXTI_EMR_EM14
 
EXTI_EMR_EM14_Msk


	)

1848 
	#EXTI_EMR_EM15_Pos
 (15U)

	)

1849 
	#EXTI_EMR_EM15_Msk
 (0x1U << 
EXTI_EMR_EM15_Pos
Ë

	)

1850 
	#EXTI_EMR_EM15
 
EXTI_EMR_EM15_Msk


	)

1851 
	#EXTI_EMR_EM16_Pos
 (16U)

	)

1852 
	#EXTI_EMR_EM16_Msk
 (0x1U << 
EXTI_EMR_EM16_Pos
Ë

	)

1853 
	#EXTI_EMR_EM16
 
EXTI_EMR_EM16_Msk


	)

1854 
	#EXTI_EMR_EM17_Pos
 (17U)

	)

1855 
	#EXTI_EMR_EM17_Msk
 (0x1U << 
EXTI_EMR_EM17_Pos
Ë

	)

1856 
	#EXTI_EMR_EM17
 
EXTI_EMR_EM17_Msk


	)

1857 
	#EXTI_EMR_EM18_Pos
 (18U)

	)

1858 
	#EXTI_EMR_EM18_Msk
 (0x1U << 
EXTI_EMR_EM18_Pos
Ë

	)

1859 
	#EXTI_EMR_EM18
 
EXTI_EMR_EM18_Msk


	)

1860 
	#EXTI_EMR_EM19_Pos
 (19U)

	)

1861 
	#EXTI_EMR_EM19_Msk
 (0x1U << 
EXTI_EMR_EM19_Pos
Ë

	)

1862 
	#EXTI_EMR_EM19
 
EXTI_EMR_EM19_Msk


	)

1863 
	#EXTI_EMR_EM20_Pos
 (20U)

	)

1864 
	#EXTI_EMR_EM20_Msk
 (0x1U << 
EXTI_EMR_EM20_Pos
Ë

	)

1865 
	#EXTI_EMR_EM20
 
EXTI_EMR_EM20_Msk


	)

1866 
	#EXTI_EMR_EM21_Pos
 (21U)

	)

1867 
	#EXTI_EMR_EM21_Msk
 (0x1U << 
EXTI_EMR_EM21_Pos
Ë

	)

1868 
	#EXTI_EMR_EM21
 
EXTI_EMR_EM21_Msk


	)

1869 
	#EXTI_EMR_EM22_Pos
 (22U)

	)

1870 
	#EXTI_EMR_EM22_Msk
 (0x1U << 
EXTI_EMR_EM22_Pos
Ë

	)

1871 
	#EXTI_EMR_EM22
 
EXTI_EMR_EM22_Msk


	)

1872 
	#EXTI_EMR_EM23_Pos
 (23U)

	)

1873 
	#EXTI_EMR_EM23_Msk
 (0x1U << 
EXTI_EMR_EM23_Pos
Ë

	)

1874 
	#EXTI_EMR_EM23
 
EXTI_EMR_EM23_Msk


	)

1875 
	#EXTI_EMR_EM25_Pos
 (25U)

	)

1876 
	#EXTI_EMR_EM25_Msk
 (0x1U << 
EXTI_EMR_EM25_Pos
Ë

	)

1877 
	#EXTI_EMR_EM25
 
EXTI_EMR_EM25_Msk


	)

1878 
	#EXTI_EMR_EM26_Pos
 (26U)

	)

1879 
	#EXTI_EMR_EM26_Msk
 (0x1U << 
EXTI_EMR_EM26_Pos
Ë

	)

1880 
	#EXTI_EMR_EM26
 
EXTI_EMR_EM26_Msk


	)

1881 
	#EXTI_EMR_EM28_Pos
 (28U)

	)

1882 
	#EXTI_EMR_EM28_Msk
 (0x1U << 
EXTI_EMR_EM28_Pos
Ë

	)

1883 
	#EXTI_EMR_EM28
 
EXTI_EMR_EM28_Msk


	)

1884 
	#EXTI_EMR_EM29_Pos
 (29U)

	)

1885 
	#EXTI_EMR_EM29_Msk
 (0x1U << 
EXTI_EMR_EM29_Pos
Ë

	)

1886 
	#EXTI_EMR_EM29
 
EXTI_EMR_EM29_Msk


	)

1889 
	#EXTI_RTSR_RT0_Pos
 (0U)

	)

1890 
	#EXTI_RTSR_RT0_Msk
 (0x1U << 
EXTI_RTSR_RT0_Pos
Ë

	)

1891 
	#EXTI_RTSR_RT0
 
EXTI_RTSR_RT0_Msk


	)

1892 
	#EXTI_RTSR_RT1_Pos
 (1U)

	)

1893 
	#EXTI_RTSR_RT1_Msk
 (0x1U << 
EXTI_RTSR_RT1_Pos
Ë

	)

1894 
	#EXTI_RTSR_RT1
 
EXTI_RTSR_RT1_Msk


	)

1895 
	#EXTI_RTSR_RT2_Pos
 (2U)

	)

1896 
	#EXTI_RTSR_RT2_Msk
 (0x1U << 
EXTI_RTSR_RT2_Pos
Ë

	)

1897 
	#EXTI_RTSR_RT2
 
EXTI_RTSR_RT2_Msk


	)

1898 
	#EXTI_RTSR_RT3_Pos
 (3U)

	)

1899 
	#EXTI_RTSR_RT3_Msk
 (0x1U << 
EXTI_RTSR_RT3_Pos
Ë

	)

1900 
	#EXTI_RTSR_RT3
 
EXTI_RTSR_RT3_Msk


	)

1901 
	#EXTI_RTSR_RT4_Pos
 (4U)

	)

1902 
	#EXTI_RTSR_RT4_Msk
 (0x1U << 
EXTI_RTSR_RT4_Pos
Ë

	)

1903 
	#EXTI_RTSR_RT4
 
EXTI_RTSR_RT4_Msk


	)

1904 
	#EXTI_RTSR_RT5_Pos
 (5U)

	)

1905 
	#EXTI_RTSR_RT5_Msk
 (0x1U << 
EXTI_RTSR_RT5_Pos
Ë

	)

1906 
	#EXTI_RTSR_RT5
 
EXTI_RTSR_RT5_Msk


	)

1907 
	#EXTI_RTSR_RT6_Pos
 (6U)

	)

1908 
	#EXTI_RTSR_RT6_Msk
 (0x1U << 
EXTI_RTSR_RT6_Pos
Ë

	)

1909 
	#EXTI_RTSR_RT6
 
EXTI_RTSR_RT6_Msk


	)

1910 
	#EXTI_RTSR_RT7_Pos
 (7U)

	)

1911 
	#EXTI_RTSR_RT7_Msk
 (0x1U << 
EXTI_RTSR_RT7_Pos
Ë

	)

1912 
	#EXTI_RTSR_RT7
 
EXTI_RTSR_RT7_Msk


	)

1913 
	#EXTI_RTSR_RT8_Pos
 (8U)

	)

1914 
	#EXTI_RTSR_RT8_Msk
 (0x1U << 
EXTI_RTSR_RT8_Pos
Ë

	)

1915 
	#EXTI_RTSR_RT8
 
EXTI_RTSR_RT8_Msk


	)

1916 
	#EXTI_RTSR_RT9_Pos
 (9U)

	)

1917 
	#EXTI_RTSR_RT9_Msk
 (0x1U << 
EXTI_RTSR_RT9_Pos
Ë

	)

1918 
	#EXTI_RTSR_RT9
 
EXTI_RTSR_RT9_Msk


	)

1919 
	#EXTI_RTSR_RT10_Pos
 (10U)

	)

1920 
	#EXTI_RTSR_RT10_Msk
 (0x1U << 
EXTI_RTSR_RT10_Pos
Ë

	)

1921 
	#EXTI_RTSR_RT10
 
EXTI_RTSR_RT10_Msk


	)

1922 
	#EXTI_RTSR_RT11_Pos
 (11U)

	)

1923 
	#EXTI_RTSR_RT11_Msk
 (0x1U << 
EXTI_RTSR_RT11_Pos
Ë

	)

1924 
	#EXTI_RTSR_RT11
 
EXTI_RTSR_RT11_Msk


	)

1925 
	#EXTI_RTSR_RT12_Pos
 (12U)

	)

1926 
	#EXTI_RTSR_RT12_Msk
 (0x1U << 
EXTI_RTSR_RT12_Pos
Ë

	)

1927 
	#EXTI_RTSR_RT12
 
EXTI_RTSR_RT12_Msk


	)

1928 
	#EXTI_RTSR_RT13_Pos
 (13U)

	)

1929 
	#EXTI_RTSR_RT13_Msk
 (0x1U << 
EXTI_RTSR_RT13_Pos
Ë

	)

1930 
	#EXTI_RTSR_RT13
 
EXTI_RTSR_RT13_Msk


	)

1931 
	#EXTI_RTSR_RT14_Pos
 (14U)

	)

1932 
	#EXTI_RTSR_RT14_Msk
 (0x1U << 
EXTI_RTSR_RT14_Pos
Ë

	)

1933 
	#EXTI_RTSR_RT14
 
EXTI_RTSR_RT14_Msk


	)

1934 
	#EXTI_RTSR_RT15_Pos
 (15U)

	)

1935 
	#EXTI_RTSR_RT15_Msk
 (0x1U << 
EXTI_RTSR_RT15_Pos
Ë

	)

1936 
	#EXTI_RTSR_RT15
 
EXTI_RTSR_RT15_Msk


	)

1937 
	#EXTI_RTSR_RT16_Pos
 (16U)

	)

1938 
	#EXTI_RTSR_RT16_Msk
 (0x1U << 
EXTI_RTSR_RT16_Pos
Ë

	)

1939 
	#EXTI_RTSR_RT16
 
EXTI_RTSR_RT16_Msk


	)

1940 
	#EXTI_RTSR_RT17_Pos
 (17U)

	)

1941 
	#EXTI_RTSR_RT17_Msk
 (0x1U << 
EXTI_RTSR_RT17_Pos
Ë

	)

1942 
	#EXTI_RTSR_RT17
 
EXTI_RTSR_RT17_Msk


	)

1943 
	#EXTI_RTSR_RT19_Pos
 (19U)

	)

1944 
	#EXTI_RTSR_RT19_Msk
 (0x1U << 
EXTI_RTSR_RT19_Pos
Ë

	)

1945 
	#EXTI_RTSR_RT19
 
EXTI_RTSR_RT19_Msk


	)

1946 
	#EXTI_RTSR_RT20_Pos
 (20U)

	)

1947 
	#EXTI_RTSR_RT20_Msk
 (0x1U << 
EXTI_RTSR_RT20_Pos
Ë

	)

1948 
	#EXTI_RTSR_RT20
 
EXTI_RTSR_RT20_Msk


	)

1949 
	#EXTI_RTSR_RT21_Pos
 (21U)

	)

1950 
	#EXTI_RTSR_RT21_Msk
 (0x1U << 
EXTI_RTSR_RT21_Pos
Ë

	)

1951 
	#EXTI_RTSR_RT21
 
EXTI_RTSR_RT21_Msk


	)

1952 
	#EXTI_RTSR_RT22_Pos
 (22U)

	)

1953 
	#EXTI_RTSR_RT22_Msk
 (0x1U << 
EXTI_RTSR_RT22_Pos
Ë

	)

1954 
	#EXTI_RTSR_RT22
 
EXTI_RTSR_RT22_Msk


	)

1957 
	#EXTI_RTSR_TR0
 
EXTI_RTSR_RT0


	)

1958 
	#EXTI_RTSR_TR1
 
EXTI_RTSR_RT1


	)

1959 
	#EXTI_RTSR_TR2
 
EXTI_RTSR_RT2


	)

1960 
	#EXTI_RTSR_TR3
 
EXTI_RTSR_RT3


	)

1961 
	#EXTI_RTSR_TR4
 
EXTI_RTSR_RT4


	)

1962 
	#EXTI_RTSR_TR5
 
EXTI_RTSR_RT5


	)

1963 
	#EXTI_RTSR_TR6
 
EXTI_RTSR_RT6


	)

1964 
	#EXTI_RTSR_TR7
 
EXTI_RTSR_RT7


	)

1965 
	#EXTI_RTSR_TR8
 
EXTI_RTSR_RT8


	)

1966 
	#EXTI_RTSR_TR9
 
EXTI_RTSR_RT9


	)

1967 
	#EXTI_RTSR_TR10
 
EXTI_RTSR_RT10


	)

1968 
	#EXTI_RTSR_TR11
 
EXTI_RTSR_RT11


	)

1969 
	#EXTI_RTSR_TR12
 
EXTI_RTSR_RT12


	)

1970 
	#EXTI_RTSR_TR13
 
EXTI_RTSR_RT13


	)

1971 
	#EXTI_RTSR_TR14
 
EXTI_RTSR_RT14


	)

1972 
	#EXTI_RTSR_TR15
 
EXTI_RTSR_RT15


	)

1973 
	#EXTI_RTSR_TR16
 
EXTI_RTSR_RT16


	)

1974 
	#EXTI_RTSR_TR17
 
EXTI_RTSR_RT17


	)

1975 
	#EXTI_RTSR_TR19
 
EXTI_RTSR_RT19


	)

1976 
	#EXTI_RTSR_TR20
 
EXTI_RTSR_RT20


	)

1977 
	#EXTI_RTSR_TR21
 
EXTI_RTSR_RT21


	)

1978 
	#EXTI_RTSR_TR22
 
EXTI_RTSR_RT22


	)

1981 
	#EXTI_FTSR_FT0_Pos
 (0U)

	)

1982 
	#EXTI_FTSR_FT0_Msk
 (0x1U << 
EXTI_FTSR_FT0_Pos
Ë

	)

1983 
	#EXTI_FTSR_FT0
 
EXTI_FTSR_FT0_Msk


	)

1984 
	#EXTI_FTSR_FT1_Pos
 (1U)

	)

1985 
	#EXTI_FTSR_FT1_Msk
 (0x1U << 
EXTI_FTSR_FT1_Pos
Ë

	)

1986 
	#EXTI_FTSR_FT1
 
EXTI_FTSR_FT1_Msk


	)

1987 
	#EXTI_FTSR_FT2_Pos
 (2U)

	)

1988 
	#EXTI_FTSR_FT2_Msk
 (0x1U << 
EXTI_FTSR_FT2_Pos
Ë

	)

1989 
	#EXTI_FTSR_FT2
 
EXTI_FTSR_FT2_Msk


	)

1990 
	#EXTI_FTSR_FT3_Pos
 (3U)

	)

1991 
	#EXTI_FTSR_FT3_Msk
 (0x1U << 
EXTI_FTSR_FT3_Pos
Ë

	)

1992 
	#EXTI_FTSR_FT3
 
EXTI_FTSR_FT3_Msk


	)

1993 
	#EXTI_FTSR_FT4_Pos
 (4U)

	)

1994 
	#EXTI_FTSR_FT4_Msk
 (0x1U << 
EXTI_FTSR_FT4_Pos
Ë

	)

1995 
	#EXTI_FTSR_FT4
 
EXTI_FTSR_FT4_Msk


	)

1996 
	#EXTI_FTSR_FT5_Pos
 (5U)

	)

1997 
	#EXTI_FTSR_FT5_Msk
 (0x1U << 
EXTI_FTSR_FT5_Pos
Ë

	)

1998 
	#EXTI_FTSR_FT5
 
EXTI_FTSR_FT5_Msk


	)

1999 
	#EXTI_FTSR_FT6_Pos
 (6U)

	)

2000 
	#EXTI_FTSR_FT6_Msk
 (0x1U << 
EXTI_FTSR_FT6_Pos
Ë

	)

2001 
	#EXTI_FTSR_FT6
 
EXTI_FTSR_FT6_Msk


	)

2002 
	#EXTI_FTSR_FT7_Pos
 (7U)

	)

2003 
	#EXTI_FTSR_FT7_Msk
 (0x1U << 
EXTI_FTSR_FT7_Pos
Ë

	)

2004 
	#EXTI_FTSR_FT7
 
EXTI_FTSR_FT7_Msk


	)

2005 
	#EXTI_FTSR_FT8_Pos
 (8U)

	)

2006 
	#EXTI_FTSR_FT8_Msk
 (0x1U << 
EXTI_FTSR_FT8_Pos
Ë

	)

2007 
	#EXTI_FTSR_FT8
 
EXTI_FTSR_FT8_Msk


	)

2008 
	#EXTI_FTSR_FT9_Pos
 (9U)

	)

2009 
	#EXTI_FTSR_FT9_Msk
 (0x1U << 
EXTI_FTSR_FT9_Pos
Ë

	)

2010 
	#EXTI_FTSR_FT9
 
EXTI_FTSR_FT9_Msk


	)

2011 
	#EXTI_FTSR_FT10_Pos
 (10U)

	)

2012 
	#EXTI_FTSR_FT10_Msk
 (0x1U << 
EXTI_FTSR_FT10_Pos
Ë

	)

2013 
	#EXTI_FTSR_FT10
 
EXTI_FTSR_FT10_Msk


	)

2014 
	#EXTI_FTSR_FT11_Pos
 (11U)

	)

2015 
	#EXTI_FTSR_FT11_Msk
 (0x1U << 
EXTI_FTSR_FT11_Pos
Ë

	)

2016 
	#EXTI_FTSR_FT11
 
EXTI_FTSR_FT11_Msk


	)

2017 
	#EXTI_FTSR_FT12_Pos
 (12U)

	)

2018 
	#EXTI_FTSR_FT12_Msk
 (0x1U << 
EXTI_FTSR_FT12_Pos
Ë

	)

2019 
	#EXTI_FTSR_FT12
 
EXTI_FTSR_FT12_Msk


	)

2020 
	#EXTI_FTSR_FT13_Pos
 (13U)

	)

2021 
	#EXTI_FTSR_FT13_Msk
 (0x1U << 
EXTI_FTSR_FT13_Pos
Ë

	)

2022 
	#EXTI_FTSR_FT13
 
EXTI_FTSR_FT13_Msk


	)

2023 
	#EXTI_FTSR_FT14_Pos
 (14U)

	)

2024 
	#EXTI_FTSR_FT14_Msk
 (0x1U << 
EXTI_FTSR_FT14_Pos
Ë

	)

2025 
	#EXTI_FTSR_FT14
 
EXTI_FTSR_FT14_Msk


	)

2026 
	#EXTI_FTSR_FT15_Pos
 (15U)

	)

2027 
	#EXTI_FTSR_FT15_Msk
 (0x1U << 
EXTI_FTSR_FT15_Pos
Ë

	)

2028 
	#EXTI_FTSR_FT15
 
EXTI_FTSR_FT15_Msk


	)

2029 
	#EXTI_FTSR_FT16_Pos
 (16U)

	)

2030 
	#EXTI_FTSR_FT16_Msk
 (0x1U << 
EXTI_FTSR_FT16_Pos
Ë

	)

2031 
	#EXTI_FTSR_FT16
 
EXTI_FTSR_FT16_Msk


	)

2032 
	#EXTI_FTSR_FT17_Pos
 (17U)

	)

2033 
	#EXTI_FTSR_FT17_Msk
 (0x1U << 
EXTI_FTSR_FT17_Pos
Ë

	)

2034 
	#EXTI_FTSR_FT17
 
EXTI_FTSR_FT17_Msk


	)

2035 
	#EXTI_FTSR_FT19_Pos
 (19U)

	)

2036 
	#EXTI_FTSR_FT19_Msk
 (0x1U << 
EXTI_FTSR_FT19_Pos
Ë

	)

2037 
	#EXTI_FTSR_FT19
 
EXTI_FTSR_FT19_Msk


	)

2038 
	#EXTI_FTSR_FT20_Pos
 (20U)

	)

2039 
	#EXTI_FTSR_FT20_Msk
 (0x1U << 
EXTI_FTSR_FT20_Pos
Ë

	)

2040 
	#EXTI_FTSR_FT20
 
EXTI_FTSR_FT20_Msk


	)

2041 
	#EXTI_FTSR_FT21_Pos
 (21U)

	)

2042 
	#EXTI_FTSR_FT21_Msk
 (0x1U << 
EXTI_FTSR_FT21_Pos
Ë

	)

2043 
	#EXTI_FTSR_FT21
 
EXTI_FTSR_FT21_Msk


	)

2044 
	#EXTI_FTSR_FT22_Pos
 (22U)

	)

2045 
	#EXTI_FTSR_FT22_Msk
 (0x1U << 
EXTI_FTSR_FT22_Pos
Ë

	)

2046 
	#EXTI_FTSR_FT22
 
EXTI_FTSR_FT22_Msk


	)

2049 
	#EXTI_FTSR_TR0
 
EXTI_FTSR_FT0


	)

2050 
	#EXTI_FTSR_TR1
 
EXTI_FTSR_FT1


	)

2051 
	#EXTI_FTSR_TR2
 
EXTI_FTSR_FT2


	)

2052 
	#EXTI_FTSR_TR3
 
EXTI_FTSR_FT3


	)

2053 
	#EXTI_FTSR_TR4
 
EXTI_FTSR_FT4


	)

2054 
	#EXTI_FTSR_TR5
 
EXTI_FTSR_FT5


	)

2055 
	#EXTI_FTSR_TR6
 
EXTI_FTSR_FT6


	)

2056 
	#EXTI_FTSR_TR7
 
EXTI_FTSR_FT7


	)

2057 
	#EXTI_FTSR_TR8
 
EXTI_FTSR_FT8


	)

2058 
	#EXTI_FTSR_TR9
 
EXTI_FTSR_FT9


	)

2059 
	#EXTI_FTSR_TR10
 
EXTI_FTSR_FT10


	)

2060 
	#EXTI_FTSR_TR11
 
EXTI_FTSR_FT11


	)

2061 
	#EXTI_FTSR_TR12
 
EXTI_FTSR_FT12


	)

2062 
	#EXTI_FTSR_TR13
 
EXTI_FTSR_FT13


	)

2063 
	#EXTI_FTSR_TR14
 
EXTI_FTSR_FT14


	)

2064 
	#EXTI_FTSR_TR15
 
EXTI_FTSR_FT15


	)

2065 
	#EXTI_FTSR_TR16
 
EXTI_FTSR_FT16


	)

2066 
	#EXTI_FTSR_TR17
 
EXTI_FTSR_FT17


	)

2067 
	#EXTI_FTSR_TR19
 
EXTI_FTSR_FT19


	)

2068 
	#EXTI_FTSR_TR20
 
EXTI_FTSR_FT20


	)

2069 
	#EXTI_FTSR_TR21
 
EXTI_FTSR_FT21


	)

2070 
	#EXTI_FTSR_TR22
 
EXTI_FTSR_FT22


	)

2073 
	#EXTI_SWIER_SWI0_Pos
 (0U)

	)

2074 
	#EXTI_SWIER_SWI0_Msk
 (0x1U << 
EXTI_SWIER_SWI0_Pos
Ë

	)

2075 
	#EXTI_SWIER_SWI0
 
EXTI_SWIER_SWI0_Msk


	)

2076 
	#EXTI_SWIER_SWI1_Pos
 (1U)

	)

2077 
	#EXTI_SWIER_SWI1_Msk
 (0x1U << 
EXTI_SWIER_SWI1_Pos
Ë

	)

2078 
	#EXTI_SWIER_SWI1
 
EXTI_SWIER_SWI1_Msk


	)

2079 
	#EXTI_SWIER_SWI2_Pos
 (2U)

	)

2080 
	#EXTI_SWIER_SWI2_Msk
 (0x1U << 
EXTI_SWIER_SWI2_Pos
Ë

	)

2081 
	#EXTI_SWIER_SWI2
 
EXTI_SWIER_SWI2_Msk


	)

2082 
	#EXTI_SWIER_SWI3_Pos
 (3U)

	)

2083 
	#EXTI_SWIER_SWI3_Msk
 (0x1U << 
EXTI_SWIER_SWI3_Pos
Ë

	)

2084 
	#EXTI_SWIER_SWI3
 
EXTI_SWIER_SWI3_Msk


	)

2085 
	#EXTI_SWIER_SWI4_Pos
 (4U)

	)

2086 
	#EXTI_SWIER_SWI4_Msk
 (0x1U << 
EXTI_SWIER_SWI4_Pos
Ë

	)

2087 
	#EXTI_SWIER_SWI4
 
EXTI_SWIER_SWI4_Msk


	)

2088 
	#EXTI_SWIER_SWI5_Pos
 (5U)

	)

2089 
	#EXTI_SWIER_SWI5_Msk
 (0x1U << 
EXTI_SWIER_SWI5_Pos
Ë

	)

2090 
	#EXTI_SWIER_SWI5
 
EXTI_SWIER_SWI5_Msk


	)

2091 
	#EXTI_SWIER_SWI6_Pos
 (6U)

	)

2092 
	#EXTI_SWIER_SWI6_Msk
 (0x1U << 
EXTI_SWIER_SWI6_Pos
Ë

	)

2093 
	#EXTI_SWIER_SWI6
 
EXTI_SWIER_SWI6_Msk


	)

2094 
	#EXTI_SWIER_SWI7_Pos
 (7U)

	)

2095 
	#EXTI_SWIER_SWI7_Msk
 (0x1U << 
EXTI_SWIER_SWI7_Pos
Ë

	)

2096 
	#EXTI_SWIER_SWI7
 
EXTI_SWIER_SWI7_Msk


	)

2097 
	#EXTI_SWIER_SWI8_Pos
 (8U)

	)

2098 
	#EXTI_SWIER_SWI8_Msk
 (0x1U << 
EXTI_SWIER_SWI8_Pos
Ë

	)

2099 
	#EXTI_SWIER_SWI8
 
EXTI_SWIER_SWI8_Msk


	)

2100 
	#EXTI_SWIER_SWI9_Pos
 (9U)

	)

2101 
	#EXTI_SWIER_SWI9_Msk
 (0x1U << 
EXTI_SWIER_SWI9_Pos
Ë

	)

2102 
	#EXTI_SWIER_SWI9
 
EXTI_SWIER_SWI9_Msk


	)

2103 
	#EXTI_SWIER_SWI10_Pos
 (10U)

	)

2104 
	#EXTI_SWIER_SWI10_Msk
 (0x1U << 
EXTI_SWIER_SWI10_Pos
Ë

	)

2105 
	#EXTI_SWIER_SWI10
 
EXTI_SWIER_SWI10_Msk


	)

2106 
	#EXTI_SWIER_SWI11_Pos
 (11U)

	)

2107 
	#EXTI_SWIER_SWI11_Msk
 (0x1U << 
EXTI_SWIER_SWI11_Pos
Ë

	)

2108 
	#EXTI_SWIER_SWI11
 
EXTI_SWIER_SWI11_Msk


	)

2109 
	#EXTI_SWIER_SWI12_Pos
 (12U)

	)

2110 
	#EXTI_SWIER_SWI12_Msk
 (0x1U << 
EXTI_SWIER_SWI12_Pos
Ë

	)

2111 
	#EXTI_SWIER_SWI12
 
EXTI_SWIER_SWI12_Msk


	)

2112 
	#EXTI_SWIER_SWI13_Pos
 (13U)

	)

2113 
	#EXTI_SWIER_SWI13_Msk
 (0x1U << 
EXTI_SWIER_SWI13_Pos
Ë

	)

2114 
	#EXTI_SWIER_SWI13
 
EXTI_SWIER_SWI13_Msk


	)

2115 
	#EXTI_SWIER_SWI14_Pos
 (14U)

	)

2116 
	#EXTI_SWIER_SWI14_Msk
 (0x1U << 
EXTI_SWIER_SWI14_Pos
Ë

	)

2117 
	#EXTI_SWIER_SWI14
 
EXTI_SWIER_SWI14_Msk


	)

2118 
	#EXTI_SWIER_SWI15_Pos
 (15U)

	)

2119 
	#EXTI_SWIER_SWI15_Msk
 (0x1U << 
EXTI_SWIER_SWI15_Pos
Ë

	)

2120 
	#EXTI_SWIER_SWI15
 
EXTI_SWIER_SWI15_Msk


	)

2121 
	#EXTI_SWIER_SWI16_Pos
 (16U)

	)

2122 
	#EXTI_SWIER_SWI16_Msk
 (0x1U << 
EXTI_SWIER_SWI16_Pos
Ë

	)

2123 
	#EXTI_SWIER_SWI16
 
EXTI_SWIER_SWI16_Msk


	)

2124 
	#EXTI_SWIER_SWI17_Pos
 (17U)

	)

2125 
	#EXTI_SWIER_SWI17_Msk
 (0x1U << 
EXTI_SWIER_SWI17_Pos
Ë

	)

2126 
	#EXTI_SWIER_SWI17
 
EXTI_SWIER_SWI17_Msk


	)

2127 
	#EXTI_SWIER_SWI19_Pos
 (19U)

	)

2128 
	#EXTI_SWIER_SWI19_Msk
 (0x1U << 
EXTI_SWIER_SWI19_Pos
Ë

	)

2129 
	#EXTI_SWIER_SWI19
 
EXTI_SWIER_SWI19_Msk


	)

2130 
	#EXTI_SWIER_SWI20_Pos
 (20U)

	)

2131 
	#EXTI_SWIER_SWI20_Msk
 (0x1U << 
EXTI_SWIER_SWI20_Pos
Ë

	)

2132 
	#EXTI_SWIER_SWI20
 
EXTI_SWIER_SWI20_Msk


	)

2133 
	#EXTI_SWIER_SWI21_Pos
 (21U)

	)

2134 
	#EXTI_SWIER_SWI21_Msk
 (0x1U << 
EXTI_SWIER_SWI21_Pos
Ë

	)

2135 
	#EXTI_SWIER_SWI21
 
EXTI_SWIER_SWI21_Msk


	)

2136 
	#EXTI_SWIER_SWI22_Pos
 (22U)

	)

2137 
	#EXTI_SWIER_SWI22_Msk
 (0x1U << 
EXTI_SWIER_SWI22_Pos
Ë

	)

2138 
	#EXTI_SWIER_SWI22
 
EXTI_SWIER_SWI22_Msk


	)

2141 
	#EXTI_SWIER_SWIER0
 
EXTI_SWIER_SWI0


	)

2142 
	#EXTI_SWIER_SWIER1
 
EXTI_SWIER_SWI1


	)

2143 
	#EXTI_SWIER_SWIER2
 
EXTI_SWIER_SWI2


	)

2144 
	#EXTI_SWIER_SWIER3
 
EXTI_SWIER_SWI3


	)

2145 
	#EXTI_SWIER_SWIER4
 
EXTI_SWIER_SWI4


	)

2146 
	#EXTI_SWIER_SWIER5
 
EXTI_SWIER_SWI5


	)

2147 
	#EXTI_SWIER_SWIER6
 
EXTI_SWIER_SWI6


	)

2148 
	#EXTI_SWIER_SWIER7
 
EXTI_SWIER_SWI7


	)

2149 
	#EXTI_SWIER_SWIER8
 
EXTI_SWIER_SWI8


	)

2150 
	#EXTI_SWIER_SWIER9
 
EXTI_SWIER_SWI9


	)

2151 
	#EXTI_SWIER_SWIER10
 
EXTI_SWIER_SWI10


	)

2152 
	#EXTI_SWIER_SWIER11
 
EXTI_SWIER_SWI11


	)

2153 
	#EXTI_SWIER_SWIER12
 
EXTI_SWIER_SWI12


	)

2154 
	#EXTI_SWIER_SWIER13
 
EXTI_SWIER_SWI13


	)

2155 
	#EXTI_SWIER_SWIER14
 
EXTI_SWIER_SWI14


	)

2156 
	#EXTI_SWIER_SWIER15
 
EXTI_SWIER_SWI15


	)

2157 
	#EXTI_SWIER_SWIER16
 
EXTI_SWIER_SWI16


	)

2158 
	#EXTI_SWIER_SWIER17
 
EXTI_SWIER_SWI17


	)

2159 
	#EXTI_SWIER_SWIER19
 
EXTI_SWIER_SWI19


	)

2160 
	#EXTI_SWIER_SWIER20
 
EXTI_SWIER_SWI20


	)

2161 
	#EXTI_SWIER_SWIER21
 
EXTI_SWIER_SWI21


	)

2162 
	#EXTI_SWIER_SWIER22
 
EXTI_SWIER_SWI22


	)

2165 
	#EXTI_PR_PIF0_Pos
 (0U)

	)

2166 
	#EXTI_PR_PIF0_Msk
 (0x1U << 
EXTI_PR_PIF0_Pos
Ë

	)

2167 
	#EXTI_PR_PIF0
 
EXTI_PR_PIF0_Msk


	)

2168 
	#EXTI_PR_PIF1_Pos
 (1U)

	)

2169 
	#EXTI_PR_PIF1_Msk
 (0x1U << 
EXTI_PR_PIF1_Pos
Ë

	)

2170 
	#EXTI_PR_PIF1
 
EXTI_PR_PIF1_Msk


	)

2171 
	#EXTI_PR_PIF2_Pos
 (2U)

	)

2172 
	#EXTI_PR_PIF2_Msk
 (0x1U << 
EXTI_PR_PIF2_Pos
Ë

	)

2173 
	#EXTI_PR_PIF2
 
EXTI_PR_PIF2_Msk


	)

2174 
	#EXTI_PR_PIF3_Pos
 (3U)

	)

2175 
	#EXTI_PR_PIF3_Msk
 (0x1U << 
EXTI_PR_PIF3_Pos
Ë

	)

2176 
	#EXTI_PR_PIF3
 
EXTI_PR_PIF3_Msk


	)

2177 
	#EXTI_PR_PIF4_Pos
 (4U)

	)

2178 
	#EXTI_PR_PIF4_Msk
 (0x1U << 
EXTI_PR_PIF4_Pos
Ë

	)

2179 
	#EXTI_PR_PIF4
 
EXTI_PR_PIF4_Msk


	)

2180 
	#EXTI_PR_PIF5_Pos
 (5U)

	)

2181 
	#EXTI_PR_PIF5_Msk
 (0x1U << 
EXTI_PR_PIF5_Pos
Ë

	)

2182 
	#EXTI_PR_PIF5
 
EXTI_PR_PIF5_Msk


	)

2183 
	#EXTI_PR_PIF6_Pos
 (6U)

	)

2184 
	#EXTI_PR_PIF6_Msk
 (0x1U << 
EXTI_PR_PIF6_Pos
Ë

	)

2185 
	#EXTI_PR_PIF6
 
EXTI_PR_PIF6_Msk


	)

2186 
	#EXTI_PR_PIF7_Pos
 (7U)

	)

2187 
	#EXTI_PR_PIF7_Msk
 (0x1U << 
EXTI_PR_PIF7_Pos
Ë

	)

2188 
	#EXTI_PR_PIF7
 
EXTI_PR_PIF7_Msk


	)

2189 
	#EXTI_PR_PIF8_Pos
 (8U)

	)

2190 
	#EXTI_PR_PIF8_Msk
 (0x1U << 
EXTI_PR_PIF8_Pos
Ë

	)

2191 
	#EXTI_PR_PIF8
 
EXTI_PR_PIF8_Msk


	)

2192 
	#EXTI_PR_PIF9_Pos
 (9U)

	)

2193 
	#EXTI_PR_PIF9_Msk
 (0x1U << 
EXTI_PR_PIF9_Pos
Ë

	)

2194 
	#EXTI_PR_PIF9
 
EXTI_PR_PIF9_Msk


	)

2195 
	#EXTI_PR_PIF10_Pos
 (10U)

	)

2196 
	#EXTI_PR_PIF10_Msk
 (0x1U << 
EXTI_PR_PIF10_Pos
Ë

	)

2197 
	#EXTI_PR_PIF10
 
EXTI_PR_PIF10_Msk


	)

2198 
	#EXTI_PR_PIF11_Pos
 (11U)

	)

2199 
	#EXTI_PR_PIF11_Msk
 (0x1U << 
EXTI_PR_PIF11_Pos
Ë

	)

2200 
	#EXTI_PR_PIF11
 
EXTI_PR_PIF11_Msk


	)

2201 
	#EXTI_PR_PIF12_Pos
 (12U)

	)

2202 
	#EXTI_PR_PIF12_Msk
 (0x1U << 
EXTI_PR_PIF12_Pos
Ë

	)

2203 
	#EXTI_PR_PIF12
 
EXTI_PR_PIF12_Msk


	)

2204 
	#EXTI_PR_PIF13_Pos
 (13U)

	)

2205 
	#EXTI_PR_PIF13_Msk
 (0x1U << 
EXTI_PR_PIF13_Pos
Ë

	)

2206 
	#EXTI_PR_PIF13
 
EXTI_PR_PIF13_Msk


	)

2207 
	#EXTI_PR_PIF14_Pos
 (14U)

	)

2208 
	#EXTI_PR_PIF14_Msk
 (0x1U << 
EXTI_PR_PIF14_Pos
Ë

	)

2209 
	#EXTI_PR_PIF14
 
EXTI_PR_PIF14_Msk


	)

2210 
	#EXTI_PR_PIF15_Pos
 (15U)

	)

2211 
	#EXTI_PR_PIF15_Msk
 (0x1U << 
EXTI_PR_PIF15_Pos
Ë

	)

2212 
	#EXTI_PR_PIF15
 
EXTI_PR_PIF15_Msk


	)

2213 
	#EXTI_PR_PIF16_Pos
 (16U)

	)

2214 
	#EXTI_PR_PIF16_Msk
 (0x1U << 
EXTI_PR_PIF16_Pos
Ë

	)

2215 
	#EXTI_PR_PIF16
 
EXTI_PR_PIF16_Msk


	)

2216 
	#EXTI_PR_PIF17_Pos
 (17U)

	)

2217 
	#EXTI_PR_PIF17_Msk
 (0x1U << 
EXTI_PR_PIF17_Pos
Ë

	)

2218 
	#EXTI_PR_PIF17
 
EXTI_PR_PIF17_Msk


	)

2219 
	#EXTI_PR_PIF19_Pos
 (19U)

	)

2220 
	#EXTI_PR_PIF19_Msk
 (0x1U << 
EXTI_PR_PIF19_Pos
Ë

	)

2221 
	#EXTI_PR_PIF19
 
EXTI_PR_PIF19_Msk


	)

2222 
	#EXTI_PR_PIF20_Pos
 (20U)

	)

2223 
	#EXTI_PR_PIF20_Msk
 (0x1U << 
EXTI_PR_PIF20_Pos
Ë

	)

2224 
	#EXTI_PR_PIF20
 
EXTI_PR_PIF20_Msk


	)

2225 
	#EXTI_PR_PIF21_Pos
 (21U)

	)

2226 
	#EXTI_PR_PIF21_Msk
 (0x1U << 
EXTI_PR_PIF21_Pos
Ë

	)

2227 
	#EXTI_PR_PIF21
 
EXTI_PR_PIF21_Msk


	)

2228 
	#EXTI_PR_PIF22_Pos
 (22U)

	)

2229 
	#EXTI_PR_PIF22_Msk
 (0x1U << 
EXTI_PR_PIF22_Pos
Ë

	)

2230 
	#EXTI_PR_PIF22
 
EXTI_PR_PIF22_Msk


	)

2233 
	#EXTI_PR_PR0
 
EXTI_PR_PIF0


	)

2234 
	#EXTI_PR_PR1
 
EXTI_PR_PIF1


	)

2235 
	#EXTI_PR_PR2
 
EXTI_PR_PIF2


	)

2236 
	#EXTI_PR_PR3
 
EXTI_PR_PIF3


	)

2237 
	#EXTI_PR_PR4
 
EXTI_PR_PIF4


	)

2238 
	#EXTI_PR_PR5
 
EXTI_PR_PIF5


	)

2239 
	#EXTI_PR_PR6
 
EXTI_PR_PIF6


	)

2240 
	#EXTI_PR_PR7
 
EXTI_PR_PIF7


	)

2241 
	#EXTI_PR_PR8
 
EXTI_PR_PIF8


	)

2242 
	#EXTI_PR_PR9
 
EXTI_PR_PIF9


	)

2243 
	#EXTI_PR_PR10
 
EXTI_PR_PIF10


	)

2244 
	#EXTI_PR_PR11
 
EXTI_PR_PIF11


	)

2245 
	#EXTI_PR_PR12
 
EXTI_PR_PIF12


	)

2246 
	#EXTI_PR_PR13
 
EXTI_PR_PIF13


	)

2247 
	#EXTI_PR_PR14
 
EXTI_PR_PIF14


	)

2248 
	#EXTI_PR_PR15
 
EXTI_PR_PIF15


	)

2249 
	#EXTI_PR_PR16
 
EXTI_PR_PIF16


	)

2250 
	#EXTI_PR_PR17
 
EXTI_PR_PIF17


	)

2251 
	#EXTI_PR_PR19
 
EXTI_PR_PIF19


	)

2252 
	#EXTI_PR_PR20
 
EXTI_PR_PIF20


	)

2253 
	#EXTI_PR_PR21
 
EXTI_PR_PIF21


	)

2254 
	#EXTI_PR_PR22
 
EXTI_PR_PIF22


	)

2263 
	#FLASH_ACR_LATENCY_Pos
 (0U)

	)

2264 
	#FLASH_ACR_LATENCY_Msk
 (0x1U << 
FLASH_ACR_LATENCY_Pos
Ë

	)

2265 
	#FLASH_ACR_LATENCY
 
FLASH_ACR_LATENCY_Msk


	)

2266 
	#FLASH_ACR_PRFTEN_Pos
 (1U)

	)

2267 
	#FLASH_ACR_PRFTEN_Msk
 (0x1U << 
FLASH_ACR_PRFTEN_Pos
Ë

	)

2268 
	#FLASH_ACR_PRFTEN
 
FLASH_ACR_PRFTEN_Msk


	)

2269 
	#FLASH_ACR_SLEEP_PD_Pos
 (3U)

	)

2270 
	#FLASH_ACR_SLEEP_PD_Msk
 (0x1U << 
FLASH_ACR_SLEEP_PD_Pos
Ë

	)

2271 
	#FLASH_ACR_SLEEP_PD
 
FLASH_ACR_SLEEP_PD_Msk


	)

2272 
	#FLASH_ACR_RUN_PD_Pos
 (4U)

	)

2273 
	#FLASH_ACR_RUN_PD_Msk
 (0x1U << 
FLASH_ACR_RUN_PD_Pos
Ë

	)

2274 
	#FLASH_ACR_RUN_PD
 
FLASH_ACR_RUN_PD_Msk


	)

2275 
	#FLASH_ACR_DISAB_BUF_Pos
 (5U)

	)

2276 
	#FLASH_ACR_DISAB_BUF_Msk
 (0x1U << 
FLASH_ACR_DISAB_BUF_Pos
Ë

	)

2277 
	#FLASH_ACR_DISAB_BUF
 
FLASH_ACR_DISAB_BUF_Msk


	)

2278 
	#FLASH_ACR_PRE_READ_Pos
 (6U)

	)

2279 
	#FLASH_ACR_PRE_READ_Msk
 (0x1U << 
FLASH_ACR_PRE_READ_Pos
Ë

	)

2280 
	#FLASH_ACR_PRE_READ
 
FLASH_ACR_PRE_READ_Msk


	)

2283 
	#FLASH_PECR_PELOCK_Pos
 (0U)

	)

2284 
	#FLASH_PECR_PELOCK_Msk
 (0x1U << 
FLASH_PECR_PELOCK_Pos
Ë

	)

2285 
	#FLASH_PECR_PELOCK
 
FLASH_PECR_PELOCK_Msk


	)

2286 
	#FLASH_PECR_PRGLOCK_Pos
 (1U)

	)

2287 
	#FLASH_PECR_PRGLOCK_Msk
 (0x1U << 
FLASH_PECR_PRGLOCK_Pos
Ë

	)

2288 
	#FLASH_PECR_PRGLOCK
 
FLASH_PECR_PRGLOCK_Msk


	)

2289 
	#FLASH_PECR_OPTLOCK_Pos
 (2U)

	)

2290 
	#FLASH_PECR_OPTLOCK_Msk
 (0x1U << 
FLASH_PECR_OPTLOCK_Pos
Ë

	)

2291 
	#FLASH_PECR_OPTLOCK
 
FLASH_PECR_OPTLOCK_Msk


	)

2292 
	#FLASH_PECR_PROG_Pos
 (3U)

	)

2293 
	#FLASH_PECR_PROG_Msk
 (0x1U << 
FLASH_PECR_PROG_Pos
Ë

	)

2294 
	#FLASH_PECR_PROG
 
FLASH_PECR_PROG_Msk


	)

2295 
	#FLASH_PECR_DATA_Pos
 (4U)

	)

2296 
	#FLASH_PECR_DATA_Msk
 (0x1U << 
FLASH_PECR_DATA_Pos
Ë

	)

2297 
	#FLASH_PECR_DATA
 
FLASH_PECR_DATA_Msk


	)

2298 
	#FLASH_PECR_FIX_Pos
 (8U)

	)

2299 
	#FLASH_PECR_FIX_Msk
 (0x1U << 
FLASH_PECR_FIX_Pos
Ë

	)

2300 
	#FLASH_PECR_FIX
 
FLASH_PECR_FIX_Msk


	)

2301 
	#FLASH_PECR_ERASE_Pos
 (9U)

	)

2302 
	#FLASH_PECR_ERASE_Msk
 (0x1U << 
FLASH_PECR_ERASE_Pos
Ë

	)

2303 
	#FLASH_PECR_ERASE
 
FLASH_PECR_ERASE_Msk


	)

2304 
	#FLASH_PECR_FPRG_Pos
 (10U)

	)

2305 
	#FLASH_PECR_FPRG_Msk
 (0x1U << 
FLASH_PECR_FPRG_Pos
Ë

	)

2306 
	#FLASH_PECR_FPRG
 
FLASH_PECR_FPRG_Msk


	)

2307 
	#FLASH_PECR_EOPIE_Pos
 (16U)

	)

2308 
	#FLASH_PECR_EOPIE_Msk
 (0x1U << 
FLASH_PECR_EOPIE_Pos
Ë

	)

2309 
	#FLASH_PECR_EOPIE
 
FLASH_PECR_EOPIE_Msk


	)

2310 
	#FLASH_PECR_ERRIE_Pos
 (17U)

	)

2311 
	#FLASH_PECR_ERRIE_Msk
 (0x1U << 
FLASH_PECR_ERRIE_Pos
Ë

	)

2312 
	#FLASH_PECR_ERRIE
 
FLASH_PECR_ERRIE_Msk


	)

2313 
	#FLASH_PECR_OBL_LAUNCH_Pos
 (18U)

	)

2314 
	#FLASH_PECR_OBL_LAUNCH_Msk
 (0x1U << 
FLASH_PECR_OBL_LAUNCH_Pos
Ë

	)

2315 
	#FLASH_PECR_OBL_LAUNCH
 
FLASH_PECR_OBL_LAUNCH_Msk


	)

2316 
	#FLASH_PECR_HALF_ARRAY_Pos
 (19U)

	)

2317 
	#FLASH_PECR_HALF_ARRAY_Msk
 (0x1U << 
FLASH_PECR_HALF_ARRAY_Pos
Ë

	)

2318 
	#FLASH_PECR_HALF_ARRAY
 
FLASH_PECR_HALF_ARRAY_Msk


	)

2321 
	#FLASH_PDKEYR_PDKEYR_Pos
 (0U)

	)

2322 
	#FLASH_PDKEYR_PDKEYR_Msk
 (0xFFFFFFFFU << 
FLASH_PDKEYR_PDKEYR_Pos
Ë

	)

2323 
	#FLASH_PDKEYR_PDKEYR
 
FLASH_PDKEYR_PDKEYR_Msk


	)

2326 
	#FLASH_PEKEYR_PEKEYR_Pos
 (0U)

	)

2327 
	#FLASH_PEKEYR_PEKEYR_Msk
 (0xFFFFFFFFU << 
FLASH_PEKEYR_PEKEYR_Pos
Ë

	)

2328 
	#FLASH_PEKEYR_PEKEYR
 
FLASH_PEKEYR_PEKEYR_Msk


	)

2331 
	#FLASH_PRGKEYR_PRGKEYR_Pos
 (0U)

	)

2332 
	#FLASH_PRGKEYR_PRGKEYR_Msk
 (0xFFFFFFFFU << 
FLASH_PRGKEYR_PRGKEYR_Pos
Ë

	)

2333 
	#FLASH_PRGKEYR_PRGKEYR
 
FLASH_PRGKEYR_PRGKEYR_Msk


	)

2336 
	#FLASH_OPTKEYR_OPTKEYR_Pos
 (0U)

	)

2337 
	#FLASH_OPTKEYR_OPTKEYR_Msk
 (0xFFFFFFFFU << 
FLASH_OPTKEYR_OPTKEYR_Pos
Ë

	)

2338 
	#FLASH_OPTKEYR_OPTKEYR
 
FLASH_OPTKEYR_OPTKEYR_Msk


	)

2341 
	#FLASH_SR_BSY_Pos
 (0U)

	)

2342 
	#FLASH_SR_BSY_Msk
 (0x1U << 
FLASH_SR_BSY_Pos
Ë

	)

2343 
	#FLASH_SR_BSY
 
FLASH_SR_BSY_Msk


	)

2344 
	#FLASH_SR_EOP_Pos
 (1U)

	)

2345 
	#FLASH_SR_EOP_Msk
 (0x1U << 
FLASH_SR_EOP_Pos
Ë

	)

2346 
	#FLASH_SR_EOP
 
FLASH_SR_EOP_Msk


	)

2347 
	#FLASH_SR_HVOFF_Pos
 (2U)

	)

2348 
	#FLASH_SR_HVOFF_Msk
 (0x1U << 
FLASH_SR_HVOFF_Pos
Ë

	)

2349 
	#FLASH_SR_HVOFF
 
FLASH_SR_HVOFF_Msk


	)

2350 
	#FLASH_SR_READY_Pos
 (3U)

	)

2351 
	#FLASH_SR_READY_Msk
 (0x1U << 
FLASH_SR_READY_Pos
Ë

	)

2352 
	#FLASH_SR_READY
 
FLASH_SR_READY_Msk


	)

2354 
	#FLASH_SR_WRPERR_Pos
 (8U)

	)

2355 
	#FLASH_SR_WRPERR_Msk
 (0x1U << 
FLASH_SR_WRPERR_Pos
Ë

	)

2356 
	#FLASH_SR_WRPERR
 
FLASH_SR_WRPERR_Msk


	)

2357 
	#FLASH_SR_PGAERR_Pos
 (9U)

	)

2358 
	#FLASH_SR_PGAERR_Msk
 (0x1U << 
FLASH_SR_PGAERR_Pos
Ë

	)

2359 
	#FLASH_SR_PGAERR
 
FLASH_SR_PGAERR_Msk


	)

2360 
	#FLASH_SR_SIZERR_Pos
 (10U)

	)

2361 
	#FLASH_SR_SIZERR_Msk
 (0x1U << 
FLASH_SR_SIZERR_Pos
Ë

	)

2362 
	#FLASH_SR_SIZERR
 
FLASH_SR_SIZERR_Msk


	)

2363 
	#FLASH_SR_OPTVERR_Pos
 (11U)

	)

2364 
	#FLASH_SR_OPTVERR_Msk
 (0x1U << 
FLASH_SR_OPTVERR_Pos
Ë

	)

2365 
	#FLASH_SR_OPTVERR
 
FLASH_SR_OPTVERR_Msk


	)

2366 
	#FLASH_SR_RDERR_Pos
 (13U)

	)

2367 
	#FLASH_SR_RDERR_Msk
 (0x1U << 
FLASH_SR_RDERR_Pos
Ë

	)

2368 
	#FLASH_SR_RDERR
 
FLASH_SR_RDERR_Msk


	)

2369 
	#FLASH_SR_NOTZEROERR_Pos
 (16U)

	)

2370 
	#FLASH_SR_NOTZEROERR_Msk
 (0x1U << 
FLASH_SR_NOTZEROERR_Pos
Ë

	)

2371 
	#FLASH_SR_NOTZEROERR
 
FLASH_SR_NOTZEROERR_Msk


	)

2372 
	#FLASH_SR_FWWERR_Pos
 (17U)

	)

2373 
	#FLASH_SR_FWWERR_Msk
 (0x1U << 
FLASH_SR_FWWERR_Pos
Ë

	)

2374 
	#FLASH_SR_FWWERR
 
FLASH_SR_FWWERR_Msk


	)

2377 
	#FLASH_SR_FWWER
 
FLASH_SR_FWWERR


	)

2378 
	#FLASH_SR_ENHV
 
FLASH_SR_HVOFF


	)

2379 
	#FLASH_SR_ENDHV
 
FLASH_SR_HVOFF


	)

2382 
	#FLASH_OPTR_RDPROT_Pos
 (0U)

	)

2383 
	#FLASH_OPTR_RDPROT_Msk
 (0xFFU << 
FLASH_OPTR_RDPROT_Pos
Ë

	)

2384 
	#FLASH_OPTR_RDPROT
 
FLASH_OPTR_RDPROT_Msk


	)

2385 
	#FLASH_OPTR_WPRMOD_Pos
 (8U)

	)

2386 
	#FLASH_OPTR_WPRMOD_Msk
 (0x1U << 
FLASH_OPTR_WPRMOD_Pos
Ë

	)

2387 
	#FLASH_OPTR_WPRMOD
 
FLASH_OPTR_WPRMOD_Msk


	)

2388 
	#FLASH_OPTR_BOR_LEV_Pos
 (16U)

	)

2389 
	#FLASH_OPTR_BOR_LEV_Msk
 (0xFU << 
FLASH_OPTR_BOR_LEV_Pos
Ë

	)

2390 
	#FLASH_OPTR_BOR_LEV
 
FLASH_OPTR_BOR_LEV_Msk


	)

2391 
	#FLASH_OPTR_IWDG_SW_Pos
 (20U)

	)

2392 
	#FLASH_OPTR_IWDG_SW_Msk
 (0x1U << 
FLASH_OPTR_IWDG_SW_Pos
Ë

	)

2393 
	#FLASH_OPTR_IWDG_SW
 
FLASH_OPTR_IWDG_SW_Msk


	)

2394 
	#FLASH_OPTR_nRST_STOP_Pos
 (21U)

	)

2395 
	#FLASH_OPTR_nRST_STOP_Msk
 (0x1U << 
FLASH_OPTR_nRST_STOP_Pos
Ë

	)

2396 
	#FLASH_OPTR_nRST_STOP
 
FLASH_OPTR_nRST_STOP_Msk


	)

2397 
	#FLASH_OPTR_nRST_STDBY_Pos
 (22U)

	)

2398 
	#FLASH_OPTR_nRST_STDBY_Msk
 (0x1U << 
FLASH_OPTR_nRST_STDBY_Pos
Ë

	)

2399 
	#FLASH_OPTR_nRST_STDBY
 
FLASH_OPTR_nRST_STDBY_Msk


	)

2400 
	#FLASH_OPTR_USER_Pos
 (20U)

	)

2401 
	#FLASH_OPTR_USER_Msk
 (0x7U << 
FLASH_OPTR_USER_Pos
Ë

	)

2402 
	#FLASH_OPTR_USER
 
FLASH_OPTR_USER_Msk


	)

2403 
	#FLASH_OPTR_BOOT1_Pos
 (31U)

	)

2404 
	#FLASH_OPTR_BOOT1_Msk
 (0x1U << 
FLASH_OPTR_BOOT1_Pos
Ë

	)

2405 
	#FLASH_OPTR_BOOT1
 
FLASH_OPTR_BOOT1_Msk


	)

2408 
	#FLASH_WRPR_WRP_Pos
 (0U)

	)

2409 
	#FLASH_WRPR_WRP_Msk
 (0xFFFFU << 
FLASH_WRPR_WRP_Pos
Ë

	)

2410 
	#FLASH_WRPR_WRP
 
FLASH_WRPR_WRP_Msk


	)

2418 
	#GPIO_MODER_MODE0_Pos
 (0U)

	)

2419 
	#GPIO_MODER_MODE0_Msk
 (0x3U << 
GPIO_MODER_MODE0_Pos
Ë

	)

2420 
	#GPIO_MODER_MODE0
 
GPIO_MODER_MODE0_Msk


	)

2421 
	#GPIO_MODER_MODE0_0
 (0x1U << 
GPIO_MODER_MODE0_Pos
Ë

	)

2422 
	#GPIO_MODER_MODE0_1
 (0x2U << 
GPIO_MODER_MODE0_Pos
Ë

	)

2423 
	#GPIO_MODER_MODE1_Pos
 (2U)

	)

2424 
	#GPIO_MODER_MODE1_Msk
 (0x3U << 
GPIO_MODER_MODE1_Pos
Ë

	)

2425 
	#GPIO_MODER_MODE1
 
GPIO_MODER_MODE1_Msk


	)

2426 
	#GPIO_MODER_MODE1_0
 (0x1U << 
GPIO_MODER_MODE1_Pos
Ë

	)

2427 
	#GPIO_MODER_MODE1_1
 (0x2U << 
GPIO_MODER_MODE1_Pos
Ë

	)

2428 
	#GPIO_MODER_MODE2_Pos
 (4U)

	)

2429 
	#GPIO_MODER_MODE2_Msk
 (0x3U << 
GPIO_MODER_MODE2_Pos
Ë

	)

2430 
	#GPIO_MODER_MODE2
 
GPIO_MODER_MODE2_Msk


	)

2431 
	#GPIO_MODER_MODE2_0
 (0x1U << 
GPIO_MODER_MODE2_Pos
Ë

	)

2432 
	#GPIO_MODER_MODE2_1
 (0x2U << 
GPIO_MODER_MODE2_Pos
Ë

	)

2433 
	#GPIO_MODER_MODE3_Pos
 (6U)

	)

2434 
	#GPIO_MODER_MODE3_Msk
 (0x3U << 
GPIO_MODER_MODE3_Pos
Ë

	)

2435 
	#GPIO_MODER_MODE3
 
GPIO_MODER_MODE3_Msk


	)

2436 
	#GPIO_MODER_MODE3_0
 (0x1U << 
GPIO_MODER_MODE3_Pos
Ë

	)

2437 
	#GPIO_MODER_MODE3_1
 (0x2U << 
GPIO_MODER_MODE3_Pos
Ë

	)

2438 
	#GPIO_MODER_MODE4_Pos
 (8U)

	)

2439 
	#GPIO_MODER_MODE4_Msk
 (0x3U << 
GPIO_MODER_MODE4_Pos
Ë

	)

2440 
	#GPIO_MODER_MODE4
 
GPIO_MODER_MODE4_Msk


	)

2441 
	#GPIO_MODER_MODE4_0
 (0x1U << 
GPIO_MODER_MODE4_Pos
Ë

	)

2442 
	#GPIO_MODER_MODE4_1
 (0x2U << 
GPIO_MODER_MODE4_Pos
Ë

	)

2443 
	#GPIO_MODER_MODE5_Pos
 (10U)

	)

2444 
	#GPIO_MODER_MODE5_Msk
 (0x3U << 
GPIO_MODER_MODE5_Pos
Ë

	)

2445 
	#GPIO_MODER_MODE5
 
GPIO_MODER_MODE5_Msk


	)

2446 
	#GPIO_MODER_MODE5_0
 (0x1U << 
GPIO_MODER_MODE5_Pos
Ë

	)

2447 
	#GPIO_MODER_MODE5_1
 (0x2U << 
GPIO_MODER_MODE5_Pos
Ë

	)

2448 
	#GPIO_MODER_MODE6_Pos
 (12U)

	)

2449 
	#GPIO_MODER_MODE6_Msk
 (0x3U << 
GPIO_MODER_MODE6_Pos
Ë

	)

2450 
	#GPIO_MODER_MODE6
 
GPIO_MODER_MODE6_Msk


	)

2451 
	#GPIO_MODER_MODE6_0
 (0x1U << 
GPIO_MODER_MODE6_Pos
Ë

	)

2452 
	#GPIO_MODER_MODE6_1
 (0x2U << 
GPIO_MODER_MODE6_Pos
Ë

	)

2453 
	#GPIO_MODER_MODE7_Pos
 (14U)

	)

2454 
	#GPIO_MODER_MODE7_Msk
 (0x3U << 
GPIO_MODER_MODE7_Pos
Ë

	)

2455 
	#GPIO_MODER_MODE7
 
GPIO_MODER_MODE7_Msk


	)

2456 
	#GPIO_MODER_MODE7_0
 (0x1U << 
GPIO_MODER_MODE7_Pos
Ë

	)

2457 
	#GPIO_MODER_MODE7_1
 (0x2U << 
GPIO_MODER_MODE7_Pos
Ë

	)

2458 
	#GPIO_MODER_MODE8_Pos
 (16U)

	)

2459 
	#GPIO_MODER_MODE8_Msk
 (0x3U << 
GPIO_MODER_MODE8_Pos
Ë

	)

2460 
	#GPIO_MODER_MODE8
 
GPIO_MODER_MODE8_Msk


	)

2461 
	#GPIO_MODER_MODE8_0
 (0x1U << 
GPIO_MODER_MODE8_Pos
Ë

	)

2462 
	#GPIO_MODER_MODE8_1
 (0x2U << 
GPIO_MODER_MODE8_Pos
Ë

	)

2463 
	#GPIO_MODER_MODE9_Pos
 (18U)

	)

2464 
	#GPIO_MODER_MODE9_Msk
 (0x3U << 
GPIO_MODER_MODE9_Pos
Ë

	)

2465 
	#GPIO_MODER_MODE9
 
GPIO_MODER_MODE9_Msk


	)

2466 
	#GPIO_MODER_MODE9_0
 (0x1U << 
GPIO_MODER_MODE9_Pos
Ë

	)

2467 
	#GPIO_MODER_MODE9_1
 (0x2U << 
GPIO_MODER_MODE9_Pos
Ë

	)

2468 
	#GPIO_MODER_MODE10_Pos
 (20U)

	)

2469 
	#GPIO_MODER_MODE10_Msk
 (0x3U << 
GPIO_MODER_MODE10_Pos
Ë

	)

2470 
	#GPIO_MODER_MODE10
 
GPIO_MODER_MODE10_Msk


	)

2471 
	#GPIO_MODER_MODE10_0
 (0x1U << 
GPIO_MODER_MODE10_Pos
Ë

	)

2472 
	#GPIO_MODER_MODE10_1
 (0x2U << 
GPIO_MODER_MODE10_Pos
Ë

	)

2473 
	#GPIO_MODER_MODE11_Pos
 (22U)

	)

2474 
	#GPIO_MODER_MODE11_Msk
 (0x3U << 
GPIO_MODER_MODE11_Pos
Ë

	)

2475 
	#GPIO_MODER_MODE11
 
GPIO_MODER_MODE11_Msk


	)

2476 
	#GPIO_MODER_MODE11_0
 (0x1U << 
GPIO_MODER_MODE11_Pos
Ë

	)

2477 
	#GPIO_MODER_MODE11_1
 (0x2U << 
GPIO_MODER_MODE11_Pos
Ë

	)

2478 
	#GPIO_MODER_MODE12_Pos
 (24U)

	)

2479 
	#GPIO_MODER_MODE12_Msk
 (0x3U << 
GPIO_MODER_MODE12_Pos
Ë

	)

2480 
	#GPIO_MODER_MODE12
 
GPIO_MODER_MODE12_Msk


	)

2481 
	#GPIO_MODER_MODE12_0
 (0x1U << 
GPIO_MODER_MODE12_Pos
Ë

	)

2482 
	#GPIO_MODER_MODE12_1
 (0x2U << 
GPIO_MODER_MODE12_Pos
Ë

	)

2483 
	#GPIO_MODER_MODE13_Pos
 (26U)

	)

2484 
	#GPIO_MODER_MODE13_Msk
 (0x3U << 
GPIO_MODER_MODE13_Pos
Ë

	)

2485 
	#GPIO_MODER_MODE13
 
GPIO_MODER_MODE13_Msk


	)

2486 
	#GPIO_MODER_MODE13_0
 (0x1U << 
GPIO_MODER_MODE13_Pos
Ë

	)

2487 
	#GPIO_MODER_MODE13_1
 (0x2U << 
GPIO_MODER_MODE13_Pos
Ë

	)

2488 
	#GPIO_MODER_MODE14_Pos
 (28U)

	)

2489 
	#GPIO_MODER_MODE14_Msk
 (0x3U << 
GPIO_MODER_MODE14_Pos
Ë

	)

2490 
	#GPIO_MODER_MODE14
 
GPIO_MODER_MODE14_Msk


	)

2491 
	#GPIO_MODER_MODE14_0
 (0x1U << 
GPIO_MODER_MODE14_Pos
Ë

	)

2492 
	#GPIO_MODER_MODE14_1
 (0x2U << 
GPIO_MODER_MODE14_Pos
Ë

	)

2493 
	#GPIO_MODER_MODE15_Pos
 (30U)

	)

2494 
	#GPIO_MODER_MODE15_Msk
 (0x3U << 
GPIO_MODER_MODE15_Pos
Ë

	)

2495 
	#GPIO_MODER_MODE15
 
GPIO_MODER_MODE15_Msk


	)

2496 
	#GPIO_MODER_MODE15_0
 (0x1U << 
GPIO_MODER_MODE15_Pos
Ë

	)

2497 
	#GPIO_MODER_MODE15_1
 (0x2U << 
GPIO_MODER_MODE15_Pos
Ë

	)

2500 
	#GPIO_OTYPER_OT_0
 (0x00000001U)

	)

2501 
	#GPIO_OTYPER_OT_1
 (0x00000002U)

	)

2502 
	#GPIO_OTYPER_OT_2
 (0x00000004U)

	)

2503 
	#GPIO_OTYPER_OT_3
 (0x00000008U)

	)

2504 
	#GPIO_OTYPER_OT_4
 (0x00000010U)

	)

2505 
	#GPIO_OTYPER_OT_5
 (0x00000020U)

	)

2506 
	#GPIO_OTYPER_OT_6
 (0x00000040U)

	)

2507 
	#GPIO_OTYPER_OT_7
 (0x00000080U)

	)

2508 
	#GPIO_OTYPER_OT_8
 (0x00000100U)

	)

2509 
	#GPIO_OTYPER_OT_9
 (0x00000200U)

	)

2510 
	#GPIO_OTYPER_OT_10
 (0x00000400U)

	)

2511 
	#GPIO_OTYPER_OT_11
 (0x00000800U)

	)

2512 
	#GPIO_OTYPER_OT_12
 (0x00001000U)

	)

2513 
	#GPIO_OTYPER_OT_13
 (0x00002000U)

	)

2514 
	#GPIO_OTYPER_OT_14
 (0x00004000U)

	)

2515 
	#GPIO_OTYPER_OT_15
 (0x00008000U)

	)

2518 
	#GPIO_OSPEEDER_OSPEED0_Pos
 (0U)

	)

2519 
	#GPIO_OSPEEDER_OSPEED0_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED0_Pos
Ë

	)

2520 
	#GPIO_OSPEEDER_OSPEED0
 
GPIO_OSPEEDER_OSPEED0_Msk


	)

2521 
	#GPIO_OSPEEDER_OSPEED0_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED0_Pos
Ë

	)

2522 
	#GPIO_OSPEEDER_OSPEED0_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED0_Pos
Ë

	)

2523 
	#GPIO_OSPEEDER_OSPEED1_Pos
 (2U)

	)

2524 
	#GPIO_OSPEEDER_OSPEED1_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED1_Pos
Ë

	)

2525 
	#GPIO_OSPEEDER_OSPEED1
 
GPIO_OSPEEDER_OSPEED1_Msk


	)

2526 
	#GPIO_OSPEEDER_OSPEED1_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED1_Pos
Ë

	)

2527 
	#GPIO_OSPEEDER_OSPEED1_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED1_Pos
Ë

	)

2528 
	#GPIO_OSPEEDER_OSPEED2_Pos
 (4U)

	)

2529 
	#GPIO_OSPEEDER_OSPEED2_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED2_Pos
Ë

	)

2530 
	#GPIO_OSPEEDER_OSPEED2
 
GPIO_OSPEEDER_OSPEED2_Msk


	)

2531 
	#GPIO_OSPEEDER_OSPEED2_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED2_Pos
Ë

	)

2532 
	#GPIO_OSPEEDER_OSPEED2_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED2_Pos
Ë

	)

2533 
	#GPIO_OSPEEDER_OSPEED3_Pos
 (6U)

	)

2534 
	#GPIO_OSPEEDER_OSPEED3_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED3_Pos
Ë

	)

2535 
	#GPIO_OSPEEDER_OSPEED3
 
GPIO_OSPEEDER_OSPEED3_Msk


	)

2536 
	#GPIO_OSPEEDER_OSPEED3_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED3_Pos
Ë

	)

2537 
	#GPIO_OSPEEDER_OSPEED3_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED3_Pos
Ë

	)

2538 
	#GPIO_OSPEEDER_OSPEED4_Pos
 (8U)

	)

2539 
	#GPIO_OSPEEDER_OSPEED4_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED4_Pos
Ë

	)

2540 
	#GPIO_OSPEEDER_OSPEED4
 
GPIO_OSPEEDER_OSPEED4_Msk


	)

2541 
	#GPIO_OSPEEDER_OSPEED4_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED4_Pos
Ë

	)

2542 
	#GPIO_OSPEEDER_OSPEED4_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED4_Pos
Ë

	)

2543 
	#GPIO_OSPEEDER_OSPEED5_Pos
 (10U)

	)

2544 
	#GPIO_OSPEEDER_OSPEED5_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED5_Pos
Ë

	)

2545 
	#GPIO_OSPEEDER_OSPEED5
 
GPIO_OSPEEDER_OSPEED5_Msk


	)

2546 
	#GPIO_OSPEEDER_OSPEED5_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED5_Pos
Ë

	)

2547 
	#GPIO_OSPEEDER_OSPEED5_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED5_Pos
Ë

	)

2548 
	#GPIO_OSPEEDER_OSPEED6_Pos
 (12U)

	)

2549 
	#GPIO_OSPEEDER_OSPEED6_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED6_Pos
Ë

	)

2550 
	#GPIO_OSPEEDER_OSPEED6
 
GPIO_OSPEEDER_OSPEED6_Msk


	)

2551 
	#GPIO_OSPEEDER_OSPEED6_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED6_Pos
Ë

	)

2552 
	#GPIO_OSPEEDER_OSPEED6_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED6_Pos
Ë

	)

2553 
	#GPIO_OSPEEDER_OSPEED7_Pos
 (14U)

	)

2554 
	#GPIO_OSPEEDER_OSPEED7_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED7_Pos
Ë

	)

2555 
	#GPIO_OSPEEDER_OSPEED7
 
GPIO_OSPEEDER_OSPEED7_Msk


	)

2556 
	#GPIO_OSPEEDER_OSPEED7_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED7_Pos
Ë

	)

2557 
	#GPIO_OSPEEDER_OSPEED7_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED7_Pos
Ë

	)

2558 
	#GPIO_OSPEEDER_OSPEED8_Pos
 (16U)

	)

2559 
	#GPIO_OSPEEDER_OSPEED8_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED8_Pos
Ë

	)

2560 
	#GPIO_OSPEEDER_OSPEED8
 
GPIO_OSPEEDER_OSPEED8_Msk


	)

2561 
	#GPIO_OSPEEDER_OSPEED8_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED8_Pos
Ë

	)

2562 
	#GPIO_OSPEEDER_OSPEED8_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED8_Pos
Ë

	)

2563 
	#GPIO_OSPEEDER_OSPEED9_Pos
 (18U)

	)

2564 
	#GPIO_OSPEEDER_OSPEED9_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED9_Pos
Ë

	)

2565 
	#GPIO_OSPEEDER_OSPEED9
 
GPIO_OSPEEDER_OSPEED9_Msk


	)

2566 
	#GPIO_OSPEEDER_OSPEED9_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED9_Pos
Ë

	)

2567 
	#GPIO_OSPEEDER_OSPEED9_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED9_Pos
Ë

	)

2568 
	#GPIO_OSPEEDER_OSPEED10_Pos
 (20U)

	)

2569 
	#GPIO_OSPEEDER_OSPEED10_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED10_Pos
Ë

	)

2570 
	#GPIO_OSPEEDER_OSPEED10
 
GPIO_OSPEEDER_OSPEED10_Msk


	)

2571 
	#GPIO_OSPEEDER_OSPEED10_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED10_Pos
Ë

	)

2572 
	#GPIO_OSPEEDER_OSPEED10_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED10_Pos
Ë

	)

2573 
	#GPIO_OSPEEDER_OSPEED11_Pos
 (22U)

	)

2574 
	#GPIO_OSPEEDER_OSPEED11_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED11_Pos
Ë

	)

2575 
	#GPIO_OSPEEDER_OSPEED11
 
GPIO_OSPEEDER_OSPEED11_Msk


	)

2576 
	#GPIO_OSPEEDER_OSPEED11_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED11_Pos
Ë

	)

2577 
	#GPIO_OSPEEDER_OSPEED11_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED11_Pos
Ë

	)

2578 
	#GPIO_OSPEEDER_OSPEED12_Pos
 (24U)

	)

2579 
	#GPIO_OSPEEDER_OSPEED12_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED12_Pos
Ë

	)

2580 
	#GPIO_OSPEEDER_OSPEED12
 
GPIO_OSPEEDER_OSPEED12_Msk


	)

2581 
	#GPIO_OSPEEDER_OSPEED12_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED12_Pos
Ë

	)

2582 
	#GPIO_OSPEEDER_OSPEED12_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED12_Pos
Ë

	)

2583 
	#GPIO_OSPEEDER_OSPEED13_Pos
 (26U)

	)

2584 
	#GPIO_OSPEEDER_OSPEED13_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED13_Pos
Ë

	)

2585 
	#GPIO_OSPEEDER_OSPEED13
 
GPIO_OSPEEDER_OSPEED13_Msk


	)

2586 
	#GPIO_OSPEEDER_OSPEED13_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED13_Pos
Ë

	)

2587 
	#GPIO_OSPEEDER_OSPEED13_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED13_Pos
Ë

	)

2588 
	#GPIO_OSPEEDER_OSPEED14_Pos
 (28U)

	)

2589 
	#GPIO_OSPEEDER_OSPEED14_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED14_Pos
Ë

	)

2590 
	#GPIO_OSPEEDER_OSPEED14
 
GPIO_OSPEEDER_OSPEED14_Msk


	)

2591 
	#GPIO_OSPEEDER_OSPEED14_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED14_Pos
Ë

	)

2592 
	#GPIO_OSPEEDER_OSPEED14_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED14_Pos
Ë

	)

2593 
	#GPIO_OSPEEDER_OSPEED15_Pos
 (30U)

	)

2594 
	#GPIO_OSPEEDER_OSPEED15_Msk
 (0x3U << 
GPIO_OSPEEDER_OSPEED15_Pos
Ë

	)

2595 
	#GPIO_OSPEEDER_OSPEED15
 
GPIO_OSPEEDER_OSPEED15_Msk


	)

2596 
	#GPIO_OSPEEDER_OSPEED15_0
 (0x1U << 
GPIO_OSPEEDER_OSPEED15_Pos
Ë

	)

2597 
	#GPIO_OSPEEDER_OSPEED15_1
 (0x2U << 
GPIO_OSPEEDER_OSPEED15_Pos
Ë

	)

2600 
	#GPIO_PUPDR_PUPD0_Pos
 (0U)

	)

2601 
	#GPIO_PUPDR_PUPD0_Msk
 (0x3U << 
GPIO_PUPDR_PUPD0_Pos
Ë

	)

2602 
	#GPIO_PUPDR_PUPD0
 
GPIO_PUPDR_PUPD0_Msk


	)

2603 
	#GPIO_PUPDR_PUPD0_0
 (0x1U << 
GPIO_PUPDR_PUPD0_Pos
Ë

	)

2604 
	#GPIO_PUPDR_PUPD0_1
 (0x2U << 
GPIO_PUPDR_PUPD0_Pos
Ë

	)

2605 
	#GPIO_PUPDR_PUPD1_Pos
 (2U)

	)

2606 
	#GPIO_PUPDR_PUPD1_Msk
 (0x3U << 
GPIO_PUPDR_PUPD1_Pos
Ë

	)

2607 
	#GPIO_PUPDR_PUPD1
 
GPIO_PUPDR_PUPD1_Msk


	)

2608 
	#GPIO_PUPDR_PUPD1_0
 (0x1U << 
GPIO_PUPDR_PUPD1_Pos
Ë

	)

2609 
	#GPIO_PUPDR_PUPD1_1
 (0x2U << 
GPIO_PUPDR_PUPD1_Pos
Ë

	)

2610 
	#GPIO_PUPDR_PUPD2_Pos
 (4U)

	)

2611 
	#GPIO_PUPDR_PUPD2_Msk
 (0x3U << 
GPIO_PUPDR_PUPD2_Pos
Ë

	)

2612 
	#GPIO_PUPDR_PUPD2
 
GPIO_PUPDR_PUPD2_Msk


	)

2613 
	#GPIO_PUPDR_PUPD2_0
 (0x1U << 
GPIO_PUPDR_PUPD2_Pos
Ë

	)

2614 
	#GPIO_PUPDR_PUPD2_1
 (0x2U << 
GPIO_PUPDR_PUPD2_Pos
Ë

	)

2615 
	#GPIO_PUPDR_PUPD3_Pos
 (6U)

	)

2616 
	#GPIO_PUPDR_PUPD3_Msk
 (0x3U << 
GPIO_PUPDR_PUPD3_Pos
Ë

	)

2617 
	#GPIO_PUPDR_PUPD3
 
GPIO_PUPDR_PUPD3_Msk


	)

2618 
	#GPIO_PUPDR_PUPD3_0
 (0x1U << 
GPIO_PUPDR_PUPD3_Pos
Ë

	)

2619 
	#GPIO_PUPDR_PUPD3_1
 (0x2U << 
GPIO_PUPDR_PUPD3_Pos
Ë

	)

2620 
	#GPIO_PUPDR_PUPD4_Pos
 (8U)

	)

2621 
	#GPIO_PUPDR_PUPD4_Msk
 (0x3U << 
GPIO_PUPDR_PUPD4_Pos
Ë

	)

2622 
	#GPIO_PUPDR_PUPD4
 
GPIO_PUPDR_PUPD4_Msk


	)

2623 
	#GPIO_PUPDR_PUPD4_0
 (0x1U << 
GPIO_PUPDR_PUPD4_Pos
Ë

	)

2624 
	#GPIO_PUPDR_PUPD4_1
 (0x2U << 
GPIO_PUPDR_PUPD4_Pos
Ë

	)

2625 
	#GPIO_PUPDR_PUPD5_Pos
 (10U)

	)

2626 
	#GPIO_PUPDR_PUPD5_Msk
 (0x3U << 
GPIO_PUPDR_PUPD5_Pos
Ë

	)

2627 
	#GPIO_PUPDR_PUPD5
 
GPIO_PUPDR_PUPD5_Msk


	)

2628 
	#GPIO_PUPDR_PUPD5_0
 (0x1U << 
GPIO_PUPDR_PUPD5_Pos
Ë

	)

2629 
	#GPIO_PUPDR_PUPD5_1
 (0x2U << 
GPIO_PUPDR_PUPD5_Pos
Ë

	)

2630 
	#GPIO_PUPDR_PUPD6_Pos
 (12U)

	)

2631 
	#GPIO_PUPDR_PUPD6_Msk
 (0x3U << 
GPIO_PUPDR_PUPD6_Pos
Ë

	)

2632 
	#GPIO_PUPDR_PUPD6
 
GPIO_PUPDR_PUPD6_Msk


	)

2633 
	#GPIO_PUPDR_PUPD6_0
 (0x1U << 
GPIO_PUPDR_PUPD6_Pos
Ë

	)

2634 
	#GPIO_PUPDR_PUPD6_1
 (0x2U << 
GPIO_PUPDR_PUPD6_Pos
Ë

	)

2635 
	#GPIO_PUPDR_PUPD7_Pos
 (14U)

	)

2636 
	#GPIO_PUPDR_PUPD7_Msk
 (0x3U << 
GPIO_PUPDR_PUPD7_Pos
Ë

	)

2637 
	#GPIO_PUPDR_PUPD7
 
GPIO_PUPDR_PUPD7_Msk


	)

2638 
	#GPIO_PUPDR_PUPD7_0
 (0x1U << 
GPIO_PUPDR_PUPD7_Pos
Ë

	)

2639 
	#GPIO_PUPDR_PUPD7_1
 (0x2U << 
GPIO_PUPDR_PUPD7_Pos
Ë

	)

2640 
	#GPIO_PUPDR_PUPD8_Pos
 (16U)

	)

2641 
	#GPIO_PUPDR_PUPD8_Msk
 (0x3U << 
GPIO_PUPDR_PUPD8_Pos
Ë

	)

2642 
	#GPIO_PUPDR_PUPD8
 
GPIO_PUPDR_PUPD8_Msk


	)

2643 
	#GPIO_PUPDR_PUPD8_0
 (0x1U << 
GPIO_PUPDR_PUPD8_Pos
Ë

	)

2644 
	#GPIO_PUPDR_PUPD8_1
 (0x2U << 
GPIO_PUPDR_PUPD8_Pos
Ë

	)

2645 
	#GPIO_PUPDR_PUPD9_Pos
 (18U)

	)

2646 
	#GPIO_PUPDR_PUPD9_Msk
 (0x3U << 
GPIO_PUPDR_PUPD9_Pos
Ë

	)

2647 
	#GPIO_PUPDR_PUPD9
 
GPIO_PUPDR_PUPD9_Msk


	)

2648 
	#GPIO_PUPDR_PUPD9_0
 (0x1U << 
GPIO_PUPDR_PUPD9_Pos
Ë

	)

2649 
	#GPIO_PUPDR_PUPD9_1
 (0x2U << 
GPIO_PUPDR_PUPD9_Pos
Ë

	)

2650 
	#GPIO_PUPDR_PUPD10_Pos
 (20U)

	)

2651 
	#GPIO_PUPDR_PUPD10_Msk
 (0x3U << 
GPIO_PUPDR_PUPD10_Pos
Ë

	)

2652 
	#GPIO_PUPDR_PUPD10
 
GPIO_PUPDR_PUPD10_Msk


	)

2653 
	#GPIO_PUPDR_PUPD10_0
 (0x1U << 
GPIO_PUPDR_PUPD10_Pos
Ë

	)

2654 
	#GPIO_PUPDR_PUPD10_1
 (0x2U << 
GPIO_PUPDR_PUPD10_Pos
Ë

	)

2655 
	#GPIO_PUPDR_PUPD11_Pos
 (22U)

	)

2656 
	#GPIO_PUPDR_PUPD11_Msk
 (0x3U << 
GPIO_PUPDR_PUPD11_Pos
Ë

	)

2657 
	#GPIO_PUPDR_PUPD11
 
GPIO_PUPDR_PUPD11_Msk


	)

2658 
	#GPIO_PUPDR_PUPD11_0
 (0x1U << 
GPIO_PUPDR_PUPD11_Pos
Ë

	)

2659 
	#GPIO_PUPDR_PUPD11_1
 (0x2U << 
GPIO_PUPDR_PUPD11_Pos
Ë

	)

2660 
	#GPIO_PUPDR_PUPD12_Pos
 (24U)

	)

2661 
	#GPIO_PUPDR_PUPD12_Msk
 (0x3U << 
GPIO_PUPDR_PUPD12_Pos
Ë

	)

2662 
	#GPIO_PUPDR_PUPD12
 
GPIO_PUPDR_PUPD12_Msk


	)

2663 
	#GPIO_PUPDR_PUPD12_0
 (0x1U << 
GPIO_PUPDR_PUPD12_Pos
Ë

	)

2664 
	#GPIO_PUPDR_PUPD12_1
 (0x2U << 
GPIO_PUPDR_PUPD12_Pos
Ë

	)

2665 
	#GPIO_PUPDR_PUPD13_Pos
 (26U)

	)

2666 
	#GPIO_PUPDR_PUPD13_Msk
 (0x3U << 
GPIO_PUPDR_PUPD13_Pos
Ë

	)

2667 
	#GPIO_PUPDR_PUPD13
 
GPIO_PUPDR_PUPD13_Msk


	)

2668 
	#GPIO_PUPDR_PUPD13_0
 (0x1U << 
GPIO_PUPDR_PUPD13_Pos
Ë

	)

2669 
	#GPIO_PUPDR_PUPD13_1
 (0x2U << 
GPIO_PUPDR_PUPD13_Pos
Ë

	)

2670 
	#GPIO_PUPDR_PUPD14_Pos
 (28U)

	)

2671 
	#GPIO_PUPDR_PUPD14_Msk
 (0x3U << 
GPIO_PUPDR_PUPD14_Pos
Ë

	)

2672 
	#GPIO_PUPDR_PUPD14
 
GPIO_PUPDR_PUPD14_Msk


	)

2673 
	#GPIO_PUPDR_PUPD14_0
 (0x1U << 
GPIO_PUPDR_PUPD14_Pos
Ë

	)

2674 
	#GPIO_PUPDR_PUPD14_1
 (0x2U << 
GPIO_PUPDR_PUPD14_Pos
Ë

	)

2675 
	#GPIO_PUPDR_PUPD15_Pos
 (30U)

	)

2676 
	#GPIO_PUPDR_PUPD15_Msk
 (0x3U << 
GPIO_PUPDR_PUPD15_Pos
Ë

	)

2677 
	#GPIO_PUPDR_PUPD15
 
GPIO_PUPDR_PUPD15_Msk


	)

2678 
	#GPIO_PUPDR_PUPD15_0
 (0x1U << 
GPIO_PUPDR_PUPD15_Pos
Ë

	)

2679 
	#GPIO_PUPDR_PUPD15_1
 (0x2U << 
GPIO_PUPDR_PUPD15_Pos
Ë

	)

2682 
	#GPIO_IDR_ID0_Pos
 (0U)

	)

2683 
	#GPIO_IDR_ID0_Msk
 (0x1U << 
GPIO_IDR_ID0_Pos
Ë

	)

2684 
	#GPIO_IDR_ID0
 
GPIO_IDR_ID0_Msk


	)

2685 
	#GPIO_IDR_ID1_Pos
 (1U)

	)

2686 
	#GPIO_IDR_ID1_Msk
 (0x1U << 
GPIO_IDR_ID1_Pos
Ë

	)

2687 
	#GPIO_IDR_ID1
 
GPIO_IDR_ID1_Msk


	)

2688 
	#GPIO_IDR_ID2_Pos
 (2U)

	)

2689 
	#GPIO_IDR_ID2_Msk
 (0x1U << 
GPIO_IDR_ID2_Pos
Ë

	)

2690 
	#GPIO_IDR_ID2
 
GPIO_IDR_ID2_Msk


	)

2691 
	#GPIO_IDR_ID3_Pos
 (3U)

	)

2692 
	#GPIO_IDR_ID3_Msk
 (0x1U << 
GPIO_IDR_ID3_Pos
Ë

	)

2693 
	#GPIO_IDR_ID3
 
GPIO_IDR_ID3_Msk


	)

2694 
	#GPIO_IDR_ID4_Pos
 (4U)

	)

2695 
	#GPIO_IDR_ID4_Msk
 (0x1U << 
GPIO_IDR_ID4_Pos
Ë

	)

2696 
	#GPIO_IDR_ID4
 
GPIO_IDR_ID4_Msk


	)

2697 
	#GPIO_IDR_ID5_Pos
 (5U)

	)

2698 
	#GPIO_IDR_ID5_Msk
 (0x1U << 
GPIO_IDR_ID5_Pos
Ë

	)

2699 
	#GPIO_IDR_ID5
 
GPIO_IDR_ID5_Msk


	)

2700 
	#GPIO_IDR_ID6_Pos
 (6U)

	)

2701 
	#GPIO_IDR_ID6_Msk
 (0x1U << 
GPIO_IDR_ID6_Pos
Ë

	)

2702 
	#GPIO_IDR_ID6
 
GPIO_IDR_ID6_Msk


	)

2703 
	#GPIO_IDR_ID7_Pos
 (7U)

	)

2704 
	#GPIO_IDR_ID7_Msk
 (0x1U << 
GPIO_IDR_ID7_Pos
Ë

	)

2705 
	#GPIO_IDR_ID7
 
GPIO_IDR_ID7_Msk


	)

2706 
	#GPIO_IDR_ID8_Pos
 (8U)

	)

2707 
	#GPIO_IDR_ID8_Msk
 (0x1U << 
GPIO_IDR_ID8_Pos
Ë

	)

2708 
	#GPIO_IDR_ID8
 
GPIO_IDR_ID8_Msk


	)

2709 
	#GPIO_IDR_ID9_Pos
 (9U)

	)

2710 
	#GPIO_IDR_ID9_Msk
 (0x1U << 
GPIO_IDR_ID9_Pos
Ë

	)

2711 
	#GPIO_IDR_ID9
 
GPIO_IDR_ID9_Msk


	)

2712 
	#GPIO_IDR_ID10_Pos
 (10U)

	)

2713 
	#GPIO_IDR_ID10_Msk
 (0x1U << 
GPIO_IDR_ID10_Pos
Ë

	)

2714 
	#GPIO_IDR_ID10
 
GPIO_IDR_ID10_Msk


	)

2715 
	#GPIO_IDR_ID11_Pos
 (11U)

	)

2716 
	#GPIO_IDR_ID11_Msk
 (0x1U << 
GPIO_IDR_ID11_Pos
Ë

	)

2717 
	#GPIO_IDR_ID11
 
GPIO_IDR_ID11_Msk


	)

2718 
	#GPIO_IDR_ID12_Pos
 (12U)

	)

2719 
	#GPIO_IDR_ID12_Msk
 (0x1U << 
GPIO_IDR_ID12_Pos
Ë

	)

2720 
	#GPIO_IDR_ID12
 
GPIO_IDR_ID12_Msk


	)

2721 
	#GPIO_IDR_ID13_Pos
 (13U)

	)

2722 
	#GPIO_IDR_ID13_Msk
 (0x1U << 
GPIO_IDR_ID13_Pos
Ë

	)

2723 
	#GPIO_IDR_ID13
 
GPIO_IDR_ID13_Msk


	)

2724 
	#GPIO_IDR_ID14_Pos
 (14U)

	)

2725 
	#GPIO_IDR_ID14_Msk
 (0x1U << 
GPIO_IDR_ID14_Pos
Ë

	)

2726 
	#GPIO_IDR_ID14
 
GPIO_IDR_ID14_Msk


	)

2727 
	#GPIO_IDR_ID15_Pos
 (15U)

	)

2728 
	#GPIO_IDR_ID15_Msk
 (0x1U << 
GPIO_IDR_ID15_Pos
Ë

	)

2729 
	#GPIO_IDR_ID15
 
GPIO_IDR_ID15_Msk


	)

2732 
	#GPIO_ODR_OD0_Pos
 (0U)

	)

2733 
	#GPIO_ODR_OD0_Msk
 (0x1U << 
GPIO_ODR_OD0_Pos
Ë

	)

2734 
	#GPIO_ODR_OD0
 
GPIO_ODR_OD0_Msk


	)

2735 
	#GPIO_ODR_OD1_Pos
 (1U)

	)

2736 
	#GPIO_ODR_OD1_Msk
 (0x1U << 
GPIO_ODR_OD1_Pos
Ë

	)

2737 
	#GPIO_ODR_OD1
 
GPIO_ODR_OD1_Msk


	)

2738 
	#GPIO_ODR_OD2_Pos
 (2U)

	)

2739 
	#GPIO_ODR_OD2_Msk
 (0x1U << 
GPIO_ODR_OD2_Pos
Ë

	)

2740 
	#GPIO_ODR_OD2
 
GPIO_ODR_OD2_Msk


	)

2741 
	#GPIO_ODR_OD3_Pos
 (3U)

	)

2742 
	#GPIO_ODR_OD3_Msk
 (0x1U << 
GPIO_ODR_OD3_Pos
Ë

	)

2743 
	#GPIO_ODR_OD3
 
GPIO_ODR_OD3_Msk


	)

2744 
	#GPIO_ODR_OD4_Pos
 (4U)

	)

2745 
	#GPIO_ODR_OD4_Msk
 (0x1U << 
GPIO_ODR_OD4_Pos
Ë

	)

2746 
	#GPIO_ODR_OD4
 
GPIO_ODR_OD4_Msk


	)

2747 
	#GPIO_ODR_OD5_Pos
 (5U)

	)

2748 
	#GPIO_ODR_OD5_Msk
 (0x1U << 
GPIO_ODR_OD5_Pos
Ë

	)

2749 
	#GPIO_ODR_OD5
 
GPIO_ODR_OD5_Msk


	)

2750 
	#GPIO_ODR_OD6_Pos
 (6U)

	)

2751 
	#GPIO_ODR_OD6_Msk
 (0x1U << 
GPIO_ODR_OD6_Pos
Ë

	)

2752 
	#GPIO_ODR_OD6
 
GPIO_ODR_OD6_Msk


	)

2753 
	#GPIO_ODR_OD7_Pos
 (7U)

	)

2754 
	#GPIO_ODR_OD7_Msk
 (0x1U << 
GPIO_ODR_OD7_Pos
Ë

	)

2755 
	#GPIO_ODR_OD7
 
GPIO_ODR_OD7_Msk


	)

2756 
	#GPIO_ODR_OD8_Pos
 (8U)

	)

2757 
	#GPIO_ODR_OD8_Msk
 (0x1U << 
GPIO_ODR_OD8_Pos
Ë

	)

2758 
	#GPIO_ODR_OD8
 
GPIO_ODR_OD8_Msk


	)

2759 
	#GPIO_ODR_OD9_Pos
 (9U)

	)

2760 
	#GPIO_ODR_OD9_Msk
 (0x1U << 
GPIO_ODR_OD9_Pos
Ë

	)

2761 
	#GPIO_ODR_OD9
 
GPIO_ODR_OD9_Msk


	)

2762 
	#GPIO_ODR_OD10_Pos
 (10U)

	)

2763 
	#GPIO_ODR_OD10_Msk
 (0x1U << 
GPIO_ODR_OD10_Pos
Ë

	)

2764 
	#GPIO_ODR_OD10
 
GPIO_ODR_OD10_Msk


	)

2765 
	#GPIO_ODR_OD11_Pos
 (11U)

	)

2766 
	#GPIO_ODR_OD11_Msk
 (0x1U << 
GPIO_ODR_OD11_Pos
Ë

	)

2767 
	#GPIO_ODR_OD11
 
GPIO_ODR_OD11_Msk


	)

2768 
	#GPIO_ODR_OD12_Pos
 (12U)

	)

2769 
	#GPIO_ODR_OD12_Msk
 (0x1U << 
GPIO_ODR_OD12_Pos
Ë

	)

2770 
	#GPIO_ODR_OD12
 
GPIO_ODR_OD12_Msk


	)

2771 
	#GPIO_ODR_OD13_Pos
 (13U)

	)

2772 
	#GPIO_ODR_OD13_Msk
 (0x1U << 
GPIO_ODR_OD13_Pos
Ë

	)

2773 
	#GPIO_ODR_OD13
 
GPIO_ODR_OD13_Msk


	)

2774 
	#GPIO_ODR_OD14_Pos
 (14U)

	)

2775 
	#GPIO_ODR_OD14_Msk
 (0x1U << 
GPIO_ODR_OD14_Pos
Ë

	)

2776 
	#GPIO_ODR_OD14
 
GPIO_ODR_OD14_Msk


	)

2777 
	#GPIO_ODR_OD15_Pos
 (15U)

	)

2778 
	#GPIO_ODR_OD15_Msk
 (0x1U << 
GPIO_ODR_OD15_Pos
Ë

	)

2779 
	#GPIO_ODR_OD15
 
GPIO_ODR_OD15_Msk


	)

2782 
	#GPIO_BSRR_BS_0
 (0x00000001U)

	)

2783 
	#GPIO_BSRR_BS_1
 (0x00000002U)

	)

2784 
	#GPIO_BSRR_BS_2
 (0x00000004U)

	)

2785 
	#GPIO_BSRR_BS_3
 (0x00000008U)

	)

2786 
	#GPIO_BSRR_BS_4
 (0x00000010U)

	)

2787 
	#GPIO_BSRR_BS_5
 (0x00000020U)

	)

2788 
	#GPIO_BSRR_BS_6
 (0x00000040U)

	)

2789 
	#GPIO_BSRR_BS_7
 (0x00000080U)

	)

2790 
	#GPIO_BSRR_BS_8
 (0x00000100U)

	)

2791 
	#GPIO_BSRR_BS_9
 (0x00000200U)

	)

2792 
	#GPIO_BSRR_BS_10
 (0x00000400U)

	)

2793 
	#GPIO_BSRR_BS_11
 (0x00000800U)

	)

2794 
	#GPIO_BSRR_BS_12
 (0x00001000U)

	)

2795 
	#GPIO_BSRR_BS_13
 (0x00002000U)

	)

2796 
	#GPIO_BSRR_BS_14
 (0x00004000U)

	)

2797 
	#GPIO_BSRR_BS_15
 (0x00008000U)

	)

2798 
	#GPIO_BSRR_BR_0
 (0x00010000U)

	)

2799 
	#GPIO_BSRR_BR_1
 (0x00020000U)

	)

2800 
	#GPIO_BSRR_BR_2
 (0x00040000U)

	)

2801 
	#GPIO_BSRR_BR_3
 (0x00080000U)

	)

2802 
	#GPIO_BSRR_BR_4
 (0x00100000U)

	)

2803 
	#GPIO_BSRR_BR_5
 (0x00200000U)

	)

2804 
	#GPIO_BSRR_BR_6
 (0x00400000U)

	)

2805 
	#GPIO_BSRR_BR_7
 (0x00800000U)

	)

2806 
	#GPIO_BSRR_BR_8
 (0x01000000U)

	)

2807 
	#GPIO_BSRR_BR_9
 (0x02000000U)

	)

2808 
	#GPIO_BSRR_BR_10
 (0x04000000U)

	)

2809 
	#GPIO_BSRR_BR_11
 (0x08000000U)

	)

2810 
	#GPIO_BSRR_BR_12
 (0x10000000U)

	)

2811 
	#GPIO_BSRR_BR_13
 (0x20000000U)

	)

2812 
	#GPIO_BSRR_BR_14
 (0x40000000U)

	)

2813 
	#GPIO_BSRR_BR_15
 (0x80000000U)

	)

2816 
	#GPIO_LCKR_LCK0_Pos
 (0U)

	)

2817 
	#GPIO_LCKR_LCK0_Msk
 (0x1U << 
GPIO_LCKR_LCK0_Pos
Ë

	)

2818 
	#GPIO_LCKR_LCK0
 
GPIO_LCKR_LCK0_Msk


	)

2819 
	#GPIO_LCKR_LCK1_Pos
 (1U)

	)

2820 
	#GPIO_LCKR_LCK1_Msk
 (0x1U << 
GPIO_LCKR_LCK1_Pos
Ë

	)

2821 
	#GPIO_LCKR_LCK1
 
GPIO_LCKR_LCK1_Msk


	)

2822 
	#GPIO_LCKR_LCK2_Pos
 (2U)

	)

2823 
	#GPIO_LCKR_LCK2_Msk
 (0x1U << 
GPIO_LCKR_LCK2_Pos
Ë

	)

2824 
	#GPIO_LCKR_LCK2
 
GPIO_LCKR_LCK2_Msk


	)

2825 
	#GPIO_LCKR_LCK3_Pos
 (3U)

	)

2826 
	#GPIO_LCKR_LCK3_Msk
 (0x1U << 
GPIO_LCKR_LCK3_Pos
Ë

	)

2827 
	#GPIO_LCKR_LCK3
 
GPIO_LCKR_LCK3_Msk


	)

2828 
	#GPIO_LCKR_LCK4_Pos
 (4U)

	)

2829 
	#GPIO_LCKR_LCK4_Msk
 (0x1U << 
GPIO_LCKR_LCK4_Pos
Ë

	)

2830 
	#GPIO_LCKR_LCK4
 
GPIO_LCKR_LCK4_Msk


	)

2831 
	#GPIO_LCKR_LCK5_Pos
 (5U)

	)

2832 
	#GPIO_LCKR_LCK5_Msk
 (0x1U << 
GPIO_LCKR_LCK5_Pos
Ë

	)

2833 
	#GPIO_LCKR_LCK5
 
GPIO_LCKR_LCK5_Msk


	)

2834 
	#GPIO_LCKR_LCK6_Pos
 (6U)

	)

2835 
	#GPIO_LCKR_LCK6_Msk
 (0x1U << 
GPIO_LCKR_LCK6_Pos
Ë

	)

2836 
	#GPIO_LCKR_LCK6
 
GPIO_LCKR_LCK6_Msk


	)

2837 
	#GPIO_LCKR_LCK7_Pos
 (7U)

	)

2838 
	#GPIO_LCKR_LCK7_Msk
 (0x1U << 
GPIO_LCKR_LCK7_Pos
Ë

	)

2839 
	#GPIO_LCKR_LCK7
 
GPIO_LCKR_LCK7_Msk


	)

2840 
	#GPIO_LCKR_LCK8_Pos
 (8U)

	)

2841 
	#GPIO_LCKR_LCK8_Msk
 (0x1U << 
GPIO_LCKR_LCK8_Pos
Ë

	)

2842 
	#GPIO_LCKR_LCK8
 
GPIO_LCKR_LCK8_Msk


	)

2843 
	#GPIO_LCKR_LCK9_Pos
 (9U)

	)

2844 
	#GPIO_LCKR_LCK9_Msk
 (0x1U << 
GPIO_LCKR_LCK9_Pos
Ë

	)

2845 
	#GPIO_LCKR_LCK9
 
GPIO_LCKR_LCK9_Msk


	)

2846 
	#GPIO_LCKR_LCK10_Pos
 (10U)

	)

2847 
	#GPIO_LCKR_LCK10_Msk
 (0x1U << 
GPIO_LCKR_LCK10_Pos
Ë

	)

2848 
	#GPIO_LCKR_LCK10
 
GPIO_LCKR_LCK10_Msk


	)

2849 
	#GPIO_LCKR_LCK11_Pos
 (11U)

	)

2850 
	#GPIO_LCKR_LCK11_Msk
 (0x1U << 
GPIO_LCKR_LCK11_Pos
Ë

	)

2851 
	#GPIO_LCKR_LCK11
 
GPIO_LCKR_LCK11_Msk


	)

2852 
	#GPIO_LCKR_LCK12_Pos
 (12U)

	)

2853 
	#GPIO_LCKR_LCK12_Msk
 (0x1U << 
GPIO_LCKR_LCK12_Pos
Ë

	)

2854 
	#GPIO_LCKR_LCK12
 
GPIO_LCKR_LCK12_Msk


	)

2855 
	#GPIO_LCKR_LCK13_Pos
 (13U)

	)

2856 
	#GPIO_LCKR_LCK13_Msk
 (0x1U << 
GPIO_LCKR_LCK13_Pos
Ë

	)

2857 
	#GPIO_LCKR_LCK13
 
GPIO_LCKR_LCK13_Msk


	)

2858 
	#GPIO_LCKR_LCK14_Pos
 (14U)

	)

2859 
	#GPIO_LCKR_LCK14_Msk
 (0x1U << 
GPIO_LCKR_LCK14_Pos
Ë

	)

2860 
	#GPIO_LCKR_LCK14
 
GPIO_LCKR_LCK14_Msk


	)

2861 
	#GPIO_LCKR_LCK15_Pos
 (15U)

	)

2862 
	#GPIO_LCKR_LCK15_Msk
 (0x1U << 
GPIO_LCKR_LCK15_Pos
Ë

	)

2863 
	#GPIO_LCKR_LCK15
 
GPIO_LCKR_LCK15_Msk


	)

2864 
	#GPIO_LCKR_LCKK_Pos
 (16U)

	)

2865 
	#GPIO_LCKR_LCKK_Msk
 (0x1U << 
GPIO_LCKR_LCKK_Pos
Ë

	)

2866 
	#GPIO_LCKR_LCKK
 
GPIO_LCKR_LCKK_Msk


	)

2869 
	#GPIO_AFRL_AFRL0_Pos
 (0U)

	)

2870 
	#GPIO_AFRL_AFRL0_Msk
 (0xFU << 
GPIO_AFRL_AFRL0_Pos
Ë

	)

2871 
	#GPIO_AFRL_AFRL0
 
GPIO_AFRL_AFRL0_Msk


	)

2872 
	#GPIO_AFRL_AFRL1_Pos
 (4U)

	)

2873 
	#GPIO_AFRL_AFRL1_Msk
 (0xFU << 
GPIO_AFRL_AFRL1_Pos
Ë

	)

2874 
	#GPIO_AFRL_AFRL1
 
GPIO_AFRL_AFRL1_Msk


	)

2875 
	#GPIO_AFRL_AFRL2_Pos
 (8U)

	)

2876 
	#GPIO_AFRL_AFRL2_Msk
 (0xFU << 
GPIO_AFRL_AFRL2_Pos
Ë

	)

2877 
	#GPIO_AFRL_AFRL2
 
GPIO_AFRL_AFRL2_Msk


	)

2878 
	#GPIO_AFRL_AFRL3_Pos
 (12U)

	)

2879 
	#GPIO_AFRL_AFRL3_Msk
 (0xFU << 
GPIO_AFRL_AFRL3_Pos
Ë

	)

2880 
	#GPIO_AFRL_AFRL3
 
GPIO_AFRL_AFRL3_Msk


	)

2881 
	#GPIO_AFRL_AFRL4_Pos
 (16U)

	)

2882 
	#GPIO_AFRL_AFRL4_Msk
 (0xFU << 
GPIO_AFRL_AFRL4_Pos
Ë

	)

2883 
	#GPIO_AFRL_AFRL4
 
GPIO_AFRL_AFRL4_Msk


	)

2884 
	#GPIO_AFRL_AFRL5_Pos
 (20U)

	)

2885 
	#GPIO_AFRL_AFRL5_Msk
 (0xFU << 
GPIO_AFRL_AFRL5_Pos
Ë

	)

2886 
	#GPIO_AFRL_AFRL5
 
GPIO_AFRL_AFRL5_Msk


	)

2887 
	#GPIO_AFRL_AFRL6_Pos
 (24U)

	)

2888 
	#GPIO_AFRL_AFRL6_Msk
 (0xFU << 
GPIO_AFRL_AFRL6_Pos
Ë

	)

2889 
	#GPIO_AFRL_AFRL6
 
GPIO_AFRL_AFRL6_Msk


	)

2890 
	#GPIO_AFRL_AFRL7_Pos
 (28U)

	)

2891 
	#GPIO_AFRL_AFRL7_Msk
 (0xFU << 
GPIO_AFRL_AFRL7_Pos
Ë

	)

2892 
	#GPIO_AFRL_AFRL7
 
GPIO_AFRL_AFRL7_Msk


	)

2895 
	#GPIO_AFRH_AFRH0_Pos
 (0U)

	)

2896 
	#GPIO_AFRH_AFRH0_Msk
 (0xFU << 
GPIO_AFRH_AFRH0_Pos
Ë

	)

2897 
	#GPIO_AFRH_AFRH0
 
GPIO_AFRH_AFRH0_Msk


	)

2898 
	#GPIO_AFRH_AFRH1_Pos
 (4U)

	)

2899 
	#GPIO_AFRH_AFRH1_Msk
 (0xFU << 
GPIO_AFRH_AFRH1_Pos
Ë

	)

2900 
	#GPIO_AFRH_AFRH1
 
GPIO_AFRH_AFRH1_Msk


	)

2901 
	#GPIO_AFRH_AFRH2_Pos
 (8U)

	)

2902 
	#GPIO_AFRH_AFRH2_Msk
 (0xFU << 
GPIO_AFRH_AFRH2_Pos
Ë

	)

2903 
	#GPIO_AFRH_AFRH2
 
GPIO_AFRH_AFRH2_Msk


	)

2904 
	#GPIO_AFRH_AFRH3_Pos
 (12U)

	)

2905 
	#GPIO_AFRH_AFRH3_Msk
 (0xFU << 
GPIO_AFRH_AFRH3_Pos
Ë

	)

2906 
	#GPIO_AFRH_AFRH3
 
GPIO_AFRH_AFRH3_Msk


	)

2907 
	#GPIO_AFRH_AFRH4_Pos
 (16U)

	)

2908 
	#GPIO_AFRH_AFRH4_Msk
 (0xFU << 
GPIO_AFRH_AFRH4_Pos
Ë

	)

2909 
	#GPIO_AFRH_AFRH4
 
GPIO_AFRH_AFRH4_Msk


	)

2910 
	#GPIO_AFRH_AFRH5_Pos
 (20U)

	)

2911 
	#GPIO_AFRH_AFRH5_Msk
 (0xFU << 
GPIO_AFRH_AFRH5_Pos
Ë

	)

2912 
	#GPIO_AFRH_AFRH5
 
GPIO_AFRH_AFRH5_Msk


	)

2913 
	#GPIO_AFRH_AFRH6_Pos
 (24U)

	)

2914 
	#GPIO_AFRH_AFRH6_Msk
 (0xFU << 
GPIO_AFRH_AFRH6_Pos
Ë

	)

2915 
	#GPIO_AFRH_AFRH6
 
GPIO_AFRH_AFRH6_Msk


	)

2916 
	#GPIO_AFRH_AFRH7_Pos
 (28U)

	)

2917 
	#GPIO_AFRH_AFRH7_Msk
 (0xFU << 
GPIO_AFRH_AFRH7_Pos
Ë

	)

2918 
	#GPIO_AFRH_AFRH7
 
GPIO_AFRH_AFRH7_Msk


	)

2921 
	#GPIO_BRR_BR_0
 (0x00000001U)

	)

2922 
	#GPIO_BRR_BR_1
 (0x00000002U)

	)

2923 
	#GPIO_BRR_BR_2
 (0x00000004U)

	)

2924 
	#GPIO_BRR_BR_3
 (0x00000008U)

	)

2925 
	#GPIO_BRR_BR_4
 (0x00000010U)

	)

2926 
	#GPIO_BRR_BR_5
 (0x00000020U)

	)

2927 
	#GPIO_BRR_BR_6
 (0x00000040U)

	)

2928 
	#GPIO_BRR_BR_7
 (0x00000080U)

	)

2929 
	#GPIO_BRR_BR_8
 (0x00000100U)

	)

2930 
	#GPIO_BRR_BR_9
 (0x00000200U)

	)

2931 
	#GPIO_BRR_BR_10
 (0x00000400U)

	)

2932 
	#GPIO_BRR_BR_11
 (0x00000800U)

	)

2933 
	#GPIO_BRR_BR_12
 (0x00001000U)

	)

2934 
	#GPIO_BRR_BR_13
 (0x00002000U)

	)

2935 
	#GPIO_BRR_BR_14
 (0x00004000U)

	)

2936 
	#GPIO_BRR_BR_15
 (0x00008000U)

	)

2945 
	#I2C_CR1_PE_Pos
 (0U)

	)

2946 
	#I2C_CR1_PE_Msk
 (0x1U << 
I2C_CR1_PE_Pos
Ë

	)

2947 
	#I2C_CR1_PE
 
I2C_CR1_PE_Msk


	)

2948 
	#I2C_CR1_TXIE_Pos
 (1U)

	)

2949 
	#I2C_CR1_TXIE_Msk
 (0x1U << 
I2C_CR1_TXIE_Pos
Ë

	)

2950 
	#I2C_CR1_TXIE
 
I2C_CR1_TXIE_Msk


	)

2951 
	#I2C_CR1_RXIE_Pos
 (2U)

	)

2952 
	#I2C_CR1_RXIE_Msk
 (0x1U << 
I2C_CR1_RXIE_Pos
Ë

	)

2953 
	#I2C_CR1_RXIE
 
I2C_CR1_RXIE_Msk


	)

2954 
	#I2C_CR1_ADDRIE_Pos
 (3U)

	)

2955 
	#I2C_CR1_ADDRIE_Msk
 (0x1U << 
I2C_CR1_ADDRIE_Pos
Ë

	)

2956 
	#I2C_CR1_ADDRIE
 
I2C_CR1_ADDRIE_Msk


	)

2957 
	#I2C_CR1_NACKIE_Pos
 (4U)

	)

2958 
	#I2C_CR1_NACKIE_Msk
 (0x1U << 
I2C_CR1_NACKIE_Pos
Ë

	)

2959 
	#I2C_CR1_NACKIE
 
I2C_CR1_NACKIE_Msk


	)

2960 
	#I2C_CR1_STOPIE_Pos
 (5U)

	)

2961 
	#I2C_CR1_STOPIE_Msk
 (0x1U << 
I2C_CR1_STOPIE_Pos
Ë

	)

2962 
	#I2C_CR1_STOPIE
 
I2C_CR1_STOPIE_Msk


	)

2963 
	#I2C_CR1_TCIE_Pos
 (6U)

	)

2964 
	#I2C_CR1_TCIE_Msk
 (0x1U << 
I2C_CR1_TCIE_Pos
Ë

	)

2965 
	#I2C_CR1_TCIE
 
I2C_CR1_TCIE_Msk


	)

2966 
	#I2C_CR1_ERRIE_Pos
 (7U)

	)

2967 
	#I2C_CR1_ERRIE_Msk
 (0x1U << 
I2C_CR1_ERRIE_Pos
Ë

	)

2968 
	#I2C_CR1_ERRIE
 
I2C_CR1_ERRIE_Msk


	)

2969 
	#I2C_CR1_DNF_Pos
 (8U)

	)

2970 
	#I2C_CR1_DNF_Msk
 (0xFU << 
I2C_CR1_DNF_Pos
Ë

	)

2971 
	#I2C_CR1_DNF
 
I2C_CR1_DNF_Msk


	)

2972 
	#I2C_CR1_ANFOFF_Pos
 (12U)

	)

2973 
	#I2C_CR1_ANFOFF_Msk
 (0x1U << 
I2C_CR1_ANFOFF_Pos
Ë

	)

2974 
	#I2C_CR1_ANFOFF
 
I2C_CR1_ANFOFF_Msk


	)

2975 
	#I2C_CR1_TXDMAEN_Pos
 (14U)

	)

2976 
	#I2C_CR1_TXDMAEN_Msk
 (0x1U << 
I2C_CR1_TXDMAEN_Pos
Ë

	)

2977 
	#I2C_CR1_TXDMAEN
 
I2C_CR1_TXDMAEN_Msk


	)

2978 
	#I2C_CR1_RXDMAEN_Pos
 (15U)

	)

2979 
	#I2C_CR1_RXDMAEN_Msk
 (0x1U << 
I2C_CR1_RXDMAEN_Pos
Ë

	)

2980 
	#I2C_CR1_RXDMAEN
 
I2C_CR1_RXDMAEN_Msk


	)

2981 
	#I2C_CR1_SBC_Pos
 (16U)

	)

2982 
	#I2C_CR1_SBC_Msk
 (0x1U << 
I2C_CR1_SBC_Pos
Ë

	)

2983 
	#I2C_CR1_SBC
 
I2C_CR1_SBC_Msk


	)

2984 
	#I2C_CR1_NOSTRETCH_Pos
 (17U)

	)

2985 
	#I2C_CR1_NOSTRETCH_Msk
 (0x1U << 
I2C_CR1_NOSTRETCH_Pos
Ë

	)

2986 
	#I2C_CR1_NOSTRETCH
 
I2C_CR1_NOSTRETCH_Msk


	)

2987 
	#I2C_CR1_WUPEN_Pos
 (18U)

	)

2988 
	#I2C_CR1_WUPEN_Msk
 (0x1U << 
I2C_CR1_WUPEN_Pos
Ë

	)

2989 
	#I2C_CR1_WUPEN
 
I2C_CR1_WUPEN_Msk


	)

2990 
	#I2C_CR1_GCEN_Pos
 (19U)

	)

2991 
	#I2C_CR1_GCEN_Msk
 (0x1U << 
I2C_CR1_GCEN_Pos
Ë

	)

2992 
	#I2C_CR1_GCEN
 
I2C_CR1_GCEN_Msk


	)

2993 
	#I2C_CR1_SMBHEN_Pos
 (20U)

	)

2994 
	#I2C_CR1_SMBHEN_Msk
 (0x1U << 
I2C_CR1_SMBHEN_Pos
Ë

	)

2995 
	#I2C_CR1_SMBHEN
 
I2C_CR1_SMBHEN_Msk


	)

2996 
	#I2C_CR1_SMBDEN_Pos
 (21U)

	)

2997 
	#I2C_CR1_SMBDEN_Msk
 (0x1U << 
I2C_CR1_SMBDEN_Pos
Ë

	)

2998 
	#I2C_CR1_SMBDEN
 
I2C_CR1_SMBDEN_Msk


	)

2999 
	#I2C_CR1_ALERTEN_Pos
 (22U)

	)

3000 
	#I2C_CR1_ALERTEN_Msk
 (0x1U << 
I2C_CR1_ALERTEN_Pos
Ë

	)

3001 
	#I2C_CR1_ALERTEN
 
I2C_CR1_ALERTEN_Msk


	)

3002 
	#I2C_CR1_PECEN_Pos
 (23U)

	)

3003 
	#I2C_CR1_PECEN_Msk
 (0x1U << 
I2C_CR1_PECEN_Pos
Ë

	)

3004 
	#I2C_CR1_PECEN
 
I2C_CR1_PECEN_Msk


	)

3007 
	#I2C_CR2_SADD_Pos
 (0U)

	)

3008 
	#I2C_CR2_SADD_Msk
 (0x3FFU << 
I2C_CR2_SADD_Pos
Ë

	)

3009 
	#I2C_CR2_SADD
 
I2C_CR2_SADD_Msk


	)

3010 
	#I2C_CR2_RD_WRN_Pos
 (10U)

	)

3011 
	#I2C_CR2_RD_WRN_Msk
 (0x1U << 
I2C_CR2_RD_WRN_Pos
Ë

	)

3012 
	#I2C_CR2_RD_WRN
 
I2C_CR2_RD_WRN_Msk


	)

3013 
	#I2C_CR2_ADD10_Pos
 (11U)

	)

3014 
	#I2C_CR2_ADD10_Msk
 (0x1U << 
I2C_CR2_ADD10_Pos
Ë

	)

3015 
	#I2C_CR2_ADD10
 
I2C_CR2_ADD10_Msk


	)

3016 
	#I2C_CR2_HEAD10R_Pos
 (12U)

	)

3017 
	#I2C_CR2_HEAD10R_Msk
 (0x1U << 
I2C_CR2_HEAD10R_Pos
Ë

	)

3018 
	#I2C_CR2_HEAD10R
 
I2C_CR2_HEAD10R_Msk


	)

3019 
	#I2C_CR2_START_Pos
 (13U)

	)

3020 
	#I2C_CR2_START_Msk
 (0x1U << 
I2C_CR2_START_Pos
Ë

	)

3021 
	#I2C_CR2_START
 
I2C_CR2_START_Msk


	)

3022 
	#I2C_CR2_STOP_Pos
 (14U)

	)

3023 
	#I2C_CR2_STOP_Msk
 (0x1U << 
I2C_CR2_STOP_Pos
Ë

	)

3024 
	#I2C_CR2_STOP
 
I2C_CR2_STOP_Msk


	)

3025 
	#I2C_CR2_NACK_Pos
 (15U)

	)

3026 
	#I2C_CR2_NACK_Msk
 (0x1U << 
I2C_CR2_NACK_Pos
Ë

	)

3027 
	#I2C_CR2_NACK
 
I2C_CR2_NACK_Msk


	)

3028 
	#I2C_CR2_NBYTES_Pos
 (16U)

	)

3029 
	#I2C_CR2_NBYTES_Msk
 (0xFFU << 
I2C_CR2_NBYTES_Pos
Ë

	)

3030 
	#I2C_CR2_NBYTES
 
I2C_CR2_NBYTES_Msk


	)

3031 
	#I2C_CR2_RELOAD_Pos
 (24U)

	)

3032 
	#I2C_CR2_RELOAD_Msk
 (0x1U << 
I2C_CR2_RELOAD_Pos
Ë

	)

3033 
	#I2C_CR2_RELOAD
 
I2C_CR2_RELOAD_Msk


	)

3034 
	#I2C_CR2_AUTOEND_Pos
 (25U)

	)

3035 
	#I2C_CR2_AUTOEND_Msk
 (0x1U << 
I2C_CR2_AUTOEND_Pos
Ë

	)

3036 
	#I2C_CR2_AUTOEND
 
I2C_CR2_AUTOEND_Msk


	)

3037 
	#I2C_CR2_PECBYTE_Pos
 (26U)

	)

3038 
	#I2C_CR2_PECBYTE_Msk
 (0x1U << 
I2C_CR2_PECBYTE_Pos
Ë

	)

3039 
	#I2C_CR2_PECBYTE
 
I2C_CR2_PECBYTE_Msk


	)

3042 
	#I2C_OAR1_OA1_Pos
 (0U)

	)

3043 
	#I2C_OAR1_OA1_Msk
 (0x3FFU << 
I2C_OAR1_OA1_Pos
Ë

	)

3044 
	#I2C_OAR1_OA1
 
I2C_OAR1_OA1_Msk


	)

3045 
	#I2C_OAR1_OA1MODE_Pos
 (10U)

	)

3046 
	#I2C_OAR1_OA1MODE_Msk
 (0x1U << 
I2C_OAR1_OA1MODE_Pos
Ë

	)

3047 
	#I2C_OAR1_OA1MODE
 
I2C_OAR1_OA1MODE_Msk


	)

3048 
	#I2C_OAR1_OA1EN_Pos
 (15U)

	)

3049 
	#I2C_OAR1_OA1EN_Msk
 (0x1U << 
I2C_OAR1_OA1EN_Pos
Ë

	)

3050 
	#I2C_OAR1_OA1EN
 
I2C_OAR1_OA1EN_Msk


	)

3053 
	#I2C_OAR2_OA2_Pos
 (1U)

	)

3054 
	#I2C_OAR2_OA2_Msk
 (0x7FU << 
I2C_OAR2_OA2_Pos
Ë

	)

3055 
	#I2C_OAR2_OA2
 
I2C_OAR2_OA2_Msk


	)

3056 
	#I2C_OAR2_OA2MSK_Pos
 (8U)

	)

3057 
	#I2C_OAR2_OA2MSK_Msk
 (0x7U << 
I2C_OAR2_OA2MSK_Pos
Ë

	)

3058 
	#I2C_OAR2_OA2MSK
 
I2C_OAR2_OA2MSK_Msk


	)

3059 
	#I2C_OAR2_OA2NOMASK
 (0x00000000UË

	)

3060 
	#I2C_OAR2_OA2MASK01_Pos
 (8U)

	)

3061 
	#I2C_OAR2_OA2MASK01_Msk
 (0x1U << 
I2C_OAR2_OA2MASK01_Pos
Ë

	)

3062 
	#I2C_OAR2_OA2MASK01
 
I2C_OAR2_OA2MASK01_Msk


	)

3063 
	#I2C_OAR2_OA2MASK02_Pos
 (9U)

	)

3064 
	#I2C_OAR2_OA2MASK02_Msk
 (0x1U << 
I2C_OAR2_OA2MASK02_Pos
Ë

	)

3065 
	#I2C_OAR2_OA2MASK02
 
I2C_OAR2_OA2MASK02_Msk


	)

3066 
	#I2C_OAR2_OA2MASK03_Pos
 (8U)

	)

3067 
	#I2C_OAR2_OA2MASK03_Msk
 (0x3U << 
I2C_OAR2_OA2MASK03_Pos
Ë

	)

3068 
	#I2C_OAR2_OA2MASK03
 
I2C_OAR2_OA2MASK03_Msk


	)

3069 
	#I2C_OAR2_OA2MASK04_Pos
 (10U)

	)

3070 
	#I2C_OAR2_OA2MASK04_Msk
 (0x1U << 
I2C_OAR2_OA2MASK04_Pos
Ë

	)

3071 
	#I2C_OAR2_OA2MASK04
 
I2C_OAR2_OA2MASK04_Msk


	)

3072 
	#I2C_OAR2_OA2MASK05_Pos
 (8U)

	)

3073 
	#I2C_OAR2_OA2MASK05_Msk
 (0x5U << 
I2C_OAR2_OA2MASK05_Pos
Ë

	)

3074 
	#I2C_OAR2_OA2MASK05
 
I2C_OAR2_OA2MASK05_Msk


	)

3075 
	#I2C_OAR2_OA2MASK06_Pos
 (9U)

	)

3076 
	#I2C_OAR2_OA2MASK06_Msk
 (0x3U << 
I2C_OAR2_OA2MASK06_Pos
Ë

	)

3077 
	#I2C_OAR2_OA2MASK06
 
I2C_OAR2_OA2MASK06_Msk


	)

3078 
	#I2C_OAR2_OA2MASK07_Pos
 (8U)

	)

3079 
	#I2C_OAR2_OA2MASK07_Msk
 (0x7U << 
I2C_OAR2_OA2MASK07_Pos
Ë

	)

3080 
	#I2C_OAR2_OA2MASK07
 
I2C_OAR2_OA2MASK07_Msk


	)

3081 
	#I2C_OAR2_OA2EN_Pos
 (15U)

	)

3082 
	#I2C_OAR2_OA2EN_Msk
 (0x1U << 
I2C_OAR2_OA2EN_Pos
Ë

	)

3083 
	#I2C_OAR2_OA2EN
 
I2C_OAR2_OA2EN_Msk


	)

3086 
	#I2C_TIMINGR_SCLL_Pos
 (0U)

	)

3087 
	#I2C_TIMINGR_SCLL_Msk
 (0xFFU << 
I2C_TIMINGR_SCLL_Pos
Ë

	)

3088 
	#I2C_TIMINGR_SCLL
 
I2C_TIMINGR_SCLL_Msk


	)

3089 
	#I2C_TIMINGR_SCLH_Pos
 (8U)

	)

3090 
	#I2C_TIMINGR_SCLH_Msk
 (0xFFU << 
I2C_TIMINGR_SCLH_Pos
Ë

	)

3091 
	#I2C_TIMINGR_SCLH
 
I2C_TIMINGR_SCLH_Msk


	)

3092 
	#I2C_TIMINGR_SDADEL_Pos
 (16U)

	)

3093 
	#I2C_TIMINGR_SDADEL_Msk
 (0xFU << 
I2C_TIMINGR_SDADEL_Pos
Ë

	)

3094 
	#I2C_TIMINGR_SDADEL
 
I2C_TIMINGR_SDADEL_Msk


	)

3095 
	#I2C_TIMINGR_SCLDEL_Pos
 (20U)

	)

3096 
	#I2C_TIMINGR_SCLDEL_Msk
 (0xFU << 
I2C_TIMINGR_SCLDEL_Pos
Ë

	)

3097 
	#I2C_TIMINGR_SCLDEL
 
I2C_TIMINGR_SCLDEL_Msk


	)

3098 
	#I2C_TIMINGR_PRESC_Pos
 (28U)

	)

3099 
	#I2C_TIMINGR_PRESC_Msk
 (0xFU << 
I2C_TIMINGR_PRESC_Pos
Ë

	)

3100 
	#I2C_TIMINGR_PRESC
 
I2C_TIMINGR_PRESC_Msk


	)

3103 
	#I2C_TIMEOUTR_TIMEOUTA_Pos
 (0U)

	)

3104 
	#I2C_TIMEOUTR_TIMEOUTA_Msk
 (0xFFFU << 
I2C_TIMEOUTR_TIMEOUTA_Pos
Ë

	)

3105 
	#I2C_TIMEOUTR_TIMEOUTA
 
I2C_TIMEOUTR_TIMEOUTA_Msk


	)

3106 
	#I2C_TIMEOUTR_TIDLE_Pos
 (12U)

	)

3107 
	#I2C_TIMEOUTR_TIDLE_Msk
 (0x1U << 
I2C_TIMEOUTR_TIDLE_Pos
Ë

	)

3108 
	#I2C_TIMEOUTR_TIDLE
 
I2C_TIMEOUTR_TIDLE_Msk


	)

3109 
	#I2C_TIMEOUTR_TIMOUTEN_Pos
 (15U)

	)

3110 
	#I2C_TIMEOUTR_TIMOUTEN_Msk
 (0x1U << 
I2C_TIMEOUTR_TIMOUTEN_Pos
Ë

	)

3111 
	#I2C_TIMEOUTR_TIMOUTEN
 
I2C_TIMEOUTR_TIMOUTEN_Msk


	)

3112 
	#I2C_TIMEOUTR_TIMEOUTB_Pos
 (16U)

	)

3113 
	#I2C_TIMEOUTR_TIMEOUTB_Msk
 (0xFFFU << 
I2C_TIMEOUTR_TIMEOUTB_Pos
Ë

	)

3114 
	#I2C_TIMEOUTR_TIMEOUTB
 
I2C_TIMEOUTR_TIMEOUTB_Msk


	)

3115 
	#I2C_TIMEOUTR_TEXTEN_Pos
 (31U)

	)

3116 
	#I2C_TIMEOUTR_TEXTEN_Msk
 (0x1U << 
I2C_TIMEOUTR_TEXTEN_Pos
Ë

	)

3117 
	#I2C_TIMEOUTR_TEXTEN
 
I2C_TIMEOUTR_TEXTEN_Msk


	)

3120 
	#I2C_ISR_TXE_Pos
 (0U)

	)

3121 
	#I2C_ISR_TXE_Msk
 (0x1U << 
I2C_ISR_TXE_Pos
Ë

	)

3122 
	#I2C_ISR_TXE
 
I2C_ISR_TXE_Msk


	)

3123 
	#I2C_ISR_TXIS_Pos
 (1U)

	)

3124 
	#I2C_ISR_TXIS_Msk
 (0x1U << 
I2C_ISR_TXIS_Pos
Ë

	)

3125 
	#I2C_ISR_TXIS
 
I2C_ISR_TXIS_Msk


	)

3126 
	#I2C_ISR_RXNE_Pos
 (2U)

	)

3127 
	#I2C_ISR_RXNE_Msk
 (0x1U << 
I2C_ISR_RXNE_Pos
Ë

	)

3128 
	#I2C_ISR_RXNE
 
I2C_ISR_RXNE_Msk


	)

3129 
	#I2C_ISR_ADDR_Pos
 (3U)

	)

3130 
	#I2C_ISR_ADDR_Msk
 (0x1U << 
I2C_ISR_ADDR_Pos
Ë

	)

3131 
	#I2C_ISR_ADDR
 
I2C_ISR_ADDR_Msk


	)

3132 
	#I2C_ISR_NACKF_Pos
 (4U)

	)

3133 
	#I2C_ISR_NACKF_Msk
 (0x1U << 
I2C_ISR_NACKF_Pos
Ë

	)

3134 
	#I2C_ISR_NACKF
 
I2C_ISR_NACKF_Msk


	)

3135 
	#I2C_ISR_STOPF_Pos
 (5U)

	)

3136 
	#I2C_ISR_STOPF_Msk
 (0x1U << 
I2C_ISR_STOPF_Pos
Ë

	)

3137 
	#I2C_ISR_STOPF
 
I2C_ISR_STOPF_Msk


	)

3138 
	#I2C_ISR_TC_Pos
 (6U)

	)

3139 
	#I2C_ISR_TC_Msk
 (0x1U << 
I2C_ISR_TC_Pos
Ë

	)

3140 
	#I2C_ISR_TC
 
I2C_ISR_TC_Msk


	)

3141 
	#I2C_ISR_TCR_Pos
 (7U)

	)

3142 
	#I2C_ISR_TCR_Msk
 (0x1U << 
I2C_ISR_TCR_Pos
Ë

	)

3143 
	#I2C_ISR_TCR
 
I2C_ISR_TCR_Msk


	)

3144 
	#I2C_ISR_BERR_Pos
 (8U)

	)

3145 
	#I2C_ISR_BERR_Msk
 (0x1U << 
I2C_ISR_BERR_Pos
Ë

	)

3146 
	#I2C_ISR_BERR
 
I2C_ISR_BERR_Msk


	)

3147 
	#I2C_ISR_ARLO_Pos
 (9U)

	)

3148 
	#I2C_ISR_ARLO_Msk
 (0x1U << 
I2C_ISR_ARLO_Pos
Ë

	)

3149 
	#I2C_ISR_ARLO
 
I2C_ISR_ARLO_Msk


	)

3150 
	#I2C_ISR_OVR_Pos
 (10U)

	)

3151 
	#I2C_ISR_OVR_Msk
 (0x1U << 
I2C_ISR_OVR_Pos
Ë

	)

3152 
	#I2C_ISR_OVR
 
I2C_ISR_OVR_Msk


	)

3153 
	#I2C_ISR_PECERR_Pos
 (11U)

	)

3154 
	#I2C_ISR_PECERR_Msk
 (0x1U << 
I2C_ISR_PECERR_Pos
Ë

	)

3155 
	#I2C_ISR_PECERR
 
I2C_ISR_PECERR_Msk


	)

3156 
	#I2C_ISR_TIMEOUT_Pos
 (12U)

	)

3157 
	#I2C_ISR_TIMEOUT_Msk
 (0x1U << 
I2C_ISR_TIMEOUT_Pos
Ë

	)

3158 
	#I2C_ISR_TIMEOUT
 
I2C_ISR_TIMEOUT_Msk


	)

3159 
	#I2C_ISR_ALERT_Pos
 (13U)

	)

3160 
	#I2C_ISR_ALERT_Msk
 (0x1U << 
I2C_ISR_ALERT_Pos
Ë

	)

3161 
	#I2C_ISR_ALERT
 
I2C_ISR_ALERT_Msk


	)

3162 
	#I2C_ISR_BUSY_Pos
 (15U)

	)

3163 
	#I2C_ISR_BUSY_Msk
 (0x1U << 
I2C_ISR_BUSY_Pos
Ë

	)

3164 
	#I2C_ISR_BUSY
 
I2C_ISR_BUSY_Msk


	)

3165 
	#I2C_ISR_DIR_Pos
 (16U)

	)

3166 
	#I2C_ISR_DIR_Msk
 (0x1U << 
I2C_ISR_DIR_Pos
Ë

	)

3167 
	#I2C_ISR_DIR
 
I2C_ISR_DIR_Msk


	)

3168 
	#I2C_ISR_ADDCODE_Pos
 (17U)

	)

3169 
	#I2C_ISR_ADDCODE_Msk
 (0x7FU << 
I2C_ISR_ADDCODE_Pos
Ë

	)

3170 
	#I2C_ISR_ADDCODE
 
I2C_ISR_ADDCODE_Msk


	)

3173 
	#I2C_ICR_ADDRCF_Pos
 (3U)

	)

3174 
	#I2C_ICR_ADDRCF_Msk
 (0x1U << 
I2C_ICR_ADDRCF_Pos
Ë

	)

3175 
	#I2C_ICR_ADDRCF
 
I2C_ICR_ADDRCF_Msk


	)

3176 
	#I2C_ICR_NACKCF_Pos
 (4U)

	)

3177 
	#I2C_ICR_NACKCF_Msk
 (0x1U << 
I2C_ICR_NACKCF_Pos
Ë

	)

3178 
	#I2C_ICR_NACKCF
 
I2C_ICR_NACKCF_Msk


	)

3179 
	#I2C_ICR_STOPCF_Pos
 (5U)

	)

3180 
	#I2C_ICR_STOPCF_Msk
 (0x1U << 
I2C_ICR_STOPCF_Pos
Ë

	)

3181 
	#I2C_ICR_STOPCF
 
I2C_ICR_STOPCF_Msk


	)

3182 
	#I2C_ICR_BERRCF_Pos
 (8U)

	)

3183 
	#I2C_ICR_BERRCF_Msk
 (0x1U << 
I2C_ICR_BERRCF_Pos
Ë

	)

3184 
	#I2C_ICR_BERRCF
 
I2C_ICR_BERRCF_Msk


	)

3185 
	#I2C_ICR_ARLOCF_Pos
 (9U)

	)

3186 
	#I2C_ICR_ARLOCF_Msk
 (0x1U << 
I2C_ICR_ARLOCF_Pos
Ë

	)

3187 
	#I2C_ICR_ARLOCF
 
I2C_ICR_ARLOCF_Msk


	)

3188 
	#I2C_ICR_OVRCF_Pos
 (10U)

	)

3189 
	#I2C_ICR_OVRCF_Msk
 (0x1U << 
I2C_ICR_OVRCF_Pos
Ë

	)

3190 
	#I2C_ICR_OVRCF
 
I2C_ICR_OVRCF_Msk


	)

3191 
	#I2C_ICR_PECCF_Pos
 (11U)

	)

3192 
	#I2C_ICR_PECCF_Msk
 (0x1U << 
I2C_ICR_PECCF_Pos
Ë

	)

3193 
	#I2C_ICR_PECCF
 
I2C_ICR_PECCF_Msk


	)

3194 
	#I2C_ICR_TIMOUTCF_Pos
 (12U)

	)

3195 
	#I2C_ICR_TIMOUTCF_Msk
 (0x1U << 
I2C_ICR_TIMOUTCF_Pos
Ë

	)

3196 
	#I2C_ICR_TIMOUTCF
 
I2C_ICR_TIMOUTCF_Msk


	)

3197 
	#I2C_ICR_ALERTCF_Pos
 (13U)

	)

3198 
	#I2C_ICR_ALERTCF_Msk
 (0x1U << 
I2C_ICR_ALERTCF_Pos
Ë

	)

3199 
	#I2C_ICR_ALERTCF
 
I2C_ICR_ALERTCF_Msk


	)

3202 
	#I2C_PECR_PEC_Pos
 (0U)

	)

3203 
	#I2C_PECR_PEC_Msk
 (0xFFU << 
I2C_PECR_PEC_Pos
Ë

	)

3204 
	#I2C_PECR_PEC
 
I2C_PECR_PEC_Msk


	)

3207 
	#I2C_RXDR_RXDATA_Pos
 (0U)

	)

3208 
	#I2C_RXDR_RXDATA_Msk
 (0xFFU << 
I2C_RXDR_RXDATA_Pos
Ë

	)

3209 
	#I2C_RXDR_RXDATA
 
I2C_RXDR_RXDATA_Msk


	)

3212 
	#I2C_TXDR_TXDATA_Pos
 (0U)

	)

3213 
	#I2C_TXDR_TXDATA_Msk
 (0xFFU << 
I2C_TXDR_TXDATA_Pos
Ë

	)

3214 
	#I2C_TXDR_TXDATA
 
I2C_TXDR_TXDATA_Msk


	)

3222 
	#IWDG_KR_KEY_Pos
 (0U)

	)

3223 
	#IWDG_KR_KEY_Msk
 (0xFFFFU << 
IWDG_KR_KEY_Pos
Ë

	)

3224 
	#IWDG_KR_KEY
 
IWDG_KR_KEY_Msk


	)

3227 
	#IWDG_PR_PR_Pos
 (0U)

	)

3228 
	#IWDG_PR_PR_Msk
 (0x7U << 
IWDG_PR_PR_Pos
Ë

	)

3229 
	#IWDG_PR_PR
 
IWDG_PR_PR_Msk


	)

3230 
	#IWDG_PR_PR_0
 (0x1U << 
IWDG_PR_PR_Pos
Ë

	)

3231 
	#IWDG_PR_PR_1
 (0x2U << 
IWDG_PR_PR_Pos
Ë

	)

3232 
	#IWDG_PR_PR_2
 (0x4U << 
IWDG_PR_PR_Pos
Ë

	)

3235 
	#IWDG_RLR_RL_Pos
 (0U)

	)

3236 
	#IWDG_RLR_RL_Msk
 (0xFFFU << 
IWDG_RLR_RL_Pos
Ë

	)

3237 
	#IWDG_RLR_RL
 
IWDG_RLR_RL_Msk


	)

3240 
	#IWDG_SR_PVU_Pos
 (0U)

	)

3241 
	#IWDG_SR_PVU_Msk
 (0x1U << 
IWDG_SR_PVU_Pos
Ë

	)

3242 
	#IWDG_SR_PVU
 
IWDG_SR_PVU_Msk


	)

3243 
	#IWDG_SR_RVU_Pos
 (1U)

	)

3244 
	#IWDG_SR_RVU_Msk
 (0x1U << 
IWDG_SR_RVU_Pos
Ë

	)

3245 
	#IWDG_SR_RVU
 
IWDG_SR_RVU_Msk


	)

3246 
	#IWDG_SR_WVU_Pos
 (2U)

	)

3247 
	#IWDG_SR_WVU_Msk
 (0x1U << 
IWDG_SR_WVU_Pos
Ë

	)

3248 
	#IWDG_SR_WVU
 
IWDG_SR_WVU_Msk


	)

3251 
	#IWDG_WINR_WIN_Pos
 (0U)

	)

3252 
	#IWDG_WINR_WIN_Msk
 (0xFFFU << 
IWDG_WINR_WIN_Pos
Ë

	)

3253 
	#IWDG_WINR_WIN
 
IWDG_WINR_WIN_Msk


	)

3262 
	#LCD_CR_LCDEN_Pos
 (0U)

	)

3263 
	#LCD_CR_LCDEN_Msk
 (0x1U << 
LCD_CR_LCDEN_Pos
Ë

	)

3264 
	#LCD_CR_LCDEN
 
LCD_CR_LCDEN_Msk


	)

3265 
	#LCD_CR_VSEL_Pos
 (1U)

	)

3266 
	#LCD_CR_VSEL_Msk
 (0x1U << 
LCD_CR_VSEL_Pos
Ë

	)

3267 
	#LCD_CR_VSEL
 
LCD_CR_VSEL_Msk


	)

3269 
	#LCD_CR_DUTY_Pos
 (2U)

	)

3270 
	#LCD_CR_DUTY_Msk
 (0x7U << 
LCD_CR_DUTY_Pos
Ë

	)

3271 
	#LCD_CR_DUTY
 
LCD_CR_DUTY_Msk


	)

3272 
	#LCD_CR_DUTY_0
 (0x1U << 
LCD_CR_DUTY_Pos
Ë

	)

3273 
	#LCD_CR_DUTY_1
 (0x2U << 
LCD_CR_DUTY_Pos
Ë

	)

3274 
	#LCD_CR_DUTY_2
 (0x4U << 
LCD_CR_DUTY_Pos
Ë

	)

3276 
	#LCD_CR_BIAS_Pos
 (5U)

	)

3277 
	#LCD_CR_BIAS_Msk
 (0x3U << 
LCD_CR_BIAS_Pos
Ë

	)

3278 
	#LCD_CR_BIAS
 
LCD_CR_BIAS_Msk


	)

3279 
	#LCD_CR_BIAS_0
 (0x1U << 
LCD_CR_BIAS_Pos
Ë

	)

3280 
	#LCD_CR_BIAS_1
 (0x2U << 
LCD_CR_BIAS_Pos
Ë

	)

3282 
	#LCD_CR_MUX_SEG_Pos
 (7U)

	)

3283 
	#LCD_CR_MUX_SEG_Msk
 (0x1U << 
LCD_CR_MUX_SEG_Pos
Ë

	)

3284 
	#LCD_CR_MUX_SEG
 
LCD_CR_MUX_SEG_Msk


	)

3286 
	#LCD_CR_BUFEN_Pos
 (8U)

	)

3287 
	#LCD_CR_BUFEN_Msk
 (0x1U << 
LCD_CR_BUFEN_Pos
Ë

	)

3288 
	#LCD_CR_BUFEN
 
LCD_CR_BUFEN_Msk


	)

3291 
	#LCD_FCR_HD_Pos
 (0U)

	)

3292 
	#LCD_FCR_HD_Msk
 (0x1U << 
LCD_FCR_HD_Pos
Ë

	)

3293 
	#LCD_FCR_HD
 
LCD_FCR_HD_Msk


	)

3294 
	#LCD_FCR_SOFIE_Pos
 (1U)

	)

3295 
	#LCD_FCR_SOFIE_Msk
 (0x1U << 
LCD_FCR_SOFIE_Pos
Ë

	)

3296 
	#LCD_FCR_SOFIE
 
LCD_FCR_SOFIE_Msk


	)

3297 
	#LCD_FCR_UDDIE_Pos
 (3U)

	)

3298 
	#LCD_FCR_UDDIE_Msk
 (0x1U << 
LCD_FCR_UDDIE_Pos
Ë

	)

3299 
	#LCD_FCR_UDDIE
 
LCD_FCR_UDDIE_Msk


	)

3301 
	#LCD_FCR_PON_Pos
 (4U)

	)

3302 
	#LCD_FCR_PON_Msk
 (0x7U << 
LCD_FCR_PON_Pos
Ë

	)

3303 
	#LCD_FCR_PON
 
LCD_FCR_PON_Msk


	)

3304 
	#LCD_FCR_PON_0
 (0x1U << 
LCD_FCR_PON_Pos
Ë

	)

3305 
	#LCD_FCR_PON_1
 (0x2U << 
LCD_FCR_PON_Pos
Ë

	)

3306 
	#LCD_FCR_PON_2
 (0x4U << 
LCD_FCR_PON_Pos
Ë

	)

3308 
	#LCD_FCR_DEAD_Pos
 (7U)

	)

3309 
	#LCD_FCR_DEAD_Msk
 (0x7U << 
LCD_FCR_DEAD_Pos
Ë

	)

3310 
	#LCD_FCR_DEAD
 
LCD_FCR_DEAD_Msk


	)

3311 
	#LCD_FCR_DEAD_0
 (0x1U << 
LCD_FCR_DEAD_Pos
Ë

	)

3312 
	#LCD_FCR_DEAD_1
 (0x2U << 
LCD_FCR_DEAD_Pos
Ë

	)

3313 
	#LCD_FCR_DEAD_2
 (0x4U << 
LCD_FCR_DEAD_Pos
Ë

	)

3315 
	#LCD_FCR_CC_Pos
 (10U)

	)

3316 
	#LCD_FCR_CC_Msk
 (0x7U << 
LCD_FCR_CC_Pos
Ë

	)

3317 
	#LCD_FCR_CC
 
LCD_FCR_CC_Msk


	)

3318 
	#LCD_FCR_CC_0
 (0x1U << 
LCD_FCR_CC_Pos
Ë

	)

3319 
	#LCD_FCR_CC_1
 (0x2U << 
LCD_FCR_CC_Pos
Ë

	)

3320 
	#LCD_FCR_CC_2
 (0x4U << 
LCD_FCR_CC_Pos
Ë

	)

3322 
	#LCD_FCR_BLINKF_Pos
 (13U)

	)

3323 
	#LCD_FCR_BLINKF_Msk
 (0x7U << 
LCD_FCR_BLINKF_Pos
Ë

	)

3324 
	#LCD_FCR_BLINKF
 
LCD_FCR_BLINKF_Msk


	)

3325 
	#LCD_FCR_BLINKF_0
 (0x1U << 
LCD_FCR_BLINKF_Pos
Ë

	)

3326 
	#LCD_FCR_BLINKF_1
 (0x2U << 
LCD_FCR_BLINKF_Pos
Ë

	)

3327 
	#LCD_FCR_BLINKF_2
 (0x4U << 
LCD_FCR_BLINKF_Pos
Ë

	)

3329 
	#LCD_FCR_BLINK_Pos
 (16U)

	)

3330 
	#LCD_FCR_BLINK_Msk
 (0x3U << 
LCD_FCR_BLINK_Pos
Ë

	)

3331 
	#LCD_FCR_BLINK
 
LCD_FCR_BLINK_Msk


	)

3332 
	#LCD_FCR_BLINK_0
 (0x1U << 
LCD_FCR_BLINK_Pos
Ë

	)

3333 
	#LCD_FCR_BLINK_1
 (0x2U << 
LCD_FCR_BLINK_Pos
Ë

	)

3335 
	#LCD_FCR_DIV_Pos
 (18U)

	)

3336 
	#LCD_FCR_DIV_Msk
 (0xFU << 
LCD_FCR_DIV_Pos
Ë

	)

3337 
	#LCD_FCR_DIV
 
LCD_FCR_DIV_Msk


	)

3338 
	#LCD_FCR_PS_Pos
 (22U)

	)

3339 
	#LCD_FCR_PS_Msk
 (0xFU << 
LCD_FCR_PS_Pos
Ë

	)

3340 
	#LCD_FCR_PS
 
LCD_FCR_PS_Msk


	)

3343 
	#LCD_SR_ENS_Pos
 (0U)

	)

3344 
	#LCD_SR_ENS_Msk
 (0x1U << 
LCD_SR_ENS_Pos
Ë

	)

3345 
	#LCD_SR_ENS
 
LCD_SR_ENS_Msk


	)

3346 
	#LCD_SR_SOF_Pos
 (1U)

	)

3347 
	#LCD_SR_SOF_Msk
 (0x1U << 
LCD_SR_SOF_Pos
Ë

	)

3348 
	#LCD_SR_SOF
 
LCD_SR_SOF_Msk


	)

3349 
	#LCD_SR_UDR_Pos
 (2U)

	)

3350 
	#LCD_SR_UDR_Msk
 (0x1U << 
LCD_SR_UDR_Pos
Ë

	)

3351 
	#LCD_SR_UDR
 
LCD_SR_UDR_Msk


	)

3352 
	#LCD_SR_UDD_Pos
 (3U)

	)

3353 
	#LCD_SR_UDD_Msk
 (0x1U << 
LCD_SR_UDD_Pos
Ë

	)

3354 
	#LCD_SR_UDD
 
LCD_SR_UDD_Msk


	)

3355 
	#LCD_SR_RDY_Pos
 (4U)

	)

3356 
	#LCD_SR_RDY_Msk
 (0x1U << 
LCD_SR_RDY_Pos
Ë

	)

3357 
	#LCD_SR_RDY
 
LCD_SR_RDY_Msk


	)

3358 
	#LCD_SR_FCRSR_Pos
 (5U)

	)

3359 
	#LCD_SR_FCRSR_Msk
 (0x1U << 
LCD_SR_FCRSR_Pos
Ë

	)

3360 
	#LCD_SR_FCRSR
 
LCD_SR_FCRSR_Msk


	)

3363 
	#LCD_CLR_SOFC_Pos
 (1U)

	)

3364 
	#LCD_CLR_SOFC_Msk
 (0x1U << 
LCD_CLR_SOFC_Pos
Ë

	)

3365 
	#LCD_CLR_SOFC
 
LCD_CLR_SOFC_Msk


	)

3366 
	#LCD_CLR_UDDC_Pos
 (3U)

	)

3367 
	#LCD_CLR_UDDC_Msk
 (0x1U << 
LCD_CLR_UDDC_Pos
Ë

	)

3368 
	#LCD_CLR_UDDC
 
LCD_CLR_UDDC_Msk


	)

3371 
	#LCD_RAM_SEGMENT_DATA_Pos
 (0U)

	)

3372 
	#LCD_RAM_SEGMENT_DATA_Msk
 (0xFFFFFFFFU << 
LCD_RAM_SEGMENT_DATA_Pos
Ë

	)

3373 
	#LCD_RAM_SEGMENT_DATA
 
LCD_RAM_SEGMENT_DATA_Msk


	)

3381 
	#LPTIM_ISR_CMPM_Pos
 (0U)

	)

3382 
	#LPTIM_ISR_CMPM_Msk
 (0x1U << 
LPTIM_ISR_CMPM_Pos
Ë

	)

3383 
	#LPTIM_ISR_CMPM
 
LPTIM_ISR_CMPM_Msk


	)

3384 
	#LPTIM_ISR_ARRM_Pos
 (1U)

	)

3385 
	#LPTIM_ISR_ARRM_Msk
 (0x1U << 
LPTIM_ISR_ARRM_Pos
Ë

	)

3386 
	#LPTIM_ISR_ARRM
 
LPTIM_ISR_ARRM_Msk


	)

3387 
	#LPTIM_ISR_EXTTRIG_Pos
 (2U)

	)

3388 
	#LPTIM_ISR_EXTTRIG_Msk
 (0x1U << 
LPTIM_ISR_EXTTRIG_Pos
Ë

	)

3389 
	#LPTIM_ISR_EXTTRIG
 
LPTIM_ISR_EXTTRIG_Msk


	)

3390 
	#LPTIM_ISR_CMPOK_Pos
 (3U)

	)

3391 
	#LPTIM_ISR_CMPOK_Msk
 (0x1U << 
LPTIM_ISR_CMPOK_Pos
Ë

	)

3392 
	#LPTIM_ISR_CMPOK
 
LPTIM_ISR_CMPOK_Msk


	)

3393 
	#LPTIM_ISR_ARROK_Pos
 (4U)

	)

3394 
	#LPTIM_ISR_ARROK_Msk
 (0x1U << 
LPTIM_ISR_ARROK_Pos
Ë

	)

3395 
	#LPTIM_ISR_ARROK
 
LPTIM_ISR_ARROK_Msk


	)

3396 
	#LPTIM_ISR_UP_Pos
 (5U)

	)

3397 
	#LPTIM_ISR_UP_Msk
 (0x1U << 
LPTIM_ISR_UP_Pos
Ë

	)

3398 
	#LPTIM_ISR_UP
 
LPTIM_ISR_UP_Msk


	)

3399 
	#LPTIM_ISR_DOWN_Pos
 (6U)

	)

3400 
	#LPTIM_ISR_DOWN_Msk
 (0x1U << 
LPTIM_ISR_DOWN_Pos
Ë

	)

3401 
	#LPTIM_ISR_DOWN
 
LPTIM_ISR_DOWN_Msk


	)

3404 
	#LPTIM_ICR_CMPMCF_Pos
 (0U)

	)

3405 
	#LPTIM_ICR_CMPMCF_Msk
 (0x1U << 
LPTIM_ICR_CMPMCF_Pos
Ë

	)

3406 
	#LPTIM_ICR_CMPMCF
 
LPTIM_ICR_CMPMCF_Msk


	)

3407 
	#LPTIM_ICR_ARRMCF_Pos
 (1U)

	)

3408 
	#LPTIM_ICR_ARRMCF_Msk
 (0x1U << 
LPTIM_ICR_ARRMCF_Pos
Ë

	)

3409 
	#LPTIM_ICR_ARRMCF
 
LPTIM_ICR_ARRMCF_Msk


	)

3410 
	#LPTIM_ICR_EXTTRIGCF_Pos
 (2U)

	)

3411 
	#LPTIM_ICR_EXTTRIGCF_Msk
 (0x1U << 
LPTIM_ICR_EXTTRIGCF_Pos
Ë

	)

3412 
	#LPTIM_ICR_EXTTRIGCF
 
LPTIM_ICR_EXTTRIGCF_Msk


	)

3413 
	#LPTIM_ICR_CMPOKCF_Pos
 (3U)

	)

3414 
	#LPTIM_ICR_CMPOKCF_Msk
 (0x1U << 
LPTIM_ICR_CMPOKCF_Pos
Ë

	)

3415 
	#LPTIM_ICR_CMPOKCF
 
LPTIM_ICR_CMPOKCF_Msk


	)

3416 
	#LPTIM_ICR_ARROKCF_Pos
 (4U)

	)

3417 
	#LPTIM_ICR_ARROKCF_Msk
 (0x1U << 
LPTIM_ICR_ARROKCF_Pos
Ë

	)

3418 
	#LPTIM_ICR_ARROKCF
 
LPTIM_ICR_ARROKCF_Msk


	)

3419 
	#LPTIM_ICR_UPCF_Pos
 (5U)

	)

3420 
	#LPTIM_ICR_UPCF_Msk
 (0x1U << 
LPTIM_ICR_UPCF_Pos
Ë

	)

3421 
	#LPTIM_ICR_UPCF
 
LPTIM_ICR_UPCF_Msk


	)

3422 
	#LPTIM_ICR_DOWNCF_Pos
 (6U)

	)

3423 
	#LPTIM_ICR_DOWNCF_Msk
 (0x1U << 
LPTIM_ICR_DOWNCF_Pos
Ë

	)

3424 
	#LPTIM_ICR_DOWNCF
 
LPTIM_ICR_DOWNCF_Msk


	)

3427 
	#LPTIM_IER_CMPMIE_Pos
 (0U)

	)

3428 
	#LPTIM_IER_CMPMIE_Msk
 (0x1U << 
LPTIM_IER_CMPMIE_Pos
Ë

	)

3429 
	#LPTIM_IER_CMPMIE
 
LPTIM_IER_CMPMIE_Msk


	)

3430 
	#LPTIM_IER_ARRMIE_Pos
 (1U)

	)

3431 
	#LPTIM_IER_ARRMIE_Msk
 (0x1U << 
LPTIM_IER_ARRMIE_Pos
Ë

	)

3432 
	#LPTIM_IER_ARRMIE
 
LPTIM_IER_ARRMIE_Msk


	)

3433 
	#LPTIM_IER_EXTTRIGIE_Pos
 (2U)

	)

3434 
	#LPTIM_IER_EXTTRIGIE_Msk
 (0x1U << 
LPTIM_IER_EXTTRIGIE_Pos
Ë

	)

3435 
	#LPTIM_IER_EXTTRIGIE
 
LPTIM_IER_EXTTRIGIE_Msk


	)

3436 
	#LPTIM_IER_CMPOKIE_Pos
 (3U)

	)

3437 
	#LPTIM_IER_CMPOKIE_Msk
 (0x1U << 
LPTIM_IER_CMPOKIE_Pos
Ë

	)

3438 
	#LPTIM_IER_CMPOKIE
 
LPTIM_IER_CMPOKIE_Msk


	)

3439 
	#LPTIM_IER_ARROKIE_Pos
 (4U)

	)

3440 
	#LPTIM_IER_ARROKIE_Msk
 (0x1U << 
LPTIM_IER_ARROKIE_Pos
Ë

	)

3441 
	#LPTIM_IER_ARROKIE
 
LPTIM_IER_ARROKIE_Msk


	)

3442 
	#LPTIM_IER_UPIE_Pos
 (5U)

	)

3443 
	#LPTIM_IER_UPIE_Msk
 (0x1U << 
LPTIM_IER_UPIE_Pos
Ë

	)

3444 
	#LPTIM_IER_UPIE
 
LPTIM_IER_UPIE_Msk


	)

3445 
	#LPTIM_IER_DOWNIE_Pos
 (6U)

	)

3446 
	#LPTIM_IER_DOWNIE_Msk
 (0x1U << 
LPTIM_IER_DOWNIE_Pos
Ë

	)

3447 
	#LPTIM_IER_DOWNIE
 
LPTIM_IER_DOWNIE_Msk


	)

3450 
	#LPTIM_CFGR_CKSEL_Pos
 (0U)

	)

3451 
	#LPTIM_CFGR_CKSEL_Msk
 (0x1U << 
LPTIM_CFGR_CKSEL_Pos
Ë

	)

3452 
	#LPTIM_CFGR_CKSEL
 
LPTIM_CFGR_CKSEL_Msk


	)

3454 
	#LPTIM_CFGR_CKPOL_Pos
 (1U)

	)

3455 
	#LPTIM_CFGR_CKPOL_Msk
 (0x3U << 
LPTIM_CFGR_CKPOL_Pos
Ë

	)

3456 
	#LPTIM_CFGR_CKPOL
 
LPTIM_CFGR_CKPOL_Msk


	)

3457 
	#LPTIM_CFGR_CKPOL_0
 (0x1U << 
LPTIM_CFGR_CKPOL_Pos
Ë

	)

3458 
	#LPTIM_CFGR_CKPOL_1
 (0x2U << 
LPTIM_CFGR_CKPOL_Pos
Ë

	)

3460 
	#LPTIM_CFGR_CKFLT_Pos
 (3U)

	)

3461 
	#LPTIM_CFGR_CKFLT_Msk
 (0x3U << 
LPTIM_CFGR_CKFLT_Pos
Ë

	)

3462 
	#LPTIM_CFGR_CKFLT
 
LPTIM_CFGR_CKFLT_Msk


	)

3463 
	#LPTIM_CFGR_CKFLT_0
 (0x1U << 
LPTIM_CFGR_CKFLT_Pos
Ë

	)

3464 
	#LPTIM_CFGR_CKFLT_1
 (0x2U << 
LPTIM_CFGR_CKFLT_Pos
Ë

	)

3466 
	#LPTIM_CFGR_TRGFLT_Pos
 (6U)

	)

3467 
	#LPTIM_CFGR_TRGFLT_Msk
 (0x3U << 
LPTIM_CFGR_TRGFLT_Pos
Ë

	)

3468 
	#LPTIM_CFGR_TRGFLT
 
LPTIM_CFGR_TRGFLT_Msk


	)

3469 
	#LPTIM_CFGR_TRGFLT_0
 (0x1U << 
LPTIM_CFGR_TRGFLT_Pos
Ë

	)

3470 
	#LPTIM_CFGR_TRGFLT_1
 (0x2U << 
LPTIM_CFGR_TRGFLT_Pos
Ë

	)

3472 
	#LPTIM_CFGR_PRESC_Pos
 (9U)

	)

3473 
	#LPTIM_CFGR_PRESC_Msk
 (0x7U << 
LPTIM_CFGR_PRESC_Pos
Ë

	)

3474 
	#LPTIM_CFGR_PRESC
 
LPTIM_CFGR_PRESC_Msk


	)

3475 
	#LPTIM_CFGR_PRESC_0
 (0x1U << 
LPTIM_CFGR_PRESC_Pos
Ë

	)

3476 
	#LPTIM_CFGR_PRESC_1
 (0x2U << 
LPTIM_CFGR_PRESC_Pos
Ë

	)

3477 
	#LPTIM_CFGR_PRESC_2
 (0x4U << 
LPTIM_CFGR_PRESC_Pos
Ë

	)

3479 
	#LPTIM_CFGR_TRIGSEL_Pos
 (13U)

	)

3480 
	#LPTIM_CFGR_TRIGSEL_Msk
 (0x7U << 
LPTIM_CFGR_TRIGSEL_Pos
Ë

	)

3481 
	#LPTIM_CFGR_TRIGSEL
 
LPTIM_CFGR_TRIGSEL_Msk


	)

3482 
	#LPTIM_CFGR_TRIGSEL_0
 (0x1U << 
LPTIM_CFGR_TRIGSEL_Pos
Ë

	)

3483 
	#LPTIM_CFGR_TRIGSEL_1
 (0x2U << 
LPTIM_CFGR_TRIGSEL_Pos
Ë

	)

3484 
	#LPTIM_CFGR_TRIGSEL_2
 (0x4U << 
LPTIM_CFGR_TRIGSEL_Pos
Ë

	)

3486 
	#LPTIM_CFGR_TRIGEN_Pos
 (17U)

	)

3487 
	#LPTIM_CFGR_TRIGEN_Msk
 (0x3U << 
LPTIM_CFGR_TRIGEN_Pos
Ë

	)

3488 
	#LPTIM_CFGR_TRIGEN
 
LPTIM_CFGR_TRIGEN_Msk


	)

3489 
	#LPTIM_CFGR_TRIGEN_0
 (0x1U << 
LPTIM_CFGR_TRIGEN_Pos
Ë

	)

3490 
	#LPTIM_CFGR_TRIGEN_1
 (0x2U << 
LPTIM_CFGR_TRIGEN_Pos
Ë

	)

3492 
	#LPTIM_CFGR_TIMOUT_Pos
 (19U)

	)

3493 
	#LPTIM_CFGR_TIMOUT_Msk
 (0x1U << 
LPTIM_CFGR_TIMOUT_Pos
Ë

	)

3494 
	#LPTIM_CFGR_TIMOUT
 
LPTIM_CFGR_TIMOUT_Msk


	)

3495 
	#LPTIM_CFGR_WAVE_Pos
 (20U)

	)

3496 
	#LPTIM_CFGR_WAVE_Msk
 (0x1U << 
LPTIM_CFGR_WAVE_Pos
Ë

	)

3497 
	#LPTIM_CFGR_WAVE
 
LPTIM_CFGR_WAVE_Msk


	)

3498 
	#LPTIM_CFGR_WAVPOL_Pos
 (21U)

	)

3499 
	#LPTIM_CFGR_WAVPOL_Msk
 (0x1U << 
LPTIM_CFGR_WAVPOL_Pos
Ë

	)

3500 
	#LPTIM_CFGR_WAVPOL
 
LPTIM_CFGR_WAVPOL_Msk


	)

3501 
	#LPTIM_CFGR_PRELOAD_Pos
 (22U)

	)

3502 
	#LPTIM_CFGR_PRELOAD_Msk
 (0x1U << 
LPTIM_CFGR_PRELOAD_Pos
Ë

	)

3503 
	#LPTIM_CFGR_PRELOAD
 
LPTIM_CFGR_PRELOAD_Msk


	)

3504 
	#LPTIM_CFGR_COUNTMODE_Pos
 (23U)

	)

3505 
	#LPTIM_CFGR_COUNTMODE_Msk
 (0x1U << 
LPTIM_CFGR_COUNTMODE_Pos
Ë

	)

3506 
	#LPTIM_CFGR_COUNTMODE
 
LPTIM_CFGR_COUNTMODE_Msk


	)

3507 
	#LPTIM_CFGR_ENC_Pos
 (24U)

	)

3508 
	#LPTIM_CFGR_ENC_Msk
 (0x1U << 
LPTIM_CFGR_ENC_Pos
Ë

	)

3509 
	#LPTIM_CFGR_ENC
 
LPTIM_CFGR_ENC_Msk


	)

3512 
	#LPTIM_CR_ENABLE_Pos
 (0U)

	)

3513 
	#LPTIM_CR_ENABLE_Msk
 (0x1U << 
LPTIM_CR_ENABLE_Pos
Ë

	)

3514 
	#LPTIM_CR_ENABLE
 
LPTIM_CR_ENABLE_Msk


	)

3515 
	#LPTIM_CR_SNGSTRT_Pos
 (1U)

	)

3516 
	#LPTIM_CR_SNGSTRT_Msk
 (0x1U << 
LPTIM_CR_SNGSTRT_Pos
Ë

	)

3517 
	#LPTIM_CR_SNGSTRT
 
LPTIM_CR_SNGSTRT_Msk


	)

3518 
	#LPTIM_CR_CNTSTRT_Pos
 (2U)

	)

3519 
	#LPTIM_CR_CNTSTRT_Msk
 (0x1U << 
LPTIM_CR_CNTSTRT_Pos
Ë

	)

3520 
	#LPTIM_CR_CNTSTRT
 
LPTIM_CR_CNTSTRT_Msk


	)

3523 
	#LPTIM_CMP_CMP_Pos
 (0U)

	)

3524 
	#LPTIM_CMP_CMP_Msk
 (0xFFFFU << 
LPTIM_CMP_CMP_Pos
Ë

	)

3525 
	#LPTIM_CMP_CMP
 
LPTIM_CMP_CMP_Msk


	)

3528 
	#LPTIM_ARR_ARR_Pos
 (0U)

	)

3529 
	#LPTIM_ARR_ARR_Msk
 (0xFFFFU << 
LPTIM_ARR_ARR_Pos
Ë

	)

3530 
	#LPTIM_ARR_ARR
 
LPTIM_ARR_ARR_Msk


	)

3533 
	#LPTIM_CNT_CNT_Pos
 (0U)

	)

3534 
	#LPTIM_CNT_CNT_Msk
 (0xFFFFU << 
LPTIM_CNT_CNT_Pos
Ë

	)

3535 
	#LPTIM_CNT_CNT
 
LPTIM_CNT_CNT_Msk


	)

3544 
	#FW_CSSA_ADD_Pos
 (8U)

	)

3545 
	#FW_CSSA_ADD_Msk
 (0xFFFFU << 
FW_CSSA_ADD_Pos
Ë

	)

3546 
	#FW_CSSA_ADD
 
FW_CSSA_ADD_Msk


	)

3547 
	#FW_CSL_LENG_Pos
 (8U)

	)

3548 
	#FW_CSL_LENG_Msk
 (0x3FFFU << 
FW_CSL_LENG_Pos
Ë

	)

3549 
	#FW_CSL_LENG
 
FW_CSL_LENG_Msk


	)

3550 
	#FW_NVDSSA_ADD_Pos
 (8U)

	)

3551 
	#FW_NVDSSA_ADD_Msk
 (0xFFFFU << 
FW_NVDSSA_ADD_Pos
Ë

	)

3552 
	#FW_NVDSSA_ADD
 
FW_NVDSSA_ADD_Msk


	)

3553 
	#FW_NVDSL_LENG_Pos
 (8U)

	)

3554 
	#FW_NVDSL_LENG_Msk
 (0x3FFFU << 
FW_NVDSL_LENG_Pos
Ë

	)

3555 
	#FW_NVDSL_LENG
 
FW_NVDSL_LENG_Msk


	)

3556 
	#FW_VDSSA_ADD_Pos
 (6U)

	)

3557 
	#FW_VDSSA_ADD_Msk
 (0x3FFU << 
FW_VDSSA_ADD_Pos
Ë

	)

3558 
	#FW_VDSSA_ADD
 
FW_VDSSA_ADD_Msk


	)

3559 
	#FW_VDSL_LENG_Pos
 (6U)

	)

3560 
	#FW_VDSL_LENG_Msk
 (0x3FFU << 
FW_VDSL_LENG_Pos
Ë

	)

3561 
	#FW_VDSL_LENG
 
FW_VDSL_LENG_Msk


	)

3564 
	#FW_CR_FPA_Pos
 (0U)

	)

3565 
	#FW_CR_FPA_Msk
 (0x1U << 
FW_CR_FPA_Pos
Ë

	)

3566 
	#FW_CR_FPA
 
FW_CR_FPA_Msk


	)

3567 
	#FW_CR_VDS_Pos
 (1U)

	)

3568 
	#FW_CR_VDS_Msk
 (0x1U << 
FW_CR_VDS_Pos
Ë

	)

3569 
	#FW_CR_VDS
 
FW_CR_VDS_Msk


	)

3570 
	#FW_CR_VDE_Pos
 (2U)

	)

3571 
	#FW_CR_VDE_Msk
 (0x1U << 
FW_CR_VDE_Pos
Ë

	)

3572 
	#FW_CR_VDE
 
FW_CR_VDE_Msk


	)

3580 
	#PWR_PVD_SUPPORT


	)

3583 
	#PWR_CR_LPSDSR_Pos
 (0U)

	)

3584 
	#PWR_CR_LPSDSR_Msk
 (0x1U << 
PWR_CR_LPSDSR_Pos
Ë

	)

3585 
	#PWR_CR_LPSDSR
 
PWR_CR_LPSDSR_Msk


	)

3586 
	#PWR_CR_PDDS_Pos
 (1U)

	)

3587 
	#PWR_CR_PDDS_Msk
 (0x1U << 
PWR_CR_PDDS_Pos
Ë

	)

3588 
	#PWR_CR_PDDS
 
PWR_CR_PDDS_Msk


	)

3589 
	#PWR_CR_CWUF_Pos
 (2U)

	)

3590 
	#PWR_CR_CWUF_Msk
 (0x1U << 
PWR_CR_CWUF_Pos
Ë

	)

3591 
	#PWR_CR_CWUF
 
PWR_CR_CWUF_Msk


	)

3592 
	#PWR_CR_CSBF_Pos
 (3U)

	)

3593 
	#PWR_CR_CSBF_Msk
 (0x1U << 
PWR_CR_CSBF_Pos
Ë

	)

3594 
	#PWR_CR_CSBF
 
PWR_CR_CSBF_Msk


	)

3595 
	#PWR_CR_PVDE_Pos
 (4U)

	)

3596 
	#PWR_CR_PVDE_Msk
 (0x1U << 
PWR_CR_PVDE_Pos
Ë

	)

3597 
	#PWR_CR_PVDE
 
PWR_CR_PVDE_Msk


	)

3599 
	#PWR_CR_PLS_Pos
 (5U)

	)

3600 
	#PWR_CR_PLS_Msk
 (0x7U << 
PWR_CR_PLS_Pos
Ë

	)

3601 
	#PWR_CR_PLS
 
PWR_CR_PLS_Msk


	)

3602 
	#PWR_CR_PLS_0
 (0x1U << 
PWR_CR_PLS_Pos
Ë

	)

3603 
	#PWR_CR_PLS_1
 (0x2U << 
PWR_CR_PLS_Pos
Ë

	)

3604 
	#PWR_CR_PLS_2
 (0x4U << 
PWR_CR_PLS_Pos
Ë

	)

3607 
	#PWR_CR_PLS_LEV0
 (0x00000000UË

	)

3608 
	#PWR_CR_PLS_LEV1
 (0x00000020UË

	)

3609 
	#PWR_CR_PLS_LEV2
 (0x00000040UË

	)

3610 
	#PWR_CR_PLS_LEV3
 (0x00000060UË

	)

3611 
	#PWR_CR_PLS_LEV4
 (0x00000080UË

	)

3612 
	#PWR_CR_PLS_LEV5
 (0x000000A0UË

	)

3613 
	#PWR_CR_PLS_LEV6
 (0x000000C0UË

	)

3614 
	#PWR_CR_PLS_LEV7
 (0x000000E0UË

	)

3616 
	#PWR_CR_DBP_Pos
 (8U)

	)

3617 
	#PWR_CR_DBP_Msk
 (0x1U << 
PWR_CR_DBP_Pos
Ë

	)

3618 
	#PWR_CR_DBP
 
PWR_CR_DBP_Msk


	)

3619 
	#PWR_CR_ULP_Pos
 (9U)

	)

3620 
	#PWR_CR_ULP_Msk
 (0x1U << 
PWR_CR_ULP_Pos
Ë

	)

3621 
	#PWR_CR_ULP
 
PWR_CR_ULP_Msk


	)

3622 
	#PWR_CR_FWU_Pos
 (10U)

	)

3623 
	#PWR_CR_FWU_Msk
 (0x1U << 
PWR_CR_FWU_Pos
Ë

	)

3624 
	#PWR_CR_FWU
 
PWR_CR_FWU_Msk


	)

3626 
	#PWR_CR_VOS_Pos
 (11U)

	)

3627 
	#PWR_CR_VOS_Msk
 (0x3U << 
PWR_CR_VOS_Pos
Ë

	)

3628 
	#PWR_CR_VOS
 
PWR_CR_VOS_Msk


	)

3629 
	#PWR_CR_VOS_0
 (0x1U << 
PWR_CR_VOS_Pos
Ë

	)

3630 
	#PWR_CR_VOS_1
 (0x2U << 
PWR_CR_VOS_Pos
Ë

	)

3631 
	#PWR_CR_DSEEKOFF_Pos
 (13U)

	)

3632 
	#PWR_CR_DSEEKOFF_Msk
 (0x1U << 
PWR_CR_DSEEKOFF_Pos
Ë

	)

3633 
	#PWR_CR_DSEEKOFF
 
PWR_CR_DSEEKOFF_Msk


	)

3634 
	#PWR_CR_LPRUN_Pos
 (14U)

	)

3635 
	#PWR_CR_LPRUN_Msk
 (0x1U << 
PWR_CR_LPRUN_Pos
Ë

	)

3636 
	#PWR_CR_LPRUN
 
PWR_CR_LPRUN_Msk


	)

3639 
	#PWR_CSR_WUF_Pos
 (0U)

	)

3640 
	#PWR_CSR_WUF_Msk
 (0x1U << 
PWR_CSR_WUF_Pos
Ë

	)

3641 
	#PWR_CSR_WUF
 
PWR_CSR_WUF_Msk


	)

3642 
	#PWR_CSR_SBF_Pos
 (1U)

	)

3643 
	#PWR_CSR_SBF_Msk
 (0x1U << 
PWR_CSR_SBF_Pos
Ë

	)

3644 
	#PWR_CSR_SBF
 
PWR_CSR_SBF_Msk


	)

3645 
	#PWR_CSR_PVDO_Pos
 (2U)

	)

3646 
	#PWR_CSR_PVDO_Msk
 (0x1U << 
PWR_CSR_PVDO_Pos
Ë

	)

3647 
	#PWR_CSR_PVDO
 
PWR_CSR_PVDO_Msk


	)

3648 
	#PWR_CSR_VREFINTRDYF_Pos
 (3U)

	)

3649 
	#PWR_CSR_VREFINTRDYF_Msk
 (0x1U << 
PWR_CSR_VREFINTRDYF_Pos
Ë

	)

3650 
	#PWR_CSR_VREFINTRDYF
 
PWR_CSR_VREFINTRDYF_Msk


	)

3651 
	#PWR_CSR_VOSF_Pos
 (4U)

	)

3652 
	#PWR_CSR_VOSF_Msk
 (0x1U << 
PWR_CSR_VOSF_Pos
Ë

	)

3653 
	#PWR_CSR_VOSF
 
PWR_CSR_VOSF_Msk


	)

3654 
	#PWR_CSR_REGLPF_Pos
 (5U)

	)

3655 
	#PWR_CSR_REGLPF_Msk
 (0x1U << 
PWR_CSR_REGLPF_Pos
Ë

	)

3656 
	#PWR_CSR_REGLPF
 
PWR_CSR_REGLPF_Msk


	)

3658 
	#PWR_CSR_EWUP1_Pos
 (8U)

	)

3659 
	#PWR_CSR_EWUP1_Msk
 (0x1U << 
PWR_CSR_EWUP1_Pos
Ë

	)

3660 
	#PWR_CSR_EWUP1
 
PWR_CSR_EWUP1_Msk


	)

3661 
	#PWR_CSR_EWUP2_Pos
 (9U)

	)

3662 
	#PWR_CSR_EWUP2_Msk
 (0x1U << 
PWR_CSR_EWUP2_Pos
Ë

	)

3663 
	#PWR_CSR_EWUP2
 
PWR_CSR_EWUP2_Msk


	)

3671 
	#RCC_HSI48_SUPPORT


	)

3672 
	#RCC_HSECSS_SUPPORT


	)

3675 
	#RCC_CR_HSION_Pos
 (0U)

	)

3676 
	#RCC_CR_HSION_Msk
 (0x1U << 
RCC_CR_HSION_Pos
Ë

	)

3677 
	#RCC_CR_HSION
 
RCC_CR_HSION_Msk


	)

3678 
	#RCC_CR_HSIKERON_Pos
 (1U)

	)

3679 
	#RCC_CR_HSIKERON_Msk
 (0x1U << 
RCC_CR_HSIKERON_Pos
Ë

	)

3680 
	#RCC_CR_HSIKERON
 
RCC_CR_HSIKERON_Msk


	)

3681 
	#RCC_CR_HSIRDY_Pos
 (2U)

	)

3682 
	#RCC_CR_HSIRDY_Msk
 (0x1U << 
RCC_CR_HSIRDY_Pos
Ë

	)

3683 
	#RCC_CR_HSIRDY
 
RCC_CR_HSIRDY_Msk


	)

3684 
	#RCC_CR_HSIDIVEN_Pos
 (3U)

	)

3685 
	#RCC_CR_HSIDIVEN_Msk
 (0x1U << 
RCC_CR_HSIDIVEN_Pos
Ë

	)

3686 
	#RCC_CR_HSIDIVEN
 
RCC_CR_HSIDIVEN_Msk


	)

3687 
	#RCC_CR_HSIDIVF_Pos
 (4U)

	)

3688 
	#RCC_CR_HSIDIVF_Msk
 (0x1U << 
RCC_CR_HSIDIVF_Pos
Ë

	)

3689 
	#RCC_CR_HSIDIVF
 
RCC_CR_HSIDIVF_Msk


	)

3690 
	#RCC_CR_MSION_Pos
 (8U)

	)

3691 
	#RCC_CR_MSION_Msk
 (0x1U << 
RCC_CR_MSION_Pos
Ë

	)

3692 
	#RCC_CR_MSION
 
RCC_CR_MSION_Msk


	)

3693 
	#RCC_CR_MSIRDY_Pos
 (9U)

	)

3694 
	#RCC_CR_MSIRDY_Msk
 (0x1U << 
RCC_CR_MSIRDY_Pos
Ë

	)

3695 
	#RCC_CR_MSIRDY
 
RCC_CR_MSIRDY_Msk


	)

3696 
	#RCC_CR_HSEON_Pos
 (16U)

	)

3697 
	#RCC_CR_HSEON_Msk
 (0x1U << 
RCC_CR_HSEON_Pos
Ë

	)

3698 
	#RCC_CR_HSEON
 
RCC_CR_HSEON_Msk


	)

3699 
	#RCC_CR_HSERDY_Pos
 (17U)

	)

3700 
	#RCC_CR_HSERDY_Msk
 (0x1U << 
RCC_CR_HSERDY_Pos
Ë

	)

3701 
	#RCC_CR_HSERDY
 
RCC_CR_HSERDY_Msk


	)

3702 
	#RCC_CR_HSEBYP_Pos
 (18U)

	)

3703 
	#RCC_CR_HSEBYP_Msk
 (0x1U << 
RCC_CR_HSEBYP_Pos
Ë

	)

3704 
	#RCC_CR_HSEBYP
 
RCC_CR_HSEBYP_Msk


	)

3705 
	#RCC_CR_CSSHSEON_Pos
 (19U)

	)

3706 
	#RCC_CR_CSSHSEON_Msk
 (0x1U << 
RCC_CR_CSSHSEON_Pos
Ë

	)

3707 
	#RCC_CR_CSSHSEON
 
RCC_CR_CSSHSEON_Msk


	)

3708 
	#RCC_CR_RTCPRE_Pos
 (20U)

	)

3709 
	#RCC_CR_RTCPRE_Msk
 (0x3U << 
RCC_CR_RTCPRE_Pos
Ë

	)

3710 
	#RCC_CR_RTCPRE
 
RCC_CR_RTCPRE_Msk


	)

3711 
	#RCC_CR_RTCPRE_0
 (0x1U << 
RCC_CR_RTCPRE_Pos
Ë

	)

3712 
	#RCC_CR_RTCPRE_1
 (0x2U << 
RCC_CR_RTCPRE_Pos
Ë

	)

3713 
	#RCC_CR_PLLON_Pos
 (24U)

	)

3714 
	#RCC_CR_PLLON_Msk
 (0x1U << 
RCC_CR_PLLON_Pos
Ë

	)

3715 
	#RCC_CR_PLLON
 
RCC_CR_PLLON_Msk


	)

3716 
	#RCC_CR_PLLRDY_Pos
 (25U)

	)

3717 
	#RCC_CR_PLLRDY_Msk
 (0x1U << 
RCC_CR_PLLRDY_Pos
Ë

	)

3718 
	#RCC_CR_PLLRDY
 
RCC_CR_PLLRDY_Msk


	)

3721 
	#RCC_CR_CSSON
 
RCC_CR_CSSHSEON


	)

3724 
	#RCC_ICSCR_HSICAL_Pos
 (0U)

	)

3725 
	#RCC_ICSCR_HSICAL_Msk
 (0xFFU << 
RCC_ICSCR_HSICAL_Pos
Ë

	)

3726 
	#RCC_ICSCR_HSICAL
 
RCC_ICSCR_HSICAL_Msk


	)

3727 
	#RCC_ICSCR_HSITRIM_Pos
 (8U)

	)

3728 
	#RCC_ICSCR_HSITRIM_Msk
 (0x1FU << 
RCC_ICSCR_HSITRIM_Pos
Ë

	)

3729 
	#RCC_ICSCR_HSITRIM
 
RCC_ICSCR_HSITRIM_Msk


	)

3731 
	#RCC_ICSCR_MSIRANGE_Pos
 (13U)

	)

3732 
	#RCC_ICSCR_MSIRANGE_Msk
 (0x7U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3733 
	#RCC_ICSCR_MSIRANGE
 
RCC_ICSCR_MSIRANGE_Msk


	)

3734 
	#RCC_ICSCR_MSIRANGE_0
 (0x0U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3735 
	#RCC_ICSCR_MSIRANGE_1
 (0x1U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3736 
	#RCC_ICSCR_MSIRANGE_2
 (0x2U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3737 
	#RCC_ICSCR_MSIRANGE_3
 (0x3U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3738 
	#RCC_ICSCR_MSIRANGE_4
 (0x4U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3739 
	#RCC_ICSCR_MSIRANGE_5
 (0x5U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3740 
	#RCC_ICSCR_MSIRANGE_6
 (0x6U << 
RCC_ICSCR_MSIRANGE_Pos
Ë

	)

3741 
	#RCC_ICSCR_MSICAL_Pos
 (16U)

	)

3742 
	#RCC_ICSCR_MSICAL_Msk
 (0xFFU << 
RCC_ICSCR_MSICAL_Pos
Ë

	)

3743 
	#RCC_ICSCR_MSICAL
 
RCC_ICSCR_MSICAL_Msk


	)

3744 
	#RCC_ICSCR_MSITRIM_Pos
 (24U)

	)

3745 
	#RCC_ICSCR_MSITRIM_Msk
 (0xFFU << 
RCC_ICSCR_MSITRIM_Pos
Ë

	)

3746 
	#RCC_ICSCR_MSITRIM
 
RCC_ICSCR_MSITRIM_Msk


	)

3749 
	#RCC_CRRCR_HSI48ON_Pos
 (0U)

	)

3750 
	#RCC_CRRCR_HSI48ON_Msk
 (0x1U << 
RCC_CRRCR_HSI48ON_Pos
Ë

	)

3751 
	#RCC_CRRCR_HSI48ON
 
RCC_CRRCR_HSI48ON_Msk


	)

3752 
	#RCC_CRRCR_HSI48RDY_Pos
 (1U)

	)

3753 
	#RCC_CRRCR_HSI48RDY_Msk
 (0x1U << 
RCC_CRRCR_HSI48RDY_Pos
Ë

	)

3754 
	#RCC_CRRCR_HSI48RDY
 
RCC_CRRCR_HSI48RDY_Msk


	)

3755 
	#RCC_CRRCR_HSI48CAL_Pos
 (8U)

	)

3756 
	#RCC_CRRCR_HSI48CAL_Msk
 (0xFFU << 
RCC_CRRCR_HSI48CAL_Pos
Ë

	)

3757 
	#RCC_CRRCR_HSI48CAL
 
RCC_CRRCR_HSI48CAL_Msk


	)

3761 
	#RCC_CFGR_SW_Pos
 (0U)

	)

3762 
	#RCC_CFGR_SW_Msk
 (0x3U << 
RCC_CFGR_SW_Pos
Ë

	)

3763 
	#RCC_CFGR_SW
 
RCC_CFGR_SW_Msk


	)

3764 
	#RCC_CFGR_SW_0
 (0x1U << 
RCC_CFGR_SW_Pos
Ë

	)

3765 
	#RCC_CFGR_SW_1
 (0x2U << 
RCC_CFGR_SW_Pos
Ë

	)

3767 
	#RCC_CFGR_SW_MSI
 (0x00000000UË

	)

3768 
	#RCC_CFGR_SW_HSI
 (0x00000001UË

	)

3769 
	#RCC_CFGR_SW_HSE
 (0x00000002UË

	)

3770 
	#RCC_CFGR_SW_PLL
 (0x00000003UË

	)

3773 
	#RCC_CFGR_SWS_Pos
 (2U)

	)

3774 
	#RCC_CFGR_SWS_Msk
 (0x3U << 
RCC_CFGR_SWS_Pos
Ë

	)

3775 
	#RCC_CFGR_SWS
 
RCC_CFGR_SWS_Msk


	)

3776 
	#RCC_CFGR_SWS_0
 (0x1U << 
RCC_CFGR_SWS_Pos
Ë

	)

3777 
	#RCC_CFGR_SWS_1
 (0x2U << 
RCC_CFGR_SWS_Pos
Ë

	)

3779 
	#RCC_CFGR_SWS_MSI
 (0x00000000UË

	)

3780 
	#RCC_CFGR_SWS_HSI
 (0x00000004UË

	)

3781 
	#RCC_CFGR_SWS_HSE
 (0x00000008UË

	)

3782 
	#RCC_CFGR_SWS_PLL
 (0x0000000CUË

	)

3785 
	#RCC_CFGR_HPRE_Pos
 (4U)

	)

3786 
	#RCC_CFGR_HPRE_Msk
 (0xFU << 
RCC_CFGR_HPRE_Pos
Ë

	)

3787 
	#RCC_CFGR_HPRE
 
RCC_CFGR_HPRE_Msk


	)

3788 
	#RCC_CFGR_HPRE_0
 (0x1U << 
RCC_CFGR_HPRE_Pos
Ë

	)

3789 
	#RCC_CFGR_HPRE_1
 (0x2U << 
RCC_CFGR_HPRE_Pos
Ë

	)

3790 
	#RCC_CFGR_HPRE_2
 (0x4U << 
RCC_CFGR_HPRE_Pos
Ë

	)

3791 
	#RCC_CFGR_HPRE_3
 (0x8U << 
RCC_CFGR_HPRE_Pos
Ë

	)

3793 
	#RCC_CFGR_HPRE_DIV1
 (0x00000000UË

	)

3794 
	#RCC_CFGR_HPRE_DIV2
 (0x00000080UË

	)

3795 
	#RCC_CFGR_HPRE_DIV4
 (0x00000090UË

	)

3796 
	#RCC_CFGR_HPRE_DIV8
 (0x000000A0UË

	)

3797 
	#RCC_CFGR_HPRE_DIV16
 (0x000000B0UË

	)

3798 
	#RCC_CFGR_HPRE_DIV64
 (0x000000C0UË

	)

3799 
	#RCC_CFGR_HPRE_DIV128
 (0x000000D0UË

	)

3800 
	#RCC_CFGR_HPRE_DIV256
 (0x000000E0UË

	)

3801 
	#RCC_CFGR_HPRE_DIV512
 (0x000000F0UË

	)

3804 
	#RCC_CFGR_PPRE1_Pos
 (8U)

	)

3805 
	#RCC_CFGR_PPRE1_Msk
 (0x7U << 
RCC_CFGR_PPRE1_Pos
Ë

	)

3806 
	#RCC_CFGR_PPRE1
 
RCC_CFGR_PPRE1_Msk


	)

3807 
	#RCC_CFGR_PPRE1_0
 (0x1U << 
RCC_CFGR_PPRE1_Pos
Ë

	)

3808 
	#RCC_CFGR_PPRE1_1
 (0x2U << 
RCC_CFGR_PPRE1_Pos
Ë

	)

3809 
	#RCC_CFGR_PPRE1_2
 (0x4U << 
RCC_CFGR_PPRE1_Pos
Ë

	)

3811 
	#RCC_CFGR_PPRE1_DIV1
 (0x00000000UË

	)

3812 
	#RCC_CFGR_PPRE1_DIV2
 (0x00000400UË

	)

3813 
	#RCC_CFGR_PPRE1_DIV4
 (0x00000500UË

	)

3814 
	#RCC_CFGR_PPRE1_DIV8
 (0x00000600UË

	)

3815 
	#RCC_CFGR_PPRE1_DIV16
 (0x00000700UË

	)

3818 
	#RCC_CFGR_PPRE2_Pos
 (11U)

	)

3819 
	#RCC_CFGR_PPRE2_Msk
 (0x7U << 
RCC_CFGR_PPRE2_Pos
Ë

	)

3820 
	#RCC_CFGR_PPRE2
 
RCC_CFGR_PPRE2_Msk


	)

3821 
	#RCC_CFGR_PPRE2_0
 (0x1U << 
RCC_CFGR_PPRE2_Pos
Ë

	)

3822 
	#RCC_CFGR_PPRE2_1
 (0x2U << 
RCC_CFGR_PPRE2_Pos
Ë

	)

3823 
	#RCC_CFGR_PPRE2_2
 (0x4U << 
RCC_CFGR_PPRE2_Pos
Ë

	)

3825 
	#RCC_CFGR_PPRE2_DIV1
 (0x00000000UË

	)

3826 
	#RCC_CFGR_PPRE2_DIV2
 (0x00002000UË

	)

3827 
	#RCC_CFGR_PPRE2_DIV4
 (0x00002800UË

	)

3828 
	#RCC_CFGR_PPRE2_DIV8
 (0x00003000UË

	)

3829 
	#RCC_CFGR_PPRE2_DIV16
 (0x00003800UË

	)

3831 
	#RCC_CFGR_STOPWUCK_Pos
 (15U)

	)

3832 
	#RCC_CFGR_STOPWUCK_Msk
 (0x1U << 
RCC_CFGR_STOPWUCK_Pos
Ë

	)

3833 
	#RCC_CFGR_STOPWUCK
 
RCC_CFGR_STOPWUCK_Msk


	)

3836 
	#RCC_CFGR_PLLSRC_Pos
 (16U)

	)

3837 
	#RCC_CFGR_PLLSRC_Msk
 (0x1U << 
RCC_CFGR_PLLSRC_Pos
Ë

	)

3838 
	#RCC_CFGR_PLLSRC
 
RCC_CFGR_PLLSRC_Msk


	)

3840 
	#RCC_CFGR_PLLSRC_HSI
 (0x00000000UË

	)

3841 
	#RCC_CFGR_PLLSRC_HSE
 (0x00010000UË

	)

3845 
	#RCC_CFGR_PLLMUL_Pos
 (18U)

	)

3846 
	#RCC_CFGR_PLLMUL_Msk
 (0xFU << 
RCC_CFGR_PLLMUL_Pos
Ë

	)

3847 
	#RCC_CFGR_PLLMUL
 
RCC_CFGR_PLLMUL_Msk


	)

3848 
	#RCC_CFGR_PLLMUL_0
 (0x1U << 
RCC_CFGR_PLLMUL_Pos
Ë

	)

3849 
	#RCC_CFGR_PLLMUL_1
 (0x2U << 
RCC_CFGR_PLLMUL_Pos
Ë

	)

3850 
	#RCC_CFGR_PLLMUL_2
 (0x4U << 
RCC_CFGR_PLLMUL_Pos
Ë

	)

3851 
	#RCC_CFGR_PLLMUL_3
 (0x8U << 
RCC_CFGR_PLLMUL_Pos
Ë

	)

3853 
	#RCC_CFGR_PLLMUL3
 (0x00000000UË

	)

3854 
	#RCC_CFGR_PLLMUL4
 (0x00040000UË

	)

3855 
	#RCC_CFGR_PLLMUL6
 (0x00080000UË

	)

3856 
	#RCC_CFGR_PLLMUL8
 (0x000C0000UË

	)

3857 
	#RCC_CFGR_PLLMUL12
 (0x00100000UË

	)

3858 
	#RCC_CFGR_PLLMUL16
 (0x00140000UË

	)

3859 
	#RCC_CFGR_PLLMUL24
 (0x00180000UË

	)

3860 
	#RCC_CFGR_PLLMUL32
 (0x001C0000UË

	)

3861 
	#RCC_CFGR_PLLMUL48
 (0x00200000UË

	)

3864 
	#RCC_CFGR_PLLDIV_Pos
 (22U)

	)

3865 
	#RCC_CFGR_PLLDIV_Msk
 (0x3U << 
RCC_CFGR_PLLDIV_Pos
Ë

	)

3866 
	#RCC_CFGR_PLLDIV
 
RCC_CFGR_PLLDIV_Msk


	)

3867 
	#RCC_CFGR_PLLDIV_0
 (0x1U << 
RCC_CFGR_PLLDIV_Pos
Ë

	)

3868 
	#RCC_CFGR_PLLDIV_1
 (0x2U << 
RCC_CFGR_PLLDIV_Pos
Ë

	)

3870 
	#RCC_CFGR_PLLDIV2_Pos
 (22U)

	)

3871 
	#RCC_CFGR_PLLDIV2_Msk
 (0x1U << 
RCC_CFGR_PLLDIV2_Pos
Ë

	)

3872 
	#RCC_CFGR_PLLDIV2
 
RCC_CFGR_PLLDIV2_Msk


	)

3873 
	#RCC_CFGR_PLLDIV3_Pos
 (23U)

	)

3874 
	#RCC_CFGR_PLLDIV3_Msk
 (0x1U << 
RCC_CFGR_PLLDIV3_Pos
Ë

	)

3875 
	#RCC_CFGR_PLLDIV3
 
RCC_CFGR_PLLDIV3_Msk


	)

3876 
	#RCC_CFGR_PLLDIV4_Pos
 (22U)

	)

3877 
	#RCC_CFGR_PLLDIV4_Msk
 (0x3U << 
RCC_CFGR_PLLDIV4_Pos
Ë

	)

3878 
	#RCC_CFGR_PLLDIV4
 
RCC_CFGR_PLLDIV4_Msk


	)

3881 
	#RCC_CFGR_MCOSEL_Pos
 (24U)

	)

3882 
	#RCC_CFGR_MCOSEL_Msk
 (0xFU << 
RCC_CFGR_MCOSEL_Pos
Ë

	)

3883 
	#RCC_CFGR_MCOSEL
 
RCC_CFGR_MCOSEL_Msk


	)

3884 
	#RCC_CFGR_MCOSEL_0
 (0x1U << 
RCC_CFGR_MCOSEL_Pos
Ë

	)

3885 
	#RCC_CFGR_MCOSEL_1
 (0x2U << 
RCC_CFGR_MCOSEL_Pos
Ë

	)

3886 
	#RCC_CFGR_MCOSEL_2
 (0x4U << 
RCC_CFGR_MCOSEL_Pos
Ë

	)

3887 
	#RCC_CFGR_MCOSEL_3
 (0x8U << 
RCC_CFGR_MCOSEL_Pos
Ë

	)

3889 
	#RCC_CFGR_MCOSEL_NOCLOCK
 (0x00000000UË

	)

3890 
	#RCC_CFGR_MCOSEL_SYSCLK_Pos
 (24U)

	)

3891 
	#RCC_CFGR_MCOSEL_SYSCLK_Msk
 (0x1U << 
RCC_CFGR_MCOSEL_SYSCLK_Pos
Ë

	)

3892 
	#RCC_CFGR_MCOSEL_SYSCLK
 
RCC_CFGR_MCOSEL_SYSCLK_Msk


	)

3893 
	#RCC_CFGR_MCOSEL_HSI_Pos
 (25U)

	)

3894 
	#RCC_CFGR_MCOSEL_HSI_Msk
 (0x1U << 
RCC_CFGR_MCOSEL_HSI_Pos
Ë

	)

3895 
	#RCC_CFGR_MCOSEL_HSI
 
RCC_CFGR_MCOSEL_HSI_Msk


	)

3896 
	#RCC_CFGR_MCOSEL_MSI_Pos
 (24U)

	)

3897 
	#RCC_CFGR_MCOSEL_MSI_Msk
 (0x3U << 
RCC_CFGR_MCOSEL_MSI_Pos
Ë

	)

3898 
	#RCC_CFGR_MCOSEL_MSI
 
RCC_CFGR_MCOSEL_MSI_Msk


	)

3899 
	#RCC_CFGR_MCOSEL_HSE_Pos
 (26U)

	)

3900 
	#RCC_CFGR_MCOSEL_HSE_Msk
 (0x1U << 
RCC_CFGR_MCOSEL_HSE_Pos
Ë

	)

3901 
	#RCC_CFGR_MCOSEL_HSE
 
RCC_CFGR_MCOSEL_HSE_Msk


	)

3902 
	#RCC_CFGR_MCOSEL_PLL_Pos
 (24U)

	)

3903 
	#RCC_CFGR_MCOSEL_PLL_Msk
 (0x5U << 
RCC_CFGR_MCOSEL_PLL_Pos
Ë

	)

3904 
	#RCC_CFGR_MCOSEL_PLL
 
RCC_CFGR_MCOSEL_PLL_Msk


	)

3905 
	#RCC_CFGR_MCOSEL_LSI_Pos
 (25U)

	)

3906 
	#RCC_CFGR_MCOSEL_LSI_Msk
 (0x3U << 
RCC_CFGR_MCOSEL_LSI_Pos
Ë

	)

3907 
	#RCC_CFGR_MCOSEL_LSI
 
RCC_CFGR_MCOSEL_LSI_Msk


	)

3908 
	#RCC_CFGR_MCOSEL_LSE_Pos
 (24U)

	)

3909 
	#RCC_CFGR_MCOSEL_LSE_Msk
 (0x7U << 
RCC_CFGR_MCOSEL_LSE_Pos
Ë

	)

3910 
	#RCC_CFGR_MCOSEL_LSE
 
RCC_CFGR_MCOSEL_LSE_Msk


	)

3911 
	#RCC_CFGR_MCOSEL_HSI48_Pos
 (27U)

	)

3912 
	#RCC_CFGR_MCOSEL_HSI48_Msk
 (0x1U << 
RCC_CFGR_MCOSEL_HSI48_Pos
Ë

	)

3913 
	#RCC_CFGR_MCOSEL_HSI48
 
RCC_CFGR_MCOSEL_HSI48_Msk


	)

3915 
	#RCC_CFGR_MCOPRE_Pos
 (28U)

	)

3916 
	#RCC_CFGR_MCOPRE_Msk
 (0x7U << 
RCC_CFGR_MCOPRE_Pos
Ë

	)

3917 
	#RCC_CFGR_MCOPRE
 
RCC_CFGR_MCOPRE_Msk


	)

3918 
	#RCC_CFGR_MCOPRE_0
 (0x1U << 
RCC_CFGR_MCOPRE_Pos
Ë

	)

3919 
	#RCC_CFGR_MCOPRE_1
 (0x2U << 
RCC_CFGR_MCOPRE_Pos
Ë

	)

3920 
	#RCC_CFGR_MCOPRE_2
 (0x4U << 
RCC_CFGR_MCOPRE_Pos
Ë

	)

3922 
	#RCC_CFGR_MCOPRE_DIV1
 (0x00000000UË

	)

3923 
	#RCC_CFGR_MCOPRE_DIV2
 (0x10000000UË

	)

3924 
	#RCC_CFGR_MCOPRE_DIV4
 (0x20000000UË

	)

3925 
	#RCC_CFGR_MCOPRE_DIV8
 (0x30000000UË

	)

3926 
	#RCC_CFGR_MCOPRE_DIV16
 (0x40000000UË

	)

3929 
	#RCC_CFGR_MCO_NOCLOCK
 
RCC_CFGR_MCOSEL_NOCLOCK


	)

3930 
	#RCC_CFGR_MCO_SYSCLK
 
RCC_CFGR_MCOSEL_SYSCLK


	)

3931 
	#RCC_CFGR_MCO_HSI
 
RCC_CFGR_MCOSEL_HSI


	)

3932 
	#RCC_CFGR_MCO_MSI
 
RCC_CFGR_MCOSEL_MSI


	)

3933 
	#RCC_CFGR_MCO_HSE
 
RCC_CFGR_MCOSEL_HSE


	)

3934 
	#RCC_CFGR_MCO_PLL
 
RCC_CFGR_MCOSEL_PLL


	)

3935 
	#RCC_CFGR_MCO_LSI
 
RCC_CFGR_MCOSEL_LSI


	)

3936 
	#RCC_CFGR_MCO_LSE
 
RCC_CFGR_MCOSEL_LSE


	)

3937 
	#RCC_CFGR_MCO_HSI48
 
RCC_CFGR_MCOSEL_HSI48


	)

3939 
	#RCC_CFGR_MCO_PRE
 
RCC_CFGR_MCOPRE


	)

3940 
	#RCC_CFGR_MCO_PRE_1
 
RCC_CFGR_MCOPRE_DIV1


	)

3941 
	#RCC_CFGR_MCO_PRE_2
 
RCC_CFGR_MCOPRE_DIV2


	)

3942 
	#RCC_CFGR_MCO_PRE_4
 
RCC_CFGR_MCOPRE_DIV4


	)

3943 
	#RCC_CFGR_MCO_PRE_8
 
RCC_CFGR_MCOPRE_DIV8


	)

3944 
	#RCC_CFGR_MCO_PRE_16
 
RCC_CFGR_MCOPRE_DIV16


	)

3947 
	#RCC_CIER_LSIRDYIE_Pos
 (0U)

	)

3948 
	#RCC_CIER_LSIRDYIE_Msk
 (0x1U << 
RCC_CIER_LSIRDYIE_Pos
Ë

	)

3949 
	#RCC_CIER_LSIRDYIE
 
RCC_CIER_LSIRDYIE_Msk


	)

3950 
	#RCC_CIER_LSERDYIE_Pos
 (1U)

	)

3951 
	#RCC_CIER_LSERDYIE_Msk
 (0x1U << 
RCC_CIER_LSERDYIE_Pos
Ë

	)

3952 
	#RCC_CIER_LSERDYIE
 
RCC_CIER_LSERDYIE_Msk


	)

3953 
	#RCC_CIER_HSIRDYIE_Pos
 (2U)

	)

3954 
	#RCC_CIER_HSIRDYIE_Msk
 (0x1U << 
RCC_CIER_HSIRDYIE_Pos
Ë

	)

3955 
	#RCC_CIER_HSIRDYIE
 
RCC_CIER_HSIRDYIE_Msk


	)

3956 
	#RCC_CIER_HSERDYIE_Pos
 (3U)

	)

3957 
	#RCC_CIER_HSERDYIE_Msk
 (0x1U << 
RCC_CIER_HSERDYIE_Pos
Ë

	)

3958 
	#RCC_CIER_HSERDYIE
 
RCC_CIER_HSERDYIE_Msk


	)

3959 
	#RCC_CIER_PLLRDYIE_Pos
 (4U)

	)

3960 
	#RCC_CIER_PLLRDYIE_Msk
 (0x1U << 
RCC_CIER_PLLRDYIE_Pos
Ë

	)

3961 
	#RCC_CIER_PLLRDYIE
 
RCC_CIER_PLLRDYIE_Msk


	)

3962 
	#RCC_CIER_MSIRDYIE_Pos
 (5U)

	)

3963 
	#RCC_CIER_MSIRDYIE_Msk
 (0x1U << 
RCC_CIER_MSIRDYIE_Pos
Ë

	)

3964 
	#RCC_CIER_MSIRDYIE
 
RCC_CIER_MSIRDYIE_Msk


	)

3965 
	#RCC_CIER_HSI48RDYIE_Pos
 (6U)

	)

3966 
	#RCC_CIER_HSI48RDYIE_Msk
 (0x1U << 
RCC_CIER_HSI48RDYIE_Pos
Ë

	)

3967 
	#RCC_CIER_HSI48RDYIE
 
RCC_CIER_HSI48RDYIE_Msk


	)

3968 
	#RCC_CIER_CSSLSE_Pos
 (7U)

	)

3969 
	#RCC_CIER_CSSLSE_Msk
 (0x1U << 
RCC_CIER_CSSLSE_Pos
Ë

	)

3970 
	#RCC_CIER_CSSLSE
 
RCC_CIER_CSSLSE_Msk


	)

3973 
	#RCC_CIER_LSECSSIE
 
RCC_CIER_CSSLSE


	)

3976 
	#RCC_CIFR_LSIRDYF_Pos
 (0U)

	)

3977 
	#RCC_CIFR_LSIRDYF_Msk
 (0x1U << 
RCC_CIFR_LSIRDYF_Pos
Ë

	)

3978 
	#RCC_CIFR_LSIRDYF
 
RCC_CIFR_LSIRDYF_Msk


	)

3979 
	#RCC_CIFR_LSERDYF_Pos
 (1U)

	)

3980 
	#RCC_CIFR_LSERDYF_Msk
 (0x1U << 
RCC_CIFR_LSERDYF_Pos
Ë

	)

3981 
	#RCC_CIFR_LSERDYF
 
RCC_CIFR_LSERDYF_Msk


	)

3982 
	#RCC_CIFR_HSIRDYF_Pos
 (2U)

	)

3983 
	#RCC_CIFR_HSIRDYF_Msk
 (0x1U << 
RCC_CIFR_HSIRDYF_Pos
Ë

	)

3984 
	#RCC_CIFR_HSIRDYF
 
RCC_CIFR_HSIRDYF_Msk


	)

3985 
	#RCC_CIFR_HSERDYF_Pos
 (3U)

	)

3986 
	#RCC_CIFR_HSERDYF_Msk
 (0x1U << 
RCC_CIFR_HSERDYF_Pos
Ë

	)

3987 
	#RCC_CIFR_HSERDYF
 
RCC_CIFR_HSERDYF_Msk


	)

3988 
	#RCC_CIFR_PLLRDYF_Pos
 (4U)

	)

3989 
	#RCC_CIFR_PLLRDYF_Msk
 (0x1U << 
RCC_CIFR_PLLRDYF_Pos
Ë

	)

3990 
	#RCC_CIFR_PLLRDYF
 
RCC_CIFR_PLLRDYF_Msk


	)

3991 
	#RCC_CIFR_MSIRDYF_Pos
 (5U)

	)

3992 
	#RCC_CIFR_MSIRDYF_Msk
 (0x1U << 
RCC_CIFR_MSIRDYF_Pos
Ë

	)

3993 
	#RCC_CIFR_MSIRDYF
 
RCC_CIFR_MSIRDYF_Msk


	)

3994 
	#RCC_CIFR_HSI48RDYF_Pos
 (6U)

	)

3995 
	#RCC_CIFR_HSI48RDYF_Msk
 (0x1U << 
RCC_CIFR_HSI48RDYF_Pos
Ë

	)

3996 
	#RCC_CIFR_HSI48RDYF
 
RCC_CIFR_HSI48RDYF_Msk


	)

3997 
	#RCC_CIFR_CSSLSEF_Pos
 (7U)

	)

3998 
	#RCC_CIFR_CSSLSEF_Msk
 (0x1U << 
RCC_CIFR_CSSLSEF_Pos
Ë

	)

3999 
	#RCC_CIFR_CSSLSEF
 
RCC_CIFR_CSSLSEF_Msk


	)

4000 
	#RCC_CIFR_CSSHSEF_Pos
 (8U)

	)

4001 
	#RCC_CIFR_CSSHSEF_Msk
 (0x1U << 
RCC_CIFR_CSSHSEF_Pos
Ë

	)

4002 
	#RCC_CIFR_CSSHSEF
 
RCC_CIFR_CSSHSEF_Msk


	)

4005 
	#RCC_CIFR_LSECSSF
 
RCC_CIFR_CSSLSEF


	)

4006 
	#RCC_CIFR_CSSF
 
RCC_CIFR_CSSHSEF


	)

4009 
	#RCC_CICR_LSIRDYC_Pos
 (0U)

	)

4010 
	#RCC_CICR_LSIRDYC_Msk
 (0x1U << 
RCC_CICR_LSIRDYC_Pos
Ë

	)

4011 
	#RCC_CICR_LSIRDYC
 
RCC_CICR_LSIRDYC_Msk


	)

4012 
	#RCC_CICR_LSERDYC_Pos
 (1U)

	)

4013 
	#RCC_CICR_LSERDYC_Msk
 (0x1U << 
RCC_CICR_LSERDYC_Pos
Ë

	)

4014 
	#RCC_CICR_LSERDYC
 
RCC_CICR_LSERDYC_Msk


	)

4015 
	#RCC_CICR_HSIRDYC_Pos
 (2U)

	)

4016 
	#RCC_CICR_HSIRDYC_Msk
 (0x1U << 
RCC_CICR_HSIRDYC_Pos
Ë

	)

4017 
	#RCC_CICR_HSIRDYC
 
RCC_CICR_HSIRDYC_Msk


	)

4018 
	#RCC_CICR_HSERDYC_Pos
 (3U)

	)

4019 
	#RCC_CICR_HSERDYC_Msk
 (0x1U << 
RCC_CICR_HSERDYC_Pos
Ë

	)

4020 
	#RCC_CICR_HSERDYC
 
RCC_CICR_HSERDYC_Msk


	)

4021 
	#RCC_CICR_PLLRDYC_Pos
 (4U)

	)

4022 
	#RCC_CICR_PLLRDYC_Msk
 (0x1U << 
RCC_CICR_PLLRDYC_Pos
Ë

	)

4023 
	#RCC_CICR_PLLRDYC
 
RCC_CICR_PLLRDYC_Msk


	)

4024 
	#RCC_CICR_MSIRDYC_Pos
 (5U)

	)

4025 
	#RCC_CICR_MSIRDYC_Msk
 (0x1U << 
RCC_CICR_MSIRDYC_Pos
Ë

	)

4026 
	#RCC_CICR_MSIRDYC
 
RCC_CICR_MSIRDYC_Msk


	)

4027 
	#RCC_CICR_HSI48RDYC_Pos
 (6U)

	)

4028 
	#RCC_CICR_HSI48RDYC_Msk
 (0x1U << 
RCC_CICR_HSI48RDYC_Pos
Ë

	)

4029 
	#RCC_CICR_HSI48RDYC
 
RCC_CICR_HSI48RDYC_Msk


	)

4030 
	#RCC_CICR_CSSLSEC_Pos
 (7U)

	)

4031 
	#RCC_CICR_CSSLSEC_Msk
 (0x1U << 
RCC_CICR_CSSLSEC_Pos
Ë

	)

4032 
	#RCC_CICR_CSSLSEC
 
RCC_CICR_CSSLSEC_Msk


	)

4033 
	#RCC_CICR_CSSHSEC_Pos
 (8U)

	)

4034 
	#RCC_CICR_CSSHSEC_Msk
 (0x1U << 
RCC_CICR_CSSHSEC_Pos
Ë

	)

4035 
	#RCC_CICR_CSSHSEC
 
RCC_CICR_CSSHSEC_Msk


	)

4038 
	#RCC_CICR_LSECSSC
 
RCC_CICR_CSSLSEC


	)

4039 
	#RCC_CICR_CSSC
 
RCC_CICR_CSSHSEC


	)

4041 
	#RCC_IOPRSTR_IOPARST_Pos
 (0U)

	)

4042 
	#RCC_IOPRSTR_IOPARST_Msk
 (0x1U << 
RCC_IOPRSTR_IOPARST_Pos
Ë

	)

4043 
	#RCC_IOPRSTR_IOPARST
 
RCC_IOPRSTR_IOPARST_Msk


	)

4044 
	#RCC_IOPRSTR_IOPBRST_Pos
 (1U)

	)

4045 
	#RCC_IOPRSTR_IOPBRST_Msk
 (0x1U << 
RCC_IOPRSTR_IOPBRST_Pos
Ë

	)

4046 
	#RCC_IOPRSTR_IOPBRST
 
RCC_IOPRSTR_IOPBRST_Msk


	)

4047 
	#RCC_IOPRSTR_IOPCRST_Pos
 (2U)

	)

4048 
	#RCC_IOPRSTR_IOPCRST_Msk
 (0x1U << 
RCC_IOPRSTR_IOPCRST_Pos
Ë

	)

4049 
	#RCC_IOPRSTR_IOPCRST
 
RCC_IOPRSTR_IOPCRST_Msk


	)

4050 
	#RCC_IOPRSTR_IOPDRST_Pos
 (3U)

	)

4051 
	#RCC_IOPRSTR_IOPDRST_Msk
 (0x1U << 
RCC_IOPRSTR_IOPDRST_Pos
Ë

	)

4052 
	#RCC_IOPRSTR_IOPDRST
 
RCC_IOPRSTR_IOPDRST_Msk


	)

4053 
	#RCC_IOPRSTR_IOPHRST_Pos
 (7U)

	)

4054 
	#RCC_IOPRSTR_IOPHRST_Msk
 (0x1U << 
RCC_IOPRSTR_IOPHRST_Pos
Ë

	)

4055 
	#RCC_IOPRSTR_IOPHRST
 
RCC_IOPRSTR_IOPHRST_Msk


	)

4058 
	#RCC_IOPRSTR_GPIOARST
 
RCC_IOPRSTR_IOPARST


	)

4059 
	#RCC_IOPRSTR_GPIOBRST
 
RCC_IOPRSTR_IOPBRST


	)

4060 
	#RCC_IOPRSTR_GPIOCRST
 
RCC_IOPRSTR_IOPCRST


	)

4061 
	#RCC_IOPRSTR_GPIODRST
 
RCC_IOPRSTR_IOPDRST


	)

4062 
	#RCC_IOPRSTR_GPIOHRST
 
RCC_IOPRSTR_IOPHRST


	)

4066 
	#RCC_AHBRSTR_DMARST_Pos
 (0U)

	)

4067 
	#RCC_AHBRSTR_DMARST_Msk
 (0x1U << 
RCC_AHBRSTR_DMARST_Pos
Ë

	)

4068 
	#RCC_AHBRSTR_DMARST
 
RCC_AHBRSTR_DMARST_Msk


	)

4069 
	#RCC_AHBRSTR_MIFRST_Pos
 (8U)

	)

4070 
	#RCC_AHBRSTR_MIFRST_Msk
 (0x1U << 
RCC_AHBRSTR_MIFRST_Pos
Ë

	)

4071 
	#RCC_AHBRSTR_MIFRST
 
RCC_AHBRSTR_MIFRST_Msk


	)

4072 
	#RCC_AHBRSTR_CRCRST_Pos
 (12U)

	)

4073 
	#RCC_AHBRSTR_CRCRST_Msk
 (0x1U << 
RCC_AHBRSTR_CRCRST_Pos
Ë

	)

4074 
	#RCC_AHBRSTR_CRCRST
 
RCC_AHBRSTR_CRCRST_Msk


	)

4075 
	#RCC_AHBRSTR_TSCRST_Pos
 (16U)

	)

4076 
	#RCC_AHBRSTR_TSCRST_Msk
 (0x1U << 
RCC_AHBRSTR_TSCRST_Pos
Ë

	)

4077 
	#RCC_AHBRSTR_TSCRST
 
RCC_AHBRSTR_TSCRST_Msk


	)

4078 
	#RCC_AHBRSTR_RNGRST_Pos
 (20U)

	)

4079 
	#RCC_AHBRSTR_RNGRST_Msk
 (0x1U << 
RCC_AHBRSTR_RNGRST_Pos
Ë

	)

4080 
	#RCC_AHBRSTR_RNGRST
 
RCC_AHBRSTR_RNGRST_Msk


	)

4083 
	#RCC_AHBRSTR_DMA1RST
 
RCC_AHBRSTR_DMARST


	)

4086 
	#RCC_APB2RSTR_SYSCFGRST_Pos
 (0U)

	)

4087 
	#RCC_APB2RSTR_SYSCFGRST_Msk
 (0x1U << 
RCC_APB2RSTR_SYSCFGRST_Pos
Ë

	)

4088 
	#RCC_APB2RSTR_SYSCFGRST
 
RCC_APB2RSTR_SYSCFGRST_Msk


	)

4089 
	#RCC_APB2RSTR_TIM21RST_Pos
 (2U)

	)

4090 
	#RCC_APB2RSTR_TIM21RST_Msk
 (0x1U << 
RCC_APB2RSTR_TIM21RST_Pos
Ë

	)

4091 
	#RCC_APB2RSTR_TIM21RST
 
RCC_APB2RSTR_TIM21RST_Msk


	)

4092 
	#RCC_APB2RSTR_TIM22RST_Pos
 (5U)

	)

4093 
	#RCC_APB2RSTR_TIM22RST_Msk
 (0x1U << 
RCC_APB2RSTR_TIM22RST_Pos
Ë

	)

4094 
	#RCC_APB2RSTR_TIM22RST
 
RCC_APB2RSTR_TIM22RST_Msk


	)

4095 
	#RCC_APB2RSTR_ADCRST_Pos
 (9U)

	)

4096 
	#RCC_APB2RSTR_ADCRST_Msk
 (0x1U << 
RCC_APB2RSTR_ADCRST_Pos
Ë

	)

4097 
	#RCC_APB2RSTR_ADCRST
 
RCC_APB2RSTR_ADCRST_Msk


	)

4098 
	#RCC_APB2RSTR_SPI1RST_Pos
 (12U)

	)

4099 
	#RCC_APB2RSTR_SPI1RST_Msk
 (0x1U << 
RCC_APB2RSTR_SPI1RST_Pos
Ë

	)

4100 
	#RCC_APB2RSTR_SPI1RST
 
RCC_APB2RSTR_SPI1RST_Msk


	)

4101 
	#RCC_APB2RSTR_USART1RST_Pos
 (14U)

	)

4102 
	#RCC_APB2RSTR_USART1RST_Msk
 (0x1U << 
RCC_APB2RSTR_USART1RST_Pos
Ë

	)

4103 
	#RCC_APB2RSTR_USART1RST
 
RCC_APB2RSTR_USART1RST_Msk


	)

4104 
	#RCC_APB2RSTR_DBGRST_Pos
 (22U)

	)

4105 
	#RCC_APB2RSTR_DBGRST_Msk
 (0x1U << 
RCC_APB2RSTR_DBGRST_Pos
Ë

	)

4106 
	#RCC_APB2RSTR_DBGRST
 
RCC_APB2RSTR_DBGRST_Msk


	)

4109 
	#RCC_APB2RSTR_ADC1RST
 
RCC_APB2RSTR_ADCRST


	)

4110 
	#RCC_APB2RSTR_DBGMCURST
 
RCC_APB2RSTR_DBGRST


	)

4113 
	#RCC_APB1RSTR_TIM2RST_Pos
 (0U)

	)

4114 
	#RCC_APB1RSTR_TIM2RST_Msk
 (0x1U << 
RCC_APB1RSTR_TIM2RST_Pos
Ë

	)

4115 
	#RCC_APB1RSTR_TIM2RST
 
RCC_APB1RSTR_TIM2RST_Msk


	)

4116 
	#RCC_APB1RSTR_TIM6RST_Pos
 (4U)

	)

4117 
	#RCC_APB1RSTR_TIM6RST_Msk
 (0x1U << 
RCC_APB1RSTR_TIM6RST_Pos
Ë

	)

4118 
	#RCC_APB1RSTR_TIM6RST
 
RCC_APB1RSTR_TIM6RST_Msk


	)

4119 
	#RCC_APB1RSTR_LCDRST_Pos
 (9U)

	)

4120 
	#RCC_APB1RSTR_LCDRST_Msk
 (0x1U << 
RCC_APB1RSTR_LCDRST_Pos
Ë

	)

4121 
	#RCC_APB1RSTR_LCDRST
 
RCC_APB1RSTR_LCDRST_Msk


	)

4122 
	#RCC_APB1RSTR_WWDGRST_Pos
 (11U)

	)

4123 
	#RCC_APB1RSTR_WWDGRST_Msk
 (0x1U << 
RCC_APB1RSTR_WWDGRST_Pos
Ë

	)

4124 
	#RCC_APB1RSTR_WWDGRST
 
RCC_APB1RSTR_WWDGRST_Msk


	)

4125 
	#RCC_APB1RSTR_SPI2RST_Pos
 (14U)

	)

4126 
	#RCC_APB1RSTR_SPI2RST_Msk
 (0x1U << 
RCC_APB1RSTR_SPI2RST_Pos
Ë

	)

4127 
	#RCC_APB1RSTR_SPI2RST
 
RCC_APB1RSTR_SPI2RST_Msk


	)

4128 
	#RCC_APB1RSTR_USART2RST_Pos
 (17U)

	)

4129 
	#RCC_APB1RSTR_USART2RST_Msk
 (0x1U << 
RCC_APB1RSTR_USART2RST_Pos
Ë

	)

4130 
	#RCC_APB1RSTR_USART2RST
 
RCC_APB1RSTR_USART2RST_Msk


	)

4131 
	#RCC_APB1RSTR_LPUART1RST_Pos
 (18U)

	)

4132 
	#RCC_APB1RSTR_LPUART1RST_Msk
 (0x1U << 
RCC_APB1RSTR_LPUART1RST_Pos
Ë

	)

4133 
	#RCC_APB1RSTR_LPUART1RST
 
RCC_APB1RSTR_LPUART1RST_Msk


	)

4134 
	#RCC_APB1RSTR_I2C1RST_Pos
 (21U)

	)

4135 
	#RCC_APB1RSTR_I2C1RST_Msk
 (0x1U << 
RCC_APB1RSTR_I2C1RST_Pos
Ë

	)

4136 
	#RCC_APB1RSTR_I2C1RST
 
RCC_APB1RSTR_I2C1RST_Msk


	)

4137 
	#RCC_APB1RSTR_I2C2RST_Pos
 (22U)

	)

4138 
	#RCC_APB1RSTR_I2C2RST_Msk
 (0x1U << 
RCC_APB1RSTR_I2C2RST_Pos
Ë

	)

4139 
	#RCC_APB1RSTR_I2C2RST
 
RCC_APB1RSTR_I2C2RST_Msk


	)

4140 
	#RCC_APB1RSTR_USBRST_Pos
 (23U)

	)

4141 
	#RCC_APB1RSTR_USBRST_Msk
 (0x1U << 
RCC_APB1RSTR_USBRST_Pos
Ë

	)

4142 
	#RCC_APB1RSTR_USBRST
 
RCC_APB1RSTR_USBRST_Msk


	)

4143 
	#RCC_APB1RSTR_CRSRST_Pos
 (27U)

	)

4144 
	#RCC_APB1RSTR_CRSRST_Msk
 (0x1U << 
RCC_APB1RSTR_CRSRST_Pos
Ë

	)

4145 
	#RCC_APB1RSTR_CRSRST
 
RCC_APB1RSTR_CRSRST_Msk


	)

4146 
	#RCC_APB1RSTR_PWRRST_Pos
 (28U)

	)

4147 
	#RCC_APB1RSTR_PWRRST_Msk
 (0x1U << 
RCC_APB1RSTR_PWRRST_Pos
Ë

	)

4148 
	#RCC_APB1RSTR_PWRRST
 
RCC_APB1RSTR_PWRRST_Msk


	)

4149 
	#RCC_APB1RSTR_DACRST_Pos
 (29U)

	)

4150 
	#RCC_APB1RSTR_DACRST_Msk
 (0x1U << 
RCC_APB1RSTR_DACRST_Pos
Ë

	)

4151 
	#RCC_APB1RSTR_DACRST
 
RCC_APB1RSTR_DACRST_Msk


	)

4152 
	#RCC_APB1RSTR_LPTIM1RST_Pos
 (31U)

	)

4153 
	#RCC_APB1RSTR_LPTIM1RST_Msk
 (0x1U << 
RCC_APB1RSTR_LPTIM1RST_Pos
Ë

	)

4154 
	#RCC_APB1RSTR_LPTIM1RST
 
RCC_APB1RSTR_LPTIM1RST_Msk


	)

4157 
	#RCC_IOPENR_IOPAEN_Pos
 (0U)

	)

4158 
	#RCC_IOPENR_IOPAEN_Msk
 (0x1U << 
RCC_IOPENR_IOPAEN_Pos
Ë

	)

4159 
	#RCC_IOPENR_IOPAEN
 
RCC_IOPENR_IOPAEN_Msk


	)

4160 
	#RCC_IOPENR_IOPBEN_Pos
 (1U)

	)

4161 
	#RCC_IOPENR_IOPBEN_Msk
 (0x1U << 
RCC_IOPENR_IOPBEN_Pos
Ë

	)

4162 
	#RCC_IOPENR_IOPBEN
 
RCC_IOPENR_IOPBEN_Msk


	)

4163 
	#RCC_IOPENR_IOPCEN_Pos
 (2U)

	)

4164 
	#RCC_IOPENR_IOPCEN_Msk
 (0x1U << 
RCC_IOPENR_IOPCEN_Pos
Ë

	)

4165 
	#RCC_IOPENR_IOPCEN
 
RCC_IOPENR_IOPCEN_Msk


	)

4166 
	#RCC_IOPENR_IOPDEN_Pos
 (3U)

	)

4167 
	#RCC_IOPENR_IOPDEN_Msk
 (0x1U << 
RCC_IOPENR_IOPDEN_Pos
Ë

	)

4168 
	#RCC_IOPENR_IOPDEN
 
RCC_IOPENR_IOPDEN_Msk


	)

4169 
	#RCC_IOPENR_IOPHEN_Pos
 (7U)

	)

4170 
	#RCC_IOPENR_IOPHEN_Msk
 (0x1U << 
RCC_IOPENR_IOPHEN_Pos
Ë

	)

4171 
	#RCC_IOPENR_IOPHEN
 
RCC_IOPENR_IOPHEN_Msk


	)

4174 
	#RCC_IOPENR_GPIOAEN
 
RCC_IOPENR_IOPAEN


	)

4175 
	#RCC_IOPENR_GPIOBEN
 
RCC_IOPENR_IOPBEN


	)

4176 
	#RCC_IOPENR_GPIOCEN
 
RCC_IOPENR_IOPCEN


	)

4177 
	#RCC_IOPENR_GPIODEN
 
RCC_IOPENR_IOPDEN


	)

4178 
	#RCC_IOPENR_GPIOHEN
 
RCC_IOPENR_IOPHEN


	)

4181 
	#RCC_AHBENR_DMAEN_Pos
 (0U)

	)

4182 
	#RCC_AHBENR_DMAEN_Msk
 (0x1U << 
RCC_AHBENR_DMAEN_Pos
Ë

	)

4183 
	#RCC_AHBENR_DMAEN
 
RCC_AHBENR_DMAEN_Msk


	)

4184 
	#RCC_AHBENR_MIFEN_Pos
 (8U)

	)

4185 
	#RCC_AHBENR_MIFEN_Msk
 (0x1U << 
RCC_AHBENR_MIFEN_Pos
Ë

	)

4186 
	#RCC_AHBENR_MIFEN
 
RCC_AHBENR_MIFEN_Msk


	)

4187 
	#RCC_AHBENR_CRCEN_Pos
 (12U)

	)

4188 
	#RCC_AHBENR_CRCEN_Msk
 (0x1U << 
RCC_AHBENR_CRCEN_Pos
Ë

	)

4189 
	#RCC_AHBENR_CRCEN
 
RCC_AHBENR_CRCEN_Msk


	)

4190 
	#RCC_AHBENR_TSCEN_Pos
 (16U)

	)

4191 
	#RCC_AHBENR_TSCEN_Msk
 (0x1U << 
RCC_AHBENR_TSCEN_Pos
Ë

	)

4192 
	#RCC_AHBENR_TSCEN
 
RCC_AHBENR_TSCEN_Msk


	)

4193 
	#RCC_AHBENR_RNGEN_Pos
 (20U)

	)

4194 
	#RCC_AHBENR_RNGEN_Msk
 (0x1U << 
RCC_AHBENR_RNGEN_Pos
Ë

	)

4195 
	#RCC_AHBENR_RNGEN
 
RCC_AHBENR_RNGEN_Msk


	)

4198 
	#RCC_AHBENR_DMA1EN
 
RCC_AHBENR_DMAEN


	)

4201 
	#RCC_APB2ENR_SYSCFGEN_Pos
 (0U)

	)

4202 
	#RCC_APB2ENR_SYSCFGEN_Msk
 (0x1U << 
RCC_APB2ENR_SYSCFGEN_Pos
Ë

	)

4203 
	#RCC_APB2ENR_SYSCFGEN
 
RCC_APB2ENR_SYSCFGEN_Msk


	)

4204 
	#RCC_APB2ENR_TIM21EN_Pos
 (2U)

	)

4205 
	#RCC_APB2ENR_TIM21EN_Msk
 (0x1U << 
RCC_APB2ENR_TIM21EN_Pos
Ë

	)

4206 
	#RCC_APB2ENR_TIM21EN
 
RCC_APB2ENR_TIM21EN_Msk


	)

4207 
	#RCC_APB2ENR_TIM22EN_Pos
 (5U)

	)

4208 
	#RCC_APB2ENR_TIM22EN_Msk
 (0x1U << 
RCC_APB2ENR_TIM22EN_Pos
Ë

	)

4209 
	#RCC_APB2ENR_TIM22EN
 
RCC_APB2ENR_TIM22EN_Msk


	)

4210 
	#RCC_APB2ENR_FWEN_Pos
 (7U)

	)

4211 
	#RCC_APB2ENR_FWEN_Msk
 (0x1U << 
RCC_APB2ENR_FWEN_Pos
Ë

	)

4212 
	#RCC_APB2ENR_FWEN
 
RCC_APB2ENR_FWEN_Msk


	)

4213 
	#RCC_APB2ENR_ADCEN_Pos
 (9U)

	)

4214 
	#RCC_APB2ENR_ADCEN_Msk
 (0x1U << 
RCC_APB2ENR_ADCEN_Pos
Ë

	)

4215 
	#RCC_APB2ENR_ADCEN
 
RCC_APB2ENR_ADCEN_Msk


	)

4216 
	#RCC_APB2ENR_SPI1EN_Pos
 (12U)

	)

4217 
	#RCC_APB2ENR_SPI1EN_Msk
 (0x1U << 
RCC_APB2ENR_SPI1EN_Pos
Ë

	)

4218 
	#RCC_APB2ENR_SPI1EN
 
RCC_APB2ENR_SPI1EN_Msk


	)

4219 
	#RCC_APB2ENR_USART1EN_Pos
 (14U)

	)

4220 
	#RCC_APB2ENR_USART1EN_Msk
 (0x1U << 
RCC_APB2ENR_USART1EN_Pos
Ë

	)

4221 
	#RCC_APB2ENR_USART1EN
 
RCC_APB2ENR_USART1EN_Msk


	)

4222 
	#RCC_APB2ENR_DBGEN_Pos
 (22U)

	)

4223 
	#RCC_APB2ENR_DBGEN_Msk
 (0x1U << 
RCC_APB2ENR_DBGEN_Pos
Ë

	)

4224 
	#RCC_APB2ENR_DBGEN
 
RCC_APB2ENR_DBGEN_Msk


	)

4228 
	#RCC_APB2ENR_MIFIEN
 
RCC_APB2ENR_FWEN


	)

4229 
	#RCC_APB2ENR_ADC1EN
 
RCC_APB2ENR_ADCEN


	)

4230 
	#RCC_APB2ENR_DBGMCUEN
 
RCC_APB2ENR_DBGEN


	)

4233 
	#RCC_APB1ENR_TIM2EN_Pos
 (0U)

	)

4234 
	#RCC_APB1ENR_TIM2EN_Msk
 (0x1U << 
RCC_APB1ENR_TIM2EN_Pos
Ë

	)

4235 
	#RCC_APB1ENR_TIM2EN
 
RCC_APB1ENR_TIM2EN_Msk


	)

4236 
	#RCC_APB1ENR_TIM6EN_Pos
 (4U)

	)

4237 
	#RCC_APB1ENR_TIM6EN_Msk
 (0x1U << 
RCC_APB1ENR_TIM6EN_Pos
Ë

	)

4238 
	#RCC_APB1ENR_TIM6EN
 
RCC_APB1ENR_TIM6EN_Msk


	)

4239 
	#RCC_APB1ENR_LCDEN_Pos
 (9U)

	)

4240 
	#RCC_APB1ENR_LCDEN_Msk
 (0x1U << 
RCC_APB1ENR_LCDEN_Pos
Ë

	)

4241 
	#RCC_APB1ENR_LCDEN
 
RCC_APB1ENR_LCDEN_Msk


	)

4242 
	#RCC_APB1ENR_WWDGEN_Pos
 (11U)

	)

4243 
	#RCC_APB1ENR_WWDGEN_Msk
 (0x1U << 
RCC_APB1ENR_WWDGEN_Pos
Ë

	)

4244 
	#RCC_APB1ENR_WWDGEN
 
RCC_APB1ENR_WWDGEN_Msk


	)

4245 
	#RCC_APB1ENR_SPI2EN_Pos
 (14U)

	)

4246 
	#RCC_APB1ENR_SPI2EN_Msk
 (0x1U << 
RCC_APB1ENR_SPI2EN_Pos
Ë

	)

4247 
	#RCC_APB1ENR_SPI2EN
 
RCC_APB1ENR_SPI2EN_Msk


	)

4248 
	#RCC_APB1ENR_USART2EN_Pos
 (17U)

	)

4249 
	#RCC_APB1ENR_USART2EN_Msk
 (0x1U << 
RCC_APB1ENR_USART2EN_Pos
Ë

	)

4250 
	#RCC_APB1ENR_USART2EN
 
RCC_APB1ENR_USART2EN_Msk


	)

4251 
	#RCC_APB1ENR_LPUART1EN_Pos
 (18U)

	)

4252 
	#RCC_APB1ENR_LPUART1EN_Msk
 (0x1U << 
RCC_APB1ENR_LPUART1EN_Pos
Ë

	)

4253 
	#RCC_APB1ENR_LPUART1EN
 
RCC_APB1ENR_LPUART1EN_Msk


	)

4254 
	#RCC_APB1ENR_I2C1EN_Pos
 (21U)

	)

4255 
	#RCC_APB1ENR_I2C1EN_Msk
 (0x1U << 
RCC_APB1ENR_I2C1EN_Pos
Ë

	)

4256 
	#RCC_APB1ENR_I2C1EN
 
RCC_APB1ENR_I2C1EN_Msk


	)

4257 
	#RCC_APB1ENR_I2C2EN_Pos
 (22U)

	)

4258 
	#RCC_APB1ENR_I2C2EN_Msk
 (0x1U << 
RCC_APB1ENR_I2C2EN_Pos
Ë

	)

4259 
	#RCC_APB1ENR_I2C2EN
 
RCC_APB1ENR_I2C2EN_Msk


	)

4260 
	#RCC_APB1ENR_USBEN_Pos
 (23U)

	)

4261 
	#RCC_APB1ENR_USBEN_Msk
 (0x1U << 
RCC_APB1ENR_USBEN_Pos
Ë

	)

4262 
	#RCC_APB1ENR_USBEN
 
RCC_APB1ENR_USBEN_Msk


	)

4263 
	#RCC_APB1ENR_CRSEN_Pos
 (27U)

	)

4264 
	#RCC_APB1ENR_CRSEN_Msk
 (0x1U << 
RCC_APB1ENR_CRSEN_Pos
Ë

	)

4265 
	#RCC_APB1ENR_CRSEN
 
RCC_APB1ENR_CRSEN_Msk


	)

4266 
	#RCC_APB1ENR_PWREN_Pos
 (28U)

	)

4267 
	#RCC_APB1ENR_PWREN_Msk
 (0x1U << 
RCC_APB1ENR_PWREN_Pos
Ë

	)

4268 
	#RCC_APB1ENR_PWREN
 
RCC_APB1ENR_PWREN_Msk


	)

4269 
	#RCC_APB1ENR_DACEN_Pos
 (29U)

	)

4270 
	#RCC_APB1ENR_DACEN_Msk
 (0x1U << 
RCC_APB1ENR_DACEN_Pos
Ë

	)

4271 
	#RCC_APB1ENR_DACEN
 
RCC_APB1ENR_DACEN_Msk


	)

4272 
	#RCC_APB1ENR_LPTIM1EN_Pos
 (31U)

	)

4273 
	#RCC_APB1ENR_LPTIM1EN_Msk
 (0x1U << 
RCC_APB1ENR_LPTIM1EN_Pos
Ë

	)

4274 
	#RCC_APB1ENR_LPTIM1EN
 
RCC_APB1ENR_LPTIM1EN_Msk


	)

4277 
	#RCC_IOPSMENR_IOPASMEN_Pos
 (0U)

	)

4278 
	#RCC_IOPSMENR_IOPASMEN_Msk
 (0x1U << 
RCC_IOPSMENR_IOPASMEN_Pos
Ë

	)

4279 
	#RCC_IOPSMENR_IOPASMEN
 
RCC_IOPSMENR_IOPASMEN_Msk


	)

4280 
	#RCC_IOPSMENR_IOPBSMEN_Pos
 (1U)

	)

4281 
	#RCC_IOPSMENR_IOPBSMEN_Msk
 (0x1U << 
RCC_IOPSMENR_IOPBSMEN_Pos
Ë

	)

4282 
	#RCC_IOPSMENR_IOPBSMEN
 
RCC_IOPSMENR_IOPBSMEN_Msk


	)

4283 
	#RCC_IOPSMENR_IOPCSMEN_Pos
 (2U)

	)

4284 
	#RCC_IOPSMENR_IOPCSMEN_Msk
 (0x1U << 
RCC_IOPSMENR_IOPCSMEN_Pos
Ë

	)

4285 
	#RCC_IOPSMENR_IOPCSMEN
 
RCC_IOPSMENR_IOPCSMEN_Msk


	)

4286 
	#RCC_IOPSMENR_IOPDSMEN_Pos
 (3U)

	)

4287 
	#RCC_IOPSMENR_IOPDSMEN_Msk
 (0x1U << 
RCC_IOPSMENR_IOPDSMEN_Pos
Ë

	)

4288 
	#RCC_IOPSMENR_IOPDSMEN
 
RCC_IOPSMENR_IOPDSMEN_Msk


	)

4289 
	#RCC_IOPSMENR_IOPHSMEN_Pos
 (7U)

	)

4290 
	#RCC_IOPSMENR_IOPHSMEN_Msk
 (0x1U << 
RCC_IOPSMENR_IOPHSMEN_Pos
Ë

	)

4291 
	#RCC_IOPSMENR_IOPHSMEN
 
RCC_IOPSMENR_IOPHSMEN_Msk


	)

4294 
	#RCC_IOPSMENR_GPIOASMEN
 
RCC_IOPSMENR_IOPASMEN


	)

4295 
	#RCC_IOPSMENR_GPIOBSMEN
 
RCC_IOPSMENR_IOPBSMEN


	)

4296 
	#RCC_IOPSMENR_GPIOCSMEN
 
RCC_IOPSMENR_IOPCSMEN


	)

4297 
	#RCC_IOPSMENR_GPIODSMEN
 
RCC_IOPSMENR_IOPDSMEN


	)

4298 
	#RCC_IOPSMENR_GPIOHSMEN
 
RCC_IOPSMENR_IOPHSMEN


	)

4301 
	#RCC_AHBSMENR_DMASMEN_Pos
 (0U)

	)

4302 
	#RCC_AHBSMENR_DMASMEN_Msk
 (0x1U << 
RCC_AHBSMENR_DMASMEN_Pos
Ë

	)

4303 
	#RCC_AHBSMENR_DMASMEN
 
RCC_AHBSMENR_DMASMEN_Msk


	)

4304 
	#RCC_AHBSMENR_MIFSMEN_Pos
 (8U)

	)

4305 
	#RCC_AHBSMENR_MIFSMEN_Msk
 (0x1U << 
RCC_AHBSMENR_MIFSMEN_Pos
Ë

	)

4306 
	#RCC_AHBSMENR_MIFSMEN
 
RCC_AHBSMENR_MIFSMEN_Msk


	)

4307 
	#RCC_AHBSMENR_SRAMSMEN_Pos
 (9U)

	)

4308 
	#RCC_AHBSMENR_SRAMSMEN_Msk
 (0x1U << 
RCC_AHBSMENR_SRAMSMEN_Pos
Ë

	)

4309 
	#RCC_AHBSMENR_SRAMSMEN
 
RCC_AHBSMENR_SRAMSMEN_Msk


	)

4310 
	#RCC_AHBSMENR_CRCSMEN_Pos
 (12U)

	)

4311 
	#RCC_AHBSMENR_CRCSMEN_Msk
 (0x1U << 
RCC_AHBSMENR_CRCSMEN_Pos
Ë

	)

4312 
	#RCC_AHBSMENR_CRCSMEN
 
RCC_AHBSMENR_CRCSMEN_Msk


	)

4313 
	#RCC_AHBSMENR_TSCSMEN_Pos
 (16U)

	)

4314 
	#RCC_AHBSMENR_TSCSMEN_Msk
 (0x1U << 
RCC_AHBSMENR_TSCSMEN_Pos
Ë

	)

4315 
	#RCC_AHBSMENR_TSCSMEN
 
RCC_AHBSMENR_TSCSMEN_Msk


	)

4316 
	#RCC_AHBSMENR_RNGSMEN_Pos
 (20U)

	)

4317 
	#RCC_AHBSMENR_RNGSMEN_Msk
 (0x1U << 
RCC_AHBSMENR_RNGSMEN_Pos
Ë

	)

4318 
	#RCC_AHBSMENR_RNGSMEN
 
RCC_AHBSMENR_RNGSMEN_Msk


	)

4321 
	#RCC_AHBSMENR_DMA1SMEN
 
RCC_AHBSMENR_DMASMEN


	)

4324 
	#RCC_APB2SMENR_SYSCFGSMEN_Pos
 (0U)

	)

4325 
	#RCC_APB2SMENR_SYSCFGSMEN_Msk
 (0x1U << 
RCC_APB2SMENR_SYSCFGSMEN_Pos
Ë

	)

4326 
	#RCC_APB2SMENR_SYSCFGSMEN
 
RCC_APB2SMENR_SYSCFGSMEN_Msk


	)

4327 
	#RCC_APB2SMENR_TIM21SMEN_Pos
 (2U)

	)

4328 
	#RCC_APB2SMENR_TIM21SMEN_Msk
 (0x1U << 
RCC_APB2SMENR_TIM21SMEN_Pos
Ë

	)

4329 
	#RCC_APB2SMENR_TIM21SMEN
 
RCC_APB2SMENR_TIM21SMEN_Msk


	)

4330 
	#RCC_APB2SMENR_TIM22SMEN_Pos
 (5U)

	)

4331 
	#RCC_APB2SMENR_TIM22SMEN_Msk
 (0x1U << 
RCC_APB2SMENR_TIM22SMEN_Pos
Ë

	)

4332 
	#RCC_APB2SMENR_TIM22SMEN
 
RCC_APB2SMENR_TIM22SMEN_Msk


	)

4333 
	#RCC_APB2SMENR_ADCSMEN_Pos
 (9U)

	)

4334 
	#RCC_APB2SMENR_ADCSMEN_Msk
 (0x1U << 
RCC_APB2SMENR_ADCSMEN_Pos
Ë

	)

4335 
	#RCC_APB2SMENR_ADCSMEN
 
RCC_APB2SMENR_ADCSMEN_Msk


	)

4336 
	#RCC_APB2SMENR_SPI1SMEN_Pos
 (12U)

	)

4337 
	#RCC_APB2SMENR_SPI1SMEN_Msk
 (0x1U << 
RCC_APB2SMENR_SPI1SMEN_Pos
Ë

	)

4338 
	#RCC_APB2SMENR_SPI1SMEN
 
RCC_APB2SMENR_SPI1SMEN_Msk


	)

4339 
	#RCC_APB2SMENR_USART1SMEN_Pos
 (14U)

	)

4340 
	#RCC_APB2SMENR_USART1SMEN_Msk
 (0x1U << 
RCC_APB2SMENR_USART1SMEN_Pos
Ë

	)

4341 
	#RCC_APB2SMENR_USART1SMEN
 
RCC_APB2SMENR_USART1SMEN_Msk


	)

4342 
	#RCC_APB2SMENR_DBGSMEN_Pos
 (22U)

	)

4343 
	#RCC_APB2SMENR_DBGSMEN_Msk
 (0x1U << 
RCC_APB2SMENR_DBGSMEN_Pos
Ë

	)

4344 
	#RCC_APB2SMENR_DBGSMEN
 
RCC_APB2SMENR_DBGSMEN_Msk


	)

4347 
	#RCC_APB2SMENR_ADC1SMEN
 
RCC_APB2SMENR_ADCSMEN


	)

4348 
	#RCC_APB2SMENR_DBGMCUSMEN
 
RCC_APB2SMENR_DBGSMEN


	)

4351 
	#RCC_APB1SMENR_TIM2SMEN_Pos
 (0U)

	)

4352 
	#RCC_APB1SMENR_TIM2SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_TIM2SMEN_Pos
Ë

	)

4353 
	#RCC_APB1SMENR_TIM2SMEN
 
RCC_APB1SMENR_TIM2SMEN_Msk


	)

4354 
	#RCC_APB1SMENR_TIM6SMEN_Pos
 (4U)

	)

4355 
	#RCC_APB1SMENR_TIM6SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_TIM6SMEN_Pos
Ë

	)

4356 
	#RCC_APB1SMENR_TIM6SMEN
 
RCC_APB1SMENR_TIM6SMEN_Msk


	)

4357 
	#RCC_APB1SMENR_LCDSMEN_Pos
 (9U)

	)

4358 
	#RCC_APB1SMENR_LCDSMEN_Msk
 (0x1U << 
RCC_APB1SMENR_LCDSMEN_Pos
Ë

	)

4359 
	#RCC_APB1SMENR_LCDSMEN
 
RCC_APB1SMENR_LCDSMEN_Msk


	)

4360 
	#RCC_APB1SMENR_WWDGSMEN_Pos
 (11U)

	)

4361 
	#RCC_APB1SMENR_WWDGSMEN_Msk
 (0x1U << 
RCC_APB1SMENR_WWDGSMEN_Pos
Ë

	)

4362 
	#RCC_APB1SMENR_WWDGSMEN
 
RCC_APB1SMENR_WWDGSMEN_Msk


	)

4363 
	#RCC_APB1SMENR_SPI2SMEN_Pos
 (14U)

	)

4364 
	#RCC_APB1SMENR_SPI2SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_SPI2SMEN_Pos
Ë

	)

4365 
	#RCC_APB1SMENR_SPI2SMEN
 
RCC_APB1SMENR_SPI2SMEN_Msk


	)

4366 
	#RCC_APB1SMENR_USART2SMEN_Pos
 (17U)

	)

4367 
	#RCC_APB1SMENR_USART2SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_USART2SMEN_Pos
Ë

	)

4368 
	#RCC_APB1SMENR_USART2SMEN
 
RCC_APB1SMENR_USART2SMEN_Msk


	)

4369 
	#RCC_APB1SMENR_LPUART1SMEN_Pos
 (18U)

	)

4370 
	#RCC_APB1SMENR_LPUART1SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_LPUART1SMEN_Pos
Ë

	)

4371 
	#RCC_APB1SMENR_LPUART1SMEN
 
RCC_APB1SMENR_LPUART1SMEN_Msk


	)

4372 
	#RCC_APB1SMENR_I2C1SMEN_Pos
 (21U)

	)

4373 
	#RCC_APB1SMENR_I2C1SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_I2C1SMEN_Pos
Ë

	)

4374 
	#RCC_APB1SMENR_I2C1SMEN
 
RCC_APB1SMENR_I2C1SMEN_Msk


	)

4375 
	#RCC_APB1SMENR_I2C2SMEN_Pos
 (22U)

	)

4376 
	#RCC_APB1SMENR_I2C2SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_I2C2SMEN_Pos
Ë

	)

4377 
	#RCC_APB1SMENR_I2C2SMEN
 
RCC_APB1SMENR_I2C2SMEN_Msk


	)

4378 
	#RCC_APB1SMENR_USBSMEN_Pos
 (23U)

	)

4379 
	#RCC_APB1SMENR_USBSMEN_Msk
 (0x1U << 
RCC_APB1SMENR_USBSMEN_Pos
Ë

	)

4380 
	#RCC_APB1SMENR_USBSMEN
 
RCC_APB1SMENR_USBSMEN_Msk


	)

4381 
	#RCC_APB1SMENR_CRSSMEN_Pos
 (27U)

	)

4382 
	#RCC_APB1SMENR_CRSSMEN_Msk
 (0x1U << 
RCC_APB1SMENR_CRSSMEN_Pos
Ë

	)

4383 
	#RCC_APB1SMENR_CRSSMEN
 
RCC_APB1SMENR_CRSSMEN_Msk


	)

4384 
	#RCC_APB1SMENR_PWRSMEN_Pos
 (28U)

	)

4385 
	#RCC_APB1SMENR_PWRSMEN_Msk
 (0x1U << 
RCC_APB1SMENR_PWRSMEN_Pos
Ë

	)

4386 
	#RCC_APB1SMENR_PWRSMEN
 
RCC_APB1SMENR_PWRSMEN_Msk


	)

4387 
	#RCC_APB1SMENR_DACSMEN_Pos
 (29U)

	)

4388 
	#RCC_APB1SMENR_DACSMEN_Msk
 (0x1U << 
RCC_APB1SMENR_DACSMEN_Pos
Ë

	)

4389 
	#RCC_APB1SMENR_DACSMEN
 
RCC_APB1SMENR_DACSMEN_Msk


	)

4390 
	#RCC_APB1SMENR_LPTIM1SMEN_Pos
 (31U)

	)

4391 
	#RCC_APB1SMENR_LPTIM1SMEN_Msk
 (0x1U << 
RCC_APB1SMENR_LPTIM1SMEN_Pos
Ë

	)

4392 
	#RCC_APB1SMENR_LPTIM1SMEN
 
RCC_APB1SMENR_LPTIM1SMEN_Msk


	)

4396 
	#RCC_CCIPR_USART1SEL_Pos
 (0U)

	)

4397 
	#RCC_CCIPR_USART1SEL_Msk
 (0x3U << 
RCC_CCIPR_USART1SEL_Pos
Ë

	)

4398 
	#RCC_CCIPR_USART1SEL
 
RCC_CCIPR_USART1SEL_Msk


	)

4399 
	#RCC_CCIPR_USART1SEL_0
 (0x1U << 
RCC_CCIPR_USART1SEL_Pos
Ë

	)

4400 
	#RCC_CCIPR_USART1SEL_1
 (0x2U << 
RCC_CCIPR_USART1SEL_Pos
Ë

	)

4403 
	#RCC_CCIPR_USART2SEL_Pos
 (2U)

	)

4404 
	#RCC_CCIPR_USART2SEL_Msk
 (0x3U << 
RCC_CCIPR_USART2SEL_Pos
Ë

	)

4405 
	#RCC_CCIPR_USART2SEL
 
RCC_CCIPR_USART2SEL_Msk


	)

4406 
	#RCC_CCIPR_USART2SEL_0
 (0x1U << 
RCC_CCIPR_USART2SEL_Pos
Ë

	)

4407 
	#RCC_CCIPR_USART2SEL_1
 (0x2U << 
RCC_CCIPR_USART2SEL_Pos
Ë

	)

4410 
	#RCC_CCIPR_LPUART1SEL_Pos
 (10U)

	)

4411 
	#RCC_CCIPR_LPUART1SEL_Msk
 (0x3U << 
RCC_CCIPR_LPUART1SEL_Pos
Ë

	)

4412 
	#RCC_CCIPR_LPUART1SEL
 
RCC_CCIPR_LPUART1SEL_Msk


	)

4413 
	#RCC_CCIPR_LPUART1SEL_0
 (0x1U << 
RCC_CCIPR_LPUART1SEL_Pos
Ë

	)

4414 
	#RCC_CCIPR_LPUART1SEL_1
 (0x2U << 
RCC_CCIPR_LPUART1SEL_Pos
Ë

	)

4417 
	#RCC_CCIPR_I2C1SEL_Pos
 (12U)

	)

4418 
	#RCC_CCIPR_I2C1SEL_Msk
 (0x3U << 
RCC_CCIPR_I2C1SEL_Pos
Ë

	)

4419 
	#RCC_CCIPR_I2C1SEL
 
RCC_CCIPR_I2C1SEL_Msk


	)

4420 
	#RCC_CCIPR_I2C1SEL_0
 (0x1U << 
RCC_CCIPR_I2C1SEL_Pos
Ë

	)

4421 
	#RCC_CCIPR_I2C1SEL_1
 (0x2U << 
RCC_CCIPR_I2C1SEL_Pos
Ë

	)

4425 
	#RCC_CCIPR_LPTIM1SEL_Pos
 (18U)

	)

4426 
	#RCC_CCIPR_LPTIM1SEL_Msk
 (0x3U << 
RCC_CCIPR_LPTIM1SEL_Pos
Ë

	)

4427 
	#RCC_CCIPR_LPTIM1SEL
 
RCC_CCIPR_LPTIM1SEL_Msk


	)

4428 
	#RCC_CCIPR_LPTIM1SEL_0
 (0x1U << 
RCC_CCIPR_LPTIM1SEL_Pos
Ë

	)

4429 
	#RCC_CCIPR_LPTIM1SEL_1
 (0x2U << 
RCC_CCIPR_LPTIM1SEL_Pos
Ë

	)

4432 
	#RCC_CCIPR_HSI48SEL_Pos
 (26U)

	)

4433 
	#RCC_CCIPR_HSI48SEL_Msk
 (0x1U << 
RCC_CCIPR_HSI48SEL_Pos
Ë

	)

4434 
	#RCC_CCIPR_HSI48SEL
 
RCC_CCIPR_HSI48SEL_Msk


	)

4437 
	#RCC_CCIPR_HSI48MSEL
 
RCC_CCIPR_HSI48SEL


	)

4440 
	#RCC_CSR_LSION_Pos
 (0U)

	)

4441 
	#RCC_CSR_LSION_Msk
 (0x1U << 
RCC_CSR_LSION_Pos
Ë

	)

4442 
	#RCC_CSR_LSION
 
RCC_CSR_LSION_Msk


	)

4443 
	#RCC_CSR_LSIRDY_Pos
 (1U)

	)

4444 
	#RCC_CSR_LSIRDY_Msk
 (0x1U << 
RCC_CSR_LSIRDY_Pos
Ë

	)

4445 
	#RCC_CSR_LSIRDY
 
RCC_CSR_LSIRDY_Msk


	)

4447 
	#RCC_CSR_LSEON_Pos
 (8U)

	)

4448 
	#RCC_CSR_LSEON_Msk
 (0x1U << 
RCC_CSR_LSEON_Pos
Ë

	)

4449 
	#RCC_CSR_LSEON
 
RCC_CSR_LSEON_Msk


	)

4450 
	#RCC_CSR_LSERDY_Pos
 (9U)

	)

4451 
	#RCC_CSR_LSERDY_Msk
 (0x1U << 
RCC_CSR_LSERDY_Pos
Ë

	)

4452 
	#RCC_CSR_LSERDY
 
RCC_CSR_LSERDY_Msk


	)

4453 
	#RCC_CSR_LSEBYP_Pos
 (10U)

	)

4454 
	#RCC_CSR_LSEBYP_Msk
 (0x1U << 
RCC_CSR_LSEBYP_Pos
Ë

	)

4455 
	#RCC_CSR_LSEBYP
 
RCC_CSR_LSEBYP_Msk


	)

4457 
	#RCC_CSR_LSEDRV_Pos
 (11U)

	)

4458 
	#RCC_CSR_LSEDRV_Msk
 (0x3U << 
RCC_CSR_LSEDRV_Pos
Ë

	)

4459 
	#RCC_CSR_LSEDRV
 
RCC_CSR_LSEDRV_Msk


	)

4460 
	#RCC_CSR_LSEDRV_0
 (0x1U << 
RCC_CSR_LSEDRV_Pos
Ë

	)

4461 
	#RCC_CSR_LSEDRV_1
 (0x2U << 
RCC_CSR_LSEDRV_Pos
Ë

	)

4463 
	#RCC_CSR_LSECSSON_Pos
 (13U)

	)

4464 
	#RCC_CSR_LSECSSON_Msk
 (0x1U << 
RCC_CSR_LSECSSON_Pos
Ë

	)

4465 
	#RCC_CSR_LSECSSON
 
RCC_CSR_LSECSSON_Msk


	)

4466 
	#RCC_CSR_LSECSSD_Pos
 (14U)

	)

4467 
	#RCC_CSR_LSECSSD_Msk
 (0x1U << 
RCC_CSR_LSECSSD_Pos
Ë

	)

4468 
	#RCC_CSR_LSECSSD
 
RCC_CSR_LSECSSD_Msk


	)

4471 
	#RCC_CSR_RTCSEL_Pos
 (16U)

	)

4472 
	#RCC_CSR_RTCSEL_Msk
 (0x3U << 
RCC_CSR_RTCSEL_Pos
Ë

	)

4473 
	#RCC_CSR_RTCSEL
 
RCC_CSR_RTCSEL_Msk


	)

4474 
	#RCC_CSR_RTCSEL_0
 (0x1U << 
RCC_CSR_RTCSEL_Pos
Ë

	)

4475 
	#RCC_CSR_RTCSEL_1
 (0x2U << 
RCC_CSR_RTCSEL_Pos
Ë

	)

4477 
	#RCC_CSR_RTCSEL_NOCLOCK
 (0x00000000UË

	)

4478 
	#RCC_CSR_RTCSEL_LSE_Pos
 (16U)

	)

4479 
	#RCC_CSR_RTCSEL_LSE_Msk
 (0x1U << 
RCC_CSR_RTCSEL_LSE_Pos
Ë

	)

4480 
	#RCC_CSR_RTCSEL_LSE
 
RCC_CSR_RTCSEL_LSE_Msk


	)

4481 
	#RCC_CSR_RTCSEL_LSI_Pos
 (17U)

	)

4482 
	#RCC_CSR_RTCSEL_LSI_Msk
 (0x1U << 
RCC_CSR_RTCSEL_LSI_Pos
Ë

	)

4483 
	#RCC_CSR_RTCSEL_LSI
 
RCC_CSR_RTCSEL_LSI_Msk


	)

4484 
	#RCC_CSR_RTCSEL_HSE_Pos
 (16U)

	)

4485 
	#RCC_CSR_RTCSEL_HSE_Msk
 (0x3U << 
RCC_CSR_RTCSEL_HSE_Pos
Ë

	)

4486 
	#RCC_CSR_RTCSEL_HSE
 
RCC_CSR_RTCSEL_HSE_Msk


	)

4488 
	#RCC_CSR_RTCEN_Pos
 (18U)

	)

4489 
	#RCC_CSR_RTCEN_Msk
 (0x1U << 
RCC_CSR_RTCEN_Pos
Ë

	)

4490 
	#RCC_CSR_RTCEN
 
RCC_CSR_RTCEN_Msk


	)

4491 
	#RCC_CSR_RTCRST_Pos
 (19U)

	)

4492 
	#RCC_CSR_RTCRST_Msk
 (0x1U << 
RCC_CSR_RTCRST_Pos
Ë

	)

4493 
	#RCC_CSR_RTCRST
 
RCC_CSR_RTCRST_Msk


	)

4495 
	#RCC_CSR_RMVF_Pos
 (23U)

	)

4496 
	#RCC_CSR_RMVF_Msk
 (0x1U << 
RCC_CSR_RMVF_Pos
Ë

	)

4497 
	#RCC_CSR_RMVF
 
RCC_CSR_RMVF_Msk


	)

4498 
	#RCC_CSR_FWRSTF_Pos
 (24U)

	)

4499 
	#RCC_CSR_FWRSTF_Msk
 (0x1U << 
RCC_CSR_FWRSTF_Pos
Ë

	)

4500 
	#RCC_CSR_FWRSTF
 
RCC_CSR_FWRSTF_Msk


	)

4501 
	#RCC_CSR_OBLRSTF_Pos
 (25U)

	)

4502 
	#RCC_CSR_OBLRSTF_Msk
 (0x1U << 
RCC_CSR_OBLRSTF_Pos
Ë

	)

4503 
	#RCC_CSR_OBLRSTF
 
RCC_CSR_OBLRSTF_Msk


	)

4504 
	#RCC_CSR_PINRSTF_Pos
 (26U)

	)

4505 
	#RCC_CSR_PINRSTF_Msk
 (0x1U << 
RCC_CSR_PINRSTF_Pos
Ë

	)

4506 
	#RCC_CSR_PINRSTF
 
RCC_CSR_PINRSTF_Msk


	)

4507 
	#RCC_CSR_PORRSTF_Pos
 (27U)

	)

4508 
	#RCC_CSR_PORRSTF_Msk
 (0x1U << 
RCC_CSR_PORRSTF_Pos
Ë

	)

4509 
	#RCC_CSR_PORRSTF
 
RCC_CSR_PORRSTF_Msk


	)

4510 
	#RCC_CSR_SFTRSTF_Pos
 (28U)

	)

4511 
	#RCC_CSR_SFTRSTF_Msk
 (0x1U << 
RCC_CSR_SFTRSTF_Pos
Ë

	)

4512 
	#RCC_CSR_SFTRSTF
 
RCC_CSR_SFTRSTF_Msk


	)

4513 
	#RCC_CSR_IWDGRSTF_Pos
 (29U)

	)

4514 
	#RCC_CSR_IWDGRSTF_Msk
 (0x1U << 
RCC_CSR_IWDGRSTF_Pos
Ë

	)

4515 
	#RCC_CSR_IWDGRSTF
 
RCC_CSR_IWDGRSTF_Msk


	)

4516 
	#RCC_CSR_WWDGRSTF_Pos
 (30U)

	)

4517 
	#RCC_CSR_WWDGRSTF_Msk
 (0x1U << 
RCC_CSR_WWDGRSTF_Pos
Ë

	)

4518 
	#RCC_CSR_WWDGRSTF
 
RCC_CSR_WWDGRSTF_Msk


	)

4519 
	#RCC_CSR_LPWRRSTF_Pos
 (31U)

	)

4520 
	#RCC_CSR_LPWRRSTF_Msk
 (0x1U << 
RCC_CSR_LPWRRSTF_Pos
Ë

	)

4521 
	#RCC_CSR_LPWRRSTF
 
RCC_CSR_LPWRRSTF_Msk


	)

4524 
	#RCC_CSR_OBL
 
RCC_CSR_OBLRSTF


	)

4533 
	#RNG_CR_RNGEN_Pos
 (2U)

	)

4534 
	#RNG_CR_RNGEN_Msk
 (0x1U << 
RNG_CR_RNGEN_Pos
Ë

	)

4535 
	#RNG_CR_RNGEN
 
RNG_CR_RNGEN_Msk


	)

4536 
	#RNG_CR_IE_Pos
 (3U)

	)

4537 
	#RNG_CR_IE_Msk
 (0x1U << 
RNG_CR_IE_Pos
Ë

	)

4538 
	#RNG_CR_IE
 
RNG_CR_IE_Msk


	)

4541 
	#RNG_SR_DRDY_Pos
 (0U)

	)

4542 
	#RNG_SR_DRDY_Msk
 (0x1U << 
RNG_SR_DRDY_Pos
Ë

	)

4543 
	#RNG_SR_DRDY
 
RNG_SR_DRDY_Msk


	)

4544 
	#RNG_SR_CECS_Pos
 (1U)

	)

4545 
	#RNG_SR_CECS_Msk
 (0x1U << 
RNG_SR_CECS_Pos
Ë

	)

4546 
	#RNG_SR_CECS
 
RNG_SR_CECS_Msk


	)

4547 
	#RNG_SR_SECS_Pos
 (2U)

	)

4548 
	#RNG_SR_SECS_Msk
 (0x1U << 
RNG_SR_SECS_Pos
Ë

	)

4549 
	#RNG_SR_SECS
 
RNG_SR_SECS_Msk


	)

4550 
	#RNG_SR_CEIS_Pos
 (5U)

	)

4551 
	#RNG_SR_CEIS_Msk
 (0x1U << 
RNG_SR_CEIS_Pos
Ë

	)

4552 
	#RNG_SR_CEIS
 
RNG_SR_CEIS_Msk


	)

4553 
	#RNG_SR_SEIS_Pos
 (6U)

	)

4554 
	#RNG_SR_SEIS_Msk
 (0x1U << 
RNG_SR_SEIS_Pos
Ë

	)

4555 
	#RNG_SR_SEIS
 
RNG_SR_SEIS_Msk


	)

4565 
	#RTC_TAMPER1_SUPPORT


	)

4566 
	#RTC_TAMPER2_SUPPORT


	)

4567 
	#RTC_WAKEUP_SUPPORT


	)

4568 
	#RTC_BACKUP_SUPPORT


	)

4571 
	#RTC_TR_PM_Pos
 (22U)

	)

4572 
	#RTC_TR_PM_Msk
 (0x1U << 
RTC_TR_PM_Pos
Ë

	)

4573 
	#RTC_TR_PM
 
RTC_TR_PM_Msk


	)

4574 
	#RTC_TR_HT_Pos
 (20U)

	)

4575 
	#RTC_TR_HT_Msk
 (0x3U << 
RTC_TR_HT_Pos
Ë

	)

4576 
	#RTC_TR_HT
 
RTC_TR_HT_Msk


	)

4577 
	#RTC_TR_HT_0
 (0x1U << 
RTC_TR_HT_Pos
Ë

	)

4578 
	#RTC_TR_HT_1
 (0x2U << 
RTC_TR_HT_Pos
Ë

	)

4579 
	#RTC_TR_HU_Pos
 (16U)

	)

4580 
	#RTC_TR_HU_Msk
 (0xFU << 
RTC_TR_HU_Pos
Ë

	)

4581 
	#RTC_TR_HU
 
RTC_TR_HU_Msk


	)

4582 
	#RTC_TR_HU_0
 (0x1U << 
RTC_TR_HU_Pos
Ë

	)

4583 
	#RTC_TR_HU_1
 (0x2U << 
RTC_TR_HU_Pos
Ë

	)

4584 
	#RTC_TR_HU_2
 (0x4U << 
RTC_TR_HU_Pos
Ë

	)

4585 
	#RTC_TR_HU_3
 (0x8U << 
RTC_TR_HU_Pos
Ë

	)

4586 
	#RTC_TR_MNT_Pos
 (12U)

	)

4587 
	#RTC_TR_MNT_Msk
 (0x7U << 
RTC_TR_MNT_Pos
Ë

	)

4588 
	#RTC_TR_MNT
 
RTC_TR_MNT_Msk


	)

4589 
	#RTC_TR_MNT_0
 (0x1U << 
RTC_TR_MNT_Pos
Ë

	)

4590 
	#RTC_TR_MNT_1
 (0x2U << 
RTC_TR_MNT_Pos
Ë

	)

4591 
	#RTC_TR_MNT_2
 (0x4U << 
RTC_TR_MNT_Pos
Ë

	)

4592 
	#RTC_TR_MNU_Pos
 (8U)

	)

4593 
	#RTC_TR_MNU_Msk
 (0xFU << 
RTC_TR_MNU_Pos
Ë

	)

4594 
	#RTC_TR_MNU
 
RTC_TR_MNU_Msk


	)

4595 
	#RTC_TR_MNU_0
 (0x1U << 
RTC_TR_MNU_Pos
Ë

	)

4596 
	#RTC_TR_MNU_1
 (0x2U << 
RTC_TR_MNU_Pos
Ë

	)

4597 
	#RTC_TR_MNU_2
 (0x4U << 
RTC_TR_MNU_Pos
Ë

	)

4598 
	#RTC_TR_MNU_3
 (0x8U << 
RTC_TR_MNU_Pos
Ë

	)

4599 
	#RTC_TR_ST_Pos
 (4U)

	)

4600 
	#RTC_TR_ST_Msk
 (0x7U << 
RTC_TR_ST_Pos
Ë

	)

4601 
	#RTC_TR_ST
 
RTC_TR_ST_Msk


	)

4602 
	#RTC_TR_ST_0
 (0x1U << 
RTC_TR_ST_Pos
Ë

	)

4603 
	#RTC_TR_ST_1
 (0x2U << 
RTC_TR_ST_Pos
Ë

	)

4604 
	#RTC_TR_ST_2
 (0x4U << 
RTC_TR_ST_Pos
Ë

	)

4605 
	#RTC_TR_SU_Pos
 (0U)

	)

4606 
	#RTC_TR_SU_Msk
 (0xFU << 
RTC_TR_SU_Pos
Ë

	)

4607 
	#RTC_TR_SU
 
RTC_TR_SU_Msk


	)

4608 
	#RTC_TR_SU_0
 (0x1U << 
RTC_TR_SU_Pos
Ë

	)

4609 
	#RTC_TR_SU_1
 (0x2U << 
RTC_TR_SU_Pos
Ë

	)

4610 
	#RTC_TR_SU_2
 (0x4U << 
RTC_TR_SU_Pos
Ë

	)

4611 
	#RTC_TR_SU_3
 (0x8U << 
RTC_TR_SU_Pos
Ë

	)

4614 
	#RTC_DR_YT_Pos
 (20U)

	)

4615 
	#RTC_DR_YT_Msk
 (0xFU << 
RTC_DR_YT_Pos
Ë

	)

4616 
	#RTC_DR_YT
 
RTC_DR_YT_Msk


	)

4617 
	#RTC_DR_YT_0
 (0x1U << 
RTC_DR_YT_Pos
Ë

	)

4618 
	#RTC_DR_YT_1
 (0x2U << 
RTC_DR_YT_Pos
Ë

	)

4619 
	#RTC_DR_YT_2
 (0x4U << 
RTC_DR_YT_Pos
Ë

	)

4620 
	#RTC_DR_YT_3
 (0x8U << 
RTC_DR_YT_Pos
Ë

	)

4621 
	#RTC_DR_YU_Pos
 (16U)

	)

4622 
	#RTC_DR_YU_Msk
 (0xFU << 
RTC_DR_YU_Pos
Ë

	)

4623 
	#RTC_DR_YU
 
RTC_DR_YU_Msk


	)

4624 
	#RTC_DR_YU_0
 (0x1U << 
RTC_DR_YU_Pos
Ë

	)

4625 
	#RTC_DR_YU_1
 (0x2U << 
RTC_DR_YU_Pos
Ë

	)

4626 
	#RTC_DR_YU_2
 (0x4U << 
RTC_DR_YU_Pos
Ë

	)

4627 
	#RTC_DR_YU_3
 (0x8U << 
RTC_DR_YU_Pos
Ë

	)

4628 
	#RTC_DR_WDU_Pos
 (13U)

	)

4629 
	#RTC_DR_WDU_Msk
 (0x7U << 
RTC_DR_WDU_Pos
Ë

	)

4630 
	#RTC_DR_WDU
 
RTC_DR_WDU_Msk


	)

4631 
	#RTC_DR_WDU_0
 (0x1U << 
RTC_DR_WDU_Pos
Ë

	)

4632 
	#RTC_DR_WDU_1
 (0x2U << 
RTC_DR_WDU_Pos
Ë

	)

4633 
	#RTC_DR_WDU_2
 (0x4U << 
RTC_DR_WDU_Pos
Ë

	)

4634 
	#RTC_DR_MT_Pos
 (12U)

	)

4635 
	#RTC_DR_MT_Msk
 (0x1U << 
RTC_DR_MT_Pos
Ë

	)

4636 
	#RTC_DR_MT
 
RTC_DR_MT_Msk


	)

4637 
	#RTC_DR_MU_Pos
 (8U)

	)

4638 
	#RTC_DR_MU_Msk
 (0xFU << 
RTC_DR_MU_Pos
Ë

	)

4639 
	#RTC_DR_MU
 
RTC_DR_MU_Msk


	)

4640 
	#RTC_DR_MU_0
 (0x1U << 
RTC_DR_MU_Pos
Ë

	)

4641 
	#RTC_DR_MU_1
 (0x2U << 
RTC_DR_MU_Pos
Ë

	)

4642 
	#RTC_DR_MU_2
 (0x4U << 
RTC_DR_MU_Pos
Ë

	)

4643 
	#RTC_DR_MU_3
 (0x8U << 
RTC_DR_MU_Pos
Ë

	)

4644 
	#RTC_DR_DT_Pos
 (4U)

	)

4645 
	#RTC_DR_DT_Msk
 (0x3U << 
RTC_DR_DT_Pos
Ë

	)

4646 
	#RTC_DR_DT
 
RTC_DR_DT_Msk


	)

4647 
	#RTC_DR_DT_0
 (0x1U << 
RTC_DR_DT_Pos
Ë

	)

4648 
	#RTC_DR_DT_1
 (0x2U << 
RTC_DR_DT_Pos
Ë

	)

4649 
	#RTC_DR_DU_Pos
 (0U)

	)

4650 
	#RTC_DR_DU_Msk
 (0xFU << 
RTC_DR_DU_Pos
Ë

	)

4651 
	#RTC_DR_DU
 
RTC_DR_DU_Msk


	)

4652 
	#RTC_DR_DU_0
 (0x1U << 
RTC_DR_DU_Pos
Ë

	)

4653 
	#RTC_DR_DU_1
 (0x2U << 
RTC_DR_DU_Pos
Ë

	)

4654 
	#RTC_DR_DU_2
 (0x4U << 
RTC_DR_DU_Pos
Ë

	)

4655 
	#RTC_DR_DU_3
 (0x8U << 
RTC_DR_DU_Pos
Ë

	)

4658 
	#RTC_CR_COE_Pos
 (23U)

	)

4659 
	#RTC_CR_COE_Msk
 (0x1U << 
RTC_CR_COE_Pos
Ë

	)

4660 
	#RTC_CR_COE
 
RTC_CR_COE_Msk


	)

4661 
	#RTC_CR_OSEL_Pos
 (21U)

	)

4662 
	#RTC_CR_OSEL_Msk
 (0x3U << 
RTC_CR_OSEL_Pos
Ë

	)

4663 
	#RTC_CR_OSEL
 
RTC_CR_OSEL_Msk


	)

4664 
	#RTC_CR_OSEL_0
 (0x1U << 
RTC_CR_OSEL_Pos
Ë

	)

4665 
	#RTC_CR_OSEL_1
 (0x2U << 
RTC_CR_OSEL_Pos
Ë

	)

4666 
	#RTC_CR_POL_Pos
 (20U)

	)

4667 
	#RTC_CR_POL_Msk
 (0x1U << 
RTC_CR_POL_Pos
Ë

	)

4668 
	#RTC_CR_POL
 
RTC_CR_POL_Msk


	)

4669 
	#RTC_CR_COSEL_Pos
 (19U)

	)

4670 
	#RTC_CR_COSEL_Msk
 (0x1U << 
RTC_CR_COSEL_Pos
Ë

	)

4671 
	#RTC_CR_COSEL
 
RTC_CR_COSEL_Msk


	)

4672 
	#RTC_CR_BCK_Pos
 (18U)

	)

4673 
	#RTC_CR_BCK_Msk
 (0x1U << 
RTC_CR_BCK_Pos
Ë

	)

4674 
	#RTC_CR_BCK
 
RTC_CR_BCK_Msk


	)

4675 
	#RTC_CR_SUB1H_Pos
 (17U)

	)

4676 
	#RTC_CR_SUB1H_Msk
 (0x1U << 
RTC_CR_SUB1H_Pos
Ë

	)

4677 
	#RTC_CR_SUB1H
 
RTC_CR_SUB1H_Msk


	)

4678 
	#RTC_CR_ADD1H_Pos
 (16U)

	)

4679 
	#RTC_CR_ADD1H_Msk
 (0x1U << 
RTC_CR_ADD1H_Pos
Ë

	)

4680 
	#RTC_CR_ADD1H
 
RTC_CR_ADD1H_Msk


	)

4681 
	#RTC_CR_TSIE_Pos
 (15U)

	)

4682 
	#RTC_CR_TSIE_Msk
 (0x1U << 
RTC_CR_TSIE_Pos
Ë

	)

4683 
	#RTC_CR_TSIE
 
RTC_CR_TSIE_Msk


	)

4684 
	#RTC_CR_WUTIE_Pos
 (14U)

	)

4685 
	#RTC_CR_WUTIE_Msk
 (0x1U << 
RTC_CR_WUTIE_Pos
Ë

	)

4686 
	#RTC_CR_WUTIE
 
RTC_CR_WUTIE_Msk


	)

4687 
	#RTC_CR_ALRBIE_Pos
 (13U)

	)

4688 
	#RTC_CR_ALRBIE_Msk
 (0x1U << 
RTC_CR_ALRBIE_Pos
Ë

	)

4689 
	#RTC_CR_ALRBIE
 
RTC_CR_ALRBIE_Msk


	)

4690 
	#RTC_CR_ALRAIE_Pos
 (12U)

	)

4691 
	#RTC_CR_ALRAIE_Msk
 (0x1U << 
RTC_CR_ALRAIE_Pos
Ë

	)

4692 
	#RTC_CR_ALRAIE
 
RTC_CR_ALRAIE_Msk


	)

4693 
	#RTC_CR_TSE_Pos
 (11U)

	)

4694 
	#RTC_CR_TSE_Msk
 (0x1U << 
RTC_CR_TSE_Pos
Ë

	)

4695 
	#RTC_CR_TSE
 
RTC_CR_TSE_Msk


	)

4696 
	#RTC_CR_WUTE_Pos
 (10U)

	)

4697 
	#RTC_CR_WUTE_Msk
 (0x1U << 
RTC_CR_WUTE_Pos
Ë

	)

4698 
	#RTC_CR_WUTE
 
RTC_CR_WUTE_Msk


	)

4699 
	#RTC_CR_ALRBE_Pos
 (9U)

	)

4700 
	#RTC_CR_ALRBE_Msk
 (0x1U << 
RTC_CR_ALRBE_Pos
Ë

	)

4701 
	#RTC_CR_ALRBE
 
RTC_CR_ALRBE_Msk


	)

4702 
	#RTC_CR_ALRAE_Pos
 (8U)

	)

4703 
	#RTC_CR_ALRAE_Msk
 (0x1U << 
RTC_CR_ALRAE_Pos
Ë

	)

4704 
	#RTC_CR_ALRAE
 
RTC_CR_ALRAE_Msk


	)

4705 
	#RTC_CR_FMT_Pos
 (6U)

	)

4706 
	#RTC_CR_FMT_Msk
 (0x1U << 
RTC_CR_FMT_Pos
Ë

	)

4707 
	#RTC_CR_FMT
 
RTC_CR_FMT_Msk


	)

4708 
	#RTC_CR_BYPSHAD_Pos
 (5U)

	)

4709 
	#RTC_CR_BYPSHAD_Msk
 (0x1U << 
RTC_CR_BYPSHAD_Pos
Ë

	)

4710 
	#RTC_CR_BYPSHAD
 
RTC_CR_BYPSHAD_Msk


	)

4711 
	#RTC_CR_REFCKON_Pos
 (4U)

	)

4712 
	#RTC_CR_REFCKON_Msk
 (0x1U << 
RTC_CR_REFCKON_Pos
Ë

	)

4713 
	#RTC_CR_REFCKON
 
RTC_CR_REFCKON_Msk


	)

4714 
	#RTC_CR_TSEDGE_Pos
 (3U)

	)

4715 
	#RTC_CR_TSEDGE_Msk
 (0x1U << 
RTC_CR_TSEDGE_Pos
Ë

	)

4716 
	#RTC_CR_TSEDGE
 
RTC_CR_TSEDGE_Msk


	)

4717 
	#RTC_CR_WUCKSEL_Pos
 (0U)

	)

4718 
	#RTC_CR_WUCKSEL_Msk
 (0x7U << 
RTC_CR_WUCKSEL_Pos
Ë

	)

4719 
	#RTC_CR_WUCKSEL
 
RTC_CR_WUCKSEL_Msk


	)

4720 
	#RTC_CR_WUCKSEL_0
 (0x1U << 
RTC_CR_WUCKSEL_Pos
Ë

	)

4721 
	#RTC_CR_WUCKSEL_1
 (0x2U << 
RTC_CR_WUCKSEL_Pos
Ë

	)

4722 
	#RTC_CR_WUCKSEL_2
 (0x4U << 
RTC_CR_WUCKSEL_Pos
Ë

	)

4725 
	#RTC_ISR_RECALPF_Pos
 (16U)

	)

4726 
	#RTC_ISR_RECALPF_Msk
 (0x1U << 
RTC_ISR_RECALPF_Pos
Ë

	)

4727 
	#RTC_ISR_RECALPF
 
RTC_ISR_RECALPF_Msk


	)

4728 
	#RTC_ISR_TAMP2F_Pos
 (14U)

	)

4729 
	#RTC_ISR_TAMP2F_Msk
 (0x1U << 
RTC_ISR_TAMP2F_Pos
Ë

	)

4730 
	#RTC_ISR_TAMP2F
 
RTC_ISR_TAMP2F_Msk


	)

4731 
	#RTC_ISR_TAMP1F_Pos
 (13U)

	)

4732 
	#RTC_ISR_TAMP1F_Msk
 (0x1U << 
RTC_ISR_TAMP1F_Pos
Ë

	)

4733 
	#RTC_ISR_TAMP1F
 
RTC_ISR_TAMP1F_Msk


	)

4734 
	#RTC_ISR_TSOVF_Pos
 (12U)

	)

4735 
	#RTC_ISR_TSOVF_Msk
 (0x1U << 
RTC_ISR_TSOVF_Pos
Ë

	)

4736 
	#RTC_ISR_TSOVF
 
RTC_ISR_TSOVF_Msk


	)

4737 
	#RTC_ISR_TSF_Pos
 (11U)

	)

4738 
	#RTC_ISR_TSF_Msk
 (0x1U << 
RTC_ISR_TSF_Pos
Ë

	)

4739 
	#RTC_ISR_TSF
 
RTC_ISR_TSF_Msk


	)

4740 
	#RTC_ISR_WUTF_Pos
 (10U)

	)

4741 
	#RTC_ISR_WUTF_Msk
 (0x1U << 
RTC_ISR_WUTF_Pos
Ë

	)

4742 
	#RTC_ISR_WUTF
 
RTC_ISR_WUTF_Msk


	)

4743 
	#RTC_ISR_ALRBF_Pos
 (9U)

	)

4744 
	#RTC_ISR_ALRBF_Msk
 (0x1U << 
RTC_ISR_ALRBF_Pos
Ë

	)

4745 
	#RTC_ISR_ALRBF
 
RTC_ISR_ALRBF_Msk


	)

4746 
	#RTC_ISR_ALRAF_Pos
 (8U)

	)

4747 
	#RTC_ISR_ALRAF_Msk
 (0x1U << 
RTC_ISR_ALRAF_Pos
Ë

	)

4748 
	#RTC_ISR_ALRAF
 
RTC_ISR_ALRAF_Msk


	)

4749 
	#RTC_ISR_INIT_Pos
 (7U)

	)

4750 
	#RTC_ISR_INIT_Msk
 (0x1U << 
RTC_ISR_INIT_Pos
Ë

	)

4751 
	#RTC_ISR_INIT
 
RTC_ISR_INIT_Msk


	)

4752 
	#RTC_ISR_INITF_Pos
 (6U)

	)

4753 
	#RTC_ISR_INITF_Msk
 (0x1U << 
RTC_ISR_INITF_Pos
Ë

	)

4754 
	#RTC_ISR_INITF
 
RTC_ISR_INITF_Msk


	)

4755 
	#RTC_ISR_RSF_Pos
 (5U)

	)

4756 
	#RTC_ISR_RSF_Msk
 (0x1U << 
RTC_ISR_RSF_Pos
Ë

	)

4757 
	#RTC_ISR_RSF
 
RTC_ISR_RSF_Msk


	)

4758 
	#RTC_ISR_INITS_Pos
 (4U)

	)

4759 
	#RTC_ISR_INITS_Msk
 (0x1U << 
RTC_ISR_INITS_Pos
Ë

	)

4760 
	#RTC_ISR_INITS
 
RTC_ISR_INITS_Msk


	)

4761 
	#RTC_ISR_SHPF_Pos
 (3U)

	)

4762 
	#RTC_ISR_SHPF_Msk
 (0x1U << 
RTC_ISR_SHPF_Pos
Ë

	)

4763 
	#RTC_ISR_SHPF
 
RTC_ISR_SHPF_Msk


	)

4764 
	#RTC_ISR_WUTWF_Pos
 (2U)

	)

4765 
	#RTC_ISR_WUTWF_Msk
 (0x1U << 
RTC_ISR_WUTWF_Pos
Ë

	)

4766 
	#RTC_ISR_WUTWF
 
RTC_ISR_WUTWF_Msk


	)

4767 
	#RTC_ISR_ALRBWF_Pos
 (1U)

	)

4768 
	#RTC_ISR_ALRBWF_Msk
 (0x1U << 
RTC_ISR_ALRBWF_Pos
Ë

	)

4769 
	#RTC_ISR_ALRBWF
 
RTC_ISR_ALRBWF_Msk


	)

4770 
	#RTC_ISR_ALRAWF_Pos
 (0U)

	)

4771 
	#RTC_ISR_ALRAWF_Msk
 (0x1U << 
RTC_ISR_ALRAWF_Pos
Ë

	)

4772 
	#RTC_ISR_ALRAWF
 
RTC_ISR_ALRAWF_Msk


	)

4775 
	#RTC_PRER_PREDIV_A_Pos
 (16U)

	)

4776 
	#RTC_PRER_PREDIV_A_Msk
 (0x7FU << 
RTC_PRER_PREDIV_A_Pos
Ë

	)

4777 
	#RTC_PRER_PREDIV_A
 
RTC_PRER_PREDIV_A_Msk


	)

4778 
	#RTC_PRER_PREDIV_S_Pos
 (0U)

	)

4779 
	#RTC_PRER_PREDIV_S_Msk
 (0x7FFFU << 
RTC_PRER_PREDIV_S_Pos
Ë

	)

4780 
	#RTC_PRER_PREDIV_S
 
RTC_PRER_PREDIV_S_Msk


	)

4783 
	#RTC_WUTR_WUT_Pos
 (0U)

	)

4784 
	#RTC_WUTR_WUT_Msk
 (0xFFFFU << 
RTC_WUTR_WUT_Pos
Ë

	)

4785 
	#RTC_WUTR_WUT
 
RTC_WUTR_WUT_Msk


	)

4788 
	#RTC_ALRMAR_MSK4_Pos
 (31U)

	)

4789 
	#RTC_ALRMAR_MSK4_Msk
 (0x1U << 
RTC_ALRMAR_MSK4_Pos
Ë

	)

4790 
	#RTC_ALRMAR_MSK4
 
RTC_ALRMAR_MSK4_Msk


	)

4791 
	#RTC_ALRMAR_WDSEL_Pos
 (30U)

	)

4792 
	#RTC_ALRMAR_WDSEL_Msk
 (0x1U << 
RTC_ALRMAR_WDSEL_Pos
Ë

	)

4793 
	#RTC_ALRMAR_WDSEL
 
RTC_ALRMAR_WDSEL_Msk


	)

4794 
	#RTC_ALRMAR_DT_Pos
 (28U)

	)

4795 
	#RTC_ALRMAR_DT_Msk
 (0x3U << 
RTC_ALRMAR_DT_Pos
Ë

	)

4796 
	#RTC_ALRMAR_DT
 
RTC_ALRMAR_DT_Msk


	)

4797 
	#RTC_ALRMAR_DT_0
 (0x1U << 
RTC_ALRMAR_DT_Pos
Ë

	)

4798 
	#RTC_ALRMAR_DT_1
 (0x2U << 
RTC_ALRMAR_DT_Pos
Ë

	)

4799 
	#RTC_ALRMAR_DU_Pos
 (24U)

	)

4800 
	#RTC_ALRMAR_DU_Msk
 (0xFU << 
RTC_ALRMAR_DU_Pos
Ë

	)

4801 
	#RTC_ALRMAR_DU
 
RTC_ALRMAR_DU_Msk


	)

4802 
	#RTC_ALRMAR_DU_0
 (0x1U << 
RTC_ALRMAR_DU_Pos
Ë

	)

4803 
	#RTC_ALRMAR_DU_1
 (0x2U << 
RTC_ALRMAR_DU_Pos
Ë

	)

4804 
	#RTC_ALRMAR_DU_2
 (0x4U << 
RTC_ALRMAR_DU_Pos
Ë

	)

4805 
	#RTC_ALRMAR_DU_3
 (0x8U << 
RTC_ALRMAR_DU_Pos
Ë

	)

4806 
	#RTC_ALRMAR_MSK3_Pos
 (23U)

	)

4807 
	#RTC_ALRMAR_MSK3_Msk
 (0x1U << 
RTC_ALRMAR_MSK3_Pos
Ë

	)

4808 
	#RTC_ALRMAR_MSK3
 
RTC_ALRMAR_MSK3_Msk


	)

4809 
	#RTC_ALRMAR_PM_Pos
 (22U)

	)

4810 
	#RTC_ALRMAR_PM_Msk
 (0x1U << 
RTC_ALRMAR_PM_Pos
Ë

	)

4811 
	#RTC_ALRMAR_PM
 
RTC_ALRMAR_PM_Msk


	)

4812 
	#RTC_ALRMAR_HT_Pos
 (20U)

	)

4813 
	#RTC_ALRMAR_HT_Msk
 (0x3U << 
RTC_ALRMAR_HT_Pos
Ë

	)

4814 
	#RTC_ALRMAR_HT
 
RTC_ALRMAR_HT_Msk


	)

4815 
	#RTC_ALRMAR_HT_0
 (0x1U << 
RTC_ALRMAR_HT_Pos
Ë

	)

4816 
	#RTC_ALRMAR_HT_1
 (0x2U << 
RTC_ALRMAR_HT_Pos
Ë

	)

4817 
	#RTC_ALRMAR_HU_Pos
 (16U)

	)

4818 
	#RTC_ALRMAR_HU_Msk
 (0xFU << 
RTC_ALRMAR_HU_Pos
Ë

	)

4819 
	#RTC_ALRMAR_HU
 
RTC_ALRMAR_HU_Msk


	)

4820 
	#RTC_ALRMAR_HU_0
 (0x1U << 
RTC_ALRMAR_HU_Pos
Ë

	)

4821 
	#RTC_ALRMAR_HU_1
 (0x2U << 
RTC_ALRMAR_HU_Pos
Ë

	)

4822 
	#RTC_ALRMAR_HU_2
 (0x4U << 
RTC_ALRMAR_HU_Pos
Ë

	)

4823 
	#RTC_ALRMAR_HU_3
 (0x8U << 
RTC_ALRMAR_HU_Pos
Ë

	)

4824 
	#RTC_ALRMAR_MSK2_Pos
 (15U)

	)

4825 
	#RTC_ALRMAR_MSK2_Msk
 (0x1U << 
RTC_ALRMAR_MSK2_Pos
Ë

	)

4826 
	#RTC_ALRMAR_MSK2
 
RTC_ALRMAR_MSK2_Msk


	)

4827 
	#RTC_ALRMAR_MNT_Pos
 (12U)

	)

4828 
	#RTC_ALRMAR_MNT_Msk
 (0x7U << 
RTC_ALRMAR_MNT_Pos
Ë

	)

4829 
	#RTC_ALRMAR_MNT
 
RTC_ALRMAR_MNT_Msk


	)

4830 
	#RTC_ALRMAR_MNT_0
 (0x1U << 
RTC_ALRMAR_MNT_Pos
Ë

	)

4831 
	#RTC_ALRMAR_MNT_1
 (0x2U << 
RTC_ALRMAR_MNT_Pos
Ë

	)

4832 
	#RTC_ALRMAR_MNT_2
 (0x4U << 
RTC_ALRMAR_MNT_Pos
Ë

	)

4833 
	#RTC_ALRMAR_MNU_Pos
 (8U)

	)

4834 
	#RTC_ALRMAR_MNU_Msk
 (0xFU << 
RTC_ALRMAR_MNU_Pos
Ë

	)

4835 
	#RTC_ALRMAR_MNU
 
RTC_ALRMAR_MNU_Msk


	)

4836 
	#RTC_ALRMAR_MNU_0
 (0x1U << 
RTC_ALRMAR_MNU_Pos
Ë

	)

4837 
	#RTC_ALRMAR_MNU_1
 (0x2U << 
RTC_ALRMAR_MNU_Pos
Ë

	)

4838 
	#RTC_ALRMAR_MNU_2
 (0x4U << 
RTC_ALRMAR_MNU_Pos
Ë

	)

4839 
	#RTC_ALRMAR_MNU_3
 (0x8U << 
RTC_ALRMAR_MNU_Pos
Ë

	)

4840 
	#RTC_ALRMAR_MSK1_Pos
 (7U)

	)

4841 
	#RTC_ALRMAR_MSK1_Msk
 (0x1U << 
RTC_ALRMAR_MSK1_Pos
Ë

	)

4842 
	#RTC_ALRMAR_MSK1
 
RTC_ALRMAR_MSK1_Msk


	)

4843 
	#RTC_ALRMAR_ST_Pos
 (4U)

	)

4844 
	#RTC_ALRMAR_ST_Msk
 (0x7U << 
RTC_ALRMAR_ST_Pos
Ë

	)

4845 
	#RTC_ALRMAR_ST
 
RTC_ALRMAR_ST_Msk


	)

4846 
	#RTC_ALRMAR_ST_0
 (0x1U << 
RTC_ALRMAR_ST_Pos
Ë

	)

4847 
	#RTC_ALRMAR_ST_1
 (0x2U << 
RTC_ALRMAR_ST_Pos
Ë

	)

4848 
	#RTC_ALRMAR_ST_2
 (0x4U << 
RTC_ALRMAR_ST_Pos
Ë

	)

4849 
	#RTC_ALRMAR_SU_Pos
 (0U)

	)

4850 
	#RTC_ALRMAR_SU_Msk
 (0xFU << 
RTC_ALRMAR_SU_Pos
Ë

	)

4851 
	#RTC_ALRMAR_SU
 
RTC_ALRMAR_SU_Msk


	)

4852 
	#RTC_ALRMAR_SU_0
 (0x1U << 
RTC_ALRMAR_SU_Pos
Ë

	)

4853 
	#RTC_ALRMAR_SU_1
 (0x2U << 
RTC_ALRMAR_SU_Pos
Ë

	)

4854 
	#RTC_ALRMAR_SU_2
 (0x4U << 
RTC_ALRMAR_SU_Pos
Ë

	)

4855 
	#RTC_ALRMAR_SU_3
 (0x8U << 
RTC_ALRMAR_SU_Pos
Ë

	)

4858 
	#RTC_ALRMBR_MSK4_Pos
 (31U)

	)

4859 
	#RTC_ALRMBR_MSK4_Msk
 (0x1U << 
RTC_ALRMBR_MSK4_Pos
Ë

	)

4860 
	#RTC_ALRMBR_MSK4
 
RTC_ALRMBR_MSK4_Msk


	)

4861 
	#RTC_ALRMBR_WDSEL_Pos
 (30U)

	)

4862 
	#RTC_ALRMBR_WDSEL_Msk
 (0x1U << 
RTC_ALRMBR_WDSEL_Pos
Ë

	)

4863 
	#RTC_ALRMBR_WDSEL
 
RTC_ALRMBR_WDSEL_Msk


	)

4864 
	#RTC_ALRMBR_DT_Pos
 (28U)

	)

4865 
	#RTC_ALRMBR_DT_Msk
 (0x3U << 
RTC_ALRMBR_DT_Pos
Ë

	)

4866 
	#RTC_ALRMBR_DT
 
RTC_ALRMBR_DT_Msk


	)

4867 
	#RTC_ALRMBR_DT_0
 (0x1U << 
RTC_ALRMBR_DT_Pos
Ë

	)

4868 
	#RTC_ALRMBR_DT_1
 (0x2U << 
RTC_ALRMBR_DT_Pos
Ë

	)

4869 
	#RTC_ALRMBR_DU_Pos
 (24U)

	)

4870 
	#RTC_ALRMBR_DU_Msk
 (0xFU << 
RTC_ALRMBR_DU_Pos
Ë

	)

4871 
	#RTC_ALRMBR_DU
 
RTC_ALRMBR_DU_Msk


	)

4872 
	#RTC_ALRMBR_DU_0
 (0x1U << 
RTC_ALRMBR_DU_Pos
Ë

	)

4873 
	#RTC_ALRMBR_DU_1
 (0x2U << 
RTC_ALRMBR_DU_Pos
Ë

	)

4874 
	#RTC_ALRMBR_DU_2
 (0x4U << 
RTC_ALRMBR_DU_Pos
Ë

	)

4875 
	#RTC_ALRMBR_DU_3
 (0x8U << 
RTC_ALRMBR_DU_Pos
Ë

	)

4876 
	#RTC_ALRMBR_MSK3_Pos
 (23U)

	)

4877 
	#RTC_ALRMBR_MSK3_Msk
 (0x1U << 
RTC_ALRMBR_MSK3_Pos
Ë

	)

4878 
	#RTC_ALRMBR_MSK3
 
RTC_ALRMBR_MSK3_Msk


	)

4879 
	#RTC_ALRMBR_PM_Pos
 (22U)

	)

4880 
	#RTC_ALRMBR_PM_Msk
 (0x1U << 
RTC_ALRMBR_PM_Pos
Ë

	)

4881 
	#RTC_ALRMBR_PM
 
RTC_ALRMBR_PM_Msk


	)

4882 
	#RTC_ALRMBR_HT_Pos
 (20U)

	)

4883 
	#RTC_ALRMBR_HT_Msk
 (0x3U << 
RTC_ALRMBR_HT_Pos
Ë

	)

4884 
	#RTC_ALRMBR_HT
 
RTC_ALRMBR_HT_Msk


	)

4885 
	#RTC_ALRMBR_HT_0
 (0x1U << 
RTC_ALRMBR_HT_Pos
Ë

	)

4886 
	#RTC_ALRMBR_HT_1
 (0x2U << 
RTC_ALRMBR_HT_Pos
Ë

	)

4887 
	#RTC_ALRMBR_HU_Pos
 (16U)

	)

4888 
	#RTC_ALRMBR_HU_Msk
 (0xFU << 
RTC_ALRMBR_HU_Pos
Ë

	)

4889 
	#RTC_ALRMBR_HU
 
RTC_ALRMBR_HU_Msk


	)

4890 
	#RTC_ALRMBR_HU_0
 (0x1U << 
RTC_ALRMBR_HU_Pos
Ë

	)

4891 
	#RTC_ALRMBR_HU_1
 (0x2U << 
RTC_ALRMBR_HU_Pos
Ë

	)

4892 
	#RTC_ALRMBR_HU_2
 (0x4U << 
RTC_ALRMBR_HU_Pos
Ë

	)

4893 
	#RTC_ALRMBR_HU_3
 (0x8U << 
RTC_ALRMBR_HU_Pos
Ë

	)

4894 
	#RTC_ALRMBR_MSK2_Pos
 (15U)

	)

4895 
	#RTC_ALRMBR_MSK2_Msk
 (0x1U << 
RTC_ALRMBR_MSK2_Pos
Ë

	)

4896 
	#RTC_ALRMBR_MSK2
 
RTC_ALRMBR_MSK2_Msk


	)

4897 
	#RTC_ALRMBR_MNT_Pos
 (12U)

	)

4898 
	#RTC_ALRMBR_MNT_Msk
 (0x7U << 
RTC_ALRMBR_MNT_Pos
Ë

	)

4899 
	#RTC_ALRMBR_MNT
 
RTC_ALRMBR_MNT_Msk


	)

4900 
	#RTC_ALRMBR_MNT_0
 (0x1U << 
RTC_ALRMBR_MNT_Pos
Ë

	)

4901 
	#RTC_ALRMBR_MNT_1
 (0x2U << 
RTC_ALRMBR_MNT_Pos
Ë

	)

4902 
	#RTC_ALRMBR_MNT_2
 (0x4U << 
RTC_ALRMBR_MNT_Pos
Ë

	)

4903 
	#RTC_ALRMBR_MNU_Pos
 (8U)

	)

4904 
	#RTC_ALRMBR_MNU_Msk
 (0xFU << 
RTC_ALRMBR_MNU_Pos
Ë

	)

4905 
	#RTC_ALRMBR_MNU
 
RTC_ALRMBR_MNU_Msk


	)

4906 
	#RTC_ALRMBR_MNU_0
 (0x1U << 
RTC_ALRMBR_MNU_Pos
Ë

	)

4907 
	#RTC_ALRMBR_MNU_1
 (0x2U << 
RTC_ALRMBR_MNU_Pos
Ë

	)

4908 
	#RTC_ALRMBR_MNU_2
 (0x4U << 
RTC_ALRMBR_MNU_Pos
Ë

	)

4909 
	#RTC_ALRMBR_MNU_3
 (0x8U << 
RTC_ALRMBR_MNU_Pos
Ë

	)

4910 
	#RTC_ALRMBR_MSK1_Pos
 (7U)

	)

4911 
	#RTC_ALRMBR_MSK1_Msk
 (0x1U << 
RTC_ALRMBR_MSK1_Pos
Ë

	)

4912 
	#RTC_ALRMBR_MSK1
 
RTC_ALRMBR_MSK1_Msk


	)

4913 
	#RTC_ALRMBR_ST_Pos
 (4U)

	)

4914 
	#RTC_ALRMBR_ST_Msk
 (0x7U << 
RTC_ALRMBR_ST_Pos
Ë

	)

4915 
	#RTC_ALRMBR_ST
 
RTC_ALRMBR_ST_Msk


	)

4916 
	#RTC_ALRMBR_ST_0
 (0x1U << 
RTC_ALRMBR_ST_Pos
Ë

	)

4917 
	#RTC_ALRMBR_ST_1
 (0x2U << 
RTC_ALRMBR_ST_Pos
Ë

	)

4918 
	#RTC_ALRMBR_ST_2
 (0x4U << 
RTC_ALRMBR_ST_Pos
Ë

	)

4919 
	#RTC_ALRMBR_SU_Pos
 (0U)

	)

4920 
	#RTC_ALRMBR_SU_Msk
 (0xFU << 
RTC_ALRMBR_SU_Pos
Ë

	)

4921 
	#RTC_ALRMBR_SU
 
RTC_ALRMBR_SU_Msk


	)

4922 
	#RTC_ALRMBR_SU_0
 (0x1U << 
RTC_ALRMBR_SU_Pos
Ë

	)

4923 
	#RTC_ALRMBR_SU_1
 (0x2U << 
RTC_ALRMBR_SU_Pos
Ë

	)

4924 
	#RTC_ALRMBR_SU_2
 (0x4U << 
RTC_ALRMBR_SU_Pos
Ë

	)

4925 
	#RTC_ALRMBR_SU_3
 (0x8U << 
RTC_ALRMBR_SU_Pos
Ë

	)

4928 
	#RTC_WPR_KEY_Pos
 (0U)

	)

4929 
	#RTC_WPR_KEY_Msk
 (0xFFU << 
RTC_WPR_KEY_Pos
Ë

	)

4930 
	#RTC_WPR_KEY
 
RTC_WPR_KEY_Msk


	)

4933 
	#RTC_SSR_SS_Pos
 (0U)

	)

4934 
	#RTC_SSR_SS_Msk
 (0xFFFFU << 
RTC_SSR_SS_Pos
Ë

	)

4935 
	#RTC_SSR_SS
 
RTC_SSR_SS_Msk


	)

4938 
	#RTC_SHIFTR_SUBFS_Pos
 (0U)

	)

4939 
	#RTC_SHIFTR_SUBFS_Msk
 (0x7FFFU << 
RTC_SHIFTR_SUBFS_Pos
Ë

	)

4940 
	#RTC_SHIFTR_SUBFS
 
RTC_SHIFTR_SUBFS_Msk


	)

4941 
	#RTC_SHIFTR_ADD1S_Pos
 (31U)

	)

4942 
	#RTC_SHIFTR_ADD1S_Msk
 (0x1U << 
RTC_SHIFTR_ADD1S_Pos
Ë

	)

4943 
	#RTC_SHIFTR_ADD1S
 
RTC_SHIFTR_ADD1S_Msk


	)

4946 
	#RTC_TSTR_PM_Pos
 (22U)

	)

4947 
	#RTC_TSTR_PM_Msk
 (0x1U << 
RTC_TSTR_PM_Pos
Ë

	)

4948 
	#RTC_TSTR_PM
 
RTC_TSTR_PM_Msk


	)

4949 
	#RTC_TSTR_HT_Pos
 (20U)

	)

4950 
	#RTC_TSTR_HT_Msk
 (0x3U << 
RTC_TSTR_HT_Pos
Ë

	)

4951 
	#RTC_TSTR_HT
 
RTC_TSTR_HT_Msk


	)

4952 
	#RTC_TSTR_HT_0
 (0x1U << 
RTC_TSTR_HT_Pos
Ë

	)

4953 
	#RTC_TSTR_HT_1
 (0x2U << 
RTC_TSTR_HT_Pos
Ë

	)

4954 
	#RTC_TSTR_HU_Pos
 (16U)

	)

4955 
	#RTC_TSTR_HU_Msk
 (0xFU << 
RTC_TSTR_HU_Pos
Ë

	)

4956 
	#RTC_TSTR_HU
 
RTC_TSTR_HU_Msk


	)

4957 
	#RTC_TSTR_HU_0
 (0x1U << 
RTC_TSTR_HU_Pos
Ë

	)

4958 
	#RTC_TSTR_HU_1
 (0x2U << 
RTC_TSTR_HU_Pos
Ë

	)

4959 
	#RTC_TSTR_HU_2
 (0x4U << 
RTC_TSTR_HU_Pos
Ë

	)

4960 
	#RTC_TSTR_HU_3
 (0x8U << 
RTC_TSTR_HU_Pos
Ë

	)

4961 
	#RTC_TSTR_MNT_Pos
 (12U)

	)

4962 
	#RTC_TSTR_MNT_Msk
 (0x7U << 
RTC_TSTR_MNT_Pos
Ë

	)

4963 
	#RTC_TSTR_MNT
 
RTC_TSTR_MNT_Msk


	)

4964 
	#RTC_TSTR_MNT_0
 (0x1U << 
RTC_TSTR_MNT_Pos
Ë

	)

4965 
	#RTC_TSTR_MNT_1
 (0x2U << 
RTC_TSTR_MNT_Pos
Ë

	)

4966 
	#RTC_TSTR_MNT_2
 (0x4U << 
RTC_TSTR_MNT_Pos
Ë

	)

4967 
	#RTC_TSTR_MNU_Pos
 (8U)

	)

4968 
	#RTC_TSTR_MNU_Msk
 (0xFU << 
RTC_TSTR_MNU_Pos
Ë

	)

4969 
	#RTC_TSTR_MNU
 
RTC_TSTR_MNU_Msk


	)

4970 
	#RTC_TSTR_MNU_0
 (0x1U << 
RTC_TSTR_MNU_Pos
Ë

	)

4971 
	#RTC_TSTR_MNU_1
 (0x2U << 
RTC_TSTR_MNU_Pos
Ë

	)

4972 
	#RTC_TSTR_MNU_2
 (0x4U << 
RTC_TSTR_MNU_Pos
Ë

	)

4973 
	#RTC_TSTR_MNU_3
 (0x8U << 
RTC_TSTR_MNU_Pos
Ë

	)

4974 
	#RTC_TSTR_ST_Pos
 (4U)

	)

4975 
	#RTC_TSTR_ST_Msk
 (0x7U << 
RTC_TSTR_ST_Pos
Ë

	)

4976 
	#RTC_TSTR_ST
 
RTC_TSTR_ST_Msk


	)

4977 
	#RTC_TSTR_ST_0
 (0x1U << 
RTC_TSTR_ST_Pos
Ë

	)

4978 
	#RTC_TSTR_ST_1
 (0x2U << 
RTC_TSTR_ST_Pos
Ë

	)

4979 
	#RTC_TSTR_ST_2
 (0x4U << 
RTC_TSTR_ST_Pos
Ë

	)

4980 
	#RTC_TSTR_SU_Pos
 (0U)

	)

4981 
	#RTC_TSTR_SU_Msk
 (0xFU << 
RTC_TSTR_SU_Pos
Ë

	)

4982 
	#RTC_TSTR_SU
 
RTC_TSTR_SU_Msk


	)

4983 
	#RTC_TSTR_SU_0
 (0x1U << 
RTC_TSTR_SU_Pos
Ë

	)

4984 
	#RTC_TSTR_SU_1
 (0x2U << 
RTC_TSTR_SU_Pos
Ë

	)

4985 
	#RTC_TSTR_SU_2
 (0x4U << 
RTC_TSTR_SU_Pos
Ë

	)

4986 
	#RTC_TSTR_SU_3
 (0x8U << 
RTC_TSTR_SU_Pos
Ë

	)

4989 
	#RTC_TSDR_WDU_Pos
 (13U)

	)

4990 
	#RTC_TSDR_WDU_Msk
 (0x7U << 
RTC_TSDR_WDU_Pos
Ë

	)

4991 
	#RTC_TSDR_WDU
 
RTC_TSDR_WDU_Msk


	)

4992 
	#RTC_TSDR_WDU_0
 (0x1U << 
RTC_TSDR_WDU_Pos
Ë

	)

4993 
	#RTC_TSDR_WDU_1
 (0x2U << 
RTC_TSDR_WDU_Pos
Ë

	)

4994 
	#RTC_TSDR_WDU_2
 (0x4U << 
RTC_TSDR_WDU_Pos
Ë

	)

4995 
	#RTC_TSDR_MT_Pos
 (12U)

	)

4996 
	#RTC_TSDR_MT_Msk
 (0x1U << 
RTC_TSDR_MT_Pos
Ë

	)

4997 
	#RTC_TSDR_MT
 
RTC_TSDR_MT_Msk


	)

4998 
	#RTC_TSDR_MU_Pos
 (8U)

	)

4999 
	#RTC_TSDR_MU_Msk
 (0xFU << 
RTC_TSDR_MU_Pos
Ë

	)

5000 
	#RTC_TSDR_MU
 
RTC_TSDR_MU_Msk


	)

5001 
	#RTC_TSDR_MU_0
 (0x1U << 
RTC_TSDR_MU_Pos
Ë

	)

5002 
	#RTC_TSDR_MU_1
 (0x2U << 
RTC_TSDR_MU_Pos
Ë

	)

5003 
	#RTC_TSDR_MU_2
 (0x4U << 
RTC_TSDR_MU_Pos
Ë

	)

5004 
	#RTC_TSDR_MU_3
 (0x8U << 
RTC_TSDR_MU_Pos
Ë

	)

5005 
	#RTC_TSDR_DT_Pos
 (4U)

	)

5006 
	#RTC_TSDR_DT_Msk
 (0x3U << 
RTC_TSDR_DT_Pos
Ë

	)

5007 
	#RTC_TSDR_DT
 
RTC_TSDR_DT_Msk


	)

5008 
	#RTC_TSDR_DT_0
 (0x1U << 
RTC_TSDR_DT_Pos
Ë

	)

5009 
	#RTC_TSDR_DT_1
 (0x2U << 
RTC_TSDR_DT_Pos
Ë

	)

5010 
	#RTC_TSDR_DU_Pos
 (0U)

	)

5011 
	#RTC_TSDR_DU_Msk
 (0xFU << 
RTC_TSDR_DU_Pos
Ë

	)

5012 
	#RTC_TSDR_DU
 
RTC_TSDR_DU_Msk


	)

5013 
	#RTC_TSDR_DU_0
 (0x1U << 
RTC_TSDR_DU_Pos
Ë

	)

5014 
	#RTC_TSDR_DU_1
 (0x2U << 
RTC_TSDR_DU_Pos
Ë

	)

5015 
	#RTC_TSDR_DU_2
 (0x4U << 
RTC_TSDR_DU_Pos
Ë

	)

5016 
	#RTC_TSDR_DU_3
 (0x8U << 
RTC_TSDR_DU_Pos
Ë

	)

5019 
	#RTC_TSSSR_SS_Pos
 (0U)

	)

5020 
	#RTC_TSSSR_SS_Msk
 (0xFFFFU << 
RTC_TSSSR_SS_Pos
Ë

	)

5021 
	#RTC_TSSSR_SS
 
RTC_TSSSR_SS_Msk


	)

5024 
	#RTC_CALR_CALP_Pos
 (15U)

	)

5025 
	#RTC_CALR_CALP_Msk
 (0x1U << 
RTC_CALR_CALP_Pos
Ë

	)

5026 
	#RTC_CALR_CALP
 
RTC_CALR_CALP_Msk


	)

5027 
	#RTC_CALR_CALW8_Pos
 (14U)

	)

5028 
	#RTC_CALR_CALW8_Msk
 (0x1U << 
RTC_CALR_CALW8_Pos
Ë

	)

5029 
	#RTC_CALR_CALW8
 
RTC_CALR_CALW8_Msk


	)

5030 
	#RTC_CALR_CALW16_Pos
 (13U)

	)

5031 
	#RTC_CALR_CALW16_Msk
 (0x1U << 
RTC_CALR_CALW16_Pos
Ë

	)

5032 
	#RTC_CALR_CALW16
 
RTC_CALR_CALW16_Msk


	)

5033 
	#RTC_CALR_CALM_Pos
 (0U)

	)

5034 
	#RTC_CALR_CALM_Msk
 (0x1FFU << 
RTC_CALR_CALM_Pos
Ë

	)

5035 
	#RTC_CALR_CALM
 
RTC_CALR_CALM_Msk


	)

5036 
	#RTC_CALR_CALM_0
 (0x001U << 
RTC_CALR_CALM_Pos
Ë

	)

5037 
	#RTC_CALR_CALM_1
 (0x002U << 
RTC_CALR_CALM_Pos
Ë

	)

5038 
	#RTC_CALR_CALM_2
 (0x004U << 
RTC_CALR_CALM_Pos
Ë

	)

5039 
	#RTC_CALR_CALM_3
 (0x008U << 
RTC_CALR_CALM_Pos
Ë

	)

5040 
	#RTC_CALR_CALM_4
 (0x010U << 
RTC_CALR_CALM_Pos
Ë

	)

5041 
	#RTC_CALR_CALM_5
 (0x020U << 
RTC_CALR_CALM_Pos
Ë

	)

5042 
	#RTC_CALR_CALM_6
 (0x040U << 
RTC_CALR_CALM_Pos
Ë

	)

5043 
	#RTC_CALR_CALM_7
 (0x080U << 
RTC_CALR_CALM_Pos
Ë

	)

5044 
	#RTC_CALR_CALM_8
 (0x100U << 
RTC_CALR_CALM_Pos
Ë

	)

5047 
	#RTC_CAL_CALP
 
RTC_CALR_CALP


	)

5048 
	#RTC_CAL_CALW8
 
RTC_CALR_CALW8


	)

5049 
	#RTC_CAL_CALW16
 
RTC_CALR_CALW16


	)

5050 
	#RTC_CAL_CALM
 
RTC_CALR_CALM


	)

5051 
	#RTC_CAL_CALM_0
 
RTC_CALR_CALM_0


	)

5052 
	#RTC_CAL_CALM_1
 
RTC_CALR_CALM_1


	)

5053 
	#RTC_CAL_CALM_2
 
RTC_CALR_CALM_2


	)

5054 
	#RTC_CAL_CALM_3
 
RTC_CALR_CALM_3


	)

5055 
	#RTC_CAL_CALM_4
 
RTC_CALR_CALM_4


	)

5056 
	#RTC_CAL_CALM_5
 
RTC_CALR_CALM_5


	)

5057 
	#RTC_CAL_CALM_6
 
RTC_CALR_CALM_6


	)

5058 
	#RTC_CAL_CALM_7
 
RTC_CALR_CALM_7


	)

5059 
	#RTC_CAL_CALM_8
 
RTC_CALR_CALM_8


	)

5062 
	#RTC_TAMPCR_TAMP2MF_Pos
 (21U)

	)

5063 
	#RTC_TAMPCR_TAMP2MF_Msk
 (0x1U << 
RTC_TAMPCR_TAMP2MF_Pos
Ë

	)

5064 
	#RTC_TAMPCR_TAMP2MF
 
RTC_TAMPCR_TAMP2MF_Msk


	)

5065 
	#RTC_TAMPCR_TAMP2NOERASE_Pos
 (20U)

	)

5066 
	#RTC_TAMPCR_TAMP2NOERASE_Msk
 (0x1U << 
RTC_TAMPCR_TAMP2NOERASE_Pos
Ë

	)

5067 
	#RTC_TAMPCR_TAMP2NOERASE
 
RTC_TAMPCR_TAMP2NOERASE_Msk


	)

5068 
	#RTC_TAMPCR_TAMP2IE_Pos
 (19U)

	)

5069 
	#RTC_TAMPCR_TAMP2IE_Msk
 (0x1U << 
RTC_TAMPCR_TAMP2IE_Pos
Ë

	)

5070 
	#RTC_TAMPCR_TAMP2IE
 
RTC_TAMPCR_TAMP2IE_Msk


	)

5071 
	#RTC_TAMPCR_TAMP1MF_Pos
 (18U)

	)

5072 
	#RTC_TAMPCR_TAMP1MF_Msk
 (0x1U << 
RTC_TAMPCR_TAMP1MF_Pos
Ë

	)

5073 
	#RTC_TAMPCR_TAMP1MF
 
RTC_TAMPCR_TAMP1MF_Msk


	)

5074 
	#RTC_TAMPCR_TAMP1NOERASE_Pos
 (17U)

	)

5075 
	#RTC_TAMPCR_TAMP1NOERASE_Msk
 (0x1U << 
RTC_TAMPCR_TAMP1NOERASE_Pos
Ë

	)

5076 
	#RTC_TAMPCR_TAMP1NOERASE
 
RTC_TAMPCR_TAMP1NOERASE_Msk


	)

5077 
	#RTC_TAMPCR_TAMP1IE_Pos
 (16U)

	)

5078 
	#RTC_TAMPCR_TAMP1IE_Msk
 (0x1U << 
RTC_TAMPCR_TAMP1IE_Pos
Ë

	)

5079 
	#RTC_TAMPCR_TAMP1IE
 
RTC_TAMPCR_TAMP1IE_Msk


	)

5080 
	#RTC_TAMPCR_TAMPPUDIS_Pos
 (15U)

	)

5081 
	#RTC_TAMPCR_TAMPPUDIS_Msk
 (0x1U << 
RTC_TAMPCR_TAMPPUDIS_Pos
Ë

	)

5082 
	#RTC_TAMPCR_TAMPPUDIS
 
RTC_TAMPCR_TAMPPUDIS_Msk


	)

5083 
	#RTC_TAMPCR_TAMPPRCH_Pos
 (13U)

	)

5084 
	#RTC_TAMPCR_TAMPPRCH_Msk
 (0x3U << 
RTC_TAMPCR_TAMPPRCH_Pos
Ë

	)

5085 
	#RTC_TAMPCR_TAMPPRCH
 
RTC_TAMPCR_TAMPPRCH_Msk


	)

5086 
	#RTC_TAMPCR_TAMPPRCH_0
 (0x1U << 
RTC_TAMPCR_TAMPPRCH_Pos
Ë

	)

5087 
	#RTC_TAMPCR_TAMPPRCH_1
 (0x2U << 
RTC_TAMPCR_TAMPPRCH_Pos
Ë

	)

5088 
	#RTC_TAMPCR_TAMPFLT_Pos
 (11U)

	)

5089 
	#RTC_TAMPCR_TAMPFLT_Msk
 (0x3U << 
RTC_TAMPCR_TAMPFLT_Pos
Ë

	)

5090 
	#RTC_TAMPCR_TAMPFLT
 
RTC_TAMPCR_TAMPFLT_Msk


	)

5091 
	#RTC_TAMPCR_TAMPFLT_0
 (0x1U << 
RTC_TAMPCR_TAMPFLT_Pos
Ë

	)

5092 
	#RTC_TAMPCR_TAMPFLT_1
 (0x2U << 
RTC_TAMPCR_TAMPFLT_Pos
Ë

	)

5093 
	#RTC_TAMPCR_TAMPFREQ_Pos
 (8U)

	)

5094 
	#RTC_TAMPCR_TAMPFREQ_Msk
 (0x7U << 
RTC_TAMPCR_TAMPFREQ_Pos
Ë

	)

5095 
	#RTC_TAMPCR_TAMPFREQ
 
RTC_TAMPCR_TAMPFREQ_Msk


	)

5096 
	#RTC_TAMPCR_TAMPFREQ_0
 (0x1U << 
RTC_TAMPCR_TAMPFREQ_Pos
Ë

	)

5097 
	#RTC_TAMPCR_TAMPFREQ_1
 (0x2U << 
RTC_TAMPCR_TAMPFREQ_Pos
Ë

	)

5098 
	#RTC_TAMPCR_TAMPFREQ_2
 (0x4U << 
RTC_TAMPCR_TAMPFREQ_Pos
Ë

	)

5099 
	#RTC_TAMPCR_TAMPTS_Pos
 (7U)

	)

5100 
	#RTC_TAMPCR_TAMPTS_Msk
 (0x1U << 
RTC_TAMPCR_TAMPTS_Pos
Ë

	)

5101 
	#RTC_TAMPCR_TAMPTS
 
RTC_TAMPCR_TAMPTS_Msk


	)

5102 
	#RTC_TAMPCR_TAMP2TRG_Pos
 (4U)

	)

5103 
	#RTC_TAMPCR_TAMP2TRG_Msk
 (0x1U << 
RTC_TAMPCR_TAMP2TRG_Pos
Ë

	)

5104 
	#RTC_TAMPCR_TAMP2TRG
 
RTC_TAMPCR_TAMP2TRG_Msk


	)

5105 
	#RTC_TAMPCR_TAMP2E_Pos
 (3U)

	)

5106 
	#RTC_TAMPCR_TAMP2E_Msk
 (0x1U << 
RTC_TAMPCR_TAMP2E_Pos
Ë

	)

5107 
	#RTC_TAMPCR_TAMP2E
 
RTC_TAMPCR_TAMP2E_Msk


	)

5108 
	#RTC_TAMPCR_TAMPIE_Pos
 (2U)

	)

5109 
	#RTC_TAMPCR_TAMPIE_Msk
 (0x1U << 
RTC_TAMPCR_TAMPIE_Pos
Ë

	)

5110 
	#RTC_TAMPCR_TAMPIE
 
RTC_TAMPCR_TAMPIE_Msk


	)

5111 
	#RTC_TAMPCR_TAMP1TRG_Pos
 (1U)

	)

5112 
	#RTC_TAMPCR_TAMP1TRG_Msk
 (0x1U << 
RTC_TAMPCR_TAMP1TRG_Pos
Ë

	)

5113 
	#RTC_TAMPCR_TAMP1TRG
 
RTC_TAMPCR_TAMP1TRG_Msk


	)

5114 
	#RTC_TAMPCR_TAMP1E_Pos
 (0U)

	)

5115 
	#RTC_TAMPCR_TAMP1E_Msk
 (0x1U << 
RTC_TAMPCR_TAMP1E_Pos
Ë

	)

5116 
	#RTC_TAMPCR_TAMP1E
 
RTC_TAMPCR_TAMP1E_Msk


	)

5119 
	#RTC_ALRMASSR_MASKSS_Pos
 (24U)

	)

5120 
	#RTC_ALRMASSR_MASKSS_Msk
 (0xFU << 
RTC_ALRMASSR_MASKSS_Pos
Ë

	)

5121 
	#RTC_ALRMASSR_MASKSS
 
RTC_ALRMASSR_MASKSS_Msk


	)

5122 
	#RTC_ALRMASSR_MASKSS_0
 (0x1U << 
RTC_ALRMASSR_MASKSS_Pos
Ë

	)

5123 
	#RTC_ALRMASSR_MASKSS_1
 (0x2U << 
RTC_ALRMASSR_MASKSS_Pos
Ë

	)

5124 
	#RTC_ALRMASSR_MASKSS_2
 (0x4U << 
RTC_ALRMASSR_MASKSS_Pos
Ë

	)

5125 
	#RTC_ALRMASSR_MASKSS_3
 (0x8U << 
RTC_ALRMASSR_MASKSS_Pos
Ë

	)

5126 
	#RTC_ALRMASSR_SS_Pos
 (0U)

	)

5127 
	#RTC_ALRMASSR_SS_Msk
 (0x7FFFU << 
RTC_ALRMASSR_SS_Pos
Ë

	)

5128 
	#RTC_ALRMASSR_SS
 
RTC_ALRMASSR_SS_Msk


	)

5131 
	#RTC_ALRMBSSR_MASKSS_Pos
 (24U)

	)

5132 
	#RTC_ALRMBSSR_MASKSS_Msk
 (0xFU << 
RTC_ALRMBSSR_MASKSS_Pos
Ë

	)

5133 
	#RTC_ALRMBSSR_MASKSS
 
RTC_ALRMBSSR_MASKSS_Msk


	)

5134 
	#RTC_ALRMBSSR_MASKSS_0
 (0x1U << 
RTC_ALRMBSSR_MASKSS_Pos
Ë

	)

5135 
	#RTC_ALRMBSSR_MASKSS_1
 (0x2U << 
RTC_ALRMBSSR_MASKSS_Pos
Ë

	)

5136 
	#RTC_ALRMBSSR_MASKSS_2
 (0x4U << 
RTC_ALRMBSSR_MASKSS_Pos
Ë

	)

5137 
	#RTC_ALRMBSSR_MASKSS_3
 (0x8U << 
RTC_ALRMBSSR_MASKSS_Pos
Ë

	)

5138 
	#RTC_ALRMBSSR_SS_Pos
 (0U)

	)

5139 
	#RTC_ALRMBSSR_SS_Msk
 (0x7FFFU << 
RTC_ALRMBSSR_SS_Pos
Ë

	)

5140 
	#RTC_ALRMBSSR_SS
 
RTC_ALRMBSSR_SS_Msk


	)

5143 
	#RTC_OR_OUT_RMP_Pos
 (1U)

	)

5144 
	#RTC_OR_OUT_RMP_Msk
 (0x1U << 
RTC_OR_OUT_RMP_Pos
Ë

	)

5145 
	#RTC_OR_OUT_RMP
 
RTC_OR_OUT_RMP_Msk


	)

5146 
	#RTC_OR_ALARMOUTTYPE_Pos
 (0U)

	)

5147 
	#RTC_OR_ALARMOUTTYPE_Msk
 (0x1U << 
RTC_OR_ALARMOUTTYPE_Pos
Ë

	)

5148 
	#RTC_OR_ALARMOUTTYPE
 
RTC_OR_ALARMOUTTYPE_Msk


	)

5151 
	#RTC_OR_RTC_OUT_RMP
 
RTC_OR_OUT_RMP


	)

5154 
	#RTC_BKP0R_Pos
 (0U)

	)

5155 
	#RTC_BKP0R_Msk
 (0xFFFFFFFFU << 
RTC_BKP0R_Pos
Ë

	)

5156 
	#RTC_BKP0R
 
RTC_BKP0R_Msk


	)

5159 
	#RTC_BKP1R_Pos
 (0U)

	)

5160 
	#RTC_BKP1R_Msk
 (0xFFFFFFFFU << 
RTC_BKP1R_Pos
Ë

	)

5161 
	#RTC_BKP1R
 
RTC_BKP1R_Msk


	)

5164 
	#RTC_BKP2R_Pos
 (0U)

	)

5165 
	#RTC_BKP2R_Msk
 (0xFFFFFFFFU << 
RTC_BKP2R_Pos
Ë

	)

5166 
	#RTC_BKP2R
 
RTC_BKP2R_Msk


	)

5169 
	#RTC_BKP3R_Pos
 (0U)

	)

5170 
	#RTC_BKP3R_Msk
 (0xFFFFFFFFU << 
RTC_BKP3R_Pos
Ë

	)

5171 
	#RTC_BKP3R
 
RTC_BKP3R_Msk


	)

5174 
	#RTC_BKP4R_Pos
 (0U)

	)

5175 
	#RTC_BKP4R_Msk
 (0xFFFFFFFFU << 
RTC_BKP4R_Pos
Ë

	)

5176 
	#RTC_BKP4R
 
RTC_BKP4R_Msk


	)

5179 
	#RTC_BKP_NUMBER
 (0x00000005UË

	)

5190 
	#SPI_I2S_SUPPORT


	)

5193 
	#SPI_CR1_CPHA_Pos
 (0U)

	)

5194 
	#SPI_CR1_CPHA_Msk
 (0x1U << 
SPI_CR1_CPHA_Pos
Ë

	)

5195 
	#SPI_CR1_CPHA
 
SPI_CR1_CPHA_Msk


	)

5196 
	#SPI_CR1_CPOL_Pos
 (1U)

	)

5197 
	#SPI_CR1_CPOL_Msk
 (0x1U << 
SPI_CR1_CPOL_Pos
Ë

	)

5198 
	#SPI_CR1_CPOL
 
SPI_CR1_CPOL_Msk


	)

5199 
	#SPI_CR1_MSTR_Pos
 (2U)

	)

5200 
	#SPI_CR1_MSTR_Msk
 (0x1U << 
SPI_CR1_MSTR_Pos
Ë

	)

5201 
	#SPI_CR1_MSTR
 
SPI_CR1_MSTR_Msk


	)

5202 
	#SPI_CR1_BR_Pos
 (3U)

	)

5203 
	#SPI_CR1_BR_Msk
 (0x7U << 
SPI_CR1_BR_Pos
Ë

	)

5204 
	#SPI_CR1_BR
 
SPI_CR1_BR_Msk


	)

5205 
	#SPI_CR1_BR_0
 (0x1U << 
SPI_CR1_BR_Pos
Ë

	)

5206 
	#SPI_CR1_BR_1
 (0x2U << 
SPI_CR1_BR_Pos
Ë

	)

5207 
	#SPI_CR1_BR_2
 (0x4U << 
SPI_CR1_BR_Pos
Ë

	)

5208 
	#SPI_CR1_SPE_Pos
 (6U)

	)

5209 
	#SPI_CR1_SPE_Msk
 (0x1U << 
SPI_CR1_SPE_Pos
Ë

	)

5210 
	#SPI_CR1_SPE
 
SPI_CR1_SPE_Msk


	)

5211 
	#SPI_CR1_LSBFIRST_Pos
 (7U)

	)

5212 
	#SPI_CR1_LSBFIRST_Msk
 (0x1U << 
SPI_CR1_LSBFIRST_Pos
Ë

	)

5213 
	#SPI_CR1_LSBFIRST
 
SPI_CR1_LSBFIRST_Msk


	)

5214 
	#SPI_CR1_SSI_Pos
 (8U)

	)

5215 
	#SPI_CR1_SSI_Msk
 (0x1U << 
SPI_CR1_SSI_Pos
Ë

	)

5216 
	#SPI_CR1_SSI
 
SPI_CR1_SSI_Msk


	)

5217 
	#SPI_CR1_SSM_Pos
 (9U)

	)

5218 
	#SPI_CR1_SSM_Msk
 (0x1U << 
SPI_CR1_SSM_Pos
Ë

	)

5219 
	#SPI_CR1_SSM
 
SPI_CR1_SSM_Msk


	)

5220 
	#SPI_CR1_RXONLY_Pos
 (10U)

	)

5221 
	#SPI_CR1_RXONLY_Msk
 (0x1U << 
SPI_CR1_RXONLY_Pos
Ë

	)

5222 
	#SPI_CR1_RXONLY
 
SPI_CR1_RXONLY_Msk


	)

5223 
	#SPI_CR1_DFF_Pos
 (11U)

	)

5224 
	#SPI_CR1_DFF_Msk
 (0x1U << 
SPI_CR1_DFF_Pos
Ë

	)

5225 
	#SPI_CR1_DFF
 
SPI_CR1_DFF_Msk


	)

5226 
	#SPI_CR1_CRCNEXT_Pos
 (12U)

	)

5227 
	#SPI_CR1_CRCNEXT_Msk
 (0x1U << 
SPI_CR1_CRCNEXT_Pos
Ë

	)

5228 
	#SPI_CR1_CRCNEXT
 
SPI_CR1_CRCNEXT_Msk


	)

5229 
	#SPI_CR1_CRCEN_Pos
 (13U)

	)

5230 
	#SPI_CR1_CRCEN_Msk
 (0x1U << 
SPI_CR1_CRCEN_Pos
Ë

	)

5231 
	#SPI_CR1_CRCEN
 
SPI_CR1_CRCEN_Msk


	)

5232 
	#SPI_CR1_BIDIOE_Pos
 (14U)

	)

5233 
	#SPI_CR1_BIDIOE_Msk
 (0x1U << 
SPI_CR1_BIDIOE_Pos
Ë

	)

5234 
	#SPI_CR1_BIDIOE
 
SPI_CR1_BIDIOE_Msk


	)

5235 
	#SPI_CR1_BIDIMODE_Pos
 (15U)

	)

5236 
	#SPI_CR1_BIDIMODE_Msk
 (0x1U << 
SPI_CR1_BIDIMODE_Pos
Ë

	)

5237 
	#SPI_CR1_BIDIMODE
 
SPI_CR1_BIDIMODE_Msk


	)

5240 
	#SPI_CR2_RXDMAEN_Pos
 (0U)

	)

5241 
	#SPI_CR2_RXDMAEN_Msk
 (0x1U << 
SPI_CR2_RXDMAEN_Pos
Ë

	)

5242 
	#SPI_CR2_RXDMAEN
 
SPI_CR2_RXDMAEN_Msk


	)

5243 
	#SPI_CR2_TXDMAEN_Pos
 (1U)

	)

5244 
	#SPI_CR2_TXDMAEN_Msk
 (0x1U << 
SPI_CR2_TXDMAEN_Pos
Ë

	)

5245 
	#SPI_CR2_TXDMAEN
 
SPI_CR2_TXDMAEN_Msk


	)

5246 
	#SPI_CR2_SSOE_Pos
 (2U)

	)

5247 
	#SPI_CR2_SSOE_Msk
 (0x1U << 
SPI_CR2_SSOE_Pos
Ë

	)

5248 
	#SPI_CR2_SSOE
 
SPI_CR2_SSOE_Msk


	)

5249 
	#SPI_CR2_FRF_Pos
 (4U)

	)

5250 
	#SPI_CR2_FRF_Msk
 (0x1U << 
SPI_CR2_FRF_Pos
Ë

	)

5251 
	#SPI_CR2_FRF
 
SPI_CR2_FRF_Msk


	)

5252 
	#SPI_CR2_ERRIE_Pos
 (5U)

	)

5253 
	#SPI_CR2_ERRIE_Msk
 (0x1U << 
SPI_CR2_ERRIE_Pos
Ë

	)

5254 
	#SPI_CR2_ERRIE
 
SPI_CR2_ERRIE_Msk


	)

5255 
	#SPI_CR2_RXNEIE_Pos
 (6U)

	)

5256 
	#SPI_CR2_RXNEIE_Msk
 (0x1U << 
SPI_CR2_RXNEIE_Pos
Ë

	)

5257 
	#SPI_CR2_RXNEIE
 
SPI_CR2_RXNEIE_Msk


	)

5258 
	#SPI_CR2_TXEIE_Pos
 (7U)

	)

5259 
	#SPI_CR2_TXEIE_Msk
 (0x1U << 
SPI_CR2_TXEIE_Pos
Ë

	)

5260 
	#SPI_CR2_TXEIE
 
SPI_CR2_TXEIE_Msk


	)

5263 
	#SPI_SR_RXNE_Pos
 (0U)

	)

5264 
	#SPI_SR_RXNE_Msk
 (0x1U << 
SPI_SR_RXNE_Pos
Ë

	)

5265 
	#SPI_SR_RXNE
 
SPI_SR_RXNE_Msk


	)

5266 
	#SPI_SR_TXE_Pos
 (1U)

	)

5267 
	#SPI_SR_TXE_Msk
 (0x1U << 
SPI_SR_TXE_Pos
Ë

	)

5268 
	#SPI_SR_TXE
 
SPI_SR_TXE_Msk


	)

5269 
	#SPI_SR_CHSIDE_Pos
 (2U)

	)

5270 
	#SPI_SR_CHSIDE_Msk
 (0x1U << 
SPI_SR_CHSIDE_Pos
Ë

	)

5271 
	#SPI_SR_CHSIDE
 
SPI_SR_CHSIDE_Msk


	)

5272 
	#SPI_SR_UDR_Pos
 (3U)

	)

5273 
	#SPI_SR_UDR_Msk
 (0x1U << 
SPI_SR_UDR_Pos
Ë

	)

5274 
	#SPI_SR_UDR
 
SPI_SR_UDR_Msk


	)

5275 
	#SPI_SR_CRCERR_Pos
 (4U)

	)

5276 
	#SPI_SR_CRCERR_Msk
 (0x1U << 
SPI_SR_CRCERR_Pos
Ë

	)

5277 
	#SPI_SR_CRCERR
 
SPI_SR_CRCERR_Msk


	)

5278 
	#SPI_SR_MODF_Pos
 (5U)

	)

5279 
	#SPI_SR_MODF_Msk
 (0x1U << 
SPI_SR_MODF_Pos
Ë

	)

5280 
	#SPI_SR_MODF
 
SPI_SR_MODF_Msk


	)

5281 
	#SPI_SR_OVR_Pos
 (6U)

	)

5282 
	#SPI_SR_OVR_Msk
 (0x1U << 
SPI_SR_OVR_Pos
Ë

	)

5283 
	#SPI_SR_OVR
 
SPI_SR_OVR_Msk


	)

5284 
	#SPI_SR_BSY_Pos
 (7U)

	)

5285 
	#SPI_SR_BSY_Msk
 (0x1U << 
SPI_SR_BSY_Pos
Ë

	)

5286 
	#SPI_SR_BSY
 
SPI_SR_BSY_Msk


	)

5287 
	#SPI_SR_FRE_Pos
 (8U)

	)

5288 
	#SPI_SR_FRE_Msk
 (0x1U << 
SPI_SR_FRE_Pos
Ë

	)

5289 
	#SPI_SR_FRE
 
SPI_SR_FRE_Msk


	)

5292 
	#SPI_DR_DR_Pos
 (0U)

	)

5293 
	#SPI_DR_DR_Msk
 (0xFFFFU << 
SPI_DR_DR_Pos
Ë

	)

5294 
	#SPI_DR_DR
 
SPI_DR_DR_Msk


	)

5297 
	#SPI_CRCPR_CRCPOLY_Pos
 (0U)

	)

5298 
	#SPI_CRCPR_CRCPOLY_Msk
 (0xFFFFU << 
SPI_CRCPR_CRCPOLY_Pos
Ë

	)

5299 
	#SPI_CRCPR_CRCPOLY
 
SPI_CRCPR_CRCPOLY_Msk


	)

5302 
	#SPI_RXCRCR_RXCRC_Pos
 (0U)

	)

5303 
	#SPI_RXCRCR_RXCRC_Msk
 (0xFFFFU << 
SPI_RXCRCR_RXCRC_Pos
Ë

	)

5304 
	#SPI_RXCRCR_RXCRC
 
SPI_RXCRCR_RXCRC_Msk


	)

5307 
	#SPI_TXCRCR_TXCRC_Pos
 (0U)

	)

5308 
	#SPI_TXCRCR_TXCRC_Msk
 (0xFFFFU << 
SPI_TXCRCR_TXCRC_Pos
Ë

	)

5309 
	#SPI_TXCRCR_TXCRC
 
SPI_TXCRCR_TXCRC_Msk


	)

5312 
	#SPI_I2SCFGR_CHLEN_Pos
 (0U)

	)

5313 
	#SPI_I2SCFGR_CHLEN_Msk
 (0x1U << 
SPI_I2SCFGR_CHLEN_Pos
Ë

	)

5314 
	#SPI_I2SCFGR_CHLEN
 
SPI_I2SCFGR_CHLEN_Msk


	)

5315 
	#SPI_I2SCFGR_DATLEN_Pos
 (1U)

	)

5316 
	#SPI_I2SCFGR_DATLEN_Msk
 (0x3U << 
SPI_I2SCFGR_DATLEN_Pos
Ë

	)

5317 
	#SPI_I2SCFGR_DATLEN
 
SPI_I2SCFGR_DATLEN_Msk


	)

5318 
	#SPI_I2SCFGR_DATLEN_0
 (0x1U << 
SPI_I2SCFGR_DATLEN_Pos
Ë

	)

5319 
	#SPI_I2SCFGR_DATLEN_1
 (0x2U << 
SPI_I2SCFGR_DATLEN_Pos
Ë

	)

5320 
	#SPI_I2SCFGR_CKPOL_Pos
 (3U)

	)

5321 
	#SPI_I2SCFGR_CKPOL_Msk
 (0x1U << 
SPI_I2SCFGR_CKPOL_Pos
Ë

	)

5322 
	#SPI_I2SCFGR_CKPOL
 
SPI_I2SCFGR_CKPOL_Msk


	)

5323 
	#SPI_I2SCFGR_I2SSTD_Pos
 (4U)

	)

5324 
	#SPI_I2SCFGR_I2SSTD_Msk
 (0x3U << 
SPI_I2SCFGR_I2SSTD_Pos
Ë

	)

5325 
	#SPI_I2SCFGR_I2SSTD
 
SPI_I2SCFGR_I2SSTD_Msk


	)

5326 
	#SPI_I2SCFGR_I2SSTD_0
 (0x1U << 
SPI_I2SCFGR_I2SSTD_Pos
Ë

	)

5327 
	#SPI_I2SCFGR_I2SSTD_1
 (0x2U << 
SPI_I2SCFGR_I2SSTD_Pos
Ë

	)

5328 
	#SPI_I2SCFGR_PCMSYNC_Pos
 (7U)

	)

5329 
	#SPI_I2SCFGR_PCMSYNC_Msk
 (0x1U << 
SPI_I2SCFGR_PCMSYNC_Pos
Ë

	)

5330 
	#SPI_I2SCFGR_PCMSYNC
 
SPI_I2SCFGR_PCMSYNC_Msk


	)

5331 
	#SPI_I2SCFGR_I2SCFG_Pos
 (8U)

	)

5332 
	#SPI_I2SCFGR_I2SCFG_Msk
 (0x3U << 
SPI_I2SCFGR_I2SCFG_Pos
Ë

	)

5333 
	#SPI_I2SCFGR_I2SCFG
 
SPI_I2SCFGR_I2SCFG_Msk


	)

5334 
	#SPI_I2SCFGR_I2SCFG_0
 (0x1U << 
SPI_I2SCFGR_I2SCFG_Pos
Ë

	)

5335 
	#SPI_I2SCFGR_I2SCFG_1
 (0x2U << 
SPI_I2SCFGR_I2SCFG_Pos
Ë

	)

5336 
	#SPI_I2SCFGR_I2SE_Pos
 (10U)

	)

5337 
	#SPI_I2SCFGR_I2SE_Msk
 (0x1U << 
SPI_I2SCFGR_I2SE_Pos
Ë

	)

5338 
	#SPI_I2SCFGR_I2SE
 
SPI_I2SCFGR_I2SE_Msk


	)

5339 
	#SPI_I2SCFGR_I2SMOD_Pos
 (11U)

	)

5340 
	#SPI_I2SCFGR_I2SMOD_Msk
 (0x1U << 
SPI_I2SCFGR_I2SMOD_Pos
Ë

	)

5341 
	#SPI_I2SCFGR_I2SMOD
 
SPI_I2SCFGR_I2SMOD_Msk


	)

5343 
	#SPI_I2SPR_I2SDIV_Pos
 (0U)

	)

5344 
	#SPI_I2SPR_I2SDIV_Msk
 (0xFFU << 
SPI_I2SPR_I2SDIV_Pos
Ë

	)

5345 
	#SPI_I2SPR_I2SDIV
 
SPI_I2SPR_I2SDIV_Msk


	)

5346 
	#SPI_I2SPR_ODD_Pos
 (8U)

	)

5347 
	#SPI_I2SPR_ODD_Msk
 (0x1U << 
SPI_I2SPR_ODD_Pos
Ë

	)

5348 
	#SPI_I2SPR_ODD
 
SPI_I2SPR_ODD_Msk


	)

5349 
	#SPI_I2SPR_MCKOE_Pos
 (9U)

	)

5350 
	#SPI_I2SPR_MCKOE_Msk
 (0x1U << 
SPI_I2SPR_MCKOE_Pos
Ë

	)

5351 
	#SPI_I2SPR_MCKOE
 
SPI_I2SPR_MCKOE_Msk


	)

5359 
	#SYSCFG_CFGR1_MEM_MODE_Pos
 (0U)

	)

5360 
	#SYSCFG_CFGR1_MEM_MODE_Msk
 (0x3U << 
SYSCFG_CFGR1_MEM_MODE_Pos
Ë

	)

5361 
	#SYSCFG_CFGR1_MEM_MODE
 
SYSCFG_CFGR1_MEM_MODE_Msk


	)

5362 
	#SYSCFG_CFGR1_MEM_MODE_0
 (0x1U << 
SYSCFG_CFGR1_MEM_MODE_Pos
Ë

	)

5363 
	#SYSCFG_CFGR1_MEM_MODE_1
 (0x2U << 
SYSCFG_CFGR1_MEM_MODE_Pos
Ë

	)

5364 
	#SYSCFG_CFGR1_BOOT_MODE_Pos
 (8U)

	)

5365 
	#SYSCFG_CFGR1_BOOT_MODE_Msk
 (0x3U << 
SYSCFG_CFGR1_BOOT_MODE_Pos
Ë

	)

5366 
	#SYSCFG_CFGR1_BOOT_MODE
 
SYSCFG_CFGR1_BOOT_MODE_Msk


	)

5367 
	#SYSCFG_CFGR1_BOOT_MODE_0
 (0x1U << 
SYSCFG_CFGR1_BOOT_MODE_Pos
Ë

	)

5368 
	#SYSCFG_CFGR1_BOOT_MODE_1
 (0x2U << 
SYSCFG_CFGR1_BOOT_MODE_Pos
Ë

	)

5371 
	#SYSCFG_CFGR2_FWDISEN_Pos
 (0U)

	)

5372 
	#SYSCFG_CFGR2_FWDISEN_Msk
 (0x1U << 
SYSCFG_CFGR2_FWDISEN_Pos
Ë

	)

5373 
	#SYSCFG_CFGR2_FWDISEN
 
SYSCFG_CFGR2_FWDISEN_Msk


	)

5374 
	#SYSCFG_CFGR2_CAPA_Pos
 (1U)

	)

5375 
	#SYSCFG_CFGR2_CAPA_Msk
 (0x7U << 
SYSCFG_CFGR2_CAPA_Pos
Ë

	)

5376 
	#SYSCFG_CFGR2_CAPA
 
SYSCFG_CFGR2_CAPA_Msk


	)

5377 
	#SYSCFG_CFGR2_CAPA_0
 (0x1U << 
SYSCFG_CFGR2_CAPA_Pos
Ë

	)

5378 
	#SYSCFG_CFGR2_CAPA_1
 (0x2U << 
SYSCFG_CFGR2_CAPA_Pos
Ë

	)

5379 
	#SYSCFG_CFGR2_CAPA_2
 (0x4U << 
SYSCFG_CFGR2_CAPA_Pos
Ë

	)

5380 
	#SYSCFG_CFGR2_I2C_PB6_FMP_Pos
 (8U)

	)

5381 
	#SYSCFG_CFGR2_I2C_PB6_FMP_Msk
 (0x1U << 
SYSCFG_CFGR2_I2C_PB6_FMP_Pos
Ë

	)

5382 
	#SYSCFG_CFGR2_I2C_PB6_FMP
 
SYSCFG_CFGR2_I2C_PB6_FMP_Msk


	)

5383 
	#SYSCFG_CFGR2_I2C_PB7_FMP_Pos
 (9U)

	)

5384 
	#SYSCFG_CFGR2_I2C_PB7_FMP_Msk
 (0x1U << 
SYSCFG_CFGR2_I2C_PB7_FMP_Pos
Ë

	)

5385 
	#SYSCFG_CFGR2_I2C_PB7_FMP
 
SYSCFG_CFGR2_I2C_PB7_FMP_Msk


	)

5386 
	#SYSCFG_CFGR2_I2C_PB8_FMP_Pos
 (10U)

	)

5387 
	#SYSCFG_CFGR2_I2C_PB8_FMP_Msk
 (0x1U << 
SYSCFG_CFGR2_I2C_PB8_FMP_Pos
Ë

	)

5388 
	#SYSCFG_CFGR2_I2C_PB8_FMP
 
SYSCFG_CFGR2_I2C_PB8_FMP_Msk


	)

5389 
	#SYSCFG_CFGR2_I2C_PB9_FMP_Pos
 (11U)

	)

5390 
	#SYSCFG_CFGR2_I2C_PB9_FMP_Msk
 (0x1U << 
SYSCFG_CFGR2_I2C_PB9_FMP_Pos
Ë

	)

5391 
	#SYSCFG_CFGR2_I2C_PB9_FMP
 
SYSCFG_CFGR2_I2C_PB9_FMP_Msk


	)

5392 
	#SYSCFG_CFGR2_I2C1_FMP_Pos
 (12U)

	)

5393 
	#SYSCFG_CFGR2_I2C1_FMP_Msk
 (0x1U << 
SYSCFG_CFGR2_I2C1_FMP_Pos
Ë

	)

5394 
	#SYSCFG_CFGR2_I2C1_FMP
 
SYSCFG_CFGR2_I2C1_FMP_Msk


	)

5395 
	#SYSCFG_CFGR2_I2C2_FMP_Pos
 (13U)

	)

5396 
	#SYSCFG_CFGR2_I2C2_FMP_Msk
 (0x1U << 
SYSCFG_CFGR2_I2C2_FMP_Pos
Ë

	)

5397 
	#SYSCFG_CFGR2_I2C2_FMP
 
SYSCFG_CFGR2_I2C2_FMP_Msk


	)

5400 
	#SYSCFG_EXTICR1_EXTI0_Pos
 (0U)

	)

5401 
	#SYSCFG_EXTICR1_EXTI0_Msk
 (0xFU << 
SYSCFG_EXTICR1_EXTI0_Pos
Ë

	)

5402 
	#SYSCFG_EXTICR1_EXTI0
 
SYSCFG_EXTICR1_EXTI0_Msk


	)

5403 
	#SYSCFG_EXTICR1_EXTI1_Pos
 (4U)

	)

5404 
	#SYSCFG_EXTICR1_EXTI1_Msk
 (0xFU << 
SYSCFG_EXTICR1_EXTI1_Pos
Ë

	)

5405 
	#SYSCFG_EXTICR1_EXTI1
 
SYSCFG_EXTICR1_EXTI1_Msk


	)

5406 
	#SYSCFG_EXTICR1_EXTI2_Pos
 (8U)

	)

5407 
	#SYSCFG_EXTICR1_EXTI2_Msk
 (0xFU << 
SYSCFG_EXTICR1_EXTI2_Pos
Ë

	)

5408 
	#SYSCFG_EXTICR1_EXTI2
 
SYSCFG_EXTICR1_EXTI2_Msk


	)

5409 
	#SYSCFG_EXTICR1_EXTI3_Pos
 (12U)

	)

5410 
	#SYSCFG_EXTICR1_EXTI3_Msk
 (0xFU << 
SYSCFG_EXTICR1_EXTI3_Pos
Ë

	)

5411 
	#SYSCFG_EXTICR1_EXTI3
 
SYSCFG_EXTICR1_EXTI3_Msk


	)

5416 
	#SYSCFG_EXTICR1_EXTI0_PA
 (0x00000000UË

	)

5417 
	#SYSCFG_EXTICR1_EXTI0_PB
 (0x00000001UË

	)

5418 
	#SYSCFG_EXTICR1_EXTI0_PC
 (0x00000002UË

	)

5419 
	#SYSCFG_EXTICR1_EXTI0_PH
 (0x00000005UË

	)

5424 
	#SYSCFG_EXTICR1_EXTI1_PA
 (0x00000000UË

	)

5425 
	#SYSCFG_EXTICR1_EXTI1_PB
 (0x00000010UË

	)

5426 
	#SYSCFG_EXTICR1_EXTI1_PC
 (0x00000020UË

	)

5427 
	#SYSCFG_EXTICR1_EXTI1_PH
 (0x00000050UË

	)

5432 
	#SYSCFG_EXTICR1_EXTI2_PA
 (0x00000000UË

	)

5433 
	#SYSCFG_EXTICR1_EXTI2_PB
 (0x00000100UË

	)

5434 
	#SYSCFG_EXTICR1_EXTI2_PC
 (0x00000200UË

	)

5435 
	#SYSCFG_EXTICR1_EXTI2_PD
 (0x00000300UË

	)

5440 
	#SYSCFG_EXTICR1_EXTI3_PA
 (0x00000000UË

	)

5441 
	#SYSCFG_EXTICR1_EXTI3_PB
 (0x00001000UË

	)

5442 
	#SYSCFG_EXTICR1_EXTI3_PC
 (0x00002000UË

	)

5445 
	#SYSCFG_EXTICR2_EXTI4_Pos
 (0U)

	)

5446 
	#SYSCFG_EXTICR2_EXTI4_Msk
 (0xFU << 
SYSCFG_EXTICR2_EXTI4_Pos
Ë

	)

5447 
	#SYSCFG_EXTICR2_EXTI4
 
SYSCFG_EXTICR2_EXTI4_Msk


	)

5448 
	#SYSCFG_EXTICR2_EXTI5_Pos
 (4U)

	)

5449 
	#SYSCFG_EXTICR2_EXTI5_Msk
 (0xFU << 
SYSCFG_EXTICR2_EXTI5_Pos
Ë

	)

5450 
	#SYSCFG_EXTICR2_EXTI5
 
SYSCFG_EXTICR2_EXTI5_Msk


	)

5451 
	#SYSCFG_EXTICR2_EXTI6_Pos
 (8U)

	)

5452 
	#SYSCFG_EXTICR2_EXTI6_Msk
 (0xFU << 
SYSCFG_EXTICR2_EXTI6_Pos
Ë

	)

5453 
	#SYSCFG_EXTICR2_EXTI6
 
SYSCFG_EXTICR2_EXTI6_Msk


	)

5454 
	#SYSCFG_EXTICR2_EXTI7_Pos
 (12U)

	)

5455 
	#SYSCFG_EXTICR2_EXTI7_Msk
 (0xFU << 
SYSCFG_EXTICR2_EXTI7_Pos
Ë

	)

5456 
	#SYSCFG_EXTICR2_EXTI7
 
SYSCFG_EXTICR2_EXTI7_Msk


	)

5461 
	#SYSCFG_EXTICR2_EXTI4_PA
 (0x00000000UË

	)

5462 
	#SYSCFG_EXTICR2_EXTI4_PB
 (0x00000001UË

	)

5463 
	#SYSCFG_EXTICR2_EXTI4_PC
 (0x00000002UË

	)

5468 
	#SYSCFG_EXTICR2_EXTI5_PA
 (0x00000000UË

	)

5469 
	#SYSCFG_EXTICR2_EXTI5_PB
 (0x00000010UË

	)

5470 
	#SYSCFG_EXTICR2_EXTI5_PC
 (0x00000020UË

	)

5475 
	#SYSCFG_EXTICR2_EXTI6_PA
 (0x00000000UË

	)

5476 
	#SYSCFG_EXTICR2_EXTI6_PB
 (0x00000100UË

	)

5477 
	#SYSCFG_EXTICR2_EXTI6_PC
 (0x00000200UË

	)

5482 
	#SYSCFG_EXTICR2_EXTI7_PA
 (0x00000000UË

	)

5483 
	#SYSCFG_EXTICR2_EXTI7_PB
 (0x00001000UË

	)

5484 
	#SYSCFG_EXTICR2_EXTI7_PC
 (0x00002000UË

	)

5487 
	#SYSCFG_EXTICR3_EXTI8_Pos
 (0U)

	)

5488 
	#SYSCFG_EXTICR3_EXTI8_Msk
 (0xFU << 
SYSCFG_EXTICR3_EXTI8_Pos
Ë

	)

5489 
	#SYSCFG_EXTICR3_EXTI8
 
SYSCFG_EXTICR3_EXTI8_Msk


	)

5490 
	#SYSCFG_EXTICR3_EXTI9_Pos
 (4U)

	)

5491 
	#SYSCFG_EXTICR3_EXTI9_Msk
 (0xFU << 
SYSCFG_EXTICR3_EXTI9_Pos
Ë

	)

5492 
	#SYSCFG_EXTICR3_EXTI9
 
SYSCFG_EXTICR3_EXTI9_Msk


	)

5493 
	#SYSCFG_EXTICR3_EXTI10_Pos
 (8U)

	)

5494 
	#SYSCFG_EXTICR3_EXTI10_Msk
 (0xFU << 
SYSCFG_EXTICR3_EXTI10_Pos
Ë

	)

5495 
	#SYSCFG_EXTICR3_EXTI10
 
SYSCFG_EXTICR3_EXTI10_Msk


	)

5496 
	#SYSCFG_EXTICR3_EXTI11_Pos
 (12U)

	)

5497 
	#SYSCFG_EXTICR3_EXTI11_Msk
 (0xFU << 
SYSCFG_EXTICR3_EXTI11_Pos
Ë

	)

5498 
	#SYSCFG_EXTICR3_EXTI11
 
SYSCFG_EXTICR3_EXTI11_Msk


	)

5503 
	#SYSCFG_EXTICR3_EXTI8_PA
 (0x00000000UË

	)

5504 
	#SYSCFG_EXTICR3_EXTI8_PB
 (0x00000001UË

	)

5505 
	#SYSCFG_EXTICR3_EXTI8_PC
 (0x00000002UË

	)

5510 
	#SYSCFG_EXTICR3_EXTI9_PA
 (0x00000000UË

	)

5511 
	#SYSCFG_EXTICR3_EXTI9_PB
 (0x00000010UË

	)

5512 
	#SYSCFG_EXTICR3_EXTI9_PC
 (0x00000020UË

	)

5517 
	#SYSCFG_EXTICR3_EXTI10_PA
 (0x00000000UË

	)

5518 
	#SYSCFG_EXTICR3_EXTI10_PB
 (0x00000100UË

	)

5519 
	#SYSCFG_EXTICR3_EXTI10_PC
 (0x00000200UË

	)

5524 
	#SYSCFG_EXTICR3_EXTI11_PA
 (0x00000000UË

	)

5525 
	#SYSCFG_EXTICR3_EXTI11_PB
 (0x00001000UË

	)

5526 
	#SYSCFG_EXTICR3_EXTI11_PC
 (0x00002000UË

	)

5529 
	#SYSCFG_EXTICR4_EXTI12_Pos
 (0U)

	)

5530 
	#SYSCFG_EXTICR4_EXTI12_Msk
 (0xFU << 
SYSCFG_EXTICR4_EXTI12_Pos
Ë

	)

5531 
	#SYSCFG_EXTICR4_EXTI12
 
SYSCFG_EXTICR4_EXTI12_Msk


	)

5532 
	#SYSCFG_EXTICR4_EXTI13_Pos
 (4U)

	)

5533 
	#SYSCFG_EXTICR4_EXTI13_Msk
 (0xFU << 
SYSCFG_EXTICR4_EXTI13_Pos
Ë

	)

5534 
	#SYSCFG_EXTICR4_EXTI13
 
SYSCFG_EXTICR4_EXTI13_Msk


	)

5535 
	#SYSCFG_EXTICR4_EXTI14_Pos
 (8U)

	)

5536 
	#SYSCFG_EXTICR4_EXTI14_Msk
 (0xFU << 
SYSCFG_EXTICR4_EXTI14_Pos
Ë

	)

5537 
	#SYSCFG_EXTICR4_EXTI14
 
SYSCFG_EXTICR4_EXTI14_Msk


	)

5538 
	#SYSCFG_EXTICR4_EXTI15_Pos
 (12U)

	)

5539 
	#SYSCFG_EXTICR4_EXTI15_Msk
 (0xFU << 
SYSCFG_EXTICR4_EXTI15_Pos
Ë

	)

5540 
	#SYSCFG_EXTICR4_EXTI15
 
SYSCFG_EXTICR4_EXTI15_Msk


	)

5545 
	#SYSCFG_EXTICR4_EXTI12_PA
 (0x00000000UË

	)

5546 
	#SYSCFG_EXTICR4_EXTI12_PB
 (0x00000001UË

	)

5547 
	#SYSCFG_EXTICR4_EXTI12_PC
 (0x00000002UË

	)

5552 
	#SYSCFG_EXTICR4_EXTI13_PA
 (0x00000000UË

	)

5553 
	#SYSCFG_EXTICR4_EXTI13_PB
 (0x00000010UË

	)

5554 
	#SYSCFG_EXTICR4_EXTI13_PC
 (0x00000020UË

	)

5559 
	#SYSCFG_EXTICR4_EXTI14_PA
 (0x00000000UË

	)

5560 
	#SYSCFG_EXTICR4_EXTI14_PB
 (0x00000100UË

	)

5561 
	#SYSCFG_EXTICR4_EXTI14_PC
 (0x00000200UË

	)

5566 
	#SYSCFG_EXTICR4_EXTI15_PA
 (0x00000000UË

	)

5567 
	#SYSCFG_EXTICR4_EXTI15_PB
 (0x00001000UË

	)

5568 
	#SYSCFG_EXTICR4_EXTI15_PC
 (0x00002000UË

	)

5572 
	#SYSCFG_CFGR3_VREF_OUT_Pos
 (4U)

	)

5573 
	#SYSCFG_CFGR3_VREF_OUT_Msk
 (0x3U << 
SYSCFG_CFGR3_VREF_OUT_Pos
Ë

	)

5574 
	#SYSCFG_CFGR3_VREF_OUT
 
SYSCFG_CFGR3_VREF_OUT_Msk


	)

5575 
	#SYSCFG_CFGR3_VREF_OUT_0
 (0x1U << 
SYSCFG_CFGR3_VREF_OUT_Pos
Ë

	)

5576 
	#SYSCFG_CFGR3_VREF_OUT_1
 (0x2U << 
SYSCFG_CFGR3_VREF_OUT_Pos
Ë

	)

5577 
	#SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos
 (8U)

	)

5578 
	#SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk
 (0x1U << 
SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos
Ë

	)

5579 
	#SYSCFG_CFGR3_ENBUF_VREFINT_ADC
 
SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk


	)

5580 
	#SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos
 (9U)

	)

5581 
	#SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk
 (0x1U << 
SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos
Ë

	)

5582 
	#SYSCFG_CFGR3_ENBUF_SENSOR_ADC
 
SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk


	)

5583 
	#SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos
 (12U)

	)

5584 
	#SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk
 (0x1U << 
SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos
Ë

	)

5585 
	#SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP
 
SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk


	)

5586 
	#SYSCFG_CFGR3_ENREF_HSI48_Pos
 (13U)

	)

5587 
	#SYSCFG_CFGR3_ENREF_HSI48_Msk
 (0x1U << 
SYSCFG_CFGR3_ENREF_HSI48_Pos
Ë

	)

5588 
	#SYSCFG_CFGR3_ENREF_HSI48
 
SYSCFG_CFGR3_ENREF_HSI48_Msk


	)

5589 
	#SYSCFG_CFGR3_VREFINT_RDYF_Pos
 (30U)

	)

5590 
	#SYSCFG_CFGR3_VREFINT_RDYF_Msk
 (0x1U << 
SYSCFG_CFGR3_VREFINT_RDYF_Pos
Ë

	)

5591 
	#SYSCFG_CFGR3_VREFINT_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF_Msk


	)

5592 
	#SYSCFG_CFGR3_REF_LOCK_Pos
 (31U)

	)

5593 
	#SYSCFG_CFGR3_REF_LOCK_Msk
 (0x1U << 
SYSCFG_CFGR3_REF_LOCK_Pos
Ë

	)

5594 
	#SYSCFG_CFGR3_REF_LOCK
 
SYSCFG_CFGR3_REF_LOCK_Msk


	)

5598 
	#SYSCFG_CFGR3_ENBUF_BGAP_ADC
 
SYSCFG_CFGR3_ENBUF_VREFINT_ADC


	)

5599 
	#SYSCFG_CFGR3_ENBUFLP_BGAP_COMP
 
SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP


	)

5600 
	#SYSCFG_CFGR3_ENREF_RC48MHz
 
SYSCFG_CFGR3_ENREF_HSI48


	)

5601 
	#SYSCFG_CFGR3_REF_RC48MHz_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

5602 
	#SYSCFG_CFGR3_REF_HSI48_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

5603 
	#SYSCFG_VREFINT_ADC_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

5604 
	#SYSCFG_CFGR3_SENSOR_ADC_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

5605 
	#SYSCFG_CFGR3_VREFINT_ADC_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

5606 
	#SYSCFG_CFGR3_VREFINT_COMP_RDYF
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

5616 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) \

5617 || 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

5618 
	#TIM_TIM2_REMAP_HSI_SUPPORT


	)

5619 
	#TIM_TIM2_REMAP_HSI48_SUPPORT


	)

5621 
	#TIM_TIM2_REMAP_HSI48_SUPPORT


	)

5625 
	#TIM_CR1_CEN_Pos
 (0U)

	)

5626 
	#TIM_CR1_CEN_Msk
 (0x1U << 
TIM_CR1_CEN_Pos
Ë

	)

5627 
	#TIM_CR1_CEN
 
TIM_CR1_CEN_Msk


	)

5628 
	#TIM_CR1_UDIS_Pos
 (1U)

	)

5629 
	#TIM_CR1_UDIS_Msk
 (0x1U << 
TIM_CR1_UDIS_Pos
Ë

	)

5630 
	#TIM_CR1_UDIS
 
TIM_CR1_UDIS_Msk


	)

5631 
	#TIM_CR1_URS_Pos
 (2U)

	)

5632 
	#TIM_CR1_URS_Msk
 (0x1U << 
TIM_CR1_URS_Pos
Ë

	)

5633 
	#TIM_CR1_URS
 
TIM_CR1_URS_Msk


	)

5634 
	#TIM_CR1_OPM_Pos
 (3U)

	)

5635 
	#TIM_CR1_OPM_Msk
 (0x1U << 
TIM_CR1_OPM_Pos
Ë

	)

5636 
	#TIM_CR1_OPM
 
TIM_CR1_OPM_Msk


	)

5637 
	#TIM_CR1_DIR_Pos
 (4U)

	)

5638 
	#TIM_CR1_DIR_Msk
 (0x1U << 
TIM_CR1_DIR_Pos
Ë

	)

5639 
	#TIM_CR1_DIR
 
TIM_CR1_DIR_Msk


	)

5641 
	#TIM_CR1_CMS_Pos
 (5U)

	)

5642 
	#TIM_CR1_CMS_Msk
 (0x3U << 
TIM_CR1_CMS_Pos
Ë

	)

5643 
	#TIM_CR1_CMS
 
TIM_CR1_CMS_Msk


	)

5644 
	#TIM_CR1_CMS_0
 (0x1U << 
TIM_CR1_CMS_Pos
Ë

	)

5645 
	#TIM_CR1_CMS_1
 (0x2U << 
TIM_CR1_CMS_Pos
Ë

	)

5647 
	#TIM_CR1_ARPE_Pos
 (7U)

	)

5648 
	#TIM_CR1_ARPE_Msk
 (0x1U << 
TIM_CR1_ARPE_Pos
Ë

	)

5649 
	#TIM_CR1_ARPE
 
TIM_CR1_ARPE_Msk


	)

5651 
	#TIM_CR1_CKD_Pos
 (8U)

	)

5652 
	#TIM_CR1_CKD_Msk
 (0x3U << 
TIM_CR1_CKD_Pos
Ë

	)

5653 
	#TIM_CR1_CKD
 
TIM_CR1_CKD_Msk


	)

5654 
	#TIM_CR1_CKD_0
 (0x1U << 
TIM_CR1_CKD_Pos
Ë

	)

5655 
	#TIM_CR1_CKD_1
 (0x2U << 
TIM_CR1_CKD_Pos
Ë

	)

5658 
	#TIM_CR2_CCDS_Pos
 (3U)

	)

5659 
	#TIM_CR2_CCDS_Msk
 (0x1U << 
TIM_CR2_CCDS_Pos
Ë

	)

5660 
	#TIM_CR2_CCDS
 
TIM_CR2_CCDS_Msk


	)

5662 
	#TIM_CR2_MMS_Pos
 (4U)

	)

5663 
	#TIM_CR2_MMS_Msk
 (0x7U << 
TIM_CR2_MMS_Pos
Ë

	)

5664 
	#TIM_CR2_MMS
 
TIM_CR2_MMS_Msk


	)

5665 
	#TIM_CR2_MMS_0
 (0x1U << 
TIM_CR2_MMS_Pos
Ë

	)

5666 
	#TIM_CR2_MMS_1
 (0x2U << 
TIM_CR2_MMS_Pos
Ë

	)

5667 
	#TIM_CR2_MMS_2
 (0x4U << 
TIM_CR2_MMS_Pos
Ë

	)

5669 
	#TIM_CR2_TI1S_Pos
 (7U)

	)

5670 
	#TIM_CR2_TI1S_Msk
 (0x1U << 
TIM_CR2_TI1S_Pos
Ë

	)

5671 
	#TIM_CR2_TI1S
 
TIM_CR2_TI1S_Msk


	)

5674 
	#TIM_SMCR_SMS_Pos
 (0U)

	)

5675 
	#TIM_SMCR_SMS_Msk
 (0x7U << 
TIM_SMCR_SMS_Pos
Ë

	)

5676 
	#TIM_SMCR_SMS
 
TIM_SMCR_SMS_Msk


	)

5677 
	#TIM_SMCR_SMS_0
 (0x1U << 
TIM_SMCR_SMS_Pos
Ë

	)

5678 
	#TIM_SMCR_SMS_1
 (0x2U << 
TIM_SMCR_SMS_Pos
Ë

	)

5679 
	#TIM_SMCR_SMS_2
 (0x4U << 
TIM_SMCR_SMS_Pos
Ë

	)

5681 
	#TIM_SMCR_OCCS_Pos
 (3U)

	)

5682 
	#TIM_SMCR_OCCS_Msk
 (0x1U << 
TIM_SMCR_OCCS_Pos
Ë

	)

5683 
	#TIM_SMCR_OCCS
 
TIM_SMCR_OCCS_Msk


	)

5685 
	#TIM_SMCR_TS_Pos
 (4U)

	)

5686 
	#TIM_SMCR_TS_Msk
 (0x7U << 
TIM_SMCR_TS_Pos
Ë

	)

5687 
	#TIM_SMCR_TS
 
TIM_SMCR_TS_Msk


	)

5688 
	#TIM_SMCR_TS_0
 (0x1U << 
TIM_SMCR_TS_Pos
Ë

	)

5689 
	#TIM_SMCR_TS_1
 (0x2U << 
TIM_SMCR_TS_Pos
Ë

	)

5690 
	#TIM_SMCR_TS_2
 (0x4U << 
TIM_SMCR_TS_Pos
Ë

	)

5692 
	#TIM_SMCR_MSM_Pos
 (7U)

	)

5693 
	#TIM_SMCR_MSM_Msk
 (0x1U << 
TIM_SMCR_MSM_Pos
Ë

	)

5694 
	#TIM_SMCR_MSM
 
TIM_SMCR_MSM_Msk


	)

5696 
	#TIM_SMCR_ETF_Pos
 (8U)

	)

5697 
	#TIM_SMCR_ETF_Msk
 (0xFU << 
TIM_SMCR_ETF_Pos
Ë

	)

5698 
	#TIM_SMCR_ETF
 
TIM_SMCR_ETF_Msk


	)

5699 
	#TIM_SMCR_ETF_0
 (0x1U << 
TIM_SMCR_ETF_Pos
Ë

	)

5700 
	#TIM_SMCR_ETF_1
 (0x2U << 
TIM_SMCR_ETF_Pos
Ë

	)

5701 
	#TIM_SMCR_ETF_2
 (0x4U << 
TIM_SMCR_ETF_Pos
Ë

	)

5702 
	#TIM_SMCR_ETF_3
 (0x8U << 
TIM_SMCR_ETF_Pos
Ë

	)

5704 
	#TIM_SMCR_ETPS_Pos
 (12U)

	)

5705 
	#TIM_SMCR_ETPS_Msk
 (0x3U << 
TIM_SMCR_ETPS_Pos
Ë

	)

5706 
	#TIM_SMCR_ETPS
 
TIM_SMCR_ETPS_Msk


	)

5707 
	#TIM_SMCR_ETPS_0
 (0x1U << 
TIM_SMCR_ETPS_Pos
Ë

	)

5708 
	#TIM_SMCR_ETPS_1
 (0x2U << 
TIM_SMCR_ETPS_Pos
Ë

	)

5710 
	#TIM_SMCR_ECE_Pos
 (14U)

	)

5711 
	#TIM_SMCR_ECE_Msk
 (0x1U << 
TIM_SMCR_ECE_Pos
Ë

	)

5712 
	#TIM_SMCR_ECE
 
TIM_SMCR_ECE_Msk


	)

5713 
	#TIM_SMCR_ETP_Pos
 (15U)

	)

5714 
	#TIM_SMCR_ETP_Msk
 (0x1U << 
TIM_SMCR_ETP_Pos
Ë

	)

5715 
	#TIM_SMCR_ETP
 
TIM_SMCR_ETP_Msk


	)

5718 
	#TIM_DIER_UIE_Pos
 (0U)

	)

5719 
	#TIM_DIER_UIE_Msk
 (0x1U << 
TIM_DIER_UIE_Pos
Ë

	)

5720 
	#TIM_DIER_UIE
 
TIM_DIER_UIE_Msk


	)

5721 
	#TIM_DIER_CC1IE_Pos
 (1U)

	)

5722 
	#TIM_DIER_CC1IE_Msk
 (0x1U << 
TIM_DIER_CC1IE_Pos
Ë

	)

5723 
	#TIM_DIER_CC1IE
 
TIM_DIER_CC1IE_Msk


	)

5724 
	#TIM_DIER_CC2IE_Pos
 (2U)

	)

5725 
	#TIM_DIER_CC2IE_Msk
 (0x1U << 
TIM_DIER_CC2IE_Pos
Ë

	)

5726 
	#TIM_DIER_CC2IE
 
TIM_DIER_CC2IE_Msk


	)

5727 
	#TIM_DIER_CC3IE_Pos
 (3U)

	)

5728 
	#TIM_DIER_CC3IE_Msk
 (0x1U << 
TIM_DIER_CC3IE_Pos
Ë

	)

5729 
	#TIM_DIER_CC3IE
 
TIM_DIER_CC3IE_Msk


	)

5730 
	#TIM_DIER_CC4IE_Pos
 (4U)

	)

5731 
	#TIM_DIER_CC4IE_Msk
 (0x1U << 
TIM_DIER_CC4IE_Pos
Ë

	)

5732 
	#TIM_DIER_CC4IE
 
TIM_DIER_CC4IE_Msk


	)

5733 
	#TIM_DIER_TIE_Pos
 (6U)

	)

5734 
	#TIM_DIER_TIE_Msk
 (0x1U << 
TIM_DIER_TIE_Pos
Ë

	)

5735 
	#TIM_DIER_TIE
 
TIM_DIER_TIE_Msk


	)

5736 
	#TIM_DIER_UDE_Pos
 (8U)

	)

5737 
	#TIM_DIER_UDE_Msk
 (0x1U << 
TIM_DIER_UDE_Pos
Ë

	)

5738 
	#TIM_DIER_UDE
 
TIM_DIER_UDE_Msk


	)

5739 
	#TIM_DIER_CC1DE_Pos
 (9U)

	)

5740 
	#TIM_DIER_CC1DE_Msk
 (0x1U << 
TIM_DIER_CC1DE_Pos
Ë

	)

5741 
	#TIM_DIER_CC1DE
 
TIM_DIER_CC1DE_Msk


	)

5742 
	#TIM_DIER_CC2DE_Pos
 (10U)

	)

5743 
	#TIM_DIER_CC2DE_Msk
 (0x1U << 
TIM_DIER_CC2DE_Pos
Ë

	)

5744 
	#TIM_DIER_CC2DE
 
TIM_DIER_CC2DE_Msk


	)

5745 
	#TIM_DIER_CC3DE_Pos
 (11U)

	)

5746 
	#TIM_DIER_CC3DE_Msk
 (0x1U << 
TIM_DIER_CC3DE_Pos
Ë

	)

5747 
	#TIM_DIER_CC3DE
 
TIM_DIER_CC3DE_Msk


	)

5748 
	#TIM_DIER_CC4DE_Pos
 (12U)

	)

5749 
	#TIM_DIER_CC4DE_Msk
 (0x1U << 
TIM_DIER_CC4DE_Pos
Ë

	)

5750 
	#TIM_DIER_CC4DE
 
TIM_DIER_CC4DE_Msk


	)

5751 
	#TIM_DIER_TDE_Pos
 (14U)

	)

5752 
	#TIM_DIER_TDE_Msk
 (0x1U << 
TIM_DIER_TDE_Pos
Ë

	)

5753 
	#TIM_DIER_TDE
 
TIM_DIER_TDE_Msk


	)

5756 
	#TIM_SR_UIF_Pos
 (0U)

	)

5757 
	#TIM_SR_UIF_Msk
 (0x1U << 
TIM_SR_UIF_Pos
Ë

	)

5758 
	#TIM_SR_UIF
 
TIM_SR_UIF_Msk


	)

5759 
	#TIM_SR_CC1IF_Pos
 (1U)

	)

5760 
	#TIM_SR_CC1IF_Msk
 (0x1U << 
TIM_SR_CC1IF_Pos
Ë

	)

5761 
	#TIM_SR_CC1IF
 
TIM_SR_CC1IF_Msk


	)

5762 
	#TIM_SR_CC2IF_Pos
 (2U)

	)

5763 
	#TIM_SR_CC2IF_Msk
 (0x1U << 
TIM_SR_CC2IF_Pos
Ë

	)

5764 
	#TIM_SR_CC2IF
 
TIM_SR_CC2IF_Msk


	)

5765 
	#TIM_SR_CC3IF_Pos
 (3U)

	)

5766 
	#TIM_SR_CC3IF_Msk
 (0x1U << 
TIM_SR_CC3IF_Pos
Ë

	)

5767 
	#TIM_SR_CC3IF
 
TIM_SR_CC3IF_Msk


	)

5768 
	#TIM_SR_CC4IF_Pos
 (4U)

	)

5769 
	#TIM_SR_CC4IF_Msk
 (0x1U << 
TIM_SR_CC4IF_Pos
Ë

	)

5770 
	#TIM_SR_CC4IF
 
TIM_SR_CC4IF_Msk


	)

5771 
	#TIM_SR_TIF_Pos
 (6U)

	)

5772 
	#TIM_SR_TIF_Msk
 (0x1U << 
TIM_SR_TIF_Pos
Ë

	)

5773 
	#TIM_SR_TIF
 
TIM_SR_TIF_Msk


	)

5774 
	#TIM_SR_CC1OF_Pos
 (9U)

	)

5775 
	#TIM_SR_CC1OF_Msk
 (0x1U << 
TIM_SR_CC1OF_Pos
Ë

	)

5776 
	#TIM_SR_CC1OF
 
TIM_SR_CC1OF_Msk


	)

5777 
	#TIM_SR_CC2OF_Pos
 (10U)

	)

5778 
	#TIM_SR_CC2OF_Msk
 (0x1U << 
TIM_SR_CC2OF_Pos
Ë

	)

5779 
	#TIM_SR_CC2OF
 
TIM_SR_CC2OF_Msk


	)

5780 
	#TIM_SR_CC3OF_Pos
 (11U)

	)

5781 
	#TIM_SR_CC3OF_Msk
 (0x1U << 
TIM_SR_CC3OF_Pos
Ë

	)

5782 
	#TIM_SR_CC3OF
 
TIM_SR_CC3OF_Msk


	)

5783 
	#TIM_SR_CC4OF_Pos
 (12U)

	)

5784 
	#TIM_SR_CC4OF_Msk
 (0x1U << 
TIM_SR_CC4OF_Pos
Ë

	)

5785 
	#TIM_SR_CC4OF
 
TIM_SR_CC4OF_Msk


	)

5788 
	#TIM_EGR_UG_Pos
 (0U)

	)

5789 
	#TIM_EGR_UG_Msk
 (0x1U << 
TIM_EGR_UG_Pos
Ë

	)

5790 
	#TIM_EGR_UG
 
TIM_EGR_UG_Msk


	)

5791 
	#TIM_EGR_CC1G_Pos
 (1U)

	)

5792 
	#TIM_EGR_CC1G_Msk
 (0x1U << 
TIM_EGR_CC1G_Pos
Ë

	)

5793 
	#TIM_EGR_CC1G
 
TIM_EGR_CC1G_Msk


	)

5794 
	#TIM_EGR_CC2G_Pos
 (2U)

	)

5795 
	#TIM_EGR_CC2G_Msk
 (0x1U << 
TIM_EGR_CC2G_Pos
Ë

	)

5796 
	#TIM_EGR_CC2G
 
TIM_EGR_CC2G_Msk


	)

5797 
	#TIM_EGR_CC3G_Pos
 (3U)

	)

5798 
	#TIM_EGR_CC3G_Msk
 (0x1U << 
TIM_EGR_CC3G_Pos
Ë

	)

5799 
	#TIM_EGR_CC3G
 
TIM_EGR_CC3G_Msk


	)

5800 
	#TIM_EGR_CC4G_Pos
 (4U)

	)

5801 
	#TIM_EGR_CC4G_Msk
 (0x1U << 
TIM_EGR_CC4G_Pos
Ë

	)

5802 
	#TIM_EGR_CC4G
 
TIM_EGR_CC4G_Msk


	)

5803 
	#TIM_EGR_TG_Pos
 (6U)

	)

5804 
	#TIM_EGR_TG_Msk
 (0x1U << 
TIM_EGR_TG_Pos
Ë

	)

5805 
	#TIM_EGR_TG
 
TIM_EGR_TG_Msk


	)

5808 
	#TIM_CCMR1_CC1S_Pos
 (0U)

	)

5809 
	#TIM_CCMR1_CC1S_Msk
 (0x3U << 
TIM_CCMR1_CC1S_Pos
Ë

	)

5810 
	#TIM_CCMR1_CC1S
 
TIM_CCMR1_CC1S_Msk


	)

5811 
	#TIM_CCMR1_CC1S_0
 (0x1U << 
TIM_CCMR1_CC1S_Pos
Ë

	)

5812 
	#TIM_CCMR1_CC1S_1
 (0x2U << 
TIM_CCMR1_CC1S_Pos
Ë

	)

5814 
	#TIM_CCMR1_OC1FE_Pos
 (2U)

	)

5815 
	#TIM_CCMR1_OC1FE_Msk
 (0x1U << 
TIM_CCMR1_OC1FE_Pos
Ë

	)

5816 
	#TIM_CCMR1_OC1FE
 
TIM_CCMR1_OC1FE_Msk


	)

5817 
	#TIM_CCMR1_OC1PE_Pos
 (3U)

	)

5818 
	#TIM_CCMR1_OC1PE_Msk
 (0x1U << 
TIM_CCMR1_OC1PE_Pos
Ë

	)

5819 
	#TIM_CCMR1_OC1PE
 
TIM_CCMR1_OC1PE_Msk


	)

5821 
	#TIM_CCMR1_OC1M_Pos
 (4U)

	)

5822 
	#TIM_CCMR1_OC1M_Msk
 (0x7U << 
TIM_CCMR1_OC1M_Pos
Ë

	)

5823 
	#TIM_CCMR1_OC1M
 
TIM_CCMR1_OC1M_Msk


	)

5824 
	#TIM_CCMR1_OC1M_0
 (0x1U << 
TIM_CCMR1_OC1M_Pos
Ë

	)

5825 
	#TIM_CCMR1_OC1M_1
 (0x2U << 
TIM_CCMR1_OC1M_Pos
Ë

	)

5826 
	#TIM_CCMR1_OC1M_2
 (0x4U << 
TIM_CCMR1_OC1M_Pos
Ë

	)

5828 
	#TIM_CCMR1_OC1CE_Pos
 (7U)

	)

5829 
	#TIM_CCMR1_OC1CE_Msk
 (0x1U << 
TIM_CCMR1_OC1CE_Pos
Ë

	)

5830 
	#TIM_CCMR1_OC1CE
 
TIM_CCMR1_OC1CE_Msk


	)

5832 
	#TIM_CCMR1_CC2S_Pos
 (8U)

	)

5833 
	#TIM_CCMR1_CC2S_Msk
 (0x3U << 
TIM_CCMR1_CC2S_Pos
Ë

	)

5834 
	#TIM_CCMR1_CC2S
 
TIM_CCMR1_CC2S_Msk


	)

5835 
	#TIM_CCMR1_CC2S_0
 (0x1U << 
TIM_CCMR1_CC2S_Pos
Ë

	)

5836 
	#TIM_CCMR1_CC2S_1
 (0x2U << 
TIM_CCMR1_CC2S_Pos
Ë

	)

5838 
	#TIM_CCMR1_OC2FE_Pos
 (10U)

	)

5839 
	#TIM_CCMR1_OC2FE_Msk
 (0x1U << 
TIM_CCMR1_OC2FE_Pos
Ë

	)

5840 
	#TIM_CCMR1_OC2FE
 
TIM_CCMR1_OC2FE_Msk


	)

5841 
	#TIM_CCMR1_OC2PE_Pos
 (11U)

	)

5842 
	#TIM_CCMR1_OC2PE_Msk
 (0x1U << 
TIM_CCMR1_OC2PE_Pos
Ë

	)

5843 
	#TIM_CCMR1_OC2PE
 
TIM_CCMR1_OC2PE_Msk


	)

5845 
	#TIM_CCMR1_OC2M_Pos
 (12U)

	)

5846 
	#TIM_CCMR1_OC2M_Msk
 (0x7U << 
TIM_CCMR1_OC2M_Pos
Ë

	)

5847 
	#TIM_CCMR1_OC2M
 
TIM_CCMR1_OC2M_Msk


	)

5848 
	#TIM_CCMR1_OC2M_0
 (0x1U << 
TIM_CCMR1_OC2M_Pos
Ë

	)

5849 
	#TIM_CCMR1_OC2M_1
 (0x2U << 
TIM_CCMR1_OC2M_Pos
Ë

	)

5850 
	#TIM_CCMR1_OC2M_2
 (0x4U << 
TIM_CCMR1_OC2M_Pos
Ë

	)

5852 
	#TIM_CCMR1_OC2CE_Pos
 (15U)

	)

5853 
	#TIM_CCMR1_OC2CE_Msk
 (0x1U << 
TIM_CCMR1_OC2CE_Pos
Ë

	)

5854 
	#TIM_CCMR1_OC2CE
 
TIM_CCMR1_OC2CE_Msk


	)

5858 
	#TIM_CCMR1_IC1PSC_Pos
 (2U)

	)

5859 
	#TIM_CCMR1_IC1PSC_Msk
 (0x3U << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

5860 
	#TIM_CCMR1_IC1PSC
 
TIM_CCMR1_IC1PSC_Msk


	)

5861 
	#TIM_CCMR1_IC1PSC_0
 (0x1U << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

5862 
	#TIM_CCMR1_IC1PSC_1
 (0x2U << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

5864 
	#TIM_CCMR1_IC1F_Pos
 (4U)

	)

5865 
	#TIM_CCMR1_IC1F_Msk
 (0xFU << 
TIM_CCMR1_IC1F_Pos
Ë

	)

5866 
	#TIM_CCMR1_IC1F
 
TIM_CCMR1_IC1F_Msk


	)

5867 
	#TIM_CCMR1_IC1F_0
 (0x1U << 
TIM_CCMR1_IC1F_Pos
Ë

	)

5868 
	#TIM_CCMR1_IC1F_1
 (0x2U << 
TIM_CCMR1_IC1F_Pos
Ë

	)

5869 
	#TIM_CCMR1_IC1F_2
 (0x4U << 
TIM_CCMR1_IC1F_Pos
Ë

	)

5870 
	#TIM_CCMR1_IC1F_3
 (0x8U << 
TIM_CCMR1_IC1F_Pos
Ë

	)

5872 
	#TIM_CCMR1_IC2PSC_Pos
 (10U)

	)

5873 
	#TIM_CCMR1_IC2PSC_Msk
 (0x3U << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

5874 
	#TIM_CCMR1_IC2PSC
 
TIM_CCMR1_IC2PSC_Msk


	)

5875 
	#TIM_CCMR1_IC2PSC_0
 (0x1U << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

5876 
	#TIM_CCMR1_IC2PSC_1
 (0x2U << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

5878 
	#TIM_CCMR1_IC2F_Pos
 (12U)

	)

5879 
	#TIM_CCMR1_IC2F_Msk
 (0xFU << 
TIM_CCMR1_IC2F_Pos
Ë

	)

5880 
	#TIM_CCMR1_IC2F
 
TIM_CCMR1_IC2F_Msk


	)

5881 
	#TIM_CCMR1_IC2F_0
 (0x1U << 
TIM_CCMR1_IC2F_Pos
Ë

	)

5882 
	#TIM_CCMR1_IC2F_1
 (0x2U << 
TIM_CCMR1_IC2F_Pos
Ë

	)

5883 
	#TIM_CCMR1_IC2F_2
 (0x4U << 
TIM_CCMR1_IC2F_Pos
Ë

	)

5884 
	#TIM_CCMR1_IC2F_3
 (0x8U << 
TIM_CCMR1_IC2F_Pos
Ë

	)

5887 
	#TIM_CCMR2_CC3S_Pos
 (0U)

	)

5888 
	#TIM_CCMR2_CC3S_Msk
 (0x3U << 
TIM_CCMR2_CC3S_Pos
Ë

	)

5889 
	#TIM_CCMR2_CC3S
 
TIM_CCMR2_CC3S_Msk


	)

5890 
	#TIM_CCMR2_CC3S_0
 (0x1U << 
TIM_CCMR2_CC3S_Pos
Ë

	)

5891 
	#TIM_CCMR2_CC3S_1
 (0x2U << 
TIM_CCMR2_CC3S_Pos
Ë

	)

5893 
	#TIM_CCMR2_OC3FE_Pos
 (2U)

	)

5894 
	#TIM_CCMR2_OC3FE_Msk
 (0x1U << 
TIM_CCMR2_OC3FE_Pos
Ë

	)

5895 
	#TIM_CCMR2_OC3FE
 
TIM_CCMR2_OC3FE_Msk


	)

5896 
	#TIM_CCMR2_OC3PE_Pos
 (3U)

	)

5897 
	#TIM_CCMR2_OC3PE_Msk
 (0x1U << 
TIM_CCMR2_OC3PE_Pos
Ë

	)

5898 
	#TIM_CCMR2_OC3PE
 
TIM_CCMR2_OC3PE_Msk


	)

5900 
	#TIM_CCMR2_OC3M_Pos
 (4U)

	)

5901 
	#TIM_CCMR2_OC3M_Msk
 (0x7U << 
TIM_CCMR2_OC3M_Pos
Ë

	)

5902 
	#TIM_CCMR2_OC3M
 
TIM_CCMR2_OC3M_Msk


	)

5903 
	#TIM_CCMR2_OC3M_0
 (0x1U << 
TIM_CCMR2_OC3M_Pos
Ë

	)

5904 
	#TIM_CCMR2_OC3M_1
 (0x2U << 
TIM_CCMR2_OC3M_Pos
Ë

	)

5905 
	#TIM_CCMR2_OC3M_2
 (0x4U << 
TIM_CCMR2_OC3M_Pos
Ë

	)

5907 
	#TIM_CCMR2_OC3CE_Pos
 (7U)

	)

5908 
	#TIM_CCMR2_OC3CE_Msk
 (0x1U << 
TIM_CCMR2_OC3CE_Pos
Ë

	)

5909 
	#TIM_CCMR2_OC3CE
 
TIM_CCMR2_OC3CE_Msk


	)

5911 
	#TIM_CCMR2_CC4S_Pos
 (8U)

	)

5912 
	#TIM_CCMR2_CC4S_Msk
 (0x3U << 
TIM_CCMR2_CC4S_Pos
Ë

	)

5913 
	#TIM_CCMR2_CC4S
 
TIM_CCMR2_CC4S_Msk


	)

5914 
	#TIM_CCMR2_CC4S_0
 (0x1U << 
TIM_CCMR2_CC4S_Pos
Ë

	)

5915 
	#TIM_CCMR2_CC4S_1
 (0x2U << 
TIM_CCMR2_CC4S_Pos
Ë

	)

5917 
	#TIM_CCMR2_OC4FE_Pos
 (10U)

	)

5918 
	#TIM_CCMR2_OC4FE_Msk
 (0x1U << 
TIM_CCMR2_OC4FE_Pos
Ë

	)

5919 
	#TIM_CCMR2_OC4FE
 
TIM_CCMR2_OC4FE_Msk


	)

5920 
	#TIM_CCMR2_OC4PE_Pos
 (11U)

	)

5921 
	#TIM_CCMR2_OC4PE_Msk
 (0x1U << 
TIM_CCMR2_OC4PE_Pos
Ë

	)

5922 
	#TIM_CCMR2_OC4PE
 
TIM_CCMR2_OC4PE_Msk


	)

5924 
	#TIM_CCMR2_OC4M_Pos
 (12U)

	)

5925 
	#TIM_CCMR2_OC4M_Msk
 (0x7U << 
TIM_CCMR2_OC4M_Pos
Ë

	)

5926 
	#TIM_CCMR2_OC4M
 
TIM_CCMR2_OC4M_Msk


	)

5927 
	#TIM_CCMR2_OC4M_0
 (0x1U << 
TIM_CCMR2_OC4M_Pos
Ë

	)

5928 
	#TIM_CCMR2_OC4M_1
 (0x2U << 
TIM_CCMR2_OC4M_Pos
Ë

	)

5929 
	#TIM_CCMR2_OC4M_2
 (0x4U << 
TIM_CCMR2_OC4M_Pos
Ë

	)

5931 
	#TIM_CCMR2_OC4CE_Pos
 (15U)

	)

5932 
	#TIM_CCMR2_OC4CE_Msk
 (0x1U << 
TIM_CCMR2_OC4CE_Pos
Ë

	)

5933 
	#TIM_CCMR2_OC4CE
 
TIM_CCMR2_OC4CE_Msk


	)

5937 
	#TIM_CCMR2_IC3PSC_Pos
 (2U)

	)

5938 
	#TIM_CCMR2_IC3PSC_Msk
 (0x3U << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

5939 
	#TIM_CCMR2_IC3PSC
 
TIM_CCMR2_IC3PSC_Msk


	)

5940 
	#TIM_CCMR2_IC3PSC_0
 (0x1U << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

5941 
	#TIM_CCMR2_IC3PSC_1
 (0x2U << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

5943 
	#TIM_CCMR2_IC3F_Pos
 (4U)

	)

5944 
	#TIM_CCMR2_IC3F_Msk
 (0xFU << 
TIM_CCMR2_IC3F_Pos
Ë

	)

5945 
	#TIM_CCMR2_IC3F
 
TIM_CCMR2_IC3F_Msk


	)

5946 
	#TIM_CCMR2_IC3F_0
 (0x1U << 
TIM_CCMR2_IC3F_Pos
Ë

	)

5947 
	#TIM_CCMR2_IC3F_1
 (0x2U << 
TIM_CCMR2_IC3F_Pos
Ë

	)

5948 
	#TIM_CCMR2_IC3F_2
 (0x4U << 
TIM_CCMR2_IC3F_Pos
Ë

	)

5949 
	#TIM_CCMR2_IC3F_3
 (0x8U << 
TIM_CCMR2_IC3F_Pos
Ë

	)

5951 
	#TIM_CCMR2_IC4PSC_Pos
 (10U)

	)

5952 
	#TIM_CCMR2_IC4PSC_Msk
 (0x3U << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

5953 
	#TIM_CCMR2_IC4PSC
 
TIM_CCMR2_IC4PSC_Msk


	)

5954 
	#TIM_CCMR2_IC4PSC_0
 (0x1U << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

5955 
	#TIM_CCMR2_IC4PSC_1
 (0x2U << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

5957 
	#TIM_CCMR2_IC4F_Pos
 (12U)

	)

5958 
	#TIM_CCMR2_IC4F_Msk
 (0xFU << 
TIM_CCMR2_IC4F_Pos
Ë

	)

5959 
	#TIM_CCMR2_IC4F
 
TIM_CCMR2_IC4F_Msk


	)

5960 
	#TIM_CCMR2_IC4F_0
 (0x1U << 
TIM_CCMR2_IC4F_Pos
Ë

	)

5961 
	#TIM_CCMR2_IC4F_1
 (0x2U << 
TIM_CCMR2_IC4F_Pos
Ë

	)

5962 
	#TIM_CCMR2_IC4F_2
 (0x4U << 
TIM_CCMR2_IC4F_Pos
Ë

	)

5963 
	#TIM_CCMR2_IC4F_3
 (0x8U << 
TIM_CCMR2_IC4F_Pos
Ë

	)

5966 
	#TIM_CCER_CC1E_Pos
 (0U)

	)

5967 
	#TIM_CCER_CC1E_Msk
 (0x1U << 
TIM_CCER_CC1E_Pos
Ë

	)

5968 
	#TIM_CCER_CC1E
 
TIM_CCER_CC1E_Msk


	)

5969 
	#TIM_CCER_CC1P_Pos
 (1U)

	)

5970 
	#TIM_CCER_CC1P_Msk
 (0x1U << 
TIM_CCER_CC1P_Pos
Ë

	)

5971 
	#TIM_CCER_CC1P
 
TIM_CCER_CC1P_Msk


	)

5972 
	#TIM_CCER_CC1NP_Pos
 (3U)

	)

5973 
	#TIM_CCER_CC1NP_Msk
 (0x1U << 
TIM_CCER_CC1NP_Pos
Ë

	)

5974 
	#TIM_CCER_CC1NP
 
TIM_CCER_CC1NP_Msk


	)

5975 
	#TIM_CCER_CC2E_Pos
 (4U)

	)

5976 
	#TIM_CCER_CC2E_Msk
 (0x1U << 
TIM_CCER_CC2E_Pos
Ë

	)

5977 
	#TIM_CCER_CC2E
 
TIM_CCER_CC2E_Msk


	)

5978 
	#TIM_CCER_CC2P_Pos
 (5U)

	)

5979 
	#TIM_CCER_CC2P_Msk
 (0x1U << 
TIM_CCER_CC2P_Pos
Ë

	)

5980 
	#TIM_CCER_CC2P
 
TIM_CCER_CC2P_Msk


	)

5981 
	#TIM_CCER_CC2NP_Pos
 (7U)

	)

5982 
	#TIM_CCER_CC2NP_Msk
 (0x1U << 
TIM_CCER_CC2NP_Pos
Ë

	)

5983 
	#TIM_CCER_CC2NP
 
TIM_CCER_CC2NP_Msk


	)

5984 
	#TIM_CCER_CC3E_Pos
 (8U)

	)

5985 
	#TIM_CCER_CC3E_Msk
 (0x1U << 
TIM_CCER_CC3E_Pos
Ë

	)

5986 
	#TIM_CCER_CC3E
 
TIM_CCER_CC3E_Msk


	)

5987 
	#TIM_CCER_CC3P_Pos
 (9U)

	)

5988 
	#TIM_CCER_CC3P_Msk
 (0x1U << 
TIM_CCER_CC3P_Pos
Ë

	)

5989 
	#TIM_CCER_CC3P
 
TIM_CCER_CC3P_Msk


	)

5990 
	#TIM_CCER_CC3NP_Pos
 (11U)

	)

5991 
	#TIM_CCER_CC3NP_Msk
 (0x1U << 
TIM_CCER_CC3NP_Pos
Ë

	)

5992 
	#TIM_CCER_CC3NP
 
TIM_CCER_CC3NP_Msk


	)

5993 
	#TIM_CCER_CC4E_Pos
 (12U)

	)

5994 
	#TIM_CCER_CC4E_Msk
 (0x1U << 
TIM_CCER_CC4E_Pos
Ë

	)

5995 
	#TIM_CCER_CC4E
 
TIM_CCER_CC4E_Msk


	)

5996 
	#TIM_CCER_CC4P_Pos
 (13U)

	)

5997 
	#TIM_CCER_CC4P_Msk
 (0x1U << 
TIM_CCER_CC4P_Pos
Ë

	)

5998 
	#TIM_CCER_CC4P
 
TIM_CCER_CC4P_Msk


	)

5999 
	#TIM_CCER_CC4NP_Pos
 (15U)

	)

6000 
	#TIM_CCER_CC4NP_Msk
 (0x1U << 
TIM_CCER_CC4NP_Pos
Ë

	)

6001 
	#TIM_CCER_CC4NP
 
TIM_CCER_CC4NP_Msk


	)

6004 
	#TIM_CNT_CNT_Pos
 (0U)

	)

6005 
	#TIM_CNT_CNT_Msk
 (0xFFFFU << 
TIM_CNT_CNT_Pos
Ë

	)

6006 
	#TIM_CNT_CNT
 
TIM_CNT_CNT_Msk


	)

6009 
	#TIM_PSC_PSC_Pos
 (0U)

	)

6010 
	#TIM_PSC_PSC_Msk
 (0xFFFFU << 
TIM_PSC_PSC_Pos
Ë

	)

6011 
	#TIM_PSC_PSC
 
TIM_PSC_PSC_Msk


	)

6014 
	#TIM_ARR_ARR_Pos
 (0U)

	)

6015 
	#TIM_ARR_ARR_Msk
 (0xFFFFU << 
TIM_ARR_ARR_Pos
Ë

	)

6016 
	#TIM_ARR_ARR
 
TIM_ARR_ARR_Msk


	)

6019 
	#TIM_CCR1_CCR1_Pos
 (0U)

	)

6020 
	#TIM_CCR1_CCR1_Msk
 (0xFFFFU << 
TIM_CCR1_CCR1_Pos
Ë

	)

6021 
	#TIM_CCR1_CCR1
 
TIM_CCR1_CCR1_Msk


	)

6024 
	#TIM_CCR2_CCR2_Pos
 (0U)

	)

6025 
	#TIM_CCR2_CCR2_Msk
 (0xFFFFU << 
TIM_CCR2_CCR2_Pos
Ë

	)

6026 
	#TIM_CCR2_CCR2
 
TIM_CCR2_CCR2_Msk


	)

6029 
	#TIM_CCR3_CCR3_Pos
 (0U)

	)

6030 
	#TIM_CCR3_CCR3_Msk
 (0xFFFFU << 
TIM_CCR3_CCR3_Pos
Ë

	)

6031 
	#TIM_CCR3_CCR3
 
TIM_CCR3_CCR3_Msk


	)

6034 
	#TIM_CCR4_CCR4_Pos
 (0U)

	)

6035 
	#TIM_CCR4_CCR4_Msk
 (0xFFFFU << 
TIM_CCR4_CCR4_Pos
Ë

	)

6036 
	#TIM_CCR4_CCR4
 
TIM_CCR4_CCR4_Msk


	)

6039 
	#TIM_DCR_DBA_Pos
 (0U)

	)

6040 
	#TIM_DCR_DBA_Msk
 (0x1FU << 
TIM_DCR_DBA_Pos
Ë

	)

6041 
	#TIM_DCR_DBA
 
TIM_DCR_DBA_Msk


	)

6042 
	#TIM_DCR_DBA_0
 (0x01U << 
TIM_DCR_DBA_Pos
Ë

	)

6043 
	#TIM_DCR_DBA_1
 (0x02U << 
TIM_DCR_DBA_Pos
Ë

	)

6044 
	#TIM_DCR_DBA_2
 (0x04U << 
TIM_DCR_DBA_Pos
Ë

	)

6045 
	#TIM_DCR_DBA_3
 (0x08U << 
TIM_DCR_DBA_Pos
Ë

	)

6046 
	#TIM_DCR_DBA_4
 (0x10U << 
TIM_DCR_DBA_Pos
Ë

	)

6048 
	#TIM_DCR_DBL_Pos
 (8U)

	)

6049 
	#TIM_DCR_DBL_Msk
 (0x1FU << 
TIM_DCR_DBL_Pos
Ë

	)

6050 
	#TIM_DCR_DBL
 
TIM_DCR_DBL_Msk


	)

6051 
	#TIM_DCR_DBL_0
 (0x01U << 
TIM_DCR_DBL_Pos
Ë

	)

6052 
	#TIM_DCR_DBL_1
 (0x02U << 
TIM_DCR_DBL_Pos
Ë

	)

6053 
	#TIM_DCR_DBL_2
 (0x04U << 
TIM_DCR_DBL_Pos
Ë

	)

6054 
	#TIM_DCR_DBL_3
 (0x08U << 
TIM_DCR_DBL_Pos
Ë

	)

6055 
	#TIM_DCR_DBL_4
 (0x10U << 
TIM_DCR_DBL_Pos
Ë

	)

6058 
	#TIM_DMAR_DMAB_Pos
 (0U)

	)

6059 
	#TIM_DMAR_DMAB_Msk
 (0xFFFFU << 
TIM_DMAR_DMAB_Pos
Ë

	)

6060 
	#TIM_DMAR_DMAB
 
TIM_DMAR_DMAB_Msk


	)

6063 
	#TIM2_OR_ETR_RMP_Pos
 (0U)

	)

6064 
	#TIM2_OR_ETR_RMP_Msk
 (0x7U << 
TIM2_OR_ETR_RMP_Pos
Ë

	)

6065 
	#TIM2_OR_ETR_RMP
 
TIM2_OR_ETR_RMP_Msk


	)

6066 
	#TIM2_OR_ETR_RMP_0
 (0x1U << 
TIM2_OR_ETR_RMP_Pos
Ë

	)

6067 
	#TIM2_OR_ETR_RMP_1
 (0x2U << 
TIM2_OR_ETR_RMP_Pos
Ë

	)

6068 
	#TIM2_OR_ETR_RMP_2
 (0x4U << 
TIM2_OR_ETR_RMP_Pos
Ë

	)

6069 
	#TIM2_OR_TI4_RMP_Pos
 (3U)

	)

6070 
	#TIM2_OR_TI4_RMP_Msk
 (0x3U << 
TIM2_OR_TI4_RMP_Pos
Ë

	)

6071 
	#TIM2_OR_TI4_RMP
 
TIM2_OR_TI4_RMP_Msk


	)

6072 
	#TIM2_OR_TI4_RMP_0
 (0x1U << 
TIM2_OR_TI4_RMP_Pos
Ë

	)

6073 
	#TIM2_OR_TI4_RMP_1
 (0x2U << 
TIM2_OR_TI4_RMP_Pos
Ë

	)

6075 
	#TIM21_OR_ETR_RMP_Pos
 (0U)

	)

6076 
	#TIM21_OR_ETR_RMP_Msk
 (0x3U << 
TIM21_OR_ETR_RMP_Pos
Ë

	)

6077 
	#TIM21_OR_ETR_RMP
 
TIM21_OR_ETR_RMP_Msk


	)

6078 
	#TIM21_OR_ETR_RMP_0
 (0x1U << 
TIM21_OR_ETR_RMP_Pos
Ë

	)

6079 
	#TIM21_OR_ETR_RMP_1
 (0x2U << 
TIM21_OR_ETR_RMP_Pos
Ë

	)

6080 
	#TIM21_OR_TI1_RMP_Pos
 (2U)

	)

6081 
	#TIM21_OR_TI1_RMP_Msk
 (0x7U << 
TIM21_OR_TI1_RMP_Pos
Ë

	)

6082 
	#TIM21_OR_TI1_RMP
 
TIM21_OR_TI1_RMP_Msk


	)

6083 
	#TIM21_OR_TI1_RMP_0
 (0x1U << 
TIM21_OR_TI1_RMP_Pos
Ë

	)

6084 
	#TIM21_OR_TI1_RMP_1
 (0x2U << 
TIM21_OR_TI1_RMP_Pos
Ë

	)

6085 
	#TIM21_OR_TI1_RMP_2
 (0x4U << 
TIM21_OR_TI1_RMP_Pos
Ë

	)

6086 
	#TIM21_OR_TI2_RMP_Pos
 (5U)

	)

6087 
	#TIM21_OR_TI2_RMP_Msk
 (0x1U << 
TIM21_OR_TI2_RMP_Pos
Ë

	)

6088 
	#TIM21_OR_TI2_RMP
 
TIM21_OR_TI2_RMP_Msk


	)

6090 
	#TIM22_OR_ETR_RMP_Pos
 (0U)

	)

6091 
	#TIM22_OR_ETR_RMP_Msk
 (0x3U << 
TIM22_OR_ETR_RMP_Pos
Ë

	)

6092 
	#TIM22_OR_ETR_RMP
 
TIM22_OR_ETR_RMP_Msk


	)

6093 
	#TIM22_OR_ETR_RMP_0
 (0x1U << 
TIM22_OR_ETR_RMP_Pos
Ë

	)

6094 
	#TIM22_OR_ETR_RMP_1
 (0x2U << 
TIM22_OR_ETR_RMP_Pos
Ë

	)

6095 
	#TIM22_OR_TI1_RMP_Pos
 (2U)

	)

6096 
	#TIM22_OR_TI1_RMP_Msk
 (0x3U << 
TIM22_OR_TI1_RMP_Pos
Ë

	)

6097 
	#TIM22_OR_TI1_RMP
 
TIM22_OR_TI1_RMP_Msk


	)

6098 
	#TIM22_OR_TI1_RMP_0
 (0x1U << 
TIM22_OR_TI1_RMP_Pos
Ë

	)

6099 
	#TIM22_OR_TI1_RMP_1
 (0x2U << 
TIM22_OR_TI1_RMP_Pos
Ë

	)

6108 
	#TSC_CR_TSCE_Pos
 (0U)

	)

6109 
	#TSC_CR_TSCE_Msk
 (0x1U << 
TSC_CR_TSCE_Pos
Ë

	)

6110 
	#TSC_CR_TSCE
 
TSC_CR_TSCE_Msk


	)

6111 
	#TSC_CR_START_Pos
 (1U)

	)

6112 
	#TSC_CR_START_Msk
 (0x1U << 
TSC_CR_START_Pos
Ë

	)

6113 
	#TSC_CR_START
 
TSC_CR_START_Msk


	)

6114 
	#TSC_CR_AM_Pos
 (2U)

	)

6115 
	#TSC_CR_AM_Msk
 (0x1U << 
TSC_CR_AM_Pos
Ë

	)

6116 
	#TSC_CR_AM
 
TSC_CR_AM_Msk


	)

6117 
	#TSC_CR_SYNCPOL_Pos
 (3U)

	)

6118 
	#TSC_CR_SYNCPOL_Msk
 (0x1U << 
TSC_CR_SYNCPOL_Pos
Ë

	)

6119 
	#TSC_CR_SYNCPOL
 
TSC_CR_SYNCPOL_Msk


	)

6120 
	#TSC_CR_IODEF_Pos
 (4U)

	)

6121 
	#TSC_CR_IODEF_Msk
 (0x1U << 
TSC_CR_IODEF_Pos
Ë

	)

6122 
	#TSC_CR_IODEF
 
TSC_CR_IODEF_Msk


	)

6124 
	#TSC_CR_MCV_Pos
 (5U)

	)

6125 
	#TSC_CR_MCV_Msk
 (0x7U << 
TSC_CR_MCV_Pos
Ë

	)

6126 
	#TSC_CR_MCV
 
TSC_CR_MCV_Msk


	)

6127 
	#TSC_CR_MCV_0
 (0x1U << 
TSC_CR_MCV_Pos
Ë

	)

6128 
	#TSC_CR_MCV_1
 (0x2U << 
TSC_CR_MCV_Pos
Ë

	)

6129 
	#TSC_CR_MCV_2
 (0x4U << 
TSC_CR_MCV_Pos
Ë

	)

6131 
	#TSC_CR_PGPSC_Pos
 (12U)

	)

6132 
	#TSC_CR_PGPSC_Msk
 (0x7U << 
TSC_CR_PGPSC_Pos
Ë

	)

6133 
	#TSC_CR_PGPSC
 
TSC_CR_PGPSC_Msk


	)

6134 
	#TSC_CR_PGPSC_0
 (0x1U << 
TSC_CR_PGPSC_Pos
Ë

	)

6135 
	#TSC_CR_PGPSC_1
 (0x2U << 
TSC_CR_PGPSC_Pos
Ë

	)

6136 
	#TSC_CR_PGPSC_2
 (0x4U << 
TSC_CR_PGPSC_Pos
Ë

	)

6138 
	#TSC_CR_SSPSC_Pos
 (15U)

	)

6139 
	#TSC_CR_SSPSC_Msk
 (0x1U << 
TSC_CR_SSPSC_Pos
Ë

	)

6140 
	#TSC_CR_SSPSC
 
TSC_CR_SSPSC_Msk


	)

6141 
	#TSC_CR_SSE_Pos
 (16U)

	)

6142 
	#TSC_CR_SSE_Msk
 (0x1U << 
TSC_CR_SSE_Pos
Ë

	)

6143 
	#TSC_CR_SSE
 
TSC_CR_SSE_Msk


	)

6145 
	#TSC_CR_SSD_Pos
 (17U)

	)

6146 
	#TSC_CR_SSD_Msk
 (0x7FU << 
TSC_CR_SSD_Pos
Ë

	)

6147 
	#TSC_CR_SSD
 
TSC_CR_SSD_Msk


	)

6148 
	#TSC_CR_SSD_0
 (0x01U << 
TSC_CR_SSD_Pos
Ë

	)

6149 
	#TSC_CR_SSD_1
 (0x02U << 
TSC_CR_SSD_Pos
Ë

	)

6150 
	#TSC_CR_SSD_2
 (0x04U << 
TSC_CR_SSD_Pos
Ë

	)

6151 
	#TSC_CR_SSD_3
 (0x08U << 
TSC_CR_SSD_Pos
Ë

	)

6152 
	#TSC_CR_SSD_4
 (0x10U << 
TSC_CR_SSD_Pos
Ë

	)

6153 
	#TSC_CR_SSD_5
 (0x20U << 
TSC_CR_SSD_Pos
Ë

	)

6154 
	#TSC_CR_SSD_6
 (0x40U << 
TSC_CR_SSD_Pos
Ë

	)

6156 
	#TSC_CR_CTPL_Pos
 (24U)

	)

6157 
	#TSC_CR_CTPL_Msk
 (0xFU << 
TSC_CR_CTPL_Pos
Ë

	)

6158 
	#TSC_CR_CTPL
 
TSC_CR_CTPL_Msk


	)

6159 
	#TSC_CR_CTPL_0
 (0x1U << 
TSC_CR_CTPL_Pos
Ë

	)

6160 
	#TSC_CR_CTPL_1
 (0x2U << 
TSC_CR_CTPL_Pos
Ë

	)

6161 
	#TSC_CR_CTPL_2
 (0x4U << 
TSC_CR_CTPL_Pos
Ë

	)

6162 
	#TSC_CR_CTPL_3
 (0x8U << 
TSC_CR_CTPL_Pos
Ë

	)

6164 
	#TSC_CR_CTPH_Pos
 (28U)

	)

6165 
	#TSC_CR_CTPH_Msk
 (0xFU << 
TSC_CR_CTPH_Pos
Ë

	)

6166 
	#TSC_CR_CTPH
 
TSC_CR_CTPH_Msk


	)

6167 
	#TSC_CR_CTPH_0
 (0x1U << 
TSC_CR_CTPH_Pos
Ë

	)

6168 
	#TSC_CR_CTPH_1
 (0x2U << 
TSC_CR_CTPH_Pos
Ë

	)

6169 
	#TSC_CR_CTPH_2
 (0x4U << 
TSC_CR_CTPH_Pos
Ë

	)

6170 
	#TSC_CR_CTPH_3
 (0x8U << 
TSC_CR_CTPH_Pos
Ë

	)

6173 
	#TSC_IER_EOAIE_Pos
 (0U)

	)

6174 
	#TSC_IER_EOAIE_Msk
 (0x1U << 
TSC_IER_EOAIE_Pos
Ë

	)

6175 
	#TSC_IER_EOAIE
 
TSC_IER_EOAIE_Msk


	)

6176 
	#TSC_IER_MCEIE_Pos
 (1U)

	)

6177 
	#TSC_IER_MCEIE_Msk
 (0x1U << 
TSC_IER_MCEIE_Pos
Ë

	)

6178 
	#TSC_IER_MCEIE
 
TSC_IER_MCEIE_Msk


	)

6181 
	#TSC_ICR_EOAIC_Pos
 (0U)

	)

6182 
	#TSC_ICR_EOAIC_Msk
 (0x1U << 
TSC_ICR_EOAIC_Pos
Ë

	)

6183 
	#TSC_ICR_EOAIC
 
TSC_ICR_EOAIC_Msk


	)

6184 
	#TSC_ICR_MCEIC_Pos
 (1U)

	)

6185 
	#TSC_ICR_MCEIC_Msk
 (0x1U << 
TSC_ICR_MCEIC_Pos
Ë

	)

6186 
	#TSC_ICR_MCEIC
 
TSC_ICR_MCEIC_Msk


	)

6189 
	#TSC_ISR_EOAF_Pos
 (0U)

	)

6190 
	#TSC_ISR_EOAF_Msk
 (0x1U << 
TSC_ISR_EOAF_Pos
Ë

	)

6191 
	#TSC_ISR_EOAF
 
TSC_ISR_EOAF_Msk


	)

6192 
	#TSC_ISR_MCEF_Pos
 (1U)

	)

6193 
	#TSC_ISR_MCEF_Msk
 (0x1U << 
TSC_ISR_MCEF_Pos
Ë

	)

6194 
	#TSC_ISR_MCEF
 
TSC_ISR_MCEF_Msk


	)

6197 
	#TSC_IOHCR_G1_IO1_Pos
 (0U)

	)

6198 
	#TSC_IOHCR_G1_IO1_Msk
 (0x1U << 
TSC_IOHCR_G1_IO1_Pos
Ë

	)

6199 
	#TSC_IOHCR_G1_IO1
 
TSC_IOHCR_G1_IO1_Msk


	)

6200 
	#TSC_IOHCR_G1_IO2_Pos
 (1U)

	)

6201 
	#TSC_IOHCR_G1_IO2_Msk
 (0x1U << 
TSC_IOHCR_G1_IO2_Pos
Ë

	)

6202 
	#TSC_IOHCR_G1_IO2
 
TSC_IOHCR_G1_IO2_Msk


	)

6203 
	#TSC_IOHCR_G1_IO3_Pos
 (2U)

	)

6204 
	#TSC_IOHCR_G1_IO3_Msk
 (0x1U << 
TSC_IOHCR_G1_IO3_Pos
Ë

	)

6205 
	#TSC_IOHCR_G1_IO3
 
TSC_IOHCR_G1_IO3_Msk


	)

6206 
	#TSC_IOHCR_G1_IO4_Pos
 (3U)

	)

6207 
	#TSC_IOHCR_G1_IO4_Msk
 (0x1U << 
TSC_IOHCR_G1_IO4_Pos
Ë

	)

6208 
	#TSC_IOHCR_G1_IO4
 
TSC_IOHCR_G1_IO4_Msk


	)

6209 
	#TSC_IOHCR_G2_IO1_Pos
 (4U)

	)

6210 
	#TSC_IOHCR_G2_IO1_Msk
 (0x1U << 
TSC_IOHCR_G2_IO1_Pos
Ë

	)

6211 
	#TSC_IOHCR_G2_IO1
 
TSC_IOHCR_G2_IO1_Msk


	)

6212 
	#TSC_IOHCR_G2_IO2_Pos
 (5U)

	)

6213 
	#TSC_IOHCR_G2_IO2_Msk
 (0x1U << 
TSC_IOHCR_G2_IO2_Pos
Ë

	)

6214 
	#TSC_IOHCR_G2_IO2
 
TSC_IOHCR_G2_IO2_Msk


	)

6215 
	#TSC_IOHCR_G2_IO3_Pos
 (6U)

	)

6216 
	#TSC_IOHCR_G2_IO3_Msk
 (0x1U << 
TSC_IOHCR_G2_IO3_Pos
Ë

	)

6217 
	#TSC_IOHCR_G2_IO3
 
TSC_IOHCR_G2_IO3_Msk


	)

6218 
	#TSC_IOHCR_G2_IO4_Pos
 (7U)

	)

6219 
	#TSC_IOHCR_G2_IO4_Msk
 (0x1U << 
TSC_IOHCR_G2_IO4_Pos
Ë

	)

6220 
	#TSC_IOHCR_G2_IO4
 
TSC_IOHCR_G2_IO4_Msk


	)

6221 
	#TSC_IOHCR_G3_IO1_Pos
 (8U)

	)

6222 
	#TSC_IOHCR_G3_IO1_Msk
 (0x1U << 
TSC_IOHCR_G3_IO1_Pos
Ë

	)

6223 
	#TSC_IOHCR_G3_IO1
 
TSC_IOHCR_G3_IO1_Msk


	)

6224 
	#TSC_IOHCR_G3_IO2_Pos
 (9U)

	)

6225 
	#TSC_IOHCR_G3_IO2_Msk
 (0x1U << 
TSC_IOHCR_G3_IO2_Pos
Ë

	)

6226 
	#TSC_IOHCR_G3_IO2
 
TSC_IOHCR_G3_IO2_Msk


	)

6227 
	#TSC_IOHCR_G3_IO3_Pos
 (10U)

	)

6228 
	#TSC_IOHCR_G3_IO3_Msk
 (0x1U << 
TSC_IOHCR_G3_IO3_Pos
Ë

	)

6229 
	#TSC_IOHCR_G3_IO3
 
TSC_IOHCR_G3_IO3_Msk


	)

6230 
	#TSC_IOHCR_G3_IO4_Pos
 (11U)

	)

6231 
	#TSC_IOHCR_G3_IO4_Msk
 (0x1U << 
TSC_IOHCR_G3_IO4_Pos
Ë

	)

6232 
	#TSC_IOHCR_G3_IO4
 
TSC_IOHCR_G3_IO4_Msk


	)

6233 
	#TSC_IOHCR_G4_IO1_Pos
 (12U)

	)

6234 
	#TSC_IOHCR_G4_IO1_Msk
 (0x1U << 
TSC_IOHCR_G4_IO1_Pos
Ë

	)

6235 
	#TSC_IOHCR_G4_IO1
 
TSC_IOHCR_G4_IO1_Msk


	)

6236 
	#TSC_IOHCR_G4_IO2_Pos
 (13U)

	)

6237 
	#TSC_IOHCR_G4_IO2_Msk
 (0x1U << 
TSC_IOHCR_G4_IO2_Pos
Ë

	)

6238 
	#TSC_IOHCR_G4_IO2
 
TSC_IOHCR_G4_IO2_Msk


	)

6239 
	#TSC_IOHCR_G4_IO3_Pos
 (14U)

	)

6240 
	#TSC_IOHCR_G4_IO3_Msk
 (0x1U << 
TSC_IOHCR_G4_IO3_Pos
Ë

	)

6241 
	#TSC_IOHCR_G4_IO3
 
TSC_IOHCR_G4_IO3_Msk


	)

6242 
	#TSC_IOHCR_G4_IO4_Pos
 (15U)

	)

6243 
	#TSC_IOHCR_G4_IO4_Msk
 (0x1U << 
TSC_IOHCR_G4_IO4_Pos
Ë

	)

6244 
	#TSC_IOHCR_G4_IO4
 
TSC_IOHCR_G4_IO4_Msk


	)

6245 
	#TSC_IOHCR_G5_IO1_Pos
 (16U)

	)

6246 
	#TSC_IOHCR_G5_IO1_Msk
 (0x1U << 
TSC_IOHCR_G5_IO1_Pos
Ë

	)

6247 
	#TSC_IOHCR_G5_IO1
 
TSC_IOHCR_G5_IO1_Msk


	)

6248 
	#TSC_IOHCR_G5_IO2_Pos
 (17U)

	)

6249 
	#TSC_IOHCR_G5_IO2_Msk
 (0x1U << 
TSC_IOHCR_G5_IO2_Pos
Ë

	)

6250 
	#TSC_IOHCR_G5_IO2
 
TSC_IOHCR_G5_IO2_Msk


	)

6251 
	#TSC_IOHCR_G5_IO3_Pos
 (18U)

	)

6252 
	#TSC_IOHCR_G5_IO3_Msk
 (0x1U << 
TSC_IOHCR_G5_IO3_Pos
Ë

	)

6253 
	#TSC_IOHCR_G5_IO3
 
TSC_IOHCR_G5_IO3_Msk


	)

6254 
	#TSC_IOHCR_G5_IO4_Pos
 (19U)

	)

6255 
	#TSC_IOHCR_G5_IO4_Msk
 (0x1U << 
TSC_IOHCR_G5_IO4_Pos
Ë

	)

6256 
	#TSC_IOHCR_G5_IO4
 
TSC_IOHCR_G5_IO4_Msk


	)

6257 
	#TSC_IOHCR_G6_IO1_Pos
 (20U)

	)

6258 
	#TSC_IOHCR_G6_IO1_Msk
 (0x1U << 
TSC_IOHCR_G6_IO1_Pos
Ë

	)

6259 
	#TSC_IOHCR_G6_IO1
 
TSC_IOHCR_G6_IO1_Msk


	)

6260 
	#TSC_IOHCR_G6_IO2_Pos
 (21U)

	)

6261 
	#TSC_IOHCR_G6_IO2_Msk
 (0x1U << 
TSC_IOHCR_G6_IO2_Pos
Ë

	)

6262 
	#TSC_IOHCR_G6_IO2
 
TSC_IOHCR_G6_IO2_Msk


	)

6263 
	#TSC_IOHCR_G6_IO3_Pos
 (22U)

	)

6264 
	#TSC_IOHCR_G6_IO3_Msk
 (0x1U << 
TSC_IOHCR_G6_IO3_Pos
Ë

	)

6265 
	#TSC_IOHCR_G6_IO3
 
TSC_IOHCR_G6_IO3_Msk


	)

6266 
	#TSC_IOHCR_G6_IO4_Pos
 (23U)

	)

6267 
	#TSC_IOHCR_G6_IO4_Msk
 (0x1U << 
TSC_IOHCR_G6_IO4_Pos
Ë

	)

6268 
	#TSC_IOHCR_G6_IO4
 
TSC_IOHCR_G6_IO4_Msk


	)

6269 
	#TSC_IOHCR_G7_IO1_Pos
 (24U)

	)

6270 
	#TSC_IOHCR_G7_IO1_Msk
 (0x1U << 
TSC_IOHCR_G7_IO1_Pos
Ë

	)

6271 
	#TSC_IOHCR_G7_IO1
 
TSC_IOHCR_G7_IO1_Msk


	)

6272 
	#TSC_IOHCR_G7_IO2_Pos
 (25U)

	)

6273 
	#TSC_IOHCR_G7_IO2_Msk
 (0x1U << 
TSC_IOHCR_G7_IO2_Pos
Ë

	)

6274 
	#TSC_IOHCR_G7_IO2
 
TSC_IOHCR_G7_IO2_Msk


	)

6275 
	#TSC_IOHCR_G7_IO3_Pos
 (26U)

	)

6276 
	#TSC_IOHCR_G7_IO3_Msk
 (0x1U << 
TSC_IOHCR_G7_IO3_Pos
Ë

	)

6277 
	#TSC_IOHCR_G7_IO3
 
TSC_IOHCR_G7_IO3_Msk


	)

6278 
	#TSC_IOHCR_G7_IO4_Pos
 (27U)

	)

6279 
	#TSC_IOHCR_G7_IO4_Msk
 (0x1U << 
TSC_IOHCR_G7_IO4_Pos
Ë

	)

6280 
	#TSC_IOHCR_G7_IO4
 
TSC_IOHCR_G7_IO4_Msk


	)

6281 
	#TSC_IOHCR_G8_IO1_Pos
 (28U)

	)

6282 
	#TSC_IOHCR_G8_IO1_Msk
 (0x1U << 
TSC_IOHCR_G8_IO1_Pos
Ë

	)

6283 
	#TSC_IOHCR_G8_IO1
 
TSC_IOHCR_G8_IO1_Msk


	)

6284 
	#TSC_IOHCR_G8_IO2_Pos
 (29U)

	)

6285 
	#TSC_IOHCR_G8_IO2_Msk
 (0x1U << 
TSC_IOHCR_G8_IO2_Pos
Ë

	)

6286 
	#TSC_IOHCR_G8_IO2
 
TSC_IOHCR_G8_IO2_Msk


	)

6287 
	#TSC_IOHCR_G8_IO3_Pos
 (30U)

	)

6288 
	#TSC_IOHCR_G8_IO3_Msk
 (0x1U << 
TSC_IOHCR_G8_IO3_Pos
Ë

	)

6289 
	#TSC_IOHCR_G8_IO3
 
TSC_IOHCR_G8_IO3_Msk


	)

6290 
	#TSC_IOHCR_G8_IO4_Pos
 (31U)

	)

6291 
	#TSC_IOHCR_G8_IO4_Msk
 (0x1U << 
TSC_IOHCR_G8_IO4_Pos
Ë

	)

6292 
	#TSC_IOHCR_G8_IO4
 
TSC_IOHCR_G8_IO4_Msk


	)

6295 
	#TSC_IOASCR_G1_IO1_Pos
 (0U)

	)

6296 
	#TSC_IOASCR_G1_IO1_Msk
 (0x1U << 
TSC_IOASCR_G1_IO1_Pos
Ë

	)

6297 
	#TSC_IOASCR_G1_IO1
 
TSC_IOASCR_G1_IO1_Msk


	)

6298 
	#TSC_IOASCR_G1_IO2_Pos
 (1U)

	)

6299 
	#TSC_IOASCR_G1_IO2_Msk
 (0x1U << 
TSC_IOASCR_G1_IO2_Pos
Ë

	)

6300 
	#TSC_IOASCR_G1_IO2
 
TSC_IOASCR_G1_IO2_Msk


	)

6301 
	#TSC_IOASCR_G1_IO3_Pos
 (2U)

	)

6302 
	#TSC_IOASCR_G1_IO3_Msk
 (0x1U << 
TSC_IOASCR_G1_IO3_Pos
Ë

	)

6303 
	#TSC_IOASCR_G1_IO3
 
TSC_IOASCR_G1_IO3_Msk


	)

6304 
	#TSC_IOASCR_G1_IO4_Pos
 (3U)

	)

6305 
	#TSC_IOASCR_G1_IO4_Msk
 (0x1U << 
TSC_IOASCR_G1_IO4_Pos
Ë

	)

6306 
	#TSC_IOASCR_G1_IO4
 
TSC_IOASCR_G1_IO4_Msk


	)

6307 
	#TSC_IOASCR_G2_IO1_Pos
 (4U)

	)

6308 
	#TSC_IOASCR_G2_IO1_Msk
 (0x1U << 
TSC_IOASCR_G2_IO1_Pos
Ë

	)

6309 
	#TSC_IOASCR_G2_IO1
 
TSC_IOASCR_G2_IO1_Msk


	)

6310 
	#TSC_IOASCR_G2_IO2_Pos
 (5U)

	)

6311 
	#TSC_IOASCR_G2_IO2_Msk
 (0x1U << 
TSC_IOASCR_G2_IO2_Pos
Ë

	)

6312 
	#TSC_IOASCR_G2_IO2
 
TSC_IOASCR_G2_IO2_Msk


	)

6313 
	#TSC_IOASCR_G2_IO3_Pos
 (6U)

	)

6314 
	#TSC_IOASCR_G2_IO3_Msk
 (0x1U << 
TSC_IOASCR_G2_IO3_Pos
Ë

	)

6315 
	#TSC_IOASCR_G2_IO3
 
TSC_IOASCR_G2_IO3_Msk


	)

6316 
	#TSC_IOASCR_G2_IO4_Pos
 (7U)

	)

6317 
	#TSC_IOASCR_G2_IO4_Msk
 (0x1U << 
TSC_IOASCR_G2_IO4_Pos
Ë

	)

6318 
	#TSC_IOASCR_G2_IO4
 
TSC_IOASCR_G2_IO4_Msk


	)

6319 
	#TSC_IOASCR_G3_IO1_Pos
 (8U)

	)

6320 
	#TSC_IOASCR_G3_IO1_Msk
 (0x1U << 
TSC_IOASCR_G3_IO1_Pos
Ë

	)

6321 
	#TSC_IOASCR_G3_IO1
 
TSC_IOASCR_G3_IO1_Msk


	)

6322 
	#TSC_IOASCR_G3_IO2_Pos
 (9U)

	)

6323 
	#TSC_IOASCR_G3_IO2_Msk
 (0x1U << 
TSC_IOASCR_G3_IO2_Pos
Ë

	)

6324 
	#TSC_IOASCR_G3_IO2
 
TSC_IOASCR_G3_IO2_Msk


	)

6325 
	#TSC_IOASCR_G3_IO3_Pos
 (10U)

	)

6326 
	#TSC_IOASCR_G3_IO3_Msk
 (0x1U << 
TSC_IOASCR_G3_IO3_Pos
Ë

	)

6327 
	#TSC_IOASCR_G3_IO3
 
TSC_IOASCR_G3_IO3_Msk


	)

6328 
	#TSC_IOASCR_G3_IO4_Pos
 (11U)

	)

6329 
	#TSC_IOASCR_G3_IO4_Msk
 (0x1U << 
TSC_IOASCR_G3_IO4_Pos
Ë

	)

6330 
	#TSC_IOASCR_G3_IO4
 
TSC_IOASCR_G3_IO4_Msk


	)

6331 
	#TSC_IOASCR_G4_IO1_Pos
 (12U)

	)

6332 
	#TSC_IOASCR_G4_IO1_Msk
 (0x1U << 
TSC_IOASCR_G4_IO1_Pos
Ë

	)

6333 
	#TSC_IOASCR_G4_IO1
 
TSC_IOASCR_G4_IO1_Msk


	)

6334 
	#TSC_IOASCR_G4_IO2_Pos
 (13U)

	)

6335 
	#TSC_IOASCR_G4_IO2_Msk
 (0x1U << 
TSC_IOASCR_G4_IO2_Pos
Ë

	)

6336 
	#TSC_IOASCR_G4_IO2
 
TSC_IOASCR_G4_IO2_Msk


	)

6337 
	#TSC_IOASCR_G4_IO3_Pos
 (14U)

	)

6338 
	#TSC_IOASCR_G4_IO3_Msk
 (0x1U << 
TSC_IOASCR_G4_IO3_Pos
Ë

	)

6339 
	#TSC_IOASCR_G4_IO3
 
TSC_IOASCR_G4_IO3_Msk


	)

6340 
	#TSC_IOASCR_G4_IO4_Pos
 (15U)

	)

6341 
	#TSC_IOASCR_G4_IO4_Msk
 (0x1U << 
TSC_IOASCR_G4_IO4_Pos
Ë

	)

6342 
	#TSC_IOASCR_G4_IO4
 
TSC_IOASCR_G4_IO4_Msk


	)

6343 
	#TSC_IOASCR_G5_IO1_Pos
 (16U)

	)

6344 
	#TSC_IOASCR_G5_IO1_Msk
 (0x1U << 
TSC_IOASCR_G5_IO1_Pos
Ë

	)

6345 
	#TSC_IOASCR_G5_IO1
 
TSC_IOASCR_G5_IO1_Msk


	)

6346 
	#TSC_IOASCR_G5_IO2_Pos
 (17U)

	)

6347 
	#TSC_IOASCR_G5_IO2_Msk
 (0x1U << 
TSC_IOASCR_G5_IO2_Pos
Ë

	)

6348 
	#TSC_IOASCR_G5_IO2
 
TSC_IOASCR_G5_IO2_Msk


	)

6349 
	#TSC_IOASCR_G5_IO3_Pos
 (18U)

	)

6350 
	#TSC_IOASCR_G5_IO3_Msk
 (0x1U << 
TSC_IOASCR_G5_IO3_Pos
Ë

	)

6351 
	#TSC_IOASCR_G5_IO3
 
TSC_IOASCR_G5_IO3_Msk


	)

6352 
	#TSC_IOASCR_G5_IO4_Pos
 (19U)

	)

6353 
	#TSC_IOASCR_G5_IO4_Msk
 (0x1U << 
TSC_IOASCR_G5_IO4_Pos
Ë

	)

6354 
	#TSC_IOASCR_G5_IO4
 
TSC_IOASCR_G5_IO4_Msk


	)

6355 
	#TSC_IOASCR_G6_IO1_Pos
 (20U)

	)

6356 
	#TSC_IOASCR_G6_IO1_Msk
 (0x1U << 
TSC_IOASCR_G6_IO1_Pos
Ë

	)

6357 
	#TSC_IOASCR_G6_IO1
 
TSC_IOASCR_G6_IO1_Msk


	)

6358 
	#TSC_IOASCR_G6_IO2_Pos
 (21U)

	)

6359 
	#TSC_IOASCR_G6_IO2_Msk
 (0x1U << 
TSC_IOASCR_G6_IO2_Pos
Ë

	)

6360 
	#TSC_IOASCR_G6_IO2
 
TSC_IOASCR_G6_IO2_Msk


	)

6361 
	#TSC_IOASCR_G6_IO3_Pos
 (22U)

	)

6362 
	#TSC_IOASCR_G6_IO3_Msk
 (0x1U << 
TSC_IOASCR_G6_IO3_Pos
Ë

	)

6363 
	#TSC_IOASCR_G6_IO3
 
TSC_IOASCR_G6_IO3_Msk


	)

6364 
	#TSC_IOASCR_G6_IO4_Pos
 (23U)

	)

6365 
	#TSC_IOASCR_G6_IO4_Msk
 (0x1U << 
TSC_IOASCR_G6_IO4_Pos
Ë

	)

6366 
	#TSC_IOASCR_G6_IO4
 
TSC_IOASCR_G6_IO4_Msk


	)

6367 
	#TSC_IOASCR_G7_IO1_Pos
 (24U)

	)

6368 
	#TSC_IOASCR_G7_IO1_Msk
 (0x1U << 
TSC_IOASCR_G7_IO1_Pos
Ë

	)

6369 
	#TSC_IOASCR_G7_IO1
 
TSC_IOASCR_G7_IO1_Msk


	)

6370 
	#TSC_IOASCR_G7_IO2_Pos
 (25U)

	)

6371 
	#TSC_IOASCR_G7_IO2_Msk
 (0x1U << 
TSC_IOASCR_G7_IO2_Pos
Ë

	)

6372 
	#TSC_IOASCR_G7_IO2
 
TSC_IOASCR_G7_IO2_Msk


	)

6373 
	#TSC_IOASCR_G7_IO3_Pos
 (26U)

	)

6374 
	#TSC_IOASCR_G7_IO3_Msk
 (0x1U << 
TSC_IOASCR_G7_IO3_Pos
Ë

	)

6375 
	#TSC_IOASCR_G7_IO3
 
TSC_IOASCR_G7_IO3_Msk


	)

6376 
	#TSC_IOASCR_G7_IO4_Pos
 (27U)

	)

6377 
	#TSC_IOASCR_G7_IO4_Msk
 (0x1U << 
TSC_IOASCR_G7_IO4_Pos
Ë

	)

6378 
	#TSC_IOASCR_G7_IO4
 
TSC_IOASCR_G7_IO4_Msk


	)

6379 
	#TSC_IOASCR_G8_IO1_Pos
 (28U)

	)

6380 
	#TSC_IOASCR_G8_IO1_Msk
 (0x1U << 
TSC_IOASCR_G8_IO1_Pos
Ë

	)

6381 
	#TSC_IOASCR_G8_IO1
 
TSC_IOASCR_G8_IO1_Msk


	)

6382 
	#TSC_IOASCR_G8_IO2_Pos
 (29U)

	)

6383 
	#TSC_IOASCR_G8_IO2_Msk
 (0x1U << 
TSC_IOASCR_G8_IO2_Pos
Ë

	)

6384 
	#TSC_IOASCR_G8_IO2
 
TSC_IOASCR_G8_IO2_Msk


	)

6385 
	#TSC_IOASCR_G8_IO3_Pos
 (30U)

	)

6386 
	#TSC_IOASCR_G8_IO3_Msk
 (0x1U << 
TSC_IOASCR_G8_IO3_Pos
Ë

	)

6387 
	#TSC_IOASCR_G8_IO3
 
TSC_IOASCR_G8_IO3_Msk


	)

6388 
	#TSC_IOASCR_G8_IO4_Pos
 (31U)

	)

6389 
	#TSC_IOASCR_G8_IO4_Msk
 (0x1U << 
TSC_IOASCR_G8_IO4_Pos
Ë

	)

6390 
	#TSC_IOASCR_G8_IO4
 
TSC_IOASCR_G8_IO4_Msk


	)

6393 
	#TSC_IOSCR_G1_IO1_Pos
 (0U)

	)

6394 
	#TSC_IOSCR_G1_IO1_Msk
 (0x1U << 
TSC_IOSCR_G1_IO1_Pos
Ë

	)

6395 
	#TSC_IOSCR_G1_IO1
 
TSC_IOSCR_G1_IO1_Msk


	)

6396 
	#TSC_IOSCR_G1_IO2_Pos
 (1U)

	)

6397 
	#TSC_IOSCR_G1_IO2_Msk
 (0x1U << 
TSC_IOSCR_G1_IO2_Pos
Ë

	)

6398 
	#TSC_IOSCR_G1_IO2
 
TSC_IOSCR_G1_IO2_Msk


	)

6399 
	#TSC_IOSCR_G1_IO3_Pos
 (2U)

	)

6400 
	#TSC_IOSCR_G1_IO3_Msk
 (0x1U << 
TSC_IOSCR_G1_IO3_Pos
Ë

	)

6401 
	#TSC_IOSCR_G1_IO3
 
TSC_IOSCR_G1_IO3_Msk


	)

6402 
	#TSC_IOSCR_G1_IO4_Pos
 (3U)

	)

6403 
	#TSC_IOSCR_G1_IO4_Msk
 (0x1U << 
TSC_IOSCR_G1_IO4_Pos
Ë

	)

6404 
	#TSC_IOSCR_G1_IO4
 
TSC_IOSCR_G1_IO4_Msk


	)

6405 
	#TSC_IOSCR_G2_IO1_Pos
 (4U)

	)

6406 
	#TSC_IOSCR_G2_IO1_Msk
 (0x1U << 
TSC_IOSCR_G2_IO1_Pos
Ë

	)

6407 
	#TSC_IOSCR_G2_IO1
 
TSC_IOSCR_G2_IO1_Msk


	)

6408 
	#TSC_IOSCR_G2_IO2_Pos
 (5U)

	)

6409 
	#TSC_IOSCR_G2_IO2_Msk
 (0x1U << 
TSC_IOSCR_G2_IO2_Pos
Ë

	)

6410 
	#TSC_IOSCR_G2_IO2
 
TSC_IOSCR_G2_IO2_Msk


	)

6411 
	#TSC_IOSCR_G2_IO3_Pos
 (6U)

	)

6412 
	#TSC_IOSCR_G2_IO3_Msk
 (0x1U << 
TSC_IOSCR_G2_IO3_Pos
Ë

	)

6413 
	#TSC_IOSCR_G2_IO3
 
TSC_IOSCR_G2_IO3_Msk


	)

6414 
	#TSC_IOSCR_G2_IO4_Pos
 (7U)

	)

6415 
	#TSC_IOSCR_G2_IO4_Msk
 (0x1U << 
TSC_IOSCR_G2_IO4_Pos
Ë

	)

6416 
	#TSC_IOSCR_G2_IO4
 
TSC_IOSCR_G2_IO4_Msk


	)

6417 
	#TSC_IOSCR_G3_IO1_Pos
 (8U)

	)

6418 
	#TSC_IOSCR_G3_IO1_Msk
 (0x1U << 
TSC_IOSCR_G3_IO1_Pos
Ë

	)

6419 
	#TSC_IOSCR_G3_IO1
 
TSC_IOSCR_G3_IO1_Msk


	)

6420 
	#TSC_IOSCR_G3_IO2_Pos
 (9U)

	)

6421 
	#TSC_IOSCR_G3_IO2_Msk
 (0x1U << 
TSC_IOSCR_G3_IO2_Pos
Ë

	)

6422 
	#TSC_IOSCR_G3_IO2
 
TSC_IOSCR_G3_IO2_Msk


	)

6423 
	#TSC_IOSCR_G3_IO3_Pos
 (10U)

	)

6424 
	#TSC_IOSCR_G3_IO3_Msk
 (0x1U << 
TSC_IOSCR_G3_IO3_Pos
Ë

	)

6425 
	#TSC_IOSCR_G3_IO3
 
TSC_IOSCR_G3_IO3_Msk


	)

6426 
	#TSC_IOSCR_G3_IO4_Pos
 (11U)

	)

6427 
	#TSC_IOSCR_G3_IO4_Msk
 (0x1U << 
TSC_IOSCR_G3_IO4_Pos
Ë

	)

6428 
	#TSC_IOSCR_G3_IO4
 
TSC_IOSCR_G3_IO4_Msk


	)

6429 
	#TSC_IOSCR_G4_IO1_Pos
 (12U)

	)

6430 
	#TSC_IOSCR_G4_IO1_Msk
 (0x1U << 
TSC_IOSCR_G4_IO1_Pos
Ë

	)

6431 
	#TSC_IOSCR_G4_IO1
 
TSC_IOSCR_G4_IO1_Msk


	)

6432 
	#TSC_IOSCR_G4_IO2_Pos
 (13U)

	)

6433 
	#TSC_IOSCR_G4_IO2_Msk
 (0x1U << 
TSC_IOSCR_G4_IO2_Pos
Ë

	)

6434 
	#TSC_IOSCR_G4_IO2
 
TSC_IOSCR_G4_IO2_Msk


	)

6435 
	#TSC_IOSCR_G4_IO3_Pos
 (14U)

	)

6436 
	#TSC_IOSCR_G4_IO3_Msk
 (0x1U << 
TSC_IOSCR_G4_IO3_Pos
Ë

	)

6437 
	#TSC_IOSCR_G4_IO3
 
TSC_IOSCR_G4_IO3_Msk


	)

6438 
	#TSC_IOSCR_G4_IO4_Pos
 (15U)

	)

6439 
	#TSC_IOSCR_G4_IO4_Msk
 (0x1U << 
TSC_IOSCR_G4_IO4_Pos
Ë

	)

6440 
	#TSC_IOSCR_G4_IO4
 
TSC_IOSCR_G4_IO4_Msk


	)

6441 
	#TSC_IOSCR_G5_IO1_Pos
 (16U)

	)

6442 
	#TSC_IOSCR_G5_IO1_Msk
 (0x1U << 
TSC_IOSCR_G5_IO1_Pos
Ë

	)

6443 
	#TSC_IOSCR_G5_IO1
 
TSC_IOSCR_G5_IO1_Msk


	)

6444 
	#TSC_IOSCR_G5_IO2_Pos
 (17U)

	)

6445 
	#TSC_IOSCR_G5_IO2_Msk
 (0x1U << 
TSC_IOSCR_G5_IO2_Pos
Ë

	)

6446 
	#TSC_IOSCR_G5_IO2
 
TSC_IOSCR_G5_IO2_Msk


	)

6447 
	#TSC_IOSCR_G5_IO3_Pos
 (18U)

	)

6448 
	#TSC_IOSCR_G5_IO3_Msk
 (0x1U << 
TSC_IOSCR_G5_IO3_Pos
Ë

	)

6449 
	#TSC_IOSCR_G5_IO3
 
TSC_IOSCR_G5_IO3_Msk


	)

6450 
	#TSC_IOSCR_G5_IO4_Pos
 (19U)

	)

6451 
	#TSC_IOSCR_G5_IO4_Msk
 (0x1U << 
TSC_IOSCR_G5_IO4_Pos
Ë

	)

6452 
	#TSC_IOSCR_G5_IO4
 
TSC_IOSCR_G5_IO4_Msk


	)

6453 
	#TSC_IOSCR_G6_IO1_Pos
 (20U)

	)

6454 
	#TSC_IOSCR_G6_IO1_Msk
 (0x1U << 
TSC_IOSCR_G6_IO1_Pos
Ë

	)

6455 
	#TSC_IOSCR_G6_IO1
 
TSC_IOSCR_G6_IO1_Msk


	)

6456 
	#TSC_IOSCR_G6_IO2_Pos
 (21U)

	)

6457 
	#TSC_IOSCR_G6_IO2_Msk
 (0x1U << 
TSC_IOSCR_G6_IO2_Pos
Ë

	)

6458 
	#TSC_IOSCR_G6_IO2
 
TSC_IOSCR_G6_IO2_Msk


	)

6459 
	#TSC_IOSCR_G6_IO3_Pos
 (22U)

	)

6460 
	#TSC_IOSCR_G6_IO3_Msk
 (0x1U << 
TSC_IOSCR_G6_IO3_Pos
Ë

	)

6461 
	#TSC_IOSCR_G6_IO3
 
TSC_IOSCR_G6_IO3_Msk


	)

6462 
	#TSC_IOSCR_G6_IO4_Pos
 (23U)

	)

6463 
	#TSC_IOSCR_G6_IO4_Msk
 (0x1U << 
TSC_IOSCR_G6_IO4_Pos
Ë

	)

6464 
	#TSC_IOSCR_G6_IO4
 
TSC_IOSCR_G6_IO4_Msk


	)

6465 
	#TSC_IOSCR_G7_IO1_Pos
 (24U)

	)

6466 
	#TSC_IOSCR_G7_IO1_Msk
 (0x1U << 
TSC_IOSCR_G7_IO1_Pos
Ë

	)

6467 
	#TSC_IOSCR_G7_IO1
 
TSC_IOSCR_G7_IO1_Msk


	)

6468 
	#TSC_IOSCR_G7_IO2_Pos
 (25U)

	)

6469 
	#TSC_IOSCR_G7_IO2_Msk
 (0x1U << 
TSC_IOSCR_G7_IO2_Pos
Ë

	)

6470 
	#TSC_IOSCR_G7_IO2
 
TSC_IOSCR_G7_IO2_Msk


	)

6471 
	#TSC_IOSCR_G7_IO3_Pos
 (26U)

	)

6472 
	#TSC_IOSCR_G7_IO3_Msk
 (0x1U << 
TSC_IOSCR_G7_IO3_Pos
Ë

	)

6473 
	#TSC_IOSCR_G7_IO3
 
TSC_IOSCR_G7_IO3_Msk


	)

6474 
	#TSC_IOSCR_G7_IO4_Pos
 (27U)

	)

6475 
	#TSC_IOSCR_G7_IO4_Msk
 (0x1U << 
TSC_IOSCR_G7_IO4_Pos
Ë

	)

6476 
	#TSC_IOSCR_G7_IO4
 
TSC_IOSCR_G7_IO4_Msk


	)

6477 
	#TSC_IOSCR_G8_IO1_Pos
 (28U)

	)

6478 
	#TSC_IOSCR_G8_IO1_Msk
 (0x1U << 
TSC_IOSCR_G8_IO1_Pos
Ë

	)

6479 
	#TSC_IOSCR_G8_IO1
 
TSC_IOSCR_G8_IO1_Msk


	)

6480 
	#TSC_IOSCR_G8_IO2_Pos
 (29U)

	)

6481 
	#TSC_IOSCR_G8_IO2_Msk
 (0x1U << 
TSC_IOSCR_G8_IO2_Pos
Ë

	)

6482 
	#TSC_IOSCR_G8_IO2
 
TSC_IOSCR_G8_IO2_Msk


	)

6483 
	#TSC_IOSCR_G8_IO3_Pos
 (30U)

	)

6484 
	#TSC_IOSCR_G8_IO3_Msk
 (0x1U << 
TSC_IOSCR_G8_IO3_Pos
Ë

	)

6485 
	#TSC_IOSCR_G8_IO3
 
TSC_IOSCR_G8_IO3_Msk


	)

6486 
	#TSC_IOSCR_G8_IO4_Pos
 (31U)

	)

6487 
	#TSC_IOSCR_G8_IO4_Msk
 (0x1U << 
TSC_IOSCR_G8_IO4_Pos
Ë

	)

6488 
	#TSC_IOSCR_G8_IO4
 
TSC_IOSCR_G8_IO4_Msk


	)

6491 
	#TSC_IOCCR_G1_IO1_Pos
 (0U)

	)

6492 
	#TSC_IOCCR_G1_IO1_Msk
 (0x1U << 
TSC_IOCCR_G1_IO1_Pos
Ë

	)

6493 
	#TSC_IOCCR_G1_IO1
 
TSC_IOCCR_G1_IO1_Msk


	)

6494 
	#TSC_IOCCR_G1_IO2_Pos
 (1U)

	)

6495 
	#TSC_IOCCR_G1_IO2_Msk
 (0x1U << 
TSC_IOCCR_G1_IO2_Pos
Ë

	)

6496 
	#TSC_IOCCR_G1_IO2
 
TSC_IOCCR_G1_IO2_Msk


	)

6497 
	#TSC_IOCCR_G1_IO3_Pos
 (2U)

	)

6498 
	#TSC_IOCCR_G1_IO3_Msk
 (0x1U << 
TSC_IOCCR_G1_IO3_Pos
Ë

	)

6499 
	#TSC_IOCCR_G1_IO3
 
TSC_IOCCR_G1_IO3_Msk


	)

6500 
	#TSC_IOCCR_G1_IO4_Pos
 (3U)

	)

6501 
	#TSC_IOCCR_G1_IO4_Msk
 (0x1U << 
TSC_IOCCR_G1_IO4_Pos
Ë

	)

6502 
	#TSC_IOCCR_G1_IO4
 
TSC_IOCCR_G1_IO4_Msk


	)

6503 
	#TSC_IOCCR_G2_IO1_Pos
 (4U)

	)

6504 
	#TSC_IOCCR_G2_IO1_Msk
 (0x1U << 
TSC_IOCCR_G2_IO1_Pos
Ë

	)

6505 
	#TSC_IOCCR_G2_IO1
 
TSC_IOCCR_G2_IO1_Msk


	)

6506 
	#TSC_IOCCR_G2_IO2_Pos
 (5U)

	)

6507 
	#TSC_IOCCR_G2_IO2_Msk
 (0x1U << 
TSC_IOCCR_G2_IO2_Pos
Ë

	)

6508 
	#TSC_IOCCR_G2_IO2
 
TSC_IOCCR_G2_IO2_Msk


	)

6509 
	#TSC_IOCCR_G2_IO3_Pos
 (6U)

	)

6510 
	#TSC_IOCCR_G2_IO3_Msk
 (0x1U << 
TSC_IOCCR_G2_IO3_Pos
Ë

	)

6511 
	#TSC_IOCCR_G2_IO3
 
TSC_IOCCR_G2_IO3_Msk


	)

6512 
	#TSC_IOCCR_G2_IO4_Pos
 (7U)

	)

6513 
	#TSC_IOCCR_G2_IO4_Msk
 (0x1U << 
TSC_IOCCR_G2_IO4_Pos
Ë

	)

6514 
	#TSC_IOCCR_G2_IO4
 
TSC_IOCCR_G2_IO4_Msk


	)

6515 
	#TSC_IOCCR_G3_IO1_Pos
 (8U)

	)

6516 
	#TSC_IOCCR_G3_IO1_Msk
 (0x1U << 
TSC_IOCCR_G3_IO1_Pos
Ë

	)

6517 
	#TSC_IOCCR_G3_IO1
 
TSC_IOCCR_G3_IO1_Msk


	)

6518 
	#TSC_IOCCR_G3_IO2_Pos
 (9U)

	)

6519 
	#TSC_IOCCR_G3_IO2_Msk
 (0x1U << 
TSC_IOCCR_G3_IO2_Pos
Ë

	)

6520 
	#TSC_IOCCR_G3_IO2
 
TSC_IOCCR_G3_IO2_Msk


	)

6521 
	#TSC_IOCCR_G3_IO3_Pos
 (10U)

	)

6522 
	#TSC_IOCCR_G3_IO3_Msk
 (0x1U << 
TSC_IOCCR_G3_IO3_Pos
Ë

	)

6523 
	#TSC_IOCCR_G3_IO3
 
TSC_IOCCR_G3_IO3_Msk


	)

6524 
	#TSC_IOCCR_G3_IO4_Pos
 (11U)

	)

6525 
	#TSC_IOCCR_G3_IO4_Msk
 (0x1U << 
TSC_IOCCR_G3_IO4_Pos
Ë

	)

6526 
	#TSC_IOCCR_G3_IO4
 
TSC_IOCCR_G3_IO4_Msk


	)

6527 
	#TSC_IOCCR_G4_IO1_Pos
 (12U)

	)

6528 
	#TSC_IOCCR_G4_IO1_Msk
 (0x1U << 
TSC_IOCCR_G4_IO1_Pos
Ë

	)

6529 
	#TSC_IOCCR_G4_IO1
 
TSC_IOCCR_G4_IO1_Msk


	)

6530 
	#TSC_IOCCR_G4_IO2_Pos
 (13U)

	)

6531 
	#TSC_IOCCR_G4_IO2_Msk
 (0x1U << 
TSC_IOCCR_G4_IO2_Pos
Ë

	)

6532 
	#TSC_IOCCR_G4_IO2
 
TSC_IOCCR_G4_IO2_Msk


	)

6533 
	#TSC_IOCCR_G4_IO3_Pos
 (14U)

	)

6534 
	#TSC_IOCCR_G4_IO3_Msk
 (0x1U << 
TSC_IOCCR_G4_IO3_Pos
Ë

	)

6535 
	#TSC_IOCCR_G4_IO3
 
TSC_IOCCR_G4_IO3_Msk


	)

6536 
	#TSC_IOCCR_G4_IO4_Pos
 (15U)

	)

6537 
	#TSC_IOCCR_G4_IO4_Msk
 (0x1U << 
TSC_IOCCR_G4_IO4_Pos
Ë

	)

6538 
	#TSC_IOCCR_G4_IO4
 
TSC_IOCCR_G4_IO4_Msk


	)

6539 
	#TSC_IOCCR_G5_IO1_Pos
 (16U)

	)

6540 
	#TSC_IOCCR_G5_IO1_Msk
 (0x1U << 
TSC_IOCCR_G5_IO1_Pos
Ë

	)

6541 
	#TSC_IOCCR_G5_IO1
 
TSC_IOCCR_G5_IO1_Msk


	)

6542 
	#TSC_IOCCR_G5_IO2_Pos
 (17U)

	)

6543 
	#TSC_IOCCR_G5_IO2_Msk
 (0x1U << 
TSC_IOCCR_G5_IO2_Pos
Ë

	)

6544 
	#TSC_IOCCR_G5_IO2
 
TSC_IOCCR_G5_IO2_Msk


	)

6545 
	#TSC_IOCCR_G5_IO3_Pos
 (18U)

	)

6546 
	#TSC_IOCCR_G5_IO3_Msk
 (0x1U << 
TSC_IOCCR_G5_IO3_Pos
Ë

	)

6547 
	#TSC_IOCCR_G5_IO3
 
TSC_IOCCR_G5_IO3_Msk


	)

6548 
	#TSC_IOCCR_G5_IO4_Pos
 (19U)

	)

6549 
	#TSC_IOCCR_G5_IO4_Msk
 (0x1U << 
TSC_IOCCR_G5_IO4_Pos
Ë

	)

6550 
	#TSC_IOCCR_G5_IO4
 
TSC_IOCCR_G5_IO4_Msk


	)

6551 
	#TSC_IOCCR_G6_IO1_Pos
 (20U)

	)

6552 
	#TSC_IOCCR_G6_IO1_Msk
 (0x1U << 
TSC_IOCCR_G6_IO1_Pos
Ë

	)

6553 
	#TSC_IOCCR_G6_IO1
 
TSC_IOCCR_G6_IO1_Msk


	)

6554 
	#TSC_IOCCR_G6_IO2_Pos
 (21U)

	)

6555 
	#TSC_IOCCR_G6_IO2_Msk
 (0x1U << 
TSC_IOCCR_G6_IO2_Pos
Ë

	)

6556 
	#TSC_IOCCR_G6_IO2
 
TSC_IOCCR_G6_IO2_Msk


	)

6557 
	#TSC_IOCCR_G6_IO3_Pos
 (22U)

	)

6558 
	#TSC_IOCCR_G6_IO3_Msk
 (0x1U << 
TSC_IOCCR_G6_IO3_Pos
Ë

	)

6559 
	#TSC_IOCCR_G6_IO3
 
TSC_IOCCR_G6_IO3_Msk


	)

6560 
	#TSC_IOCCR_G6_IO4_Pos
 (23U)

	)

6561 
	#TSC_IOCCR_G6_IO4_Msk
 (0x1U << 
TSC_IOCCR_G6_IO4_Pos
Ë

	)

6562 
	#TSC_IOCCR_G6_IO4
 
TSC_IOCCR_G6_IO4_Msk


	)

6563 
	#TSC_IOCCR_G7_IO1_Pos
 (24U)

	)

6564 
	#TSC_IOCCR_G7_IO1_Msk
 (0x1U << 
TSC_IOCCR_G7_IO1_Pos
Ë

	)

6565 
	#TSC_IOCCR_G7_IO1
 
TSC_IOCCR_G7_IO1_Msk


	)

6566 
	#TSC_IOCCR_G7_IO2_Pos
 (25U)

	)

6567 
	#TSC_IOCCR_G7_IO2_Msk
 (0x1U << 
TSC_IOCCR_G7_IO2_Pos
Ë

	)

6568 
	#TSC_IOCCR_G7_IO2
 
TSC_IOCCR_G7_IO2_Msk


	)

6569 
	#TSC_IOCCR_G7_IO3_Pos
 (26U)

	)

6570 
	#TSC_IOCCR_G7_IO3_Msk
 (0x1U << 
TSC_IOCCR_G7_IO3_Pos
Ë

	)

6571 
	#TSC_IOCCR_G7_IO3
 
TSC_IOCCR_G7_IO3_Msk


	)

6572 
	#TSC_IOCCR_G7_IO4_Pos
 (27U)

	)

6573 
	#TSC_IOCCR_G7_IO4_Msk
 (0x1U << 
TSC_IOCCR_G7_IO4_Pos
Ë

	)

6574 
	#TSC_IOCCR_G7_IO4
 
TSC_IOCCR_G7_IO4_Msk


	)

6575 
	#TSC_IOCCR_G8_IO1_Pos
 (28U)

	)

6576 
	#TSC_IOCCR_G8_IO1_Msk
 (0x1U << 
TSC_IOCCR_G8_IO1_Pos
Ë

	)

6577 
	#TSC_IOCCR_G8_IO1
 
TSC_IOCCR_G8_IO1_Msk


	)

6578 
	#TSC_IOCCR_G8_IO2_Pos
 (29U)

	)

6579 
	#TSC_IOCCR_G8_IO2_Msk
 (0x1U << 
TSC_IOCCR_G8_IO2_Pos
Ë

	)

6580 
	#TSC_IOCCR_G8_IO2
 
TSC_IOCCR_G8_IO2_Msk


	)

6581 
	#TSC_IOCCR_G8_IO3_Pos
 (30U)

	)

6582 
	#TSC_IOCCR_G8_IO3_Msk
 (0x1U << 
TSC_IOCCR_G8_IO3_Pos
Ë

	)

6583 
	#TSC_IOCCR_G8_IO3
 
TSC_IOCCR_G8_IO3_Msk


	)

6584 
	#TSC_IOCCR_G8_IO4_Pos
 (31U)

	)

6585 
	#TSC_IOCCR_G8_IO4_Msk
 (0x1U << 
TSC_IOCCR_G8_IO4_Pos
Ë

	)

6586 
	#TSC_IOCCR_G8_IO4
 
TSC_IOCCR_G8_IO4_Msk


	)

6589 
	#TSC_IOGCSR_G1E_Pos
 (0U)

	)

6590 
	#TSC_IOGCSR_G1E_Msk
 (0x1U << 
TSC_IOGCSR_G1E_Pos
Ë

	)

6591 
	#TSC_IOGCSR_G1E
 
TSC_IOGCSR_G1E_Msk


	)

6592 
	#TSC_IOGCSR_G2E_Pos
 (1U)

	)

6593 
	#TSC_IOGCSR_G2E_Msk
 (0x1U << 
TSC_IOGCSR_G2E_Pos
Ë

	)

6594 
	#TSC_IOGCSR_G2E
 
TSC_IOGCSR_G2E_Msk


	)

6595 
	#TSC_IOGCSR_G3E_Pos
 (2U)

	)

6596 
	#TSC_IOGCSR_G3E_Msk
 (0x1U << 
TSC_IOGCSR_G3E_Pos
Ë

	)

6597 
	#TSC_IOGCSR_G3E
 
TSC_IOGCSR_G3E_Msk


	)

6598 
	#TSC_IOGCSR_G4E_Pos
 (3U)

	)

6599 
	#TSC_IOGCSR_G4E_Msk
 (0x1U << 
TSC_IOGCSR_G4E_Pos
Ë

	)

6600 
	#TSC_IOGCSR_G4E
 
TSC_IOGCSR_G4E_Msk


	)

6601 
	#TSC_IOGCSR_G5E_Pos
 (4U)

	)

6602 
	#TSC_IOGCSR_G5E_Msk
 (0x1U << 
TSC_IOGCSR_G5E_Pos
Ë

	)

6603 
	#TSC_IOGCSR_G5E
 
TSC_IOGCSR_G5E_Msk


	)

6604 
	#TSC_IOGCSR_G6E_Pos
 (5U)

	)

6605 
	#TSC_IOGCSR_G6E_Msk
 (0x1U << 
TSC_IOGCSR_G6E_Pos
Ë

	)

6606 
	#TSC_IOGCSR_G6E
 
TSC_IOGCSR_G6E_Msk


	)

6607 
	#TSC_IOGCSR_G7E_Pos
 (6U)

	)

6608 
	#TSC_IOGCSR_G7E_Msk
 (0x1U << 
TSC_IOGCSR_G7E_Pos
Ë

	)

6609 
	#TSC_IOGCSR_G7E
 
TSC_IOGCSR_G7E_Msk


	)

6610 
	#TSC_IOGCSR_G8E_Pos
 (7U)

	)

6611 
	#TSC_IOGCSR_G8E_Msk
 (0x1U << 
TSC_IOGCSR_G8E_Pos
Ë

	)

6612 
	#TSC_IOGCSR_G8E
 
TSC_IOGCSR_G8E_Msk


	)

6613 
	#TSC_IOGCSR_G1S_Pos
 (16U)

	)

6614 
	#TSC_IOGCSR_G1S_Msk
 (0x1U << 
TSC_IOGCSR_G1S_Pos
Ë

	)

6615 
	#TSC_IOGCSR_G1S
 
TSC_IOGCSR_G1S_Msk


	)

6616 
	#TSC_IOGCSR_G2S_Pos
 (17U)

	)

6617 
	#TSC_IOGCSR_G2S_Msk
 (0x1U << 
TSC_IOGCSR_G2S_Pos
Ë

	)

6618 
	#TSC_IOGCSR_G2S
 
TSC_IOGCSR_G2S_Msk


	)

6619 
	#TSC_IOGCSR_G3S_Pos
 (18U)

	)

6620 
	#TSC_IOGCSR_G3S_Msk
 (0x1U << 
TSC_IOGCSR_G3S_Pos
Ë

	)

6621 
	#TSC_IOGCSR_G3S
 
TSC_IOGCSR_G3S_Msk


	)

6622 
	#TSC_IOGCSR_G4S_Pos
 (19U)

	)

6623 
	#TSC_IOGCSR_G4S_Msk
 (0x1U << 
TSC_IOGCSR_G4S_Pos
Ë

	)

6624 
	#TSC_IOGCSR_G4S
 
TSC_IOGCSR_G4S_Msk


	)

6625 
	#TSC_IOGCSR_G5S_Pos
 (20U)

	)

6626 
	#TSC_IOGCSR_G5S_Msk
 (0x1U << 
TSC_IOGCSR_G5S_Pos
Ë

	)

6627 
	#TSC_IOGCSR_G5S
 
TSC_IOGCSR_G5S_Msk


	)

6628 
	#TSC_IOGCSR_G6S_Pos
 (21U)

	)

6629 
	#TSC_IOGCSR_G6S_Msk
 (0x1U << 
TSC_IOGCSR_G6S_Pos
Ë

	)

6630 
	#TSC_IOGCSR_G6S
 
TSC_IOGCSR_G6S_Msk


	)

6631 
	#TSC_IOGCSR_G7S_Pos
 (22U)

	)

6632 
	#TSC_IOGCSR_G7S_Msk
 (0x1U << 
TSC_IOGCSR_G7S_Pos
Ë

	)

6633 
	#TSC_IOGCSR_G7S
 
TSC_IOGCSR_G7S_Msk


	)

6634 
	#TSC_IOGCSR_G8S_Pos
 (23U)

	)

6635 
	#TSC_IOGCSR_G8S_Msk
 (0x1U << 
TSC_IOGCSR_G8S_Pos
Ë

	)

6636 
	#TSC_IOGCSR_G8S
 
TSC_IOGCSR_G8S_Msk


	)

6639 
	#TSC_IOGXCR_CNT_Pos
 (0U)

	)

6640 
	#TSC_IOGXCR_CNT_Msk
 (0x3FFFU << 
TSC_IOGXCR_CNT_Pos
Ë

	)

6641 
	#TSC_IOGXCR_CNT
 
TSC_IOGXCR_CNT_Msk


	)

6655 
	#USART_CR1_UE_Pos
 (0U)

	)

6656 
	#USART_CR1_UE_Msk
 (0x1U << 
USART_CR1_UE_Pos
Ë

	)

6657 
	#USART_CR1_UE
 
USART_CR1_UE_Msk


	)

6658 
	#USART_CR1_UESM_Pos
 (1U)

	)

6659 
	#USART_CR1_UESM_Msk
 (0x1U << 
USART_CR1_UESM_Pos
Ë

	)

6660 
	#USART_CR1_UESM
 
USART_CR1_UESM_Msk


	)

6661 
	#USART_CR1_RE_Pos
 (2U)

	)

6662 
	#USART_CR1_RE_Msk
 (0x1U << 
USART_CR1_RE_Pos
Ë

	)

6663 
	#USART_CR1_RE
 
USART_CR1_RE_Msk


	)

6664 
	#USART_CR1_TE_Pos
 (3U)

	)

6665 
	#USART_CR1_TE_Msk
 (0x1U << 
USART_CR1_TE_Pos
Ë

	)

6666 
	#USART_CR1_TE
 
USART_CR1_TE_Msk


	)

6667 
	#USART_CR1_IDLEIE_Pos
 (4U)

	)

6668 
	#USART_CR1_IDLEIE_Msk
 (0x1U << 
USART_CR1_IDLEIE_Pos
Ë

	)

6669 
	#USART_CR1_IDLEIE
 
USART_CR1_IDLEIE_Msk


	)

6670 
	#USART_CR1_RXNEIE_Pos
 (5U)

	)

6671 
	#USART_CR1_RXNEIE_Msk
 (0x1U << 
USART_CR1_RXNEIE_Pos
Ë

	)

6672 
	#USART_CR1_RXNEIE
 
USART_CR1_RXNEIE_Msk


	)

6673 
	#USART_CR1_TCIE_Pos
 (6U)

	)

6674 
	#USART_CR1_TCIE_Msk
 (0x1U << 
USART_CR1_TCIE_Pos
Ë

	)

6675 
	#USART_CR1_TCIE
 
USART_CR1_TCIE_Msk


	)

6676 
	#USART_CR1_TXEIE_Pos
 (7U)

	)

6677 
	#USART_CR1_TXEIE_Msk
 (0x1U << 
USART_CR1_TXEIE_Pos
Ë

	)

6678 
	#USART_CR1_TXEIE
 
USART_CR1_TXEIE_Msk


	)

6679 
	#USART_CR1_PEIE_Pos
 (8U)

	)

6680 
	#USART_CR1_PEIE_Msk
 (0x1U << 
USART_CR1_PEIE_Pos
Ë

	)

6681 
	#USART_CR1_PEIE
 
USART_CR1_PEIE_Msk


	)

6682 
	#USART_CR1_PS_Pos
 (9U)

	)

6683 
	#USART_CR1_PS_Msk
 (0x1U << 
USART_CR1_PS_Pos
Ë

	)

6684 
	#USART_CR1_PS
 
USART_CR1_PS_Msk


	)

6685 
	#USART_CR1_PCE_Pos
 (10U)

	)

6686 
	#USART_CR1_PCE_Msk
 (0x1U << 
USART_CR1_PCE_Pos
Ë

	)

6687 
	#USART_CR1_PCE
 
USART_CR1_PCE_Msk


	)

6688 
	#USART_CR1_WAKE_Pos
 (11U)

	)

6689 
	#USART_CR1_WAKE_Msk
 (0x1U << 
USART_CR1_WAKE_Pos
Ë

	)

6690 
	#USART_CR1_WAKE
 
USART_CR1_WAKE_Msk


	)

6691 
	#USART_CR1_M_Pos
 (12U)

	)

6692 
	#USART_CR1_M_Msk
 (0x10001U << 
USART_CR1_M_Pos
Ë

	)

6693 
	#USART_CR1_M
 
USART_CR1_M_Msk


	)

6694 
	#USART_CR1_M0_Pos
 (12U)

	)

6695 
	#USART_CR1_M0_Msk
 (0x1U << 
USART_CR1_M0_Pos
Ë

	)

6696 
	#USART_CR1_M0
 
USART_CR1_M0_Msk


	)

6697 
	#USART_CR1_MME_Pos
 (13U)

	)

6698 
	#USART_CR1_MME_Msk
 (0x1U << 
USART_CR1_MME_Pos
Ë

	)

6699 
	#USART_CR1_MME
 
USART_CR1_MME_Msk


	)

6700 
	#USART_CR1_CMIE_Pos
 (14U)

	)

6701 
	#USART_CR1_CMIE_Msk
 (0x1U << 
USART_CR1_CMIE_Pos
Ë

	)

6702 
	#USART_CR1_CMIE
 
USART_CR1_CMIE_Msk


	)

6703 
	#USART_CR1_OVER8_Pos
 (15U)

	)

6704 
	#USART_CR1_OVER8_Msk
 (0x1U << 
USART_CR1_OVER8_Pos
Ë

	)

6705 
	#USART_CR1_OVER8
 
USART_CR1_OVER8_Msk


	)

6706 
	#USART_CR1_DEDT_Pos
 (16U)

	)

6707 
	#USART_CR1_DEDT_Msk
 (0x1FU << 
USART_CR1_DEDT_Pos
Ë

	)

6708 
	#USART_CR1_DEDT
 
USART_CR1_DEDT_Msk


	)

6709 
	#USART_CR1_DEDT_0
 (0x01U << 
USART_CR1_DEDT_Pos
Ë

	)

6710 
	#USART_CR1_DEDT_1
 (0x02U << 
USART_CR1_DEDT_Pos
Ë

	)

6711 
	#USART_CR1_DEDT_2
 (0x04U << 
USART_CR1_DEDT_Pos
Ë

	)

6712 
	#USART_CR1_DEDT_3
 (0x08U << 
USART_CR1_DEDT_Pos
Ë

	)

6713 
	#USART_CR1_DEDT_4
 (0x10U << 
USART_CR1_DEDT_Pos
Ë

	)

6714 
	#USART_CR1_DEAT_Pos
 (21U)

	)

6715 
	#USART_CR1_DEAT_Msk
 (0x1FU << 
USART_CR1_DEAT_Pos
Ë

	)

6716 
	#USART_CR1_DEAT
 
USART_CR1_DEAT_Msk


	)

6717 
	#USART_CR1_DEAT_0
 (0x01U << 
USART_CR1_DEAT_Pos
Ë

	)

6718 
	#USART_CR1_DEAT_1
 (0x02U << 
USART_CR1_DEAT_Pos
Ë

	)

6719 
	#USART_CR1_DEAT_2
 (0x04U << 
USART_CR1_DEAT_Pos
Ë

	)

6720 
	#USART_CR1_DEAT_3
 (0x08U << 
USART_CR1_DEAT_Pos
Ë

	)

6721 
	#USART_CR1_DEAT_4
 (0x10U << 
USART_CR1_DEAT_Pos
Ë

	)

6722 
	#USART_CR1_RTOIE_Pos
 (26U)

	)

6723 
	#USART_CR1_RTOIE_Msk
 (0x1U << 
USART_CR1_RTOIE_Pos
Ë

	)

6724 
	#USART_CR1_RTOIE
 
USART_CR1_RTOIE_Msk


	)

6725 
	#USART_CR1_EOBIE_Pos
 (27U)

	)

6726 
	#USART_CR1_EOBIE_Msk
 (0x1U << 
USART_CR1_EOBIE_Pos
Ë

	)

6727 
	#USART_CR1_EOBIE
 
USART_CR1_EOBIE_Msk


	)

6728 
	#USART_CR1_M1_Pos
 (28U)

	)

6729 
	#USART_CR1_M1_Msk
 (0x1U << 
USART_CR1_M1_Pos
Ë

	)

6730 
	#USART_CR1_M1
 
USART_CR1_M1_Msk


	)

6732 
	#USART_CR2_ADDM7_Pos
 (4U)

	)

6733 
	#USART_CR2_ADDM7_Msk
 (0x1U << 
USART_CR2_ADDM7_Pos
Ë

	)

6734 
	#USART_CR2_ADDM7
 
USART_CR2_ADDM7_Msk


	)

6735 
	#USART_CR2_LBDL_Pos
 (5U)

	)

6736 
	#USART_CR2_LBDL_Msk
 (0x1U << 
USART_CR2_LBDL_Pos
Ë

	)

6737 
	#USART_CR2_LBDL
 
USART_CR2_LBDL_Msk


	)

6738 
	#USART_CR2_LBDIE_Pos
 (6U)

	)

6739 
	#USART_CR2_LBDIE_Msk
 (0x1U << 
USART_CR2_LBDIE_Pos
Ë

	)

6740 
	#USART_CR2_LBDIE
 
USART_CR2_LBDIE_Msk


	)

6741 
	#USART_CR2_LBCL_Pos
 (8U)

	)

6742 
	#USART_CR2_LBCL_Msk
 (0x1U << 
USART_CR2_LBCL_Pos
Ë

	)

6743 
	#USART_CR2_LBCL
 
USART_CR2_LBCL_Msk


	)

6744 
	#USART_CR2_CPHA_Pos
 (9U)

	)

6745 
	#USART_CR2_CPHA_Msk
 (0x1U << 
USART_CR2_CPHA_Pos
Ë

	)

6746 
	#USART_CR2_CPHA
 
USART_CR2_CPHA_Msk


	)

6747 
	#USART_CR2_CPOL_Pos
 (10U)

	)

6748 
	#USART_CR2_CPOL_Msk
 (0x1U << 
USART_CR2_CPOL_Pos
Ë

	)

6749 
	#USART_CR2_CPOL
 
USART_CR2_CPOL_Msk


	)

6750 
	#USART_CR2_CLKEN_Pos
 (11U)

	)

6751 
	#USART_CR2_CLKEN_Msk
 (0x1U << 
USART_CR2_CLKEN_Pos
Ë

	)

6752 
	#USART_CR2_CLKEN
 
USART_CR2_CLKEN_Msk


	)

6753 
	#USART_CR2_STOP_Pos
 (12U)

	)

6754 
	#USART_CR2_STOP_Msk
 (0x3U << 
USART_CR2_STOP_Pos
Ë

	)

6755 
	#USART_CR2_STOP
 
USART_CR2_STOP_Msk


	)

6756 
	#USART_CR2_STOP_0
 (0x1U << 
USART_CR2_STOP_Pos
Ë

	)

6757 
	#USART_CR2_STOP_1
 (0x2U << 
USART_CR2_STOP_Pos
Ë

	)

6758 
	#USART_CR2_LINEN_Pos
 (14U)

	)

6759 
	#USART_CR2_LINEN_Msk
 (0x1U << 
USART_CR2_LINEN_Pos
Ë

	)

6760 
	#USART_CR2_LINEN
 
USART_CR2_LINEN_Msk


	)

6761 
	#USART_CR2_SWAP_Pos
 (15U)

	)

6762 
	#USART_CR2_SWAP_Msk
 (0x1U << 
USART_CR2_SWAP_Pos
Ë

	)

6763 
	#USART_CR2_SWAP
 
USART_CR2_SWAP_Msk


	)

6764 
	#USART_CR2_RXINV_Pos
 (16U)

	)

6765 
	#USART_CR2_RXINV_Msk
 (0x1U << 
USART_CR2_RXINV_Pos
Ë

	)

6766 
	#USART_CR2_RXINV
 
USART_CR2_RXINV_Msk


	)

6767 
	#USART_CR2_TXINV_Pos
 (17U)

	)

6768 
	#USART_CR2_TXINV_Msk
 (0x1U << 
USART_CR2_TXINV_Pos
Ë

	)

6769 
	#USART_CR2_TXINV
 
USART_CR2_TXINV_Msk


	)

6770 
	#USART_CR2_DATAINV_Pos
 (18U)

	)

6771 
	#USART_CR2_DATAINV_Msk
 (0x1U << 
USART_CR2_DATAINV_Pos
Ë

	)

6772 
	#USART_CR2_DATAINV
 
USART_CR2_DATAINV_Msk


	)

6773 
	#USART_CR2_MSBFIRST_Pos
 (19U)

	)

6774 
	#USART_CR2_MSBFIRST_Msk
 (0x1U << 
USART_CR2_MSBFIRST_Pos
Ë

	)

6775 
	#USART_CR2_MSBFIRST
 
USART_CR2_MSBFIRST_Msk


	)

6776 
	#USART_CR2_ABREN_Pos
 (20U)

	)

6777 
	#USART_CR2_ABREN_Msk
 (0x1U << 
USART_CR2_ABREN_Pos
Ë

	)

6778 
	#USART_CR2_ABREN
 
USART_CR2_ABREN_Msk


	)

6779 
	#USART_CR2_ABRMODE_Pos
 (21U)

	)

6780 
	#USART_CR2_ABRMODE_Msk
 (0x3U << 
USART_CR2_ABRMODE_Pos
Ë

	)

6781 
	#USART_CR2_ABRMODE
 
USART_CR2_ABRMODE_Msk


	)

6782 
	#USART_CR2_ABRMODE_0
 (0x1U << 
USART_CR2_ABRMODE_Pos
Ë

	)

6783 
	#USART_CR2_ABRMODE_1
 (0x2U << 
USART_CR2_ABRMODE_Pos
Ë

	)

6784 
	#USART_CR2_RTOEN_Pos
 (23U)

	)

6785 
	#USART_CR2_RTOEN_Msk
 (0x1U << 
USART_CR2_RTOEN_Pos
Ë

	)

6786 
	#USART_CR2_RTOEN
 
USART_CR2_RTOEN_Msk


	)

6787 
	#USART_CR2_ADD_Pos
 (24U)

	)

6788 
	#USART_CR2_ADD_Msk
 (0xFFU << 
USART_CR2_ADD_Pos
Ë

	)

6789 
	#USART_CR2_ADD
 
USART_CR2_ADD_Msk


	)

6792 
	#USART_CR3_EIE_Pos
 (0U)

	)

6793 
	#USART_CR3_EIE_Msk
 (0x1U << 
USART_CR3_EIE_Pos
Ë

	)

6794 
	#USART_CR3_EIE
 
USART_CR3_EIE_Msk


	)

6795 
	#USART_CR3_IREN_Pos
 (1U)

	)

6796 
	#USART_CR3_IREN_Msk
 (0x1U << 
USART_CR3_IREN_Pos
Ë

	)

6797 
	#USART_CR3_IREN
 
USART_CR3_IREN_Msk


	)

6798 
	#USART_CR3_IRLP_Pos
 (2U)

	)

6799 
	#USART_CR3_IRLP_Msk
 (0x1U << 
USART_CR3_IRLP_Pos
Ë

	)

6800 
	#USART_CR3_IRLP
 
USART_CR3_IRLP_Msk


	)

6801 
	#USART_CR3_HDSEL_Pos
 (3U)

	)

6802 
	#USART_CR3_HDSEL_Msk
 (0x1U << 
USART_CR3_HDSEL_Pos
Ë

	)

6803 
	#USART_CR3_HDSEL
 
USART_CR3_HDSEL_Msk


	)

6804 
	#USART_CR3_NACK_Pos
 (4U)

	)

6805 
	#USART_CR3_NACK_Msk
 (0x1U << 
USART_CR3_NACK_Pos
Ë

	)

6806 
	#USART_CR3_NACK
 
USART_CR3_NACK_Msk


	)

6807 
	#USART_CR3_SCEN_Pos
 (5U)

	)

6808 
	#USART_CR3_SCEN_Msk
 (0x1U << 
USART_CR3_SCEN_Pos
Ë

	)

6809 
	#USART_CR3_SCEN
 
USART_CR3_SCEN_Msk


	)

6810 
	#USART_CR3_DMAR_Pos
 (6U)

	)

6811 
	#USART_CR3_DMAR_Msk
 (0x1U << 
USART_CR3_DMAR_Pos
Ë

	)

6812 
	#USART_CR3_DMAR
 
USART_CR3_DMAR_Msk


	)

6813 
	#USART_CR3_DMAT_Pos
 (7U)

	)

6814 
	#USART_CR3_DMAT_Msk
 (0x1U << 
USART_CR3_DMAT_Pos
Ë

	)

6815 
	#USART_CR3_DMAT
 
USART_CR3_DMAT_Msk


	)

6816 
	#USART_CR3_RTSE_Pos
 (8U)

	)

6817 
	#USART_CR3_RTSE_Msk
 (0x1U << 
USART_CR3_RTSE_Pos
Ë

	)

6818 
	#USART_CR3_RTSE
 
USART_CR3_RTSE_Msk


	)

6819 
	#USART_CR3_CTSE_Pos
 (9U)

	)

6820 
	#USART_CR3_CTSE_Msk
 (0x1U << 
USART_CR3_CTSE_Pos
Ë

	)

6821 
	#USART_CR3_CTSE
 
USART_CR3_CTSE_Msk


	)

6822 
	#USART_CR3_CTSIE_Pos
 (10U)

	)

6823 
	#USART_CR3_CTSIE_Msk
 (0x1U << 
USART_CR3_CTSIE_Pos
Ë

	)

6824 
	#USART_CR3_CTSIE
 
USART_CR3_CTSIE_Msk


	)

6825 
	#USART_CR3_ONEBIT_Pos
 (11U)

	)

6826 
	#USART_CR3_ONEBIT_Msk
 (0x1U << 
USART_CR3_ONEBIT_Pos
Ë

	)

6827 
	#USART_CR3_ONEBIT
 
USART_CR3_ONEBIT_Msk


	)

6828 
	#USART_CR3_OVRDIS_Pos
 (12U)

	)

6829 
	#USART_CR3_OVRDIS_Msk
 (0x1U << 
USART_CR3_OVRDIS_Pos
Ë

	)

6830 
	#USART_CR3_OVRDIS
 
USART_CR3_OVRDIS_Msk


	)

6831 
	#USART_CR3_DDRE_Pos
 (13U)

	)

6832 
	#USART_CR3_DDRE_Msk
 (0x1U << 
USART_CR3_DDRE_Pos
Ë

	)

6833 
	#USART_CR3_DDRE
 
USART_CR3_DDRE_Msk


	)

6834 
	#USART_CR3_DEM_Pos
 (14U)

	)

6835 
	#USART_CR3_DEM_Msk
 (0x1U << 
USART_CR3_DEM_Pos
Ë

	)

6836 
	#USART_CR3_DEM
 
USART_CR3_DEM_Msk


	)

6837 
	#USART_CR3_DEP_Pos
 (15U)

	)

6838 
	#USART_CR3_DEP_Msk
 (0x1U << 
USART_CR3_DEP_Pos
Ë

	)

6839 
	#USART_CR3_DEP
 
USART_CR3_DEP_Msk


	)

6840 
	#USART_CR3_SCARCNT_Pos
 (17U)

	)

6841 
	#USART_CR3_SCARCNT_Msk
 (0x7U << 
USART_CR3_SCARCNT_Pos
Ë

	)

6842 
	#USART_CR3_SCARCNT
 
USART_CR3_SCARCNT_Msk


	)

6843 
	#USART_CR3_SCARCNT_0
 (0x1U << 
USART_CR3_SCARCNT_Pos
Ë

	)

6844 
	#USART_CR3_SCARCNT_1
 (0x2U << 
USART_CR3_SCARCNT_Pos
Ë

	)

6845 
	#USART_CR3_SCARCNT_2
 (0x4U << 
USART_CR3_SCARCNT_Pos
Ë

	)

6846 
	#USART_CR3_WUS_Pos
 (20U)

	)

6847 
	#USART_CR3_WUS_Msk
 (0x3U << 
USART_CR3_WUS_Pos
Ë

	)

6848 
	#USART_CR3_WUS
 
USART_CR3_WUS_Msk


	)

6849 
	#USART_CR3_WUS_0
 (0x1U << 
USART_CR3_WUS_Pos
Ë

	)

6850 
	#USART_CR3_WUS_1
 (0x2U << 
USART_CR3_WUS_Pos
Ë

	)

6851 
	#USART_CR3_WUFIE_Pos
 (22U)

	)

6852 
	#USART_CR3_WUFIE_Msk
 (0x1U << 
USART_CR3_WUFIE_Pos
Ë

	)

6853 
	#USART_CR3_WUFIE
 
USART_CR3_WUFIE_Msk


	)

6854 
	#USART_CR3_UCESM_Pos
 (23U)

	)

6855 
	#USART_CR3_UCESM_Msk
 (0x1U << 
USART_CR3_UCESM_Pos
Ë

	)

6856 
	#USART_CR3_UCESM
 
USART_CR3_UCESM_Msk


	)

6859 
	#USART_BRR_DIV_FRACTION_Pos
 (0U)

	)

6860 
	#USART_BRR_DIV_FRACTION_Msk
 (0xFU << 
USART_BRR_DIV_FRACTION_Pos
Ë

	)

6861 
	#USART_BRR_DIV_FRACTION
 
USART_BRR_DIV_FRACTION_Msk


	)

6862 
	#USART_BRR_DIV_MANTISSA_Pos
 (4U)

	)

6863 
	#USART_BRR_DIV_MANTISSA_Msk
 (0xFFFU << 
USART_BRR_DIV_MANTISSA_Pos
Ë

	)

6864 
	#USART_BRR_DIV_MANTISSA
 
USART_BRR_DIV_MANTISSA_Msk


	)

6867 
	#USART_GTPR_PSC_Pos
 (0U)

	)

6868 
	#USART_GTPR_PSC_Msk
 (0xFFU << 
USART_GTPR_PSC_Pos
Ë

	)

6869 
	#USART_GTPR_PSC
 
USART_GTPR_PSC_Msk


	)

6870 
	#USART_GTPR_GT_Pos
 (8U)

	)

6871 
	#USART_GTPR_GT_Msk
 (0xFFU << 
USART_GTPR_GT_Pos
Ë

	)

6872 
	#USART_GTPR_GT
 
USART_GTPR_GT_Msk


	)

6876 
	#USART_RTOR_RTO_Pos
 (0U)

	)

6877 
	#USART_RTOR_RTO_Msk
 (0xFFFFFFU << 
USART_RTOR_RTO_Pos
Ë

	)

6878 
	#USART_RTOR_RTO
 
USART_RTOR_RTO_Msk


	)

6879 
	#USART_RTOR_BLEN_Pos
 (24U)

	)

6880 
	#USART_RTOR_BLEN_Msk
 (0xFFU << 
USART_RTOR_BLEN_Pos
Ë

	)

6881 
	#USART_RTOR_BLEN
 
USART_RTOR_BLEN_Msk


	)

6884 
	#USART_RQR_ABRRQ_Pos
 (0U)

	)

6885 
	#USART_RQR_ABRRQ_Msk
 (0x1U << 
USART_RQR_ABRRQ_Pos
Ë

	)

6886 
	#USART_RQR_ABRRQ
 
USART_RQR_ABRRQ_Msk


	)

6887 
	#USART_RQR_SBKRQ_Pos
 (1U)

	)

6888 
	#USART_RQR_SBKRQ_Msk
 (0x1U << 
USART_RQR_SBKRQ_Pos
Ë

	)

6889 
	#USART_RQR_SBKRQ
 
USART_RQR_SBKRQ_Msk


	)

6890 
	#USART_RQR_MMRQ_Pos
 (2U)

	)

6891 
	#USART_RQR_MMRQ_Msk
 (0x1U << 
USART_RQR_MMRQ_Pos
Ë

	)

6892 
	#USART_RQR_MMRQ
 
USART_RQR_MMRQ_Msk


	)

6893 
	#USART_RQR_RXFRQ_Pos
 (3U)

	)

6894 
	#USART_RQR_RXFRQ_Msk
 (0x1U << 
USART_RQR_RXFRQ_Pos
Ë

	)

6895 
	#USART_RQR_RXFRQ
 
USART_RQR_RXFRQ_Msk


	)

6896 
	#USART_RQR_TXFRQ_Pos
 (4U)

	)

6897 
	#USART_RQR_TXFRQ_Msk
 (0x1U << 
USART_RQR_TXFRQ_Pos
Ë

	)

6898 
	#USART_RQR_TXFRQ
 
USART_RQR_TXFRQ_Msk


	)

6901 
	#USART_ISR_PE_Pos
 (0U)

	)

6902 
	#USART_ISR_PE_Msk
 (0x1U << 
USART_ISR_PE_Pos
Ë

	)

6903 
	#USART_ISR_PE
 
USART_ISR_PE_Msk


	)

6904 
	#USART_ISR_FE_Pos
 (1U)

	)

6905 
	#USART_ISR_FE_Msk
 (0x1U << 
USART_ISR_FE_Pos
Ë

	)

6906 
	#USART_ISR_FE
 
USART_ISR_FE_Msk


	)

6907 
	#USART_ISR_NE_Pos
 (2U)

	)

6908 
	#USART_ISR_NE_Msk
 (0x1U << 
USART_ISR_NE_Pos
Ë

	)

6909 
	#USART_ISR_NE
 
USART_ISR_NE_Msk


	)

6910 
	#USART_ISR_ORE_Pos
 (3U)

	)

6911 
	#USART_ISR_ORE_Msk
 (0x1U << 
USART_ISR_ORE_Pos
Ë

	)

6912 
	#USART_ISR_ORE
 
USART_ISR_ORE_Msk


	)

6913 
	#USART_ISR_IDLE_Pos
 (4U)

	)

6914 
	#USART_ISR_IDLE_Msk
 (0x1U << 
USART_ISR_IDLE_Pos
Ë

	)

6915 
	#USART_ISR_IDLE
 
USART_ISR_IDLE_Msk


	)

6916 
	#USART_ISR_RXNE_Pos
 (5U)

	)

6917 
	#USART_ISR_RXNE_Msk
 (0x1U << 
USART_ISR_RXNE_Pos
Ë

	)

6918 
	#USART_ISR_RXNE
 
USART_ISR_RXNE_Msk


	)

6919 
	#USART_ISR_TC_Pos
 (6U)

	)

6920 
	#USART_ISR_TC_Msk
 (0x1U << 
USART_ISR_TC_Pos
Ë

	)

6921 
	#USART_ISR_TC
 
USART_ISR_TC_Msk


	)

6922 
	#USART_ISR_TXE_Pos
 (7U)

	)

6923 
	#USART_ISR_TXE_Msk
 (0x1U << 
USART_ISR_TXE_Pos
Ë

	)

6924 
	#USART_ISR_TXE
 
USART_ISR_TXE_Msk


	)

6925 
	#USART_ISR_LBDF_Pos
 (8U)

	)

6926 
	#USART_ISR_LBDF_Msk
 (0x1U << 
USART_ISR_LBDF_Pos
Ë

	)

6927 
	#USART_ISR_LBDF
 
USART_ISR_LBDF_Msk


	)

6928 
	#USART_ISR_CTSIF_Pos
 (9U)

	)

6929 
	#USART_ISR_CTSIF_Msk
 (0x1U << 
USART_ISR_CTSIF_Pos
Ë

	)

6930 
	#USART_ISR_CTSIF
 
USART_ISR_CTSIF_Msk


	)

6931 
	#USART_ISR_CTS_Pos
 (10U)

	)

6932 
	#USART_ISR_CTS_Msk
 (0x1U << 
USART_ISR_CTS_Pos
Ë

	)

6933 
	#USART_ISR_CTS
 
USART_ISR_CTS_Msk


	)

6934 
	#USART_ISR_RTOF_Pos
 (11U)

	)

6935 
	#USART_ISR_RTOF_Msk
 (0x1U << 
USART_ISR_RTOF_Pos
Ë

	)

6936 
	#USART_ISR_RTOF
 
USART_ISR_RTOF_Msk


	)

6937 
	#USART_ISR_EOBF_Pos
 (12U)

	)

6938 
	#USART_ISR_EOBF_Msk
 (0x1U << 
USART_ISR_EOBF_Pos
Ë

	)

6939 
	#USART_ISR_EOBF
 
USART_ISR_EOBF_Msk


	)

6940 
	#USART_ISR_ABRE_Pos
 (14U)

	)

6941 
	#USART_ISR_ABRE_Msk
 (0x1U << 
USART_ISR_ABRE_Pos
Ë

	)

6942 
	#USART_ISR_ABRE
 
USART_ISR_ABRE_Msk


	)

6943 
	#USART_ISR_ABRF_Pos
 (15U)

	)

6944 
	#USART_ISR_ABRF_Msk
 (0x1U << 
USART_ISR_ABRF_Pos
Ë

	)

6945 
	#USART_ISR_ABRF
 
USART_ISR_ABRF_Msk


	)

6946 
	#USART_ISR_BUSY_Pos
 (16U)

	)

6947 
	#USART_ISR_BUSY_Msk
 (0x1U << 
USART_ISR_BUSY_Pos
Ë

	)

6948 
	#USART_ISR_BUSY
 
USART_ISR_BUSY_Msk


	)

6949 
	#USART_ISR_CMF_Pos
 (17U)

	)

6950 
	#USART_ISR_CMF_Msk
 (0x1U << 
USART_ISR_CMF_Pos
Ë

	)

6951 
	#USART_ISR_CMF
 
USART_ISR_CMF_Msk


	)

6952 
	#USART_ISR_SBKF_Pos
 (18U)

	)

6953 
	#USART_ISR_SBKF_Msk
 (0x1U << 
USART_ISR_SBKF_Pos
Ë

	)

6954 
	#USART_ISR_SBKF
 
USART_ISR_SBKF_Msk


	)

6955 
	#USART_ISR_RWU_Pos
 (19U)

	)

6956 
	#USART_ISR_RWU_Msk
 (0x1U << 
USART_ISR_RWU_Pos
Ë

	)

6957 
	#USART_ISR_RWU
 
USART_ISR_RWU_Msk


	)

6958 
	#USART_ISR_WUF_Pos
 (20U)

	)

6959 
	#USART_ISR_WUF_Msk
 (0x1U << 
USART_ISR_WUF_Pos
Ë

	)

6960 
	#USART_ISR_WUF
 
USART_ISR_WUF_Msk


	)

6961 
	#USART_ISR_TEACK_Pos
 (21U)

	)

6962 
	#USART_ISR_TEACK_Msk
 (0x1U << 
USART_ISR_TEACK_Pos
Ë

	)

6963 
	#USART_ISR_TEACK
 
USART_ISR_TEACK_Msk


	)

6964 
	#USART_ISR_REACK_Pos
 (22U)

	)

6965 
	#USART_ISR_REACK_Msk
 (0x1U << 
USART_ISR_REACK_Pos
Ë

	)

6966 
	#USART_ISR_REACK
 
USART_ISR_REACK_Msk


	)

6969 
	#USART_ICR_PECF_Pos
 (0U)

	)

6970 
	#USART_ICR_PECF_Msk
 (0x1U << 
USART_ICR_PECF_Pos
Ë

	)

6971 
	#USART_ICR_PECF
 
USART_ICR_PECF_Msk


	)

6972 
	#USART_ICR_FECF_Pos
 (1U)

	)

6973 
	#USART_ICR_FECF_Msk
 (0x1U << 
USART_ICR_FECF_Pos
Ë

	)

6974 
	#USART_ICR_FECF
 
USART_ICR_FECF_Msk


	)

6975 
	#USART_ICR_NCF_Pos
 (2U)

	)

6976 
	#USART_ICR_NCF_Msk
 (0x1U << 
USART_ICR_NCF_Pos
Ë

	)

6977 
	#USART_ICR_NCF
 
USART_ICR_NCF_Msk


	)

6978 
	#USART_ICR_ORECF_Pos
 (3U)

	)

6979 
	#USART_ICR_ORECF_Msk
 (0x1U << 
USART_ICR_ORECF_Pos
Ë

	)

6980 
	#USART_ICR_ORECF
 
USART_ICR_ORECF_Msk


	)

6981 
	#USART_ICR_IDLECF_Pos
 (4U)

	)

6982 
	#USART_ICR_IDLECF_Msk
 (0x1U << 
USART_ICR_IDLECF_Pos
Ë

	)

6983 
	#USART_ICR_IDLECF
 
USART_ICR_IDLECF_Msk


	)

6984 
	#USART_ICR_TCCF_Pos
 (6U)

	)

6985 
	#USART_ICR_TCCF_Msk
 (0x1U << 
USART_ICR_TCCF_Pos
Ë

	)

6986 
	#USART_ICR_TCCF
 
USART_ICR_TCCF_Msk


	)

6987 
	#USART_ICR_LBDCF_Pos
 (8U)

	)

6988 
	#USART_ICR_LBDCF_Msk
 (0x1U << 
USART_ICR_LBDCF_Pos
Ë

	)

6989 
	#USART_ICR_LBDCF
 
USART_ICR_LBDCF_Msk


	)

6990 
	#USART_ICR_CTSCF_Pos
 (9U)

	)

6991 
	#USART_ICR_CTSCF_Msk
 (0x1U << 
USART_ICR_CTSCF_Pos
Ë

	)

6992 
	#USART_ICR_CTSCF
 
USART_ICR_CTSCF_Msk


	)

6993 
	#USART_ICR_RTOCF_Pos
 (11U)

	)

6994 
	#USART_ICR_RTOCF_Msk
 (0x1U << 
USART_ICR_RTOCF_Pos
Ë

	)

6995 
	#USART_ICR_RTOCF
 
USART_ICR_RTOCF_Msk


	)

6996 
	#USART_ICR_EOBCF_Pos
 (12U)

	)

6997 
	#USART_ICR_EOBCF_Msk
 (0x1U << 
USART_ICR_EOBCF_Pos
Ë

	)

6998 
	#USART_ICR_EOBCF
 
USART_ICR_EOBCF_Msk


	)

6999 
	#USART_ICR_CMCF_Pos
 (17U)

	)

7000 
	#USART_ICR_CMCF_Msk
 (0x1U << 
USART_ICR_CMCF_Pos
Ë

	)

7001 
	#USART_ICR_CMCF
 
USART_ICR_CMCF_Msk


	)

7002 
	#USART_ICR_WUCF_Pos
 (20U)

	)

7003 
	#USART_ICR_WUCF_Msk
 (0x1U << 
USART_ICR_WUCF_Pos
Ë

	)

7004 
	#USART_ICR_WUCF
 
USART_ICR_WUCF_Msk


	)

7007 
	#USART_RDR_RDR_Pos
 (0U)

	)

7008 
	#USART_RDR_RDR_Msk
 (0x1FFU << 
USART_RDR_RDR_Pos
Ë

	)

7009 
	#USART_RDR_RDR
 
USART_RDR_RDR_Msk


	)

7012 
	#USART_TDR_TDR_Pos
 (0U)

	)

7013 
	#USART_TDR_TDR_Msk
 (0x1FFU << 
USART_TDR_TDR_Pos
Ë

	)

7014 
	#USART_TDR_TDR
 
USART_TDR_TDR_Msk


	)

7021 
	#USB_BASE
 (0x40005C00UË

	)

7022 
	#USB_PMAADDR_Pos
 (13U)

	)

7023 
	#USB_PMAADDR_Msk
 (0x20003U << 
USB_PMAADDR_Pos
Ë

	)

7024 
	#USB_PMAADDR
 
USB_PMAADDR_Msk


	)

7026 
	#USB_CNTR
 (
USB_BASE
 + 0x40Ë

	)

7027 
	#USB_ISTR
 (
USB_BASE
 + 0x44Ë

	)

7028 
	#USB_FNR
 (
USB_BASE
 + 0x48Ë

	)

7029 
	#USB_DADDR
 (
USB_BASE
 + 0x4CË

	)

7030 
	#USB_BTABLE
 (
USB_BASE
 + 0x50Ë

	)

7031 
	#USB_LPMCSR
 (
USB_BASE
 + 0x54Ë

	)

7032 
	#USB_BCDR
 (
USB_BASE
 + 0x58Ë

	)

7035 
	#USB_ISTR_CTR
 ((
uöt16_t
)0x8000UË

	)

7036 
	#USB_ISTR_PMAOVR
 ((
uöt16_t
)0x4000UË

	)

7037 
	#USB_ISTR_ERR
 ((
uöt16_t
)0x2000UË

	)

7038 
	#USB_ISTR_WKUP
 ((
uöt16_t
)0x1000UË

	)

7039 
	#USB_ISTR_SUSP
 ((
uöt16_t
)0x0800UË

	)

7040 
	#USB_ISTR_RESET
 ((
uöt16_t
)0x0400UË

	)

7041 
	#USB_ISTR_SOF
 ((
uöt16_t
)0x0200UË

	)

7042 
	#USB_ISTR_ESOF
 ((
uöt16_t
)0x0100UË

	)

7043 
	#USB_ISTR_L1REQ
 ((
uöt16_t
)0x0080UË

	)

7044 
	#USB_ISTR_DIR
 ((
uöt16_t
)0x0010UË

	)

7045 
	#USB_ISTR_EP_ID
 ((
uöt16_t
)0x000FUË

	)

7047 
	#USB_CLR_CTR
 (~
USB_ISTR_CTR
Ë

	)

7048 
	#USB_CLR_PMAOVR
 (~
USB_ISTR_PMAOVR
Ë

	)

7049 
	#USB_CLR_ERR
 (~
USB_ISTR_ERR
Ë

	)

7050 
	#USB_CLR_WKUP
 (~
USB_ISTR_WKUP
Ë

	)

7051 
	#USB_CLR_SUSP
 (~
USB_ISTR_SUSP
Ë

	)

7052 
	#USB_CLR_RESET
 (~
USB_ISTR_RESET
Ë

	)

7053 
	#USB_CLR_SOF
 (~
USB_ISTR_SOF
Ë

	)

7054 
	#USB_CLR_ESOF
 (~
USB_ISTR_ESOF
Ë

	)

7055 
	#USB_CLR_L1REQ
 (~
USB_ISTR_L1REQ
Ë

	)

7057 
	#USB_CNTR_CTRM
 ((
uöt16_t
)0x8000UË

	)

7058 
	#USB_CNTR_PMAOVRM
 ((
uöt16_t
)0x4000UË

	)

7059 
	#USB_CNTR_ERRM
 ((
uöt16_t
)0x2000UË

	)

7060 
	#USB_CNTR_WKUPM
 ((
uöt16_t
)0x1000UË

	)

7061 
	#USB_CNTR_SUSPM
 ((
uöt16_t
)0x0800UË

	)

7062 
	#USB_CNTR_RESETM
 ((
uöt16_t
)0x0400UË

	)

7063 
	#USB_CNTR_SOFM
 ((
uöt16_t
)0x0200UË

	)

7064 
	#USB_CNTR_ESOFM
 ((
uöt16_t
)0x0100UË

	)

7065 
	#USB_CNTR_L1REQM
 ((
uöt16_t
)0x0080UË

	)

7066 
	#USB_CNTR_L1RESUME
 ((
uöt16_t
)0x0020UË

	)

7067 
	#USB_CNTR_RESUME
 ((
uöt16_t
)0x0010UË

	)

7068 
	#USB_CNTR_FSUSP
 ((
uöt16_t
)0x0008UË

	)

7069 
	#USB_CNTR_LPMODE
 ((
uöt16_t
)0x0004UË

	)

7070 
	#USB_CNTR_PDWN
 ((
uöt16_t
)0x0002UË

	)

7071 
	#USB_CNTR_FRES
 ((
uöt16_t
)0x0001UË

	)

7073 
	#USB_BCDR_DPPU
 ((
uöt16_t
)0x8000UË

	)

7074 
	#USB_BCDR_PS2DET
 ((
uöt16_t
)0x0080UË

	)

7075 
	#USB_BCDR_SDET
 ((
uöt16_t
)0x0040UË

	)

7076 
	#USB_BCDR_PDET
 ((
uöt16_t
)0x0020UË

	)

7077 
	#USB_BCDR_DCDET
 ((
uöt16_t
)0x0010UË

	)

7078 
	#USB_BCDR_SDEN
 ((
uöt16_t
)0x0008UË

	)

7079 
	#USB_BCDR_PDEN
 ((
uöt16_t
)0x0004UË

	)

7080 
	#USB_BCDR_DCDEN
 ((
uöt16_t
)0x0002UË

	)

7081 
	#USB_BCDR_BCDEN
 ((
uöt16_t
)0x0001UË

	)

7083 
	#USB_LPMCSR_BESL
 ((
uöt16_t
)0x00F0UË

	)

7084 
	#USB_LPMCSR_REMWAKE
 ((
uöt16_t
)0x0008UË

	)

7085 
	#USB_LPMCSR_LPMACK
 ((
uöt16_t
)0x0002UË

	)

7086 
	#USB_LPMCSR_LMPEN
 ((
uöt16_t
)0x0001UË

	)

7088 
	#USB_FNR_RXDP
 ((
uöt16_t
)0x8000UË

	)

7089 
	#USB_FNR_RXDM
 ((
uöt16_t
)0x4000UË

	)

7090 
	#USB_FNR_LCK
 ((
uöt16_t
)0x2000UË

	)

7091 
	#USB_FNR_LSOF
 ((
uöt16_t
)0x1800UË

	)

7092 
	#USB_FNR_FN
 ((
uöt16_t
)0x07FFUË

	)

7094 
	#USB_DADDR_EF
 ((
uöt8_t
)0x80UË

	)

7095 
	#USB_DADDR_ADD
 ((
uöt8_t
)0x7FUË

	)

7097 
	#USB_EP0R
 
USB_BASE


	)

7098 
	#USB_EP1R
 (
USB_BASE
 + 0x04Ë

	)

7099 
	#USB_EP2R
 (
USB_BASE
 + 0x08Ë

	)

7100 
	#USB_EP3R
 (
USB_BASE
 + 0x0CË

	)

7101 
	#USB_EP4R
 (
USB_BASE
 + 0x10Ë

	)

7102 
	#USB_EP5R
 (
USB_BASE
 + 0x14Ë

	)

7103 
	#USB_EP6R
 (
USB_BASE
 + 0x18Ë

	)

7104 
	#USB_EP7R
 (
USB_BASE
 + 0x1CË

	)

7106 
	#USB_EP_CTR_RX
 ((
uöt16_t
)0x8000UË

	)

7107 
	#USB_EP_DTOG_RX
 ((
uöt16_t
)0x4000UË

	)

7108 
	#USB_EPRX_STAT
 ((
uöt16_t
)0x3000UË

	)

7109 
	#USB_EP_SETUP
 ((
uöt16_t
)0x0800UË

	)

7110 
	#USB_EP_T_FIELD
 ((
uöt16_t
)0x0600UË

	)

7111 
	#USB_EP_KIND
 ((
uöt16_t
)0x0100UË

	)

7112 
	#USB_EP_CTR_TX
 ((
uöt16_t
)0x0080UË

	)

7113 
	#USB_EP_DTOG_TX
 ((
uöt16_t
)0x0040UË

	)

7114 
	#USB_EPTX_STAT
 ((
uöt16_t
)0x0030UË

	)

7115 
	#USB_EPADDR_FIELD
 ((
uöt16_t
)0x000FUË

	)

7118 
	#USB_EPREG_MASK
 (
USB_EP_CTR_RX
|
USB_EP_SETUP
|
USB_EP_T_FIELD
|
USB_EP_KIND
|
USB_EP_CTR_TX
|
USB_EPADDR_FIELD
)

	)

7120 
	#USB_EP_TYPE_MASK
 ((
uöt16_t
)0x0600UË

	)

7121 
	#USB_EP_BULK
 ((
uöt16_t
)0x0000UË

	)

7122 
	#USB_EP_CONTROL
 ((
uöt16_t
)0x0200UË

	)

7123 
	#USB_EP_ISOCHRONOUS
 ((
uöt16_t
)0x0400UË

	)

7124 
	#USB_EP_INTERRUPT
 ((
uöt16_t
)0x0600UË

	)

7125 
	#USB_EP_T_MASK
 ((
uöt16_t
Ë~
USB_EP_T_FIELD
 & 
USB_EPREG_MASK
)

	)

7127 
	#USB_EPKIND_MASK
 ((
uöt16_t
)~
USB_EP_KIND
 & 
USB_EPREG_MASK
Ë

	)

7129 
	#USB_EP_TX_DIS
 ((
uöt16_t
)0x0000UË

	)

7130 
	#USB_EP_TX_STALL
 ((
uöt16_t
)0x0010UË

	)

7131 
	#USB_EP_TX_NAK
 ((
uöt16_t
)0x0020UË

	)

7132 
	#USB_EP_TX_VALID
 ((
uöt16_t
)0x0030UË

	)

7133 
	#USB_EPTX_DTOG1
 ((
uöt16_t
)0x0010UË

	)

7134 
	#USB_EPTX_DTOG2
 ((
uöt16_t
)0x0020UË

	)

7135 
	#USB_EPTX_DTOGMASK
 (
USB_EPTX_STAT
|
USB_EPREG_MASK
)

	)

7137 
	#USB_EP_RX_DIS
 ((
uöt16_t
)0x0000UË

	)

7138 
	#USB_EP_RX_STALL
 ((
uöt16_t
)0x1000UË

	)

7139 
	#USB_EP_RX_NAK
 ((
uöt16_t
)0x2000UË

	)

7140 
	#USB_EP_RX_VALID
 ((
uöt16_t
)0x3000UË

	)

7141 
	#USB_EPRX_DTOG1
 ((
uöt16_t
)0x1000UË

	)

7142 
	#USB_EPRX_DTOG2
 ((
uöt16_t
)0x2000UË

	)

7143 
	#USB_EPRX_DTOGMASK
 (
USB_EPRX_STAT
|
USB_EPREG_MASK
)

	)

7152 
	#WWDG_CR_T_Pos
 (0U)

	)

7153 
	#WWDG_CR_T_Msk
 (0x7FU << 
WWDG_CR_T_Pos
Ë

	)

7154 
	#WWDG_CR_T
 
WWDG_CR_T_Msk


	)

7155 
	#WWDG_CR_T_0
 (0x01U << 
WWDG_CR_T_Pos
Ë

	)

7156 
	#WWDG_CR_T_1
 (0x02U << 
WWDG_CR_T_Pos
Ë

	)

7157 
	#WWDG_CR_T_2
 (0x04U << 
WWDG_CR_T_Pos
Ë

	)

7158 
	#WWDG_CR_T_3
 (0x08U << 
WWDG_CR_T_Pos
Ë

	)

7159 
	#WWDG_CR_T_4
 (0x10U << 
WWDG_CR_T_Pos
Ë

	)

7160 
	#WWDG_CR_T_5
 (0x20U << 
WWDG_CR_T_Pos
Ë

	)

7161 
	#WWDG_CR_T_6
 (0x40U << 
WWDG_CR_T_Pos
Ë

	)

7164 
	#WWDG_CR_T0
 
WWDG_CR_T_0


	)

7165 
	#WWDG_CR_T1
 
WWDG_CR_T_1


	)

7166 
	#WWDG_CR_T2
 
WWDG_CR_T_2


	)

7167 
	#WWDG_CR_T3
 
WWDG_CR_T_3


	)

7168 
	#WWDG_CR_T4
 
WWDG_CR_T_4


	)

7169 
	#WWDG_CR_T5
 
WWDG_CR_T_5


	)

7170 
	#WWDG_CR_T6
 
WWDG_CR_T_6


	)

7172 
	#WWDG_CR_WDGA_Pos
 (7U)

	)

7173 
	#WWDG_CR_WDGA_Msk
 (0x1U << 
WWDG_CR_WDGA_Pos
Ë

	)

7174 
	#WWDG_CR_WDGA
 
WWDG_CR_WDGA_Msk


	)

7177 
	#WWDG_CFR_W_Pos
 (0U)

	)

7178 
	#WWDG_CFR_W_Msk
 (0x7FU << 
WWDG_CFR_W_Pos
Ë

	)

7179 
	#WWDG_CFR_W
 
WWDG_CFR_W_Msk


	)

7180 
	#WWDG_CFR_W_0
 (0x01U << 
WWDG_CFR_W_Pos
Ë

	)

7181 
	#WWDG_CFR_W_1
 (0x02U << 
WWDG_CFR_W_Pos
Ë

	)

7182 
	#WWDG_CFR_W_2
 (0x04U << 
WWDG_CFR_W_Pos
Ë

	)

7183 
	#WWDG_CFR_W_3
 (0x08U << 
WWDG_CFR_W_Pos
Ë

	)

7184 
	#WWDG_CFR_W_4
 (0x10U << 
WWDG_CFR_W_Pos
Ë

	)

7185 
	#WWDG_CFR_W_5
 (0x20U << 
WWDG_CFR_W_Pos
Ë

	)

7186 
	#WWDG_CFR_W_6
 (0x40U << 
WWDG_CFR_W_Pos
Ë

	)

7189 
	#WWDG_CFR_W0
 
WWDG_CFR_W_0


	)

7190 
	#WWDG_CFR_W1
 
WWDG_CFR_W_1


	)

7191 
	#WWDG_CFR_W2
 
WWDG_CFR_W_2


	)

7192 
	#WWDG_CFR_W3
 
WWDG_CFR_W_3


	)

7193 
	#WWDG_CFR_W4
 
WWDG_CFR_W_4


	)

7194 
	#WWDG_CFR_W5
 
WWDG_CFR_W_5


	)

7195 
	#WWDG_CFR_W6
 
WWDG_CFR_W_6


	)

7197 
	#WWDG_CFR_WDGTB_Pos
 (7U)

	)

7198 
	#WWDG_CFR_WDGTB_Msk
 (0x3U << 
WWDG_CFR_WDGTB_Pos
Ë

	)

7199 
	#WWDG_CFR_WDGTB
 
WWDG_CFR_WDGTB_Msk


	)

7200 
	#WWDG_CFR_WDGTB_0
 (0x1U << 
WWDG_CFR_WDGTB_Pos
Ë

	)

7201 
	#WWDG_CFR_WDGTB_1
 (0x2U << 
WWDG_CFR_WDGTB_Pos
Ë

	)

7204 
	#WWDG_CFR_WDGTB0
 
WWDG_CFR_WDGTB_0


	)

7205 
	#WWDG_CFR_WDGTB1
 
WWDG_CFR_WDGTB_1


	)

7207 
	#WWDG_CFR_EWI_Pos
 (9U)

	)

7208 
	#WWDG_CFR_EWI_Msk
 (0x1U << 
WWDG_CFR_EWI_Pos
Ë

	)

7209 
	#WWDG_CFR_EWI
 
WWDG_CFR_EWI_Msk


	)

7212 
	#WWDG_SR_EWIF_Pos
 (0U)

	)

7213 
	#WWDG_SR_EWIF_Msk
 (0x1U << 
WWDG_SR_EWIF_Pos
Ë

	)

7214 
	#WWDG_SR_EWIF
 
WWDG_SR_EWIF_Msk


	)

7229 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

7230 
	#IS_ADC_COMMON_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1_COMMON
)

	)

7233 
	#IS_COMP_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
COMP1
Ë|| \

	)

7234 ((
INSTANCE
Ë=
COMP2
))

7236 
	#IS_COMP_COMMON_INSTANCE
(
COMMON_INSTANCE
Ë((COMMON_INSTANCEË=
COMP12_COMMON
)

	)

7239 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CRC
)

	)

7242 
	#IS_DAC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
DAC
)

	)

7245 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Ch™√l1
Ë|| \

	)

7246 ((
INSTANCE
Ë=
DMA1_Ch™√l2
) || \

7247 ((
INSTANCE
Ë=
DMA1_Ch™√l3
) || \

7248 ((
INSTANCE
Ë=
DMA1_Ch™√l4
) || \

7249 ((
INSTANCE
Ë=
DMA1_Ch™√l5
) || \

7250 ((
INSTANCE
Ë=
DMA1_Ch™√l6
) || \

7251 ((
INSTANCE
Ë=
DMA1_Ch™√l7
))

7254 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
Ë|| \

	)

7255 ((
INSTANCE
Ë=
GPIOB
) || \

7256 ((
INSTANCE
Ë=
GPIOC
) || \

7257 ((
INSTANCE
Ë=
GPIOD
) || \

7258 ((
INSTANCE
Ë=
GPIOH
))

7260 
	#IS_GPIO_AF_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
Ë|| \

	)

7261 ((
INSTANCE
Ë=
GPIOB
) || \

7262 ((
INSTANCE
Ë=
GPIOC
) || \

7263 ((
INSTANCE
Ë=
GPIOD
) || \

7264 ((
INSTANCE
Ë=
GPIOH
))

7267 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
Ë|| \

	)

7268 ((
INSTANCE
Ë=
I2C2
))

7271 
	#IS_I2C_WAKEUP_FROMSTOP_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
))

	)

7275 
	#IS_I2S_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
SPI2
)

	)

7278 
	#IS_RNG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RNG
)

	)

7281 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RTC
)

	)

7284 
	#IS_SMBUS_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
I2C1
)

	)

7287 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI1
Ë|| \

	)

7288 ((
INSTANCE
Ë=
SPI2
))

7291 
	#IS_LPTIM_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
LPTIM1
)

	)

7294 
	#IS_TIM_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7295 ((
INSTANCE
Ë=
TIM6
) || \

7296 ((
INSTANCE
Ë=
TIM21
) || \

7297 ((
INSTANCE
Ë=
TIM22
))

7300 
	#IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7301 ((
INSTANCE
Ë=
TIM21
) || \

7302 ((
INSTANCE
Ë=
TIM22
))

7305 
	#IS_TIM_CLOCK_DIVISION_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7306 ((
INSTANCE
Ë=
TIM21
) || \

7307 ((
INSTANCE
Ë=
TIM22
))

7310 
	#IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7311 ((
INSTANCE
Ë=
TIM21
))

7314 
	#IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7315 ((
INSTANCE
Ë=
TIM21
) || \

7316 ((
INSTANCE
Ë=
TIM22
))

7319 
	#IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7320 ((
INSTANCE
Ë=
TIM21
))

7323 
	#IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7324 ((
INSTANCE
Ë=
TIM21
) || \

7325 ((
INSTANCE
Ë=
TIM22
))

7328 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7329 ((
INSTANCE
Ë=
TIM21
) || \

7330 ((
INSTANCE
Ë=
TIM22
))

7333 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7334 ((
INSTANCE
Ë=
TIM21
) || \

7335 ((
INSTANCE
Ë=
TIM22
))

7338 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7341 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7346 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7349 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7350 ((
INSTANCE
Ë=
TIM6
))

7353 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7356 
	#IS_TIM_CCDMA_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7359 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7362 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7363 ((
INSTANCE
Ë=
TIM6
) || \

7364 ((
INSTANCE
Ë=
TIM21
) || \

7365 ((
INSTANCE
Ë=
TIM22
))

7368 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7369 ((
INSTANCE
Ë=
TIM21
) || \

7370 ((
INSTANCE
Ë=
TIM22
))

7375 
	#IS_TIM_ETR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7376 ((
INSTANCE
Ë=
TIM21
) || \

7377 ((
INSTANCE
Ë=
TIM22
))

7380 
	#IS_TIM_REMAP_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7381 ((
INSTANCE
Ë=
TIM21
) || \

7382 ((
INSTANCE
Ë=
TIM22
))

7385 
	#IS_TIM_ENCODER_INTERFACE_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
Ë|| \

	)

7386 ((
INSTANCE
Ë=
TIM21
) || \

7387 ((
INSTANCE
Ë=
TIM22
))

7390 
	#IS_TIM_OCXREF_CLEAR_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM2
)

	)

7393 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
Ë\

	)

7394 ((((
INSTANCE
Ë=
TIM2
) && \

7395 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7396 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7397 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

7398 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

7400 (((
INSTANCE
Ë=
TIM21
) && \

7401 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7402 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))) \

7404 (((
INSTANCE
Ë=
TIM22
) && \

7405 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7406 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))))

7409 
	#IS_UART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7410 ((
INSTANCE
Ë=
USART2
) || \

7411 ((
INSTANCE
Ë=
LPUART1
))

7414 
	#IS_USART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7415 ((
INSTANCE
Ë=
USART2
))

7419 
	#IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7420 ((
INSTANCE
Ë=
USART2
))

7423 
	#IS_UART_HALFDUPLEX_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7424 ((
INSTANCE
Ë=
USART2
) || \

7425 ((
INSTANCE
Ë=
LPUART1
))

7428 
	#IS_UART_LIN_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7429 ((
INSTANCE
Ë=
USART2
))

7432 
	#IS_UART_WAKEUP_FROMSTOP_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7433 ((
INSTANCE
Ë=
USART2
) || \

7434 ((
INSTANCE
Ë=
LPUART1
))

7436 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7437 ((
INSTANCE
Ë=
USART2
) || \

7438 ((
INSTANCE
Ë=
LPUART1
))

7441 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7442 ((
INSTANCE
Ë=
USART2
))

7445 
	#IS_IRDA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
Ë|| \

	)

7446 ((
INSTANCE
Ë=
USART2
))

7449 
	#IS_LPUART_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
LPUART1
)

	)

7452 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
IWDG
)

	)

7455 
	#IS_USB_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
USB
)

	)

7458 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
WWDG
)

	)

7461 
	#IS_LCD_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
LCD
)

	)

7477 
	#LPUART1_IRQn
 
RNG_LPUART1_IRQn


	)

7478 
	#AES_LPUART1_IRQn
 
RNG_LPUART1_IRQn


	)

7479 
	#AES_RNG_LPUART1_IRQn
 
RNG_LPUART1_IRQn


	)

7480 
	#TIM6_IRQn
 
TIM6_DAC_IRQn


	)

7481 
	#RCC_IRQn
 
RCC_CRS_IRQn


	)

7484 
	#LPUART1_IRQH™dÀr
 
RNG_LPUART1_IRQH™dÀr


	)

7485 
	#AES_LPUART1_IRQH™dÀr
 
RNG_LPUART1_IRQH™dÀr


	)

7486 
	#AES_RNG_LPUART1_IRQH™dÀr
 
RNG_LPUART1_IRQH™dÀr


	)

7487 
	#TIM6_IRQH™dÀr
 
TIM6_DAC_IRQH™dÀr


	)

7488 
	#RCC_IRQH™dÀr
 
RCC_CRS_IRQH™dÀr


	)

7498 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h

56 #i‚de‡
__STM32L0xx_H


57 
	#__STM32L0xx_H


	)

59 #ifde‡
__˝lu•lus


70 #i‡!
deföed
 (
STM32L0
)

71 
	#STM32L0


	)

78 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
) && \

79 !
deföed
 (
STM32L031xx
Ë&& !deföed (
STM32L041xx
) && \

80 !
deföed
 (
STM32L051xx
Ë&& !deföed (
STM32L052xx
Ë&& !deföed (
STM32L053xx
) && \

81 !
deföed
 (
STM32L061xx
Ë&& !deföed (
STM32L062xx
Ë&& !deföed (
STM32L063xx
) && \

82 !
deföed
 (
STM32L071xx
Ë&& !deföed (
STM32L072xx
Ë&& !deföed (
STM32L073xx
) && \

83 !
deföed
 (
STM32L081xx
Ë&& !deföed (
STM32L082xx
Ë&& !deföed (
STM32L083xx
) \

105 #i‡!
deföed
 (
USE_HAL_DRIVER
)

117 
	#__STM32L0xx_CMSIS_VERSION_MAIN
 (0x01Ë

	)

118 
	#__STM32L0xx_CMSIS_VERSION_SUB1
 (0x07Ë

	)

119 
	#__STM32L0xx_CMSIS_VERSION_SUB2
 (0x02Ë

	)

120 
	#__STM32L0xx_CMSIS_VERSION_RC
 (0x00Ë

	)

121 
	#__STM32L0xx_CMSIS_VERSION
 ((
__STM32L0xx_CMSIS_VERSION_MAIN
 << 24)\

	)

122 |(
__STM32L0xx_CMSIS_VERSION_SUB1
 << 16)\

123 |(
__STM32L0xx_CMSIS_VERSION_SUB2
 << 8 )\

124 |(
__STM32L0xx_CMSIS_VERSION_RC
))

133 #i‡
deföed
(
STM32L011xx
)

134 
	~"°m32l011xx.h
"

135 #ñi‡
deföed
(
STM32L021xx
)

136 
	~"°m32l021xx.h
"

137 #ñi‡
deföed
(
STM32L031xx
)

138 
	~"°m32l031xx.h
"

139 #ñi‡
deföed
(
STM32L041xx
)

140 
	~"°m32l041xx.h
"

141 #ñi‡
deföed
(
STM32L051xx
)

142 
	~"°m32l051xx.h
"

143 #ñi‡
deföed
(
STM32L052xx
)

144 
	~"°m32l052xx.h
"

145 #ñi‡
deföed
(
STM32L053xx
)

146 
	~"°m32l053xx.h
"

147 #ñi‡
deföed
(
STM32L062xx
)

148 
	~"°m32l062xx.h
"

149 #ñi‡
deföed
(
STM32L063xx
)

150 
	~"°m32l063xx.h
"

151 #ñi‡
deföed
(
STM32L061xx
)

152 
	~"°m32l061xx.h
"

153 #ñi‡
deföed
(
STM32L071xx
)

154 
	~"°m32l071xx.h
"

155 #ñi‡
deföed
(
STM32L072xx
)

156 
	~"°m32l072xx.h
"

157 #ñi‡
deföed
(
STM32L073xx
)

158 
	~"°m32l073xx.h
"

159 #ñi‡
deföed
(
STM32L082xx
)

160 
	~"°m32l082xx.h
"

161 #ñi‡
deföed
(
STM32L083xx
)

162 
	~"°m32l083xx.h
"

163 #ñi‡
deföed
(
STM32L081xx
)

164 
	~"°m32l081xx.h
"

178 
RESET
 = 0,

179 
SET
 = !
RESET


180 } 
	tFœgSètus
, 
	tITSètus
;

184 
DISABLE
 = 0,

185 
ENABLE
 = !
DISABLE


186 } 
	tFun˘i⁄ÆSèã
;

187 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

191 
ERROR
 = 0,

192 
SUCCESS
 = !
ERROR


193 } 
	tEº‹Sètus
;

203 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

205 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

207 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

209 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

211 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

213 
	#READ_REG
(
REG
Ë((REG))

	)

215 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

221 #i‡
deföed
 (
USE_HAL_DRIVER
)

222 
	~"°m32l0xx_hÆ.h
"

225 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h

47 #i‚de‡
__SYSTEM_STM32L0XX_H


48 
	#__SYSTEM_STM32L0XX_H


	)

50 #ifde‡
__˝lu•lus


74 
uöt32_t
 
Sy°emC‹eClock
;

77 c⁄° 
uöt8_t
 
AHBPªscTabÀ
[16];

78 c⁄° 
uöt8_t
 
APBPªscTabÀ
[8];

79 c⁄° 
uöt8_t
 
PLLMulTabÀ
[9];

106 
Sy°emInô
();

107 
Sy°emC‹eClockUpd©e
();

112 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/arm_common_tables.h

41 #i‚de‡
_ARM_COMMON_TABLES_H


42 
	#_ARM_COMMON_TABLES_H


	)

44 
	~"¨m_m©h.h
"

46 c⁄° 
uöt16_t
 
¨mBôRevTabÀ
[1024];

47 c⁄° 
q15_t
 
¨mRecùTabÀQ15
[64];

48 c⁄° 
q31_t
 
¨mRecùTabÀQ31
[64];

51 c⁄° 
Êﬂt32_t
 
twiddÀC€f_16
[32];

52 c⁄° 
Êﬂt32_t
 
twiddÀC€f_32
[64];

53 c⁄° 
Êﬂt32_t
 
twiddÀC€f_64
[128];

54 c⁄° 
Êﬂt32_t
 
twiddÀC€f_128
[256];

55 c⁄° 
Êﬂt32_t
 
twiddÀC€f_256
[512];

56 c⁄° 
Êﬂt32_t
 
twiddÀC€f_512
[1024];

57 c⁄° 
Êﬂt32_t
 
twiddÀC€f_1024
[2048];

58 c⁄° 
Êﬂt32_t
 
twiddÀC€f_2048
[4096];

59 c⁄° 
Êﬂt32_t
 
twiddÀC€f_4096
[8192];

60 
	#twiddÀC€f
 
twiddÀC€f_4096


	)

61 c⁄° 
q31_t
 
twiddÀC€f_16_q31
[24];

62 c⁄° 
q31_t
 
twiddÀC€f_32_q31
[48];

63 c⁄° 
q31_t
 
twiddÀC€f_64_q31
[96];

64 c⁄° 
q31_t
 
twiddÀC€f_128_q31
[192];

65 c⁄° 
q31_t
 
twiddÀC€f_256_q31
[384];

66 c⁄° 
q31_t
 
twiddÀC€f_512_q31
[768];

67 c⁄° 
q31_t
 
twiddÀC€f_1024_q31
[1536];

68 c⁄° 
q31_t
 
twiddÀC€f_2048_q31
[3072];

69 c⁄° 
q31_t
 
twiddÀC€f_4096_q31
[6144];

70 c⁄° 
q15_t
 
twiddÀC€f_16_q15
[24];

71 c⁄° 
q15_t
 
twiddÀC€f_32_q15
[48];

72 c⁄° 
q15_t
 
twiddÀC€f_64_q15
[96];

73 c⁄° 
q15_t
 
twiddÀC€f_128_q15
[192];

74 c⁄° 
q15_t
 
twiddÀC€f_256_q15
[384];

75 c⁄° 
q15_t
 
twiddÀC€f_512_q15
[768];

76 c⁄° 
q15_t
 
twiddÀC€f_1024_q15
[1536];

77 c⁄° 
q15_t
 
twiddÀC€f_2048_q15
[3072];

78 c⁄° 
q15_t
 
twiddÀC€f_4096_q15
[6144];

79 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_32
[32];

80 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_64
[64];

81 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_128
[128];

82 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_256
[256];

83 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_512
[512];

84 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_1024
[1024];

85 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_2048
[2048];

86 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_4096
[4096];

90 
	#ARMBITREVINDEXTABLE__16_TABLE_LENGTH
 ((
uöt16_t
)20 )

	)

91 
	#ARMBITREVINDEXTABLE__32_TABLE_LENGTH
 ((
uöt16_t
)48 )

	)

92 
	#ARMBITREVINDEXTABLE__64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

93 
	#ARMBITREVINDEXTABLE_128_TABLE_LENGTH
 ((
uöt16_t
)208 )

	)

94 
	#ARMBITREVINDEXTABLE_256_TABLE_LENGTH
 ((
uöt16_t
)440 )

	)

95 
	#ARMBITREVINDEXTABLE_512_TABLE_LENGTH
 ((
uöt16_t
)448 )

	)

96 
	#ARMBITREVINDEXTABLE1024_TABLE_LENGTH
 ((
uöt16_t
)1800)

	)

97 
	#ARMBITREVINDEXTABLE2048_TABLE_LENGTH
 ((
uöt16_t
)3808)

	)

98 
	#ARMBITREVINDEXTABLE4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

100 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ16
[
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
];

101 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ32
[
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
];

102 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ64
[
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
];

103 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ128
[
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
];

104 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ256
[
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
];

105 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ512
[
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
];

106 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ1024
[
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
];

107 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ2048
[
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
];

108 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ4096
[
ARMBITREVINDEXTABLE4096_TABLE_LENGTH
];

111 
	#ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
 ((
uöt16_t
)12 )

	)

112 
	#ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
 ((
uöt16_t
)24 )

	)

113 
	#ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

114 
	#ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
 ((
uöt16_t
)112 )

	)

115 
	#ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
 ((
uöt16_t
)240 )

	)

116 
	#ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
 ((
uöt16_t
)480 )

	)

117 
	#ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
 ((
uöt16_t
)992 )

	)

118 
	#ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
 ((
uöt16_t
)1984)

	)

119 
	#ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

121 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_16
[
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
];

122 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_32
[
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
];

123 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_64
[
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
];

124 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_128
[
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
];

125 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_256
[
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
];

126 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_512
[
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
];

127 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_1024
[
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
];

128 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_2048
[
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
];

129 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_4096
[
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
];

132 c⁄° 
Êﬂt32_t
 
söTabÀ_f32
[
FAST_MATH_TABLE_SIZE
 + 1];

133 c⁄° 
q31_t
 
söTabÀ_q31
[
FAST_MATH_TABLE_SIZE
 + 1];

134 c⁄° 
q15_t
 
söTabÀ_q15
[
FAST_MATH_TABLE_SIZE
 + 1];

	@Drivers/CMSIS/Include/arm_const_structs.h

43 #i‚de‡
_ARM_CONST_STRUCTS_H


44 
	#_ARM_CONST_STRUCTS_H


	)

46 
	~"¨m_m©h.h
"

47 
	~"¨m_comm⁄_èbÀs.h
"

49 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn16
;

50 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn32
;

51 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn64
;

52 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn128
;

53 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn256
;

54 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn512
;

55 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn1024
;

56 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn2048
;

57 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn4096
;

59 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn16
;

60 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn32
;

61 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn64
;

62 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn128
;

63 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn256
;

64 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn512
;

65 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn1024
;

66 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn2048
;

67 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn4096
;

69 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn16
;

70 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn32
;

71 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn64
;

72 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn128
;

73 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn256
;

74 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn512
;

75 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn1024
;

76 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn2048
;

77 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn4096
;

	@Drivers/CMSIS/Include/arm_math.h

288 #i‚de‡
_ARM_MATH_H


289 
	#_ARM_MATH_H


	)

292 #i‡
deföed
 ( 
__GNUC__
 )

293 #¥agm®
GCC
 
dügno°ic
 
push


294 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-conversion"

295 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wconversion"

296 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

299 
	#__CMSIS_GENERIC


	)

301 #i‡
deföed
(
ARM_MATH_CM7
)

302 
	~"c‹e_cm7.h
"

303 #ñi‡
deföed
 (
ARM_MATH_CM4
)

304 
	~"c‹e_cm4.h
"

305 #ñi‡
deföed
 (
ARM_MATH_CM3
)

306 
	~"c‹e_cm3.h
"

307 #ñi‡
deföed
 (
ARM_MATH_CM0
)

308 
	~"c‹e_cm0.h
"

309 
	#ARM_MATH_CM0_FAMILY


	)

310 #ñi‡
deföed
 (
ARM_MATH_CM0PLUS
)

311 
	~"c‹e_cm0∂us.h
"

312 
	#ARM_MATH_CM0_FAMILY


	)

317 #unde‡
__CMSIS_GENERIC


318 
	~"°rög.h
"

319 
	~"m©h.h
"

320 #ifde‡ 
__˝lu•lus


330 
	#DELTA_Q31
 (0x100)

	)

331 
	#DELTA_Q15
 0x5

	)

332 
	#INDEX_MASK
 0x0000003F

	)

333 #i‚de‡
PI


334 
	#PI
 3.14159265358979f

	)

341 
	#FAST_MATH_TABLE_SIZE
 512

	)

342 
	#FAST_MATH_Q31_SHIFT
 (32 - 10)

	)

343 
	#FAST_MATH_Q15_SHIFT
 (16 - 10)

	)

344 
	#CONTROLLER_Q31_SHIFT
 (32 - 9)

	)

345 
	#TABLE_SIZE
 256

	)

346 
	#TABLE_SPACING_Q31
 0x400000

	)

347 
	#TABLE_SPACING_Q15
 0x80

	)

354 
	#INPUT_SPACING
 0xB60B61

	)

359 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


360 
	#ALIGN4


	)

362 #i‡
deföed
 (
__GNUC__
)

363 
	#ALIGN4
 
	`__©åibuã__
((
	`Æig√d
(4)))

	)

365 
	#ALIGN4
 
	`__Æign
(4)

	)

375 
ARM_MATH_SUCCESS
 = 0,

376 
ARM_MATH_ARGUMENT_ERROR
 = -1,

377 
ARM_MATH_LENGTH_ERROR
 = -2,

378 
ARM_MATH_SIZE_MISMATCH
 = -3,

379 
ARM_MATH_NANINF
 = -4,

380 
ARM_MATH_SINGULAR
 = -5,

381 
ARM_MATH_TEST_FAILURE
 = -6

382 } 
	t¨m_°©us
;

387 
öt8_t
 
	tq7_t
;

392 
öt16_t
 
	tq15_t
;

397 
öt32_t
 
	tq31_t
;

402 
öt64_t
 
	tq63_t
;

407 
	tÊﬂt32_t
;

412 
	tÊﬂt64_t
;

417 #i‡
deföed
 
__CC_ARM


418 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

419 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

421 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

422 
	#__SIMD32_TYPE
 
öt32_t


	)

423 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

425 #ñi‡
deföed
 
__GNUC__


426 
	#__SIMD32_TYPE
 
öt32_t


	)

427 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

429 #ñi‡
deföed
 
__ICCARM__


430 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

431 
	#CMSIS_UNUSED


	)

433 #ñi‡
deföed
 
__CSMC__


434 
	#__SIMD32_TYPE
 
öt32_t


	)

435 
	#CMSIS_UNUSED


	)

437 #ñi‡
deföed
 
__TASKING__


438 
	#__SIMD32_TYPE
 
__u«lig√d
 
öt32_t


	)

439 
	#CMSIS_UNUSED


	)

442 #îr‹ 
Unknown
 
compûî


445 
	#__SIMD32
(
addr
Ë(*(
__SIMD32_TYPE
 **Ë& (addr))

	)

446 
	#__SIMD32_CONST
(
addr
Ë((
__SIMD32_TYPE
 *)◊ddr))

	)

447 
	#_SIMD32_OFFSET
(
addr
Ë(*(
__SIMD32_TYPE
 *Ë◊ddr))

	)

448 
	#__SIMD64
(
addr
Ë(*(
öt64_t
 **Ë& (addr))

	)

450 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

454 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0x0000FFFFË| \

	)

455 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
) & (int32_t)0xFFFF0000) )

456 
	#__PKHTB
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0xFFFF0000Ë| \

	)

457 (((
öt32_t
)(
ARG2
Ë>> 
ARG3
) & (int32_t)0x0000FFFF) )

465 #i‚de‡
ARM_MATH_BIG_ENDIAN


467 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

468 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

469 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

470 (((
öt32_t
)(
v3
) << 24) & (int32_t)0xFF000000) )

473 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

474 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

475 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

476 (((
öt32_t
)(
v0
) << 24) & (int32_t)0xFF000000) )

484 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

485 
q63_t
 
x
)

487  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

488 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

494 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

495 
q63_t
 
x
)

497  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

498 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

504 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

505 
q31_t
 
x
)

507  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

508 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

514 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

515 
q31_t
 
x
)

517  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

518 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

525 
__INLINE
 
q63_t
 
mu…32x64
(

526 
q63_t
 
x
,

527 
q31_t
 
y
)

529  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

530 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

539 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& ((deföed (
__ICCARM__
)) )

540 
__INLINE
 
uöt32_t
 
__CLZ
(

541 
q31_t
 
d©a
);

543 
__INLINE
 
uöt32_t
 
__CLZ
(

544 
q31_t
 
d©a
)

546 
uöt32_t
 
cou¡
 = 0;

547 
uöt32_t
 
mask
 = 0x80000000;

549 (
d©a
 & 
mask
) == 0)

551 
cou¡
 += 1u;

552 
mask
 = mask >> 1u;

555  (
cou¡
);

563 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

564 
q31_t
 
ö
,

565 
q31_t
 * 
d°
,

566 
q31_t
 * 
pRecùTabÀ
)

568 
q31_t
 
out
;

569 
uöt32_t
 
ãmpVÆ
;

570 
uöt32_t
 
ödex
, 
i
;

571 
uöt32_t
 
signBôs
;

573 if(
ö
 > 0)

575 
signBôs
 = ((
uöt32_t
Ë(
__CLZ
–
ö
) - 1));

579 
signBôs
 = ((
uöt32_t
Ë(
__CLZ
(-
ö
) - 1));

583 
ö
 = (ö << 
signBôs
);

586 
ödex
 = (
uöt32_t
)(
ö
 >> 24);

587 
ödex
 = (ödex & 
INDEX_MASK
);

590 
out
 = 
pRecùTabÀ
[
ödex
];

594 
i
 = 0u; i < 2u; i++)

596 
ãmpVÆ
 = (
uöt32_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31);

597 
ãmpVÆ
 = 0x7FFFFFFFu -ÅempVal;

600 
out
 = 
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30);

604 *
d°
 = 
out
;

607  (
signBôs
 + 1u);

614 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

615 
q15_t
 
ö
,

616 
q15_t
 * 
d°
,

617 
q15_t
 * 
pRecùTabÀ
)

619 
q15_t
 
out
 = 0;

620 
uöt32_t
 
ãmpVÆ
 = 0;

621 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

622 
uöt32_t
 
signBôs
 = 0;

624 if(
ö
 > 0)

626 
signBôs
 = ((
uöt32_t
)(
__CLZ
–
ö
) - 17));

630 
signBôs
 = ((
uöt32_t
)(
__CLZ
(-
ö
) - 17));

634 
ö
 = (ö << 
signBôs
);

637 
ödex
 = (
uöt32_t
)(
ö
 >> 8);

638 
ödex
 = (ödex & 
INDEX_MASK
);

641 
out
 = 
pRecùTabÀ
[
ödex
];

645 
i
 = 0u; i < 2u; i++)

647 
ãmpVÆ
 = (
uöt32_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

648 
ãmpVÆ
 = 0x7FFFu -ÅempVal;

650 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

655 *
d°
 = 
out
;

658  (
signBôs
 + 1);

665 #i‡
deföed
(
ARM_MATH_CM0_FAMILY
)

666 
__INLINE
 
q31_t
 
__SSAT
(

667 
q31_t
 
x
,

668 
uöt32_t
 
y
)

670 
öt32_t
 
posMax
, 
√gMö
;

671 
uöt32_t
 
i
;

673 
posMax
 = 1;

674 
i
 = 0; i < (
y
 - 1); i++)

676 
posMax
 =ÖosMax * 2;

679 if(
x
 > 0)

681 
posMax
 = (posMax - 1);

683 if(
x
 > 
posMax
)

685 
x
 = 
posMax
;

690 
√gMö
 = -
posMax
;

692 if(
x
 < 
√gMö
)

694 
x
 = 
√gMö
;

697  (
x
);

705 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

710 
__INLINE
 
uöt32_t
 
__QADD8
(

711 
uöt32_t
 
x
,

712 
uöt32_t
 
y
)

714 
q31_t
 
r
, 
s
, 
t
, 
u
;

716 
r
 = 
__SSAT
(((((
q31_t
)
x
 << 24Ë>> 24Ë+ (((q31_t)
y
 << 24Ë>> 24)), 8Ë& (
öt32_t
)0x000000FF;

717 
s
 = 
__SSAT
(((((
q31_t
)
x
 << 16Ë>> 24Ë+ (((q31_t)
y
 << 16Ë>> 24)), 8Ë& (
öt32_t
)0x000000FF;

718 
t
 = 
__SSAT
(((((
q31_t
)
x
 << 8Ë>> 24Ë+ (((q31_t)
y
 << 8Ë>> 24)), 8Ë& (
öt32_t
)0x000000FF;

719 
u
 = 
__SSAT
(((((
q31_t
)
x
 ) >> 24Ë+ (((q31_t)
y
 ) >> 24)), 8Ë& (
öt32_t
)0x000000FF;

721  ((
uöt32_t
)((
u
 << 24Ë| (
t
 << 16Ë| (
s
 << 8Ë| (
r
 )));

728 
__INLINE
 
uöt32_t
 
__QSUB8
(

729 
uöt32_t
 
x
,

730 
uöt32_t
 
y
)

732 
q31_t
 
r
, 
s
, 
t
, 
u
;

734 
r
 = 
__SSAT
(((((
q31_t
)
x
 << 24Ë>> 24Ë- (((q31_t)
y
 << 24Ë>> 24)), 8Ë& (
öt32_t
)0x000000FF;

735 
s
 = 
__SSAT
(((((
q31_t
)
x
 << 16Ë>> 24Ë- (((q31_t)
y
 << 16Ë>> 24)), 8Ë& (
öt32_t
)0x000000FF;

736 
t
 = 
__SSAT
(((((
q31_t
)
x
 << 8Ë>> 24Ë- (((q31_t)
y
 << 8Ë>> 24)), 8Ë& (
öt32_t
)0x000000FF;

737 
u
 = 
__SSAT
(((((
q31_t
)
x
 ) >> 24Ë- (((q31_t)
y
 ) >> 24)), 8Ë& (
öt32_t
)0x000000FF;

739  ((
uöt32_t
)((
u
 << 24Ë| (
t
 << 16Ë| (
s
 << 8Ë| (
r
 )));

746 
__INLINE
 
uöt32_t
 
__QADD16
(

747 
uöt32_t
 
x
,

748 
uöt32_t
 
y
)

751 
q31_t
 
r
 = 0, 
s
 = 0;

753 
r
 = 
__SSAT
(((((
q31_t
)
x
 << 16Ë>> 16Ë+ (((q31_t)
y
 << 16Ë>> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

754 
s
 = 
__SSAT
(((((
q31_t
)
x
 ) >> 16Ë+ (((q31_t)
y
 ) >> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

756  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

763 
__INLINE
 
uöt32_t
 
__SHADD16
(

764 
uöt32_t
 
x
,

765 
uöt32_t
 
y
)

767 
q31_t
 
r
, 
s
;

769 
r
 = (((((
q31_t
)
x
 << 16Ë>> 16Ë+ (((q31_t)
y
 << 16Ë>> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

770 
s
 = (((((
q31_t
)
x
 ) >> 16Ë+ (((q31_t)
y
 ) >> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

772  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

779 
__INLINE
 
uöt32_t
 
__QSUB16
(

780 
uöt32_t
 
x
,

781 
uöt32_t
 
y
)

783 
q31_t
 
r
, 
s
;

785 
r
 = 
__SSAT
(((((
q31_t
)
x
 << 16Ë>> 16Ë- (((q31_t)
y
 << 16Ë>> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

786 
s
 = 
__SSAT
(((((
q31_t
)
x
 ) >> 16Ë- (((q31_t)
y
 ) >> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

788  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

795 
__INLINE
 
uöt32_t
 
__SHSUB16
(

796 
uöt32_t
 
x
,

797 
uöt32_t
 
y
)

799 
q31_t
 
r
, 
s
;

801 
r
 = (((((
q31_t
)
x
 << 16Ë>> 16Ë- (((q31_t)
y
 << 16Ë>> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

802 
s
 = (((((
q31_t
)
x
 ) >> 16Ë- (((q31_t)
y
 ) >> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

804  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

811 
__INLINE
 
uöt32_t
 
__QASX
(

812 
uöt32_t
 
x
,

813 
uöt32_t
 
y
)

815 
q31_t
 
r
, 
s
;

817 
r
 = 
__SSAT
(((((
q31_t
)
x
 << 16Ë>> 16Ë- (((q31_t)
y
 ) >> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

818 
s
 = 
__SSAT
(((((
q31_t
)
x
 ) >> 16Ë+ (((q31_t)
y
 << 16Ë>> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

820  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

827 
__INLINE
 
uöt32_t
 
__SHASX
(

828 
uöt32_t
 
x
,

829 
uöt32_t
 
y
)

831 
q31_t
 
r
, 
s
;

833 
r
 = (((((
q31_t
)
x
 << 16Ë>> 16Ë- (((q31_t)
y
 ) >> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

834 
s
 = (((((
q31_t
)
x
 ) >> 16Ë+ (((q31_t)
y
 << 16Ë>> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

836  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

843 
__INLINE
 
uöt32_t
 
__QSAX
(

844 
uöt32_t
 
x
,

845 
uöt32_t
 
y
)

847 
q31_t
 
r
, 
s
;

849 
r
 = 
__SSAT
(((((
q31_t
)
x
 << 16Ë>> 16Ë+ (((q31_t)
y
 ) >> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

850 
s
 = 
__SSAT
(((((
q31_t
)
x
 ) >> 16Ë- (((q31_t)
y
 << 16Ë>> 16)), 16Ë& (
öt32_t
)0x0000FFFF;

852  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

859 
__INLINE
 
uöt32_t
 
__SHSAX
(

860 
uöt32_t
 
x
,

861 
uöt32_t
 
y
)

863 
q31_t
 
r
, 
s
;

865 
r
 = (((((
q31_t
)
x
 << 16Ë>> 16Ë+ (((q31_t)
y
 ) >> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

866 
s
 = (((((
q31_t
)
x
 ) >> 16Ë- (((q31_t)
y
 << 16Ë>> 16)Ë>> 1Ë& (
öt32_t
)0x0000FFFF;

868  ((
uöt32_t
)((
s
 << 16Ë| (
r
 )));

875 
__INLINE
 
uöt32_t
 
__SMUSDX
(

876 
uöt32_t
 
x
,

877 
uöt32_t
 
y
)

879  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 ) >> 16)) -

880 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 << 16) >> 16)) ));

886 
__INLINE
 
uöt32_t
 
__SMUADX
(

887 
uöt32_t
 
x
,

888 
uöt32_t
 
y
)

890  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 ) >> 16)) +

891 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 << 16) >> 16)) ));

898 
__INLINE
 
öt32_t
 
__QADD
(

899 
öt32_t
 
x
,

900 
öt32_t
 
y
)

902  ((
öt32_t
)(
˛ù_q63_to_q31
((
q63_t
)
x
 + (
q31_t
)
y
)));

909 
__INLINE
 
öt32_t
 
__QSUB
(

910 
öt32_t
 
x
,

911 
öt32_t
 
y
)

913  ((
öt32_t
)(
˛ù_q63_to_q31
((
q63_t
)
x
 - (
q31_t
)
y
)));

920 
__INLINE
 
uöt32_t
 
__SMLAD
(

921 
uöt32_t
 
x
,

922 
uöt32_t
 
y
,

923 
uöt32_t
 
sum
)

925  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 << 16) >> 16)) +

926 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 ) >> 16)) +

927 –((
q31_t
)
sum
 ) ) ));

934 
__INLINE
 
uöt32_t
 
__SMLADX
(

935 
uöt32_t
 
x
,

936 
uöt32_t
 
y
,

937 
uöt32_t
 
sum
)

939  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 ) >> 16)) +

940 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 << 16) >> 16)) +

941 –((
q31_t
)
sum
 ) ) ));

948 
__INLINE
 
uöt32_t
 
__SMLSDX
(

949 
uöt32_t
 
x
,

950 
uöt32_t
 
y
,

951 
uöt32_t
 
sum
)

953  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 ) >> 16)) -

954 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 << 16) >> 16)) +

955 –((
q31_t
)
sum
 ) ) ));

962 
__INLINE
 
uöt64_t
 
__SMLALD
(

963 
uöt32_t
 
x
,

964 
uöt32_t
 
y
,

965 
uöt64_t
 
sum
)

968  ((
uöt64_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 << 16) >> 16)) +

969 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 ) >> 16)) +

970 –((
q63_t
)
sum
 ) ) ));

977 
__INLINE
 
uöt64_t
 
__SMLALDX
(

978 
uöt32_t
 
x
,

979 
uöt32_t
 
y
,

980 
uöt64_t
 
sum
)

983  ((
uöt64_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 ) >> 16)) +

984 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 << 16) >> 16)) +

985 –((
q63_t
)
sum
 ) ) ));

992 
__INLINE
 
uöt32_t
 
__SMUAD
(

993 
uöt32_t
 
x
,

994 
uöt32_t
 
y
)

996  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 << 16) >> 16)) +

997 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 ) >> 16)) ));

1004 
__INLINE
 
uöt32_t
 
__SMUSD
(

1005 
uöt32_t
 
x
,

1006 
uöt32_t
 
y
)

1008  ((
uöt32_t
)(((((
q31_t
)
x
 << 16Ë>> 16Ë* (((q31_t)
y
 << 16) >> 16)) -

1009 ((((
q31_t
)
x
 ) >> 16Ë* (((q31_t)
y
 ) >> 16)) ));

1016 
__INLINE
 
uöt32_t
 
__SXTB16
(

1017 
uöt32_t
 
x
)

1019  ((
uöt32_t
)(((((
q31_t
)
x
 << 24) >> 24) & (q31_t)0x0000FFFF) |

1020 ((((
q31_t
)
x
 << 8) >> 8) & (q31_t)0xFFFF0000) ));

1031 
uöt16_t
 
numT≠s
;

1032 
q7_t
 *
pSèã
;

1033 
q7_t
 *
pC€ffs
;

1034 } 
	t¨m_fú_ö°™˚_q7
;

1041 
uöt16_t
 
numT≠s
;

1042 
q15_t
 *
pSèã
;

1043 
q15_t
 *
pC€ffs
;

1044 } 
	t¨m_fú_ö°™˚_q15
;

1051 
uöt16_t
 
numT≠s
;

1052 
q31_t
 *
pSèã
;

1053 
q31_t
 *
pC€ffs
;

1054 } 
	t¨m_fú_ö°™˚_q31
;

1061 
uöt16_t
 
numT≠s
;

1062 
Êﬂt32_t
 *
pSèã
;

1063 
Êﬂt32_t
 *
pC€ffs
;

1064 } 
	t¨m_fú_ö°™˚_f32
;

1074 
¨m_fú_q7
(

1075 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1076 
q7_t
 * 
pSrc
,

1077 
q7_t
 * 
pD°
,

1078 
uöt32_t
 
blockSize
);

1089 
¨m_fú_öô_q7
(

1090 
¨m_fú_ö°™˚_q7
 * 
S
,

1091 
uöt16_t
 
numT≠s
,

1092 
q7_t
 * 
pC€ffs
,

1093 
q7_t
 * 
pSèã
,

1094 
uöt32_t
 
blockSize
);

1104 
¨m_fú_q15
(

1105 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1106 
q15_t
 * 
pSrc
,

1107 
q15_t
 * 
pD°
,

1108 
uöt32_t
 
blockSize
);

1118 
¨m_fú_Á°_q15
(

1119 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1120 
q15_t
 * 
pSrc
,

1121 
q15_t
 * 
pD°
,

1122 
uöt32_t
 
blockSize
);

1135 
¨m_°©us
 
¨m_fú_öô_q15
(

1136 
¨m_fú_ö°™˚_q15
 * 
S
,

1137 
uöt16_t
 
numT≠s
,

1138 
q15_t
 * 
pC€ffs
,

1139 
q15_t
 * 
pSèã
,

1140 
uöt32_t
 
blockSize
);

1150 
¨m_fú_q31
(

1151 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1152 
q31_t
 * 
pSrc
,

1153 
q31_t
 * 
pD°
,

1154 
uöt32_t
 
blockSize
);

1164 
¨m_fú_Á°_q31
(

1165 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1166 
q31_t
 * 
pSrc
,

1167 
q31_t
 * 
pD°
,

1168 
uöt32_t
 
blockSize
);

1179 
¨m_fú_öô_q31
(

1180 
¨m_fú_ö°™˚_q31
 * 
S
,

1181 
uöt16_t
 
numT≠s
,

1182 
q31_t
 * 
pC€ffs
,

1183 
q31_t
 * 
pSèã
,

1184 
uöt32_t
 
blockSize
);

1194 
¨m_fú_f32
(

1195 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1196 
Êﬂt32_t
 * 
pSrc
,

1197 
Êﬂt32_t
 * 
pD°
,

1198 
uöt32_t
 
blockSize
);

1209 
¨m_fú_öô_f32
(

1210 
¨m_fú_ö°™˚_f32
 * 
S
,

1211 
uöt16_t
 
numT≠s
,

1212 
Êﬂt32_t
 * 
pC€ffs
,

1213 
Êﬂt32_t
 * 
pSèã
,

1214 
uöt32_t
 
blockSize
);

1222 
öt8_t
 
numSèges
;

1223 
q15_t
 *
pSèã
;

1224 
q15_t
 *
pC€ffs
;

1225 
öt8_t
 
po°Shi·
;

1226 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1233 
uöt32_t
 
numSèges
;

1234 
q31_t
 *
pSèã
;

1235 
q31_t
 *
pC€ffs
;

1236 
uöt8_t
 
po°Shi·
;

1237 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1244 
uöt32_t
 
numSèges
;

1245 
Êﬂt32_t
 *
pSèã
;

1246 
Êﬂt32_t
 *
pC€ffs
;

1247 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1257 
¨m_biquad_ˇsˇde_df1_q15
(

1258 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1259 
q15_t
 * 
pSrc
,

1260 
q15_t
 * 
pD°
,

1261 
uöt32_t
 
blockSize
);

1272 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1273 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1274 
uöt8_t
 
numSèges
,

1275 
q15_t
 * 
pC€ffs
,

1276 
q15_t
 * 
pSèã
,

1277 
öt8_t
 
po°Shi·
);

1287 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1288 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1289 
q15_t
 * 
pSrc
,

1290 
q15_t
 * 
pD°
,

1291 
uöt32_t
 
blockSize
);

1301 
¨m_biquad_ˇsˇde_df1_q31
(

1302 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1303 
q31_t
 * 
pSrc
,

1304 
q31_t
 * 
pD°
,

1305 
uöt32_t
 
blockSize
);

1315 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1316 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1317 
q31_t
 * 
pSrc
,

1318 
q31_t
 * 
pD°
,

1319 
uöt32_t
 
blockSize
);

1330 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1331 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1332 
uöt8_t
 
numSèges
,

1333 
q31_t
 * 
pC€ffs
,

1334 
q31_t
 * 
pSèã
,

1335 
öt8_t
 
po°Shi·
);

1345 
¨m_biquad_ˇsˇde_df1_f32
(

1346 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1347 
Êﬂt32_t
 * 
pSrc
,

1348 
Êﬂt32_t
 * 
pD°
,

1349 
uöt32_t
 
blockSize
);

1359 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1360 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1361 
uöt8_t
 
numSèges
,

1362 
Êﬂt32_t
 * 
pC€ffs
,

1363 
Êﬂt32_t
 * 
pSèã
);

1371 
uöt16_t
 
numRows
;

1372 
uöt16_t
 
numCﬁs
;

1373 
Êﬂt32_t
 *
pD©a
;

1374 } 
	t¨m_m©rix_ö°™˚_f32
;

1382 
uöt16_t
 
numRows
;

1383 
uöt16_t
 
numCﬁs
;

1384 
Êﬂt64_t
 *
pD©a
;

1385 } 
	t¨m_m©rix_ö°™˚_f64
;

1392 
uöt16_t
 
numRows
;

1393 
uöt16_t
 
numCﬁs
;

1394 
q15_t
 *
pD©a
;

1395 } 
	t¨m_m©rix_ö°™˚_q15
;

1402 
uöt16_t
 
numRows
;

1403 
uöt16_t
 
numCﬁs
;

1404 
q31_t
 *
pD©a
;

1405 } 
	t¨m_m©rix_ö°™˚_q31
;

1416 
¨m_°©us
 
¨m_m©_add_f32
(

1417 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1418 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1419 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1430 
¨m_°©us
 
¨m_m©_add_q15
(

1431 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1432 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1433 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1444 
¨m_°©us
 
¨m_m©_add_q31
(

1445 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1446 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1447 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1458 
¨m_°©us
 
¨m_m©_cm∂x_mu…_f32
(

1459 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1460 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1461 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1472 
¨m_°©us
 
¨m_m©_cm∂x_mu…_q15
(

1473 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1474 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1475 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1476 
q15_t
 * 
pS¸©ch
);

1487 
¨m_°©us
 
¨m_m©_cm∂x_mu…_q31
(

1488 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1489 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1490 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1500 
¨m_°©us
 
¨m_m©_å™s_f32
(

1501 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1502 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1512 
¨m_°©us
 
¨m_m©_å™s_q15
(

1513 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1514 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1524 
¨m_°©us
 
¨m_m©_å™s_q31
(

1525 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1526 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1537 
¨m_°©us
 
¨m_m©_mu…_f32
(

1538 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1539 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1540 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1552 
¨m_°©us
 
¨m_m©_mu…_q15
(

1553 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1554 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1555 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1556 
q15_t
 * 
pSèã
);

1568 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1569 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1570 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1571 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1572 
q15_t
 * 
pSèã
);

1583 
¨m_°©us
 
¨m_m©_mu…_q31
(

1584 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1585 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1586 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1597 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1598 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1599 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1600 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1611 
¨m_°©us
 
¨m_m©_sub_f32
(

1612 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1613 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1614 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1625 
¨m_°©us
 
¨m_m©_sub_q15
(

1626 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1627 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1628 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1639 
¨m_°©us
 
¨m_m©_sub_q31
(

1640 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1641 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1642 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1653 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1654 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1655 
Êﬂt32_t
 
sˇÀ
,

1656 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1668 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1669 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1670 
q15_t
 
sˇÀFø˘
,

1671 
öt32_t
 
shi·
,

1672 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1684 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1685 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1686 
q31_t
 
sˇÀFø˘
,

1687 
öt32_t
 
shi·
,

1688 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1698 
¨m_m©_öô_q31
(

1699 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1700 
uöt16_t
 
nRows
,

1701 
uöt16_t
 
nCﬁumns
,

1702 
q31_t
 * 
pD©a
);

1712 
¨m_m©_öô_q15
(

1713 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1714 
uöt16_t
 
nRows
,

1715 
uöt16_t
 
nCﬁumns
,

1716 
q15_t
 * 
pD©a
);

1726 
¨m_m©_öô_f32
(

1727 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1728 
uöt16_t
 
nRows
,

1729 
uöt16_t
 
nCﬁumns
,

1730 
Êﬂt32_t
 * 
pD©a
);

1739 
q15_t
 
A0
;

1740 #ifde‡
ARM_MATH_CM0_FAMILY


1741 
q15_t
 
A1
;

1742 
q15_t
 
A2
;

1744 
q31_t
 
A1
;

1746 
q15_t
 
°©e
[3];

1747 
q15_t
 
Kp
;

1748 
q15_t
 
Ki
;

1749 
q15_t
 
Kd
;

1750 } 
	t¨m_pid_ö°™˚_q15
;

1757 
q31_t
 
A0
;

1758 
q31_t
 
A1
;

1759 
q31_t
 
A2
;

1760 
q31_t
 
°©e
[3];

1761 
q31_t
 
Kp
;

1762 
q31_t
 
Ki
;

1763 
q31_t
 
Kd
;

1764 } 
	t¨m_pid_ö°™˚_q31
;

1771 
Êﬂt32_t
 
A0
;

1772 
Êﬂt32_t
 
A1
;

1773 
Êﬂt32_t
 
A2
;

1774 
Êﬂt32_t
 
°©e
[3];

1775 
Êﬂt32_t
 
Kp
;

1776 
Êﬂt32_t
 
Ki
;

1777 
Êﬂt32_t
 
Kd
;

1778 } 
	t¨m_pid_ö°™˚_f32
;

1787 
¨m_pid_öô_f32
(

1788 
¨m_pid_ö°™˚_f32
 * 
S
,

1789 
öt32_t
 
ª£tSèãFœg
);

1796 
¨m_pid_ª£t_f32
(

1797 
¨m_pid_ö°™˚_f32
 * 
S
);

1805 
¨m_pid_öô_q31
(

1806 
¨m_pid_ö°™˚_q31
 * 
S
,

1807 
öt32_t
 
ª£tSèãFœg
);

1815 
¨m_pid_ª£t_q31
(

1816 
¨m_pid_ö°™˚_q31
 * 
S
);

1824 
¨m_pid_öô_q15
(

1825 
¨m_pid_ö°™˚_q15
 * 
S
,

1826 
öt32_t
 
ª£tSèãFœg
);

1833 
¨m_pid_ª£t_q15
(

1834 
¨m_pid_ö°™˚_q15
 * 
S
);

1842 
uöt32_t
 
nVÆues
;

1843 
Êﬂt32_t
 
x1
;

1844 
Êﬂt32_t
 
xS∑cög
;

1845 
Êﬂt32_t
 *
pYD©a
;

1846 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1853 
uöt16_t
 
numRows
;

1854 
uöt16_t
 
numCﬁs
;

1855 
Êﬂt32_t
 *
pD©a
;

1856 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1863 
uöt16_t
 
numRows
;

1864 
uöt16_t
 
numCﬁs
;

1865 
q31_t
 *
pD©a
;

1866 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1873 
uöt16_t
 
numRows
;

1874 
uöt16_t
 
numCﬁs
;

1875 
q15_t
 *
pD©a
;

1876 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1883 
uöt16_t
 
numRows
;

1884 
uöt16_t
 
numCﬁs
;

1885 
q7_t
 *
pD©a
;

1886 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1896 
¨m_mu…_q7
(

1897 
q7_t
 * 
pSrcA
,

1898 
q7_t
 * 
pSrcB
,

1899 
q7_t
 * 
pD°
,

1900 
uöt32_t
 
blockSize
);

1910 
¨m_mu…_q15
(

1911 
q15_t
 * 
pSrcA
,

1912 
q15_t
 * 
pSrcB
,

1913 
q15_t
 * 
pD°
,

1914 
uöt32_t
 
blockSize
);

1924 
¨m_mu…_q31
(

1925 
q31_t
 * 
pSrcA
,

1926 
q31_t
 * 
pSrcB
,

1927 
q31_t
 * 
pD°
,

1928 
uöt32_t
 
blockSize
);

1938 
¨m_mu…_f32
(

1939 
Êﬂt32_t
 * 
pSrcA
,

1940 
Êﬂt32_t
 * 
pSrcB
,

1941 
Êﬂt32_t
 * 
pD°
,

1942 
uöt32_t
 
blockSize
);

1950 
uöt16_t
 
f·Lí
;

1951 
uöt8_t
 
if·Fœg
;

1952 
uöt8_t
 
bôRevî£Fœg
;

1953 
q15_t
 *
pTwiddÀ
;

1954 
uöt16_t
 *
pBôRevTabÀ
;

1955 
uöt16_t
 
twidC€fModifõr
;

1956 
uöt16_t
 
bôRevFa˘‹
;

1957 } 
	t¨m_cf·_ødix2_ö°™˚_q15
;

1960 
¨m_°©us
 
¨m_cf·_ødix2_öô_q15
(

1961 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

1962 
uöt16_t
 
f·Lí
,

1963 
uöt8_t
 
if·Fœg
,

1964 
uöt8_t
 
bôRevî£Fœg
);

1967 
¨m_cf·_ødix2_q15
(

1968 c⁄° 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

1969 
q15_t
 * 
pSrc
);

1977 
uöt16_t
 
f·Lí
;

1978 
uöt8_t
 
if·Fœg
;

1979 
uöt8_t
 
bôRevî£Fœg
;

1980 
q15_t
 *
pTwiddÀ
;

1981 
uöt16_t
 *
pBôRevTabÀ
;

1982 
uöt16_t
 
twidC€fModifõr
;

1983 
uöt16_t
 
bôRevFa˘‹
;

1984 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1987 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1988 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1989 
uöt16_t
 
f·Lí
,

1990 
uöt8_t
 
if·Fœg
,

1991 
uöt8_t
 
bôRevî£Fœg
);

1994 
¨m_cf·_ødix4_q15
(

1995 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1996 
q15_t
 * 
pSrc
);

2003 
uöt16_t
 
f·Lí
;

2004 
uöt8_t
 
if·Fœg
;

2005 
uöt8_t
 
bôRevî£Fœg
;

2006 
q31_t
 *
pTwiddÀ
;

2007 
uöt16_t
 *
pBôRevTabÀ
;

2008 
uöt16_t
 
twidC€fModifõr
;

2009 
uöt16_t
 
bôRevFa˘‹
;

2010 } 
	t¨m_cf·_ødix2_ö°™˚_q31
;

2013 
¨m_°©us
 
¨m_cf·_ødix2_öô_q31
(

2014 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2015 
uöt16_t
 
f·Lí
,

2016 
uöt8_t
 
if·Fœg
,

2017 
uöt8_t
 
bôRevî£Fœg
);

2020 
¨m_cf·_ødix2_q31
(

2021 c⁄° 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2022 
q31_t
 * 
pSrc
);

2029 
uöt16_t
 
f·Lí
;

2030 
uöt8_t
 
if·Fœg
;

2031 
uöt8_t
 
bôRevî£Fœg
;

2032 
q31_t
 *
pTwiddÀ
;

2033 
uöt16_t
 *
pBôRevTabÀ
;

2034 
uöt16_t
 
twidC€fModifõr
;

2035 
uöt16_t
 
bôRevFa˘‹
;

2036 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

2039 
¨m_cf·_ødix4_q31
(

2040 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2041 
q31_t
 * 
pSrc
);

2044 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

2045 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2046 
uöt16_t
 
f·Lí
,

2047 
uöt8_t
 
if·Fœg
,

2048 
uöt8_t
 
bôRevî£Fœg
);

2055 
uöt16_t
 
f·Lí
;

2056 
uöt8_t
 
if·Fœg
;

2057 
uöt8_t
 
bôRevî£Fœg
;

2058 
Êﬂt32_t
 *
pTwiddÀ
;

2059 
uöt16_t
 *
pBôRevTabÀ
;

2060 
uöt16_t
 
twidC€fModifõr
;

2061 
uöt16_t
 
bôRevFa˘‹
;

2062 
Êﬂt32_t
 
⁄ebyf·Lí
;

2063 } 
	t¨m_cf·_ødix2_ö°™˚_f32
;

2066 
¨m_°©us
 
¨m_cf·_ødix2_öô_f32
(

2067 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2068 
uöt16_t
 
f·Lí
,

2069 
uöt8_t
 
if·Fœg
,

2070 
uöt8_t
 
bôRevî£Fœg
);

2073 
¨m_cf·_ødix2_f32
(

2074 c⁄° 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2075 
Êﬂt32_t
 * 
pSrc
);

2082 
uöt16_t
 
f·Lí
;

2083 
uöt8_t
 
if·Fœg
;

2084 
uöt8_t
 
bôRevî£Fœg
;

2085 
Êﬂt32_t
 *
pTwiddÀ
;

2086 
uöt16_t
 *
pBôRevTabÀ
;

2087 
uöt16_t
 
twidC€fModifõr
;

2088 
uöt16_t
 
bôRevFa˘‹
;

2089 
Êﬂt32_t
 
⁄ebyf·Lí
;

2090 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

2093 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2094 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2095 
uöt16_t
 
f·Lí
,

2096 
uöt8_t
 
if·Fœg
,

2097 
uöt8_t
 
bôRevî£Fœg
);

2100 
¨m_cf·_ødix4_f32
(

2101 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2102 
Êﬂt32_t
 * 
pSrc
);

2109 
uöt16_t
 
f·Lí
;

2110 c⁄° 
q15_t
 *
pTwiddÀ
;

2111 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2112 
uöt16_t
 
bôRevLígth
;

2113 } 
	t¨m_cf·_ö°™˚_q15
;

2115 
¨m_cf·_q15
(

2116 c⁄° 
¨m_cf·_ö°™˚_q15
 * 
S
,

2117 
q15_t
 * 
p1
,

2118 
uöt8_t
 
if·Fœg
,

2119 
uöt8_t
 
bôRevî£Fœg
);

2126 
uöt16_t
 
f·Lí
;

2127 c⁄° 
q31_t
 *
pTwiddÀ
;

2128 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2129 
uöt16_t
 
bôRevLígth
;

2130 } 
	t¨m_cf·_ö°™˚_q31
;

2132 
¨m_cf·_q31
(

2133 c⁄° 
¨m_cf·_ö°™˚_q31
 * 
S
,

2134 
q31_t
 * 
p1
,

2135 
uöt8_t
 
if·Fœg
,

2136 
uöt8_t
 
bôRevî£Fœg
);

2143 
uöt16_t
 
f·Lí
;

2144 c⁄° 
Êﬂt32_t
 *
pTwiddÀ
;

2145 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2146 
uöt16_t
 
bôRevLígth
;

2147 } 
	t¨m_cf·_ö°™˚_f32
;

2149 
¨m_cf·_f32
(

2150 c⁄° 
¨m_cf·_ö°™˚_f32
 * 
S
,

2151 
Êﬂt32_t
 * 
p1
,

2152 
uöt8_t
 
if·Fœg
,

2153 
uöt8_t
 
bôRevî£Fœg
);

2160 
uöt32_t
 
f·LíRól
;

2161 
uöt8_t
 
if·FœgR
;

2162 
uöt8_t
 
bôRevî£FœgR
;

2163 
uöt32_t
 
twidC€fRModifõr
;

2164 
q15_t
 *
pTwiddÀARól
;

2165 
q15_t
 *
pTwiddÀBRól
;

2166 c⁄° 
¨m_cf·_ö°™˚_q15
 *
pCf·
;

2167 } 
	t¨m_rf·_ö°™˚_q15
;

2169 
¨m_°©us
 
¨m_rf·_öô_q15
(

2170 
¨m_rf·_ö°™˚_q15
 * 
S
,

2171 
uöt32_t
 
f·LíRól
,

2172 
uöt32_t
 
if·FœgR
,

2173 
uöt32_t
 
bôRevî£Fœg
);

2175 
¨m_rf·_q15
(

2176 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2177 
q15_t
 * 
pSrc
,

2178 
q15_t
 * 
pD°
);

2185 
uöt32_t
 
f·LíRól
;

2186 
uöt8_t
 
if·FœgR
;

2187 
uöt8_t
 
bôRevî£FœgR
;

2188 
uöt32_t
 
twidC€fRModifõr
;

2189 
q31_t
 *
pTwiddÀARól
;

2190 
q31_t
 *
pTwiddÀBRól
;

2191 c⁄° 
¨m_cf·_ö°™˚_q31
 *
pCf·
;

2192 } 
	t¨m_rf·_ö°™˚_q31
;

2194 
¨m_°©us
 
¨m_rf·_öô_q31
(

2195 
¨m_rf·_ö°™˚_q31
 * 
S
,

2196 
uöt32_t
 
f·LíRól
,

2197 
uöt32_t
 
if·FœgR
,

2198 
uöt32_t
 
bôRevî£Fœg
);

2200 
¨m_rf·_q31
(

2201 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2202 
q31_t
 * 
pSrc
,

2203 
q31_t
 * 
pD°
);

2210 
uöt32_t
 
f·LíRól
;

2211 
uöt16_t
 
f·LíBy2
;

2212 
uöt8_t
 
if·FœgR
;

2213 
uöt8_t
 
bôRevî£FœgR
;

2214 
uöt32_t
 
twidC€fRModifõr
;

2215 
Êﬂt32_t
 *
pTwiddÀARól
;

2216 
Êﬂt32_t
 *
pTwiddÀBRól
;

2217 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2218 } 
	t¨m_rf·_ö°™˚_f32
;

2220 
¨m_°©us
 
¨m_rf·_öô_f32
(

2221 
¨m_rf·_ö°™˚_f32
 * 
S
,

2222 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2223 
uöt32_t
 
f·LíRól
,

2224 
uöt32_t
 
if·FœgR
,

2225 
uöt32_t
 
bôRevî£Fœg
);

2227 
¨m_rf·_f32
(

2228 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2229 
Êﬂt32_t
 * 
pSrc
,

2230 
Êﬂt32_t
 * 
pD°
);

2237 
¨m_cf·_ö°™˚_f32
 
Söt
;

2238 
uöt16_t
 
f·LíRFFT
;

2239 
Êﬂt32_t
 * 
pTwiddÀRFFT
;

2240 } 
	t¨m_rf·_Á°_ö°™˚_f32
 ;

2242 
¨m_°©us
 
¨m_rf·_Á°_öô_f32
 (

2243 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2244 
uöt16_t
 
f·Lí
);

2246 
¨m_rf·_Á°_f32
(

2247 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2248 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
,

2249 
uöt8_t
 
if·Fœg
);

2256 
uöt16_t
 
N
;

2257 
uöt16_t
 
Nby2
;

2258 
Êﬂt32_t
 
n‹mÆize
;

2259 
Êﬂt32_t
 *
pTwiddÀ
;

2260 
Êﬂt32_t
 *
pCosFa˘‹
;

2261 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2262 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2263 } 
	t¨m_d˘4_ö°™˚_f32
;

2276 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2277 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2278 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2279 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2280 
uöt16_t
 
N
,

2281 
uöt16_t
 
Nby2
,

2282 
Êﬂt32_t
 
n‹mÆize
);

2291 
¨m_d˘4_f32
(

2292 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2293 
Êﬂt32_t
 * 
pSèã
,

2294 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2302 
uöt16_t
 
N
;

2303 
uöt16_t
 
Nby2
;

2304 
q31_t
 
n‹mÆize
;

2305 
q31_t
 *
pTwiddÀ
;

2306 
q31_t
 *
pCosFa˘‹
;

2307 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2308 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2309 } 
	t¨m_d˘4_ö°™˚_q31
;

2322 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2323 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2324 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2325 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2326 
uöt16_t
 
N
,

2327 
uöt16_t
 
Nby2
,

2328 
q31_t
 
n‹mÆize
);

2337 
¨m_d˘4_q31
(

2338 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2339 
q31_t
 * 
pSèã
,

2340 
q31_t
 * 
pI∆öeBuf„r
);

2348 
uöt16_t
 
N
;

2349 
uöt16_t
 
Nby2
;

2350 
q15_t
 
n‹mÆize
;

2351 
q15_t
 *
pTwiddÀ
;

2352 
q15_t
 *
pCosFa˘‹
;

2353 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2354 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2355 } 
	t¨m_d˘4_ö°™˚_q15
;

2368 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2369 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2370 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2371 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2372 
uöt16_t
 
N
,

2373 
uöt16_t
 
Nby2
,

2374 
q15_t
 
n‹mÆize
);

2383 
¨m_d˘4_q15
(

2384 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2385 
q15_t
 * 
pSèã
,

2386 
q15_t
 * 
pI∆öeBuf„r
);

2396 
¨m_add_f32
(

2397 
Êﬂt32_t
 * 
pSrcA
,

2398 
Êﬂt32_t
 * 
pSrcB
,

2399 
Êﬂt32_t
 * 
pD°
,

2400 
uöt32_t
 
blockSize
);

2410 
¨m_add_q7
(

2411 
q7_t
 * 
pSrcA
,

2412 
q7_t
 * 
pSrcB
,

2413 
q7_t
 * 
pD°
,

2414 
uöt32_t
 
blockSize
);

2424 
¨m_add_q15
(

2425 
q15_t
 * 
pSrcA
,

2426 
q15_t
 * 
pSrcB
,

2427 
q15_t
 * 
pD°
,

2428 
uöt32_t
 
blockSize
);

2438 
¨m_add_q31
(

2439 
q31_t
 * 
pSrcA
,

2440 
q31_t
 * 
pSrcB
,

2441 
q31_t
 * 
pD°
,

2442 
uöt32_t
 
blockSize
);

2452 
¨m_sub_f32
(

2453 
Êﬂt32_t
 * 
pSrcA
,

2454 
Êﬂt32_t
 * 
pSrcB
,

2455 
Êﬂt32_t
 * 
pD°
,

2456 
uöt32_t
 
blockSize
);

2466 
¨m_sub_q7
(

2467 
q7_t
 * 
pSrcA
,

2468 
q7_t
 * 
pSrcB
,

2469 
q7_t
 * 
pD°
,

2470 
uöt32_t
 
blockSize
);

2480 
¨m_sub_q15
(

2481 
q15_t
 * 
pSrcA
,

2482 
q15_t
 * 
pSrcB
,

2483 
q15_t
 * 
pD°
,

2484 
uöt32_t
 
blockSize
);

2494 
¨m_sub_q31
(

2495 
q31_t
 * 
pSrcA
,

2496 
q31_t
 * 
pSrcB
,

2497 
q31_t
 * 
pD°
,

2498 
uöt32_t
 
blockSize
);

2508 
¨m_sˇÀ_f32
(

2509 
Êﬂt32_t
 * 
pSrc
,

2510 
Êﬂt32_t
 
sˇÀ
,

2511 
Êﬂt32_t
 * 
pD°
,

2512 
uöt32_t
 
blockSize
);

2523 
¨m_sˇÀ_q7
(

2524 
q7_t
 * 
pSrc
,

2525 
q7_t
 
sˇÀFø˘
,

2526 
öt8_t
 
shi·
,

2527 
q7_t
 * 
pD°
,

2528 
uöt32_t
 
blockSize
);

2539 
¨m_sˇÀ_q15
(

2540 
q15_t
 * 
pSrc
,

2541 
q15_t
 
sˇÀFø˘
,

2542 
öt8_t
 
shi·
,

2543 
q15_t
 * 
pD°
,

2544 
uöt32_t
 
blockSize
);

2555 
¨m_sˇÀ_q31
(

2556 
q31_t
 * 
pSrc
,

2557 
q31_t
 
sˇÀFø˘
,

2558 
öt8_t
 
shi·
,

2559 
q31_t
 * 
pD°
,

2560 
uöt32_t
 
blockSize
);

2569 
¨m_abs_q7
(

2570 
q7_t
 * 
pSrc
,

2571 
q7_t
 * 
pD°
,

2572 
uöt32_t
 
blockSize
);

2581 
¨m_abs_f32
(

2582 
Êﬂt32_t
 * 
pSrc
,

2583 
Êﬂt32_t
 * 
pD°
,

2584 
uöt32_t
 
blockSize
);

2593 
¨m_abs_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 * 
pD°
,

2596 
uöt32_t
 
blockSize
);

2605 
¨m_abs_q31
(

2606 
q31_t
 * 
pSrc
,

2607 
q31_t
 * 
pD°
,

2608 
uöt32_t
 
blockSize
);

2618 
¨m_dŸ_¥od_f32
(

2619 
Êﬂt32_t
 * 
pSrcA
,

2620 
Êﬂt32_t
 * 
pSrcB
,

2621 
uöt32_t
 
blockSize
,

2622 
Êﬂt32_t
 * 
ªsu…
);

2632 
¨m_dŸ_¥od_q7
(

2633 
q7_t
 * 
pSrcA
,

2634 
q7_t
 * 
pSrcB
,

2635 
uöt32_t
 
blockSize
,

2636 
q31_t
 * 
ªsu…
);

2646 
¨m_dŸ_¥od_q15
(

2647 
q15_t
 * 
pSrcA
,

2648 
q15_t
 * 
pSrcB
,

2649 
uöt32_t
 
blockSize
,

2650 
q63_t
 * 
ªsu…
);

2660 
¨m_dŸ_¥od_q31
(

2661 
q31_t
 * 
pSrcA
,

2662 
q31_t
 * 
pSrcB
,

2663 
uöt32_t
 
blockSize
,

2664 
q63_t
 * 
ªsu…
);

2674 
¨m_shi·_q7
(

2675 
q7_t
 * 
pSrc
,

2676 
öt8_t
 
shi·Bôs
,

2677 
q7_t
 * 
pD°
,

2678 
uöt32_t
 
blockSize
);

2688 
¨m_shi·_q15
(

2689 
q15_t
 * 
pSrc
,

2690 
öt8_t
 
shi·Bôs
,

2691 
q15_t
 * 
pD°
,

2692 
uöt32_t
 
blockSize
);

2702 
¨m_shi·_q31
(

2703 
q31_t
 * 
pSrc
,

2704 
öt8_t
 
shi·Bôs
,

2705 
q31_t
 * 
pD°
,

2706 
uöt32_t
 
blockSize
);

2716 
¨m_off£t_f32
(

2717 
Êﬂt32_t
 * 
pSrc
,

2718 
Êﬂt32_t
 
off£t
,

2719 
Êﬂt32_t
 * 
pD°
,

2720 
uöt32_t
 
blockSize
);

2730 
¨m_off£t_q7
(

2731 
q7_t
 * 
pSrc
,

2732 
q7_t
 
off£t
,

2733 
q7_t
 * 
pD°
,

2734 
uöt32_t
 
blockSize
);

2744 
¨m_off£t_q15
(

2745 
q15_t
 * 
pSrc
,

2746 
q15_t
 
off£t
,

2747 
q15_t
 * 
pD°
,

2748 
uöt32_t
 
blockSize
);

2758 
¨m_off£t_q31
(

2759 
q31_t
 * 
pSrc
,

2760 
q31_t
 
off£t
,

2761 
q31_t
 * 
pD°
,

2762 
uöt32_t
 
blockSize
);

2771 
¨m_√g©e_f32
(

2772 
Êﬂt32_t
 * 
pSrc
,

2773 
Êﬂt32_t
 * 
pD°
,

2774 
uöt32_t
 
blockSize
);

2783 
¨m_√g©e_q7
(

2784 
q7_t
 * 
pSrc
,

2785 
q7_t
 * 
pD°
,

2786 
uöt32_t
 
blockSize
);

2795 
¨m_√g©e_q15
(

2796 
q15_t
 * 
pSrc
,

2797 
q15_t
 * 
pD°
,

2798 
uöt32_t
 
blockSize
);

2807 
¨m_√g©e_q31
(

2808 
q31_t
 * 
pSrc
,

2809 
q31_t
 * 
pD°
,

2810 
uöt32_t
 
blockSize
);

2819 
¨m_c›y_f32
(

2820 
Êﬂt32_t
 * 
pSrc
,

2821 
Êﬂt32_t
 * 
pD°
,

2822 
uöt32_t
 
blockSize
);

2831 
¨m_c›y_q7
(

2832 
q7_t
 * 
pSrc
,

2833 
q7_t
 * 
pD°
,

2834 
uöt32_t
 
blockSize
);

2843 
¨m_c›y_q15
(

2844 
q15_t
 * 
pSrc
,

2845 
q15_t
 * 
pD°
,

2846 
uöt32_t
 
blockSize
);

2855 
¨m_c›y_q31
(

2856 
q31_t
 * 
pSrc
,

2857 
q31_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2867 
¨m_fûl_f32
(

2868 
Êﬂt32_t
 
vÆue
,

2869 
Êﬂt32_t
 * 
pD°
,

2870 
uöt32_t
 
blockSize
);

2879 
¨m_fûl_q7
(

2880 
q7_t
 
vÆue
,

2881 
q7_t
 * 
pD°
,

2882 
uöt32_t
 
blockSize
);

2891 
¨m_fûl_q15
(

2892 
q15_t
 
vÆue
,

2893 
q15_t
 * 
pD°
,

2894 
uöt32_t
 
blockSize
);

2903 
¨m_fûl_q31
(

2904 
q31_t
 
vÆue
,

2905 
q31_t
 * 
pD°
,

2906 
uöt32_t
 
blockSize
);

2917 
¨m_c⁄v_f32
(

2918 
Êﬂt32_t
 * 
pSrcA
,

2919 
uöt32_t
 
§cALí
,

2920 
Êﬂt32_t
 * 
pSrcB
,

2921 
uöt32_t
 
§cBLí
,

2922 
Êﬂt32_t
 * 
pD°
);

2935 
¨m_c⁄v_›t_q15
(

2936 
q15_t
 * 
pSrcA
,

2937 
uöt32_t
 
§cALí
,

2938 
q15_t
 * 
pSrcB
,

2939 
uöt32_t
 
§cBLí
,

2940 
q15_t
 * 
pD°
,

2941 
q15_t
 * 
pS¸©ch1
,

2942 
q15_t
 * 
pS¸©ch2
);

2953 
¨m_c⁄v_q15
(

2954 
q15_t
 * 
pSrcA
,

2955 
uöt32_t
 
§cALí
,

2956 
q15_t
 * 
pSrcB
,

2957 
uöt32_t
 
§cBLí
,

2958 
q15_t
 * 
pD°
);

2969 
¨m_c⁄v_Á°_q15
(

2970 
q15_t
 * 
pSrcA
,

2971 
uöt32_t
 
§cALí
,

2972 
q15_t
 * 
pSrcB
,

2973 
uöt32_t
 
§cBLí
,

2974 
q15_t
 * 
pD°
);

2987 
¨m_c⁄v_Á°_›t_q15
(

2988 
q15_t
 * 
pSrcA
,

2989 
uöt32_t
 
§cALí
,

2990 
q15_t
 * 
pSrcB
,

2991 
uöt32_t
 
§cBLí
,

2992 
q15_t
 * 
pD°
,

2993 
q15_t
 * 
pS¸©ch1
,

2994 
q15_t
 * 
pS¸©ch2
);

3005 
¨m_c⁄v_q31
(

3006 
q31_t
 * 
pSrcA
,

3007 
uöt32_t
 
§cALí
,

3008 
q31_t
 * 
pSrcB
,

3009 
uöt32_t
 
§cBLí
,

3010 
q31_t
 * 
pD°
);

3021 
¨m_c⁄v_Á°_q31
(

3022 
q31_t
 * 
pSrcA
,

3023 
uöt32_t
 
§cALí
,

3024 
q31_t
 * 
pSrcB
,

3025 
uöt32_t
 
§cBLí
,

3026 
q31_t
 * 
pD°
);

3039 
¨m_c⁄v_›t_q7
(

3040 
q7_t
 * 
pSrcA
,

3041 
uöt32_t
 
§cALí
,

3042 
q7_t
 * 
pSrcB
,

3043 
uöt32_t
 
§cBLí
,

3044 
q7_t
 * 
pD°
,

3045 
q15_t
 * 
pS¸©ch1
,

3046 
q15_t
 * 
pS¸©ch2
);

3057 
¨m_c⁄v_q7
(

3058 
q7_t
 * 
pSrcA
,

3059 
uöt32_t
 
§cALí
,

3060 
q7_t
 * 
pSrcB
,

3061 
uöt32_t
 
§cBLí
,

3062 
q7_t
 * 
pD°
);

3076 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3077 
Êﬂt32_t
 * 
pSrcA
,

3078 
uöt32_t
 
§cALí
,

3079 
Êﬂt32_t
 * 
pSrcB
,

3080 
uöt32_t
 
§cBLí
,

3081 
Êﬂt32_t
 * 
pD°
,

3082 
uöt32_t
 
fú°Index
,

3083 
uöt32_t
 
numPoöts
);

3099 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q15
(

3100 
q15_t
 * 
pSrcA
,

3101 
uöt32_t
 
§cALí
,

3102 
q15_t
 * 
pSrcB
,

3103 
uöt32_t
 
§cBLí
,

3104 
q15_t
 * 
pD°
,

3105 
uöt32_t
 
fú°Index
,

3106 
uöt32_t
 
numPoöts
,

3107 
q15_t
 * 
pS¸©ch1
,

3108 
q15_t
 * 
pS¸©ch2
);

3122 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3123 
q15_t
 * 
pSrcA
,

3124 
uöt32_t
 
§cALí
,

3125 
q15_t
 * 
pSrcB
,

3126 
uöt32_t
 
§cBLí
,

3127 
q15_t
 * 
pD°
,

3128 
uöt32_t
 
fú°Index
,

3129 
uöt32_t
 
numPoöts
);

3143 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3144 
q15_t
 * 
pSrcA
,

3145 
uöt32_t
 
§cALí
,

3146 
q15_t
 * 
pSrcB
,

3147 
uöt32_t
 
§cBLí
,

3148 
q15_t
 * 
pD°
,

3149 
uöt32_t
 
fú°Index
,

3150 
uöt32_t
 
numPoöts
);

3166 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_›t_q15
(

3167 
q15_t
 * 
pSrcA
,

3168 
uöt32_t
 
§cALí
,

3169 
q15_t
 * 
pSrcB
,

3170 
uöt32_t
 
§cBLí
,

3171 
q15_t
 * 
pD°
,

3172 
uöt32_t
 
fú°Index
,

3173 
uöt32_t
 
numPoöts
,

3174 
q15_t
 * 
pS¸©ch1
,

3175 
q15_t
 * 
pS¸©ch2
);

3189 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3190 
q31_t
 * 
pSrcA
,

3191 
uöt32_t
 
§cALí
,

3192 
q31_t
 * 
pSrcB
,

3193 
uöt32_t
 
§cBLí
,

3194 
q31_t
 * 
pD°
,

3195 
uöt32_t
 
fú°Index
,

3196 
uöt32_t
 
numPoöts
);

3210 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3211 
q31_t
 * 
pSrcA
,

3212 
uöt32_t
 
§cALí
,

3213 
q31_t
 * 
pSrcB
,

3214 
uöt32_t
 
§cBLí
,

3215 
q31_t
 * 
pD°
,

3216 
uöt32_t
 
fú°Index
,

3217 
uöt32_t
 
numPoöts
);

3233 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q7
(

3234 
q7_t
 * 
pSrcA
,

3235 
uöt32_t
 
§cALí
,

3236 
q7_t
 * 
pSrcB
,

3237 
uöt32_t
 
§cBLí
,

3238 
q7_t
 * 
pD°
,

3239 
uöt32_t
 
fú°Index
,

3240 
uöt32_t
 
numPoöts
,

3241 
q15_t
 * 
pS¸©ch1
,

3242 
q15_t
 * 
pS¸©ch2
);

3256 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3257 
q7_t
 * 
pSrcA
,

3258 
uöt32_t
 
§cALí
,

3259 
q7_t
 * 
pSrcB
,

3260 
uöt32_t
 
§cBLí
,

3261 
q7_t
 * 
pD°
,

3262 
uöt32_t
 
fú°Index
,

3263 
uöt32_t
 
numPoöts
);

3271 
uöt8_t
 
M
;

3272 
uöt16_t
 
numT≠s
;

3273 
q15_t
 *
pC€ffs
;

3274 
q15_t
 *
pSèã
;

3275 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3282 
uöt8_t
 
M
;

3283 
uöt16_t
 
numT≠s
;

3284 
q31_t
 *
pC€ffs
;

3285 
q31_t
 *
pSèã
;

3286 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3293 
uöt8_t
 
M
;

3294 
uöt16_t
 
numT≠s
;

3295 
Êﬂt32_t
 *
pC€ffs
;

3296 
Êﬂt32_t
 *
pSèã
;

3297 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3307 
¨m_fú_decim©e_f32
(

3308 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3309 
Êﬂt32_t
 * 
pSrc
,

3310 
Êﬂt32_t
 * 
pD°
,

3311 
uöt32_t
 
blockSize
);

3325 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3326 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3327 
uöt16_t
 
numT≠s
,

3328 
uöt8_t
 
M
,

3329 
Êﬂt32_t
 * 
pC€ffs
,

3330 
Êﬂt32_t
 * 
pSèã
,

3331 
uöt32_t
 
blockSize
);

3341 
¨m_fú_decim©e_q15
(

3342 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3343 
q15_t
 * 
pSrc
,

3344 
q15_t
 * 
pD°
,

3345 
uöt32_t
 
blockSize
);

3355 
¨m_fú_decim©e_Á°_q15
(

3356 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3357 
q15_t
 * 
pSrc
,

3358 
q15_t
 * 
pD°
,

3359 
uöt32_t
 
blockSize
);

3373 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3374 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3375 
uöt16_t
 
numT≠s
,

3376 
uöt8_t
 
M
,

3377 
q15_t
 * 
pC€ffs
,

3378 
q15_t
 * 
pSèã
,

3379 
uöt32_t
 
blockSize
);

3389 
¨m_fú_decim©e_q31
(

3390 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3391 
q31_t
 * 
pSrc
,

3392 
q31_t
 * 
pD°
,

3393 
uöt32_t
 
blockSize
);

3402 
¨m_fú_decim©e_Á°_q31
(

3403 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3404 
q31_t
 * 
pSrc
,

3405 
q31_t
 * 
pD°
,

3406 
uöt32_t
 
blockSize
);

3420 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3421 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3422 
uöt16_t
 
numT≠s
,

3423 
uöt8_t
 
M
,

3424 
q31_t
 * 
pC€ffs
,

3425 
q31_t
 * 
pSèã
,

3426 
uöt32_t
 
blockSize
);

3434 
uöt8_t
 
L
;

3435 
uöt16_t
 
pha£Lígth
;

3436 
q15_t
 *
pC€ffs
;

3437 
q15_t
 *
pSèã
;

3438 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3445 
uöt8_t
 
L
;

3446 
uöt16_t
 
pha£Lígth
;

3447 
q31_t
 *
pC€ffs
;

3448 
q31_t
 *
pSèã
;

3449 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3456 
uöt8_t
 
L
;

3457 
uöt16_t
 
pha£Lígth
;

3458 
Êﬂt32_t
 *
pC€ffs
;

3459 
Êﬂt32_t
 *
pSèã
;

3460 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3470 
¨m_fú_öãΩﬁ©e_q15
(

3471 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3472 
q15_t
 * 
pSrc
,

3473 
q15_t
 * 
pD°
,

3474 
uöt32_t
 
blockSize
);

3488 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3489 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3490 
uöt8_t
 
L
,

3491 
uöt16_t
 
numT≠s
,

3492 
q15_t
 * 
pC€ffs
,

3493 
q15_t
 * 
pSèã
,

3494 
uöt32_t
 
blockSize
);

3504 
¨m_fú_öãΩﬁ©e_q31
(

3505 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3506 
q31_t
 * 
pSrc
,

3507 
q31_t
 * 
pD°
,

3508 
uöt32_t
 
blockSize
);

3522 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3523 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3524 
uöt8_t
 
L
,

3525 
uöt16_t
 
numT≠s
,

3526 
q31_t
 * 
pC€ffs
,

3527 
q31_t
 * 
pSèã
,

3528 
uöt32_t
 
blockSize
);

3538 
¨m_fú_öãΩﬁ©e_f32
(

3539 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3540 
Êﬂt32_t
 * 
pSrc
,

3541 
Êﬂt32_t
 * 
pD°
,

3542 
uöt32_t
 
blockSize
);

3556 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3557 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3558 
uöt8_t
 
L
,

3559 
uöt16_t
 
numT≠s
,

3560 
Êﬂt32_t
 * 
pC€ffs
,

3561 
Êﬂt32_t
 * 
pSèã
,

3562 
uöt32_t
 
blockSize
);

3570 
uöt8_t
 
numSèges
;

3571 
q63_t
 *
pSèã
;

3572 
q31_t
 *
pC€ffs
;

3573 
uöt8_t
 
po°Shi·
;

3574 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3583 
¨m_biquad_ˇs_df1_32x64_q31
(

3584 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3585 
q31_t
 * 
pSrc
,

3586 
q31_t
 * 
pD°
,

3587 
uöt32_t
 
blockSize
);

3597 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3598 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3599 
uöt8_t
 
numSèges
,

3600 
q31_t
 * 
pC€ffs
,

3601 
q63_t
 * 
pSèã
,

3602 
uöt8_t
 
po°Shi·
);

3610 
uöt8_t
 
numSèges
;

3611 
Êﬂt32_t
 *
pSèã
;

3612 
Êﬂt32_t
 *
pC€ffs
;

3613 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3620 
uöt8_t
 
numSèges
;

3621 
Êﬂt32_t
 *
pSèã
;

3622 
Êﬂt32_t
 *
pC€ffs
;

3623 } 
	t¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
;

3630 
uöt8_t
 
numSèges
;

3631 
Êﬂt64_t
 *
pSèã
;

3632 
Êﬂt64_t
 *
pC€ffs
;

3633 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
;

3643 
¨m_biquad_ˇsˇde_df2T_f32
(

3644 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3645 
Êﬂt32_t
 * 
pSrc
,

3646 
Êﬂt32_t
 * 
pD°
,

3647 
uöt32_t
 
blockSize
);

3657 
¨m_biquad_ˇsˇde_°îeo_df2T_f32
(

3658 c⁄° 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

3659 
Êﬂt32_t
 * 
pSrc
,

3660 
Êﬂt32_t
 * 
pD°
,

3661 
uöt32_t
 
blockSize
);

3671 
¨m_biquad_ˇsˇde_df2T_f64
(

3672 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

3673 
Êﬂt64_t
 * 
pSrc
,

3674 
Êﬂt64_t
 * 
pD°
,

3675 
uöt32_t
 
blockSize
);

3685 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3686 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3687 
uöt8_t
 
numSèges
,

3688 
Êﬂt32_t
 * 
pC€ffs
,

3689 
Êﬂt32_t
 * 
pSèã
);

3699 
¨m_biquad_ˇsˇde_°îeo_df2T_öô_f32
(

3700 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

3701 
uöt8_t
 
numSèges
,

3702 
Êﬂt32_t
 * 
pC€ffs
,

3703 
Êﬂt32_t
 * 
pSèã
);

3713 
¨m_biquad_ˇsˇde_df2T_öô_f64
(

3714 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

3715 
uöt8_t
 
numSèges
,

3716 
Êﬂt64_t
 * 
pC€ffs
,

3717 
Êﬂt64_t
 * 
pSèã
);

3725 
uöt16_t
 
numSèges
;

3726 
q15_t
 *
pSèã
;

3727 
q15_t
 *
pC€ffs
;

3728 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3735 
uöt16_t
 
numSèges
;

3736 
q31_t
 *
pSèã
;

3737 
q31_t
 *
pC€ffs
;

3738 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3745 
uöt16_t
 
numSèges
;

3746 
Êﬂt32_t
 *
pSèã
;

3747 
Êﬂt32_t
 *
pC€ffs
;

3748 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3758 
¨m_fú_œâi˚_öô_q15
(

3759 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3760 
uöt16_t
 
numSèges
,

3761 
q15_t
 * 
pC€ffs
,

3762 
q15_t
 * 
pSèã
);

3772 
¨m_fú_œâi˚_q15
(

3773 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3774 
q15_t
 * 
pSrc
,

3775 
q15_t
 * 
pD°
,

3776 
uöt32_t
 
blockSize
);

3786 
¨m_fú_œâi˚_öô_q31
(

3787 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3788 
uöt16_t
 
numSèges
,

3789 
q31_t
 * 
pC€ffs
,

3790 
q31_t
 * 
pSèã
);

3800 
¨m_fú_œâi˚_q31
(

3801 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3802 
q31_t
 * 
pSrc
,

3803 
q31_t
 * 
pD°
,

3804 
uöt32_t
 
blockSize
);

3814 
¨m_fú_œâi˚_öô_f32
(

3815 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3816 
uöt16_t
 
numSèges
,

3817 
Êﬂt32_t
 * 
pC€ffs
,

3818 
Êﬂt32_t
 * 
pSèã
);

3828 
¨m_fú_œâi˚_f32
(

3829 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3830 
Êﬂt32_t
 * 
pSrc
,

3831 
Êﬂt32_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3840 
uöt16_t
 
numSèges
;

3841 
q15_t
 *
pSèã
;

3842 
q15_t
 *
pkC€ffs
;

3843 
q15_t
 *
pvC€ffs
;

3844 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3851 
uöt16_t
 
numSèges
;

3852 
q31_t
 *
pSèã
;

3853 
q31_t
 *
pkC€ffs
;

3854 
q31_t
 *
pvC€ffs
;

3855 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3862 
uöt16_t
 
numSèges
;

3863 
Êﬂt32_t
 *
pSèã
;

3864 
Êﬂt32_t
 *
pkC€ffs
;

3865 
Êﬂt32_t
 *
pvC€ffs
;

3866 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3876 
¨m_iú_œâi˚_f32
(

3877 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3878 
Êﬂt32_t
 * 
pSrc
,

3879 
Êﬂt32_t
 * 
pD°
,

3880 
uöt32_t
 
blockSize
);

3892 
¨m_iú_œâi˚_öô_f32
(

3893 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3894 
uöt16_t
 
numSèges
,

3895 
Êﬂt32_t
 * 
pkC€ffs
,

3896 
Êﬂt32_t
 * 
pvC€ffs
,

3897 
Êﬂt32_t
 * 
pSèã
,

3898 
uöt32_t
 
blockSize
);

3908 
¨m_iú_œâi˚_q31
(

3909 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3910 
q31_t
 * 
pSrc
,

3911 
q31_t
 * 
pD°
,

3912 
uöt32_t
 
blockSize
);

3924 
¨m_iú_œâi˚_öô_q31
(

3925 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3926 
uöt16_t
 
numSèges
,

3927 
q31_t
 * 
pkC€ffs
,

3928 
q31_t
 * 
pvC€ffs
,

3929 
q31_t
 * 
pSèã
,

3930 
uöt32_t
 
blockSize
);

3940 
¨m_iú_œâi˚_q15
(

3941 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3942 
q15_t
 * 
pSrc
,

3943 
q15_t
 * 
pD°
,

3944 
uöt32_t
 
blockSize
);

3956 
¨m_iú_œâi˚_öô_q15
(

3957 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3958 
uöt16_t
 
numSèges
,

3959 
q15_t
 * 
pkC€ffs
,

3960 
q15_t
 * 
pvC€ffs
,

3961 
q15_t
 * 
pSèã
,

3962 
uöt32_t
 
blockSize
);

3970 
uöt16_t
 
numT≠s
;

3971 
Êﬂt32_t
 *
pSèã
;

3972 
Êﬂt32_t
 *
pC€ffs
;

3973 
Êﬂt32_t
 
mu
;

3974 } 
	t¨m_lms_ö°™˚_f32
;

3986 
¨m_lms_f32
(

3987 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3988 
Êﬂt32_t
 * 
pSrc
,

3989 
Êﬂt32_t
 * 
pRef
,

3990 
Êﬂt32_t
 * 
pOut
,

3991 
Êﬂt32_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4004 
¨m_lms_öô_f32
(

4005 
¨m_lms_ö°™˚_f32
 * 
S
,

4006 
uöt16_t
 
numT≠s
,

4007 
Êﬂt32_t
 * 
pC€ffs
,

4008 
Êﬂt32_t
 * 
pSèã
,

4009 
Êﬂt32_t
 
mu
,

4010 
uöt32_t
 
blockSize
);

4018 
uöt16_t
 
numT≠s
;

4019 
q15_t
 *
pSèã
;

4020 
q15_t
 *
pC€ffs
;

4021 
q15_t
 
mu
;

4022 
uöt32_t
 
po°Shi·
;

4023 } 
	t¨m_lms_ö°™˚_q15
;

4036 
¨m_lms_öô_q15
(

4037 
¨m_lms_ö°™˚_q15
 * 
S
,

4038 
uöt16_t
 
numT≠s
,

4039 
q15_t
 * 
pC€ffs
,

4040 
q15_t
 * 
pSèã
,

4041 
q15_t
 
mu
,

4042 
uöt32_t
 
blockSize
,

4043 
uöt32_t
 
po°Shi·
);

4055 
¨m_lms_q15
(

4056 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

4057 
q15_t
 * 
pSrc
,

4058 
q15_t
 * 
pRef
,

4059 
q15_t
 * 
pOut
,

4060 
q15_t
 * 
pEº
,

4061 
uöt32_t
 
blockSize
);

4069 
uöt16_t
 
numT≠s
;

4070 
q31_t
 *
pSèã
;

4071 
q31_t
 *
pC€ffs
;

4072 
q31_t
 
mu
;

4073 
uöt32_t
 
po°Shi·
;

4074 } 
	t¨m_lms_ö°™˚_q31
;

4086 
¨m_lms_q31
(

4087 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4088 
q31_t
 * 
pSrc
,

4089 
q31_t
 * 
pRef
,

4090 
q31_t
 * 
pOut
,

4091 
q31_t
 * 
pEº
,

4092 
uöt32_t
 
blockSize
);

4105 
¨m_lms_öô_q31
(

4106 
¨m_lms_ö°™˚_q31
 * 
S
,

4107 
uöt16_t
 
numT≠s
,

4108 
q31_t
 * 
pC€ffs
,

4109 
q31_t
 * 
pSèã
,

4110 
q31_t
 
mu
,

4111 
uöt32_t
 
blockSize
,

4112 
uöt32_t
 
po°Shi·
);

4120 
uöt16_t
 
numT≠s
;

4121 
Êﬂt32_t
 *
pSèã
;

4122 
Êﬂt32_t
 *
pC€ffs
;

4123 
Êﬂt32_t
 
mu
;

4124 
Êﬂt32_t
 
íîgy
;

4125 
Êﬂt32_t
 
x0
;

4126 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4138 
¨m_lms_n‹m_f32
(

4139 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4140 
Êﬂt32_t
 * 
pSrc
,

4141 
Êﬂt32_t
 * 
pRef
,

4142 
Êﬂt32_t
 * 
pOut
,

4143 
Êﬂt32_t
 * 
pEº
,

4144 
uöt32_t
 
blockSize
);

4156 
¨m_lms_n‹m_öô_f32
(

4157 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4158 
uöt16_t
 
numT≠s
,

4159 
Êﬂt32_t
 * 
pC€ffs
,

4160 
Êﬂt32_t
 * 
pSèã
,

4161 
Êﬂt32_t
 
mu
,

4162 
uöt32_t
 
blockSize
);

4170 
uöt16_t
 
numT≠s
;

4171 
q31_t
 *
pSèã
;

4172 
q31_t
 *
pC€ffs
;

4173 
q31_t
 
mu
;

4174 
uöt8_t
 
po°Shi·
;

4175 
q31_t
 *
ªcùTabÀ
;

4176 
q31_t
 
íîgy
;

4177 
q31_t
 
x0
;

4178 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4190 
¨m_lms_n‹m_q31
(

4191 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4192 
q31_t
 * 
pSrc
,

4193 
q31_t
 * 
pRef
,

4194 
q31_t
 * 
pOut
,

4195 
q31_t
 * 
pEº
,

4196 
uöt32_t
 
blockSize
);

4209 
¨m_lms_n‹m_öô_q31
(

4210 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4211 
uöt16_t
 
numT≠s
,

4212 
q31_t
 * 
pC€ffs
,

4213 
q31_t
 * 
pSèã
,

4214 
q31_t
 
mu
,

4215 
uöt32_t
 
blockSize
,

4216 
uöt8_t
 
po°Shi·
);

4224 
uöt16_t
 
numT≠s
;

4225 
q15_t
 *
pSèã
;

4226 
q15_t
 *
pC€ffs
;

4227 
q15_t
 
mu
;

4228 
uöt8_t
 
po°Shi·
;

4229 
q15_t
 *
ªcùTabÀ
;

4230 
q15_t
 
íîgy
;

4231 
q15_t
 
x0
;

4232 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4244 
¨m_lms_n‹m_q15
(

4245 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4246 
q15_t
 * 
pSrc
,

4247 
q15_t
 * 
pRef
,

4248 
q15_t
 * 
pOut
,

4249 
q15_t
 * 
pEº
,

4250 
uöt32_t
 
blockSize
);

4263 
¨m_lms_n‹m_öô_q15
(

4264 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4265 
uöt16_t
 
numT≠s
,

4266 
q15_t
 * 
pC€ffs
,

4267 
q15_t
 * 
pSèã
,

4268 
q15_t
 
mu
,

4269 
uöt32_t
 
blockSize
,

4270 
uöt8_t
 
po°Shi·
);

4281 
¨m_c‹ªœã_f32
(

4282 
Êﬂt32_t
 * 
pSrcA
,

4283 
uöt32_t
 
§cALí
,

4284 
Êﬂt32_t
 * 
pSrcB
,

4285 
uöt32_t
 
§cBLí
,

4286 
Êﬂt32_t
 * 
pD°
);

4298 
¨m_c‹ªœã_›t_q15
(

4299 
q15_t
 * 
pSrcA
,

4300 
uöt32_t
 
§cALí
,

4301 
q15_t
 * 
pSrcB
,

4302 
uöt32_t
 
§cBLí
,

4303 
q15_t
 * 
pD°
,

4304 
q15_t
 * 
pS¸©ch
);

4316 
¨m_c‹ªœã_q15
(

4317 
q15_t
 * 
pSrcA
,

4318 
uöt32_t
 
§cALí
,

4319 
q15_t
 * 
pSrcB
,

4320 
uöt32_t
 
§cBLí
,

4321 
q15_t
 * 
pD°
);

4333 
¨m_c‹ªœã_Á°_q15
(

4334 
q15_t
 * 
pSrcA
,

4335 
uöt32_t
 
§cALí
,

4336 
q15_t
 * 
pSrcB
,

4337 
uöt32_t
 
§cBLí
,

4338 
q15_t
 * 
pD°
);

4350 
¨m_c‹ªœã_Á°_›t_q15
(

4351 
q15_t
 * 
pSrcA
,

4352 
uöt32_t
 
§cALí
,

4353 
q15_t
 * 
pSrcB
,

4354 
uöt32_t
 
§cBLí
,

4355 
q15_t
 * 
pD°
,

4356 
q15_t
 * 
pS¸©ch
);

4367 
¨m_c‹ªœã_q31
(

4368 
q31_t
 * 
pSrcA
,

4369 
uöt32_t
 
§cALí
,

4370 
q31_t
 * 
pSrcB
,

4371 
uöt32_t
 
§cBLí
,

4372 
q31_t
 * 
pD°
);

4383 
¨m_c‹ªœã_Á°_q31
(

4384 
q31_t
 * 
pSrcA
,

4385 
uöt32_t
 
§cALí
,

4386 
q31_t
 * 
pSrcB
,

4387 
uöt32_t
 
§cBLí
,

4388 
q31_t
 * 
pD°
);

4401 
¨m_c‹ªœã_›t_q7
(

4402 
q7_t
 * 
pSrcA
,

4403 
uöt32_t
 
§cALí
,

4404 
q7_t
 * 
pSrcB
,

4405 
uöt32_t
 
§cBLí
,

4406 
q7_t
 * 
pD°
,

4407 
q15_t
 * 
pS¸©ch1
,

4408 
q15_t
 * 
pS¸©ch2
);

4419 
¨m_c‹ªœã_q7
(

4420 
q7_t
 * 
pSrcA
,

4421 
uöt32_t
 
§cALí
,

4422 
q7_t
 * 
pSrcB
,

4423 
uöt32_t
 
§cBLí
,

4424 
q7_t
 * 
pD°
);

4432 
uöt16_t
 
numT≠s
;

4433 
uöt16_t
 
°©eIndex
;

4434 
Êﬂt32_t
 *
pSèã
;

4435 
Êﬂt32_t
 *
pC€ffs
;

4436 
uöt16_t
 
maxDñay
;

4437 
öt32_t
 *
pT≠Dñay
;

4438 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4445 
uöt16_t
 
numT≠s
;

4446 
uöt16_t
 
°©eIndex
;

4447 
q31_t
 *
pSèã
;

4448 
q31_t
 *
pC€ffs
;

4449 
uöt16_t
 
maxDñay
;

4450 
öt32_t
 *
pT≠Dñay
;

4451 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4458 
uöt16_t
 
numT≠s
;

4459 
uöt16_t
 
°©eIndex
;

4460 
q15_t
 *
pSèã
;

4461 
q15_t
 *
pC€ffs
;

4462 
uöt16_t
 
maxDñay
;

4463 
öt32_t
 *
pT≠Dñay
;

4464 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4471 
uöt16_t
 
numT≠s
;

4472 
uöt16_t
 
°©eIndex
;

4473 
q7_t
 *
pSèã
;

4474 
q7_t
 *
pC€ffs
;

4475 
uöt16_t
 
maxDñay
;

4476 
öt32_t
 *
pT≠Dñay
;

4477 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4488 
¨m_fú_•¨£_f32
(

4489 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4490 
Êﬂt32_t
 * 
pSrc
,

4491 
Êﬂt32_t
 * 
pD°
,

4492 
Êﬂt32_t
 * 
pS¸©chIn
,

4493 
uöt32_t
 
blockSize
);

4506 
¨m_fú_•¨£_öô_f32
(

4507 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4508 
uöt16_t
 
numT≠s
,

4509 
Êﬂt32_t
 * 
pC€ffs
,

4510 
Êﬂt32_t
 * 
pSèã
,

4511 
öt32_t
 * 
pT≠Dñay
,

4512 
uöt16_t
 
maxDñay
,

4513 
uöt32_t
 
blockSize
);

4524 
¨m_fú_•¨£_q31
(

4525 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4526 
q31_t
 * 
pSrc
,

4527 
q31_t
 * 
pD°
,

4528 
q31_t
 * 
pS¸©chIn
,

4529 
uöt32_t
 
blockSize
);

4542 
¨m_fú_•¨£_öô_q31
(

4543 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4544 
uöt16_t
 
numT≠s
,

4545 
q31_t
 * 
pC€ffs
,

4546 
q31_t
 * 
pSèã
,

4547 
öt32_t
 * 
pT≠Dñay
,

4548 
uöt16_t
 
maxDñay
,

4549 
uöt32_t
 
blockSize
);

4561 
¨m_fú_•¨£_q15
(

4562 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4563 
q15_t
 * 
pSrc
,

4564 
q15_t
 * 
pD°
,

4565 
q15_t
 * 
pS¸©chIn
,

4566 
q31_t
 * 
pS¸©chOut
,

4567 
uöt32_t
 
blockSize
);

4580 
¨m_fú_•¨£_öô_q15
(

4581 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4582 
uöt16_t
 
numT≠s
,

4583 
q15_t
 * 
pC€ffs
,

4584 
q15_t
 * 
pSèã
,

4585 
öt32_t
 * 
pT≠Dñay
,

4586 
uöt16_t
 
maxDñay
,

4587 
uöt32_t
 
blockSize
);

4599 
¨m_fú_•¨£_q7
(

4600 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4601 
q7_t
 * 
pSrc
,

4602 
q7_t
 * 
pD°
,

4603 
q7_t
 * 
pS¸©chIn
,

4604 
q31_t
 * 
pS¸©chOut
,

4605 
uöt32_t
 
blockSize
);

4618 
¨m_fú_•¨£_öô_q7
(

4619 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4620 
uöt16_t
 
numT≠s
,

4621 
q7_t
 * 
pC€ffs
,

4622 
q7_t
 * 
pSèã
,

4623 
öt32_t
 * 
pT≠Dñay
,

4624 
uöt16_t
 
maxDñay
,

4625 
uöt32_t
 
blockSize
);

4634 
¨m_sö_cos_f32
(

4635 
Êﬂt32_t
 
thëa
,

4636 
Êﬂt32_t
 * 
pSöVÆ
,

4637 
Êﬂt32_t
 * 
pCosVÆ
);

4646 
¨m_sö_cos_q31
(

4647 
q31_t
 
thëa
,

4648 
q31_t
 * 
pSöVÆ
,

4649 
q31_t
 * 
pCosVÆ
);

4658 
¨m_cm∂x_c⁄j_f32
(

4659 
Êﬂt32_t
 * 
pSrc
,

4660 
Êﬂt32_t
 * 
pD°
,

4661 
uöt32_t
 
numSam∂es
);

4669 
¨m_cm∂x_c⁄j_q31
(

4670 
q31_t
 * 
pSrc
,

4671 
q31_t
 * 
pD°
,

4672 
uöt32_t
 
numSam∂es
);

4681 
¨m_cm∂x_c⁄j_q15
(

4682 
q15_t
 * 
pSrc
,

4683 
q15_t
 * 
pD°
,

4684 
uöt32_t
 
numSam∂es
);

4693 
¨m_cm∂x_mag_squ¨ed_f32
(

4694 
Êﬂt32_t
 * 
pSrc
,

4695 
Êﬂt32_t
 * 
pD°
,

4696 
uöt32_t
 
numSam∂es
);

4705 
¨m_cm∂x_mag_squ¨ed_q31
(

4706 
q31_t
 * 
pSrc
,

4707 
q31_t
 * 
pD°
,

4708 
uöt32_t
 
numSam∂es
);

4717 
¨m_cm∂x_mag_squ¨ed_q15
(

4718 
q15_t
 * 
pSrc
,

4719 
q15_t
 * 
pD°
,

4720 
uöt32_t
 
numSam∂es
);

4795 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4796 
¨m_pid_ö°™˚_f32
 * 
S
,

4797 
Êﬂt32_t
 
ö
)

4799 
Êﬂt32_t
 
out
;

4802 
out
 = (
S
->
A0
 * 
ö
) +

4803 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4806 
S
->
°©e
[1] = S->state[0];

4807 
S
->
°©e
[0] = 
ö
;

4808 
S
->
°©e
[2] = 
out
;

4811  (
out
);

4829 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4830 
¨m_pid_ö°™˚_q31
 * 
S
,

4831 
q31_t
 
ö
)

4833 
q63_t
 
acc
;

4834 
q31_t
 
out
;

4837 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4840 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4843 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4846 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4849 
out
 +
S
->
°©e
[2];

4852 
S
->
°©e
[1] = S->state[0];

4853 
S
->
°©e
[0] = 
ö
;

4854 
S
->
°©e
[2] = 
out
;

4857  (
out
);

4876 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4877 
¨m_pid_ö°™˚_q15
 * 
S
,

4878 
q15_t
 
ö
)

4880 
q63_t
 
acc
;

4881 
q15_t
 
out
;

4883 #i‚de‡
ARM_MATH_CM0_FAMILY


4884 
__SIMD32_TYPE
 *
v°©e
;

4889 
acc
 = (
q31_t
Ë
__SMUAD
((
uöt32_t
)
S
->
A0
, (uöt32_t)
ö
);

4892 
v°©e
 = 
__SIMD32_CONST
(
S
->
°©e
);

4893 
acc
 = (
q63_t
)
__SMLALD
((
uöt32_t
)
S
->
A1
, (uöt32_t)*
v°©e
, (
uöt64_t
)acc);

4896 
acc
 = ((
q31_t
Ë
S
->
A0
Ë* 
ö
;

4899 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0];

4900 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1];

4904 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4907 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4910 
S
->
°©e
[1] = S->state[0];

4911 
S
->
°©e
[0] = 
ö
;

4912 
S
->
°©e
[2] = 
out
;

4915  (
out
);

4930 
¨m_°©us
 
¨m_m©_övî£_f32
(

4931 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4932 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4942 
¨m_°©us
 
¨m_m©_övî£_f64
(

4943 c⁄° 
¨m_m©rix_ö°™˚_f64
 * 
§c
,

4944 
¨m_m©rix_ö°™˚_f64
 * 
d°
);

4987 
__INLINE
 
¨m_˛¨ke_f32
(

4988 
Êﬂt32_t
 
Ia
,

4989 
Êﬂt32_t
 
Ib
,

4990 
Êﬂt32_t
 * 
pIÆpha
,

4991 
Êﬂt32_t
 * 
pIbëa
)

4994 *
pIÆpha
 = 
Ia
;

4997 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

5014 
__INLINE
 
¨m_˛¨ke_q31
(

5015 
q31_t
 
Ia
,

5016 
q31_t
 
Ib
,

5017 
q31_t
 * 
pIÆpha
,

5018 
q31_t
 * 
pIbëa
)

5020 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5023 *
pIÆpha
 = 
Ia
;

5026 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

5029 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

5032 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5045 
¨m_q7_to_q31
(

5046 
q7_t
 * 
pSrc
,

5047 
q31_t
 * 
pD°
,

5048 
uöt32_t
 
blockSize
);

5084 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5085 
Êﬂt32_t
 
IÆpha
,

5086 
Êﬂt32_t
 
Ibëa
,

5087 
Êﬂt32_t
 * 
pIa
,

5088 
Êﬂt32_t
 * 
pIb
)

5091 *
pIa
 = 
IÆpha
;

5094 *
pIb
 = -0.5‡* 
IÆpha
 + 0.8660254039‡* 
Ibëa
;

5111 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5112 
q31_t
 
IÆpha
,

5113 
q31_t
 
Ibëa
,

5114 
q31_t
 * 
pIa
,

5115 
q31_t
 * 
pIb
)

5117 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5120 *
pIa
 = 
IÆpha
;

5123 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5126 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5129 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5142 
¨m_q7_to_q15
(

5143 
q7_t
 * 
pSrc
,

5144 
q15_t
 * 
pD°
,

5145 
uöt32_t
 
blockSize
);

5194 
__INLINE
 
¨m_∑rk_f32
(

5195 
Êﬂt32_t
 
IÆpha
,

5196 
Êﬂt32_t
 
Ibëa
,

5197 
Êﬂt32_t
 * 
pId
,

5198 
Êﬂt32_t
 * 
pIq
,

5199 
Êﬂt32_t
 
söVÆ
,

5200 
Êﬂt32_t
 
cosVÆ
)

5203 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5206 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5225 
__INLINE
 
¨m_∑rk_q31
(

5226 
q31_t
 
IÆpha
,

5227 
q31_t
 
Ibëa
,

5228 
q31_t
 * 
pId
,

5229 
q31_t
 * 
pIq
,

5230 
q31_t
 
söVÆ
,

5231 
q31_t
 
cosVÆ
)

5233 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5234 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5237 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5240 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5244 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5247 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5250 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5253 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5266 
¨m_q7_to_Êﬂt
(

5267 
q7_t
 * 
pSrc
,

5268 
Êﬂt32_t
 * 
pD°
,

5269 
uöt32_t
 
blockSize
);

5307 
__INLINE
 
¨m_öv_∑rk_f32
(

5308 
Êﬂt32_t
 
Id
,

5309 
Êﬂt32_t
 
Iq
,

5310 
Êﬂt32_t
 * 
pIÆpha
,

5311 
Êﬂt32_t
 * 
pIbëa
,

5312 
Êﬂt32_t
 
söVÆ
,

5313 
Êﬂt32_t
 
cosVÆ
)

5316 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5319 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5338 
__INLINE
 
¨m_öv_∑rk_q31
(

5339 
q31_t
 
Id
,

5340 
q31_t
 
Iq
,

5341 
q31_t
 * 
pIÆpha
,

5342 
q31_t
 * 
pIbëa
,

5343 
q31_t
 
söVÆ
,

5344 
q31_t
 
cosVÆ
)

5346 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5347 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5350 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5353 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5357 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5360 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5363 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5366 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5380 
¨m_q31_to_Êﬂt
(

5381 
q31_t
 * 
pSrc
,

5382 
Êﬂt32_t
 * 
pD°
,

5383 
uöt32_t
 
blockSize
);

5433 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5434 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5435 
Êﬂt32_t
 
x
)

5437 
Êﬂt32_t
 
y
;

5438 
Êﬂt32_t
 
x0
, 
x1
;

5439 
Êﬂt32_t
 
y0
, 
y1
;

5440 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5441 
öt32_t
 
i
;

5442 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5445 
i
 = (
öt32_t
Ë((
x
 - 
S
->
x1
Ë/ 
xS∑cög
);

5447 if(
i
 < 0)

5450 
y
 = 
pYD©a
[0];

5452 if((
uöt32_t
)
i
 >
S
->
nVÆues
)

5455 
y
 = 
pYD©a
[
S
->
nVÆues
 - 1];

5460 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5461 
x1
 = 
S
->x1 + (
i
 + 1Ë* 
xS∑cög
;

5464 
y0
 = 
pYD©a
[
i
];

5465 
y1
 = 
pYD©a
[
i
 + 1];

5468 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0Ë/ (
x1
 - x0));

5473  (
y
);

5490 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(

5491 
q31_t
 * 
pYD©a
,

5492 
q31_t
 
x
,

5493 
uöt32_t
 
nVÆues
)

5495 
q31_t
 
y
;

5496 
q31_t
 
y0
, 
y1
;

5497 
q31_t
 
‰a˘
;

5498 
öt32_t
 
ödex
;

5503 
ödex
 = ((
x
 & (
q31_t
)0xFFF00000) >> 20);

5505 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5507  (
pYD©a
[
nVÆues
 - 1]);

5509 if(
ödex
 < 0)

5511  (
pYD©a
[0]);

5517 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5520 
y0
 = 
pYD©a
[
ödex
];

5521 
y1
 = 
pYD©a
[
ödex
 + 1];

5524 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5527 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5530  (
y
 << 1u);

5548 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(

5549 
q15_t
 * 
pYD©a
,

5550 
q31_t
 
x
,

5551 
uöt32_t
 
nVÆues
)

5553 
q63_t
 
y
;

5554 
q15_t
 
y0
, 
y1
;

5555 
q31_t
 
‰a˘
;

5556 
öt32_t
 
ödex
;

5561 
ödex
 = ((
x
 & (
öt32_t
)0xFFF00000) >> 20);

5563 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5565  (
pYD©a
[
nVÆues
 - 1]);

5567 if(
ödex
 < 0)

5569  (
pYD©a
[0]);

5575 
‰a˘
 = (
x
 & 0x000FFFFF);

5578 
y0
 = 
pYD©a
[
ödex
];

5579 
y1
 = 
pYD©a
[
ödex
 + 1];

5582 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5585 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5588  (
q15_t
Ë(
y
 >> 20);

5605 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(

5606 
q7_t
 * 
pYD©a
,

5607 
q31_t
 
x
,

5608 
uöt32_t
 
nVÆues
)

5610 
q31_t
 
y
;

5611 
q7_t
 
y0
, 
y1
;

5612 
q31_t
 
‰a˘
;

5613 
uöt32_t
 
ödex
;

5618 i‡(
x
 < 0)

5620  (
pYD©a
[0]);

5622 
ödex
 = (
x
 >> 20) & 0xfff;

5624 if(
ödex
 >(
nVÆues
 - 1))

5626  (
pYD©a
[
nVÆues
 - 1]);

5632 
‰a˘
 = (
x
 & 0x000FFFFF);

5635 
y0
 = 
pYD©a
[
ödex
];

5636 
y1
 = 
pYD©a
[
ödex
 + 1];

5639 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5642 
y
 +(
y1
 * 
‰a˘
);

5645  (
q7_t
Ë(
y
 >> 20);

5658 
Êﬂt32_t
 
¨m_sö_f32
(

5659 
Êﬂt32_t
 
x
);

5667 
q31_t
 
¨m_sö_q31
(

5668 
q31_t
 
x
);

5676 
q15_t
 
¨m_sö_q15
(

5677 
q15_t
 
x
);

5685 
Êﬂt32_t
 
¨m_cos_f32
(

5686 
Êﬂt32_t
 
x
);

5694 
q31_t
 
¨m_cos_q31
(

5695 
q31_t
 
x
);

5703 
q15_t
 
¨m_cos_q15
(

5704 
q15_t
 
x
);

5745 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5746 
Êﬂt32_t
 
ö
,

5747 
Êﬂt32_t
 * 
pOut
)

5749 if(
ö
 >= 0.0f)

5752 #i‡ (
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5753 *
pOut
 = 
__sqπf
(
ö
);

5754 #ñi‡(
__FPU_USED
 =1Ë&& (
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050))

5755 *
pOut
 = 
__buûtö_sqπf
(
ö
);

5756 #ñi‡(
__FPU_USED
 =1Ë&& 
deföed
(
__GNUC__
)

5757 *
pOut
 = 
__buûtö_sqπf
(
ö
);

5758 #ñi‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__ICCARM__
 ) && (
__VER__
 >= 6040000)

5759 
__ASM
("VSQRT.F32 %0,%1" : "Ò"(*
pOut
Ë: "t"(
ö
));

5761 *
pOut
 = 
sqπf
(
ö
);

5764  (
ARM_MATH_SUCCESS
);

5768 *
pOut
 = 0.0f;

5769  (
ARM_MATH_ARGUMENT_ERROR
);

5781 
¨m_°©us
 
¨m_sqπ_q31
(

5782 
q31_t
 
ö
,

5783 
q31_t
 * 
pOut
);

5793 
¨m_°©us
 
¨m_sqπ_q15
(

5794 
q15_t
 
ö
,

5795 
q15_t
 * 
pOut
);

5805 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5806 
öt32_t
 * 
cúcBuf„r
,

5807 
öt32_t
 
L
,

5808 
uöt16_t
 * 
wrôeOff£t
,

5809 
öt32_t
 
buf„rInc
,

5810 c⁄° 
öt32_t
 * 
§c
,

5811 
öt32_t
 
§cInc
,

5812 
uöt32_t
 
blockSize
)

5814 
uöt32_t
 
i
 = 0u;

5815 
öt32_t
 
wOff£t
;

5819 
wOff£t
 = *
wrôeOff£t
;

5822 
i
 = 
blockSize
;

5824 
i
 > 0u)

5827 
cúcBuf„r
[
wOff£t
] = *
§c
;

5830 
§c
 +
§cInc
;

5833 
wOff£t
 +
buf„rInc
;

5834 if(
wOff£t
 >
L
)

5835 
wOff£t
 -
L
;

5838 
i
--;

5842 *
wrôeOff£t
 = (
uöt16_t
)
wOff£t
;

5850 
__INLINE
 
¨m_cúcuœrRód_f32
(

5851 
öt32_t
 * 
cúcBuf„r
,

5852 
öt32_t
 
L
,

5853 
öt32_t
 * 
ªadOff£t
,

5854 
öt32_t
 
buf„rInc
,

5855 
öt32_t
 * 
d°
,

5856 
öt32_t
 * 
d°_ba£
,

5857 
öt32_t
 
d°_Àngth
,

5858 
öt32_t
 
d°Inc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
rOff£t
, 
d°_íd
;

5866 
rOff£t
 = *
ªadOff£t
;

5867 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5870 
i
 = 
blockSize
;

5872 
i
 > 0u)

5875 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5878 
d°
 +
d°Inc
;

5880 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5882 
d°
 = 
d°_ba£
;

5886 
rOff£t
 +
buf„rInc
;

5888 if(
rOff£t
 >
L
)

5890 
rOff£t
 -
L
;

5894 
i
--;

5898 *
ªadOff£t
 = 
rOff£t
;

5905 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5906 
q15_t
 * 
cúcBuf„r
,

5907 
öt32_t
 
L
,

5908 
uöt16_t
 * 
wrôeOff£t
,

5909 
öt32_t
 
buf„rInc
,

5910 c⁄° 
q15_t
 * 
§c
,

5911 
öt32_t
 
§cInc
,

5912 
uöt32_t
 
blockSize
)

5914 
uöt32_t
 
i
 = 0u;

5915 
öt32_t
 
wOff£t
;

5919 
wOff£t
 = *
wrôeOff£t
;

5922 
i
 = 
blockSize
;

5924 
i
 > 0u)

5927 
cúcBuf„r
[
wOff£t
] = *
§c
;

5930 
§c
 +
§cInc
;

5933 
wOff£t
 +
buf„rInc
;

5934 if(
wOff£t
 >
L
)

5935 
wOff£t
 -
L
;

5938 
i
--;

5942 *
wrôeOff£t
 = (
uöt16_t
)
wOff£t
;

5949 
__INLINE
 
¨m_cúcuœrRód_q15
(

5950 
q15_t
 * 
cúcBuf„r
,

5951 
öt32_t
 
L
,

5952 
öt32_t
 * 
ªadOff£t
,

5953 
öt32_t
 
buf„rInc
,

5954 
q15_t
 * 
d°
,

5955 
q15_t
 * 
d°_ba£
,

5956 
öt32_t
 
d°_Àngth
,

5957 
öt32_t
 
d°Inc
,

5958 
uöt32_t
 
blockSize
)

5960 
uöt32_t
 
i
 = 0;

5961 
öt32_t
 
rOff£t
, 
d°_íd
;

5965 
rOff£t
 = *
ªadOff£t
;

5967 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5970 
i
 = 
blockSize
;

5972 
i
 > 0u)

5975 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5978 
d°
 +
d°Inc
;

5980 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5982 
d°
 = 
d°_ba£
;

5986 
rOff£t
 +
buf„rInc
;

5988 if(
rOff£t
 >
L
)

5990 
rOff£t
 -
L
;

5994 
i
--;

5998 *
ªadOff£t
 = 
rOff£t
;

6005 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

6006 
q7_t
 * 
cúcBuf„r
,

6007 
öt32_t
 
L
,

6008 
uöt16_t
 * 
wrôeOff£t
,

6009 
öt32_t
 
buf„rInc
,

6010 c⁄° 
q7_t
 * 
§c
,

6011 
öt32_t
 
§cInc
,

6012 
uöt32_t
 
blockSize
)

6014 
uöt32_t
 
i
 = 0u;

6015 
öt32_t
 
wOff£t
;

6019 
wOff£t
 = *
wrôeOff£t
;

6022 
i
 = 
blockSize
;

6024 
i
 > 0u)

6027 
cúcBuf„r
[
wOff£t
] = *
§c
;

6030 
§c
 +
§cInc
;

6033 
wOff£t
 +
buf„rInc
;

6034 if(
wOff£t
 >
L
)

6035 
wOff£t
 -
L
;

6038 
i
--;

6042 *
wrôeOff£t
 = (
uöt16_t
)
wOff£t
;

6049 
__INLINE
 
¨m_cúcuœrRód_q7
(

6050 
q7_t
 * 
cúcBuf„r
,

6051 
öt32_t
 
L
,

6052 
öt32_t
 * 
ªadOff£t
,

6053 
öt32_t
 
buf„rInc
,

6054 
q7_t
 * 
d°
,

6055 
q7_t
 * 
d°_ba£
,

6056 
öt32_t
 
d°_Àngth
,

6057 
öt32_t
 
d°Inc
,

6058 
uöt32_t
 
blockSize
)

6060 
uöt32_t
 
i
 = 0;

6061 
öt32_t
 
rOff£t
, 
d°_íd
;

6065 
rOff£t
 = *
ªadOff£t
;

6067 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6070 
i
 = 
blockSize
;

6072 
i
 > 0u)

6075 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6078 
d°
 +
d°Inc
;

6080 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6082 
d°
 = 
d°_ba£
;

6086 
rOff£t
 +
buf„rInc
;

6088 if(
rOff£t
 >
L
)

6090 
rOff£t
 -
L
;

6094 
i
--;

6098 *
ªadOff£t
 = 
rOff£t
;

6108 
¨m_powî_q31
(

6109 
q31_t
 * 
pSrc
,

6110 
uöt32_t
 
blockSize
,

6111 
q63_t
 * 
pResu…
);

6120 
¨m_powî_f32
(

6121 
Êﬂt32_t
 * 
pSrc
,

6122 
uöt32_t
 
blockSize
,

6123 
Êﬂt32_t
 * 
pResu…
);

6132 
¨m_powî_q15
(

6133 
q15_t
 * 
pSrc
,

6134 
uöt32_t
 
blockSize
,

6135 
q63_t
 * 
pResu…
);

6144 
¨m_powî_q7
(

6145 
q7_t
 * 
pSrc
,

6146 
uöt32_t
 
blockSize
,

6147 
q31_t
 * 
pResu…
);

6156 
¨m_món_q7
(

6157 
q7_t
 * 
pSrc
,

6158 
uöt32_t
 
blockSize
,

6159 
q7_t
 * 
pResu…
);

6168 
¨m_món_q15
(

6169 
q15_t
 * 
pSrc
,

6170 
uöt32_t
 
blockSize
,

6171 
q15_t
 * 
pResu…
);

6180 
¨m_món_q31
(

6181 
q31_t
 * 
pSrc
,

6182 
uöt32_t
 
blockSize
,

6183 
q31_t
 * 
pResu…
);

6192 
¨m_món_f32
(

6193 
Êﬂt32_t
 * 
pSrc
,

6194 
uöt32_t
 
blockSize
,

6195 
Êﬂt32_t
 * 
pResu…
);

6204 
¨m_v¨_f32
(

6205 
Êﬂt32_t
 * 
pSrc
,

6206 
uöt32_t
 
blockSize
,

6207 
Êﬂt32_t
 * 
pResu…
);

6216 
¨m_v¨_q31
(

6217 
q31_t
 * 
pSrc
,

6218 
uöt32_t
 
blockSize
,

6219 
q31_t
 * 
pResu…
);

6228 
¨m_v¨_q15
(

6229 
q15_t
 * 
pSrc
,

6230 
uöt32_t
 
blockSize
,

6231 
q15_t
 * 
pResu…
);

6240 
¨m_rms_f32
(

6241 
Êﬂt32_t
 * 
pSrc
,

6242 
uöt32_t
 
blockSize
,

6243 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_rms_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6264 
¨m_rms_q15
(

6265 
q15_t
 * 
pSrc
,

6266 
uöt32_t
 
blockSize
,

6267 
q15_t
 * 
pResu…
);

6276 
¨m_°d_f32
(

6277 
Êﬂt32_t
 * 
pSrc
,

6278 
uöt32_t
 
blockSize
,

6279 
Êﬂt32_t
 * 
pResu…
);

6288 
¨m_°d_q31
(

6289 
q31_t
 * 
pSrc
,

6290 
uöt32_t
 
blockSize
,

6291 
q31_t
 * 
pResu…
);

6300 
¨m_°d_q15
(

6301 
q15_t
 * 
pSrc
,

6302 
uöt32_t
 
blockSize
,

6303 
q15_t
 * 
pResu…
);

6312 
¨m_cm∂x_mag_f32
(

6313 
Êﬂt32_t
 * 
pSrc
,

6314 
Êﬂt32_t
 * 
pD°
,

6315 
uöt32_t
 
numSam∂es
);

6324 
¨m_cm∂x_mag_q31
(

6325 
q31_t
 * 
pSrc
,

6326 
q31_t
 * 
pD°
,

6327 
uöt32_t
 
numSam∂es
);

6336 
¨m_cm∂x_mag_q15
(

6337 
q15_t
 * 
pSrc
,

6338 
q15_t
 * 
pD°
,

6339 
uöt32_t
 
numSam∂es
);

6350 
¨m_cm∂x_dŸ_¥od_q15
(

6351 
q15_t
 * 
pSrcA
,

6352 
q15_t
 * 
pSrcB
,

6353 
uöt32_t
 
numSam∂es
,

6354 
q31_t
 * 
ªÆResu…
,

6355 
q31_t
 * 
imagResu…
);

6366 
¨m_cm∂x_dŸ_¥od_q31
(

6367 
q31_t
 * 
pSrcA
,

6368 
q31_t
 * 
pSrcB
,

6369 
uöt32_t
 
numSam∂es
,

6370 
q63_t
 * 
ªÆResu…
,

6371 
q63_t
 * 
imagResu…
);

6382 
¨m_cm∂x_dŸ_¥od_f32
(

6383 
Êﬂt32_t
 * 
pSrcA
,

6384 
Êﬂt32_t
 * 
pSrcB
,

6385 
uöt32_t
 
numSam∂es
,

6386 
Êﬂt32_t
 * 
ªÆResu…
,

6387 
Êﬂt32_t
 * 
imagResu…
);

6397 
¨m_cm∂x_mu…_ªÆ_q15
(

6398 
q15_t
 * 
pSrcCm∂x
,

6399 
q15_t
 * 
pSrcRól
,

6400 
q15_t
 * 
pCm∂xD°
,

6401 
uöt32_t
 
numSam∂es
);

6411 
¨m_cm∂x_mu…_ªÆ_q31
(

6412 
q31_t
 * 
pSrcCm∂x
,

6413 
q31_t
 * 
pSrcRól
,

6414 
q31_t
 * 
pCm∂xD°
,

6415 
uöt32_t
 
numSam∂es
);

6425 
¨m_cm∂x_mu…_ªÆ_f32
(

6426 
Êﬂt32_t
 * 
pSrcCm∂x
,

6427 
Êﬂt32_t
 * 
pSrcRól
,

6428 
Êﬂt32_t
 * 
pCm∂xD°
,

6429 
uöt32_t
 
numSam∂es
);

6439 
¨m_mö_q7
(

6440 
q7_t
 * 
pSrc
,

6441 
uöt32_t
 
blockSize
,

6442 
q7_t
 * 
ªsu…
,

6443 
uöt32_t
 * 
ödex
);

6453 
¨m_mö_q15
(

6454 
q15_t
 * 
pSrc
,

6455 
uöt32_t
 
blockSize
,

6456 
q15_t
 * 
pResu…
,

6457 
uöt32_t
 * 
pIndex
);

6467 
¨m_mö_q31
(

6468 
q31_t
 * 
pSrc
,

6469 
uöt32_t
 
blockSize
,

6470 
q31_t
 * 
pResu…
,

6471 
uöt32_t
 * 
pIndex
);

6481 
¨m_mö_f32
(

6482 
Êﬂt32_t
 * 
pSrc
,

6483 
uöt32_t
 
blockSize
,

6484 
Êﬂt32_t
 * 
pResu…
,

6485 
uöt32_t
 * 
pIndex
);

6495 
¨m_max_q7
(

6496 
q7_t
 * 
pSrc
,

6497 
uöt32_t
 
blockSize
,

6498 
q7_t
 * 
pResu…
,

6499 
uöt32_t
 * 
pIndex
);

6509 
¨m_max_q15
(

6510 
q15_t
 * 
pSrc
,

6511 
uöt32_t
 
blockSize
,

6512 
q15_t
 * 
pResu…
,

6513 
uöt32_t
 * 
pIndex
);

6523 
¨m_max_q31
(

6524 
q31_t
 * 
pSrc
,

6525 
uöt32_t
 
blockSize
,

6526 
q31_t
 * 
pResu…
,

6527 
uöt32_t
 * 
pIndex
);

6537 
¨m_max_f32
(

6538 
Êﬂt32_t
 * 
pSrc
,

6539 
uöt32_t
 
blockSize
,

6540 
Êﬂt32_t
 * 
pResu…
,

6541 
uöt32_t
 * 
pIndex
);

6551 
¨m_cm∂x_mu…_cm∂x_q15
(

6552 
q15_t
 * 
pSrcA
,

6553 
q15_t
 * 
pSrcB
,

6554 
q15_t
 * 
pD°
,

6555 
uöt32_t
 
numSam∂es
);

6565 
¨m_cm∂x_mu…_cm∂x_q31
(

6566 
q31_t
 * 
pSrcA
,

6567 
q31_t
 * 
pSrcB
,

6568 
q31_t
 * 
pD°
,

6569 
uöt32_t
 
numSam∂es
);

6579 
¨m_cm∂x_mu…_cm∂x_f32
(

6580 
Êﬂt32_t
 * 
pSrcA
,

6581 
Êﬂt32_t
 * 
pSrcB
,

6582 
Êﬂt32_t
 * 
pD°
,

6583 
uöt32_t
 
numSam∂es
);

6592 
¨m_Êﬂt_to_q31
(

6593 
Êﬂt32_t
 * 
pSrc
,

6594 
q31_t
 * 
pD°
,

6595 
uöt32_t
 
blockSize
);

6604 
¨m_Êﬂt_to_q15
(

6605 
Êﬂt32_t
 * 
pSrc
,

6606 
q15_t
 * 
pD°
,

6607 
uöt32_t
 
blockSize
);

6616 
¨m_Êﬂt_to_q7
(

6617 
Êﬂt32_t
 * 
pSrc
,

6618 
q7_t
 * 
pD°
,

6619 
uöt32_t
 
blockSize
);

6628 
¨m_q31_to_q15
(

6629 
q31_t
 * 
pSrc
,

6630 
q15_t
 * 
pD°
,

6631 
uöt32_t
 
blockSize
);

6640 
¨m_q31_to_q7
(

6641 
q31_t
 * 
pSrc
,

6642 
q7_t
 * 
pD°
,

6643 
uöt32_t
 
blockSize
);

6652 
¨m_q15_to_Êﬂt
(

6653 
q15_t
 * 
pSrc
,

6654 
Êﬂt32_t
 * 
pD°
,

6655 
uöt32_t
 
blockSize
);

6664 
¨m_q15_to_q31
(

6665 
q15_t
 * 
pSrc
,

6666 
q31_t
 * 
pD°
,

6667 
uöt32_t
 
blockSize
);

6676 
¨m_q15_to_q7
(

6677 
q15_t
 * 
pSrc
,

6678 
q7_t
 * 
pD°
,

6679 
uöt32_t
 
blockSize
);

6752 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6753 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6754 
Êﬂt32_t
 
X
,

6755 
Êﬂt32_t
 
Y
)

6757 
Êﬂt32_t
 
out
;

6758 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6759 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6760 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6761 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6762 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6764 
xIndex
 = (
öt32_t
Ë
X
;

6765 
yIndex
 = (
öt32_t
Ë
Y
;

6769 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
 - 1Ë|| 
yIndex
 < 0 || yIndex > (S->
numCﬁs
 - 1))

6775 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
 - 1Ë* 
S
->
numCﬁs
;

6779 
f00
 = 
pD©a
[
ödex
];

6780 
f01
 = 
pD©a
[
ödex
 + 1];

6783 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6787 
f10
 = 
pD©a
[
ödex
];

6788 
f11
 = 
pD©a
[
ödex
 + 1];

6791 
b1
 = 
f00
;

6792 
b2
 = 
f01
 - 
f00
;

6793 
b3
 = 
f10
 - 
f00
;

6794 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6797 
xdiff
 = 
X
 - 
xIndex
;

6800 
ydiff
 = 
Y
 - 
yIndex
;

6803 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6806  (
out
);

6818 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6819 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6820 
q31_t
 
X
,

6821 
q31_t
 
Y
)

6823 
q31_t
 
out
;

6824 
q31_t
 
acc
 = 0;

6825 
q31_t
 
x‰a˘
, 
y‰a˘
;

6826 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6827 
öt32_t
 
rI
, 
cI
;

6828 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6829 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6834 
rI
 = ((
X
 & (
q31_t
)0xFFF00000) >> 20);

6839 
cI
 = ((
Y
 & (
q31_t
)0xFFF00000) >> 20);

6843 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

6850 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6853 
x1
 = 
pYD©a
[(
rI
Ë+ (
öt32_t
)
nCﬁs
 * (
cI
) ];

6854 
x2
 = 
pYD©a
[(
rI
Ë+ (
öt32_t
)
nCﬁs
 * (
cI
) + 1];

6858 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6861 
y1
 = 
pYD©a
[(
rI
Ë+ (
öt32_t
)
nCﬁs
 * (
cI
 + 1) ];

6862 
y2
 = 
pYD©a
[(
rI
Ë+ (
öt32_t
)
nCﬁs
 * (
cI
 + 1) + 1];

6865 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6866 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6869 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6870 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6873 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6874 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6877 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6878 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6881  ((
q31_t
)(
acc
 << 2));

6892 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6893 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6894 
q31_t
 
X
,

6895 
q31_t
 
Y
)

6897 
q63_t
 
acc
 = 0;

6898 
q31_t
 
out
;

6899 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6900 
q31_t
 
x‰a˘
, 
y‰a˘
;

6901 
öt32_t
 
rI
, 
cI
;

6902 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6903 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6908 
rI
 = ((
X
 & (
q31_t
)0xFFF00000) >> 20);

6913 
cI
 = ((
Y
 & (
q31_t
)0xFFF00000) >> 20);

6917 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

6924 
x‰a˘
 = (
X
 & 0x000FFFFF);

6927 
x1
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
) ];

6928 
x2
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
) + 1];

6932 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6935 
y1
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
 + 1) ];

6936 
y2
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
 + 1) + 1];

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6950 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6951 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6954 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6955 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6959  ((
q15_t
)(
acc
 >> 36));

6970 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6971 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6972 
q31_t
 
X
,

6973 
q31_t
 
Y
)

6975 
q63_t
 
acc
 = 0;

6976 
q31_t
 
out
;

6977 
q31_t
 
x‰a˘
, 
y‰a˘
;

6978 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6979 
öt32_t
 
rI
, 
cI
;

6980 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6981 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6986 
rI
 = ((
X
 & (
q31_t
)0xFFF00000) >> 20);

6991 
cI
 = ((
Y
 & (
q31_t
)0xFFF00000) >> 20);

6995 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7002 
x‰a˘
 = (
X
 & (
q31_t
)0x000FFFFF);

7005 
x1
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
) ];

7006 
x2
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
) + 1];

7010 
y‰a˘
 = (
Y
 & (
q31_t
)0x000FFFFF);

7013 
y1
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
 + 1) ];

7014 
y2
 = 
pYD©a
[((
uöt32_t
)
rI
Ë+ 
nCﬁs
 * ((uöt32_t)
cI
 + 1) + 1];

7017 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7018 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7021 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7022 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7025 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7026 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7029 
out
 = ((
y2
 * (
y‰a˘
)));

7030 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7033  ((
q7_t
)(
acc
 >> 40));

7042 
	#mu…Acc_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7043 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë+ ((q63_tË
x
 * 
y
) + 0x80000000LL ) >> 32)

7046 
	#mu…Sub_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7047 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë- ((q63_tË
x
 * 
y
) + 0x80000000LL ) >> 32)

7050 
	#mu…_32x32_kìp32_R
(
a
, 
x
, 
y
Ë\

	)

7051 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 + 0x80000000LL ) >> 32)

7054 
	#mu…Acc_32x32_kìp32
(
a
, 
x
, 
y
Ë\

	)

7055 
a
 +(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7058 
	#mu…Sub_32x32_kìp32
(
a
, 
x
, 
y
Ë\

	)

7059 
a
 -(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
) >> 32)

7062 
	#mu…_32x32_kìp32
(
a
, 
x
, 
y
Ë\

	)

7063 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 ) >> 32)

7066 #i‡
deföed
 ( 
__CC_ARM
 )

7068 #i‡
deföed
–
ARM_MATH_CM4
 ) || deföed–
ARM_MATH_CM7
)

7069 
	#LOW_OPTIMIZATION_ENTER
 \

	)

7070 
_Pøgma
 ("push") \

7071 
_Pøgma
 ("O1")

7073 
	#LOW_OPTIMIZATION_ENTER


	)

7077 #i‡
deföed
–
ARM_MATH_CM4
 ) || deföed–
ARM_MATH_CM7
)

7078 
	#LOW_OPTIMIZATION_EXIT
 \

	)

7079 
_Pøgma
 ("pop")

7081 
	#LOW_OPTIMIZATION_EXIT


	)

7085 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7088 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7090 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

7091 
	#LOW_OPTIMIZATION_ENTER


	)

7092 
	#LOW_OPTIMIZATION_EXIT


	)

7093 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7094 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7096 #ñi‡
deföed
(
__GNUC__
)

7097 
	#LOW_OPTIMIZATION_ENTER
 
	`__©åibuã__
(–
	`›timize
("-O1"Ë))

	)

7098 
	#LOW_OPTIMIZATION_EXIT


	)

7099 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7100 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7102 #ñi‡
deföed
(
__ICCARM__
)

7104 #i‡
deföed
–
ARM_MATH_CM4
 ) || deföed–
ARM_MATH_CM7
)

7105 
	#LOW_OPTIMIZATION_ENTER
 \

	)

7106 
_Pøgma
 ("optimize=low")

7108 
	#LOW_OPTIMIZATION_ENTER


	)

7112 
	#LOW_OPTIMIZATION_EXIT


	)

7115 #i‡
deföed
–
ARM_MATH_CM4
 ) || deföed–
ARM_MATH_CM7
)

7116 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER
 \

	)

7117 
_Pøgma
 ("optimize=low")

7119 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7123 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7125 #ñi‡
deföed
(
__CSMC__
)

7126 
	#LOW_OPTIMIZATION_ENTER


	)

7127 
	#LOW_OPTIMIZATION_EXIT


	)

7128 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7129 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7131 #ñi‡
deföed
(
__TASKING__
)

7132 
	#LOW_OPTIMIZATION_ENTER


	)

7133 
	#LOW_OPTIMIZATION_EXIT


	)

7134 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7135 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7140 #ifde‡ 
__˝lu•lus


7145 #i‡
deföed
 ( 
__GNUC__
 )

7146 #¥agm®
GCC
 
dügno°ic
 
p›


	@Drivers/CMSIS/Include/cmsis_armcc.h

35 #i‚de‡
__CMSIS_ARMCC_H


36 
	#__CMSIS_ARMCC_H


	)

39 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 400677)

57 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

59 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

60 (
__ªgC⁄åﬁ
);

61 
	}
}

69 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

71 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

72 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

73 
	}
}

81 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

83 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

84 (
__ªgIPSR
);

85 
	}
}

93 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

95 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

96 (
__ªgAPSR
);

97 
	}
}

105 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

107 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

108 (
__ªgXPSR
);

109 
	}
}

117 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

119 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

120 (
__ªgPro˚ssSèckPoöãr
);

121 
	}
}

129 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

131 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

132 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

133 
	}
}

141 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

153 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

155 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

156 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

157 
	}
}

165 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

167 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

168 (
__ªgPriMask
);

169 
	}
}

177 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

179 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

180 
__ªgPriMask
 = (
¥iMask
);

181 
	}
}

184 #i‡ (
__CORTEX_M
 >0x03UË|| (
__CORTEX_SC
 >= 300U)

191 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

199 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

207 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

209 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

210 (
__ªgBa£Pri
);

211 
	}
}

219 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

221 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

222 
__ªgBa£Pri
 = (
ba£Pri
 & 0xFFU);

223 
	}
}

232 
__STATIC_INLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

234 
uöt32_t
 
__ªgBa£PriMax
 
	`__ASM
("basepri_max");

235 
__ªgBa£PriMax
 = (
ba£Pri
 & 0xFFU);

236 
	}
}

244 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

246 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

247 (
__ªgFau…Mask
);

248 
	}
}

256 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

258 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

259 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

260 
	}
}

265 #i‡ (
__CORTEX_M
 == 0x04U) || (__CORTEX_M == 0x07U)

272 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

274 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

275 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

276 (
__ªgÂs¸
);

280 
	}
}

288 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

290 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

291 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

292 
__ªgÂs¸
 = (
Âs¸
);

294 
	}
}

313 
	#__NOP
 
__n›


	)

320 
	#__WFI
 
__wfi


	)

328 
	#__WFE
 
__w„


	)

335 
	#__SEV
 
__£v


	)

344 
	#__ISB
(Ëdÿ{\

	)

345 
__scheduÀ_b¨rõr
();\

346 
__isb
(0xF);\

347 
__scheduÀ_b¨rõr
();\

355 
	#__DSB
(Ëdÿ{\

	)

356 
	`__scheduÀ_b¨rõr
();\

357 
	`__dsb
(0xF);\

358 
	`__scheduÀ_b¨rõr
();\

359 
	}
} 0U)

366 
	#__DMB
(Ëdÿ{\

	)

367 
	`__scheduÀ_b¨rõr
();\

368 
	`__dmb
(0xF);\

369 
	`__scheduÀ_b¨rõr
();\

370 
	}
} 0U)

378 
	#__REV
 
__ªv


	)

387 #i‚de‡
__NO_EMBEDDED_ASM


388 
	`__©åibuã__
((
	`£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

390 
ªv16
 
r0
,Ñ0

391 
bx
 
Ã


392 
	}
}

401 #i‚de‡
__NO_EMBEDDED_ASM


402 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

404 
ªvsh
 
r0
,Ñ0

405 
bx
 
Ã


406 
	}
}

417 
	#__ROR
 
__r‹


	)

427 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

436 #i‡ (
__CORTEX_M
 >0x03UË|| (
__CORTEX_SC
 >= 300U)

437 
	#__RBIT
 
__rbô


	)

439 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

441 
uöt32_t
 
ªsu…
;

442 
öt32_t
 
s
 = 4 * 8 - 1;

444 
ªsu…
 = 
vÆue
;

445 
vÆue
 >>= 1U; value; value >>= 1U)

447 
ªsu…
 <<= 1U;

448 
ªsu…
 |
vÆue
 & 1U;

449 
s
--;

451 
ªsu…
 <<
s
;

452 (
ªsu…
);

453 
	}
}

463 
	#__CLZ
 
__˛z


	)

466 #i‡ (
__CORTEX_M
 >0x03UË|| (
__CORTEX_SC
 >= 300U)

474 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

475 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

477 
	#__LDREXB
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt8_t
 ) 
	`__ldªx
’å)Ë_Pøgma("p›")

	)

487 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

488 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

490 
	#__LDREXH
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt16_t
Ë
	`__ldªx
’å)Ë_Pøgma("p›")

	)

500 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

501 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

503 
	#__LDREXW
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt32_t
 ) 
	`__ldªx
’å)Ë_Pøgma("p›")

	)

515 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

516 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

518 
	#__STREXB
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

530 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

531 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

533 
	#__STREXH
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

545 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

546 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

548 
	#__STREXW
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

556 
	#__CLREX
 
__˛ªx


	)

566 
	#__SSAT
 
__sßt


	)

576 
	#__USAT
 
__ußt


	)

586 #i‚de‡
__NO_EMBEDDED_ASM


587 
__©åibuã__
((
£˘i⁄
(".ºx_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

589 
ºx
 
r0
,Ñ0

590 
bx
 
Ã


591 
	}
}

601 
	#__LDRBT
(
±r
Ë((
uöt8_t
 ) 
	`__ldπ
’å))

	)

610 
	#__LDRHT
(
±r
Ë((
uöt16_t
Ë
	`__ldπ
’å))

	)

619 
	#__LDRT
(
±r
Ë((
uöt32_t
 ) 
	`__ldπ
’å))

	)

628 
	#__STRBT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

637 
	#__STRHT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

646 
	#__STRT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

659 #i‡(
__CORTEX_M
 >= 0x04U)

661 
	#__SADD8
 
__ßdd8


	)

662 
	#__QADD8
 
__qadd8


	)

663 
	#__SHADD8
 
__shadd8


	)

664 
	#__UADD8
 
__uadd8


	)

665 
	#__UQADD8
 
__uqadd8


	)

666 
	#__UHADD8
 
__uhadd8


	)

667 
	#__SSUB8
 
__ssub8


	)

668 
	#__QSUB8
 
__qsub8


	)

669 
	#__SHSUB8
 
__shsub8


	)

670 
	#__USUB8
 
__usub8


	)

671 
	#__UQSUB8
 
__uqsub8


	)

672 
	#__UHSUB8
 
__uhsub8


	)

673 
	#__SADD16
 
__ßdd16


	)

674 
	#__QADD16
 
__qadd16


	)

675 
	#__SHADD16
 
__shadd16


	)

676 
	#__UADD16
 
__uadd16


	)

677 
	#__UQADD16
 
__uqadd16


	)

678 
	#__UHADD16
 
__uhadd16


	)

679 
	#__SSUB16
 
__ssub16


	)

680 
	#__QSUB16
 
__qsub16


	)

681 
	#__SHSUB16
 
__shsub16


	)

682 
	#__USUB16
 
__usub16


	)

683 
	#__UQSUB16
 
__uqsub16


	)

684 
	#__UHSUB16
 
__uhsub16


	)

685 
	#__SASX
 
__ßsx


	)

686 
	#__QASX
 
__qasx


	)

687 
	#__SHASX
 
__shasx


	)

688 
	#__UASX
 
__uasx


	)

689 
	#__UQASX
 
__uqasx


	)

690 
	#__UHASX
 
__uhasx


	)

691 
	#__SSAX
 
__sßx


	)

692 
	#__QSAX
 
__qßx


	)

693 
	#__SHSAX
 
__shßx


	)

694 
	#__USAX
 
__ußx


	)

695 
	#__UQSAX
 
__uqßx


	)

696 
	#__UHSAX
 
__uhßx


	)

697 
	#__USAD8
 
__ußd8


	)

698 
	#__USADA8
 
__ußda8


	)

699 
	#__SSAT16
 
__sßt16


	)

700 
	#__USAT16
 
__ußt16


	)

701 
	#__UXTB16
 
__uxtb16


	)

702 
	#__UXTAB16
 
__uxèb16


	)

703 
	#__SXTB16
 
__sxtb16


	)

704 
	#__SXTAB16
 
__sxèb16


	)

705 
	#__SMUAD
 
__smuad


	)

706 
	#__SMUADX
 
__smuadx


	)

707 
	#__SMLAD
 
__smœd


	)

708 
	#__SMLADX
 
__smœdx


	)

709 
	#__SMLALD
 
__smœld


	)

710 
	#__SMLALDX
 
__smœldx


	)

711 
	#__SMUSD
 
__smusd


	)

712 
	#__SMUSDX
 
__smusdx


	)

713 
	#__SMLSD
 
__smlsd


	)

714 
	#__SMLSDX
 
__smlsdx


	)

715 
	#__SMLSLD
 
__sml¶d


	)

716 
	#__SMLSLDX
 
__sml¶dx


	)

717 
	#__SEL
 
__£l


	)

718 
	#__QADD
 
__qadd


	)

719 
	#__QSUB
 
__qsub


	)

721 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0x0000FFFFULË| \

	)

722 ((((
	guöt32_t
)(
	gARG2
)Ë<< (
	gARG3
)) & 0xFFFF0000UL) )

724 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0xFFFF0000ULË| \

	)

725 ((((
	guöt32_t
)(
	gARG2
)Ë>> (
	gARG3
)) & 0x0000FFFFUL) )

727 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1Ë* (ARG2)Ë+ \

	)

728 ((
	göt64_t
)(
	gARG3
) << 32U) ) >> 32U))

	@Drivers/CMSIS/Include/cmsis_armcc_V6.h

35 #i‚de‡
__CMSIS_ARMCC_V6_H


36 
	#__CMSIS_ARMCC_V6_H


	)

50 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__íabÀ_úq
()

52 
__ASM
 volatile ("cpsie i" : : : "memory");

53 
	}
}

61 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__dißbÀ_úq
()

63 
__ASM
 volatile ("cpsid i" : : : "memory");

64 
	}
}

72 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

74 
uöt32_t
 
ªsu…
;

76 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

77 (
ªsu…
);

78 
	}
}

81 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

87 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

89 
uöt32_t
 
ªsu…
;

91 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ_ns" : "Ù" (
ªsu…
) );

92 (
ªsu…
);

93 
	}
}

102 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

104 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

105 
	}
}

108 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

114 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
c⁄åﬁ
)

116 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ_ns, %0" : : "r" (
c⁄åﬁ
) : "memory");

117 
	}
}

126 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

128 
uöt32_t
 
ªsu…
;

130 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

131 (
ªsu…
);

132 
	}
}

135 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

141 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_IPSR_NS
()

143 
uöt32_t
 
ªsu…
;

145 
__ASM
 vﬁ©ûê("MRS %0, ip§_ns" : "Ù" (
ªsu…
) );

146 (
ªsu…
);

147 
	}
}

156 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

158 
uöt32_t
 
ªsu…
;

160 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

161 (
ªsu…
);

162 
	}
}

165 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

171 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_APSR_NS
()

173 
uöt32_t
 
ªsu…
;

175 
__ASM
 vﬁ©ûê("MRS %0,áp§_ns" : "Ù" (
ªsu…
) );

176 (
ªsu…
);

177 
	}
}

186 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

188 
uöt32_t
 
ªsu…
;

190 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

191 (
ªsu…
);

192 
	}
}

195 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

201 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_xPSR_NS
()

203 
uöt32_t
 
ªsu…
;

205 
__ASM
 vﬁ©ûê("MRS %0, xp§_ns" : "Ù" (
ªsu…
) );

206 (
ªsu…
);

207 
	}
}

216 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

218 
uöt32_t
 
ªsu…
;

220 
__ASM
 vﬁ©ûê("MRS %0,Ö•" : "Ù" (
ªsu…
) );

221 (
ªsu…
);

222 
	}
}

225 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

231 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

233 
uöt32_t
 
ªsu…
;

235 
__ASM
 vﬁ©ûê("MRS %0,Ö•_ns" : "Ù" (
ªsu…
) );

236 (
ªsu…
);

237 
	}
}

246 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

248 
__ASM
 vﬁ©ûê("MSRÖ•, %0" : : "r" (
t›OfProcSèck
) : "sp");

249 
	}
}

252 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

258 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
t›OfProcSèck
)

260 
__ASM
 vﬁ©ûê("MSRÖ•_ns, %0" : : "r" (
t›OfProcSèck
) : "sp");

261 
	}
}

270 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

272 
uöt32_t
 
ªsu…
;

274 
__ASM
 vﬁ©ûê("MRS %0, m•" : "Ù" (
ªsu…
) );

275 (
ªsu…
);

276 
	}
}

279 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

285 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

287 
uöt32_t
 
ªsu…
;

289 
__ASM
 vﬁ©ûê("MRS %0, m•_ns" : "Ù" (
ªsu…
) );

290 (
ªsu…
);

291 
	}
}

300 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

302 
__ASM
 vﬁ©ûê("MSR m•, %0" : : "r" (
t›OfMaöSèck
) : "sp");

303 
	}
}

306 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

312 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
t›OfMaöSèck
)

314 
__ASM
 vﬁ©ûê("MSR m•_ns, %0" : : "r" (
t›OfMaöSèck
) : "sp");

315 
	}
}

324 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

329 (
ªsu…
);

330 
	}
}

333 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

339 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

341 
uöt32_t
 
ªsu…
;

343 
__ASM
 vﬁ©ûê("MRS %0,Örimask_ns" : "Ù" (
ªsu…
) );

344 (
ªsu…
);

345 
	}
}

354 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

356 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

357 
	}
}

360 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

366 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
¥iMask
)

368 
__ASM
 vﬁ©ûê("MSRÖrimask_ns, %0" : : "r" (
¥iMask
) : "memory");

369 
	}
}

373 #i‡((
__ARM_ARCH_7M__
 =1UË|| (
__ARM_ARCH_7EM__
 =1UË|| (
__ARM_ARCH_8M__
 == 1U))

380 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

382 
__ASM
 volatile ("cpsie f" : : : "memory");

383 
	}
}

391 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

393 
__ASM
 volatile ("cpsid f" : : : "memory");

394 
	}
}

402 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

404 
uöt32_t
 
ªsu…
;

406 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i" : "Ù" (
ªsu…
) );

407 (
ªsu…
);

408 
	}
}

411 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

417 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

419 
uöt32_t
 
ªsu…
;

421 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_ns" : "Ù" (
ªsu…
) );

422 (
ªsu…
);

423 
	}
}

432 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

434 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) : "memory");

435 
	}
}

438 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

444 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
vÆue
)

446 
__ASM
 vﬁ©ûê("MSR ba£¥i_ns, %0" : : "r" (
vÆue
) : "memory");

447 
	}
}

457 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
vÆue
)

459 
__ASM
 vﬁ©ûê("MSR ba£¥i_max, %0" : : "r" (
vÆue
) : "memory");

460 
	}
}

463 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

470 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_BASEPRI_MAX_NS
(
uöt32_t
 
vÆue
)

472 
__ASM
 vﬁ©ûê("MSR ba£¥i_max_ns, %0" : : "r" (
vÆue
) : "memory");

473 
	}
}

482 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

487 (
ªsu…
);

488 
	}
}

491 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

497 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

499 
uöt32_t
 
ªsu…
;

501 
__ASM
 vﬁ©ûê("MRS %0, fau…mask_ns" : "Ù" (
ªsu…
) );

502 (
ªsu…
);

503 
	}
}

512 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

514 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

515 
	}
}

518 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

524 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
Áu…Mask
)

526 
__ASM
 vﬁ©ûê("MSR fau…mask_ns, %0" : : "r" (
Áu…Mask
) : "memory");

527 
	}
}

534 #i‡(
__ARM_ARCH_8M__
 == 1U)

541 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSPLIM
()

543 
uöt32_t
 
ªsu…
;

545 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim" : "Ù" (
ªsu…
) );

546 (
ªsu…
);

547 
	}
}

550 #i‡ (
__ARM_FEATURE_CMSE
 =3UË&& (
__ARM_ARCH_PROFILE
 == 'M')

556 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

558 
uöt32_t
 
ªsu…
;

560 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim_ns" : "Ù" (
ªsu…
) );

561 (
ªsu…
);

562 
	}
}

571 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_PSPLIM
(
uöt32_t
 
ProcSèckPåLimô
)

573 
__ASM
 vﬁ©ûê("MSRÖ•lim, %0" : : "r" (
ProcSèckPåLimô
));

574 
	}
}

577 #i‡ (
__ARM_FEATURE_CMSE
 =3UË&& (
__ARM_ARCH_PROFILE
 == 'M')

583 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
ProcSèckPåLimô
)

585 
__ASM
 vﬁ©ûê("MSRÖ•lim_ns, %0\n" : : "r" (
ProcSèckPåLimô
));

586 
	}
}

595 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSPLIM
()

597 
uöt32_t
 
ªsu…
;

599 
__ASM
 vﬁ©ûê("MRS %0, m•lim" : "Ù" (
ªsu…
) );

601 (
ªsu…
);

602 
	}
}

605 #i‡ (
__ARM_FEATURE_CMSE
 =3UË&& (
__ARM_ARCH_PROFILE
 == 'M')

611 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

613 
uöt32_t
 
ªsu…
;

615 
__ASM
 vﬁ©ûê("MRS %0, m•lim_ns" : "Ù" (
ªsu…
) );

616 (
ªsu…
);

617 
	}
}

626 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_MSPLIM
(
uöt32_t
 
MaöSèckPåLimô
)

628 
__ASM
 vﬁ©ûê("MSR m•lim, %0" : : "r" (
MaöSèckPåLimô
));

629 
	}
}

632 #i‡ (
__ARM_FEATURE_CMSE
 =3UË&& (
__ARM_ARCH_PROFILE
 == 'M')

638 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
MaöSèckPåLimô
)

640 
__ASM
 vﬁ©ûê("MSR m•lim_ns, %0" : : "r" (
MaöSèckPåLimô
));

641 
	}
}

647 #i‡((
__ARM_ARCH_7EM__
 =1UË|| (
__ARM_ARCH_8M__
 == 1U))

654 
	#__gë_FPSCR
 
__buûtö_¨m_gë_Âs¸


	)

656 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

658 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

659 
uöt32_t
 
ªsu…
;

661 
__ASM
 volatile ("");

662 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

663 
__ASM
 volatile ("");

664 (
ªsu…
);

668 
	}
}

671 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

677 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__TZ_gë_FPSCR_NS
()

679 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

680 
uöt32_t
 
ªsu…
;

682 
__ASM
 volatile ("");

683 
__ASM
 vﬁ©ûê("VMRS %0, fps¸_ns" : "Ù" (
ªsu…
) );

684 
__ASM
 volatile ("");

685 (
ªsu…
);

689 
	}
}

698 
	#__£t_FPSCR
 
__buûtö_¨m_£t_Âs¸


	)

700 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

702 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

703 
__ASM
 volatile ("");

704 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc");

705 
__ASM
 volatile ("");

707 
	}
}

710 #i‡ (
__ARM_FEATURE_CMSE
 == 3U)

716 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__TZ_£t_FPSCR_NS
(
uöt32_t
 
Âs¸
)

718 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

719 
__ASM
 volatile ("");

720 
__ASM
 vﬁ©ûê("VMSR fps¸_ns, %0" : : "r" (
Âs¸
) : "vfpcc");

721 
__ASM
 volatile ("");

723 
	}
}

742 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

743 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

744 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

746 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

747 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

754 
	#__NOP
 
__buûtö_¨m_n›


	)

760 
	#__WFI
 
__buûtö_¨m_wfi


	)

768 
	#__WFE
 
__buûtö_¨m_w„


	)

775 
	#__SEV
 
__buûtö_¨m_£v


	)

784 
	#__ISB
(Ë
	`__buûtö_¨m_isb
(0xF);

	)

791 
	#__DSB
(Ë
	`__buûtö_¨m_dsb
(0xF);

	)

799 
	#__DMB
(Ë
	`__buûtö_¨m_dmb
(0xF);

	)

808 
	#__REV
 
__buûtö_bsw≠32


	)

817 
	#__REV16
 
__buûtö_bsw≠16


	)

819 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

821 
uöt32_t
 
ªsu…
;

823 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

824 (
ªsu…
);

825 
	}
}

836 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

838 
öt32_t
 
ªsu…
;

840 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

841 (
ªsu…
);

842 
	}
}

852 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

854  (
›1
 >> 
›2
) | (op1 << (32U - op2));

855 
	}
}

865 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

875 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

877 
uöt32_t
 
ªsu…
;

879 #i‡((
__ARM_ARCH_7M__
 =1UË|| (
__ARM_ARCH_7EM__
 =1UË|| (
__ARM_ARCH_8M__
 == 1U))

880 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

882 
öt32_t
 
s
 = 4 * 8 - 1;

884 
ªsu…
 = 
vÆue
;

885 
vÆue
 >>= 1U; value; value >>= 1U)

887 
ªsu…
 <<= 1U;

888 
ªsu…
 |
vÆue
 & 1U;

889 
s
--;

891 
ªsu…
 <<
s
;

893 (
ªsu…
);

894 
	}
}

903 
	#__CLZ
 
__buûtö_˛z


	)

906 #i‡((
__ARM_ARCH_7M__
 =1UË|| (
__ARM_ARCH_7EM__
 =1UË|| (
__ARM_ARCH_8M__
 == 1U))

914 
	#__LDREXB
 (
uöt8_t
)
__buûtö_¨m_ldªx


	)

923 
	#__LDREXH
 (
uöt16_t
)
__buûtö_¨m_ldªx


	)

932 
	#__LDREXW
 (
uöt32_t
)
__buûtö_¨m_ldªx


	)

943 
	#__STREXB
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

954 
	#__STREXH
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

965 
	#__STREXW
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

972 
	#__CLREX
 
__buûtö_¨m_˛ªx


	)

983 
	#__SSAT
(
ARG1
,
ARG2
Ë\

	)

985 
öt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

986 
__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

987 
	g__RES
; \

998 
	#__USAT
 
__buûtö_¨m_ußt


	)

1000 
	#__USAT
(
ARG1
,
ARG2
Ë\

	)

1002 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

1003 
__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1004 
	g__RES
; \

1016 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

1018 
uöt32_t
 
ªsu…
;

1020 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

1021 (
ªsu…
);

1022 
	}
}

1031 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
±r
)

1033 
uöt32_t
 
ªsu…
;

1035 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1036  ((
uöt8_t
Ë
ªsu…
);

1037 
	}
}

1046 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
±r
)

1048 
uöt32_t
 
ªsu…
;

1050 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1051  ((
uöt16_t
Ë
ªsu…
);

1052 
	}
}

1061 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
±r
)

1063 
uöt32_t
 
ªsu…
;

1065 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1066 (
ªsu…
);

1067 
	}
}

1076 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1078 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1079 
	}
}

1088 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1090 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1091 
	}
}

1100 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1102 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
±r
Ë: "r" (
vÆue
) );

1103 
	}
}

1108 #i‡(
__ARM_ARCH_8M__
 == 1U)

1116 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

1118 
uöt32_t
 
ªsu…
;

1120 
__ASM
 vﬁ©ûê("ldab %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1121  ((
uöt8_t
Ë
ªsu…
);

1122 
	}
}

1131 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

1133 
uöt32_t
 
ªsu…
;

1135 
__ASM
 vﬁ©ûê("ldah %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1136  ((
uöt16_t
Ë
ªsu…
);

1137 
	}
}

1146 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

1148 
uöt32_t
 
ªsu…
;

1150 
__ASM
 vﬁ©ûê("ld®%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1151 (
ªsu…
);

1152 
	}
}

1161 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1163 
__ASM
 vﬁ©ûê("°lb %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1164 
	}
}

1173 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1175 
__ASM
 vﬁ©ûê("°lh %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1176 
	}
}

1185 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1187 
__ASM
 vﬁ©ûê("°»%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1188 
	}
}

1197 
	#__LDAEXB
 (
uöt8_t
)
__buûtö_¨m_ld´x


	)

1206 
	#__LDAEXH
 (
uöt16_t
)
__buûtö_¨m_ld´x


	)

1215 
	#__LDAEX
 (
uöt32_t
)
__buûtö_¨m_ld´x


	)

1226 
	#__STLEXB
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1237 
	#__STLEXH
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1248 
	#__STLEX
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1261 #i‡(
__ARM_FEATURE_DSP
 == 1U)

1263 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1265 
uöt32_t
 
ªsu…
;

1267 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1268 (
ªsu…
);

1269 
	}
}

1271 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1273 
uöt32_t
 
ªsu…
;

1275 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1276 (
ªsu…
);

1277 
	}
}

1279 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1281 
uöt32_t
 
ªsu…
;

1283 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1284 (
ªsu…
);

1285 
	}
}

1287 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1289 
uöt32_t
 
ªsu…
;

1291 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1292 (
ªsu…
);

1293 
	}
}

1295 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1297 
uöt32_t
 
ªsu…
;

1299 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1300 (
ªsu…
);

1301 
	}
}

1303 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1305 
uöt32_t
 
ªsu…
;

1307 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1308 (
ªsu…
);

1309 
	}
}

1312 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1314 
uöt32_t
 
ªsu…
;

1316 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1317 (
ªsu…
);

1318 
	}
}

1320 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1322 
uöt32_t
 
ªsu…
;

1324 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1325 (
ªsu…
);

1326 
	}
}

1328 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1330 
uöt32_t
 
ªsu…
;

1332 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1333 (
ªsu…
);

1334 
	}
}

1336 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1338 
uöt32_t
 
ªsu…
;

1340 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1341 (
ªsu…
);

1342 
	}
}

1344 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1346 
uöt32_t
 
ªsu…
;

1348 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1349 (
ªsu…
);

1350 
	}
}

1352 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1354 
uöt32_t
 
ªsu…
;

1356 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1357 (
ªsu…
);

1358 
	}
}

1361 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1363 
uöt32_t
 
ªsu…
;

1365 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1366 (
ªsu…
);

1367 
	}
}

1369 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1371 
uöt32_t
 
ªsu…
;

1373 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1374 (
ªsu…
);

1375 
	}
}

1377 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1379 
uöt32_t
 
ªsu…
;

1381 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1382 (
ªsu…
);

1383 
	}
}

1385 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1387 
uöt32_t
 
ªsu…
;

1389 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1390 (
ªsu…
);

1391 
	}
}

1393 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1395 
uöt32_t
 
ªsu…
;

1397 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1398 (
ªsu…
);

1399 
	}
}

1401 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1403 
uöt32_t
 
ªsu…
;

1405 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1406 (
ªsu…
);

1407 
	}
}

1409 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1411 
uöt32_t
 
ªsu…
;

1413 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1414 (
ªsu…
);

1415 
	}
}

1417 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1419 
uöt32_t
 
ªsu…
;

1421 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1422 (
ªsu…
);

1423 
	}
}

1425 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1427 
uöt32_t
 
ªsu…
;

1429 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1430 (
ªsu…
);

1431 
	}
}

1433 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1435 
uöt32_t
 
ªsu…
;

1437 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1438 (
ªsu…
);

1439 
	}
}

1441 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1443 
uöt32_t
 
ªsu…
;

1445 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1446 (
ªsu…
);

1447 
	}
}

1449 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1451 
uöt32_t
 
ªsu…
;

1453 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1454 (
ªsu…
);

1455 
	}
}

1457 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1459 
uöt32_t
 
ªsu…
;

1461 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1462 (
ªsu…
);

1463 
	}
}

1465 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1467 
uöt32_t
 
ªsu…
;

1469 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1470 (
ªsu…
);

1471 
	}
}

1473 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1475 
uöt32_t
 
ªsu…
;

1477 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1478 (
ªsu…
);

1479 
	}
}

1481 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1483 
uöt32_t
 
ªsu…
;

1485 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1486 (
ªsu…
);

1487 
	}
}

1489 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1491 
uöt32_t
 
ªsu…
;

1493 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1494 (
ªsu…
);

1495 
	}
}

1497 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1499 
uöt32_t
 
ªsu…
;

1501 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1502 (
ªsu…
);

1503 
	}
}

1505 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1507 
uöt32_t
 
ªsu…
;

1509 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1510 (
ªsu…
);

1511 
	}
}

1513 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1515 
uöt32_t
 
ªsu…
;

1517 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1518 (
ªsu…
);

1519 
	}
}

1521 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1523 
uöt32_t
 
ªsu…
;

1525 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1526 (
ªsu…
);

1527 
	}
}

1529 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1531 
uöt32_t
 
ªsu…
;

1533 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1534 (
ªsu…
);

1535 
	}
}

1537 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1539 
uöt32_t
 
ªsu…
;

1541 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1542 (
ªsu…
);

1543 
	}
}

1545 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1547 
uöt32_t
 
ªsu…
;

1549 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1550 (
ªsu…
);

1551 
	}
}

1553 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1555 
uöt32_t
 
ªsu…
;

1557 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1558 (
ªsu…
);

1559 
	}
}

1561 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1563 
uöt32_t
 
ªsu…
;

1565 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1566 (
ªsu…
);

1567 
	}
}

1569 
	#__SSAT16
(
ARG1
,
ARG2
Ë\

	)

1571 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

1572 
__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1573 
	g__RES
; \

1576 
	#__USAT16
(
ARG1
,
ARG2
Ë\

	)

1578 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

1579 
__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1580 
	g__RES
; \

1583 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

1585 
uöt32_t
 
ªsu…
;

1587 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1588 (
ªsu…
);

1589 
	}
}

1591 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1593 
uöt32_t
 
ªsu…
;

1595 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1596 (
ªsu…
);

1597 
	}
}

1599 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

1601 
uöt32_t
 
ªsu…
;

1603 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1604 (
ªsu…
);

1605 
	}
}

1607 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1609 
uöt32_t
 
ªsu…
;

1611 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1612 (
ªsu…
);

1613 
	}
}

1615 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1617 
uöt32_t
 
ªsu…
;

1619 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1620 (
ªsu…
);

1621 
	}
}

1623 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1625 
uöt32_t
 
ªsu…
;

1627 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1628 (
ªsu…
);

1629 
	}
}

1631 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1633 
uöt32_t
 
ªsu…
;

1635 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1636 (
ªsu…
);

1637 
	}
}

1639 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1641 
uöt32_t
 
ªsu…
;

1643 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1644 (
ªsu…
);

1645 
	}
}

1647 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1649 
	uŒªg_u
{

1650 
uöt32_t
 
w32
[2];

1651 
uöt64_t
 
w64
;

1652 } 
Œr
;

1653 
Œr
.
w64
 = 
acc
;

1655 #i‚de‡
__ARMEB__


1656 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1658 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1661 (
Œr
.
w64
);

1662 
	}
}

1664 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1666 
	uŒªg_u
{

1667 
uöt32_t
 
w32
[2];

1668 
uöt64_t
 
w64
;

1669 } 
Œr
;

1670 
Œr
.
w64
 = 
acc
;

1672 #i‚de‡
__ARMEB__


1673 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1675 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1678 (
Œr
.
w64
);

1679 
	}
}

1681 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1683 
uöt32_t
 
ªsu…
;

1685 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1686 (
ªsu…
);

1687 
	}
}

1689 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1691 
uöt32_t
 
ªsu…
;

1693 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1694 (
ªsu…
);

1695 
	}
}

1697 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1699 
uöt32_t
 
ªsu…
;

1701 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1702 (
ªsu…
);

1703 
	}
}

1705 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1707 
uöt32_t
 
ªsu…
;

1709 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1710 (
ªsu…
);

1711 
	}
}

1713 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1715 
	uŒªg_u
{

1716 
uöt32_t
 
w32
[2];

1717 
uöt64_t
 
w64
;

1718 } 
Œr
;

1719 
Œr
.
w64
 = 
acc
;

1721 #i‚de‡
__ARMEB__


1722 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1724 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1727 (
Œr
.
w64
);

1728 
	}
}

1730 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1732 
	uŒªg_u
{

1733 
uöt32_t
 
w32
[2];

1734 
uöt64_t
 
w64
;

1735 } 
Œr
;

1736 
Œr
.
w64
 = 
acc
;

1738 #i‚de‡
__ARMEB__


1739 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1741 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1744 (
Œr
.
w64
);

1745 
	}
}

1747 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1749 
uöt32_t
 
ªsu…
;

1751 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1752 (
ªsu…
);

1753 
	}
}

1755 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
öt32_t
 
	$__QADD
–
öt32_t
 
›1
, i¡32_à
›2
)

1757 
öt32_t
 
ªsu…
;

1759 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1760 (
ªsu…
);

1761 
	}
}

1763 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
öt32_t
 
	$__QSUB
–
öt32_t
 
›1
, i¡32_à
›2
)

1765 
öt32_t
 
ªsu…
;

1767 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1768 (
ªsu…
);

1769 
	}
}

1771 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

1773 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
), 
	g__ARG2
 = (
ARG2
); \

1774 
__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1775 
	g__RES
; \

1778 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

1780 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
), 
	g__ARG2
 = (
ARG2
); \

1781 i‡(
	gARG3
 == 0) \

1782 
__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

1784 
__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1785 
	g__RES
; \

1788 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

1790 
öt32_t
 
ªsu…
;

1792 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1793 (
ªsu…
);

1794 
	}
}

	@Drivers/CMSIS/Include/cmsis_gcc.h

35 #i‚de‡
__CMSIS_GCC_H


36 
	#__CMSIS_GCC_H


	)

39 #i‡
deföed
 ( 
__GNUC__
 )

40 #¥agm®
GCC
 
dügno°ic
 
push


41 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-conversion"

42 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wconversion"

43 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

58 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

60 
__ASM
 volatile ("cpsie i" : : : "memory");

61 
	}
}

69 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

71 
__ASM
 volatile ("cpsid i" : : : "memory");

72 
	}
}

80 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

82 
uöt32_t
 
ªsu…
;

84 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

85 (
ªsu…
);

86 
	}
}

94 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

96 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

97 
	}
}

105 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

107 
uöt32_t
 
ªsu…
;

109 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

110 (
ªsu…
);

111 
	}
}

119 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

121 
uöt32_t
 
ªsu…
;

123 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

124 (
ªsu…
);

125 
	}
}

134 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

136 
uöt32_t
 
ªsu…
;

138 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

139 (
ªsu…
);

140 
	}
}

148 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

150 
uöt32_t
 
ªsu…
;

152 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

153 (
ªsu…
);

154 
	}
}

162 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

164 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) : "sp");

165 
	}
}

173 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

175 
uöt32_t
 
ªsu…
;

177 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

178 (
ªsu…
);

179 
	}
}

188 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

190 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) : "sp");

191 
	}
}

199 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

201 
uöt32_t
 
ªsu…
;

203 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

204 (
ªsu…
);

205 
	}
}

213 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

215 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

216 
	}
}

219 #i‡ (
__CORTEX_M
 >= 0x03U)

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

228 
__ASM
 volatile ("cpsie f" : : : "memory");

229 
	}
}

237 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

239 
__ASM
 volatile ("cpsid f" : : : "memory");

240 
	}
}

248 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

250 
uöt32_t
 
ªsu…
;

252 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i" : "Ù" (
ªsu…
) );

253 (
ªsu…
);

254 
	}
}

262 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

264 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) : "memory");

265 
	}
}

274 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
vÆue
)

276 
__ASM
 vﬁ©ûê("MSR ba£¥i_max, %0" : : "r" (
vÆue
) : "memory");

277 
	}
}

285 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

287 
uöt32_t
 
ªsu…
;

289 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

290 (
ªsu…
);

291 
	}
}

299 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

301 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

302 
	}
}

307 #i‡ (
__CORTEX_M
 == 0x04U) || (__CORTEX_M == 0x07U)

314 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

316 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

317 
uöt32_t
 
ªsu…
;

320 
__ASM
 volatile ("");

321 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

322 
__ASM
 volatile ("");

323 (
ªsu…
);

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

337 #i‡(
__FPU_PRESENT
 =1UË&& (
__FPU_USED
 == 1U)

339 
__ASM
 volatile ("");

340 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc");

341 
__ASM
 volatile ("");

343 
	}
}

361 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

362 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

363 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

365 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

366 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

373 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__NOP
()

375 
__ASM
 volatile ("nop");

376 
	}
}

383 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__WFI
()

385 
__ASM
 volatile ("wfi");

386 
	}
}

394 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__WFE
()

396 
__ASM
 volatile ("wfe");

397 
	}
}

404 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__SEV
()

406 
__ASM
 volatile ("sev");

407 
	}
}

416 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__ISB
()

418 
__ASM
 volatile ("isb 0xF":::"memory");

419 
	}
}

427 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__DSB
()

429 
__ASM
 volatile ("dsb 0xF":::"memory");

430 
	}
}

438 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__DMB
()

440 
__ASM
 volatile ("dmb 0xF":::"memory");

441 
	}
}

450 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

452 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

453  
	`__buûtö_bsw≠32
(
vÆue
);

455 
uöt32_t
 
ªsu…
;

457 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

458 (
ªsu…
);

460 
	}
}

469 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

471 
uöt32_t
 
ªsu…
;

473 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

474 (
ªsu…
);

475 
	}
}

484 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

486 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

487  ()
	`__buûtö_bsw≠16
(
vÆue
);

489 
öt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

492 (
ªsu…
);

494 
	}
}

504 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

506  (
›1
 >> 
›2
) | (op1 << (32U - op2));

507 
	}
}

517 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

526 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

528 
uöt32_t
 
ªsu…
;

530 #i‡ (
__CORTEX_M
 >0x03UË|| (
__CORTEX_SC
 >= 300U)

531 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

533 
öt32_t
 
s
 = 4 * 8 - 1;

535 
ªsu…
 = 
vÆue
;

536 
vÆue
 >>= 1U; value; value >>= 1U)

538 
ªsu…
 <<= 1U;

539 
ªsu…
 |
vÆue
 & 1U;

540 
s
--;

542 
ªsu…
 <<
s
;

544 (
ªsu…
);

545 
	}
}

554 
	#__CLZ
 
__buûtö_˛z


	)

557 #i‡ (
__CORTEX_M
 >0x03UË|| (
__CORTEX_SC
 >= 300U)

565 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

567 
uöt32_t
 
ªsu…
;

569 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

570 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

575 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

577  ((
uöt8_t
Ë
ªsu…
);

578 
	}
}

587 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

589 
uöt32_t
 
ªsu…
;

591 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

592 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

597 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

599  ((
uöt16_t
Ë
ªsu…
);

600 
	}
}

609 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

611 
uöt32_t
 
ªsu…
;

613 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

614 (
ªsu…
);

615 
	}
}

626 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

628 
uöt32_t
 
ªsu…
;

630 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

631 (
ªsu…
);

632 
	}
}

643 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

645 
uöt32_t
 
ªsu…
;

647 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

648 (
ªsu…
);

649 
	}
}

660 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

662 
uöt32_t
 
ªsu…
;

664 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

665 (
ªsu…
);

666 
	}
}

673 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__CLREX
()

675 
__ASM
 volatile ("clrex" ::: "memory");

676 
	}
}

686 
	#__SSAT
(
ARG1
,
ARG2
Ë\

	)

688 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

689 
__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

690 
	g__RES
; \

701 
	#__USAT
(
ARG1
,
ARG2
Ë\

	)

703 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

704 
__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

705 
	g__RES
; \

716 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

718 
uöt32_t
 
ªsu…
;

720 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

721 (
ªsu…
);

722 
	}
}

731 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
addr
)

733 
uöt32_t
 
ªsu…
;

735 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

736 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

741 
__ASM
 vﬁ©ûê("ldrbà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

743  ((
uöt8_t
Ë
ªsu…
);

744 
	}
}

753 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
addr
)

755 
uöt32_t
 
ªsu…
;

757 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

758 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

763 
__ASM
 vﬁ©ûê("ldrhà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

765  ((
uöt16_t
Ë
ªsu…
);

766 
	}
}

775 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
addr
)

777 
uöt32_t
 
ªsu…
;

779 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

780 (
ªsu…
);

781 
	}
}

790 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

792 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

793 
	}
}

802 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

804 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

805 
	}
}

814 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

816 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
addr
Ë: "r" (
vÆue
) );

817 
	}
}

830 #i‡(
__CORTEX_M
 >= 0x04U)

832 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

834 
uöt32_t
 
ªsu…
;

836 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

837 (
ªsu…
);

838 
	}
}

840 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

842 
uöt32_t
 
ªsu…
;

844 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

845 (
ªsu…
);

846 
	}
}

848 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

850 
uöt32_t
 
ªsu…
;

852 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

853 (
ªsu…
);

854 
	}
}

856 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

858 
uöt32_t
 
ªsu…
;

860 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

861 (
ªsu…
);

862 
	}
}

864 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

866 
uöt32_t
 
ªsu…
;

868 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

869 (
ªsu…
);

870 
	}
}

872 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

874 
uöt32_t
 
ªsu…
;

876 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

877 (
ªsu…
);

878 
	}
}

881 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

883 
uöt32_t
 
ªsu…
;

885 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

886 (
ªsu…
);

887 
	}
}

889 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

891 
uöt32_t
 
ªsu…
;

893 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

894 (
ªsu…
);

895 
	}
}

897 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

899 
uöt32_t
 
ªsu…
;

901 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

902 (
ªsu…
);

903 
	}
}

905 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

907 
uöt32_t
 
ªsu…
;

909 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

910 (
ªsu…
);

911 
	}
}

913 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

915 
uöt32_t
 
ªsu…
;

917 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

918 (
ªsu…
);

919 
	}
}

921 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

923 
uöt32_t
 
ªsu…
;

925 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

926 (
ªsu…
);

927 
	}
}

930 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

932 
uöt32_t
 
ªsu…
;

934 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

935 (
ªsu…
);

936 
	}
}

938 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

940 
uöt32_t
 
ªsu…
;

942 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

943 (
ªsu…
);

944 
	}
}

946 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

948 
uöt32_t
 
ªsu…
;

950 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

951 (
ªsu…
);

952 
	}
}

954 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

956 
uöt32_t
 
ªsu…
;

958 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

959 (
ªsu…
);

960 
	}
}

962 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

964 
uöt32_t
 
ªsu…
;

966 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

967 (
ªsu…
);

968 
	}
}

970 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

972 
uöt32_t
 
ªsu…
;

974 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

975 (
ªsu…
);

976 
	}
}

978 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

980 
uöt32_t
 
ªsu…
;

982 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

983 (
ªsu…
);

984 
	}
}

986 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

988 
uöt32_t
 
ªsu…
;

990 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

991 (
ªsu…
);

992 
	}
}

994 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

996 
uöt32_t
 
ªsu…
;

998 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

999 (
ªsu…
);

1000 
	}
}

1002 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1004 
uöt32_t
 
ªsu…
;

1006 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1007 (
ªsu…
);

1008 
	}
}

1010 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1012 
uöt32_t
 
ªsu…
;

1014 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1015 (
ªsu…
);

1016 
	}
}

1018 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1020 
uöt32_t
 
ªsu…
;

1022 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1023 (
ªsu…
);

1024 
	}
}

1026 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1028 
uöt32_t
 
ªsu…
;

1030 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1031 (
ªsu…
);

1032 
	}
}

1034 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1036 
uöt32_t
 
ªsu…
;

1038 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1039 (
ªsu…
);

1040 
	}
}

1042 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1044 
uöt32_t
 
ªsu…
;

1046 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1047 (
ªsu…
);

1048 
	}
}

1050 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1052 
uöt32_t
 
ªsu…
;

1054 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1055 (
ªsu…
);

1056 
	}
}

1058 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1060 
uöt32_t
 
ªsu…
;

1062 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1063 (
ªsu…
);

1064 
	}
}

1066 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1068 
uöt32_t
 
ªsu…
;

1070 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1071 (
ªsu…
);

1072 
	}
}

1074 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1076 
uöt32_t
 
ªsu…
;

1078 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1079 (
ªsu…
);

1080 
	}
}

1082 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1084 
uöt32_t
 
ªsu…
;

1086 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1087 (
ªsu…
);

1088 
	}
}

1090 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1092 
uöt32_t
 
ªsu…
;

1094 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1095 (
ªsu…
);

1096 
	}
}

1098 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1100 
uöt32_t
 
ªsu…
;

1102 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1103 (
ªsu…
);

1104 
	}
}

1106 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1108 
uöt32_t
 
ªsu…
;

1110 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1111 (
ªsu…
);

1112 
	}
}

1114 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1116 
uöt32_t
 
ªsu…
;

1118 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1119 (
ªsu…
);

1120 
	}
}

1122 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1124 
uöt32_t
 
ªsu…
;

1126 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1127 (
ªsu…
);

1128 
	}
}

1130 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1132 
uöt32_t
 
ªsu…
;

1134 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1135 (
ªsu…
);

1136 
	}
}

1138 
	#__SSAT16
(
ARG1
,
ARG2
Ë\

	)

1140 
öt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

1141 
__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1142 
	g__RES
; \

1145 
	#__USAT16
(
ARG1
,
ARG2
Ë\

	)

1147 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

1148 
__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1149 
	g__RES
; \

1152 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

1154 
uöt32_t
 
ªsu…
;

1156 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1157 (
ªsu…
);

1158 
	}
}

1160 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1162 
uöt32_t
 
ªsu…
;

1164 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1165 (
ªsu…
);

1166 
	}
}

1168 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

1170 
uöt32_t
 
ªsu…
;

1172 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1173 (
ªsu…
);

1174 
	}
}

1176 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1178 
uöt32_t
 
ªsu…
;

1180 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1181 (
ªsu…
);

1182 
	}
}

1184 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1186 
uöt32_t
 
ªsu…
;

1188 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1189 (
ªsu…
);

1190 
	}
}

1192 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1194 
uöt32_t
 
ªsu…
;

1196 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1197 (
ªsu…
);

1198 
	}
}

1200 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1202 
uöt32_t
 
ªsu…
;

1204 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1205 (
ªsu…
);

1206 
	}
}

1208 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1210 
uöt32_t
 
ªsu…
;

1212 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1213 (
ªsu…
);

1214 
	}
}

1216 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1218 
	uŒªg_u
{

1219 
uöt32_t
 
w32
[2];

1220 
uöt64_t
 
w64
;

1221 } 
Œr
;

1222 
Œr
.
w64
 = 
acc
;

1224 #i‚de‡
__ARMEB__


1225 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1227 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1230 (
Œr
.
w64
);

1231 
	}
}

1233 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1235 
	uŒªg_u
{

1236 
uöt32_t
 
w32
[2];

1237 
uöt64_t
 
w64
;

1238 } 
Œr
;

1239 
Œr
.
w64
 = 
acc
;

1241 #i‚de‡
__ARMEB__


1242 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1244 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1247 (
Œr
.
w64
);

1248 
	}
}

1250 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1252 
uöt32_t
 
ªsu…
;

1254 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1255 (
ªsu…
);

1256 
	}
}

1258 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1260 
uöt32_t
 
ªsu…
;

1262 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1263 (
ªsu…
);

1264 
	}
}

1266 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1268 
uöt32_t
 
ªsu…
;

1270 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1271 (
ªsu…
);

1272 
	}
}

1274 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1276 
uöt32_t
 
ªsu…
;

1278 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1279 (
ªsu…
);

1280 
	}
}

1282 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1284 
	uŒªg_u
{

1285 
uöt32_t
 
w32
[2];

1286 
uöt64_t
 
w64
;

1287 } 
Œr
;

1288 
Œr
.
w64
 = 
acc
;

1290 #i‚de‡
__ARMEB__


1291 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1293 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1296 (
Œr
.
w64
);

1297 
	}
}

1299 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1301 
	uŒªg_u
{

1302 
uöt32_t
 
w32
[2];

1303 
uöt64_t
 
w64
;

1304 } 
Œr
;

1305 
Œr
.
w64
 = 
acc
;

1307 #i‚de‡
__ARMEB__


1308 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1310 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1313 (
Œr
.
w64
);

1314 
	}
}

1316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1318 
uöt32_t
 
ªsu…
;

1320 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1321 (
ªsu…
);

1322 
	}
}

1324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__QADD
–
öt32_t
 
›1
, i¡32_à
›2
)

1326 
öt32_t
 
ªsu…
;

1328 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1329 (
ªsu…
);

1330 
	}
}

1332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__QSUB
–
öt32_t
 
›1
, i¡32_à
›2
)

1334 
öt32_t
 
ªsu…
;

1336 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1337 (
ªsu…
);

1338 
	}
}

1340 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

1342 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
), 
	g__ARG2
 = (
ARG2
); \

1343 
__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1344 
	g__RES
; \

1347 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

1349 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
), 
	g__ARG2
 = (
ARG2
); \

1350 i‡(
	gARG3
 == 0) \

1351 
__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

1353 
__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1354 
	g__RES
; \

1357 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

1359 
öt32_t
 
ªsu…
;

1361 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1362 (
ªsu…
);

1363 
	}
}

1369 #i‡
deföed
 ( 
__GNUC__
 )

1370 #¥agm®
GCC
 
dügno°ic
 
p›


	@Drivers/CMSIS/Include/core_cm0.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CM0_H_GENERIC


42 
	#__CORE_CM0_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__CM0_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__CM0_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__CM0_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_M
 (0x00UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 
	#__FPU_USED
 0U

	)

126 #i‡
deföed
 ( 
__CC_ARM
 )

127 #i‡
deföed
 
__TARGET_FPU_VFP


131 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

132 #i‡
deföed
 
__ARM_PCS_VFP


136 #ñi‡
deföed
 ( 
__GNUC__
 )

137 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

141 #ñi‡
deföed
 ( 
__ICCARM__
 )

142 #i‡
deföed
 
__ARMVFP__


146 #ñi‡
deföed
 ( 
__TMS470__
 )

147 #i‡
deföed
 
__TI_VFP_SUPPORT__


151 #ñi‡
deföed
 ( 
__TASKING__
 )

152 #i‡
deföed
 
__FPU_VFP__


156 #ñi‡
deföed
 ( 
__CSMC__
 )

157 #i‡–
__CSMC__
 & 0x400U)

163 
	~"c‹e_cmIn°r.h
"

164 
	~"c‹e_cmFunc.h
"

166 #ifde‡
__˝lu•lus


172 #i‚de‡
__CMSIS_GENERIC


174 #i‚de‡
__CORE_CM0_H_DEPENDANT


175 
	#__CORE_CM0_H_DEPENDANT


	)

177 #ifde‡
__˝lu•lus


182 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


183 #i‚de‡
__CM0_REV


184 
	#__CM0_REV
 0x0000U

	)

188 #i‚de‡
__NVIC_PRIO_BITS


189 
	#__NVIC_PRIO_BITS
 2U

	)

193 #i‚de‡
__Víd‹_SysTickC⁄fig


194 
	#__Víd‹_SysTickC⁄fig
 0U

	)

207 #ifde‡
__˝lu•lus


208 
	#__I
 vﬁ©ûê

	)

210 
	#__I
 vﬁ©ûêc⁄°

	)

212 
	#__O
 vﬁ©ûê

	)

213 
	#__IO
 vﬁ©ûê

	)

216 
	#__IM
 vﬁ©ûêc⁄°

	)

217 
	#__OM
 vﬁ©ûê

	)

218 
	#__IOM
 vﬁ©ûê

	)

251 
uöt32_t
 
_ª£rved0
:28;

252 
uöt32_t
 
V
:1;

253 
uöt32_t
 
C
:1;

254 
uöt32_t
 
Z
:1;

255 
uöt32_t
 
N
:1;

256 } 
b
;

257 
uöt32_t
 
w
;

258 } 
	tAPSR_Ty≥
;

261 
	#APSR_N_Pos
 31U

	)

262 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

264 
	#APSR_Z_Pos
 30U

	)

265 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

267 
	#APSR_C_Pos
 29U

	)

268 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

270 
	#APSR_V_Pos
 28U

	)

271 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

281 
uöt32_t
 
ISR
:9;

282 
uöt32_t
 
_ª£rved0
:23;

283 } 
b
;

284 
uöt32_t
 
w
;

285 } 
	tIPSR_Ty≥
;

288 
	#IPSR_ISR_Pos
 0U

	)

289 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

299 
uöt32_t
 
ISR
:9;

300 
uöt32_t
 
_ª£rved0
:15;

301 
uöt32_t
 
T
:1;

302 
uöt32_t
 
_ª£rved1
:3;

303 
uöt32_t
 
V
:1;

304 
uöt32_t
 
C
:1;

305 
uöt32_t
 
Z
:1;

306 
uöt32_t
 
N
:1;

307 } 
b
;

308 
uöt32_t
 
w
;

309 } 
	txPSR_Ty≥
;

312 
	#xPSR_N_Pos
 31U

	)

313 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

315 
	#xPSR_Z_Pos
 30U

	)

316 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

318 
	#xPSR_C_Pos
 29U

	)

319 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

321 
	#xPSR_V_Pos
 28U

	)

322 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

324 
	#xPSR_T_Pos
 24U

	)

325 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

327 
	#xPSR_ISR_Pos
 0U

	)

328 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

338 
uöt32_t
 
_ª£rved0
:1;

339 
uöt32_t
 
SPSEL
:1;

340 
uöt32_t
 
_ª£rved1
:30;

341 } 
b
;

342 
uöt32_t
 
w
;

343 } 
	tCONTROL_Ty≥
;

346 
	#CONTROL_SPSEL_Pos
 1U

	)

347 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

364 
__IOM
 
uöt32_t
 
ISER
[1U];

365 
uöt32_t
 
RESERVED0
[31U];

366 
__IOM
 
uöt32_t
 
ICER
[1U];

367 
uöt32_t
 
RSERVED1
[31U];

368 
__IOM
 
uöt32_t
 
ISPR
[1U];

369 
uöt32_t
 
RESERVED2
[31U];

370 
__IOM
 
uöt32_t
 
ICPR
[1U];

371 
uöt32_t
 
RESERVED3
[31U];

372 
uöt32_t
 
RESERVED4
[64U];

373 
__IOM
 
uöt32_t
 
IP
[8U];

374 } 
	tNVIC_Ty≥
;

391 
__IM
 
uöt32_t
 
CPUID
;

392 
__IOM
 
uöt32_t
 
ICSR
;

393 
uöt32_t
 
RESERVED0
;

394 
__IOM
 
uöt32_t
 
AIRCR
;

395 
__IOM
 
uöt32_t
 
SCR
;

396 
__IOM
 
uöt32_t
 
CCR
;

397 
uöt32_t
 
RESERVED1
;

398 
__IOM
 
uöt32_t
 
SHP
[2U];

399 
__IOM
 
uöt32_t
 
SHCSR
;

400 } 
	tSCB_Ty≥
;

403 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

404 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

406 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

407 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

409 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

410 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

412 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

413 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

415 
	#SCB_CPUID_REVISION_Pos
 0U

	)

416 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

419 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

420 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

422 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

423 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

425 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

426 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

428 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

429 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

431 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

432 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

434 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

435 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

437 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

438 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

440 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

441 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

443 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

444 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

447 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

448 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

450 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

451 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

453 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

454 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

456 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

457 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

459 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

460 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

463 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

464 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

466 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

467 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

469 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

470 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

473 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

474 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

476 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

477 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

480 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

481 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

498 
__IOM
 
uöt32_t
 
CTRL
;

499 
__IOM
 
uöt32_t
 
LOAD
;

500 
__IOM
 
uöt32_t
 
VAL
;

501 
__IM
 
uöt32_t
 
CALIB
;

502 } 
	tSysTick_Ty≥
;

505 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

506 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

508 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

509 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

511 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

512 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

514 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

515 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

518 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

519 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

522 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

523 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

526 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

527 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

529 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

530 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

532 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

533 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

561 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

569 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

582 
	#SCS_BASE
 (0xE000E000ULË

	)

583 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

584 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

585 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

587 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

588 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

589 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

619 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

620 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

621 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

629 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

631 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

640 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

642 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

653 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

655 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

664 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

666 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

675 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

677 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

688 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

690 i‡((
öt32_t
)(
IRQn
) < 0)

692 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

693 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

697 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

698 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

712 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

715 i‡((
öt32_t
)(
IRQn
) < 0)

717 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

721 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

730 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

732 
__DSB
();

734 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

735 
SCB_AIRCR_SYSRESETREQ_Msk
);

736 
__DSB
();

740 
__NOP
();

756 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

769 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

771 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

776 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

777 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

778 
SysTick
->
VAL
 = 0UL;

779 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

780 
SysTick_CTRL_TICKINT_Msk
 |

781 
SysTick_CTRL_ENABLE_Msk
;

792 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_cm0plus.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CM0PLUS_H_GENERIC


42 
	#__CORE_CM0PLUS_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__CM0PLUS_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__CM0PLUS_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__CM0PLUS_CMSIS_VERSION
 ((
__CM0PLUS_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__CM0PLUS_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_M
 (0x00UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 
	#__FPU_USED
 0U

	)

126 #i‡
deföed
 ( 
__CC_ARM
 )

127 #i‡
deföed
 
__TARGET_FPU_VFP


131 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

132 #i‡
deföed
 
__ARM_PCS_VFP


136 #ñi‡
deföed
 ( 
__GNUC__
 )

137 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

141 #ñi‡
deföed
 ( 
__ICCARM__
 )

142 #i‡
deföed
 
__ARMVFP__


146 #ñi‡
deföed
 ( 
__TMS470__
 )

147 #i‡
deföed
 
__TI_VFP_SUPPORT__


151 #ñi‡
deföed
 ( 
__TASKING__
 )

152 #i‡
deföed
 
__FPU_VFP__


156 #ñi‡
deföed
 ( 
__CSMC__
 )

157 #i‡–
__CSMC__
 & 0x400U)

163 
	~"c‹e_cmIn°r.h
"

164 
	~"c‹e_cmFunc.h
"

166 #ifde‡
__˝lu•lus


172 #i‚de‡
__CMSIS_GENERIC


174 #i‚de‡
__CORE_CM0PLUS_H_DEPENDANT


175 
	#__CORE_CM0PLUS_H_DEPENDANT


	)

177 #ifde‡
__˝lu•lus


182 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


183 #i‚de‡
__CM0PLUS_REV


184 
	#__CM0PLUS_REV
 0x0000U

	)

188 #i‚de‡
__MPU_PRESENT


189 
	#__MPU_PRESENT
 0U

	)

193 #i‚de‡
__VTOR_PRESENT


194 
	#__VTOR_PRESENT
 0U

	)

198 #i‚de‡
__NVIC_PRIO_BITS


199 
	#__NVIC_PRIO_BITS
 2U

	)

203 #i‚de‡
__Víd‹_SysTickC⁄fig


204 
	#__Víd‹_SysTickC⁄fig
 0U

	)

217 #ifde‡
__˝lu•lus


218 
	#__I
 vﬁ©ûê

	)

220 
	#__I
 vﬁ©ûêc⁄°

	)

222 
	#__O
 vﬁ©ûê

	)

223 
	#__IO
 vﬁ©ûê

	)

226 
	#__IM
 vﬁ©ûêc⁄°

	)

227 
	#__OM
 vﬁ©ûê

	)

228 
	#__IOM
 vﬁ©ûê

	)

262 
uöt32_t
 
_ª£rved0
:28;

263 
uöt32_t
 
V
:1;

264 
uöt32_t
 
C
:1;

265 
uöt32_t
 
Z
:1;

266 
uöt32_t
 
N
:1;

267 } 
b
;

268 
uöt32_t
 
w
;

269 } 
	tAPSR_Ty≥
;

272 
	#APSR_N_Pos
 31U

	)

273 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

275 
	#APSR_Z_Pos
 30U

	)

276 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

278 
	#APSR_C_Pos
 29U

	)

279 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

281 
	#APSR_V_Pos
 28U

	)

282 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

292 
uöt32_t
 
ISR
:9;

293 
uöt32_t
 
_ª£rved0
:23;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tIPSR_Ty≥
;

299 
	#IPSR_ISR_Pos
 0U

	)

300 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

310 
uöt32_t
 
ISR
:9;

311 
uöt32_t
 
_ª£rved0
:15;

312 
uöt32_t
 
T
:1;

313 
uöt32_t
 
_ª£rved1
:3;

314 
uöt32_t
 
V
:1;

315 
uöt32_t
 
C
:1;

316 
uöt32_t
 
Z
:1;

317 
uöt32_t
 
N
:1;

318 } 
b
;

319 
uöt32_t
 
w
;

320 } 
	txPSR_Ty≥
;

323 
	#xPSR_N_Pos
 31U

	)

324 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

326 
	#xPSR_Z_Pos
 30U

	)

327 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

329 
	#xPSR_C_Pos
 29U

	)

330 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

332 
	#xPSR_V_Pos
 28U

	)

333 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

335 
	#xPSR_T_Pos
 24U

	)

336 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

338 
	#xPSR_ISR_Pos
 0U

	)

339 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

349 
uöt32_t
 
nPRIV
:1;

350 
uöt32_t
 
SPSEL
:1;

351 
uöt32_t
 
_ª£rved1
:30;

352 } 
b
;

353 
uöt32_t
 
w
;

354 } 
	tCONTROL_Ty≥
;

357 
	#CONTROL_SPSEL_Pos
 1U

	)

358 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

360 
	#CONTROL_nPRIV_Pos
 0U

	)

361 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

378 
__IOM
 
uöt32_t
 
ISER
[1U];

379 
uöt32_t
 
RESERVED0
[31U];

380 
__IOM
 
uöt32_t
 
ICER
[1U];

381 
uöt32_t
 
RSERVED1
[31U];

382 
__IOM
 
uöt32_t
 
ISPR
[1U];

383 
uöt32_t
 
RESERVED2
[31U];

384 
__IOM
 
uöt32_t
 
ICPR
[1U];

385 
uöt32_t
 
RESERVED3
[31U];

386 
uöt32_t
 
RESERVED4
[64U];

387 
__IOM
 
uöt32_t
 
IP
[8U];

388 } 
	tNVIC_Ty≥
;

405 
__IM
 
uöt32_t
 
CPUID
;

406 
__IOM
 
uöt32_t
 
ICSR
;

407 #i‡(
__VTOR_PRESENT
 == 1U)

408 
__IOM
 
uöt32_t
 
VTOR
;

410 
uöt32_t
 
RESERVED0
;

412 
__IOM
 
uöt32_t
 
AIRCR
;

413 
__IOM
 
uöt32_t
 
SCR
;

414 
__IOM
 
uöt32_t
 
CCR
;

415 
uöt32_t
 
RESERVED1
;

416 
__IOM
 
uöt32_t
 
SHP
[2U];

417 
__IOM
 
uöt32_t
 
SHCSR
;

418 } 
	tSCB_Ty≥
;

421 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

422 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

424 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

425 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

427 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

428 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

430 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

431 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

433 
	#SCB_CPUID_REVISION_Pos
 0U

	)

434 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

437 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

438 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

440 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

441 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

443 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

444 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

446 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

447 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

449 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

450 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

452 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

453 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

455 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

456 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

458 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

459 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

461 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

462 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

464 #i‡(
__VTOR_PRESENT
 == 1U)

466 
	#SCB_VTOR_TBLOFF_Pos
 8U

	)

467 
	#SCB_VTOR_TBLOFF_Msk
 (0xFFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

471 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

472 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

474 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

475 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

477 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

478 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

480 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

481 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

483 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

484 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

487 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

488 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

490 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

491 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

493 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

494 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

497 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

498 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

500 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

501 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

504 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

505 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

522 
__IOM
 
uöt32_t
 
CTRL
;

523 
__IOM
 
uöt32_t
 
LOAD
;

524 
__IOM
 
uöt32_t
 
VAL
;

525 
__IM
 
uöt32_t
 
CALIB
;

526 } 
	tSysTick_Ty≥
;

529 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

530 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

532 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

533 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

535 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

536 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

538 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

539 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

542 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

543 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

546 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

547 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

550 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

551 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

553 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

554 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

556 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

557 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

561 #i‡(
__MPU_PRESENT
 == 1U)

574 
__IM
 
uöt32_t
 
TYPE
;

575 
__IOM
 
uöt32_t
 
CTRL
;

576 
__IOM
 
uöt32_t
 
RNR
;

577 
__IOM
 
uöt32_t
 
RBAR
;

578 
__IOM
 
uöt32_t
 
RASR
;

579 } 
	tMPU_Ty≥
;

582 
	#MPU_TYPE_IREGION_Pos
 16U

	)

583 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

585 
	#MPU_TYPE_DREGION_Pos
 8U

	)

586 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

588 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

589 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

592 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

593 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

595 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

596 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

598 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

599 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

602 
	#MPU_RNR_REGION_Pos
 0U

	)

603 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

606 
	#MPU_RBAR_ADDR_Pos
 8U

	)

607 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

609 
	#MPU_RBAR_VALID_Pos
 4U

	)

610 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

612 
	#MPU_RBAR_REGION_Pos
 0U

	)

613 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

616 
	#MPU_RASR_ATTRS_Pos
 16U

	)

617 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

619 
	#MPU_RASR_XN_Pos
 28U

	)

620 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

622 
	#MPU_RASR_AP_Pos
 24U

	)

623 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

625 
	#MPU_RASR_TEX_Pos
 19U

	)

626 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

628 
	#MPU_RASR_S_Pos
 18U

	)

629 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

631 
	#MPU_RASR_C_Pos
 17U

	)

632 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

634 
	#MPU_RASR_B_Pos
 16U

	)

635 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

637 
	#MPU_RASR_SRD_Pos
 8U

	)

638 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

640 
	#MPU_RASR_SIZE_Pos
 1U

	)

641 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

643 
	#MPU_RASR_ENABLE_Pos
 0U

	)

644 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

673 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

681 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

694 
	#SCS_BASE
 (0xE000E000ULË

	)

695 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

696 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

697 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

699 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

700 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

701 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

703 #i‡(
__MPU_PRESENT
 == 1U)

704 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

705 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

735 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

736 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

737 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

745 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

747 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

756 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

758 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

769 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

771 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

780 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

782 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

791 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

793 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

804 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

806 i‡((
öt32_t
)(
IRQn
) < 0)

808 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

809 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

813 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

814 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

828 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

831 i‡((
öt32_t
)(
IRQn
) < 0)

833 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

837 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

846 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

848 
__DSB
();

850 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

851 
SCB_AIRCR_SYSRESETREQ_Msk
);

852 
__DSB
();

856 
__NOP
();

872 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

885 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

887 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

892 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

893 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

894 
SysTick
->
VAL
 = 0UL;

895 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

896 
SysTick_CTRL_TICKINT_Msk
 |

897 
SysTick_CTRL_ENABLE_Msk
;

908 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_cm3.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CM3_H_GENERIC


42 
	#__CORE_CM3_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__CM3_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__CM3_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__CM3_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_M
 (0x03UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 
	#__FPU_USED
 0U

	)

126 #i‡
deföed
 ( 
__CC_ARM
 )

127 #i‡
deföed
 
__TARGET_FPU_VFP


131 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

132 #i‡
deföed
 
__ARM_PCS_VFP


136 #ñi‡
deföed
 ( 
__GNUC__
 )

137 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

141 #ñi‡
deföed
 ( 
__ICCARM__
 )

142 #i‡
deföed
 
__ARMVFP__


146 #ñi‡
deföed
 ( 
__TMS470__
 )

147 #i‡
deföed
 
__TI_VFP_SUPPORT__


151 #ñi‡
deföed
 ( 
__TASKING__
 )

152 #i‡
deföed
 
__FPU_VFP__


156 #ñi‡
deföed
 ( 
__CSMC__
 )

157 #i‡–
__CSMC__
 & 0x400U)

163 
	~"c‹e_cmIn°r.h
"

164 
	~"c‹e_cmFunc.h
"

166 #ifde‡
__˝lu•lus


172 #i‚de‡
__CMSIS_GENERIC


174 #i‚de‡
__CORE_CM3_H_DEPENDANT


175 
	#__CORE_CM3_H_DEPENDANT


	)

177 #ifde‡
__˝lu•lus


182 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


183 #i‚de‡
__CM3_REV


184 
	#__CM3_REV
 0x0200U

	)

188 #i‚de‡
__MPU_PRESENT


189 
	#__MPU_PRESENT
 0U

	)

193 #i‚de‡
__NVIC_PRIO_BITS


194 
	#__NVIC_PRIO_BITS
 4U

	)

198 #i‚de‡
__Víd‹_SysTickC⁄fig


199 
	#__Víd‹_SysTickC⁄fig
 0U

	)

212 #ifde‡
__˝lu•lus


213 
	#__I
 vﬁ©ûê

	)

215 
	#__I
 vﬁ©ûêc⁄°

	)

217 
	#__O
 vﬁ©ûê

	)

218 
	#__IO
 vﬁ©ûê

	)

221 
	#__IM
 vﬁ©ûêc⁄°

	)

222 
	#__OM
 vﬁ©ûê

	)

223 
	#__IOM
 vﬁ©ûê

	)

258 
uöt32_t
 
_ª£rved0
:27;

259 
uöt32_t
 
Q
:1;

260 
uöt32_t
 
V
:1;

261 
uöt32_t
 
C
:1;

262 
uöt32_t
 
Z
:1;

263 
uöt32_t
 
N
:1;

264 } 
b
;

265 
uöt32_t
 
w
;

266 } 
	tAPSR_Ty≥
;

269 
	#APSR_N_Pos
 31U

	)

270 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

272 
	#APSR_Z_Pos
 30U

	)

273 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

275 
	#APSR_C_Pos
 29U

	)

276 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

278 
	#APSR_V_Pos
 28U

	)

279 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

281 
	#APSR_Q_Pos
 27U

	)

282 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

292 
uöt32_t
 
ISR
:9;

293 
uöt32_t
 
_ª£rved0
:23;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tIPSR_Ty≥
;

299 
	#IPSR_ISR_Pos
 0U

	)

300 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

310 
uöt32_t
 
ISR
:9;

311 
uöt32_t
 
_ª£rved0
:15;

312 
uöt32_t
 
T
:1;

313 
uöt32_t
 
IT
:2;

314 
uöt32_t
 
Q
:1;

315 
uöt32_t
 
V
:1;

316 
uöt32_t
 
C
:1;

317 
uöt32_t
 
Z
:1;

318 
uöt32_t
 
N
:1;

319 } 
b
;

320 
uöt32_t
 
w
;

321 } 
	txPSR_Ty≥
;

324 
	#xPSR_N_Pos
 31U

	)

325 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

327 
	#xPSR_Z_Pos
 30U

	)

328 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

330 
	#xPSR_C_Pos
 29U

	)

331 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

333 
	#xPSR_V_Pos
 28U

	)

334 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

336 
	#xPSR_Q_Pos
 27U

	)

337 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

339 
	#xPSR_IT_Pos
 25U

	)

340 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

342 
	#xPSR_T_Pos
 24U

	)

343 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

345 
	#xPSR_ISR_Pos
 0U

	)

346 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

356 
uöt32_t
 
nPRIV
:1;

357 
uöt32_t
 
SPSEL
:1;

358 
uöt32_t
 
_ª£rved1
:30;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tCONTROL_Ty≥
;

364 
	#CONTROL_SPSEL_Pos
 1U

	)

365 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

367 
	#CONTROL_nPRIV_Pos
 0U

	)

368 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

385 
__IOM
 
uöt32_t
 
ISER
[8U];

386 
uöt32_t
 
RESERVED0
[24U];

387 
__IOM
 
uöt32_t
 
ICER
[8U];

388 
uöt32_t
 
RSERVED1
[24U];

389 
__IOM
 
uöt32_t
 
ISPR
[8U];

390 
uöt32_t
 
RESERVED2
[24U];

391 
__IOM
 
uöt32_t
 
ICPR
[8U];

392 
uöt32_t
 
RESERVED3
[24U];

393 
__IOM
 
uöt32_t
 
IABR
[8U];

394 
uöt32_t
 
RESERVED4
[56U];

395 
__IOM
 
uöt8_t
 
IP
[240U];

396 
uöt32_t
 
RESERVED5
[644U];

397 
__OM
 
uöt32_t
 
STIR
;

398 } 
	tNVIC_Ty≥
;

401 
	#NVIC_STIR_INTID_Pos
 0U

	)

402 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

419 
__IM
 
uöt32_t
 
CPUID
;

420 
__IOM
 
uöt32_t
 
ICSR
;

421 
__IOM
 
uöt32_t
 
VTOR
;

422 
__IOM
 
uöt32_t
 
AIRCR
;

423 
__IOM
 
uöt32_t
 
SCR
;

424 
__IOM
 
uöt32_t
 
CCR
;

425 
__IOM
 
uöt8_t
 
SHP
[12U];

426 
__IOM
 
uöt32_t
 
SHCSR
;

427 
__IOM
 
uöt32_t
 
CFSR
;

428 
__IOM
 
uöt32_t
 
HFSR
;

429 
__IOM
 
uöt32_t
 
DFSR
;

430 
__IOM
 
uöt32_t
 
MMFAR
;

431 
__IOM
 
uöt32_t
 
BFAR
;

432 
__IOM
 
uöt32_t
 
AFSR
;

433 
__IM
 
uöt32_t
 
PFR
[2U];

434 
__IM
 
uöt32_t
 
DFR
;

435 
__IM
 
uöt32_t
 
ADR
;

436 
__IM
 
uöt32_t
 
MMFR
[4U];

437 
__IM
 
uöt32_t
 
ISAR
[5U];

438 
uöt32_t
 
RESERVED0
[5U];

439 
__IOM
 
uöt32_t
 
CPACR
;

440 } 
	tSCB_Ty≥
;

443 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

444 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

446 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

447 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

449 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

450 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

452 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

453 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

455 
	#SCB_CPUID_REVISION_Pos
 0U

	)

456 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

459 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

460 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

462 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

463 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

465 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

466 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

468 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

469 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

471 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

472 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

474 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

475 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

477 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

478 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

480 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

481 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

483 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

484 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

486 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

487 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

490 #i‡(
__CM3_REV
 < 0x0201U)

491 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

492 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

494 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

495 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

497 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

498 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

502 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

503 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

505 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

506 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

508 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

509 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

511 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

512 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

514 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

515 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

517 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

518 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

520 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

521 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

524 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

525 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

527 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

528 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

530 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

531 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

534 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

535 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

537 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

538 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

540 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

541 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

543 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

544 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

546 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

547 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

549 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

550 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

553 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

554 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

556 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

557 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

559 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

560 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

562 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

563 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

565 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

566 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

568 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

569 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

571 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

572 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

574 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

575 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

577 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

578 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

580 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

581 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

583 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

584 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

586 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

587 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

589 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

590 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

592 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

593 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

596 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

597 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

599 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

600 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

602 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

603 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

606 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

607 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

609 
	#SCB_HFSR_FORCED_Pos
 30U

	)

610 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

612 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

613 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

616 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

617 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

619 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

620 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

622 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

623 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

625 
	#SCB_DFSR_BKPT_Pos
 1U

	)

626 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

628 
	#SCB_DFSR_HALTED_Pos
 0U

	)

629 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

646 
uöt32_t
 
RESERVED0
[1U];

647 
__IM
 
uöt32_t
 
ICTR
;

648 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200U))

649 
__IOM
 
uöt32_t
 
ACTLR
;

651 
uöt32_t
 
RESERVED1
[1U];

653 } 
	tSCnSCB_Ty≥
;

656 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

657 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

661 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

662 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

664 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

665 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

667 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

668 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

685 
__IOM
 
uöt32_t
 
CTRL
;

686 
__IOM
 
uöt32_t
 
LOAD
;

687 
__IOM
 
uöt32_t
 
VAL
;

688 
__IM
 
uöt32_t
 
CALIB
;

689 } 
	tSysTick_Ty≥
;

692 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

693 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

695 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

696 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

698 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

699 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

701 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

702 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

705 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

706 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

709 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

710 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

713 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

714 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

716 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

717 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

719 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

720 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

737 
__OM
 union

739 
__OM
 
uöt8_t
 
u8
;

740 
__OM
 
uöt16_t
 
u16
;

741 
__OM
 
uöt32_t
 
u32
;

742 } 
PORT
 [32U];

743 
uöt32_t
 
RESERVED0
[864U];

744 
__IOM
 
uöt32_t
 
TER
;

745 
uöt32_t
 
RESERVED1
[15U];

746 
__IOM
 
uöt32_t
 
TPR
;

747 
uöt32_t
 
RESERVED2
[15U];

748 
__IOM
 
uöt32_t
 
TCR
;

749 
uöt32_t
 
RESERVED3
[29U];

750 
__OM
 
uöt32_t
 
IWR
;

751 
__IM
 
uöt32_t
 
IRR
;

752 
__IOM
 
uöt32_t
 
IMCR
;

753 
uöt32_t
 
RESERVED4
[43U];

754 
__OM
 
uöt32_t
 
LAR
;

755 
__IM
 
uöt32_t
 
LSR
;

756 
uöt32_t
 
RESERVED5
[6U];

757 
__IM
 
uöt32_t
 
PID4
;

758 
__IM
 
uöt32_t
 
PID5
;

759 
__IM
 
uöt32_t
 
PID6
;

760 
__IM
 
uöt32_t
 
PID7
;

761 
__IM
 
uöt32_t
 
PID0
;

762 
__IM
 
uöt32_t
 
PID1
;

763 
__IM
 
uöt32_t
 
PID2
;

764 
__IM
 
uöt32_t
 
PID3
;

765 
__IM
 
uöt32_t
 
CID0
;

766 
__IM
 
uöt32_t
 
CID1
;

767 
__IM
 
uöt32_t
 
CID2
;

768 
__IM
 
uöt32_t
 
CID3
;

769 } 
	tITM_Ty≥
;

772 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

773 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

776 
	#ITM_TCR_BUSY_Pos
 23U

	)

777 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

779 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

780 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

782 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

783 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

785 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

786 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

788 
	#ITM_TCR_SWOENA_Pos
 4U

	)

789 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

791 
	#ITM_TCR_DWTENA_Pos
 3U

	)

792 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

794 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

795 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

797 
	#ITM_TCR_TSENA_Pos
 1U

	)

798 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

800 
	#ITM_TCR_ITMENA_Pos
 0U

	)

801 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

804 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

805 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

808 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

809 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

812 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

813 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

816 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

817 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

819 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

820 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

822 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

823 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

840 
__IOM
 
uöt32_t
 
CTRL
;

841 
__IOM
 
uöt32_t
 
CYCCNT
;

842 
__IOM
 
uöt32_t
 
CPICNT
;

843 
__IOM
 
uöt32_t
 
EXCCNT
;

844 
__IOM
 
uöt32_t
 
SLEEPCNT
;

845 
__IOM
 
uöt32_t
 
LSUCNT
;

846 
__IOM
 
uöt32_t
 
FOLDCNT
;

847 
__IM
 
uöt32_t
 
PCSR
;

848 
__IOM
 
uöt32_t
 
COMP0
;

849 
__IOM
 
uöt32_t
 
MASK0
;

850 
__IOM
 
uöt32_t
 
FUNCTION0
;

851 
uöt32_t
 
RESERVED0
[1U];

852 
__IOM
 
uöt32_t
 
COMP1
;

853 
__IOM
 
uöt32_t
 
MASK1
;

854 
__IOM
 
uöt32_t
 
FUNCTION1
;

855 
uöt32_t
 
RESERVED1
[1U];

856 
__IOM
 
uöt32_t
 
COMP2
;

857 
__IOM
 
uöt32_t
 
MASK2
;

858 
__IOM
 
uöt32_t
 
FUNCTION2
;

859 
uöt32_t
 
RESERVED2
[1U];

860 
__IOM
 
uöt32_t
 
COMP3
;

861 
__IOM
 
uöt32_t
 
MASK3
;

862 
__IOM
 
uöt32_t
 
FUNCTION3
;

863 } 
	tDWT_Ty≥
;

866 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

867 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

869 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

870 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

872 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

873 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

875 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

876 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

878 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

879 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

881 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

882 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

884 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

885 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

887 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

888 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

890 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

891 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

893 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

894 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

896 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

897 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

899 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

900 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

902 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

903 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

905 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

906 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

908 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

909 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

911 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

912 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

914 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

915 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

917 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

918 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

921 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

922 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

925 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

926 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

929 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

930 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

933 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

934 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

937 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

938 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

941 
	#DWT_MASK_MASK_Pos
 0U

	)

942 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

945 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

946 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

948 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

949 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

951 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

952 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

954 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

955 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

957 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

958 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

960 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

961 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

963 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

964 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

966 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

967 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

969 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

970 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

987 
__IOM
 
uöt32_t
 
SSPSR
;

988 
__IOM
 
uöt32_t
 
CSPSR
;

989 
uöt32_t
 
RESERVED0
[2U];

990 
__IOM
 
uöt32_t
 
ACPR
;

991 
uöt32_t
 
RESERVED1
[55U];

992 
__IOM
 
uöt32_t
 
SPPR
;

993 
uöt32_t
 
RESERVED2
[131U];

994 
__IM
 
uöt32_t
 
FFSR
;

995 
__IOM
 
uöt32_t
 
FFCR
;

996 
__IM
 
uöt32_t
 
FSCR
;

997 
uöt32_t
 
RESERVED3
[759U];

998 
__IM
 
uöt32_t
 
TRIGGER
;

999 
__IM
 
uöt32_t
 
FIFO0
;

1000 
__IM
 
uöt32_t
 
ITATBCTR2
;

1001 
uöt32_t
 
RESERVED4
[1U];

1002 
__IM
 
uöt32_t
 
ITATBCTR0
;

1003 
__IM
 
uöt32_t
 
FIFO1
;

1004 
__IOM
 
uöt32_t
 
ITCTRL
;

1005 
uöt32_t
 
RESERVED5
[39U];

1006 
__IOM
 
uöt32_t
 
CLAIMSET
;

1007 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1008 
uöt32_t
 
RESERVED7
[8U];

1009 
__IM
 
uöt32_t
 
DEVID
;

1010 
__IM
 
uöt32_t
 
DEVTYPE
;

1011 } 
	tTPI_Ty≥
;

1014 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1015 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1018 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1019 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1022 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1023 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1025 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1026 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1028 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1029 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1031 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1032 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1035 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1036 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1038 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1039 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1042 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1043 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1046 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1047 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1049 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1050 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1052 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1053 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1055 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1056 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1058 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1059 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1061 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1062 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1064 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1065 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1068 
	#TPI_ITATBCTR2_ATREADY_Pos
 0U

	)

1069 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL )

	)

1072 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1073 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1075 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1076 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1078 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1079 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1081 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1082 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1084 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1085 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1087 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1088 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1090 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1091 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1094 
	#TPI_ITATBCTR0_ATREADY_Pos
 0U

	)

1095 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL )

	)

1098 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1099 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL )

	)

1102 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1103 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1105 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1106 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1108 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1109 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1111 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1112 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1114 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1115 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1117 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1118 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1121 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4U

	)

1122 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1124 
	#TPI_DEVTYPE_SubTy≥_Pos
 0U

	)

1125 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1130 #i‡(
__MPU_PRESENT
 == 1U)

1143 
__IM
 
uöt32_t
 
TYPE
;

1144 
__IOM
 
uöt32_t
 
CTRL
;

1145 
__IOM
 
uöt32_t
 
RNR
;

1146 
__IOM
 
uöt32_t
 
RBAR
;

1147 
__IOM
 
uöt32_t
 
RASR
;

1148 
__IOM
 
uöt32_t
 
RBAR_A1
;

1149 
__IOM
 
uöt32_t
 
RASR_A1
;

1150 
__IOM
 
uöt32_t
 
RBAR_A2
;

1151 
__IOM
 
uöt32_t
 
RASR_A2
;

1152 
__IOM
 
uöt32_t
 
RBAR_A3
;

1153 
__IOM
 
uöt32_t
 
RASR_A3
;

1154 } 
	tMPU_Ty≥
;

1157 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1158 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1160 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1161 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1163 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1164 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1167 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1168 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1170 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1171 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1173 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1174 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1177 
	#MPU_RNR_REGION_Pos
 0U

	)

1178 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1181 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1182 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1184 
	#MPU_RBAR_VALID_Pos
 4U

	)

1185 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1187 
	#MPU_RBAR_REGION_Pos
 0U

	)

1188 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1191 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1192 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1194 
	#MPU_RASR_XN_Pos
 28U

	)

1195 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1197 
	#MPU_RASR_AP_Pos
 24U

	)

1198 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1200 
	#MPU_RASR_TEX_Pos
 19U

	)

1201 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1203 
	#MPU_RASR_S_Pos
 18U

	)

1204 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1206 
	#MPU_RASR_C_Pos
 17U

	)

1207 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1209 
	#MPU_RASR_B_Pos
 16U

	)

1210 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1212 
	#MPU_RASR_SRD_Pos
 8U

	)

1213 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1215 
	#MPU_RASR_SIZE_Pos
 1U

	)

1216 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1218 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1219 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1237 
__IOM
 
uöt32_t
 
DHCSR
;

1238 
__OM
 
uöt32_t
 
DCRSR
;

1239 
__IOM
 
uöt32_t
 
DCRDR
;

1240 
__IOM
 
uöt32_t
 
DEMCR
;

1241 } 
	tC‹eDebug_Ty≥
;

1244 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1245 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1247 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1248 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1250 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1251 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1253 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1254 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1256 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1257 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1259 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1260 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1262 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1263 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1265 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1266 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1268 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1269 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1271 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1272 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1274 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1275 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1277 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1278 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1281 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1282 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1284 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1285 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1288 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1289 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1291 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1292 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1294 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1295 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1297 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1298 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1300 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1301 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1303 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1304 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1306 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1307 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1309 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1310 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1312 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1313 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1315 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1316 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1318 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1319 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1321 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1322 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1324 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1325 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1343 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1351 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1364 
	#SCS_BASE
 (0xE000E000ULË

	)

1365 
	#ITM_BASE
 (0xE0000000ULË

	)

1366 
	#DWT_BASE
 (0xE0001000ULË

	)

1367 
	#TPI_BASE
 (0xE0040000ULË

	)

1368 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1369 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1370 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1371 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1373 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1374 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1375 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1376 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1377 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1378 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1379 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1380 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1382 #i‡(
__MPU_PRESENT
 == 1U)

1383 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1384 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1422 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1424 
uöt32_t
 
ªg_vÆue
;

1425 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1427 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1428 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1429 
ªg_vÆue
 = (reg_value |

1430 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1431 (
Pri‹ôyGroupTmp
 << 8U) );

1432 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1441 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1443  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1452 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1454 
NVIC
->
ISER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1463 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1465 
NVIC
->
ICER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1476 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1478 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1487 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1489 
NVIC
->
ISPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1498 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1500 
NVIC
->
ICPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1511 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1513 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1524 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1526 i‡((
öt32_t
)(
IRQn
) < 0)

1528 
SCB
->
SHP
[(((
uöt32_t
)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1532 
NVIC
->
IP
[((
uöt32_t
)(
öt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1546 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) < 0)

1551 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1555 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)(
öt32_t
)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1571 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1573 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1574 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1575 
uöt32_t
 
SubPri‹ôyBôs
;

1577 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1578 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1581 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1582 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1598 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1600 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1601 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1602 
uöt32_t
 
SubPri‹ôyBôs
;

1604 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1605 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1607 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1608 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1616 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1618 
__DSB
();

1620 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1621 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1622 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1623 
__DSB
();

1627 
__NOP
();

1643 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

1656 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1658 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1663 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1664 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1665 
SysTick
->
VAL
 = 0UL;

1666 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1667 
SysTick_CTRL_TICKINT_Msk
 |

1668 
SysTick_CTRL_ENABLE_Msk
;

1686 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1687 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5U

	)

1698 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1700 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1701 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1703 
ITM
->
PORT
[0U].
u32
 == 0UL)

1705 
__NOP
();

1707 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1709  (
	gch
);

1719 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1721 
öt32_t
 
	gch
 = -1;

1723 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1725 
ch
 = 
ITM_RxBuf„r
;

1726 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1729  (
	gch
);

1739 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1742 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1757 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_cm4.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CM4_H_GENERIC


42 
	#__CORE_CM4_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__CM4_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__CM4_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__CM4_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_M
 (0x04UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 #i‡
deföed
 ( 
__CC_ARM
 )

125 #i‡
deföed
 
__TARGET_FPU_VFP


126 #i‡(
__FPU_PRESENT
 == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

137 #i‡
deföed
 
__ARM_PCS_VFP


138 #i‡(
__FPU_PRESENT
 == 1)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__GNUC__
 )

149 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

150 #i‡(
__FPU_PRESENT
 == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

160 #ñi‡
deföed
 ( 
__ICCARM__
 )

161 #i‡
deföed
 
__ARMVFP__


162 #i‡(
__FPU_PRESENT
 == 1U)

163 
	#__FPU_USED
 1U

	)

166 
	#__FPU_USED
 0U

	)

169 
	#__FPU_USED
 0U

	)

172 #ñi‡
deföed
 ( 
__TMS470__
 )

173 #i‡
deföed
 
__TI_VFP_SUPPORT__


174 #i‡(
__FPU_PRESENT
 == 1U)

175 
	#__FPU_USED
 1U

	)

178 
	#__FPU_USED
 0U

	)

181 
	#__FPU_USED
 0U

	)

184 #ñi‡
deföed
 ( 
__TASKING__
 )

185 #i‡
deföed
 
__FPU_VFP__


186 #i‡(
__FPU_PRESENT
 == 1U)

187 
	#__FPU_USED
 1U

	)

190 
	#__FPU_USED
 0U

	)

193 
	#__FPU_USED
 0U

	)

196 #ñi‡
deföed
 ( 
__CSMC__
 )

197 #i‡–
__CSMC__
 & 0x400U)

198 #i‡(
__FPU_PRESENT
 == 1U)

199 
	#__FPU_USED
 1U

	)

202 
	#__FPU_USED
 0U

	)

205 
	#__FPU_USED
 0U

	)

210 
	~"c‹e_cmIn°r.h
"

211 
	~"c‹e_cmFunc.h
"

212 
	~"c‹e_cmSimd.h
"

214 #ifde‡
__˝lu•lus


220 #i‚de‡
__CMSIS_GENERIC


222 #i‚de‡
__CORE_CM4_H_DEPENDANT


223 
	#__CORE_CM4_H_DEPENDANT


	)

225 #ifde‡
__˝lu•lus


230 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


231 #i‚de‡
__CM4_REV


232 
	#__CM4_REV
 0x0000U

	)

236 #i‚de‡
__FPU_PRESENT


237 
	#__FPU_PRESENT
 0U

	)

241 #i‚de‡
__MPU_PRESENT


242 
	#__MPU_PRESENT
 0U

	)

246 #i‚de‡
__NVIC_PRIO_BITS


247 
	#__NVIC_PRIO_BITS
 4U

	)

251 #i‚de‡
__Víd‹_SysTickC⁄fig


252 
	#__Víd‹_SysTickC⁄fig
 0U

	)

265 #ifde‡
__˝lu•lus


266 
	#__I
 vﬁ©ûê

	)

268 
	#__I
 vﬁ©ûêc⁄°

	)

270 
	#__O
 vﬁ©ûê

	)

271 
	#__IO
 vﬁ©ûê

	)

274 
	#__IM
 vﬁ©ûêc⁄°

	)

275 
	#__OM
 vﬁ©ûê

	)

276 
	#__IOM
 vﬁ©ûê

	)

312 
uöt32_t
 
_ª£rved0
:16;

313 
uöt32_t
 
GE
:4;

314 
uöt32_t
 
_ª£rved1
:7;

315 
uöt32_t
 
Q
:1;

316 
uöt32_t
 
V
:1;

317 
uöt32_t
 
C
:1;

318 
uöt32_t
 
Z
:1;

319 
uöt32_t
 
N
:1;

320 } 
b
;

321 
uöt32_t
 
w
;

322 } 
	tAPSR_Ty≥
;

325 
	#APSR_N_Pos
 31U

	)

326 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

328 
	#APSR_Z_Pos
 30U

	)

329 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

331 
	#APSR_C_Pos
 29U

	)

332 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

334 
	#APSR_V_Pos
 28U

	)

335 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

337 
	#APSR_Q_Pos
 27U

	)

338 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

340 
	#APSR_GE_Pos
 16U

	)

341 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

351 
uöt32_t
 
ISR
:9;

352 
uöt32_t
 
_ª£rved0
:23;

353 } 
b
;

354 
uöt32_t
 
w
;

355 } 
	tIPSR_Ty≥
;

358 
	#IPSR_ISR_Pos
 0U

	)

359 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

369 
uöt32_t
 
ISR
:9;

370 
uöt32_t
 
_ª£rved0
:7;

371 
uöt32_t
 
GE
:4;

372 
uöt32_t
 
_ª£rved1
:4;

373 
uöt32_t
 
T
:1;

374 
uöt32_t
 
IT
:2;

375 
uöt32_t
 
Q
:1;

376 
uöt32_t
 
V
:1;

377 
uöt32_t
 
C
:1;

378 
uöt32_t
 
Z
:1;

379 
uöt32_t
 
N
:1;

380 } 
b
;

381 
uöt32_t
 
w
;

382 } 
	txPSR_Ty≥
;

385 
	#xPSR_N_Pos
 31U

	)

386 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

388 
	#xPSR_Z_Pos
 30U

	)

389 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

391 
	#xPSR_C_Pos
 29U

	)

392 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

394 
	#xPSR_V_Pos
 28U

	)

395 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

397 
	#xPSR_Q_Pos
 27U

	)

398 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

400 
	#xPSR_IT_Pos
 25U

	)

401 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

403 
	#xPSR_T_Pos
 24U

	)

404 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

406 
	#xPSR_GE_Pos
 16U

	)

407 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

409 
	#xPSR_ISR_Pos
 0U

	)

410 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

420 
uöt32_t
 
nPRIV
:1;

421 
uöt32_t
 
SPSEL
:1;

422 
uöt32_t
 
FPCA
:1;

423 
uöt32_t
 
_ª£rved0
:29;

424 } 
b
;

425 
uöt32_t
 
w
;

426 } 
	tCONTROL_Ty≥
;

429 
	#CONTROL_FPCA_Pos
 2U

	)

430 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

432 
	#CONTROL_SPSEL_Pos
 1U

	)

433 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

435 
	#CONTROL_nPRIV_Pos
 0U

	)

436 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

453 
__IOM
 
uöt32_t
 
ISER
[8U];

454 
uöt32_t
 
RESERVED0
[24U];

455 
__IOM
 
uöt32_t
 
ICER
[8U];

456 
uöt32_t
 
RSERVED1
[24U];

457 
__IOM
 
uöt32_t
 
ISPR
[8U];

458 
uöt32_t
 
RESERVED2
[24U];

459 
__IOM
 
uöt32_t
 
ICPR
[8U];

460 
uöt32_t
 
RESERVED3
[24U];

461 
__IOM
 
uöt32_t
 
IABR
[8U];

462 
uöt32_t
 
RESERVED4
[56U];

463 
__IOM
 
uöt8_t
 
IP
[240U];

464 
uöt32_t
 
RESERVED5
[644U];

465 
__OM
 
uöt32_t
 
STIR
;

466 } 
	tNVIC_Ty≥
;

469 
	#NVIC_STIR_INTID_Pos
 0U

	)

470 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

487 
__IM
 
uöt32_t
 
CPUID
;

488 
__IOM
 
uöt32_t
 
ICSR
;

489 
__IOM
 
uöt32_t
 
VTOR
;

490 
__IOM
 
uöt32_t
 
AIRCR
;

491 
__IOM
 
uöt32_t
 
SCR
;

492 
__IOM
 
uöt32_t
 
CCR
;

493 
__IOM
 
uöt8_t
 
SHP
[12U];

494 
__IOM
 
uöt32_t
 
SHCSR
;

495 
__IOM
 
uöt32_t
 
CFSR
;

496 
__IOM
 
uöt32_t
 
HFSR
;

497 
__IOM
 
uöt32_t
 
DFSR
;

498 
__IOM
 
uöt32_t
 
MMFAR
;

499 
__IOM
 
uöt32_t
 
BFAR
;

500 
__IOM
 
uöt32_t
 
AFSR
;

501 
__IM
 
uöt32_t
 
PFR
[2U];

502 
__IM
 
uöt32_t
 
DFR
;

503 
__IM
 
uöt32_t
 
ADR
;

504 
__IM
 
uöt32_t
 
MMFR
[4U];

505 
__IM
 
uöt32_t
 
ISAR
[5U];

506 
uöt32_t
 
RESERVED0
[5U];

507 
__IOM
 
uöt32_t
 
CPACR
;

508 } 
	tSCB_Ty≥
;

511 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

512 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

514 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

515 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

517 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

518 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

520 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

521 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

523 
	#SCB_CPUID_REVISION_Pos
 0U

	)

524 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

527 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

528 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

530 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

531 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

533 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

534 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

536 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

537 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

539 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

540 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

542 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

543 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

545 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

546 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

548 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

549 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

551 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

552 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

554 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

555 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

558 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

559 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

562 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

563 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

565 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

566 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

568 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

569 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

571 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

572 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

574 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

575 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

577 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

578 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

580 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

581 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

584 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

585 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

587 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

588 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

590 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

591 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

594 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

595 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

597 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

598 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

600 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

601 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

603 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

604 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

606 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

607 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

609 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

610 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

613 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

614 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

616 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

617 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

619 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

620 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

622 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

623 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

625 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

626 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

628 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

629 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

631 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

632 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

634 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

635 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

637 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

638 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

640 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

641 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

643 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

644 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

646 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

647 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

649 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

650 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

652 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

653 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

656 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

657 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

659 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

660 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

662 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

663 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

666 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

667 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

669 
	#SCB_HFSR_FORCED_Pos
 30U

	)

670 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

672 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

673 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

676 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

677 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

679 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

680 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

682 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

683 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

685 
	#SCB_DFSR_BKPT_Pos
 1U

	)

686 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

688 
	#SCB_DFSR_HALTED_Pos
 0U

	)

689 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

706 
uöt32_t
 
RESERVED0
[1U];

707 
__IM
 
uöt32_t
 
ICTR
;

708 
__IOM
 
uöt32_t
 
ACTLR
;

709 } 
	tSCnSCB_Ty≥
;

712 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

713 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

716 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9U

	)

717 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

719 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8U

	)

720 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

722 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

723 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

725 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

726 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

728 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

729 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

746 
__IOM
 
uöt32_t
 
CTRL
;

747 
__IOM
 
uöt32_t
 
LOAD
;

748 
__IOM
 
uöt32_t
 
VAL
;

749 
__IM
 
uöt32_t
 
CALIB
;

750 } 
	tSysTick_Ty≥
;

753 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

754 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

756 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

757 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

759 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

760 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

762 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

763 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

766 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

767 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

770 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

771 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

774 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

775 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

777 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

778 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

780 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

781 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

798 
__OM
 union

800 
__OM
 
uöt8_t
 
u8
;

801 
__OM
 
uöt16_t
 
u16
;

802 
__OM
 
uöt32_t
 
u32
;

803 } 
PORT
 [32U];

804 
uöt32_t
 
RESERVED0
[864U];

805 
__IOM
 
uöt32_t
 
TER
;

806 
uöt32_t
 
RESERVED1
[15U];

807 
__IOM
 
uöt32_t
 
TPR
;

808 
uöt32_t
 
RESERVED2
[15U];

809 
__IOM
 
uöt32_t
 
TCR
;

810 
uöt32_t
 
RESERVED3
[29U];

811 
__OM
 
uöt32_t
 
IWR
;

812 
__IM
 
uöt32_t
 
IRR
;

813 
__IOM
 
uöt32_t
 
IMCR
;

814 
uöt32_t
 
RESERVED4
[43U];

815 
__OM
 
uöt32_t
 
LAR
;

816 
__IM
 
uöt32_t
 
LSR
;

817 
uöt32_t
 
RESERVED5
[6U];

818 
__IM
 
uöt32_t
 
PID4
;

819 
__IM
 
uöt32_t
 
PID5
;

820 
__IM
 
uöt32_t
 
PID6
;

821 
__IM
 
uöt32_t
 
PID7
;

822 
__IM
 
uöt32_t
 
PID0
;

823 
__IM
 
uöt32_t
 
PID1
;

824 
__IM
 
uöt32_t
 
PID2
;

825 
__IM
 
uöt32_t
 
PID3
;

826 
__IM
 
uöt32_t
 
CID0
;

827 
__IM
 
uöt32_t
 
CID1
;

828 
__IM
 
uöt32_t
 
CID2
;

829 
__IM
 
uöt32_t
 
CID3
;

830 } 
	tITM_Ty≥
;

833 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

834 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

837 
	#ITM_TCR_BUSY_Pos
 23U

	)

838 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

840 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

841 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

843 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

844 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

846 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

847 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

849 
	#ITM_TCR_SWOENA_Pos
 4U

	)

850 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

852 
	#ITM_TCR_DWTENA_Pos
 3U

	)

853 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

855 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

856 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

858 
	#ITM_TCR_TSENA_Pos
 1U

	)

859 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

861 
	#ITM_TCR_ITMENA_Pos
 0U

	)

862 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

865 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

866 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

869 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

870 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

873 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

874 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

877 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

878 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

880 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

881 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

883 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

884 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

901 
__IOM
 
uöt32_t
 
CTRL
;

902 
__IOM
 
uöt32_t
 
CYCCNT
;

903 
__IOM
 
uöt32_t
 
CPICNT
;

904 
__IOM
 
uöt32_t
 
EXCCNT
;

905 
__IOM
 
uöt32_t
 
SLEEPCNT
;

906 
__IOM
 
uöt32_t
 
LSUCNT
;

907 
__IOM
 
uöt32_t
 
FOLDCNT
;

908 
__IM
 
uöt32_t
 
PCSR
;

909 
__IOM
 
uöt32_t
 
COMP0
;

910 
__IOM
 
uöt32_t
 
MASK0
;

911 
__IOM
 
uöt32_t
 
FUNCTION0
;

912 
uöt32_t
 
RESERVED0
[1U];

913 
__IOM
 
uöt32_t
 
COMP1
;

914 
__IOM
 
uöt32_t
 
MASK1
;

915 
__IOM
 
uöt32_t
 
FUNCTION1
;

916 
uöt32_t
 
RESERVED1
[1U];

917 
__IOM
 
uöt32_t
 
COMP2
;

918 
__IOM
 
uöt32_t
 
MASK2
;

919 
__IOM
 
uöt32_t
 
FUNCTION2
;

920 
uöt32_t
 
RESERVED2
[1U];

921 
__IOM
 
uöt32_t
 
COMP3
;

922 
__IOM
 
uöt32_t
 
MASK3
;

923 
__IOM
 
uöt32_t
 
FUNCTION3
;

924 } 
	tDWT_Ty≥
;

927 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

928 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

930 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

931 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

933 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

934 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

936 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

937 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

939 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

940 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

942 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

943 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

945 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

946 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

948 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

949 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

951 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

952 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

954 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

955 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

957 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

958 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

960 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

961 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

963 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

964 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

966 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

967 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

969 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

970 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

972 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

973 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

975 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

976 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

978 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

979 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

982 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

983 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

986 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

987 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

990 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

991 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

994 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

995 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

998 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

999 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1002 
	#DWT_MASK_MASK_Pos
 0U

	)

1003 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1006 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1007 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1009 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1010 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1012 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1013 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1015 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1016 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1018 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1019 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1021 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1022 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1024 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1025 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1027 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1028 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1030 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1031 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1048 
__IOM
 
uöt32_t
 
SSPSR
;

1049 
__IOM
 
uöt32_t
 
CSPSR
;

1050 
uöt32_t
 
RESERVED0
[2U];

1051 
__IOM
 
uöt32_t
 
ACPR
;

1052 
uöt32_t
 
RESERVED1
[55U];

1053 
__IOM
 
uöt32_t
 
SPPR
;

1054 
uöt32_t
 
RESERVED2
[131U];

1055 
__IM
 
uöt32_t
 
FFSR
;

1056 
__IOM
 
uöt32_t
 
FFCR
;

1057 
__IM
 
uöt32_t
 
FSCR
;

1058 
uöt32_t
 
RESERVED3
[759U];

1059 
__IM
 
uöt32_t
 
TRIGGER
;

1060 
__IM
 
uöt32_t
 
FIFO0
;

1061 
__IM
 
uöt32_t
 
ITATBCTR2
;

1062 
uöt32_t
 
RESERVED4
[1U];

1063 
__IM
 
uöt32_t
 
ITATBCTR0
;

1064 
__IM
 
uöt32_t
 
FIFO1
;

1065 
__IOM
 
uöt32_t
 
ITCTRL
;

1066 
uöt32_t
 
RESERVED5
[39U];

1067 
__IOM
 
uöt32_t
 
CLAIMSET
;

1068 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1069 
uöt32_t
 
RESERVED7
[8U];

1070 
__IM
 
uöt32_t
 
DEVID
;

1071 
__IM
 
uöt32_t
 
DEVTYPE
;

1072 } 
	tTPI_Ty≥
;

1075 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1076 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1079 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1080 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1083 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1084 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1086 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1087 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1089 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1090 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1092 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1093 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1096 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1097 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1099 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1100 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1103 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1104 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1107 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1108 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1110 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1111 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1113 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1114 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1116 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1117 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1119 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1120 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1122 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1123 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1125 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1126 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1129 
	#TPI_ITATBCTR2_ATREADY_Pos
 0U

	)

1130 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL )

	)

1133 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1134 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1136 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1137 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1139 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1140 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1142 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1143 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1145 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1146 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1148 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1149 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1151 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1152 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1155 
	#TPI_ITATBCTR0_ATREADY_Pos
 0U

	)

1156 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL )

	)

1159 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1160 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL )

	)

1163 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1164 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1166 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1167 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1169 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1170 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1172 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1173 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1175 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1176 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1178 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1179 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1182 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4U

	)

1183 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1185 
	#TPI_DEVTYPE_SubTy≥_Pos
 0U

	)

1186 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1191 #i‡(
__MPU_PRESENT
 == 1U)

1204 
__IM
 
uöt32_t
 
TYPE
;

1205 
__IOM
 
uöt32_t
 
CTRL
;

1206 
__IOM
 
uöt32_t
 
RNR
;

1207 
__IOM
 
uöt32_t
 
RBAR
;

1208 
__IOM
 
uöt32_t
 
RASR
;

1209 
__IOM
 
uöt32_t
 
RBAR_A1
;

1210 
__IOM
 
uöt32_t
 
RASR_A1
;

1211 
__IOM
 
uöt32_t
 
RBAR_A2
;

1212 
__IOM
 
uöt32_t
 
RASR_A2
;

1213 
__IOM
 
uöt32_t
 
RBAR_A3
;

1214 
__IOM
 
uöt32_t
 
RASR_A3
;

1215 } 
	tMPU_Ty≥
;

1218 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1219 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1221 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1222 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1224 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1225 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1228 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1229 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1231 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1232 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1234 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1235 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1238 
	#MPU_RNR_REGION_Pos
 0U

	)

1239 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1242 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1243 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1245 
	#MPU_RBAR_VALID_Pos
 4U

	)

1246 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1248 
	#MPU_RBAR_REGION_Pos
 0U

	)

1249 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1252 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1253 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1255 
	#MPU_RASR_XN_Pos
 28U

	)

1256 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1258 
	#MPU_RASR_AP_Pos
 24U

	)

1259 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1261 
	#MPU_RASR_TEX_Pos
 19U

	)

1262 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1264 
	#MPU_RASR_S_Pos
 18U

	)

1265 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1267 
	#MPU_RASR_C_Pos
 17U

	)

1268 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1270 
	#MPU_RASR_B_Pos
 16U

	)

1271 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1273 
	#MPU_RASR_SRD_Pos
 8U

	)

1274 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1276 
	#MPU_RASR_SIZE_Pos
 1U

	)

1277 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1279 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1280 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1286 #i‡(
__FPU_PRESENT
 == 1U)

1299 
uöt32_t
 
RESERVED0
[1U];

1300 
__IOM
 
uöt32_t
 
FPCCR
;

1301 
__IOM
 
uöt32_t
 
FPCAR
;

1302 
__IOM
 
uöt32_t
 
FPDSCR
;

1303 
__IM
 
uöt32_t
 
MVFR0
;

1304 
__IM
 
uöt32_t
 
MVFR1
;

1305 } 
	tFPU_Ty≥
;

1308 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1309 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1311 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1312 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1314 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1315 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1317 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1318 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1320 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1321 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1323 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1324 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1326 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1327 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1329 
	#FPU_FPCCR_USER_Pos
 1U

	)

1330 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1332 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1333 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1336 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1337 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1340 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1341 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1343 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1344 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1346 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1347 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1349 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1350 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1353 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1354 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1356 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1357 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1359 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1360 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1362 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1363 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1365 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1366 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1368 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1369 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1371 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1372 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1374 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1375 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1378 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1379 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1381 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1382 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1384 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1385 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1387 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1388 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1406 
__IOM
 
uöt32_t
 
DHCSR
;

1407 
__OM
 
uöt32_t
 
DCRSR
;

1408 
__IOM
 
uöt32_t
 
DCRDR
;

1409 
__IOM
 
uöt32_t
 
DEMCR
;

1410 } 
	tC‹eDebug_Ty≥
;

1413 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1414 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1416 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1417 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1419 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1420 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1422 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1423 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1425 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1426 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1428 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1429 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1431 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1432 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1434 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1435 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1437 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1438 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1440 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1441 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1443 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1444 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1446 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1447 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1450 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1451 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1453 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1454 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1457 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1458 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1460 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1461 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1463 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1464 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1466 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1467 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1469 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1470 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1472 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1473 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1475 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1476 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1478 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1479 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1481 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1482 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1484 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1485 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1487 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1488 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1490 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1491 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1493 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1494 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1512 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1520 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1533 
	#SCS_BASE
 (0xE000E000ULË

	)

1534 
	#ITM_BASE
 (0xE0000000ULË

	)

1535 
	#DWT_BASE
 (0xE0001000ULË

	)

1536 
	#TPI_BASE
 (0xE0040000ULË

	)

1537 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1538 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1539 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1540 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1542 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1543 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1544 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1545 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1546 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1547 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1548 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1549 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1551 #i‡(
__MPU_PRESENT
 == 1U)

1552 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1553 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1556 #i‡(
__FPU_PRESENT
 == 1U)

1557 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1558 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1596 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1598 
uöt32_t
 
ªg_vÆue
;

1599 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1601 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1602 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1603 
ªg_vÆue
 = (reg_value |

1604 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1605 (
Pri‹ôyGroupTmp
 << 8U) );

1606 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1615 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1617  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1626 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1628 
NVIC
->
ISER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1637 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1639 
NVIC
->
ICER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1650 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1652 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1661 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1663 
NVIC
->
ISPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1672 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1674 
NVIC
->
ICPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1685 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1687 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1698 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1700 i‡((
öt32_t
)(
IRQn
) < 0)

1702 
SCB
->
SHP
[(((
uöt32_t
)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1706 
NVIC
->
IP
[((
uöt32_t
)(
öt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1720 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1723 i‡((
öt32_t
)(
IRQn
) < 0)

1725 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1729 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)(
öt32_t
)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1745 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1747 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1748 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1749 
uöt32_t
 
SubPri‹ôyBôs
;

1751 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1752 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1755 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1756 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1772 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1774 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1775 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1776 
uöt32_t
 
SubPri‹ôyBôs
;

1778 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1779 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1781 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1782 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1790 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1792 
__DSB
();

1794 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1795 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1796 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1797 
__DSB
();

1801 
__NOP
();

1817 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

1830 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1832 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1837 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1838 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1839 
SysTick
->
VAL
 = 0UL;

1840 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1841 
SysTick_CTRL_TICKINT_Msk
 |

1842 
SysTick_CTRL_ENABLE_Msk
;

1860 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1861 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5U

	)

1872 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1874 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1875 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1877 
ITM
->
PORT
[0U].
u32
 == 0UL)

1879 
__NOP
();

1881 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1883  (
	gch
);

1893 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1895 
öt32_t
 
	gch
 = -1;

1897 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1899 
ch
 = 
ITM_RxBuf„r
;

1900 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1903  (
	gch
);

1913 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1916 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1931 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_cm7.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CM7_H_GENERIC


42 
	#__CORE_CM7_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__CM7_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__CM7_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__CM7_CMSIS_VERSION
 ((
__CM7_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__CM7_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_M
 (0x07UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 #i‡
deföed
 ( 
__CC_ARM
 )

125 #i‡
deföed
 
__TARGET_FPU_VFP


126 #i‡(
__FPU_PRESENT
 == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

137 #i‡
deföed
 
__ARM_PCS_VFP


138 #i‡(
__FPU_PRESENT
 == 1)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__GNUC__
 )

149 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

150 #i‡(
__FPU_PRESENT
 == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

160 #ñi‡
deföed
 ( 
__ICCARM__
 )

161 #i‡
deföed
 
__ARMVFP__


162 #i‡(
__FPU_PRESENT
 == 1U)

163 
	#__FPU_USED
 1U

	)

166 
	#__FPU_USED
 0U

	)

169 
	#__FPU_USED
 0U

	)

172 #ñi‡
deföed
 ( 
__TMS470__
 )

173 #i‡
deföed
 
__TI_VFP_SUPPORT__


174 #i‡(
__FPU_PRESENT
 == 1U)

175 
	#__FPU_USED
 1U

	)

178 
	#__FPU_USED
 0U

	)

181 
	#__FPU_USED
 0U

	)

184 #ñi‡
deföed
 ( 
__TASKING__
 )

185 #i‡
deföed
 
__FPU_VFP__


186 #i‡(
__FPU_PRESENT
 == 1U)

187 
	#__FPU_USED
 1U

	)

190 
	#__FPU_USED
 0U

	)

193 
	#__FPU_USED
 0U

	)

196 #ñi‡
deföed
 ( 
__CSMC__
 )

197 #i‡–
__CSMC__
 & 0x400U)

198 #i‡(
__FPU_PRESENT
 == 1U)

199 
	#__FPU_USED
 1U

	)

202 
	#__FPU_USED
 0U

	)

205 
	#__FPU_USED
 0U

	)

210 
	~"c‹e_cmIn°r.h
"

211 
	~"c‹e_cmFunc.h
"

212 
	~"c‹e_cmSimd.h
"

214 #ifde‡
__˝lu•lus


220 #i‚de‡
__CMSIS_GENERIC


222 #i‚de‡
__CORE_CM7_H_DEPENDANT


223 
	#__CORE_CM7_H_DEPENDANT


	)

225 #ifde‡
__˝lu•lus


230 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


231 #i‚de‡
__CM7_REV


232 
	#__CM7_REV
 0x0000U

	)

236 #i‚de‡
__FPU_PRESENT


237 
	#__FPU_PRESENT
 0U

	)

241 #i‚de‡
__MPU_PRESENT


242 
	#__MPU_PRESENT
 0U

	)

246 #i‚de‡
__ICACHE_PRESENT


247 
	#__ICACHE_PRESENT
 0U

	)

251 #i‚de‡
__DCACHE_PRESENT


252 
	#__DCACHE_PRESENT
 0U

	)

256 #i‚de‡
__DTCM_PRESENT


257 
	#__DTCM_PRESENT
 0U

	)

261 #i‚de‡
__NVIC_PRIO_BITS


262 
	#__NVIC_PRIO_BITS
 3U

	)

266 #i‚de‡
__Víd‹_SysTickC⁄fig


267 
	#__Víd‹_SysTickC⁄fig
 0U

	)

280 #ifde‡
__˝lu•lus


281 
	#__I
 vﬁ©ûê

	)

283 
	#__I
 vﬁ©ûêc⁄°

	)

285 
	#__O
 vﬁ©ûê

	)

286 
	#__IO
 vﬁ©ûê

	)

289 
	#__IM
 vﬁ©ûêc⁄°

	)

290 
	#__OM
 vﬁ©ûê

	)

291 
	#__IOM
 vﬁ©ûê

	)

327 
uöt32_t
 
_ª£rved0
:16;

328 
uöt32_t
 
GE
:4;

329 
uöt32_t
 
_ª£rved1
:7;

330 
uöt32_t
 
Q
:1;

331 
uöt32_t
 
V
:1;

332 
uöt32_t
 
C
:1;

333 
uöt32_t
 
Z
:1;

334 
uöt32_t
 
N
:1;

335 } 
b
;

336 
uöt32_t
 
w
;

337 } 
	tAPSR_Ty≥
;

340 
	#APSR_N_Pos
 31U

	)

341 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

343 
	#APSR_Z_Pos
 30U

	)

344 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

346 
	#APSR_C_Pos
 29U

	)

347 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

349 
	#APSR_V_Pos
 28U

	)

350 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

352 
	#APSR_Q_Pos
 27U

	)

353 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

355 
	#APSR_GE_Pos
 16U

	)

356 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

366 
uöt32_t
 
ISR
:9;

367 
uöt32_t
 
_ª£rved0
:23;

368 } 
b
;

369 
uöt32_t
 
w
;

370 } 
	tIPSR_Ty≥
;

373 
	#IPSR_ISR_Pos
 0U

	)

374 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

384 
uöt32_t
 
ISR
:9;

385 
uöt32_t
 
_ª£rved0
:7;

386 
uöt32_t
 
GE
:4;

387 
uöt32_t
 
_ª£rved1
:4;

388 
uöt32_t
 
T
:1;

389 
uöt32_t
 
IT
:2;

390 
uöt32_t
 
Q
:1;

391 
uöt32_t
 
V
:1;

392 
uöt32_t
 
C
:1;

393 
uöt32_t
 
Z
:1;

394 
uöt32_t
 
N
:1;

395 } 
b
;

396 
uöt32_t
 
w
;

397 } 
	txPSR_Ty≥
;

400 
	#xPSR_N_Pos
 31U

	)

401 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

403 
	#xPSR_Z_Pos
 30U

	)

404 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

406 
	#xPSR_C_Pos
 29U

	)

407 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

409 
	#xPSR_V_Pos
 28U

	)

410 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

412 
	#xPSR_Q_Pos
 27U

	)

413 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

415 
	#xPSR_IT_Pos
 25U

	)

416 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

418 
	#xPSR_T_Pos
 24U

	)

419 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

421 
	#xPSR_GE_Pos
 16U

	)

422 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

424 
	#xPSR_ISR_Pos
 0U

	)

425 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

435 
uöt32_t
 
nPRIV
:1;

436 
uöt32_t
 
SPSEL
:1;

437 
uöt32_t
 
FPCA
:1;

438 
uöt32_t
 
_ª£rved0
:29;

439 } 
b
;

440 
uöt32_t
 
w
;

441 } 
	tCONTROL_Ty≥
;

444 
	#CONTROL_FPCA_Pos
 2U

	)

445 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

447 
	#CONTROL_SPSEL_Pos
 1U

	)

448 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

450 
	#CONTROL_nPRIV_Pos
 0U

	)

451 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

468 
__IOM
 
uöt32_t
 
ISER
[8U];

469 
uöt32_t
 
RESERVED0
[24U];

470 
__IOM
 
uöt32_t
 
ICER
[8U];

471 
uöt32_t
 
RSERVED1
[24U];

472 
__IOM
 
uöt32_t
 
ISPR
[8U];

473 
uöt32_t
 
RESERVED2
[24U];

474 
__IOM
 
uöt32_t
 
ICPR
[8U];

475 
uöt32_t
 
RESERVED3
[24U];

476 
__IOM
 
uöt32_t
 
IABR
[8U];

477 
uöt32_t
 
RESERVED4
[56U];

478 
__IOM
 
uöt8_t
 
IP
[240U];

479 
uöt32_t
 
RESERVED5
[644U];

480 
__OM
 
uöt32_t
 
STIR
;

481 } 
	tNVIC_Ty≥
;

484 
	#NVIC_STIR_INTID_Pos
 0U

	)

485 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

502 
__IM
 
uöt32_t
 
CPUID
;

503 
__IOM
 
uöt32_t
 
ICSR
;

504 
__IOM
 
uöt32_t
 
VTOR
;

505 
__IOM
 
uöt32_t
 
AIRCR
;

506 
__IOM
 
uöt32_t
 
SCR
;

507 
__IOM
 
uöt32_t
 
CCR
;

508 
__IOM
 
uöt8_t
 
SHPR
[12U];

509 
__IOM
 
uöt32_t
 
SHCSR
;

510 
__IOM
 
uöt32_t
 
CFSR
;

511 
__IOM
 
uöt32_t
 
HFSR
;

512 
__IOM
 
uöt32_t
 
DFSR
;

513 
__IOM
 
uöt32_t
 
MMFAR
;

514 
__IOM
 
uöt32_t
 
BFAR
;

515 
__IOM
 
uöt32_t
 
AFSR
;

516 
__IM
 
uöt32_t
 
ID_PFR
[2U];

517 
__IM
 
uöt32_t
 
ID_DFR
;

518 
__IM
 
uöt32_t
 
ID_AFR
;

519 
__IM
 
uöt32_t
 
ID_MFR
[4U];

520 
__IM
 
uöt32_t
 
ID_ISAR
[5U];

521 
uöt32_t
 
RESERVED0
[1U];

522 
__IM
 
uöt32_t
 
CLIDR
;

523 
__IM
 
uöt32_t
 
CTR
;

524 
__IM
 
uöt32_t
 
CCSIDR
;

525 
__IOM
 
uöt32_t
 
CSSELR
;

526 
__IOM
 
uöt32_t
 
CPACR
;

527 
uöt32_t
 
RESERVED3
[93U];

528 
__OM
 
uöt32_t
 
STIR
;

529 
uöt32_t
 
RESERVED4
[15U];

530 
__IM
 
uöt32_t
 
MVFR0
;

531 
__IM
 
uöt32_t
 
MVFR1
;

532 
__IM
 
uöt32_t
 
MVFR2
;

533 
uöt32_t
 
RESERVED5
[1U];

534 
__OM
 
uöt32_t
 
ICIALLU
;

535 
uöt32_t
 
RESERVED6
[1U];

536 
__OM
 
uöt32_t
 
ICIMVAU
;

537 
__OM
 
uöt32_t
 
DCIMVAC
;

538 
__OM
 
uöt32_t
 
DCISW
;

539 
__OM
 
uöt32_t
 
DCCMVAU
;

540 
__OM
 
uöt32_t
 
DCCMVAC
;

541 
__OM
 
uöt32_t
 
DCCSW
;

542 
__OM
 
uöt32_t
 
DCCIMVAC
;

543 
__OM
 
uöt32_t
 
DCCISW
;

544 
uöt32_t
 
RESERVED7
[6U];

545 
__IOM
 
uöt32_t
 
ITCMCR
;

546 
__IOM
 
uöt32_t
 
DTCMCR
;

547 
__IOM
 
uöt32_t
 
AHBPCR
;

548 
__IOM
 
uöt32_t
 
CACR
;

549 
__IOM
 
uöt32_t
 
AHBSCR
;

550 
uöt32_t
 
RESERVED8
[1U];

551 
__IOM
 
uöt32_t
 
ABFSR
;

552 } 
	tSCB_Ty≥
;

555 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

556 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

558 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

559 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

561 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

562 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

564 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

565 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

567 
	#SCB_CPUID_REVISION_Pos
 0U

	)

568 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

571 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

572 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

574 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

575 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

577 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

578 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

580 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

581 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

583 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

584 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

586 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

587 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

589 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

590 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

592 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

593 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

595 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

596 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

598 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

599 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

602 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

603 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

606 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

607 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

609 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

610 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

612 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

613 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

615 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

616 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

618 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

619 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

621 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

622 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

624 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

625 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

628 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

629 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

631 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

632 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

634 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

635 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

638 
	#SCB_CCR_BP_Pos
 18U

	)

639 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

641 
	#SCB_CCR_IC_Pos
 17U

	)

642 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

644 
	#SCB_CCR_DC_Pos
 16U

	)

645 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

647 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

648 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

650 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

651 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

653 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

654 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

656 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

657 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

659 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

660 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

662 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

663 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

666 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

667 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

669 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

670 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

672 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

673 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

675 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

676 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

678 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

679 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

681 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

682 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

684 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

685 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

687 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

688 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

690 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

691 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

693 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

694 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

696 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

697 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

699 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

700 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

702 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

703 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

705 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

706 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

709 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

710 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

712 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

713 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

715 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

716 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

719 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

720 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

722 
	#SCB_HFSR_FORCED_Pos
 30U

	)

723 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

725 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

726 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

729 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

730 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

732 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

733 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

735 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

736 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

738 
	#SCB_DFSR_BKPT_Pos
 1U

	)

739 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

741 
	#SCB_DFSR_HALTED_Pos
 0U

	)

742 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

745 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

746 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

748 
	#SCB_CLIDR_LOC_Pos
 24U

	)

749 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

752 
	#SCB_CTR_FORMAT_Pos
 29U

	)

753 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

755 
	#SCB_CTR_CWG_Pos
 24U

	)

756 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

758 
	#SCB_CTR_ERG_Pos
 20U

	)

759 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

761 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

762 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

764 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

765 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

768 
	#SCB_CCSIDR_WT_Pos
 31U

	)

769 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

771 
	#SCB_CCSIDR_WB_Pos
 30U

	)

772 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

774 
	#SCB_CCSIDR_RA_Pos
 29U

	)

775 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

777 
	#SCB_CCSIDR_WA_Pos
 28U

	)

778 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

780 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

781 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

783 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

784 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

786 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

787 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

790 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

791 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

793 
	#SCB_CSSELR_IND_Pos
 0U

	)

794 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

797 
	#SCB_STIR_INTID_Pos
 0U

	)

798 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

801 
	#SCB_DCISW_WAY_Pos
 30U

	)

802 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

804 
	#SCB_DCISW_SET_Pos
 5U

	)

805 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

808 
	#SCB_DCCSW_WAY_Pos
 30U

	)

809 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

811 
	#SCB_DCCSW_SET_Pos
 5U

	)

812 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

815 
	#SCB_DCCISW_WAY_Pos
 30U

	)

816 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

818 
	#SCB_DCCISW_SET_Pos
 5U

	)

819 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

822 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

823 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

825 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

826 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

828 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

829 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

831 
	#SCB_ITCMCR_EN_Pos
 0U

	)

832 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

835 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

836 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

838 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

839 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

841 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

842 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

844 
	#SCB_DTCMCR_EN_Pos
 0U

	)

845 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

848 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

849 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

851 
	#SCB_AHBPCR_EN_Pos
 0U

	)

852 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

855 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

856 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

858 
	#SCB_CACR_ECCEN_Pos
 1U

	)

859 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

861 
	#SCB_CACR_SIWT_Pos
 0U

	)

862 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

865 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

866 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

868 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

869 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

871 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

872 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

875 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

876 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

878 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

879 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

881 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

882 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

884 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

885 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

887 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

888 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

890 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

891 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

908 
uöt32_t
 
RESERVED0
[1U];

909 
__IM
 
uöt32_t
 
ICTR
;

910 
__IOM
 
uöt32_t
 
ACTLR
;

911 } 
	tSCnSCB_Ty≥
;

914 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

915 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

918 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Pos
 12U

	)

919 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Msk
 (1UL << 
SCnSCB_ACTLR_DISITMATBFLUSH_Pos
Ë

	)

921 
	#SCnSCB_ACTLR_DISRAMODE_Pos
 11U

	)

922 
	#SCnSCB_ACTLR_DISRAMODE_Msk
 (1UL << 
SCnSCB_ACTLR_DISRAMODE_Pos
Ë

	)

924 
	#SCnSCB_ACTLR_FPEXCODIS_Pos
 10U

	)

925 
	#SCnSCB_ACTLR_FPEXCODIS_Msk
 (1UL << 
SCnSCB_ACTLR_FPEXCODIS_Pos
Ë

	)

927 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

928 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

930 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

931 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

948 
__IOM
 
uöt32_t
 
CTRL
;

949 
__IOM
 
uöt32_t
 
LOAD
;

950 
__IOM
 
uöt32_t
 
VAL
;

951 
__IM
 
uöt32_t
 
CALIB
;

952 } 
	tSysTick_Ty≥
;

955 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

956 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

958 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

959 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

961 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

962 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

964 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

965 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

968 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

969 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

972 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

973 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

976 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

977 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

979 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

980 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

982 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

983 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1000 
__OM
 union

1002 
__OM
 
uöt8_t
 
u8
;

1003 
__OM
 
uöt16_t
 
u16
;

1004 
__OM
 
uöt32_t
 
u32
;

1005 } 
PORT
 [32U];

1006 
uöt32_t
 
RESERVED0
[864U];

1007 
__IOM
 
uöt32_t
 
TER
;

1008 
uöt32_t
 
RESERVED1
[15U];

1009 
__IOM
 
uöt32_t
 
TPR
;

1010 
uöt32_t
 
RESERVED2
[15U];

1011 
__IOM
 
uöt32_t
 
TCR
;

1012 
uöt32_t
 
RESERVED3
[29U];

1013 
__OM
 
uöt32_t
 
IWR
;

1014 
__IM
 
uöt32_t
 
IRR
;

1015 
__IOM
 
uöt32_t
 
IMCR
;

1016 
uöt32_t
 
RESERVED4
[43U];

1017 
__OM
 
uöt32_t
 
LAR
;

1018 
__IM
 
uöt32_t
 
LSR
;

1019 
uöt32_t
 
RESERVED5
[6U];

1020 
__IM
 
uöt32_t
 
PID4
;

1021 
__IM
 
uöt32_t
 
PID5
;

1022 
__IM
 
uöt32_t
 
PID6
;

1023 
__IM
 
uöt32_t
 
PID7
;

1024 
__IM
 
uöt32_t
 
PID0
;

1025 
__IM
 
uöt32_t
 
PID1
;

1026 
__IM
 
uöt32_t
 
PID2
;

1027 
__IM
 
uöt32_t
 
PID3
;

1028 
__IM
 
uöt32_t
 
CID0
;

1029 
__IM
 
uöt32_t
 
CID1
;

1030 
__IM
 
uöt32_t
 
CID2
;

1031 
__IM
 
uöt32_t
 
CID3
;

1032 } 
	tITM_Ty≥
;

1035 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1036 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

1039 
	#ITM_TCR_BUSY_Pos
 23U

	)

1040 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1042 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

1043 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

1045 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1046 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1048 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

1049 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

1051 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1052 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1054 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1055 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1057 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1058 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1060 
	#ITM_TCR_TSENA_Pos
 1U

	)

1061 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1063 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1064 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1067 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1068 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1071 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1072 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1075 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1076 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1079 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1080 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1082 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1083 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1085 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1086 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1103 
__IOM
 
uöt32_t
 
CTRL
;

1104 
__IOM
 
uöt32_t
 
CYCCNT
;

1105 
__IOM
 
uöt32_t
 
CPICNT
;

1106 
__IOM
 
uöt32_t
 
EXCCNT
;

1107 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1108 
__IOM
 
uöt32_t
 
LSUCNT
;

1109 
__IOM
 
uöt32_t
 
FOLDCNT
;

1110 
__IM
 
uöt32_t
 
PCSR
;

1111 
__IOM
 
uöt32_t
 
COMP0
;

1112 
__IOM
 
uöt32_t
 
MASK0
;

1113 
__IOM
 
uöt32_t
 
FUNCTION0
;

1114 
uöt32_t
 
RESERVED0
[1U];

1115 
__IOM
 
uöt32_t
 
COMP1
;

1116 
__IOM
 
uöt32_t
 
MASK1
;

1117 
__IOM
 
uöt32_t
 
FUNCTION1
;

1118 
uöt32_t
 
RESERVED1
[1U];

1119 
__IOM
 
uöt32_t
 
COMP2
;

1120 
__IOM
 
uöt32_t
 
MASK2
;

1121 
__IOM
 
uöt32_t
 
FUNCTION2
;

1122 
uöt32_t
 
RESERVED2
[1U];

1123 
__IOM
 
uöt32_t
 
COMP3
;

1124 
__IOM
 
uöt32_t
 
MASK3
;

1125 
__IOM
 
uöt32_t
 
FUNCTION3
;

1126 
uöt32_t
 
RESERVED3
[981U];

1127 
__OM
 
uöt32_t
 
LAR
;

1128 
__IM
 
uöt32_t
 
LSR
;

1129 } 
	tDWT_Ty≥
;

1132 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1133 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1135 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1136 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1138 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1139 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1141 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1142 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1144 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1145 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1147 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1148 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1150 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1151 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1153 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1154 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1156 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1157 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1159 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1160 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1162 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1163 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1165 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1166 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1168 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1169 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1171 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1172 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1174 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1175 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1177 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1178 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1180 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1181 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1183 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1184 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1187 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1188 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1191 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1192 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1195 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1196 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1199 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1200 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1203 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1204 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1207 
	#DWT_MASK_MASK_Pos
 0U

	)

1208 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1211 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1212 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1214 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1215 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1217 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1218 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1220 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1221 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1223 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1224 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1226 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1227 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1229 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1230 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1232 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1233 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1235 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1236 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1253 
__IOM
 
uöt32_t
 
SSPSR
;

1254 
__IOM
 
uöt32_t
 
CSPSR
;

1255 
uöt32_t
 
RESERVED0
[2U];

1256 
__IOM
 
uöt32_t
 
ACPR
;

1257 
uöt32_t
 
RESERVED1
[55U];

1258 
__IOM
 
uöt32_t
 
SPPR
;

1259 
uöt32_t
 
RESERVED2
[131U];

1260 
__IM
 
uöt32_t
 
FFSR
;

1261 
__IOM
 
uöt32_t
 
FFCR
;

1262 
__IM
 
uöt32_t
 
FSCR
;

1263 
uöt32_t
 
RESERVED3
[759U];

1264 
__IM
 
uöt32_t
 
TRIGGER
;

1265 
__IM
 
uöt32_t
 
FIFO0
;

1266 
__IM
 
uöt32_t
 
ITATBCTR2
;

1267 
uöt32_t
 
RESERVED4
[1U];

1268 
__IM
 
uöt32_t
 
ITATBCTR0
;

1269 
__IM
 
uöt32_t
 
FIFO1
;

1270 
__IOM
 
uöt32_t
 
ITCTRL
;

1271 
uöt32_t
 
RESERVED5
[39U];

1272 
__IOM
 
uöt32_t
 
CLAIMSET
;

1273 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1274 
uöt32_t
 
RESERVED7
[8U];

1275 
__IM
 
uöt32_t
 
DEVID
;

1276 
__IM
 
uöt32_t
 
DEVTYPE
;

1277 } 
	tTPI_Ty≥
;

1280 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1281 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1284 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1285 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1288 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1289 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1291 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1292 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1294 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1295 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1297 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1298 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1301 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1302 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1304 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1305 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1308 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1309 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1312 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1313 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1315 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1316 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1318 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1319 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1321 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1322 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1324 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1325 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1327 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1328 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1330 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1331 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1334 
	#TPI_ITATBCTR2_ATREADY_Pos
 0U

	)

1335 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL )

	)

1338 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1339 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1341 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1342 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1344 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1345 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1347 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1348 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1350 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1351 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1353 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1354 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1356 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1357 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1360 
	#TPI_ITATBCTR0_ATREADY_Pos
 0U

	)

1361 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL )

	)

1364 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1365 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL )

	)

1368 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1369 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1371 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1372 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1374 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1375 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1377 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1378 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1380 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1381 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1383 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1384 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1387 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4U

	)

1388 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1390 
	#TPI_DEVTYPE_SubTy≥_Pos
 0U

	)

1391 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1396 #i‡(
__MPU_PRESENT
 == 1U)

1409 
__IM
 
uöt32_t
 
TYPE
;

1410 
__IOM
 
uöt32_t
 
CTRL
;

1411 
__IOM
 
uöt32_t
 
RNR
;

1412 
__IOM
 
uöt32_t
 
RBAR
;

1413 
__IOM
 
uöt32_t
 
RASR
;

1414 
__IOM
 
uöt32_t
 
RBAR_A1
;

1415 
__IOM
 
uöt32_t
 
RASR_A1
;

1416 
__IOM
 
uöt32_t
 
RBAR_A2
;

1417 
__IOM
 
uöt32_t
 
RASR_A2
;

1418 
__IOM
 
uöt32_t
 
RBAR_A3
;

1419 
__IOM
 
uöt32_t
 
RASR_A3
;

1420 } 
	tMPU_Ty≥
;

1423 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1424 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1426 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1427 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1429 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1430 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1433 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1434 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1436 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1437 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1439 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1440 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1443 
	#MPU_RNR_REGION_Pos
 0U

	)

1444 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1447 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1448 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1450 
	#MPU_RBAR_VALID_Pos
 4U

	)

1451 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1453 
	#MPU_RBAR_REGION_Pos
 0U

	)

1454 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1457 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1458 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1460 
	#MPU_RASR_XN_Pos
 28U

	)

1461 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1463 
	#MPU_RASR_AP_Pos
 24U

	)

1464 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1466 
	#MPU_RASR_TEX_Pos
 19U

	)

1467 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1469 
	#MPU_RASR_S_Pos
 18U

	)

1470 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1472 
	#MPU_RASR_C_Pos
 17U

	)

1473 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1475 
	#MPU_RASR_B_Pos
 16U

	)

1476 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1478 
	#MPU_RASR_SRD_Pos
 8U

	)

1479 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1481 
	#MPU_RASR_SIZE_Pos
 1U

	)

1482 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1484 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1485 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1491 #i‡(
__FPU_PRESENT
 == 1U)

1504 
uöt32_t
 
RESERVED0
[1U];

1505 
__IOM
 
uöt32_t
 
FPCCR
;

1506 
__IOM
 
uöt32_t
 
FPCAR
;

1507 
__IOM
 
uöt32_t
 
FPDSCR
;

1508 
__IM
 
uöt32_t
 
MVFR0
;

1509 
__IM
 
uöt32_t
 
MVFR1
;

1510 
__IM
 
uöt32_t
 
MVFR2
;

1511 } 
	tFPU_Ty≥
;

1514 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1515 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1517 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1518 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1520 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1521 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1523 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1524 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1526 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1527 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1529 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1530 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1532 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1533 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1535 
	#FPU_FPCCR_USER_Pos
 1U

	)

1536 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1538 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1539 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1542 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1543 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1546 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1547 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1549 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1550 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1552 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1553 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1555 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1556 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1559 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1560 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1562 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1563 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1565 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1566 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1568 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1569 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1571 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1572 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1574 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1575 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1577 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1578 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1580 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1581 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1584 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1585 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1587 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1588 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1590 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1591 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1593 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1594 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1614 
__IOM
 
uöt32_t
 
DHCSR
;

1615 
__OM
 
uöt32_t
 
DCRSR
;

1616 
__IOM
 
uöt32_t
 
DCRDR
;

1617 
__IOM
 
uöt32_t
 
DEMCR
;

1618 } 
	tC‹eDebug_Ty≥
;

1621 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1622 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1624 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1625 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1627 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1628 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1630 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1631 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1633 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1634 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1636 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1637 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1639 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1640 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1642 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1643 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1645 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1646 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1648 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1649 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1651 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1652 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1654 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1655 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1658 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1659 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1661 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1662 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1665 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1666 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1668 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1669 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1671 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1672 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1674 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1675 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1677 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1678 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1680 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1681 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1683 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1684 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1686 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1687 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1689 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1690 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1692 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1693 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1695 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1696 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1698 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1699 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1701 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1702 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1720 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1728 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1741 
	#SCS_BASE
 (0xE000E000ULË

	)

1742 
	#ITM_BASE
 (0xE0000000ULË

	)

1743 
	#DWT_BASE
 (0xE0001000ULË

	)

1744 
	#TPI_BASE
 (0xE0040000ULË

	)

1745 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1746 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1747 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1748 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1750 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1751 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1752 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1753 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1754 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1755 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1756 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1757 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1759 #i‡(
__MPU_PRESENT
 == 1U)

1760 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1761 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1764 #i‡(
__FPU_PRESENT
 == 1U)

1765 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1766 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1804 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1806 
uöt32_t
 
ªg_vÆue
;

1807 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1809 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1810 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1811 
ªg_vÆue
 = (reg_value |

1812 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1813 (
Pri‹ôyGroupTmp
 << 8U) );

1814 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1823 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1825  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1834 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1836 
NVIC
->
ISER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1845 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1847 
NVIC
->
ICER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1858 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1860 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1869 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1871 
NVIC
->
ISPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1880 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1882 
NVIC
->
ICPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1893 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1895 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1906 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1908 i‡((
öt32_t
)(
IRQn
) < 0)

1910 
SCB
->
SHPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1914 
NVIC
->
IP
[((
uöt32_t
)(
öt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1928 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1931 i‡((
öt32_t
)(
IRQn
) < 0)

1933 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1937 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)(
öt32_t
)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1953 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1955 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1956 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1957 
uöt32_t
 
SubPri‹ôyBôs
;

1959 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1960 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1963 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1964 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1980 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1982 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1983 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1984 
uöt32_t
 
SubPri‹ôyBôs
;

1986 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1987 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1989 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1990 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1998 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

2000 
__DSB
();

2002 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2003 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2004 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2005 
__DSB
();

2009 
__NOP
();

2032 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2034 
uöt32_t
 
mv‰0
;

2036 
mv‰0
 = 
SCB
->
MVFR0
;

2037 i‡((
mv‰0
 & 0x00000FF0UL) == 0x220UL)

2041 i‡((
mv‰0
 & 0x00000FF0UL) == 0x020UL)

2065 
	#CCSIDR_WAYS
(
x
Ë(((xË& 
SCB_CCSIDR_ASSOCIATIVITY_Msk
Ë>> 
SCB_CCSIDR_ASSOCIATIVITY_Pos
)

	)

2066 
	#CCSIDR_SETS
(
x
Ë(((xË& 
SCB_CCSIDR_NUMSETS_Msk
 ) >> 
SCB_CCSIDR_NUMSETS_Pos
 )

	)

2073 
__STATIC_INLINE
 
SCB_E«bÀICache
 ()

2075 #i‡(
__ICACHE_PRESENT
 == 1U)

2076 
__DSB
();

2077 
__ISB
();

2078 
SCB
->
ICIALLU
 = 0UL;

2079 
SCB
->
CCR
 |(
uöt32_t
)
SCB_CCR_IC_Msk
;

2080 
__DSB
();

2081 
__ISB
();

2090 
__STATIC_INLINE
 
SCB_DißbÀICache
 ()

2092 #i‡(
__ICACHE_PRESENT
 == 1U)

2093 
__DSB
();

2094 
__ISB
();

2095 
SCB
->
CCR
 &~(
uöt32_t
)
SCB_CCR_IC_Msk
;

2096 
SCB
->
ICIALLU
 = 0UL;

2097 
__DSB
();

2098 
__ISB
();

2107 
__STATIC_INLINE
 
SCB_InvÆid©eICache
 ()

2109 #i‡(
__ICACHE_PRESENT
 == 1U)

2110 
__DSB
();

2111 
__ISB
();

2112 
SCB
->
ICIALLU
 = 0UL;

2113 
__DSB
();

2114 
__ISB
();

2123 
__STATIC_INLINE
 
SCB_E«bÀDCache
 ()

2125 #i‡(
__DCACHE_PRESENT
 == 1U)

2126 
uöt32_t
 
ccsidr
;

2127 
uöt32_t
 
£ts
;

2128 
uöt32_t
 
ways
;

2130 
SCB
->
CSSELR
 = (0U << 1U) | 0U;

2131 
__DSB
();

2133 
ccsidr
 = 
SCB
->
CCSIDR
;

2136 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2138 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2140 
SCB
->
DCISW
 = (((
£ts
 << 
SCB_DCISW_SET_Pos
Ë& 
SCB_DCISW_SET_Msk
) |

2141 ((
ways
 << 
SCB_DCISW_WAY_Pos
Ë& 
SCB_DCISW_WAY_Msk
) );

2142 #i‡
deföed
 ( 
__CC_ARM
 )

2143 
__scheduÀ_b¨rõr
();

2145 } 
ways
--);

2146 } 
£ts
--);

2147 
__DSB
();

2149 
SCB
->
CCR
 |(
uöt32_t
)
SCB_CCR_DC_Msk
;

2151 
__DSB
();

2152 
__ISB
();

2161 
__STATIC_INLINE
 
SCB_DißbÀDCache
 ()

2163 #i‡(
__DCACHE_PRESENT
 == 1U)

2164 
uöt32_t
 
ccsidr
;

2165 
uöt32_t
 
£ts
;

2166 
uöt32_t
 
ways
;

2168 
SCB
->
CSSELR
 = (0U << 1U) | 0U;

2169 
__DSB
();

2171 
ccsidr
 = 
SCB
->
CCSIDR
;

2173 
SCB
->
CCR
 &~(
uöt32_t
)
SCB_CCR_DC_Msk
;

2176 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2178 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2180 
SCB
->
DCCISW
 = (((
£ts
 << 
SCB_DCCISW_SET_Pos
Ë& 
SCB_DCCISW_SET_Msk
) |

2181 ((
ways
 << 
SCB_DCCISW_WAY_Pos
Ë& 
SCB_DCCISW_WAY_Msk
) );

2182 #i‡
deföed
 ( 
__CC_ARM
 )

2183 
__scheduÀ_b¨rõr
();

2185 } 
ways
--);

2186 } 
£ts
--);

2188 
__DSB
();

2189 
__ISB
();

2198 
__STATIC_INLINE
 
SCB_InvÆid©eDCache
 ()

2200 #i‡(
__DCACHE_PRESENT
 == 1U)

2201 
uöt32_t
 
ccsidr
;

2202 
uöt32_t
 
£ts
;

2203 
uöt32_t
 
ways
;

2205 
SCB
->
CSSELR
 = (0U << 1U) | 0U;

2206 
__DSB
();

2208 
ccsidr
 = 
SCB
->
CCSIDR
;

2211 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2213 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2215 
SCB
->
DCISW
 = (((
£ts
 << 
SCB_DCISW_SET_Pos
Ë& 
SCB_DCISW_SET_Msk
) |

2216 ((
ways
 << 
SCB_DCISW_WAY_Pos
Ë& 
SCB_DCISW_WAY_Msk
) );

2217 #i‡
deföed
 ( 
__CC_ARM
 )

2218 
__scheduÀ_b¨rõr
();

2220 } 
ways
--);

2221 } 
£ts
--);

2223 
__DSB
();

2224 
__ISB
();

2233 
__STATIC_INLINE
 
SCB_CÀ™DCache
 ()

2235 #i‡(
__DCACHE_PRESENT
 == 1U)

2236 
uöt32_t
 
ccsidr
;

2237 
uöt32_t
 
£ts
;

2238 
uöt32_t
 
ways
;

2240 
SCB
->
CSSELR
 = (0U << 1U) | 0U;

2241 
__DSB
();

2243 
ccsidr
 = 
SCB
->
CCSIDR
;

2246 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2248 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2250 
SCB
->
DCCSW
 = (((
£ts
 << 
SCB_DCCSW_SET_Pos
Ë& 
SCB_DCCSW_SET_Msk
) |

2251 ((
ways
 << 
SCB_DCCSW_WAY_Pos
Ë& 
SCB_DCCSW_WAY_Msk
) );

2252 #i‡
deföed
 ( 
__CC_ARM
 )

2253 
__scheduÀ_b¨rõr
();

2255 } 
ways
--);

2256 } 
£ts
--);

2258 
__DSB
();

2259 
__ISB
();

2268 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache
 ()

2270 #i‡(
__DCACHE_PRESENT
 == 1U)

2271 
uöt32_t
 
ccsidr
;

2272 
uöt32_t
 
£ts
;

2273 
uöt32_t
 
ways
;

2275 
SCB
->
CSSELR
 = (0U << 1U) | 0U;

2276 
__DSB
();

2278 
ccsidr
 = 
SCB
->
CCSIDR
;

2281 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2283 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2285 
SCB
->
DCCISW
 = (((
£ts
 << 
SCB_DCCISW_SET_Pos
Ë& 
SCB_DCCISW_SET_Msk
) |

2286 ((
ways
 << 
SCB_DCCISW_WAY_Pos
Ë& 
SCB_DCCISW_WAY_Msk
) );

2287 #i‡
deföed
 ( 
__CC_ARM
 )

2288 
__scheduÀ_b¨rõr
();

2290 } 
ways
--);

2291 } 
£ts
--);

2293 
__DSB
();

2294 
__ISB
();

2305 
__STATIC_INLINE
 
SCB_InvÆid©eDCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2307 #i‡(
__DCACHE_PRESENT
 == 1U)

2308 
öt32_t
 
›_size
 = 
dsize
;

2309 
uöt32_t
 
›_addr
 = (uöt32_t)
addr
;

2310 
öt32_t
 
löesize
 = 32U;

2312 
__DSB
();

2314 
›_size
 > 0) {

2315 
SCB
->
DCIMVAC
 = 
›_addr
;

2316 
›_addr
 +
löesize
;

2317 
›_size
 -
löesize
;

2320 
__DSB
();

2321 
__ISB
();

2332 
__STATIC_INLINE
 
SCB_CÀ™DCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2334 #i‡(
__DCACHE_PRESENT
 == 1)

2335 
öt32_t
 
›_size
 = 
dsize
;

2336 
uöt32_t
 
›_addr
 = (uöt32_tË
addr
;

2337 
öt32_t
 
löesize
 = 32U;

2339 
__DSB
();

2341 
›_size
 > 0) {

2342 
SCB
->
DCCMVAC
 = 
›_addr
;

2343 
›_addr
 +
löesize
;

2344 
›_size
 -
löesize
;

2347 
__DSB
();

2348 
__ISB
();

2359 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2361 #i‡(
__DCACHE_PRESENT
 == 1U)

2362 
öt32_t
 
›_size
 = 
dsize
;

2363 
uöt32_t
 
›_addr
 = (uöt32_tË
addr
;

2364 
öt32_t
 
löesize
 = 32U;

2366 
__DSB
();

2368 
›_size
 > 0) {

2369 
SCB
->
DCCIMVAC
 = 
›_addr
;

2370 
›_addr
 +
löesize
;

2371 
›_size
 -
löesize
;

2374 
__DSB
();

2375 
__ISB
();

2392 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

2405 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2407 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2412 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2413 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2414 
SysTick
->
VAL
 = 0UL;

2415 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2416 
SysTick_CTRL_TICKINT_Msk
 |

2417 
SysTick_CTRL_ENABLE_Msk
;

2435 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2436 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5U

	)

2447 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2449 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2450 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2452 
ITM
->
PORT
[0U].
u32
 == 0UL)

2454 
__NOP
();

2456 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2458  (
	gch
);

2468 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2470 
öt32_t
 
	gch
 = -1;

2472 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2474 
ch
 = 
ITM_RxBuf„r
;

2475 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2478  (
	gch
);

2488 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2491 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2506 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_cmFunc.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CMFUNC_H


42 
	#__CORE_CMFUNC_H


	)

52 #i‡ 
deföed
 ( 
__CC_ARM
 )

53 
	~"cmsis_¨mcc.h
"

56 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

57 
	~"cmsis_¨mcc_V6.h
"

60 #ñi‡
deföed
 ( 
__GNUC__
 )

61 
	~"cmsis_gcc.h
"

64 #ñi‡
deföed
 ( 
__ICCARM__
 )

65 
	~<cmsis_ür.h
>

68 #ñi‡
deföed
 ( 
__TMS470__
 )

69 
	~<cmsis_ccs.h
>

72 #ñi‡
deföed
 ( 
__TASKING__
 )

80 #ñi‡
deföed
 ( 
__CSMC__
 )

81 
	~<cmsis_csm.h
>

	@Drivers/CMSIS/Include/core_cmInstr.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CMINSTR_H


42 
	#__CORE_CMINSTR_H


	)

52 #i‡ 
deföed
 ( 
__CC_ARM
 )

53 
	~"cmsis_¨mcc.h
"

56 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

57 
	~"cmsis_¨mcc_V6.h
"

60 #ñi‡
deföed
 ( 
__GNUC__
 )

61 
	~"cmsis_gcc.h
"

64 #ñi‡
deföed
 ( 
__ICCARM__
 )

65 
	~<cmsis_ür.h
>

68 #ñi‡
deföed
 ( 
__TMS470__
 )

69 
	~<cmsis_ccs.h
>

72 #ñi‡
deföed
 ( 
__TASKING__
 )

80 #ñi‡
deföed
 ( 
__CSMC__
 )

81 
	~<cmsis_csm.h
>

	@Drivers/CMSIS/Include/core_cmSimd.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CMSIMD_H


42 
	#__CORE_CMSIMD_H


	)

44 #ifde‡
__˝lu•lus


56 #i‡ 
deföed
 ( 
__CC_ARM
 )

57 
	~"cmsis_¨mcc.h
"

60 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

61 
	~"cmsis_¨mcc_V6.h
"

64 #ñi‡
deföed
 ( 
__GNUC__
 )

65 
	~"cmsis_gcc.h
"

68 #ñi‡
deföed
 ( 
__ICCARM__
 )

69 
	~<cmsis_ür.h
>

72 #ñi‡
deföed
 ( 
__TMS470__
 )

73 
	~<cmsis_ccs.h
>

76 #ñi‡
deföed
 ( 
__TASKING__
 )

84 #ñi‡
deföed
 ( 
__CSMC__
 )

85 
	~<cmsis_csm.h
>

92 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_sc000.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_SC000_H_GENERIC


42 
	#__CORE_SC000_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__SC000_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__SC000_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__SC000_CMSIS_VERSION
 ((
__SC000_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__SC000_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_SC
 (000UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 
	#__FPU_USED
 0U

	)

126 #i‡
deföed
 ( 
__CC_ARM
 )

127 #i‡
deföed
 
__TARGET_FPU_VFP


131 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

132 #i‡
deföed
 
__ARM_PCS_VFP


136 #ñi‡
deföed
 ( 
__GNUC__
 )

137 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

141 #ñi‡
deföed
 ( 
__ICCARM__
 )

142 #i‡
deföed
 
__ARMVFP__


146 #ñi‡
deföed
 ( 
__TMS470__
 )

147 #i‡
deföed
 
__TI_VFP_SUPPORT__


151 #ñi‡
deföed
 ( 
__TASKING__
 )

152 #i‡
deföed
 
__FPU_VFP__


156 #ñi‡
deföed
 ( 
__CSMC__
 )

157 #i‡–
__CSMC__
 & 0x400U)

163 
	~"c‹e_cmIn°r.h
"

164 
	~"c‹e_cmFunc.h
"

166 #ifde‡
__˝lu•lus


172 #i‚de‡
__CMSIS_GENERIC


174 #i‚de‡
__CORE_SC000_H_DEPENDANT


175 
	#__CORE_SC000_H_DEPENDANT


	)

177 #ifde‡
__˝lu•lus


182 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


183 #i‚de‡
__SC000_REV


184 
	#__SC000_REV
 0x0000U

	)

188 #i‚de‡
__MPU_PRESENT


189 
	#__MPU_PRESENT
 0U

	)

193 #i‚de‡
__NVIC_PRIO_BITS


194 
	#__NVIC_PRIO_BITS
 2U

	)

198 #i‚de‡
__Víd‹_SysTickC⁄fig


199 
	#__Víd‹_SysTickC⁄fig
 0U

	)

212 #ifde‡
__˝lu•lus


213 
	#__I
 vﬁ©ûê

	)

215 
	#__I
 vﬁ©ûêc⁄°

	)

217 
	#__O
 vﬁ©ûê

	)

218 
	#__IO
 vﬁ©ûê

	)

221 
	#__IM
 vﬁ©ûêc⁄°

	)

222 
	#__OM
 vﬁ©ûê

	)

223 
	#__IOM
 vﬁ©ûê

	)

257 
uöt32_t
 
_ª£rved0
:28;

258 
uöt32_t
 
V
:1;

259 
uöt32_t
 
C
:1;

260 
uöt32_t
 
Z
:1;

261 
uöt32_t
 
N
:1;

262 } 
b
;

263 
uöt32_t
 
w
;

264 } 
	tAPSR_Ty≥
;

267 
	#APSR_N_Pos
 31U

	)

268 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

270 
	#APSR_Z_Pos
 30U

	)

271 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

273 
	#APSR_C_Pos
 29U

	)

274 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

276 
	#APSR_V_Pos
 28U

	)

277 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

287 
uöt32_t
 
ISR
:9;

288 
uöt32_t
 
_ª£rved0
:23;

289 } 
b
;

290 
uöt32_t
 
w
;

291 } 
	tIPSR_Ty≥
;

294 
	#IPSR_ISR_Pos
 0U

	)

295 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

305 
uöt32_t
 
ISR
:9;

306 
uöt32_t
 
_ª£rved0
:15;

307 
uöt32_t
 
T
:1;

308 
uöt32_t
 
_ª£rved1
:3;

309 
uöt32_t
 
V
:1;

310 
uöt32_t
 
C
:1;

311 
uöt32_t
 
Z
:1;

312 
uöt32_t
 
N
:1;

313 } 
b
;

314 
uöt32_t
 
w
;

315 } 
	txPSR_Ty≥
;

318 
	#xPSR_N_Pos
 31U

	)

319 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

321 
	#xPSR_Z_Pos
 30U

	)

322 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

324 
	#xPSR_C_Pos
 29U

	)

325 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

327 
	#xPSR_V_Pos
 28U

	)

328 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

330 
	#xPSR_T_Pos
 24U

	)

331 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

333 
	#xPSR_ISR_Pos
 0U

	)

334 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

344 
uöt32_t
 
_ª£rved0
:1;

345 
uöt32_t
 
SPSEL
:1;

346 
uöt32_t
 
_ª£rved1
:30;

347 } 
b
;

348 
uöt32_t
 
w
;

349 } 
	tCONTROL_Ty≥
;

352 
	#CONTROL_SPSEL_Pos
 1U

	)

353 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

370 
__IOM
 
uöt32_t
 
ISER
[1U];

371 
uöt32_t
 
RESERVED0
[31U];

372 
__IOM
 
uöt32_t
 
ICER
[1U];

373 
uöt32_t
 
RSERVED1
[31U];

374 
__IOM
 
uöt32_t
 
ISPR
[1U];

375 
uöt32_t
 
RESERVED2
[31U];

376 
__IOM
 
uöt32_t
 
ICPR
[1U];

377 
uöt32_t
 
RESERVED3
[31U];

378 
uöt32_t
 
RESERVED4
[64U];

379 
__IOM
 
uöt32_t
 
IP
[8U];

380 } 
	tNVIC_Ty≥
;

397 
__IM
 
uöt32_t
 
CPUID
;

398 
__IOM
 
uöt32_t
 
ICSR
;

399 
__IOM
 
uöt32_t
 
VTOR
;

400 
__IOM
 
uöt32_t
 
AIRCR
;

401 
__IOM
 
uöt32_t
 
SCR
;

402 
__IOM
 
uöt32_t
 
CCR
;

403 
uöt32_t
 
RESERVED0
[1U];

404 
__IOM
 
uöt32_t
 
SHP
[2U];

405 
__IOM
 
uöt32_t
 
SHCSR
;

406 
uöt32_t
 
RESERVED1
[154U];

407 
__IOM
 
uöt32_t
 
SFCR
;

408 } 
	tSCB_Ty≥
;

411 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

412 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

414 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

415 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

417 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

418 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

420 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

421 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

423 
	#SCB_CPUID_REVISION_Pos
 0U

	)

424 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

427 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

428 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

431 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

433 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

434 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

436 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

437 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

439 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

440 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

442 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

443 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

445 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

446 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

448 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

449 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

451 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

452 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

455 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

456 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

459 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

460 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

462 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

463 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

465 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

466 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

468 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

469 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

471 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

472 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

475 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

476 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

478 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

479 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

481 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

482 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

485 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

486 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

488 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

489 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

492 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

493 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

510 
uöt32_t
 
RESERVED0
[2U];

511 
__IOM
 
uöt32_t
 
ACTLR
;

512 } 
	tSCnSCB_Ty≥
;

515 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

516 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

533 
__IOM
 
uöt32_t
 
CTRL
;

534 
__IOM
 
uöt32_t
 
LOAD
;

535 
__IOM
 
uöt32_t
 
VAL
;

536 
__IM
 
uöt32_t
 
CALIB
;

537 } 
	tSysTick_Ty≥
;

540 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

541 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

543 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

544 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

546 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

547 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

549 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

550 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

553 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

554 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

557 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

558 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

561 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

562 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

564 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

565 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

567 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

568 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

572 #i‡(
__MPU_PRESENT
 == 1U)

585 
__IM
 
uöt32_t
 
TYPE
;

586 
__IOM
 
uöt32_t
 
CTRL
;

587 
__IOM
 
uöt32_t
 
RNR
;

588 
__IOM
 
uöt32_t
 
RBAR
;

589 
__IOM
 
uöt32_t
 
RASR
;

590 } 
	tMPU_Ty≥
;

593 
	#MPU_TYPE_IREGION_Pos
 16U

	)

594 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

596 
	#MPU_TYPE_DREGION_Pos
 8U

	)

597 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

599 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

600 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

603 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

604 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

606 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

607 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

609 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

610 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

613 
	#MPU_RNR_REGION_Pos
 0U

	)

614 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

617 
	#MPU_RBAR_ADDR_Pos
 8U

	)

618 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

620 
	#MPU_RBAR_VALID_Pos
 4U

	)

621 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

623 
	#MPU_RBAR_REGION_Pos
 0U

	)

624 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

627 
	#MPU_RASR_ATTRS_Pos
 16U

	)

628 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

630 
	#MPU_RASR_XN_Pos
 28U

	)

631 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

633 
	#MPU_RASR_AP_Pos
 24U

	)

634 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

636 
	#MPU_RASR_TEX_Pos
 19U

	)

637 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

639 
	#MPU_RASR_S_Pos
 18U

	)

640 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

642 
	#MPU_RASR_C_Pos
 17U

	)

643 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

645 
	#MPU_RASR_B_Pos
 16U

	)

646 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

648 
	#MPU_RASR_SRD_Pos
 8U

	)

649 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

651 
	#MPU_RASR_SIZE_Pos
 1U

	)

652 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

654 
	#MPU_RASR_ENABLE_Pos
 0U

	)

655 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

684 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

692 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

705 
	#SCS_BASE
 (0xE000E000ULË

	)

706 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

707 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

708 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

710 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

711 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

712 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

713 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

715 #i‡(
__MPU_PRESENT
 == 1U)

716 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

717 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

747 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

748 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

749 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

757 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

759 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

768 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

770 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

781 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

783 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

792 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

794 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

803 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

805 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)(
öt32_t
)
IRQn
) & 0x1FUL));

816 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

818 i‡((
öt32_t
)(
IRQn
) < 0)

820 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

821 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

825 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

826 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

840 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

843 i‡((
öt32_t
)(
IRQn
) < 0)

845 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

849 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

858 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

860 
__DSB
();

862 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

863 
SCB_AIRCR_SYSRESETREQ_Msk
);

864 
__DSB
();

868 
__NOP
();

884 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

897 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

899 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

904 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

905 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

906 
SysTick
->
VAL
 = 0UL;

907 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

908 
SysTick_CTRL_TICKINT_Msk
 |

909 
SysTick_CTRL_ENABLE_Msk
;

920 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/Include/core_sc300.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_SC300_H_GENERIC


42 
	#__CORE_SC300_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__SC300_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__SC300_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__SC300_CMSIS_VERSION
 ((
__SC300_CMSIS_VERSION_MAIN
 << 16UË| \

	)

77 
__SC300_CMSIS_VERSION_SUB
 )

79 
	#__CORTEX_SC
 (300UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 
	#__FPU_USED
 0U

	)

126 #i‡
deföed
 ( 
__CC_ARM
 )

127 #i‡
deföed
 
__TARGET_FPU_VFP


131 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

132 #i‡
deföed
 
__ARM_PCS_VFP


136 #ñi‡
deföed
 ( 
__GNUC__
 )

137 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

141 #ñi‡
deföed
 ( 
__ICCARM__
 )

142 #i‡
deföed
 
__ARMVFP__


146 #ñi‡
deföed
 ( 
__TMS470__
 )

147 #i‡
deföed
 
__TI_VFP_SUPPORT__


151 #ñi‡
deföed
 ( 
__TASKING__
 )

152 #i‡
deföed
 
__FPU_VFP__


156 #ñi‡
deföed
 ( 
__CSMC__
 )

157 #i‡–
__CSMC__
 & 0x400U)

163 
	~"c‹e_cmIn°r.h
"

164 
	~"c‹e_cmFunc.h
"

166 #ifde‡
__˝lu•lus


172 #i‚de‡
__CMSIS_GENERIC


174 #i‚de‡
__CORE_SC300_H_DEPENDANT


175 
	#__CORE_SC300_H_DEPENDANT


	)

177 #ifde‡
__˝lu•lus


182 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


183 #i‚de‡
__SC300_REV


184 
	#__SC300_REV
 0x0000U

	)

188 #i‚de‡
__MPU_PRESENT


189 
	#__MPU_PRESENT
 0U

	)

193 #i‚de‡
__NVIC_PRIO_BITS


194 
	#__NVIC_PRIO_BITS
 4U

	)

198 #i‚de‡
__Víd‹_SysTickC⁄fig


199 
	#__Víd‹_SysTickC⁄fig
 0U

	)

212 #ifde‡
__˝lu•lus


213 
	#__I
 vﬁ©ûê

	)

215 
	#__I
 vﬁ©ûêc⁄°

	)

217 
	#__O
 vﬁ©ûê

	)

218 
	#__IO
 vﬁ©ûê

	)

221 
	#__IM
 vﬁ©ûêc⁄°

	)

222 
	#__OM
 vﬁ©ûê

	)

223 
	#__IOM
 vﬁ©ûê

	)

258 
uöt32_t
 
_ª£rved0
:27;

259 
uöt32_t
 
Q
:1;

260 
uöt32_t
 
V
:1;

261 
uöt32_t
 
C
:1;

262 
uöt32_t
 
Z
:1;

263 
uöt32_t
 
N
:1;

264 } 
b
;

265 
uöt32_t
 
w
;

266 } 
	tAPSR_Ty≥
;

269 
	#APSR_N_Pos
 31U

	)

270 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

272 
	#APSR_Z_Pos
 30U

	)

273 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

275 
	#APSR_C_Pos
 29U

	)

276 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

278 
	#APSR_V_Pos
 28U

	)

279 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

281 
	#APSR_Q_Pos
 27U

	)

282 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

292 
uöt32_t
 
ISR
:9;

293 
uöt32_t
 
_ª£rved0
:23;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tIPSR_Ty≥
;

299 
	#IPSR_ISR_Pos
 0U

	)

300 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

310 
uöt32_t
 
ISR
:9;

311 
uöt32_t
 
_ª£rved0
:15;

312 
uöt32_t
 
T
:1;

313 
uöt32_t
 
IT
:2;

314 
uöt32_t
 
Q
:1;

315 
uöt32_t
 
V
:1;

316 
uöt32_t
 
C
:1;

317 
uöt32_t
 
Z
:1;

318 
uöt32_t
 
N
:1;

319 } 
b
;

320 
uöt32_t
 
w
;

321 } 
	txPSR_Ty≥
;

324 
	#xPSR_N_Pos
 31U

	)

325 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

327 
	#xPSR_Z_Pos
 30U

	)

328 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

330 
	#xPSR_C_Pos
 29U

	)

331 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

333 
	#xPSR_V_Pos
 28U

	)

334 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

336 
	#xPSR_Q_Pos
 27U

	)

337 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

339 
	#xPSR_IT_Pos
 25U

	)

340 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

342 
	#xPSR_T_Pos
 24U

	)

343 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

345 
	#xPSR_ISR_Pos
 0U

	)

346 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

356 
uöt32_t
 
nPRIV
:1;

357 
uöt32_t
 
SPSEL
:1;

358 
uöt32_t
 
_ª£rved1
:30;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tCONTROL_Ty≥
;

364 
	#CONTROL_SPSEL_Pos
 1U

	)

365 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

367 
	#CONTROL_nPRIV_Pos
 0U

	)

368 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

385 
__IOM
 
uöt32_t
 
ISER
[8U];

386 
uöt32_t
 
RESERVED0
[24U];

387 
__IOM
 
uöt32_t
 
ICER
[8U];

388 
uöt32_t
 
RSERVED1
[24U];

389 
__IOM
 
uöt32_t
 
ISPR
[8U];

390 
uöt32_t
 
RESERVED2
[24U];

391 
__IOM
 
uöt32_t
 
ICPR
[8U];

392 
uöt32_t
 
RESERVED3
[24U];

393 
__IOM
 
uöt32_t
 
IABR
[8U];

394 
uöt32_t
 
RESERVED4
[56U];

395 
__IOM
 
uöt8_t
 
IP
[240U];

396 
uöt32_t
 
RESERVED5
[644U];

397 
__OM
 
uöt32_t
 
STIR
;

398 } 
	tNVIC_Ty≥
;

401 
	#NVIC_STIR_INTID_Pos
 0U

	)

402 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

419 
__IM
 
uöt32_t
 
CPUID
;

420 
__IOM
 
uöt32_t
 
ICSR
;

421 
__IOM
 
uöt32_t
 
VTOR
;

422 
__IOM
 
uöt32_t
 
AIRCR
;

423 
__IOM
 
uöt32_t
 
SCR
;

424 
__IOM
 
uöt32_t
 
CCR
;

425 
__IOM
 
uöt8_t
 
SHP
[12U];

426 
__IOM
 
uöt32_t
 
SHCSR
;

427 
__IOM
 
uöt32_t
 
CFSR
;

428 
__IOM
 
uöt32_t
 
HFSR
;

429 
__IOM
 
uöt32_t
 
DFSR
;

430 
__IOM
 
uöt32_t
 
MMFAR
;

431 
__IOM
 
uöt32_t
 
BFAR
;

432 
__IOM
 
uöt32_t
 
AFSR
;

433 
__IM
 
uöt32_t
 
PFR
[2U];

434 
__IM
 
uöt32_t
 
DFR
;

435 
__IM
 
uöt32_t
 
ADR
;

436 
__IM
 
uöt32_t
 
MMFR
[4U];

437 
__IM
 
uöt32_t
 
ISAR
[5U];

438 
uöt32_t
 
RESERVED0
[5U];

439 
__IOM
 
uöt32_t
 
CPACR
;

440 
uöt32_t
 
RESERVED1
[129U];

441 
__IOM
 
uöt32_t
 
SFCR
;

442 } 
	tSCB_Ty≥
;

445 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

446 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

448 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

449 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

451 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

452 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

454 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

455 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

457 
	#SCB_CPUID_REVISION_Pos
 0U

	)

458 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

461 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

462 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

464 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

465 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

467 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

468 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

470 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

471 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

473 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

474 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

476 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

477 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

479 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

480 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

482 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

483 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

485 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

486 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

488 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

489 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

492 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

493 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

495 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

496 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

499 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

500 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

502 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

503 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

505 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

506 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

508 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

509 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

511 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

512 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

514 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

515 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

517 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

518 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

521 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

522 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

524 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

525 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

527 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

528 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

531 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

532 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

534 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

535 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

537 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

538 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

540 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

541 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

543 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

544 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

546 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

547 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

550 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

551 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

553 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

554 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

556 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

557 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

559 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

560 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

562 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

563 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

565 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

566 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

568 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

569 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

571 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

572 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

574 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

575 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

577 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

578 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

580 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

581 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

583 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

584 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

586 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

587 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

589 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

590 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

593 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

594 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

596 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

597 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

599 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

600 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

603 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

604 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

606 
	#SCB_HFSR_FORCED_Pos
 30U

	)

607 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

609 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

610 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

613 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

614 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

616 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

617 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

619 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

620 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

622 
	#SCB_DFSR_BKPT_Pos
 1U

	)

623 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

625 
	#SCB_DFSR_HALTED_Pos
 0U

	)

626 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

643 
uöt32_t
 
RESERVED0
[1U];

644 
__IM
 
uöt32_t
 
ICTR
;

645 
uöt32_t
 
RESERVED1
[1U];

646 } 
	tSCnSCB_Ty≥
;

649 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

650 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

667 
__IOM
 
uöt32_t
 
CTRL
;

668 
__IOM
 
uöt32_t
 
LOAD
;

669 
__IOM
 
uöt32_t
 
VAL
;

670 
__IM
 
uöt32_t
 
CALIB
;

671 } 
	tSysTick_Ty≥
;

674 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

675 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

677 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

678 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

680 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

681 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

683 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

684 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

687 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

688 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

691 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

692 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

695 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

696 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

698 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

699 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

701 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

702 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

719 
__OM
 union

721 
__OM
 
uöt8_t
 
u8
;

722 
__OM
 
uöt16_t
 
u16
;

723 
__OM
 
uöt32_t
 
u32
;

724 } 
PORT
 [32U];

725 
uöt32_t
 
RESERVED0
[864U];

726 
__IOM
 
uöt32_t
 
TER
;

727 
uöt32_t
 
RESERVED1
[15U];

728 
__IOM
 
uöt32_t
 
TPR
;

729 
uöt32_t
 
RESERVED2
[15U];

730 
__IOM
 
uöt32_t
 
TCR
;

731 
uöt32_t
 
RESERVED3
[29U];

732 
__OM
 
uöt32_t
 
IWR
;

733 
__IM
 
uöt32_t
 
IRR
;

734 
__IOM
 
uöt32_t
 
IMCR
;

735 
uöt32_t
 
RESERVED4
[43U];

736 
__OM
 
uöt32_t
 
LAR
;

737 
__IM
 
uöt32_t
 
LSR
;

738 
uöt32_t
 
RESERVED5
[6U];

739 
__IM
 
uöt32_t
 
PID4
;

740 
__IM
 
uöt32_t
 
PID5
;

741 
__IM
 
uöt32_t
 
PID6
;

742 
__IM
 
uöt32_t
 
PID7
;

743 
__IM
 
uöt32_t
 
PID0
;

744 
__IM
 
uöt32_t
 
PID1
;

745 
__IM
 
uöt32_t
 
PID2
;

746 
__IM
 
uöt32_t
 
PID3
;

747 
__IM
 
uöt32_t
 
CID0
;

748 
__IM
 
uöt32_t
 
CID1
;

749 
__IM
 
uöt32_t
 
CID2
;

750 
__IM
 
uöt32_t
 
CID3
;

751 } 
	tITM_Ty≥
;

754 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

755 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

758 
	#ITM_TCR_BUSY_Pos
 23U

	)

759 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

761 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

762 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

764 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

765 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

767 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

768 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

770 
	#ITM_TCR_SWOENA_Pos
 4U

	)

771 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

773 
	#ITM_TCR_DWTENA_Pos
 3U

	)

774 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

776 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

777 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

779 
	#ITM_TCR_TSENA_Pos
 1U

	)

780 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

782 
	#ITM_TCR_ITMENA_Pos
 0U

	)

783 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

786 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

787 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

790 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

791 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

794 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

795 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

798 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

799 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

801 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

802 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

804 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

805 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

822 
__IOM
 
uöt32_t
 
CTRL
;

823 
__IOM
 
uöt32_t
 
CYCCNT
;

824 
__IOM
 
uöt32_t
 
CPICNT
;

825 
__IOM
 
uöt32_t
 
EXCCNT
;

826 
__IOM
 
uöt32_t
 
SLEEPCNT
;

827 
__IOM
 
uöt32_t
 
LSUCNT
;

828 
__IOM
 
uöt32_t
 
FOLDCNT
;

829 
__IM
 
uöt32_t
 
PCSR
;

830 
__IOM
 
uöt32_t
 
COMP0
;

831 
__IOM
 
uöt32_t
 
MASK0
;

832 
__IOM
 
uöt32_t
 
FUNCTION0
;

833 
uöt32_t
 
RESERVED0
[1U];

834 
__IOM
 
uöt32_t
 
COMP1
;

835 
__IOM
 
uöt32_t
 
MASK1
;

836 
__IOM
 
uöt32_t
 
FUNCTION1
;

837 
uöt32_t
 
RESERVED1
[1U];

838 
__IOM
 
uöt32_t
 
COMP2
;

839 
__IOM
 
uöt32_t
 
MASK2
;

840 
__IOM
 
uöt32_t
 
FUNCTION2
;

841 
uöt32_t
 
RESERVED2
[1U];

842 
__IOM
 
uöt32_t
 
COMP3
;

843 
__IOM
 
uöt32_t
 
MASK3
;

844 
__IOM
 
uöt32_t
 
FUNCTION3
;

845 } 
	tDWT_Ty≥
;

848 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

849 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

851 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

852 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

854 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

855 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

857 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

858 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

860 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

861 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

863 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

864 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

866 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

867 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

869 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

870 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

872 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

873 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

875 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

876 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

878 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

879 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

881 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

882 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

884 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

885 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

887 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

888 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

890 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

891 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

893 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

894 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

896 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

897 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

899 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

900 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

903 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

904 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

907 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

908 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

911 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

912 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

915 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

916 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

919 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

920 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

923 
	#DWT_MASK_MASK_Pos
 0U

	)

924 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

927 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

928 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

930 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

931 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

933 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

934 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

936 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

937 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

939 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

940 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

942 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

943 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

945 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

946 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

948 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

949 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

951 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

952 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

969 
__IOM
 
uöt32_t
 
SSPSR
;

970 
__IOM
 
uöt32_t
 
CSPSR
;

971 
uöt32_t
 
RESERVED0
[2U];

972 
__IOM
 
uöt32_t
 
ACPR
;

973 
uöt32_t
 
RESERVED1
[55U];

974 
__IOM
 
uöt32_t
 
SPPR
;

975 
uöt32_t
 
RESERVED2
[131U];

976 
__IM
 
uöt32_t
 
FFSR
;

977 
__IOM
 
uöt32_t
 
FFCR
;

978 
__IM
 
uöt32_t
 
FSCR
;

979 
uöt32_t
 
RESERVED3
[759U];

980 
__IM
 
uöt32_t
 
TRIGGER
;

981 
__IM
 
uöt32_t
 
FIFO0
;

982 
__IM
 
uöt32_t
 
ITATBCTR2
;

983 
uöt32_t
 
RESERVED4
[1U];

984 
__IM
 
uöt32_t
 
ITATBCTR0
;

985 
__IM
 
uöt32_t
 
FIFO1
;

986 
__IOM
 
uöt32_t
 
ITCTRL
;

987 
uöt32_t
 
RESERVED5
[39U];

988 
__IOM
 
uöt32_t
 
CLAIMSET
;

989 
__IOM
 
uöt32_t
 
CLAIMCLR
;

990 
uöt32_t
 
RESERVED7
[8U];

991 
__IM
 
uöt32_t
 
DEVID
;

992 
__IM
 
uöt32_t
 
DEVTYPE
;

993 } 
	tTPI_Ty≥
;

996 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

997 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1000 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1001 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1004 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1005 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1007 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1008 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1010 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1011 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1013 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1014 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1017 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1018 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1020 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1021 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1024 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1025 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1028 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1029 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1031 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1032 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1034 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1035 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1037 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1038 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1040 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1041 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1043 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1044 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1046 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1047 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1050 
	#TPI_ITATBCTR2_ATREADY_Pos
 0U

	)

1051 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL )

	)

1054 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1055 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1057 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1058 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1060 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1061 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1063 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1064 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1066 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1067 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1069 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1070 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1072 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1073 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1076 
	#TPI_ITATBCTR0_ATREADY_Pos
 0U

	)

1077 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL )

	)

1080 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1081 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL )

	)

1084 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1085 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1087 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1088 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1090 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1091 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1093 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1094 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1096 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1097 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1099 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1100 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1103 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4U

	)

1104 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1106 
	#TPI_DEVTYPE_SubTy≥_Pos
 0U

	)

1107 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1112 #i‡(
__MPU_PRESENT
 == 1U)

1125 
__IM
 
uöt32_t
 
TYPE
;

1126 
__IOM
 
uöt32_t
 
CTRL
;

1127 
__IOM
 
uöt32_t
 
RNR
;

1128 
__IOM
 
uöt32_t
 
RBAR
;

1129 
__IOM
 
uöt32_t
 
RASR
;

1130 
__IOM
 
uöt32_t
 
RBAR_A1
;

1131 
__IOM
 
uöt32_t
 
RASR_A1
;

1132 
__IOM
 
uöt32_t
 
RBAR_A2
;

1133 
__IOM
 
uöt32_t
 
RASR_A2
;

1134 
__IOM
 
uöt32_t
 
RBAR_A3
;

1135 
__IOM
 
uöt32_t
 
RASR_A3
;

1136 } 
	tMPU_Ty≥
;

1139 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1140 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1142 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1143 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1145 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1146 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1149 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1150 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1152 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1153 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1155 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1156 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1159 
	#MPU_RNR_REGION_Pos
 0U

	)

1160 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1163 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1164 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1166 
	#MPU_RBAR_VALID_Pos
 4U

	)

1167 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1169 
	#MPU_RBAR_REGION_Pos
 0U

	)

1170 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1173 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1174 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1176 
	#MPU_RASR_XN_Pos
 28U

	)

1177 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1179 
	#MPU_RASR_AP_Pos
 24U

	)

1180 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1182 
	#MPU_RASR_TEX_Pos
 19U

	)

1183 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1185 
	#MPU_RASR_S_Pos
 18U

	)

1186 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1188 
	#MPU_RASR_C_Pos
 17U

	)

1189 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1191 
	#MPU_RASR_B_Pos
 16U

	)

1192 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1194 
	#MPU_RASR_SRD_Pos
 8U

	)

1195 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1197 
	#MPU_RASR_SIZE_Pos
 1U

	)

1198 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1200 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1201 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1219 
__IOM
 
uöt32_t
 
DHCSR
;

1220 
__OM
 
uöt32_t
 
DCRSR
;

1221 
__IOM
 
uöt32_t
 
DCRDR
;

1222 
__IOM
 
uöt32_t
 
DEMCR
;

1223 } 
	tC‹eDebug_Ty≥
;

1226 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1227 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1229 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1230 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1232 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1233 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1235 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1236 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1238 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1239 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1241 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1242 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1244 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1245 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1247 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1248 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1250 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1251 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1253 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1254 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1256 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1257 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1259 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1260 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1263 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1264 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1266 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1267 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1270 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1271 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1273 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1274 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1276 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1277 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1279 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1280 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1282 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1283 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1285 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1286 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1288 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1289 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1291 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1292 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1294 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1295 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1297 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1298 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1300 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1301 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1303 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1304 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1306 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1307 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1325 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1333 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1346 
	#SCS_BASE
 (0xE000E000ULË

	)

1347 
	#ITM_BASE
 (0xE0000000ULË

	)

1348 
	#DWT_BASE
 (0xE0001000ULË

	)

1349 
	#TPI_BASE
 (0xE0040000ULË

	)

1350 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1351 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1352 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1353 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1355 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1356 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1357 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1358 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1359 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1360 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1361 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1362 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1364 #i‡(
__MPU_PRESENT
 == 1U)

1365 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1366 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1404 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1406 
uöt32_t
 
ªg_vÆue
;

1407 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1409 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1410 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1411 
ªg_vÆue
 = (reg_value |

1412 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1413 (
Pri‹ôyGroupTmp
 << 8U) );

1414 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1423 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1425  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1434 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1436 
NVIC
->
ISER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1445 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1447 
NVIC
->
ICER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1458 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1460 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1469 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1471 
NVIC
->
ISPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1480 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1482 
NVIC
->
ICPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1493 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1495 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1506 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1508 i‡((
öt32_t
)(
IRQn
) < 0)

1510 
SCB
->
SHP
[(((
uöt32_t
)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1514 
NVIC
->
IP
[((
uöt32_t
)(
öt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1528 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1531 i‡((
öt32_t
)(
IRQn
) < 0)

1533 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1537 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)(
öt32_t
)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1553 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1555 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1556 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1557 
uöt32_t
 
SubPri‹ôyBôs
;

1559 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1560 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1563 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1564 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1580 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1582 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1583 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1584 
uöt32_t
 
SubPri‹ôyBôs
;

1586 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1587 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1589 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1590 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1598 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1600 
__DSB
();

1602 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1603 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1604 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1605 
__DSB
();

1609 
__NOP
();

1625 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

1638 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1640 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1645 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1646 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1647 
SysTick
->
VAL
 = 0UL;

1648 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1649 
SysTick_CTRL_TICKINT_Msk
 |

1650 
SysTick_CTRL_ENABLE_Msk
;

1668 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1669 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5U

	)

1680 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1682 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1683 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1685 
ITM
->
PORT
[0U].
u32
 == 0UL)

1687 
__NOP
();

1689 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1691  (
	gch
);

1701 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1703 
öt32_t
 
	gch
 = -1;

1705 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1707 
ch
 = 
ITM_RxBuf„r
;

1708 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1711  (
	gch
);

1721 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1724 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1739 #ifde‡
__˝lu•lus


	@Drivers/CMSIS/RTOS/Template/cmsis_os.h

54 #i‚de‡
_CMSIS_OS_H


55 
	#_CMSIS_OS_H


	)

58 
	#osCMSIS
 0x10002

59 

	)

61 
	#osCMSIS_KERNEL
 0x10000

62 

	)

64 
	#osKî√lSy°emId
 "KERNEL V1.00"

65 

	)

67 
	#osFótuª_MaöThªad
 1

68 
	#osFótuª_Poﬁ
 1

69 
	#osFótuª_MaûQ
 1

70 
	#osFótuª_MesßgeQ
 1

71 
	#osFótuª_Sig«ls
 8

72 
	#osFótuª_Sem≠h‹e
 30

73 
	#osFótuª_Waô
 1

74 
	#osFótuª_SysTick
 1

75 

	)

76 
	~<°döt.h
>

77 
	~<°ddef.h
>

79 #ifde‡ 
__˝lu•lus


90 
osPri‹ôyIdÀ
 = -3,

91 
osPri‹ôyLow
 = -2,

92 
osPri‹ôyBñowN‹mÆ
 = -1,

93 
osPri‹ôyN‹mÆ
 = 0,

94 
osPri‹ôyAboveN‹mÆ
 = +1,

95 
osPri‹ôyHigh
 = +2,

96 
osPri‹ôyRó…ime
 = +3,

97 
osPri‹ôyEº‹
 = 0x84

98 } 
	tosPri‹ôy
;

102 
	#osWaôF‹evî
 0xFFFFFFFF

103 

	)

107 
osOK
 = 0,

108 
osEvítSig«l
 = 0x08,

109 
osEvítMesßge
 = 0x10,

110 
osEvítMaû
 = 0x20,

111 
osEvítTimeout
 = 0x40,

112 
osEº‹P¨amëî
 = 0x80,

113 
osEº‹Resour˚
 = 0x81,

114 
osEº‹TimeoutResour˚
 = 0xC1,

115 
osEº‹ISR
 = 0x82,

116 
osEº‹ISRRecursive
 = 0x83,

117 
osEº‹Pri‹ôy
 = 0x84,

118 
osEº‹NoMem‹y
 = 0x85,

119 
osEº‹VÆue
 = 0x86,

120 
osEº‹OS
 = 0xFF,

121 
os_°©us_ª£rved
 = 0x7FFFFFFF

122 } 
	tosSètus
;

128 
osTimîOn˚
 = 0,

129 
osTimîPîiodic
 = 1

130 } 
	tos_timî_ty≥
;

134 (*
os_±hªad
Ë(c⁄° *
	t¨gumít
);

138 (*
os_±imî
Ë(c⁄° *
	t¨gumít
);

144 
os_thªad_cb
 *
	tosThªadId
;

148 
os_timî_cb
 *
	tosTimîId
;

152 
os_muãx_cb
 *
	tosMuãxId
;

156 
os_£m≠h‹e_cb
 *
	tosSem≠h‹eId
;

160 
os_poﬁ_cb
 *
	tosPoﬁId
;

164 
os_mesßgeQ_cb
 *
	tosMesßgeQId
;

168 
os_maûQ_cb
 *
	tosMaûQId
;

173 
	sos_thªad_def
 {

174 
os_±hªad
 
±hªad
;

175 
osPri‹ôy
 
çri‹ôy
;

176 
uöt32_t
 
ö°™˚s
;

177 
uöt32_t
 
°acksize
;

178 } 
	tosThªadDef_t
;

182 
	sos_timî_def
 {

183 
os_±imî
 
±imî
;

184 } 
	tosTimîDef_t
;

188 
	sos_muãx_def
 {

189 
uöt32_t
 
dummy
;

190 } 
	tosMuãxDef_t
;

194 
	sos_£m≠h‹e_def
 {

195 
uöt32_t
 
dummy
;

196 } 
	tosSem≠h‹eDef_t
;

200 
	sos_poﬁ_def
 {

201 
uöt32_t
 
poﬁ_sz
;

202 
uöt32_t
 
ôem_sz
;

203 *
poﬁ
;

204 } 
	tosPoﬁDef_t
;

208 
	sos_mesßgeQ_def
 {

209 
uöt32_t
 
queue_sz
;

210 
uöt32_t
 
ôem_sz
;

211 *
poﬁ
;

212 } 
	tosMesßgeQDef_t
;

216 
	sos_maûQ_def
 {

217 
uöt32_t
 
queue_sz
;

218 
uöt32_t
 
ôem_sz
;

219 *
poﬁ
;

220 } 
	tosMaûQDef_t
;

226 
osSètus
 
°©us
;

228 
uöt32_t
 
v
;

229 *
p
;

230 
öt32_t
 
sig«ls
;

231 } 
vÆue
;

233 
osMaûQId
 
maû_id
;

234 
osMesßgeQId
 
mesßge_id
;

235 } 
def
;

236 } 
	tosEvít
;

244 
osSètus
 
osKî√lInôülize
 ();

249 
osSètus
 
osKî√lSèπ
 ();

254 
öt32_t
 
osKî√lRu¬ög
();

256 #i‡(
deföed
 (
osFótuª_SysTick
) && (osFeature_SysTick != 0))

261 
uöt32_t
 
osKî√lSysTick
 ();

265 
	#osKî√lSysTickFªquícy
 100000000

	)

270 
	#osKî√lSysTickMi¸oSec
(
mi¸o£c
Ë(((
uöt64_t
)mi¸o£¯* (
osKî√lSysTickFªquícy
)Ë/ 1000000)

	)

283 #i‡
deföed
 (
osObje˘sExã∫Æ
)

284 
	#osThªadDef
(
«me
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
Ë\

	)

285 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me


287 
	#osThªadDef
(
«me
, 
¥i‹ôy
, 
ö°™˚s
, 
°acksz
Ë\

	)

288 c⁄° 
osThªadDef_t
 
os_thªad_def_
##
«me
 = \

289 { (
«me
), (
¥i‹ôy
), (
ö°™˚s
), (
°acksz
) }

296 
	#osThªad
(
«me
Ë\

	)

297 &
os_thªad_def_
##
«me


304 
osThªadId
 
osThªadCª©e
 (c⁄° 
osThªadDef_t
 *
thªad_def
, *
¨gumít
);

309 
osThªadId
 
osThªadGëId
 ();

315 
osSètus
 
osThªadTîmö©e
 (
osThªadId
 
thªad_id
);

320 
osSètus
 
osThªadYõld
 ();

327 
osSètus
 
osThªadSëPri‹ôy
 (
osThªadId
 
thªad_id
, 
osPri‹ôy
 
¥i‹ôy
);

333 
osPri‹ôy
 
osThªadGëPri‹ôy
 (
osThªadId
 
thªad_id
);

341 
osSètus
 
osDñay
 (
uöt32_t
 
mûli£c
);

343 #i‡(
deföed
 (
osFótuª_Waô
) && (osFeature_Wait != 0))

349 
osEvít
 
osWaô
 (
uöt32_t
 
mûli£c
);

360 #i‡
deföed
 (
osObje˘sExã∫Æ
)

361 
	#osTimîDef
(
«me
, 
fun˘i⁄
Ë\

	)

362 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me


364 
	#osTimîDef
(
«me
, 
fun˘i⁄
Ë\

	)

365 c⁄° 
osTimîDef_t
 
os_timî_def_
##
«me
 = \

366 { (
fun˘i⁄
) }

373 
	#osTimî
(
«me
Ë\

	)

374 &
os_timî_def_
##
«me


382 
osTimîId
 
osTimîCª©e
 (c⁄° 
osTimîDef_t
 *
timî_def
, 
os_timî_ty≥
 
ty≥
, *
¨gumít
);

389 
osSètus
 
osTimîSèπ
 (
osTimîId
 
timî_id
, 
uöt32_t
 
mûli£c
);

395 
osSètus
 
osTimîSt›
 (
osTimîId
 
timî_id
);

401 
osSètus
 
osTimîDñëe
 (
osTimîId
 
timî_id
);

411 
öt32_t
 
osSig«lSë
 (
osThªadId
 
thªad_id
, i¡32_à
sig«ls
);

418 
öt32_t
 
osSig«lCÀ¨
 (
osThªadId
 
thªad_id
, i¡32_à
sig«ls
);

425 
osEvít
 
osSig«lWaô
 (
öt32_t
 
sig«ls
, 
uöt32_t
 
mûli£c
);

434 #i‡
deföed
 (
osObje˘sExã∫Æ
)

435 
	#osMuãxDef
(
«me
Ë\

	)

436 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me


438 
	#osMuãxDef
(
«me
Ë\

	)

439 c⁄° 
osMuãxDef_t
 
os_muãx_def_
##
«me
 = { 0 }

446 
	#osMuãx
(
«me
Ë\

	)

447 &
os_muãx_def_
##
«me


453 
osMuãxId
 
osMuãxCª©e
 (c⁄° 
osMuãxDef_t
 *
muãx_def
);

460 
osSètus
 
osMuãxWaô
 (
osMuãxId
 
muãx_id
, 
uöt32_t
 
mûli£c
);

466 
osSètus
 
osMuãxRñó£
 (
osMuãxId
 
muãx_id
);

472 
osSètus
 
osMuãxDñëe
 (
osMuãxId
 
muãx_id
);

477 #i‡(
deföed
 (
osFótuª_Sem≠h‹e
) && (osFeature_Semaphore != 0))

483 #i‡
deföed
 (
osObje˘sExã∫Æ
)

484 
	#osSem≠h‹eDef
(
«me
Ë\

	)

485 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me


487 
	#osSem≠h‹eDef
(
«me
Ë\

	)

488 c⁄° 
osSem≠h‹eDef_t
 
os_£m≠h‹e_def_
##
«me
 = { 0 }

495 
	#osSem≠h‹e
(
«me
Ë\

	)

496 &
os_£m≠h‹e_def_
##
«me


503 
osSem≠h‹eId
 
osSem≠h‹eCª©e
 (c⁄° 
osSem≠h‹eDef_t
 *
£m≠h‹e_def
, 
öt32_t
 
cou¡
);

510 
öt32_t
 
osSem≠h‹eWaô
 (
osSem≠h‹eId
 
£m≠h‹e_id
, 
uöt32_t
 
mûli£c
);

516 
osSètus
 
osSem≠h‹eRñó£
 (
osSem≠h‹eId
 
£m≠h‹e_id
);

522 
osSètus
 
osSem≠h‹eDñëe
 (
osSem≠h‹eId
 
£m≠h‹e_id
);

529 #i‡(
deföed
 (
osFótuª_Poﬁ
) && (osFeature_Pool != 0))

537 #i‡
deföed
 (
osObje˘sExã∫Æ
)

538 
	#osPoﬁDef
(
«me
, 
no
, 
ty≥
Ë\

	)

539 c⁄° 
osPoﬁDef_t
 
os_poﬁ_def_
##
«me


541 
	#osPoﬁDef
(
«me
, 
no
, 
ty≥
Ë\

	)

542 c⁄° 
osPoﬁDef_t
 
os_poﬁ_def_
##
«me
 = \

543 { (
no
), (
ty≥
), 
NULL
 }

550 
	#osPoﬁ
(
«me
Ë\

	)

551 &
os_poﬁ_def_
##
«me


557 
osPoﬁId
 
osPoﬁCª©e
 (c⁄° 
osPoﬁDef_t
 *
poﬁ_def
);

563 *
osPoﬁAŒoc
 (
osPoﬁId
 
poﬁ_id
);

569 *
osPoﬁCAŒoc
 (
osPoﬁId
 
poﬁ_id
);

576 
osSètus
 
osPoﬁFªe
 (
osPoﬁId
 
poﬁ_id
, *
block
);

583 #i‡(
deföed
 (
osFótuª_MesßgeQ
) && (osFeature_MessageQ != 0))

591 #i‡
deföed
 (
osObje˘sExã∫Æ
)

592 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

593 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me


595 
	#osMesßgeQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

596 c⁄° 
osMesßgeQDef_t
 
os_mesßgeQ_def_
##
«me
 = \

597 { (
queue_sz
),  (
ty≥
) }

604 
	#osMesßgeQ
(
«me
Ë\

	)

605 &
os_mesßgeQ_def_
##
«me


612 
osMesßgeQId
 
osMesßgeCª©e
 (c⁄° 
osMesßgeQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
);

620 
osSètus
 
osMesßgePut
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
öfo
, uöt32_à
mûli£c
);

627 
osEvít
 
osMesßgeGë
 (
osMesßgeQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

634 #i‡(
deföed
 (
osFótuª_MaûQ
) && (osFeature_MailQ != 0))

642 #i‡
deföed
 (
osObje˘sExã∫Æ
)

643 
	#osMaûQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

644 c⁄° 
osMaûQDef_t
 
os_maûQ_def_
##
«me


646 
	#osMaûQDef
(
«me
, 
queue_sz
, 
ty≥
Ë\

	)

647 c⁄° 
osMaûQDef_t
 
os_maûQ_def_
##
«me
 = \

648 { (
queue_sz
),  (
ty≥
) }

655 
	#osMaûQ
(
«me
Ë\

	)

656 &
os_maûQ_def_
##
«me


663 
osMaûQId
 
osMaûCª©e
 (c⁄° 
osMaûQDef_t
 *
queue_def
, 
osThªadId
 
thªad_id
);

670 *
osMaûAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

677 *
osMaûCAŒoc
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

684 
osSètus
 
osMaûPut
 (
osMaûQId
 
queue_id
, *
maû
);

691 
osEvít
 
osMaûGë
 (
osMaûQId
 
queue_id
, 
uöt32_t
 
mûli£c
);

698 
osSètus
 
osMaûFªe
 (
osMaûQId
 
queue_id
, *
maû
);

703 #ifde‡ 
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h

38 #i‚de‡
__STM32_HAL_LEGACY


39 
	#__STM32_HAL_LEGACY


	)

41 #ifde‡
__˝lu•lus


52 
	#AES_FLAG_RDERR
 
CRYP_FLAG_RDERR


	)

53 
	#AES_FLAG_WRERR
 
CRYP_FLAG_WRERR


	)

54 
	#AES_CLEARFLAG_CCF
 
CRYP_CLEARFLAG_CCF


	)

55 
	#AES_CLEARFLAG_RDERR
 
CRYP_CLEARFLAG_RDERR


	)

56 
	#AES_CLEARFLAG_WRERR
 
CRYP_CLEARFLAG_WRERR


	)

65 
	#ADC_RESOLUTION12b
 
ADC_RESOLUTION_12B


	)

66 
	#ADC_RESOLUTION10b
 
ADC_RESOLUTION_10B


	)

67 
	#ADC_RESOLUTION8b
 
ADC_RESOLUTION_8B


	)

68 
	#ADC_RESOLUTION6b
 
ADC_RESOLUTION_6B


	)

69 
	#OVR_DATA_OVERWRITTEN
 
ADC_OVR_DATA_OVERWRITTEN


	)

70 
	#OVR_DATA_PRESERVED
 
ADC_OVR_DATA_PRESERVED


	)

71 
	#EOC_SINGLE_CONV
 
ADC_EOC_SINGLE_CONV


	)

72 
	#EOC_SEQ_CONV
 
ADC_EOC_SEQ_CONV


	)

73 
	#EOC_SINGLE_SEQ_CONV
 
ADC_EOC_SINGLE_SEQ_CONV


	)

74 
	#REGULAR_GROUP
 
ADC_REGULAR_GROUP


	)

75 
	#INJECTED_GROUP
 
ADC_INJECTED_GROUP


	)

76 
	#REGULAR_INJECTED_GROUP
 
ADC_REGULAR_INJECTED_GROUP


	)

77 
	#AWD_EVENT
 
ADC_AWD_EVENT


	)

78 
	#AWD1_EVENT
 
ADC_AWD1_EVENT


	)

79 
	#AWD2_EVENT
 
ADC_AWD2_EVENT


	)

80 
	#AWD3_EVENT
 
ADC_AWD3_EVENT


	)

81 
	#OVR_EVENT
 
ADC_OVR_EVENT


	)

82 
	#JQOVF_EVENT
 
ADC_JQOVF_EVENT


	)

83 
	#ALL_CHANNELS
 
ADC_ALL_CHANNELS


	)

84 
	#REGULAR_CHANNELS
 
ADC_REGULAR_CHANNELS


	)

85 
	#INJECTED_CHANNELS
 
ADC_INJECTED_CHANNELS


	)

86 
	#SYSCFG_FLAG_SENSOR_ADC
 
ADC_FLAG_SENSOR


	)

87 
	#SYSCFG_FLAG_VREF_ADC
 
ADC_FLAG_VREFINT


	)

88 
	#ADC_CLOCKPRESCALER_PCLK_DIV1
 
ADC_CLOCK_SYNC_PCLK_DIV1


	)

89 
	#ADC_CLOCKPRESCALER_PCLK_DIV2
 
ADC_CLOCK_SYNC_PCLK_DIV2


	)

90 
	#ADC_CLOCKPRESCALER_PCLK_DIV4
 
ADC_CLOCK_SYNC_PCLK_DIV4


	)

91 
	#ADC_CLOCKPRESCALER_PCLK_DIV6
 
ADC_CLOCK_SYNC_PCLK_DIV6


	)

92 
	#ADC_CLOCKPRESCALER_PCLK_DIV8
 
ADC_CLOCK_SYNC_PCLK_DIV8


	)

93 
	#ADC_EXTERNALTRIG0_T6_TRGO
 
ADC_EXTERNALTRIGCONV_T6_TRGO


	)

94 
	#ADC_EXTERNALTRIG1_T21_CC2
 
ADC_EXTERNALTRIGCONV_T21_CC2


	)

95 
	#ADC_EXTERNALTRIG2_T2_TRGO
 
ADC_EXTERNALTRIGCONV_T2_TRGO


	)

96 
	#ADC_EXTERNALTRIG3_T2_CC4
 
ADC_EXTERNALTRIGCONV_T2_CC4


	)

97 
	#ADC_EXTERNALTRIG4_T22_TRGO
 
ADC_EXTERNALTRIGCONV_T22_TRGO


	)

98 
	#ADC_EXTERNALTRIG7_EXT_IT11
 
ADC_EXTERNALTRIGCONV_EXT_IT11


	)

99 
	#ADC_CLOCK_ASYNC
 
ADC_CLOCK_ASYNC_DIV1


	)

100 
	#ADC_EXTERNALTRIG_EDGE_NONE
 
ADC_EXTERNALTRIGCONVEDGE_NONE


	)

101 
	#ADC_EXTERNALTRIG_EDGE_RISING
 
ADC_EXTERNALTRIGCONVEDGE_RISING


	)

102 
	#ADC_EXTERNALTRIG_EDGE_FALLING
 
ADC_EXTERNALTRIGCONVEDGE_FALLING


	)

103 
	#ADC_EXTERNALTRIG_EDGE_RISINGFALLING
 
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING


	)

104 
	#ADC_SAMPLETIME_2CYCLE_5
 
ADC_SAMPLETIME_2CYCLES_5


	)

106 
	#HAL_ADC_STATE_BUSY_REG
 
HAL_ADC_STATE_REG_BUSY


	)

107 
	#HAL_ADC_STATE_BUSY_INJ
 
HAL_ADC_STATE_INJ_BUSY


	)

108 
	#HAL_ADC_STATE_EOC_REG
 
HAL_ADC_STATE_REG_EOC


	)

109 
	#HAL_ADC_STATE_EOC_INJ
 
HAL_ADC_STATE_INJ_EOC


	)

110 
	#HAL_ADC_STATE_ERROR
 
HAL_ADC_STATE_ERROR_INTERNAL


	)

111 
	#HAL_ADC_STATE_BUSY
 
HAL_ADC_STATE_BUSY_INTERNAL


	)

112 
	#HAL_ADC_STATE_AWD
 
HAL_ADC_STATE_AWD1


	)

121 
	#__HAL_CEC_GET_IT
 
__HAL_CEC_GET_FLAG


	)

130 
	#COMP_WINDOWMODE_DISABLED
 
COMP_WINDOWMODE_DISABLE


	)

131 
	#COMP_WINDOWMODE_ENABLED
 
COMP_WINDOWMODE_ENABLE


	)

132 
	#COMP_EXTI_LINE_COMP1_EVENT
 
COMP_EXTI_LINE_COMP1


	)

133 
	#COMP_EXTI_LINE_COMP2_EVENT
 
COMP_EXTI_LINE_COMP2


	)

134 
	#COMP_EXTI_LINE_COMP3_EVENT
 
COMP_EXTI_LINE_COMP3


	)

135 
	#COMP_EXTI_LINE_COMP4_EVENT
 
COMP_EXTI_LINE_COMP4


	)

136 
	#COMP_EXTI_LINE_COMP5_EVENT
 
COMP_EXTI_LINE_COMP5


	)

137 
	#COMP_EXTI_LINE_COMP6_EVENT
 
COMP_EXTI_LINE_COMP6


	)

138 
	#COMP_EXTI_LINE_COMP7_EVENT
 
COMP_EXTI_LINE_COMP7


	)

139 #i‡
deföed
(
STM32L0
)

140 
	#COMP_LPTIMCONNECTION_ENABLED
 ((
uöt32_t
)0x00000003UË

	)

142 
	#COMP_OUTPUT_COMP6TIM2OCREFCLR
 
COMP_OUTPUT_COMP6_TIM2OCREFCLR


	)

143 #i‡
deföed
(
STM32F373xC
Ë|| deföed(
STM32F378xx
)

144 
	#COMP_OUTPUT_TIM3IC1
 
COMP_OUTPUT_COMP1_TIM3IC1


	)

145 
	#COMP_OUTPUT_TIM3OCREFCLR
 
COMP_OUTPUT_COMP1_TIM3OCREFCLR


	)

148 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

149 
	#COMP_WINDOWMODE_ENABLE
 
COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON


	)

151 
	#COMP_NONINVERTINGINPUT_IO1
 
COMP_INPUT_PLUS_IO1


	)

152 
	#COMP_NONINVERTINGINPUT_IO2
 
COMP_INPUT_PLUS_IO2


	)

153 
	#COMP_NONINVERTINGINPUT_IO3
 
COMP_INPUT_PLUS_IO3


	)

154 
	#COMP_NONINVERTINGINPUT_IO4
 
COMP_INPUT_PLUS_IO4


	)

155 
	#COMP_NONINVERTINGINPUT_IO5
 
COMP_INPUT_PLUS_IO5


	)

156 
	#COMP_NONINVERTINGINPUT_IO6
 
COMP_INPUT_PLUS_IO6


	)

158 
	#COMP_INVERTINGINPUT_1_4VREFINT
 
COMP_INPUT_MINUS_1_4VREFINT


	)

159 
	#COMP_INVERTINGINPUT_1_2VREFINT
 
COMP_INPUT_MINUS_1_2VREFINT


	)

160 
	#COMP_INVERTINGINPUT_3_4VREFINT
 
COMP_INPUT_MINUS_3_4VREFINT


	)

161 
	#COMP_INVERTINGINPUT_VREFINT
 
COMP_INPUT_MINUS_VREFINT


	)

162 
	#COMP_INVERTINGINPUT_DAC1_CH1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

163 
	#COMP_INVERTINGINPUT_DAC1_CH2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

164 
	#COMP_INVERTINGINPUT_DAC1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

165 
	#COMP_INVERTINGINPUT_DAC2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

166 
	#COMP_INVERTINGINPUT_IO1
 
COMP_INPUT_MINUS_IO1


	)

167 #i‡
deföed
(
STM32L0
)

171 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

172 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO2


	)

174 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_IO2


	)

175 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO3


	)

177 
	#COMP_INVERTINGINPUT_IO4
 
COMP_INPUT_MINUS_IO4


	)

178 
	#COMP_INVERTINGINPUT_IO5
 
COMP_INPUT_MINUS_IO5


	)

180 
	#COMP_OUTPUTLEVEL_LOW
 
COMP_OUTPUT_LEVEL_LOW


	)

181 
	#COMP_OUTPUTLEVEL_HIGH
 
COMP_OUTPUT_LEVEL_HIGH


	)

185 #i‡
deföed
(
COMP_CSR_LOCK
)

186 
	#COMP_FLAG_LOCK
 
COMP_CSR_LOCK


	)

187 #ñi‡
deföed
(
COMP_CSR_COMP1LOCK
)

188 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMP1LOCK


	)

189 #ñi‡
deföed
(
COMP_CSR_COMPxLOCK
)

190 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMPxLOCK


	)

193 #i‡
deföed
(
STM32L4
)

194 
	#COMP_BLANKINGSRCE_TIM1OC5
 
COMP_BLANKINGSRC_TIM1_OC5_COMP1


	)

195 
	#COMP_BLANKINGSRCE_TIM2OC3
 
COMP_BLANKINGSRC_TIM2_OC3_COMP1


	)

196 
	#COMP_BLANKINGSRCE_TIM3OC3
 
COMP_BLANKINGSRC_TIM3_OC3_COMP1


	)

197 
	#COMP_BLANKINGSRCE_TIM3OC4
 
COMP_BLANKINGSRC_TIM3_OC4_COMP2


	)

198 
	#COMP_BLANKINGSRCE_TIM8OC5
 
COMP_BLANKINGSRC_TIM8_OC5_COMP2


	)

199 
	#COMP_BLANKINGSRCE_TIM15OC1
 
COMP_BLANKINGSRC_TIM15_OC1_COMP2


	)

200 
	#COMP_BLANKINGSRCE_NONE
 
COMP_BLANKINGSRC_NONE


	)

203 #i‡
deföed
(
STM32L0
)

204 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

205 
	#COMP_MODE_LOWSPEED
 
COMP_POWERMODE_ULTRALOWPOWER


	)

207 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_HIGHSPEED


	)

208 
	#COMP_MODE_MEDIUMSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

209 
	#COMP_MODE_LOWPOWER
 
COMP_POWERMODE_LOWPOWER


	)

210 
	#COMP_MODE_ULTRALOWPOWER
 
COMP_POWERMODE_ULTRALOWPOWER


	)

221 
	#__HAL_CORTEX_SYSTICKCLK_CONFIG
 
HAL_SYSTICK_CLKSour˚C⁄fig


	)

230 
	#CRC_OUTPUTDATA_INVERSION_DISABLED
 
CRC_OUTPUTDATA_INVERSION_DISABLE


	)

231 
	#CRC_OUTPUTDATA_INVERSION_ENABLED
 
CRC_OUTPUTDATA_INVERSION_ENABLE


	)

241 
	#DAC1_CHANNEL_1
 
DAC_CHANNEL_1


	)

242 
	#DAC1_CHANNEL_2
 
DAC_CHANNEL_2


	)

243 
	#DAC2_CHANNEL_1
 
DAC_CHANNEL_1


	)

244 
	#DAC_WAVE_NONE
 ((
uöt32_t
)0x00000000U)

	)

245 
	#DAC_WAVE_NOISE
 ((
uöt32_t
)
DAC_CR_WAVE1_0
)

	)

246 
	#DAC_WAVE_TRIANGLE
 ((
uöt32_t
)
DAC_CR_WAVE1_1
)

	)

247 
	#DAC_WAVEGENERATION_NONE
 
DAC_WAVE_NONE


	)

248 
	#DAC_WAVEGENERATION_NOISE
 
DAC_WAVE_NOISE


	)

249 
	#DAC_WAVEGENERATION_TRIANGLE
 
DAC_WAVE_TRIANGLE


	)

258 
	#HAL_REMAPDMA_ADC_DMA_CH2
 
DMA_REMAP_ADC_DMA_CH2


	)

259 
	#HAL_REMAPDMA_USART1_TX_DMA_CH4
 
DMA_REMAP_USART1_TX_DMA_CH4


	)

260 
	#HAL_REMAPDMA_USART1_RX_DMA_CH5
 
DMA_REMAP_USART1_RX_DMA_CH5


	)

261 
	#HAL_REMAPDMA_TIM16_DMA_CH4
 
DMA_REMAP_TIM16_DMA_CH4


	)

262 
	#HAL_REMAPDMA_TIM17_DMA_CH2
 
DMA_REMAP_TIM17_DMA_CH2


	)

263 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

264 
	#HAL_REMAPDMA_TIM16_DMA_CH6
 
DMA_REMAP_TIM16_DMA_CH6


	)

265 
	#HAL_REMAPDMA_TIM17_DMA_CH7
 
DMA_REMAP_TIM17_DMA_CH7


	)

266 
	#HAL_REMAPDMA_SPI2_DMA_CH67
 
DMA_REMAP_SPI2_DMA_CH67


	)

267 
	#HAL_REMAPDMA_USART2_DMA_CH67
 
DMA_REMAP_USART2_DMA_CH67


	)

268 
	#HAL_REMAPDMA_I2C1_DMA_CH76
 
DMA_REMAP_I2C1_DMA_CH76


	)

269 
	#HAL_REMAPDMA_TIM1_DMA_CH6
 
DMA_REMAP_TIM1_DMA_CH6


	)

270 
	#HAL_REMAPDMA_TIM2_DMA_CH7
 
DMA_REMAP_TIM2_DMA_CH7


	)

271 
	#HAL_REMAPDMA_TIM3_DMA_CH6
 
DMA_REMAP_TIM3_DMA_CH6


	)

273 
	#IS_HAL_REMAPDMA
 
IS_DMA_REMAP


	)

274 
	#__HAL_REMAPDMA_CHANNEL_ENABLE
 
__HAL_DMA_REMAP_CHANNEL_ENABLE


	)

275 
	#__HAL_REMAPDMA_CHANNEL_DISABLE
 
__HAL_DMA_REMAP_CHANNEL_DISABLE


	)

287 
	#TYPEPROGRAM_BYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

288 
	#TYPEPROGRAM_HALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

289 
	#TYPEPROGRAM_WORD
 
FLASH_TYPEPROGRAM_WORD


	)

290 
	#TYPEPROGRAM_DOUBLEWORD
 
FLASH_TYPEPROGRAM_DOUBLEWORD


	)

291 
	#TYPEERASE_SECTORS
 
FLASH_TYPEERASE_SECTORS


	)

292 
	#TYPEERASE_PAGES
 
FLASH_TYPEERASE_PAGES


	)

293 
	#TYPEERASE_PAGEERASE
 
FLASH_TYPEERASE_PAGES


	)

294 
	#TYPEERASE_MASSERASE
 
FLASH_TYPEERASE_MASSERASE


	)

295 
	#WRPSTATE_DISABLE
 
OB_WRPSTATE_DISABLE


	)

296 
	#WRPSTATE_ENABLE
 
OB_WRPSTATE_ENABLE


	)

297 
	#HAL_FLASH_TIMEOUT_VALUE
 
FLASH_TIMEOUT_VALUE


	)

298 
	#OBEX_PCROP
 
OPTIONBYTE_PCROP


	)

299 
	#OBEX_BOOTCONFIG
 
OPTIONBYTE_BOOTCONFIG


	)

300 
	#PCROPSTATE_DISABLE
 
OB_PCROP_STATE_DISABLE


	)

301 
	#PCROPSTATE_ENABLE
 
OB_PCROP_STATE_ENABLE


	)

302 
	#TYPEERASEDATA_BYTE
 
FLASH_TYPEERASEDATA_BYTE


	)

303 
	#TYPEERASEDATA_HALFWORD
 
FLASH_TYPEERASEDATA_HALFWORD


	)

304 
	#TYPEERASEDATA_WORD
 
FLASH_TYPEERASEDATA_WORD


	)

305 
	#TYPEPROGRAMDATA_BYTE
 
FLASH_TYPEPROGRAMDATA_BYTE


	)

306 
	#TYPEPROGRAMDATA_HALFWORD
 
FLASH_TYPEPROGRAMDATA_HALFWORD


	)

307 
	#TYPEPROGRAMDATA_WORD
 
FLASH_TYPEPROGRAMDATA_WORD


	)

308 
	#TYPEPROGRAMDATA_FASTBYTE
 
FLASH_TYPEPROGRAMDATA_FASTBYTE


	)

309 
	#TYPEPROGRAMDATA_FASTHALFWORD
 
FLASH_TYPEPROGRAMDATA_FASTHALFWORD


	)

310 
	#TYPEPROGRAMDATA_FASTWORD
 
FLASH_TYPEPROGRAMDATA_FASTWORD


	)

311 
	#PAGESIZE
 
FLASH_PAGE_SIZE


	)

312 
	#TYPEPROGRAM_FASTBYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

313 
	#TYPEPROGRAM_FASTHALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

314 
	#TYPEPROGRAM_FASTWORD
 
FLASH_TYPEPROGRAM_WORD


	)

315 
	#VOLTAGE_RANGE_1
 
FLASH_VOLTAGE_RANGE_1


	)

316 
	#VOLTAGE_RANGE_2
 
FLASH_VOLTAGE_RANGE_2


	)

317 
	#VOLTAGE_RANGE_3
 
FLASH_VOLTAGE_RANGE_3


	)

318 
	#VOLTAGE_RANGE_4
 
FLASH_VOLTAGE_RANGE_4


	)

319 
	#TYPEPROGRAM_FAST
 
FLASH_TYPEPROGRAM_FAST


	)

320 
	#TYPEPROGRAM_FAST_AND_LAST
 
FLASH_TYPEPROGRAM_FAST_AND_LAST


	)

321 
	#WRPAREA_BANK1_AREAA
 
OB_WRPAREA_BANK1_AREAA


	)

322 
	#WRPAREA_BANK1_AREAB
 
OB_WRPAREA_BANK1_AREAB


	)

323 
	#WRPAREA_BANK2_AREAA
 
OB_WRPAREA_BANK2_AREAA


	)

324 
	#WRPAREA_BANK2_AREAB
 
OB_WRPAREA_BANK2_AREAB


	)

325 
	#IWDG_STDBY_FREEZE
 
OB_IWDG_STDBY_FREEZE


	)

326 
	#IWDG_STDBY_ACTIVE
 
OB_IWDG_STDBY_RUN


	)

327 
	#IWDG_STOP_FREEZE
 
OB_IWDG_STOP_FREEZE


	)

328 
	#IWDG_STOP_ACTIVE
 
OB_IWDG_STOP_RUN


	)

329 
	#FLASH_ERROR_NONE
 
HAL_FLASH_ERROR_NONE


	)

330 
	#FLASH_ERROR_RD
 
HAL_FLASH_ERROR_RD


	)

331 
	#FLASH_ERROR_PG
 
HAL_FLASH_ERROR_PROG


	)

332 
	#FLASH_ERROR_PGP
 
HAL_FLASH_ERROR_PGS


	)

333 
	#FLASH_ERROR_WRP
 
HAL_FLASH_ERROR_WRP


	)

334 
	#FLASH_ERROR_OPTV
 
HAL_FLASH_ERROR_OPTV


	)

335 
	#FLASH_ERROR_OPTVUSR
 
HAL_FLASH_ERROR_OPTVUSR


	)

336 
	#FLASH_ERROR_PROG
 
HAL_FLASH_ERROR_PROG


	)

337 
	#FLASH_ERROR_OP
 
HAL_FLASH_ERROR_OPERATION


	)

338 
	#FLASH_ERROR_PGA
 
HAL_FLASH_ERROR_PGA


	)

339 
	#FLASH_ERROR_SIZE
 
HAL_FLASH_ERROR_SIZE


	)

340 
	#FLASH_ERROR_SIZ
 
HAL_FLASH_ERROR_SIZE


	)

341 
	#FLASH_ERROR_PGS
 
HAL_FLASH_ERROR_PGS


	)

342 
	#FLASH_ERROR_MIS
 
HAL_FLASH_ERROR_MIS


	)

343 
	#FLASH_ERROR_FAST
 
HAL_FLASH_ERROR_FAST


	)

344 
	#FLASH_ERROR_FWWERR
 
HAL_FLASH_ERROR_FWWERR


	)

345 
	#FLASH_ERROR_NOTZERO
 
HAL_FLASH_ERROR_NOTZERO


	)

346 
	#FLASH_ERROR_OPERATION
 
HAL_FLASH_ERROR_OPERATION


	)

347 
	#FLASH_ERROR_ERS
 
HAL_FLASH_ERROR_ERS


	)

348 
	#OB_WDG_SW
 
OB_IWDG_SW


	)

349 
	#OB_WDG_HW
 
OB_IWDG_HW


	)

350 
	#OB_SDADC12_VDD_MONITOR_SET
 
OB_SDACD_VDD_MONITOR_SET


	)

351 
	#OB_SDADC12_VDD_MONITOR_RESET
 
OB_SDACD_VDD_MONITOR_RESET


	)

352 
	#OB_RAM_PARITY_CHECK_SET
 
OB_SRAM_PARITY_SET


	)

353 
	#OB_RAM_PARITY_CHECK_RESET
 
OB_SRAM_PARITY_RESET


	)

354 
	#IS_OB_SDADC12_VDD_MONITOR
 
IS_OB_SDACD_VDD_MONITOR


	)

355 
	#OB_RDP_LEVEL0
 
OB_RDP_LEVEL_0


	)

356 
	#OB_RDP_LEVEL1
 
OB_RDP_LEVEL_1


	)

357 
	#OB_RDP_LEVEL2
 
OB_RDP_LEVEL_2


	)

367 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA9
 
I2C_FASTMODEPLUS_PA9


	)

368 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA10
 
I2C_FASTMODEPLUS_PA10


	)

369 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB6
 
I2C_FASTMODEPLUS_PB6


	)

370 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB7
 
I2C_FASTMODEPLUS_PB7


	)

371 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB8
 
I2C_FASTMODEPLUS_PB8


	)

372 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB9
 
I2C_FASTMODEPLUS_PB9


	)

373 
	#HAL_SYSCFG_FASTMODEPLUS_I2C1
 
I2C_FASTMODEPLUS_I2C1


	)

374 
	#HAL_SYSCFG_FASTMODEPLUS_I2C2
 
I2C_FASTMODEPLUS_I2C2


	)

375 
	#HAL_SYSCFG_FASTMODEPLUS_I2C3
 
I2C_FASTMODEPLUS_I2C3


	)

384 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
)

385 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 
FMC_NAND_WAIT_FEATURE_DISABLE


	)

386 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 
FMC_NAND_WAIT_FEATURE_ENABLE


	)

387 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 
FMC_NAND_MEM_BUS_WIDTH_8


	)

388 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 
FMC_NAND_MEM_BUS_WIDTH_16


	)

390 
	#FMC_NAND_WAIT_FEATURE_DISABLE
 
FMC_NAND_PCC_WAIT_FEATURE_DISABLE


	)

391 
	#FMC_NAND_WAIT_FEATURE_ENABLE
 
FMC_NAND_PCC_WAIT_FEATURE_ENABLE


	)

392 
	#FMC_NAND_MEM_BUS_WIDTH_8
 
FMC_NAND_PCC_MEM_BUS_WIDTH_8


	)

393 
	#FMC_NAND_MEM_BUS_WIDTH_16
 
FMC_NAND_PCC_MEM_BUS_WIDTH_16


	)

403 
	#FSMC_NORSRAM_TYPEDEF
 
FSMC_NORSRAM_Ty≥Def


	)

404 
	#FSMC_NORSRAM_EXTENDED_TYPEDEF
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

412 
	#GET_GPIO_SOURCE
 
GPIO_GET_INDEX


	)

413 
	#GET_GPIO_INDEX
 
GPIO_GET_INDEX


	)

415 #i‡
deföed
(
STM32F4
)

416 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDIO


	)

417 
	#GPIO_AF12_SDMMC1
 
GPIO_AF12_SDIO


	)

420 #i‡
deföed
(
STM32F7
)

421 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

422 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

425 #i‡
deföed
(
STM32L4
)

426 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

427 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

430 
	#GPIO_AF0_LPTIM
 
GPIO_AF0_LPTIM1


	)

431 
	#GPIO_AF1_LPTIM
 
GPIO_AF1_LPTIM1


	)

432 
	#GPIO_AF2_LPTIM
 
GPIO_AF2_LPTIM1


	)

434 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F7
)

435 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

436 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

437 
	#GPIO_SPEED_FAST
 
GPIO_SPEED_FREQ_HIGH


	)

438 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

441 #i‡
deföed
(
STM32L1
)

442 
	#GPIO_SPEED_VERY_LOW
 
GPIO_SPEED_FREQ_LOW


	)

443 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_MEDIUM


	)

444 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_HIGH


	)

445 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

448 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F1
)

449 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

450 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

451 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_HIGH


	)

454 
	#GPIO_AF6_DFSDM
 
GPIO_AF6_DFSDM1


	)

463 #i‡
deföed
(
STM32H7
)

464 
	#__HAL_RCC_JPEG_CLK_ENABLE
 
__HAL_RCC_JPGDECEN_CLK_ENABLE


	)

465 
	#__HAL_RCC_JPEG_CLK_DISABLE
 
__HAL_RCC_JPGDECEN_CLK_DISABLE


	)

466 
	#__HAL_RCC_JPEG_FORCE_RESET
 
__HAL_RCC_JPGDECRST_FORCE_RESET


	)

467 
	#__HAL_RCC_JPEG_RELEASE_RESET
 
__HAL_RCC_JPGDECRST_RELEASE_RESET


	)

468 
	#__HAL_RCC_JPEG_CLK_SLEEP_ENABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_ENABLE


	)

469 
	#__HAL_RCC_JPEG_CLK_SLEEP_DISABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_DISABLE


	)

471 
	#DMA_REQUEST_DAC1
 
DMA_REQUEST_DAC1_CH1


	)

472 
	#DMA_REQUEST_DAC2
 
DMA_REQUEST_DAC1_CH2


	)

474 
	#BDMA_REQUEST_LP_UART1_RX
 
BDMA_REQUEST_LPUART1_RX


	)

475 
	#BDMA_REQUEST_LP_UART1_TX
 
BDMA_REQUEST_LPUART1_TX


	)

477 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

478 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

479 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

480 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

481 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

482 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM3_OUT


	)

483 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

484 
	#HAL_DMAMUX1_REQUEST_GEN_TIM12_TRGO
 
HAL_DMAMUX1_REQ_GEN_TIM12_TRGO


	)

486 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH0_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH0_EVT


	)

487 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH1_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH1_EVT


	)

488 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH2_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH2_EVT


	)

489 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH3_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH3_EVT


	)

490 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH4_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH4_EVT


	)

491 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH5_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH5_EVT


	)

492 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH6_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH6_EVT


	)

493 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_WKUP


	)

494 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_WKUP


	)

495 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_WKUP


	)

496 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_OUT


	)

497 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_WKUP


	)

498 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_OUT


	)

499 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM4_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM4_WKUP


	)

500 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM5_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM5_WKUP


	)

501 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_WKUP
 
HAL_DMAMUX2_REQ_GEN_I2C4_WKUP


	)

502 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_WKUP
 
HAL_DMAMUX2_REQ_GEN_SPI6_WKUP


	)

503 
	#HAL_DMAMUX2_REQUEST_GEN_COMP1_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP1_OUT


	)

504 
	#HAL_DMAMUX2_REQUEST_GEN_COMP2_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP2_OUT


	)

505 
	#HAL_DMAMUX2_REQUEST_GEN_RTC_WKUP
 
HAL_DMAMUX2_REQ_GEN_RTC_WKUP


	)

506 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI0
 
HAL_DMAMUX2_REQ_GEN_EXTI0


	)

507 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI2
 
HAL_DMAMUX2_REQ_GEN_EXTI2


	)

508 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_IT_EVT
 
HAL_DMAMUX2_REQ_GEN_I2C4_IT_EVT


	)

509 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_IT
 
HAL_DMAMUX2_REQ_GEN_SPI6_IT


	)

510 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_IT


	)

511 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_IT


	)

512 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_IT
 
HAL_DMAMUX2_REQ_GEN_ADC3_IT


	)

513 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_AWD1_OUT
 
HAL_DMAMUX2_REQ_GEN_ADC3_AWD1_OUT


	)

514 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH0_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH0_IT


	)

515 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH1_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH1_IT


	)

517 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

518 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

519 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

520 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

534 
	#HRTIM_TIMDELAYEDPROTECTION_DISABLED
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED


	)

535 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6


	)

536 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6


	)

537 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6


	)

538 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6


	)

539 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7


	)

540 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7


	)

541 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7


	)

542 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7


	)

544 
	#__HAL_HRTIM_SëCou¡î
 
__HAL_HRTIM_SETCOUNTER


	)

545 
	#__HAL_HRTIM_GëCou¡î
 
__HAL_HRTIM_GETCOUNTER


	)

546 
	#__HAL_HRTIM_SëPîiod
 
__HAL_HRTIM_SETPERIOD


	)

547 
	#__HAL_HRTIM_GëPîiod
 
__HAL_HRTIM_GETPERIOD


	)

548 
	#__HAL_HRTIM_SëClockPªsˇÀr
 
__HAL_HRTIM_SETCLOCKPRESCALER


	)

549 
	#__HAL_HRTIM_GëClockPªsˇÀr
 
__HAL_HRTIM_GETCLOCKPRESCALER


	)

550 
	#__HAL_HRTIM_SëCom∑ª
 
__HAL_HRTIM_SETCOMPARE


	)

551 
	#__HAL_HRTIM_GëCom∑ª
 
__HAL_HRTIM_GETCOMPARE


	)

559 
	#I2C_DUALADDRESS_DISABLED
 
I2C_DUALADDRESS_DISABLE


	)

560 
	#I2C_DUALADDRESS_ENABLED
 
I2C_DUALADDRESS_ENABLE


	)

561 
	#I2C_GENERALCALL_DISABLED
 
I2C_GENERALCALL_DISABLE


	)

562 
	#I2C_GENERALCALL_ENABLED
 
I2C_GENERALCALL_ENABLE


	)

563 
	#I2C_NOSTRETCH_DISABLED
 
I2C_NOSTRETCH_DISABLE


	)

564 
	#I2C_NOSTRETCH_ENABLED
 
I2C_NOSTRETCH_ENABLE


	)

565 
	#I2C_ANALOGFILTER_ENABLED
 
I2C_ANALOGFILTER_ENABLE


	)

566 
	#I2C_ANALOGFILTER_DISABLED
 
I2C_ANALOGFILTER_DISABLE


	)

567 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F1
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L1
Ë|| deföed(
STM32F7
)

568 
	#HAL_I2C_STATE_MEM_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

569 
	#HAL_I2C_STATE_MEM_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

570 
	#HAL_I2C_STATE_MASTER_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

571 
	#HAL_I2C_STATE_MASTER_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

572 
	#HAL_I2C_STATE_SLAVE_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

573 
	#HAL_I2C_STATE_SLAVE_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

582 
	#IRDA_ONE_BIT_SAMPLE_DISABLED
 
IRDA_ONE_BIT_SAMPLE_DISABLE


	)

583 
	#IRDA_ONE_BIT_SAMPLE_ENABLED
 
IRDA_ONE_BIT_SAMPLE_ENABLE


	)

592 
	#KR_KEY_RELOAD
 
IWDG_KEY_RELOAD


	)

593 
	#KR_KEY_ENABLE
 
IWDG_KEY_ENABLE


	)

594 
	#KR_KEY_EWA
 
IWDG_KEY_WRITE_ACCESS_ENABLE


	)

595 
	#KR_KEY_DWA
 
IWDG_KEY_WRITE_ACCESS_DISABLE


	)

604 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION


	)

605 
	#LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS


	)

606 
	#LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS


	)

607 
	#LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS


	)

609 
	#LPTIM_CLOCKPOLARITY_RISINGEDGE
 
LPTIM_CLOCKPOLARITY_RISING


	)

610 
	#LPTIM_CLOCKPOLARITY_FALLINGEDGE
 
LPTIM_CLOCKPOLARITY_FALLING


	)

611 
	#LPTIM_CLOCKPOLARITY_BOTHEDGES
 
LPTIM_CLOCKPOLARITY_RISING_FALLING


	)

613 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION


	)

614 
	#LPTIM_TRIGSAMPLETIME_2TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

615 
	#LPTIM_TRIGSAMPLETIME_4TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

616 
	#LPTIM_TRIGSAMPLETIME_8TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

620 
	#LPTIM_TRIGSAMPLETIME_2TRANSITION
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

621 
	#LPTIM_TRIGSAMPLETIME_4TRANSITION
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

622 
	#LPTIM_TRIGSAMPLETIME_8TRANSITION
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

631 
	#HAL_NAND_Ród_Page
 
HAL_NAND_Ród_Page_8b


	)

632 
	#HAL_NAND_Wrôe_Page
 
HAL_NAND_Wrôe_Page_8b


	)

633 
	#HAL_NAND_Ród_S∑ªAªa
 
HAL_NAND_Ród_S∑ªAªa_8b


	)

634 
	#HAL_NAND_Wrôe_S∑ªAªa
 
HAL_NAND_Wrôe_S∑ªAªa_8b


	)

636 
	#NAND_AddªssTy≥def
 
NAND_AddªssTy≥Def


	)

638 
	#__ARRAY_ADDRESS
 
ARRAY_ADDRESS


	)

639 
	#__ADDR_1°_CYCLE
 
ADDR_1ST_CYCLE


	)

640 
	#__ADDR_2nd_CYCLE
 
ADDR_2ND_CYCLE


	)

641 
	#__ADDR_3rd_CYCLE
 
ADDR_3RD_CYCLE


	)

642 
	#__ADDR_4th_CYCLE
 
ADDR_4TH_CYCLE


	)

650 
	#NOR_SètusTy≥def
 
HAL_NOR_SètusTy≥Def


	)

651 
	#NOR_SUCCESS
 
HAL_NOR_STATUS_SUCCESS


	)

652 
	#NOR_ONGOING
 
HAL_NOR_STATUS_ONGOING


	)

653 
	#NOR_ERROR
 
HAL_NOR_STATUS_ERROR


	)

654 
	#NOR_TIMEOUT
 
HAL_NOR_STATUS_TIMEOUT


	)

656 
	#__NOR_WRITE
 
NOR_WRITE


	)

657 
	#__NOR_ADDR_SHIFT
 
NOR_ADDR_SHIFT


	)

666 
	#OPAMP_NONINVERTINGINPUT_VP0
 
OPAMP_NONINVERTINGINPUT_IO0


	)

667 
	#OPAMP_NONINVERTINGINPUT_VP1
 
OPAMP_NONINVERTINGINPUT_IO1


	)

668 
	#OPAMP_NONINVERTINGINPUT_VP2
 
OPAMP_NONINVERTINGINPUT_IO2


	)

669 
	#OPAMP_NONINVERTINGINPUT_VP3
 
OPAMP_NONINVERTINGINPUT_IO3


	)

671 
	#OPAMP_SEC_NONINVERTINGINPUT_VP0
 
OPAMP_SEC_NONINVERTINGINPUT_IO0


	)

672 
	#OPAMP_SEC_NONINVERTINGINPUT_VP1
 
OPAMP_SEC_NONINVERTINGINPUT_IO1


	)

673 
	#OPAMP_SEC_NONINVERTINGINPUT_VP2
 
OPAMP_SEC_NONINVERTINGINPUT_IO2


	)

674 
	#OPAMP_SEC_NONINVERTINGINPUT_VP3
 
OPAMP_SEC_NONINVERTINGINPUT_IO3


	)

676 
	#OPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

677 
	#OPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

679 
	#IOPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

680 
	#IOPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

682 
	#OPAMP_SEC_INVERTINGINPUT_VM0
 
OPAMP_SEC_INVERTINGINPUT_IO0


	)

683 
	#OPAMP_SEC_INVERTINGINPUT_VM1
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

685 
	#OPAMP_INVERTINGINPUT_VINM
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

687 
	#OPAMP_PGACONNECT_NO
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_NO


	)

688 
	#OPAMP_PGACONNECT_VM0
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0


	)

689 
	#OPAMP_PGACONNECT_VM1
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1


	)

698 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

699 #i‡
deföed
(
STM32F7
)

700 
	#I2S_CLOCK_SYSCLK
 
I2S_CLOCK_PLL


	)

711 
	#CF_DATA
 
ATA_DATA


	)

712 
	#CF_SECTOR_COUNT
 
ATA_SECTOR_COUNT


	)

713 
	#CF_SECTOR_NUMBER
 
ATA_SECTOR_NUMBER


	)

714 
	#CF_CYLINDER_LOW
 
ATA_CYLINDER_LOW


	)

715 
	#CF_CYLINDER_HIGH
 
ATA_CYLINDER_HIGH


	)

716 
	#CF_CARD_HEAD
 
ATA_CARD_HEAD


	)

717 
	#CF_STATUS_CMD
 
ATA_STATUS_CMD


	)

718 
	#CF_STATUS_CMD_ALTERNATE
 
ATA_STATUS_CMD_ALTERNATE


	)

719 
	#CF_COMMON_DATA_AREA
 
ATA_COMMON_DATA_AREA


	)

722 
	#CF_READ_SECTOR_CMD
 
ATA_READ_SECTOR_CMD


	)

723 
	#CF_WRITE_SECTOR_CMD
 
ATA_WRITE_SECTOR_CMD


	)

724 
	#CF_ERASE_SECTOR_CMD
 
ATA_ERASE_SECTOR_CMD


	)

725 
	#CF_IDENTIFY_CMD
 
ATA_IDENTIFY_CMD


	)

727 
	#PCCARD_SètusTy≥def
 
HAL_PCCARD_SètusTy≥Def


	)

728 
	#PCCARD_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

729 
	#PCCARD_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

730 
	#PCCARD_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

731 
	#PCCARD_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

740 
	#FORMAT_BIN
 
RTC_FORMAT_BIN


	)

741 
	#FORMAT_BCD
 
RTC_FORMAT_BCD


	)

743 
	#RTC_ALARMSUBSECONDMASK_N⁄e
 
RTC_ALARMSUBSECONDMASK_NONE


	)

744 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

745 
	#RTC_TAMPERMASK_FLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

746 
	#RTC_TAMPERMASK_FLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

748 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

749 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

750 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

751 
	#RTC_TAMPER1_2_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

752 
	#RTC_TAMPER1_2_3_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

754 
	#RTC_TIMESTAMPPIN_PC13
 
RTC_TIMESTAMPPIN_DEFAULT


	)

755 
	#RTC_TIMESTAMPPIN_PA0
 
RTC_TIMESTAMPPIN_POS1


	)

756 
	#RTC_TIMESTAMPPIN_PI8
 
RTC_TIMESTAMPPIN_POS1


	)

757 
	#RTC_TIMESTAMPPIN_PC1
 
RTC_TIMESTAMPPIN_POS2


	)

759 
	#RTC_OUTPUT_REMAP_PC13
 
RTC_OUTPUT_REMAP_NONE


	)

760 
	#RTC_OUTPUT_REMAP_PB14
 
RTC_OUTPUT_REMAP_POS1


	)

761 
	#RTC_OUTPUT_REMAP_PB2
 
RTC_OUTPUT_REMAP_POS1


	)

763 
	#RTC_TAMPERPIN_PC13
 
RTC_TAMPERPIN_DEFAULT


	)

764 
	#RTC_TAMPERPIN_PA0
 
RTC_TAMPERPIN_POS1


	)

765 
	#RTC_TAMPERPIN_PI8
 
RTC_TAMPERPIN_POS1


	)

775 
	#SMARTCARD_NACK_ENABLED
 
SMARTCARD_NACK_ENABLE


	)

776 
	#SMARTCARD_NACK_DISABLED
 
SMARTCARD_NACK_DISABLE


	)

778 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLED
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

779 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLED
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

780 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLE
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

781 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLE
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

783 
	#SMARTCARD_TIMEOUT_DISABLED
 
SMARTCARD_TIMEOUT_DISABLE


	)

784 
	#SMARTCARD_TIMEOUT_ENABLED
 
SMARTCARD_TIMEOUT_ENABLE


	)

786 
	#SMARTCARD_LASTBIT_DISABLED
 
SMARTCARD_LASTBIT_DISABLE


	)

787 
	#SMARTCARD_LASTBIT_ENABLED
 
SMARTCARD_LASTBIT_ENABLE


	)

796 
	#SMBUS_DUALADDRESS_DISABLED
 
SMBUS_DUALADDRESS_DISABLE


	)

797 
	#SMBUS_DUALADDRESS_ENABLED
 
SMBUS_DUALADDRESS_ENABLE


	)

798 
	#SMBUS_GENERALCALL_DISABLED
 
SMBUS_GENERALCALL_DISABLE


	)

799 
	#SMBUS_GENERALCALL_ENABLED
 
SMBUS_GENERALCALL_ENABLE


	)

800 
	#SMBUS_NOSTRETCH_DISABLED
 
SMBUS_NOSTRETCH_DISABLE


	)

801 
	#SMBUS_NOSTRETCH_ENABLED
 
SMBUS_NOSTRETCH_ENABLE


	)

802 
	#SMBUS_ANALOGFILTER_ENABLED
 
SMBUS_ANALOGFILTER_ENABLE


	)

803 
	#SMBUS_ANALOGFILTER_DISABLED
 
SMBUS_ANALOGFILTER_DISABLE


	)

804 
	#SMBUS_PEC_DISABLED
 
SMBUS_PEC_DISABLE


	)

805 
	#SMBUS_PEC_ENABLED
 
SMBUS_PEC_ENABLE


	)

806 
	#HAL_SMBUS_STATE_SLAVE_LISTEN
 
HAL_SMBUS_STATE_LISTEN


	)

814 
	#SPI_TIMODE_DISABLED
 
SPI_TIMODE_DISABLE


	)

815 
	#SPI_TIMODE_ENABLED
 
SPI_TIMODE_ENABLE


	)

817 
	#SPI_CRCCALCULATION_DISABLED
 
SPI_CRCCALCULATION_DISABLE


	)

818 
	#SPI_CRCCALCULATION_ENABLED
 
SPI_CRCCALCULATION_ENABLE


	)

820 
	#SPI_NSS_PULSE_DISABLED
 
SPI_NSS_PULSE_DISABLE


	)

821 
	#SPI_NSS_PULSE_ENABLED
 
SPI_NSS_PULSE_ENABLE


	)

830 
	#CCER_CCxE_MASK
 
TIM_CCER_CCxE_MASK


	)

831 
	#CCER_CCxNE_MASK
 
TIM_CCER_CCxNE_MASK


	)

833 
	#TIM_DMABa£_CR1
 
TIM_DMABASE_CR1


	)

834 
	#TIM_DMABa£_CR2
 
TIM_DMABASE_CR2


	)

835 
	#TIM_DMABa£_SMCR
 
TIM_DMABASE_SMCR


	)

836 
	#TIM_DMABa£_DIER
 
TIM_DMABASE_DIER


	)

837 
	#TIM_DMABa£_SR
 
TIM_DMABASE_SR


	)

838 
	#TIM_DMABa£_EGR
 
TIM_DMABASE_EGR


	)

839 
	#TIM_DMABa£_CCMR1
 
TIM_DMABASE_CCMR1


	)

840 
	#TIM_DMABa£_CCMR2
 
TIM_DMABASE_CCMR2


	)

841 
	#TIM_DMABa£_CCER
 
TIM_DMABASE_CCER


	)

842 
	#TIM_DMABa£_CNT
 
TIM_DMABASE_CNT


	)

843 
	#TIM_DMABa£_PSC
 
TIM_DMABASE_PSC


	)

844 
	#TIM_DMABa£_ARR
 
TIM_DMABASE_ARR


	)

845 
	#TIM_DMABa£_RCR
 
TIM_DMABASE_RCR


	)

846 
	#TIM_DMABa£_CCR1
 
TIM_DMABASE_CCR1


	)

847 
	#TIM_DMABa£_CCR2
 
TIM_DMABASE_CCR2


	)

848 
	#TIM_DMABa£_CCR3
 
TIM_DMABASE_CCR3


	)

849 
	#TIM_DMABa£_CCR4
 
TIM_DMABASE_CCR4


	)

850 
	#TIM_DMABa£_BDTR
 
TIM_DMABASE_BDTR


	)

851 
	#TIM_DMABa£_DCR
 
TIM_DMABASE_DCR


	)

852 
	#TIM_DMABa£_DMAR
 
TIM_DMABASE_DMAR


	)

853 
	#TIM_DMABa£_OR1
 
TIM_DMABASE_OR1


	)

854 
	#TIM_DMABa£_CCMR3
 
TIM_DMABASE_CCMR3


	)

855 
	#TIM_DMABa£_CCR5
 
TIM_DMABASE_CCR5


	)

856 
	#TIM_DMABa£_CCR6
 
TIM_DMABASE_CCR6


	)

857 
	#TIM_DMABa£_OR2
 
TIM_DMABASE_OR2


	)

858 
	#TIM_DMABa£_OR3
 
TIM_DMABASE_OR3


	)

859 
	#TIM_DMABa£_OR
 
TIM_DMABASE_OR


	)

861 
	#TIM_EvítSour˚_Upd©e
 
TIM_EVENTSOURCE_UPDATE


	)

862 
	#TIM_EvítSour˚_CC1
 
TIM_EVENTSOURCE_CC1


	)

863 
	#TIM_EvítSour˚_CC2
 
TIM_EVENTSOURCE_CC2


	)

864 
	#TIM_EvítSour˚_CC3
 
TIM_EVENTSOURCE_CC3


	)

865 
	#TIM_EvítSour˚_CC4
 
TIM_EVENTSOURCE_CC4


	)

866 
	#TIM_EvítSour˚_COM
 
TIM_EVENTSOURCE_COM


	)

867 
	#TIM_EvítSour˚_Triggî
 
TIM_EVENTSOURCE_TRIGGER


	)

868 
	#TIM_EvítSour˚_Bªak
 
TIM_EVENTSOURCE_BREAK


	)

869 
	#TIM_EvítSour˚_Bªak2
 
TIM_EVENTSOURCE_BREAK2


	)

871 
	#TIM_DMABur°Lígth_1Tøns„r
 
TIM_DMABURSTLENGTH_1TRANSFER


	)

872 
	#TIM_DMABur°Lígth_2Tøns„rs
 
TIM_DMABURSTLENGTH_2TRANSFERS


	)

873 
	#TIM_DMABur°Lígth_3Tøns„rs
 
TIM_DMABURSTLENGTH_3TRANSFERS


	)

874 
	#TIM_DMABur°Lígth_4Tøns„rs
 
TIM_DMABURSTLENGTH_4TRANSFERS


	)

875 
	#TIM_DMABur°Lígth_5Tøns„rs
 
TIM_DMABURSTLENGTH_5TRANSFERS


	)

876 
	#TIM_DMABur°Lígth_6Tøns„rs
 
TIM_DMABURSTLENGTH_6TRANSFERS


	)

877 
	#TIM_DMABur°Lígth_7Tøns„rs
 
TIM_DMABURSTLENGTH_7TRANSFERS


	)

878 
	#TIM_DMABur°Lígth_8Tøns„rs
 
TIM_DMABURSTLENGTH_8TRANSFERS


	)

879 
	#TIM_DMABur°Lígth_9Tøns„rs
 
TIM_DMABURSTLENGTH_9TRANSFERS


	)

880 
	#TIM_DMABur°Lígth_10Tøns„rs
 
TIM_DMABURSTLENGTH_10TRANSFERS


	)

881 
	#TIM_DMABur°Lígth_11Tøns„rs
 
TIM_DMABURSTLENGTH_11TRANSFERS


	)

882 
	#TIM_DMABur°Lígth_12Tøns„rs
 
TIM_DMABURSTLENGTH_12TRANSFERS


	)

883 
	#TIM_DMABur°Lígth_13Tøns„rs
 
TIM_DMABURSTLENGTH_13TRANSFERS


	)

884 
	#TIM_DMABur°Lígth_14Tøns„rs
 
TIM_DMABURSTLENGTH_14TRANSFERS


	)

885 
	#TIM_DMABur°Lígth_15Tøns„rs
 
TIM_DMABURSTLENGTH_15TRANSFERS


	)

886 
	#TIM_DMABur°Lígth_16Tøns„rs
 
TIM_DMABURSTLENGTH_16TRANSFERS


	)

887 
	#TIM_DMABur°Lígth_17Tøns„rs
 
TIM_DMABURSTLENGTH_17TRANSFERS


	)

888 
	#TIM_DMABur°Lígth_18Tøns„rs
 
TIM_DMABURSTLENGTH_18TRANSFERS


	)

897 
	#TSC_SYNC_POL_FALL
 
TSC_SYNC_POLARITY_FALLING


	)

898 
	#TSC_SYNC_POL_RISE_HIGH
 
TSC_SYNC_POLARITY_RISING


	)

906 
	#UART_ONEBIT_SAMPLING_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

907 
	#UART_ONEBIT_SAMPLING_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

908 
	#UART_ONE_BIT_SAMPLE_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

909 
	#UART_ONE_BIT_SAMPLE_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

911 
	#__HAL_UART_ONEBIT_ENABLE
 
__HAL_UART_ONE_BIT_SAMPLE_ENABLE


	)

912 
	#__HAL_UART_ONEBIT_DISABLE
 
__HAL_UART_ONE_BIT_SAMPLE_DISABLE


	)

914 
	#__DIV_SAMPLING16
 
UART_DIV_SAMPLING16


	)

915 
	#__DIVMANT_SAMPLING16
 
UART_DIVMANT_SAMPLING16


	)

916 
	#__DIVFRAQ_SAMPLING16
 
UART_DIVFRAQ_SAMPLING16


	)

917 
	#__UART_BRR_SAMPLING16
 
UART_BRR_SAMPLING16


	)

919 
	#__DIV_SAMPLING8
 
UART_DIV_SAMPLING8


	)

920 
	#__DIVMANT_SAMPLING8
 
UART_DIVMANT_SAMPLING8


	)

921 
	#__DIVFRAQ_SAMPLING8
 
UART_DIVFRAQ_SAMPLING8


	)

922 
	#__UART_BRR_SAMPLING8
 
UART_BRR_SAMPLING8


	)

924 
	#__DIV_LPUART
 
UART_DIV_LPUART


	)

926 
	#UART_WAKEUPMETHODE_IDLELINE
 
UART_WAKEUPMETHOD_IDLELINE


	)

927 
	#UART_WAKEUPMETHODE_ADDRESSMARK
 
UART_WAKEUPMETHOD_ADDRESSMARK


	)

938 
	#USART_CLOCK_DISABLED
 
USART_CLOCK_DISABLE


	)

939 
	#USART_CLOCK_ENABLED
 
USART_CLOCK_ENABLE


	)

941 
	#USARTNACK_ENABLED
 
USART_NACK_ENABLE


	)

942 
	#USARTNACK_DISABLED
 
USART_NACK_DISABLE


	)

950 
	#CFR_BASE
 
WWDG_CFR_BASE


	)

959 
	#CAN_FûãrFIFO0
 
CAN_FILTER_FIFO0


	)

960 
	#CAN_FûãrFIFO1
 
CAN_FILTER_FIFO1


	)

961 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

962 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

963 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

964 
	#INAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

965 
	#SLAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

966 
	#CAN_TXSTATUS_FAILED
 ((
uöt8_t
)0x00U)

	)

967 
	#CAN_TXSTATUS_OK
 ((
uöt8_t
)0x01U)

	)

968 
	#CAN_TXSTATUS_PENDING
 ((
uöt8_t
)0x02U)

	)

978 
	#VLAN_TAG
 
ETH_VLAN_TAG


	)

979 
	#MIN_ETH_PAYLOAD
 
ETH_MIN_ETH_PAYLOAD


	)

980 
	#MAX_ETH_PAYLOAD
 
ETH_MAX_ETH_PAYLOAD


	)

981 
	#JUMBO_FRAME_PAYLOAD
 
ETH_JUMBO_FRAME_PAYLOAD


	)

982 
	#MACMIIAR_CR_MASK
 
ETH_MACMIIAR_CR_MASK


	)

983 
	#MACCR_CLEAR_MASK
 
ETH_MACCR_CLEAR_MASK


	)

984 
	#MACFCR_CLEAR_MASK
 
ETH_MACFCR_CLEAR_MASK


	)

985 
	#DMAOMR_CLEAR_MASK
 
ETH_DMAOMR_CLEAR_MASK


	)

987 
	#ETH_MMCCR
 ((
uöt32_t
)0x00000100U)

	)

988 
	#ETH_MMCRIR
 ((
uöt32_t
)0x00000104U)

	)

989 
	#ETH_MMCTIR
 ((
uöt32_t
)0x00000108U)

	)

990 
	#ETH_MMCRIMR
 ((
uöt32_t
)0x0000010CU)

	)

991 
	#ETH_MMCTIMR
 ((
uöt32_t
)0x00000110U)

	)

992 
	#ETH_MMCTGFSCCR
 ((
uöt32_t
)0x0000014CU)

	)

993 
	#ETH_MMCTGFMSCCR
 ((
uöt32_t
)0x00000150U)

	)

994 
	#ETH_MMCTGFCR
 ((
uöt32_t
)0x00000168U)

	)

995 
	#ETH_MMCRFCECR
 ((
uöt32_t
)0x00000194U)

	)

996 
	#ETH_MMCRFAECR
 ((
uöt32_t
)0x00000198U)

	)

997 
	#ETH_MMCRGUFCR
 ((
uöt32_t
)0x000001C4U)

	)

999 
	#ETH_MAC_TXFIFO_FULL
 ((
uöt32_t
)0x02000000Ë

	)

1000 
	#ETH_MAC_TXFIFONOT_EMPTY
 ((
uöt32_t
)0x01000000Ë

	)

1001 
	#ETH_MAC_TXFIFO_WRITE_ACTIVE
 ((
uöt32_t
)0x00400000Ë

	)

1002 
	#ETH_MAC_TXFIFO_IDLE
 ((
uöt32_t
)0x00000000Ë

	)

1003 
	#ETH_MAC_TXFIFO_READ
 ((
uöt32_t
)0x00100000Ë

	)

1004 
	#ETH_MAC_TXFIFO_WAITING
 ((
uöt32_t
)0x00200000Ë

	)

1005 
	#ETH_MAC_TXFIFO_WRITING
 ((
uöt32_t
)0x00300000Ë

	)

1006 
	#ETH_MAC_TRANSMISSION_PAUSE
 ((
uöt32_t
)0x00080000Ë

	)

1007 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE
 ((
uöt32_t
)0x00000000Ë

	)

1008 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING
 ((
uöt32_t
)0x00020000Ë

	)

1009 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF
 ((
uöt32_t
)0x00040000Ë

	)

1010 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING
 ((
uöt32_t
)0x00060000Ë

	)

1011 
	#ETH_MAC_MII_TRANSMIT_ACTIVE
 ((
uöt32_t
)0x00010000Ë

	)

1012 
	#ETH_MAC_RXFIFO_EMPTY
 ((
uöt32_t
)0x00000000Ë

	)

1013 
	#ETH_MAC_RXFIFO_BELOW_THRESHOLD
 ((
uöt32_t
)0x00000100Ë

	)

1014 
	#ETH_MAC_RXFIFO_ABOVE_THRESHOLD
 ((
uöt32_t
)0x00000200Ë

	)

1015 
	#ETH_MAC_RXFIFO_FULL
 ((
uöt32_t
)0x00000300Ë

	)

1016 #i‡
deföed
(
STM32F1
)

1018 
	#ETH_MAC_READCONTROLLER_IDLE
 ((
uöt32_t
)0x00000000Ë

	)

1019 
	#ETH_MAC_READCONTROLLER_READING_DATA
 ((
uöt32_t
)0x00000020Ë

	)

1020 
	#ETH_MAC_READCONTROLLER_READING_STATUS
 ((
uöt32_t
)0x00000040Ë

	)

1022 
	#ETH_MAC_READCONTROLLER_FLUSHING
 ((
uöt32_t
)0x00000060Ë

	)

1023 
	#ETH_MAC_RXFIFO_WRITE_ACTIVE
 ((
uöt32_t
)0x00000010Ë

	)

1024 
	#ETH_MAC_SMALL_FIFO_NOTACTIVE
 ((
uöt32_t
)0x00000000Ë

	)

1025 
	#ETH_MAC_SMALL_FIFO_READ_ACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

1026 
	#ETH_MAC_SMALL_FIFO_WRITE_ACTIVE
 ((
uöt32_t
)0x00000004Ë

	)

1027 
	#ETH_MAC_SMALL_FIFO_RW_ACTIVE
 ((
uöt32_t
)0x00000006Ë

	)

1028 
	#ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE
 ((
uöt32_t
)0x00000001Ë

	)

1037 
	#HAL_DCMI_ERROR_OVF
 
HAL_DCMI_ERROR_OVR


	)

1038 
	#DCMI_IT_OVF
 
DCMI_IT_OVR


	)

1039 
	#DCMI_FLAG_OVFRI
 
DCMI_FLAG_OVRRI


	)

1040 
	#DCMI_FLAG_OVFMI
 
DCMI_FLAG_OVRMI


	)

1042 
	#HAL_DCMI_C⁄figCROP
 
HAL_DCMI_C⁄figCr›


	)

1043 
	#HAL_DCMI_E«bÀCROP
 
HAL_DCMI_E«bÀCr›


	)

1044 
	#HAL_DCMI_DißbÀCROP
 
HAL_DCMI_DißbÀCr›


	)

1050 #i‡
deföed
(
STM32L4xx
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

1051 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1055 
	#DMA2D_ARGB8888
 
DMA2D_OUTPUT_ARGB8888


	)

1056 
	#DMA2D_RGB888
 
DMA2D_OUTPUT_RGB888


	)

1057 
	#DMA2D_RGB565
 
DMA2D_OUTPUT_RGB565


	)

1058 
	#DMA2D_ARGB1555
 
DMA2D_OUTPUT_ARGB1555


	)

1059 
	#DMA2D_ARGB4444
 
DMA2D_OUTPUT_ARGB4444


	)

1061 
	#CM_ARGB8888
 
DMA2D_INPUT_ARGB8888


	)

1062 
	#CM_RGB888
 
DMA2D_INPUT_RGB888


	)

1063 
	#CM_RGB565
 
DMA2D_INPUT_RGB565


	)

1064 
	#CM_ARGB1555
 
DMA2D_INPUT_ARGB1555


	)

1065 
	#CM_ARGB4444
 
DMA2D_INPUT_ARGB4444


	)

1066 
	#CM_L8
 
DMA2D_INPUT_L8


	)

1067 
	#CM_AL44
 
DMA2D_INPUT_AL44


	)

1068 
	#CM_AL88
 
DMA2D_INPUT_AL88


	)

1069 
	#CM_L4
 
DMA2D_INPUT_L4


	)

1070 
	#CM_A8
 
DMA2D_INPUT_A8


	)

1071 
	#CM_A4
 
DMA2D_INPUT_A4


	)

1090 
	#HAL_CRYP_Compuèti⁄C∂tCÆlback
 
HAL_CRYPEx_Compuèti⁄C∂tCÆlback


	)

1098 
	#HAL_HASH_STATETy≥Def
 
HAL_HASH_SèãTy≥Def


	)

1099 
	#HAL_HASHPha£Ty≥Def
 
HAL_HASH_Pha£Ty≥Def


	)

1100 
	#HAL_HMAC_MD5_Föish
 
HAL_HASH_MD5_Föish


	)

1101 
	#HAL_HMAC_SHA1_Föish
 
HAL_HASH_SHA1_Föish


	)

1102 
	#HAL_HMAC_SHA224_Föish
 
HAL_HASH_SHA224_Föish


	)

1103 
	#HAL_HMAC_SHA256_Föish
 
HAL_HASH_SHA256_Föish


	)

1107 
	#HASH_AlgoSñe˘i⁄_SHA1
 
HASH_ALGOSELECTION_SHA1


	)

1108 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_ALGOSELECTION_SHA224


	)

1109 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_ALGOSELECTION_SHA256


	)

1110 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_ALGOSELECTION_MD5


	)

1112 
	#HASH_AlgoMode_HASH
 
HASH_ALGOMODE_HASH


	)

1113 
	#HASH_AlgoMode_HMAC
 
HASH_ALGOMODE_HMAC


	)

1115 
	#HASH_HMACKeyTy≥_Sh‹tKey
 
HASH_HMAC_KEYTYPE_SHORTKEY


	)

1116 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_HMAC_KEYTYPE_LONGKEY


	)

1124 
	#HAL_E«bÀDBGSÀïMode
 
HAL_DBGMCU_E«bÀDBGSÀïMode


	)

1125 
	#HAL_DißbÀDBGSÀïMode
 
HAL_DBGMCU_DißbÀDBGSÀïMode


	)

1126 
	#HAL_E«bÀDBGSt›Mode
 
HAL_DBGMCU_E«bÀDBGSt›Mode


	)

1127 
	#HAL_DißbÀDBGSt›Mode
 
HAL_DBGMCU_DißbÀDBGSt›Mode


	)

1128 
	#HAL_E«bÀDBGSèndbyMode
 
HAL_DBGMCU_E«bÀDBGSèndbyMode


	)

1129 
	#HAL_DißbÀDBGSèndbyMode
 
HAL_DBGMCU_DißbÀDBGSèndbyMode


	)

1130 
	#HAL_DBG_LowPowîC⁄fig
(
Pîùh
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(PîùhË: 
	`HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(Pîùh))

	)

1131 
	#HAL_VREFINT_OuçutSñe˘
 
HAL_SYSCFG_VREFINT_OuçutSñe˘


	)

1132 
	#HAL_Lock_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_SYSCFG_E«bÀ_Lock_VREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀ_Lock_VREFINT
())

	)

1133 #i‡
deföed
(
STM32L0
)

1135 
	#HAL_VREFINT_Cmd
(
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_SYSCFG_E«bÀVREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀVREFINT
())

	)

1137 
	#HAL_ADC_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINT
(Ë: 
	`HAL_ADCEx_DißbÀVREFINT
())

	)

1138 
	#HAL_ADC_E«bÀBuf„rSís‹_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINTTempSís‹
(Ë: 
	`HAL_ADCEx_DißbÀVREFINTTempSís‹
())

	)

1146 
	#FLASH_HÆfPageProgøm
 
HAL_FLASHEx_HÆfPageProgøm


	)

1147 
	#FLASH_E«bÀRunPowîDown
 
HAL_FLASHEx_E«bÀRunPowîDown


	)

1148 
	#FLASH_DißbÀRunPowîDown
 
HAL_FLASHEx_DißbÀRunPowîDown


	)

1149 
	#HAL_DATA_EEPROMEx_U∆ock
 
HAL_FLASHEx_DATAEEPROM_U∆ock


	)

1150 
	#HAL_DATA_EEPROMEx_Lock
 
HAL_FLASHEx_DATAEEPROM_Lock


	)

1151 
	#HAL_DATA_EEPROMEx_Eø£
 
HAL_FLASHEx_DATAEEPROM_Eø£


	)

1152 
	#HAL_DATA_EEPROMEx_Progøm
 
HAL_FLASHEx_DATAEEPROM_Progøm


	)

1161 
	#HAL_I2CEx_A«logFûãr_C⁄fig
 
HAL_I2CEx_C⁄figA«logFûãr


	)

1162 
	#HAL_I2CEx_DigôÆFûãr_C⁄fig
 
HAL_I2CEx_C⁄figDigôÆFûãr


	)

1163 
	#HAL_FMPI2CEx_A«logFûãr_C⁄fig
 
HAL_FMPI2CEx_C⁄figA«logFûãr


	)

1164 
	#HAL_FMPI2CEx_DigôÆFûãr_C⁄fig
 
HAL_FMPI2CEx_C⁄figDigôÆFûãr


	)

1166 
	#HAL_I2CFa°ModePlusC⁄fig
(
SYSCFG_I2CFa°ModePlus
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_I2CEx_E«bÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus): 
	`HAL_I2CEx_DißbÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus))

	)

1174 
	#HAL_PWR_PVDC⁄fig
 
HAL_PWR_C⁄figPVD


	)

1175 
	#HAL_PWR_DißbÀBkUpReg
 
HAL_PWREx_DißbÀBkUpReg


	)

1176 
	#HAL_PWR_DißbÀFœshPowîDown
 
HAL_PWREx_DißbÀFœshPowîDown


	)

1177 
	#HAL_PWR_DißbÀVddio2M⁄ô‹
 
HAL_PWREx_DißbÀVddio2M⁄ô‹


	)

1178 
	#HAL_PWR_E«bÀBkUpReg
 
HAL_PWREx_E«bÀBkUpReg


	)

1179 
	#HAL_PWR_E«bÀFœshPowîDown
 
HAL_PWREx_E«bÀFœshPowîDown


	)

1180 
	#HAL_PWR_E«bÀVddio2M⁄ô‹
 
HAL_PWREx_E«bÀVddio2M⁄ô‹


	)

1181 
	#HAL_PWR_PVD_PVM_IRQH™dÀr
 
HAL_PWREx_PVD_PVM_IRQH™dÀr


	)

1182 
	#HAL_PWR_PVDLevñC⁄fig
 
HAL_PWR_C⁄figPVD


	)

1183 
	#HAL_PWR_Vddio2M⁄ô‹_IRQH™dÀr
 
HAL_PWREx_Vddio2M⁄ô‹_IRQH™dÀr


	)

1184 
	#HAL_PWR_Vddio2M⁄ô‹CÆlback
 
HAL_PWREx_Vddio2M⁄ô‹CÆlback


	)

1185 
	#HAL_PWREx_A˘iv©eOvîDrive
 
HAL_PWREx_E«bÀOvîDrive


	)

1186 
	#HAL_PWREx_Dó˘iv©eOvîDrive
 
HAL_PWREx_DißbÀOvîDrive


	)

1187 
	#HAL_PWREx_DißbÀSDADCA«log
 
HAL_PWREx_DißbÀSDADC


	)

1188 
	#HAL_PWREx_E«bÀSDADCA«log
 
HAL_PWREx_E«bÀSDADC


	)

1189 
	#HAL_PWREx_PVMC⁄fig
 
HAL_PWREx_C⁄figPVM


	)

1191 
	#PWR_MODE_NORMAL
 
PWR_PVD_MODE_NORMAL


	)

1192 
	#PWR_MODE_IT_RISING
 
PWR_PVD_MODE_IT_RISING


	)

1193 
	#PWR_MODE_IT_FALLING
 
PWR_PVD_MODE_IT_FALLING


	)

1194 
	#PWR_MODE_IT_RISING_FALLING
 
PWR_PVD_MODE_IT_RISING_FALLING


	)

1195 
	#PWR_MODE_EVENT_RISING
 
PWR_PVD_MODE_EVENT_RISING


	)

1196 
	#PWR_MODE_EVENT_FALLING
 
PWR_PVD_MODE_EVENT_FALLING


	)

1197 
	#PWR_MODE_EVENT_RISING_FALLING
 
PWR_PVD_MODE_EVENT_RISING_FALLING


	)

1199 
	#CR_OFFSET_BB
 
PWR_CR_OFFSET_BB


	)

1200 
	#CSR_OFFSET_BB
 
PWR_CSR_OFFSET_BB


	)

1202 
	#DBP_BôNumbî
 
DBP_BIT_NUMBER


	)

1203 
	#PVDE_BôNumbî
 
PVDE_BIT_NUMBER


	)

1204 
	#PMODE_BôNumbî
 
PMODE_BIT_NUMBER


	)

1205 
	#EWUP_BôNumbî
 
EWUP_BIT_NUMBER


	)

1206 
	#FPDS_BôNumbî
 
FPDS_BIT_NUMBER


	)

1207 
	#ODEN_BôNumbî
 
ODEN_BIT_NUMBER


	)

1208 
	#ODSWEN_BôNumbî
 
ODSWEN_BIT_NUMBER


	)

1209 
	#MRLVDS_BôNumbî
 
MRLVDS_BIT_NUMBER


	)

1210 
	#LPLVDS_BôNumbî
 
LPLVDS_BIT_NUMBER


	)

1211 
	#BRE_BôNumbî
 
BRE_BIT_NUMBER


	)

1213 
	#PWR_MODE_EVT
 
PWR_PVD_MODE_NORMAL


	)

1222 
	#HAL_SMBUS_Sœve_Li°í_IT
 
HAL_SMBUS_E«bÀLi°í_IT


	)

1223 
	#HAL_SMBUS_SœveAddrCÆlback
 
HAL_SMBUS_AddrCÆlback


	)

1224 
	#HAL_SMBUS_SœveLi°íC∂tCÆlback
 
HAL_SMBUS_Li°íC∂tCÆlback


	)

1232 
	#HAL_SPI_FlushRxFifo
 
HAL_SPIEx_FlushRxFifo


	)

1240 
	#HAL_TIM_DMADñayPul£C∂t
 
TIM_DMADñayPul£C∂t


	)

1241 
	#HAL_TIM_DMAEº‹
 
TIM_DMAEº‹


	)

1242 
	#HAL_TIM_DMAC≠tuªC∂t
 
TIM_DMAC≠tuªC∂t


	)

1243 
	#HAL_TIMEx_DMACommuèti⁄C∂t
 
TIMEx_DMACommuèti⁄C∂t


	)

1251 
	#HAL_UART_WakeupCÆlback
 
HAL_UARTEx_WakeupCÆlback


	)

1259 
	#HAL_LTDC_LöeEvíCÆlback
 
HAL_LTDC_LöeEvítCÆlback


	)

1278 
	#AES_IT_CC
 
CRYP_IT_CC


	)

1279 
	#AES_IT_ERR
 
CRYP_IT_ERR


	)

1280 
	#AES_FLAG_CCF
 
CRYP_FLAG_CCF


	)

1288 
	#__HAL_GET_BOOT_MODE
 
__HAL_SYSCFG_GET_BOOT_MODE


	)

1289 
	#__HAL_REMAPMEMORY_FLASH
 
__HAL_SYSCFG_REMAPMEMORY_FLASH


	)

1290 
	#__HAL_REMAPMEMORY_SYSTEMFLASH
 
__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH


	)

1291 
	#__HAL_REMAPMEMORY_SRAM
 
__HAL_SYSCFG_REMAPMEMORY_SRAM


	)

1292 
	#__HAL_REMAPMEMORY_FMC
 
__HAL_SYSCFG_REMAPMEMORY_FMC


	)

1293 
	#__HAL_REMAPMEMORY_FMC_SDRAM
 
__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM


	)

1294 
	#__HAL_REMAPMEMORY_FSMC
 
__HAL_SYSCFG_REMAPMEMORY_FSMC


	)

1295 
	#__HAL_REMAPMEMORY_QUADSPI
 
__HAL_SYSCFG_REMAPMEMORY_QUADSPI


	)

1296 
	#__HAL_FMC_BANK
 
__HAL_SYSCFG_FMC_BANK


	)

1297 
	#__HAL_GET_FLAG
 
__HAL_SYSCFG_GET_FLAG


	)

1298 
	#__HAL_CLEAR_FLAG
 
__HAL_SYSCFG_CLEAR_FLAG


	)

1299 
	#__HAL_VREFINT_OUT_ENABLE
 
__HAL_SYSCFG_VREFINT_OUT_ENABLE


	)

1300 
	#__HAL_VREFINT_OUT_DISABLE
 
__HAL_SYSCFG_VREFINT_OUT_DISABLE


	)

1302 
	#SYSCFG_FLAG_VREF_READY
 
SYSCFG_FLAG_VREFINT_READY


	)

1303 
	#SYSCFG_FLAG_RC48
 
RCC_FLAG_HSI48


	)

1304 
	#IS_SYSCFG_FASTMODEPLUS_CONFIG
 
IS_I2C_FASTMODEPLUS


	)

1305 
	#UFB_MODE_BôNumbî
 
UFB_MODE_BIT_NUMBER


	)

1306 
	#CMP_PD_BôNumbî
 
CMP_PD_BIT_NUMBER


	)

1316 
	#__ADC_ENABLE
 
__HAL_ADC_ENABLE


	)

1317 
	#__ADC_DISABLE
 
__HAL_ADC_DISABLE


	)

1318 
	#__HAL_ADC_ENABLING_CONDITIONS
 
ADC_ENABLING_CONDITIONS


	)

1319 
	#__HAL_ADC_DISABLING_CONDITIONS
 
ADC_DISABLING_CONDITIONS


	)

1320 
	#__HAL_ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1321 
	#__ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1322 
	#__HAL_ADC_IS_SOFTWARE_START_REGULAR
 
ADC_IS_SOFTWARE_START_REGULAR


	)

1323 
	#__HAL_ADC_IS_SOFTWARE_START_INJECTED
 
ADC_IS_SOFTWARE_START_INJECTED


	)

1324 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
 
ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED


	)

1325 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR
 
ADC_IS_CONVERSION_ONGOING_REGULAR


	)

1326 
	#__HAL_ADC_IS_CONVERSION_ONGOING_INJECTED
 
ADC_IS_CONVERSION_ONGOING_INJECTED


	)

1327 
	#__HAL_ADC_IS_CONVERSION_ONGOING
 
ADC_IS_CONVERSION_ONGOING


	)

1328 
	#__HAL_ADC_CLEAR_ERRORCODE
 
ADC_CLEAR_ERRORCODE


	)

1330 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1331 
	#__HAL_ADC_JSQR_RK
 
ADC_JSQR_RK


	)

1332 
	#__HAL_ADC_CFGR_AWD1CH
 
ADC_CFGR_AWD1CH_SHIFT


	)

1333 
	#__HAL_ADC_CFGR_AWD23CR
 
ADC_CFGR_AWD23CR


	)

1334 
	#__HAL_ADC_CFGR_INJECT_AUTO_CONVERSION
 
ADC_CFGR_INJECT_AUTO_CONVERSION


	)

1335 
	#__HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE
 
ADC_CFGR_INJECT_CONTEXT_QUEUE


	)

1336 
	#__HAL_ADC_CFGR_INJECT_DISCCONTINUOUS
 
ADC_CFGR_INJECT_DISCCONTINUOUS


	)

1337 
	#__HAL_ADC_CFGR_REG_DISCCONTINUOUS
 
ADC_CFGR_REG_DISCCONTINUOUS


	)

1338 
	#__HAL_ADC_CFGR_DISCONTINUOUS_NUM
 
ADC_CFGR_DISCONTINUOUS_NUM


	)

1339 
	#__HAL_ADC_CFGR_AUTOWAIT
 
ADC_CFGR_AUTOWAIT


	)

1340 
	#__HAL_ADC_CFGR_CONTINUOUS
 
ADC_CFGR_CONTINUOUS


	)

1341 
	#__HAL_ADC_CFGR_OVERRUN
 
ADC_CFGR_OVERRUN


	)

1342 
	#__HAL_ADC_CFGR_DMACONTREQ
 
ADC_CFGR_DMACONTREQ


	)

1343 
	#__HAL_ADC_CFGR_EXTSEL
 
ADC_CFGR_EXTSEL_SET


	)

1344 
	#__HAL_ADC_JSQR_JEXTSEL
 
ADC_JSQR_JEXTSEL_SET


	)

1345 
	#__HAL_ADC_OFR_CHANNEL
 
ADC_OFR_CHANNEL


	)

1346 
	#__HAL_ADC_DIFSEL_CHANNEL
 
ADC_DIFSEL_CHANNEL


	)

1347 
	#__HAL_ADC_CALFACT_DIFF_SET
 
ADC_CALFACT_DIFF_SET


	)

1348 
	#__HAL_ADC_CALFACT_DIFF_GET
 
ADC_CALFACT_DIFF_GET


	)

1349 
	#__HAL_ADC_TRX_HIGHTHRESHOLD
 
ADC_TRX_HIGHTHRESHOLD


	)

1351 
	#__HAL_ADC_OFFSET_SHIFT_RESOLUTION
 
ADC_OFFSET_SHIFT_RESOLUTION


	)

1352 
	#__HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD1THRESHOLD_SHIFT_RESOLUTION


	)

1353 
	#__HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD23THRESHOLD_SHIFT_RESOLUTION


	)

1354 
	#__HAL_ADC_COMMON_REGISTER
 
ADC_COMMON_REGISTER


	)

1355 
	#__HAL_ADC_COMMON_CCR_MULTI
 
ADC_COMMON_CCR_MULTI


	)

1356 
	#__HAL_ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1357 
	#__ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1358 
	#__HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER
 
ADC_NONMULTIMODE_OR_MULTIMODEMASTER


	)

1359 
	#__HAL_ADC_COMMON_ADC_OTHER
 
ADC_COMMON_ADC_OTHER


	)

1360 
	#__HAL_ADC_MULTI_SLAVE
 
ADC_MULTI_SLAVE


	)

1362 
	#__HAL_ADC_SQR1_L
 
ADC_SQR1_L_SHIFT


	)

1363 
	#__HAL_ADC_JSQR_JL
 
ADC_JSQR_JL_SHIFT


	)

1364 
	#__HAL_ADC_JSQR_RK_JL
 
ADC_JSQR_RK_JL


	)

1365 
	#__HAL_ADC_CR1_DISCONTINUOUS_NUM
 
ADC_CR1_DISCONTINUOUS_NUM


	)

1366 
	#__HAL_ADC_CR1_SCAN
 
ADC_CR1_SCAN_SET


	)

1367 
	#__HAL_ADC_CONVCYCLES_MAX_RANGE
 
ADC_CONVCYCLES_MAX_RANGE


	)

1368 
	#__HAL_ADC_CLOCK_PRESCALER_RANGE
 
ADC_CLOCK_PRESCALER_RANGE


	)

1369 
	#__HAL_ADC_GET_CLOCK_PRESCALER
 
ADC_GET_CLOCK_PRESCALER


	)

1371 
	#__HAL_ADC_SQR1
 
ADC_SQR1


	)

1372 
	#__HAL_ADC_SMPR1
 
ADC_SMPR1


	)

1373 
	#__HAL_ADC_SMPR2
 
ADC_SMPR2


	)

1374 
	#__HAL_ADC_SQR3_RK
 
ADC_SQR3_RK


	)

1375 
	#__HAL_ADC_SQR2_RK
 
ADC_SQR2_RK


	)

1376 
	#__HAL_ADC_SQR1_RK
 
ADC_SQR1_RK


	)

1377 
	#__HAL_ADC_CR2_CONTINUOUS
 
ADC_CR2_CONTINUOUS


	)

1378 
	#__HAL_ADC_CR1_DISCONTINUOUS
 
ADC_CR1_DISCONTINUOUS


	)

1379 
	#__HAL_ADC_CR1_SCANCONV
 
ADC_CR1_SCANCONV


	)

1380 
	#__HAL_ADC_CR2_EOCSñe˘i⁄
 
ADC_CR2_EOCSñe˘i⁄


	)

1381 
	#__HAL_ADC_CR2_DMAC⁄tReq
 
ADC_CR2_DMAC⁄tReq


	)

1382 
	#__HAL_ADC_JSQR
 
ADC_JSQR


	)

1384 
	#__HAL_ADC_CHSELR_CHANNEL
 
ADC_CHSELR_CHANNEL


	)

1385 
	#__HAL_ADC_CFGR1_REG_DISCCONTINUOUS
 
ADC_CFGR1_REG_DISCCONTINUOUS


	)

1386 
	#__HAL_ADC_CFGR1_AUTOOFF
 
ADC_CFGR1_AUTOOFF


	)

1387 
	#__HAL_ADC_CFGR1_AUTOWAIT
 
ADC_CFGR1_AUTOWAIT


	)

1388 
	#__HAL_ADC_CFGR1_CONTINUOUS
 
ADC_CFGR1_CONTINUOUS


	)

1389 
	#__HAL_ADC_CFGR1_OVERRUN
 
ADC_CFGR1_OVERRUN


	)

1390 
	#__HAL_ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR


	)

1391 
	#__HAL_ADC_CFGR1_DMACONTREQ
 
ADC_CFGR1_DMACONTREQ


	)

1400 
	#__HAL_DHR12R1_ALIGNEMENT
 
DAC_DHR12R1_ALIGNMENT


	)

1401 
	#__HAL_DHR12R2_ALIGNEMENT
 
DAC_DHR12R2_ALIGNMENT


	)

1402 
	#__HAL_DHR12RD_ALIGNEMENT
 
DAC_DHR12RD_ALIGNMENT


	)

1403 
	#IS_DAC_GENERATE_WAVE
 
IS_DAC_WAVE


	)

1412 
	#__HAL_FREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM1


	)

1413 
	#__HAL_UNFREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM1


	)

1414 
	#__HAL_FREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM2


	)

1415 
	#__HAL_UNFREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM2


	)

1416 
	#__HAL_FREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM3


	)

1417 
	#__HAL_UNFREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM3


	)

1418 
	#__HAL_FREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM4


	)

1419 
	#__HAL_UNFREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM4


	)

1420 
	#__HAL_FREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM5


	)

1421 
	#__HAL_UNFREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM5


	)

1422 
	#__HAL_FREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM6


	)

1423 
	#__HAL_UNFREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM6


	)

1424 
	#__HAL_FREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM7


	)

1425 
	#__HAL_UNFREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM7


	)

1426 
	#__HAL_FREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM8


	)

1427 
	#__HAL_UNFREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM8


	)

1429 
	#__HAL_FREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM9


	)

1430 
	#__HAL_UNFREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM9


	)

1431 
	#__HAL_FREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM10


	)

1432 
	#__HAL_UNFREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM10


	)

1433 
	#__HAL_FREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM11


	)

1434 
	#__HAL_UNFREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM11


	)

1435 
	#__HAL_FREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM12


	)

1436 
	#__HAL_UNFREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM12


	)

1437 
	#__HAL_FREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM13


	)

1438 
	#__HAL_UNFREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM13


	)

1439 
	#__HAL_FREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM14


	)

1440 
	#__HAL_UNFREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM14


	)

1441 
	#__HAL_FREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN2


	)

1442 
	#__HAL_UNFREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN2


	)

1445 
	#__HAL_FREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM15


	)

1446 
	#__HAL_UNFREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM15


	)

1447 
	#__HAL_FREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM16


	)

1448 
	#__HAL_UNFREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM16


	)

1449 
	#__HAL_FREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM17


	)

1450 
	#__HAL_UNFREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM17


	)

1451 
	#__HAL_FREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_FREEZE_RTC


	)

1452 
	#__HAL_UNFREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_RTC


	)

1453 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG


	)

1454 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_WWDG


	)

1455 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG


	)

1456 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_IWDG


	)

1457 
	#__HAL_FREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT


	)

1458 
	#__HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT


	)

1459 
	#__HAL_FREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT


	)

1460 
	#__HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT


	)

1461 
	#__HAL_FREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT


	)

1462 
	#__HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT


	)

1463 
	#__HAL_FREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN1


	)

1464 
	#__HAL_UNFREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN1


	)

1465 
	#__HAL_FREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM1


	)

1466 
	#__HAL_UNFREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM1


	)

1467 
	#__HAL_FREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM2


	)

1468 
	#__HAL_UNFREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM2


	)

1477 #i‡
deföed
(
STM32F3
)

1478 
	#COMP_START
 
__HAL_COMP_ENABLE


	)

1479 
	#COMP_STOP
 
__HAL_COMP_DISABLE


	)

1480 
	#COMP_LOCK
 
__HAL_COMP_LOCK


	)

1482 #i‡
deföed
(
STM32F301x8
Ë|| deföed(
STM32F302x8
Ë|| deföed(
STM32F318xx
Ë|| deföed(
STM32F303x8
Ë|| deföed(
STM32F334x8
Ë|| deföed(
STM32F328xx
)

1483 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
(Ë: \

	)

1484 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1485 
__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

1486 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
(Ë: \

	)

1487 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1488 
__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

1489 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
(Ë: \

	)

1490 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1491 
__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

1492 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
(Ë: \

	)

1493 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1494 
__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

1495 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
(Ë: \

	)

1496 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1497 
__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

1498 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
(Ë: \

	)

1499 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1500 
__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

1501 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
(Ë: \

	)

1502 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1503 
__HAL_COMP_COMP6_EXTI_GET_FLAG
())

1504 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
(Ë: \

	)

1505 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1506 
__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

1508 #i‡
deföed
(
STM32F302xE
Ë|| deföed(
STM32F302xC
)

1509 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
(Ë: \

	)

1510 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1511 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1512 
__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

1513 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
(Ë: \

	)

1514 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1515 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1516 
__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

1517 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
(Ë: \

	)

1518 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1519 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1520 
__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

1521 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
(Ë: \

	)

1522 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1523 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1524 
__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

1525 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
(Ë: \

	)

1526 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1527 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1528 
__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

1529 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
(Ë: \

	)

1530 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1531 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1532 
__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

1533 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
(Ë: \

	)

1534 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1535 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1536 
__HAL_COMP_COMP6_EXTI_GET_FLAG
())

1537 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
(Ë: \

	)

1538 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1539 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1540 
__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

1542 #i‡
deföed
(
STM32F303xE
Ë|| deföed(
STM32F398xx
Ë|| deföed(
STM32F303xC
Ë|| deföed(
STM32F358xx
)

1543 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
(Ë: \

	)

1544 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1545 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE
() : \

1546 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1547 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE
() : \

1548 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
() : \

1549 
__HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE
())

1550 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
(Ë: \

	)

1551 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1552 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE
() : \

1553 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1554 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE
() : \

1555 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
() : \

1556 
__HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE
())

1557 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
(Ë: \

	)

1558 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1559 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE
() : \

1560 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1561 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE
() : \

1562 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
() : \

1563 
__HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE
())

1564 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
(Ë: \

	)

1565 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1566 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE
() : \

1567 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1568 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE
() : \

1569 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
() : \

1570 
__HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE
())

1571 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
(Ë: \

	)

1572 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1573 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_ENABLE_IT
() : \

1574 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1575 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_ENABLE_IT
() : \

1576 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_ENABLE_IT
() : \

1577 
__HAL_COMP_COMP7_EXTI_ENABLE_IT
())

1578 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
(Ë: \

	)

1579 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1580 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_DISABLE_IT
() : \

1581 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1582 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_DISABLE_IT
() : \

1583 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_DISABLE_IT
() : \

1584 
__HAL_COMP_COMP7_EXTI_DISABLE_IT
())

1585 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
(Ë: \

	)

1586 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1587 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_GET_FLAG
() : \

1588 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1589 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_GET_FLAG
() : \

1590 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_GET_FLAG
() : \

1591 
__HAL_COMP_COMP7_EXTI_GET_FLAG
())

1592 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
(Ë: \

	)

1593 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1594 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
__HAL_COMP_COMP3_EXTI_CLEAR_FLAG
() : \

1595 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1596 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
__HAL_COMP_COMP5_EXTI_CLEAR_FLAG
() : \

1597 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
() : \

1598 
__HAL_COMP_COMP7_EXTI_CLEAR_FLAG
())

1600 #i‡
deföed
(
STM32F373xC
Ë||deföed(
STM32F378xx
)

1601 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
(Ë: \

	)

1602 
__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

1603 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
(Ë: \

	)

1604 
__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

1605 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
(Ë: \

	)

1606 
__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

1607 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
(Ë: \

	)

1608 
__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

1609 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
(Ë: \

	)

1610 
__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

1611 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
(Ë: \

	)

1612 
__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

1613 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
(Ë: \

	)

1614 
__HAL_COMP_COMP2_EXTI_GET_FLAG
())

1615 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
(Ë: \

	)

1616 
__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

1619 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
(Ë: \

	)

1620 
__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

1621 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
(Ë: \

	)

1622 
__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

1623 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
(Ë: \

	)

1624 
__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

1625 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
(Ë: \

	)

1626 
__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

1627 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
(Ë: \

	)

1628 
__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

1629 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
(Ë: \

	)

1630 
__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

1631 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
(Ë: \

	)

1632 
__HAL_COMP_COMP2_EXTI_GET_FLAG
())

1633 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
(Ë: \

	)

1634 
__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

1637 
	#__HAL_COMP_GET_EXTI_LINE
 
COMP_GET_EXTI_LINE


	)

1639 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

1644 
	#__HAL_COMP_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
	`__HAL_COMP_IS_LOCKED
(__HANDLE__))

	)

1650 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

1654 
	#HAL_COMP_Sèπ_IT
 
HAL_COMP_Sèπ


	)

1655 
	#HAL_COMP_St›_IT
 
HAL_COMP_St›


	)

1665 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WAVE_NONE
Ë|| \

	)

1666 ((
WAVE
Ë=
DAC_WAVE_NOISE
)|| \

1667 ((
WAVE
Ë=
DAC_WAVE_TRIANGLE
))

1677 
	#IS_WRPAREA
 
IS_OB_WRPAREA


	)

1678 
	#IS_TYPEPROGRAM
 
IS_FLASH_TYPEPROGRAM


	)

1679 
	#IS_TYPEPROGRAMFLASH
 
IS_FLASH_TYPEPROGRAM


	)

1680 
	#IS_TYPEERASE
 
IS_FLASH_TYPEERASE


	)

1681 
	#IS_NBSECTORS
 
IS_FLASH_NBSECTORS


	)

1682 
	#IS_OB_WDG_SOURCE
 
IS_OB_IWDG_SOURCE


	)

1692 
	#__HAL_I2C_RESET_CR2
 
I2C_RESET_CR2


	)

1693 
	#__HAL_I2C_GENERATE_START
 
I2C_GENERATE_START


	)

1694 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQ_RANGE


	)

1695 
	#__HAL_I2C_RISE_TIME
 
I2C_RISE_TIME


	)

1696 
	#__HAL_I2C_SPEED_STANDARD
 
I2C_SPEED_STANDARD


	)

1697 
	#__HAL_I2C_SPEED_FAST
 
I2C_SPEED_FAST


	)

1698 
	#__HAL_I2C_SPEED
 
I2C_SPEED


	)

1699 
	#__HAL_I2C_7BIT_ADD_WRITE
 
I2C_7BIT_ADD_WRITE


	)

1700 
	#__HAL_I2C_7BIT_ADD_READ
 
I2C_7BIT_ADD_READ


	)

1701 
	#__HAL_I2C_10BIT_ADDRESS
 
I2C_10BIT_ADDRESS


	)

1702 
	#__HAL_I2C_10BIT_HEADER_WRITE
 
I2C_10BIT_HEADER_WRITE


	)

1703 
	#__HAL_I2C_10BIT_HEADER_READ
 
I2C_10BIT_HEADER_READ


	)

1704 
	#__HAL_I2C_MEM_ADD_MSB
 
I2C_MEM_ADD_MSB


	)

1705 
	#__HAL_I2C_MEM_ADD_LSB
 
I2C_MEM_ADD_LSB


	)

1706 
	#__HAL_I2C_FREQRANGE
 
I2C_FREQRANGE


	)

1715 
	#IS_I2S_INSTANCE
 
IS_I2S_ALL_INSTANCE


	)

1716 
	#IS_I2S_INSTANCE_EXT
 
IS_I2S_ALL_INSTANCE_EXT


	)

1726 
	#__IRDA_DISABLE
 
__HAL_IRDA_DISABLE


	)

1727 
	#__IRDA_ENABLE
 
__HAL_IRDA_ENABLE


	)

1729 
	#__HAL_IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

1730 
	#__HAL_IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

1731 
	#__IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

1732 
	#__IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

1734 
	#IS_IRDA_ONEBIT_SAMPLE
 
IS_IRDA_ONE_BIT_SAMPLE


	)

1745 
	#__HAL_IWDG_ENABLE_WRITE_ACCESS
 
IWDG_ENABLE_WRITE_ACCESS


	)

1746 
	#__HAL_IWDG_DISABLE_WRITE_ACCESS
 
IWDG_DISABLE_WRITE_ACCESS


	)

1756 
	#__HAL_LPTIM_ENABLE_INTERRUPT
 
__HAL_LPTIM_ENABLE_IT


	)

1757 
	#__HAL_LPTIM_DISABLE_INTERRUPT
 
__HAL_LPTIM_DISABLE_IT


	)

1758 
	#__HAL_LPTIM_GET_ITSTATUS
 
__HAL_LPTIM_GET_IT_SOURCE


	)

1768 
	#__OPAMP_CSR_OPAXPD
 
OPAMP_CSR_OPAXPD


	)

1769 
	#__OPAMP_CSR_S3SELX
 
OPAMP_CSR_S3SELX


	)

1770 
	#__OPAMP_CSR_S4SELX
 
OPAMP_CSR_S4SELX


	)

1771 
	#__OPAMP_CSR_S5SELX
 
OPAMP_CSR_S5SELX


	)

1772 
	#__OPAMP_CSR_S6SELX
 
OPAMP_CSR_S6SELX


	)

1773 
	#__OPAMP_CSR_OPAXCAL_L
 
OPAMP_CSR_OPAXCAL_L


	)

1774 
	#__OPAMP_CSR_OPAXCAL_H
 
OPAMP_CSR_OPAXCAL_H


	)

1775 
	#__OPAMP_CSR_OPAXLPM
 
OPAMP_CSR_OPAXLPM


	)

1776 
	#__OPAMP_CSR_ALL_SWITCHES
 
OPAMP_CSR_ALL_SWITCHES


	)

1777 
	#__OPAMP_CSR_ANAWSELX
 
OPAMP_CSR_ANAWSELX


	)

1778 
	#__OPAMP_CSR_OPAXCALOUT
 
OPAMP_CSR_OPAXCALOUT


	)

1779 
	#__OPAMP_OFFSET_TRIM_BITSPOSITION
 
OPAMP_OFFSET_TRIM_BITSPOSITION


	)

1780 
	#__OPAMP_OFFSET_TRIM_SET
 
OPAMP_OFFSET_TRIM_SET


	)

1790 
	#__HAL_PVD_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

1791 
	#__HAL_PVD_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

1792 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

1793 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1794 
	#__HAL_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

1795 
	#__HAL_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1796 
	#__HAL_PVM_EVENT_DISABLE
 
__HAL_PWR_PVM_EVENT_DISABLE


	)

1797 
	#__HAL_PVM_EVENT_ENABLE
 
__HAL_PWR_PVM_EVENT_ENABLE


	)

1798 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE


	)

1799 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE


	)

1800 
	#__HAL_PVM_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE


	)

1801 
	#__HAL_PVM_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE


	)

1802 
	#__HAL_PWR_INTERNALWAKEUP_DISABLE
 
HAL_PWREx_DißbÀI¡î«lWakeUpLöe


	)

1803 
	#__HAL_PWR_INTERNALWAKEUP_ENABLE
 
HAL_PWREx_E«bÀI¡î«lWakeUpLöe


	)

1804 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE
 
HAL_PWREx_DißbÀPuŒUpPuŒDownC⁄fig


	)

1805 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE
 
HAL_PWREx_E«bÀPuŒUpPuŒDownC⁄fig


	)

1806 
	#__HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER
(Ëdÿ{ 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(); } 0)

	)

1807 
	#__HAL_PWR_PVD_EXTI_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

1808 
	#__HAL_PWR_PVD_EXTI_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

1809 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

1810 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1811 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

1812 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1813 
	#__HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1814 
	#__HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1815 
	#__HAL_PWR_PVM_DISABLE
(Ëdÿ{ 
	`HAL_PWREx_DißbÀPVM1
();
	`HAL_PWREx_DißbÀPVM2
();
	`HAL_PWREx_DißbÀPVM3
();
	`HAL_PWREx_DißbÀPVM4
(); } 0)

	)

1816 
	#__HAL_PWR_PVM_ENABLE
(Ëdÿ{ 
	`HAL_PWREx_E«bÀPVM1
();
	`HAL_PWREx_E«bÀPVM2
();
	`HAL_PWREx_E«bÀPVM3
();
	`HAL_PWREx_E«bÀPVM4
(); } 0)

	)

1817 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE
 
HAL_PWREx_DißbÀSRAM2C⁄ã¡Rëíti⁄


	)

1818 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE
 
HAL_PWREx_E«bÀSRAM2C⁄ã¡Rëíti⁄


	)

1819 
	#__HAL_PWR_VDDIO2_DISABLE
 
HAL_PWREx_DißbÀVddIO2


	)

1820 
	#__HAL_PWR_VDDIO2_ENABLE
 
HAL_PWREx_E«bÀVddIO2


	)

1821 
	#__HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE


	)

1822 
	#__HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE


	)

1823 
	#__HAL_PWR_VDDUSB_DISABLE
 
HAL_PWREx_DißbÀVddUSB


	)

1824 
	#__HAL_PWR_VDDUSB_ENABLE
 
HAL_PWREx_E«bÀVddUSB


	)

1826 #i‡
deföed
 (
STM32F4
)

1827 
	#__HAL_PVD_EXTI_ENABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
()

	)

1828 
	#__HAL_PVD_EXTI_DISABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
()

	)

1829 
	#__HAL_PVD_EXTI_GET_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GET_FLAG
()

	)

1830 
	#__HAL_PVD_EXTI_CLEAR_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
()

	)

1831 
	#__HAL_PVD_EXTI_GENERATE_SWIT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GENERATE_SWIT
()

	)

1833 
	#__HAL_PVD_EXTI_CLEAR_FLAG
 
__HAL_PWR_PVD_EXTI_CLEAR_FLAG


	)

1834 
	#__HAL_PVD_EXTI_DISABLE_IT
 
__HAL_PWR_PVD_EXTI_DISABLE_IT


	)

1835 
	#__HAL_PVD_EXTI_ENABLE_IT
 
__HAL_PWR_PVD_EXTI_ENABLE_IT


	)

1836 
	#__HAL_PVD_EXTI_GENERATE_SWIT
 
__HAL_PWR_PVD_EXTI_GENERATE_SWIT


	)

1837 
	#__HAL_PVD_EXTI_GET_FLAG
 
__HAL_PWR_PVD_EXTI_GET_FLAG


	)

1848 
	#RCC_St›WakeUpClock_MSI
 
RCC_STOP_WAKEUPCLOCK_MSI


	)

1849 
	#RCC_St›WakeUpClock_HSI
 
RCC_STOP_WAKEUPCLOCK_HSI


	)

1851 
	#HAL_RCC_CCSCÆlback
 
HAL_RCC_CSSCÆlback


	)

1852 
	#HAL_RC48_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_RCCEx_E«bÀHSI48_VREFINT
(Ë: 
	`HAL_RCCEx_DißbÀHSI48_VREFINT
())

	)

1854 
	#__ADC_CLK_DISABLE
 
__HAL_RCC_ADC_CLK_DISABLE


	)

1855 
	#__ADC_CLK_ENABLE
 
__HAL_RCC_ADC_CLK_ENABLE


	)

1856 
	#__ADC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC_CLK_SLEEP_DISABLE


	)

1857 
	#__ADC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC_CLK_SLEEP_ENABLE


	)

1858 
	#__ADC_FORCE_RESET
 
__HAL_RCC_ADC_FORCE_RESET


	)

1859 
	#__ADC_RELEASE_RESET
 
__HAL_RCC_ADC_RELEASE_RESET


	)

1860 
	#__ADC1_CLK_DISABLE
 
__HAL_RCC_ADC1_CLK_DISABLE


	)

1861 
	#__ADC1_CLK_ENABLE
 
__HAL_RCC_ADC1_CLK_ENABLE


	)

1862 
	#__ADC1_FORCE_RESET
 
__HAL_RCC_ADC1_FORCE_RESET


	)

1863 
	#__ADC1_RELEASE_RESET
 
__HAL_RCC_ADC1_RELEASE_RESET


	)

1864 
	#__ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_ENABLE


	)

1865 
	#__ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_DISABLE


	)

1866 
	#__ADC2_CLK_DISABLE
 
__HAL_RCC_ADC2_CLK_DISABLE


	)

1867 
	#__ADC2_CLK_ENABLE
 
__HAL_RCC_ADC2_CLK_ENABLE


	)

1868 
	#__ADC2_FORCE_RESET
 
__HAL_RCC_ADC2_FORCE_RESET


	)

1869 
	#__ADC2_RELEASE_RESET
 
__HAL_RCC_ADC2_RELEASE_RESET


	)

1870 
	#__ADC3_CLK_DISABLE
 
__HAL_RCC_ADC3_CLK_DISABLE


	)

1871 
	#__ADC3_CLK_ENABLE
 
__HAL_RCC_ADC3_CLK_ENABLE


	)

1872 
	#__ADC3_FORCE_RESET
 
__HAL_RCC_ADC3_FORCE_RESET


	)

1873 
	#__ADC3_RELEASE_RESET
 
__HAL_RCC_ADC3_RELEASE_RESET


	)

1874 
	#__AES_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

1875 
	#__AES_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

1876 
	#__AES_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

1877 
	#__AES_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

1878 
	#__AES_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

1879 
	#__AES_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

1880 
	#__CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_ENABLE


	)

1881 
	#__CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_DISABLE


	)

1882 
	#__CRYP_CLK_ENABLE
 
__HAL_RCC_CRYP_CLK_ENABLE


	)

1883 
	#__CRYP_CLK_DISABLE
 
__HAL_RCC_CRYP_CLK_DISABLE


	)

1884 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

1885 
	#__CRYP_RELEASE_RESET
 
__HAL_RCC_CRYP_RELEASE_RESET


	)

1886 
	#__AFIO_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

1887 
	#__AFIO_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

1888 
	#__AFIO_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

1889 
	#__AFIO_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

1890 
	#__AHB_FORCE_RESET
 
__HAL_RCC_AHB_FORCE_RESET


	)

1891 
	#__AHB_RELEASE_RESET
 
__HAL_RCC_AHB_RELEASE_RESET


	)

1892 
	#__AHB1_FORCE_RESET
 
__HAL_RCC_AHB1_FORCE_RESET


	)

1893 
	#__AHB1_RELEASE_RESET
 
__HAL_RCC_AHB1_RELEASE_RESET


	)

1894 
	#__AHB2_FORCE_RESET
 
__HAL_RCC_AHB2_FORCE_RESET


	)

1895 
	#__AHB2_RELEASE_RESET
 
__HAL_RCC_AHB2_RELEASE_RESET


	)

1896 
	#__AHB3_FORCE_RESET
 
__HAL_RCC_AHB3_FORCE_RESET


	)

1897 
	#__AHB3_RELEASE_RESET
 
__HAL_RCC_AHB3_RELEASE_RESET


	)

1898 
	#__APB1_FORCE_RESET
 
__HAL_RCC_APB1_FORCE_RESET


	)

1899 
	#__APB1_RELEASE_RESET
 
__HAL_RCC_APB1_RELEASE_RESET


	)

1900 
	#__APB2_FORCE_RESET
 
__HAL_RCC_APB2_FORCE_RESET


	)

1901 
	#__APB2_RELEASE_RESET
 
__HAL_RCC_APB2_RELEASE_RESET


	)

1902 
	#__BKP_CLK_DISABLE
 
__HAL_RCC_BKP_CLK_DISABLE


	)

1903 
	#__BKP_CLK_ENABLE
 
__HAL_RCC_BKP_CLK_ENABLE


	)

1904 
	#__BKP_FORCE_RESET
 
__HAL_RCC_BKP_FORCE_RESET


	)

1905 
	#__BKP_RELEASE_RESET
 
__HAL_RCC_BKP_RELEASE_RESET


	)

1906 
	#__CAN1_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

1907 
	#__CAN1_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

1908 
	#__CAN1_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_DISABLE


	)

1909 
	#__CAN1_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_ENABLE


	)

1910 
	#__CAN1_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

1911 
	#__CAN1_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

1912 
	#__CAN_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

1913 
	#__CAN_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

1914 
	#__CAN_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

1915 
	#__CAN_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

1916 
	#__CAN2_CLK_DISABLE
 
__HAL_RCC_CAN2_CLK_DISABLE


	)

1917 
	#__CAN2_CLK_ENABLE
 
__HAL_RCC_CAN2_CLK_ENABLE


	)

1918 
	#__CAN2_FORCE_RESET
 
__HAL_RCC_CAN2_FORCE_RESET


	)

1919 
	#__CAN2_RELEASE_RESET
 
__HAL_RCC_CAN2_RELEASE_RESET


	)

1920 
	#__CEC_CLK_DISABLE
 
__HAL_RCC_CEC_CLK_DISABLE


	)

1921 
	#__CEC_CLK_ENABLE
 
__HAL_RCC_CEC_CLK_ENABLE


	)

1922 
	#__COMP_CLK_DISABLE
 
__HAL_RCC_COMP_CLK_DISABLE


	)

1923 
	#__COMP_CLK_ENABLE
 
__HAL_RCC_COMP_CLK_ENABLE


	)

1924 
	#__COMP_FORCE_RESET
 
__HAL_RCC_COMP_FORCE_RESET


	)

1925 
	#__COMP_RELEASE_RESET
 
__HAL_RCC_COMP_RELEASE_RESET


	)

1926 
	#__COMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_COMP_CLK_SLEEP_ENABLE


	)

1927 
	#__COMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_COMP_CLK_SLEEP_DISABLE


	)

1928 
	#__CEC_FORCE_RESET
 
__HAL_RCC_CEC_FORCE_RESET


	)

1929 
	#__CEC_RELEASE_RESET
 
__HAL_RCC_CEC_RELEASE_RESET


	)

1930 
	#__CRC_CLK_DISABLE
 
__HAL_RCC_CRC_CLK_DISABLE


	)

1931 
	#__CRC_CLK_ENABLE
 
__HAL_RCC_CRC_CLK_ENABLE


	)

1932 
	#__CRC_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRC_CLK_SLEEP_DISABLE


	)

1933 
	#__CRC_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRC_CLK_SLEEP_ENABLE


	)

1934 
	#__CRC_FORCE_RESET
 
__HAL_RCC_CRC_FORCE_RESET


	)

1935 
	#__CRC_RELEASE_RESET
 
__HAL_RCC_CRC_RELEASE_RESET


	)

1936 
	#__DAC_CLK_DISABLE
 
__HAL_RCC_DAC_CLK_DISABLE


	)

1937 
	#__DAC_CLK_ENABLE
 
__HAL_RCC_DAC_CLK_ENABLE


	)

1938 
	#__DAC_FORCE_RESET
 
__HAL_RCC_DAC_FORCE_RESET


	)

1939 
	#__DAC_RELEASE_RESET
 
__HAL_RCC_DAC_RELEASE_RESET


	)

1940 
	#__DAC1_CLK_DISABLE
 
__HAL_RCC_DAC1_CLK_DISABLE


	)

1941 
	#__DAC1_CLK_ENABLE
 
__HAL_RCC_DAC1_CLK_ENABLE


	)

1942 
	#__DAC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_DISABLE


	)

1943 
	#__DAC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_ENABLE


	)

1944 
	#__DAC1_FORCE_RESET
 
__HAL_RCC_DAC1_FORCE_RESET


	)

1945 
	#__DAC1_RELEASE_RESET
 
__HAL_RCC_DAC1_RELEASE_RESET


	)

1946 
	#__DBGMCU_CLK_ENABLE
 
__HAL_RCC_DBGMCU_CLK_ENABLE


	)

1947 
	#__DBGMCU_CLK_DISABLE
 
__HAL_RCC_DBGMCU_CLK_DISABLE


	)

1948 
	#__DBGMCU_FORCE_RESET
 
__HAL_RCC_DBGMCU_FORCE_RESET


	)

1949 
	#__DBGMCU_RELEASE_RESET
 
__HAL_RCC_DBGMCU_RELEASE_RESET


	)

1950 
	#__DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM_CLK_DISABLE


	)

1951 
	#__DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM_CLK_ENABLE


	)

1952 
	#__DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE


	)

1953 
	#__DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE


	)

1954 
	#__DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM_FORCE_RESET


	)

1955 
	#__DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM_RELEASE_RESET


	)

1956 
	#__DMA1_CLK_DISABLE
 
__HAL_RCC_DMA1_CLK_DISABLE


	)

1957 
	#__DMA1_CLK_ENABLE
 
__HAL_RCC_DMA1_CLK_ENABLE


	)

1958 
	#__DMA1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_DISABLE


	)

1959 
	#__DMA1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_ENABLE


	)

1960 
	#__DMA1_FORCE_RESET
 
__HAL_RCC_DMA1_FORCE_RESET


	)

1961 
	#__DMA1_RELEASE_RESET
 
__HAL_RCC_DMA1_RELEASE_RESET


	)

1962 
	#__DMA2_CLK_DISABLE
 
__HAL_RCC_DMA2_CLK_DISABLE


	)

1963 
	#__DMA2_CLK_ENABLE
 
__HAL_RCC_DMA2_CLK_ENABLE


	)

1964 
	#__DMA2_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_DISABLE


	)

1965 
	#__DMA2_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_ENABLE


	)

1966 
	#__DMA2_FORCE_RESET
 
__HAL_RCC_DMA2_FORCE_RESET


	)

1967 
	#__DMA2_RELEASE_RESET
 
__HAL_RCC_DMA2_RELEASE_RESET


	)

1968 
	#__ETHMAC_CLK_DISABLE
 
__HAL_RCC_ETHMAC_CLK_DISABLE


	)

1969 
	#__ETHMAC_CLK_ENABLE
 
__HAL_RCC_ETHMAC_CLK_ENABLE


	)

1970 
	#__ETHMAC_FORCE_RESET
 
__HAL_RCC_ETHMAC_FORCE_RESET


	)

1971 
	#__ETHMAC_RELEASE_RESET
 
__HAL_RCC_ETHMAC_RELEASE_RESET


	)

1972 
	#__ETHMACRX_CLK_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_DISABLE


	)

1973 
	#__ETHMACRX_CLK_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_ENABLE


	)

1974 
	#__ETHMACTX_CLK_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_DISABLE


	)

1975 
	#__ETHMACTX_CLK_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_ENABLE


	)

1976 
	#__FIREWALL_CLK_DISABLE
 
__HAL_RCC_FIREWALL_CLK_DISABLE


	)

1977 
	#__FIREWALL_CLK_ENABLE
 
__HAL_RCC_FIREWALL_CLK_ENABLE


	)

1978 
	#__FLASH_CLK_DISABLE
 
__HAL_RCC_FLASH_CLK_DISABLE


	)

1979 
	#__FLASH_CLK_ENABLE
 
__HAL_RCC_FLASH_CLK_ENABLE


	)

1980 
	#__FLASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_DISABLE


	)

1981 
	#__FLASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_ENABLE


	)

1982 
	#__FLASH_FORCE_RESET
 
__HAL_RCC_FLASH_FORCE_RESET


	)

1983 
	#__FLASH_RELEASE_RESET
 
__HAL_RCC_FLASH_RELEASE_RESET


	)

1984 
	#__FLITF_CLK_DISABLE
 
__HAL_RCC_FLITF_CLK_DISABLE


	)

1985 
	#__FLITF_CLK_ENABLE
 
__HAL_RCC_FLITF_CLK_ENABLE


	)

1986 
	#__FLITF_FORCE_RESET
 
__HAL_RCC_FLITF_FORCE_RESET


	)

1987 
	#__FLITF_RELEASE_RESET
 
__HAL_RCC_FLITF_RELEASE_RESET


	)

1988 
	#__FLITF_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_ENABLE


	)

1989 
	#__FLITF_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_DISABLE


	)

1990 
	#__FMC_CLK_DISABLE
 
__HAL_RCC_FMC_CLK_DISABLE


	)

1991 
	#__FMC_CLK_ENABLE
 
__HAL_RCC_FMC_CLK_ENABLE


	)

1992 
	#__FMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FMC_CLK_SLEEP_DISABLE


	)

1993 
	#__FMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FMC_CLK_SLEEP_ENABLE


	)

1994 
	#__FMC_FORCE_RESET
 
__HAL_RCC_FMC_FORCE_RESET


	)

1995 
	#__FMC_RELEASE_RESET
 
__HAL_RCC_FMC_RELEASE_RESET


	)

1996 
	#__FSMC_CLK_DISABLE
 
__HAL_RCC_FSMC_CLK_DISABLE


	)

1997 
	#__FSMC_CLK_ENABLE
 
__HAL_RCC_FSMC_CLK_ENABLE


	)

1998 
	#__GPIOA_CLK_DISABLE
 
__HAL_RCC_GPIOA_CLK_DISABLE


	)

1999 
	#__GPIOA_CLK_ENABLE
 
__HAL_RCC_GPIOA_CLK_ENABLE


	)

2000 
	#__GPIOA_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE


	)

2001 
	#__GPIOA_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE


	)

2002 
	#__GPIOA_FORCE_RESET
 
__HAL_RCC_GPIOA_FORCE_RESET


	)

2003 
	#__GPIOA_RELEASE_RESET
 
__HAL_RCC_GPIOA_RELEASE_RESET


	)

2004 
	#__GPIOB_CLK_DISABLE
 
__HAL_RCC_GPIOB_CLK_DISABLE


	)

2005 
	#__GPIOB_CLK_ENABLE
 
__HAL_RCC_GPIOB_CLK_ENABLE


	)

2006 
	#__GPIOB_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE


	)

2007 
	#__GPIOB_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE


	)

2008 
	#__GPIOB_FORCE_RESET
 
__HAL_RCC_GPIOB_FORCE_RESET


	)

2009 
	#__GPIOB_RELEASE_RESET
 
__HAL_RCC_GPIOB_RELEASE_RESET


	)

2010 
	#__GPIOC_CLK_DISABLE
 
__HAL_RCC_GPIOC_CLK_DISABLE


	)

2011 
	#__GPIOC_CLK_ENABLE
 
__HAL_RCC_GPIOC_CLK_ENABLE


	)

2012 
	#__GPIOC_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE


	)

2013 
	#__GPIOC_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE


	)

2014 
	#__GPIOC_FORCE_RESET
 
__HAL_RCC_GPIOC_FORCE_RESET


	)

2015 
	#__GPIOC_RELEASE_RESET
 
__HAL_RCC_GPIOC_RELEASE_RESET


	)

2016 
	#__GPIOD_CLK_DISABLE
 
__HAL_RCC_GPIOD_CLK_DISABLE


	)

2017 
	#__GPIOD_CLK_ENABLE
 
__HAL_RCC_GPIOD_CLK_ENABLE


	)

2018 
	#__GPIOD_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE


	)

2019 
	#__GPIOD_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE


	)

2020 
	#__GPIOD_FORCE_RESET
 
__HAL_RCC_GPIOD_FORCE_RESET


	)

2021 
	#__GPIOD_RELEASE_RESET
 
__HAL_RCC_GPIOD_RELEASE_RESET


	)

2022 
	#__GPIOE_CLK_DISABLE
 
__HAL_RCC_GPIOE_CLK_DISABLE


	)

2023 
	#__GPIOE_CLK_ENABLE
 
__HAL_RCC_GPIOE_CLK_ENABLE


	)

2024 
	#__GPIOE_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE


	)

2025 
	#__GPIOE_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE


	)

2026 
	#__GPIOE_FORCE_RESET
 
__HAL_RCC_GPIOE_FORCE_RESET


	)

2027 
	#__GPIOE_RELEASE_RESET
 
__HAL_RCC_GPIOE_RELEASE_RESET


	)

2028 
	#__GPIOF_CLK_DISABLE
 
__HAL_RCC_GPIOF_CLK_DISABLE


	)

2029 
	#__GPIOF_CLK_ENABLE
 
__HAL_RCC_GPIOF_CLK_ENABLE


	)

2030 
	#__GPIOF_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE


	)

2031 
	#__GPIOF_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE


	)

2032 
	#__GPIOF_FORCE_RESET
 
__HAL_RCC_GPIOF_FORCE_RESET


	)

2033 
	#__GPIOF_RELEASE_RESET
 
__HAL_RCC_GPIOF_RELEASE_RESET


	)

2034 
	#__GPIOG_CLK_DISABLE
 
__HAL_RCC_GPIOG_CLK_DISABLE


	)

2035 
	#__GPIOG_CLK_ENABLE
 
__HAL_RCC_GPIOG_CLK_ENABLE


	)

2036 
	#__GPIOG_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE


	)

2037 
	#__GPIOG_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE


	)

2038 
	#__GPIOG_FORCE_RESET
 
__HAL_RCC_GPIOG_FORCE_RESET


	)

2039 
	#__GPIOG_RELEASE_RESET
 
__HAL_RCC_GPIOG_RELEASE_RESET


	)

2040 
	#__GPIOH_CLK_DISABLE
 
__HAL_RCC_GPIOH_CLK_DISABLE


	)

2041 
	#__GPIOH_CLK_ENABLE
 
__HAL_RCC_GPIOH_CLK_ENABLE


	)

2042 
	#__GPIOH_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE


	)

2043 
	#__GPIOH_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE


	)

2044 
	#__GPIOH_FORCE_RESET
 
__HAL_RCC_GPIOH_FORCE_RESET


	)

2045 
	#__GPIOH_RELEASE_RESET
 
__HAL_RCC_GPIOH_RELEASE_RESET


	)

2046 
	#__I2C1_CLK_DISABLE
 
__HAL_RCC_I2C1_CLK_DISABLE


	)

2047 
	#__I2C1_CLK_ENABLE
 
__HAL_RCC_I2C1_CLK_ENABLE


	)

2048 
	#__I2C1_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_DISABLE


	)

2049 
	#__I2C1_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_ENABLE


	)

2050 
	#__I2C1_FORCE_RESET
 
__HAL_RCC_I2C1_FORCE_RESET


	)

2051 
	#__I2C1_RELEASE_RESET
 
__HAL_RCC_I2C1_RELEASE_RESET


	)

2052 
	#__I2C2_CLK_DISABLE
 
__HAL_RCC_I2C2_CLK_DISABLE


	)

2053 
	#__I2C2_CLK_ENABLE
 
__HAL_RCC_I2C2_CLK_ENABLE


	)

2054 
	#__I2C2_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_DISABLE


	)

2055 
	#__I2C2_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_ENABLE


	)

2056 
	#__I2C2_FORCE_RESET
 
__HAL_RCC_I2C2_FORCE_RESET


	)

2057 
	#__I2C2_RELEASE_RESET
 
__HAL_RCC_I2C2_RELEASE_RESET


	)

2058 
	#__I2C3_CLK_DISABLE
 
__HAL_RCC_I2C3_CLK_DISABLE


	)

2059 
	#__I2C3_CLK_ENABLE
 
__HAL_RCC_I2C3_CLK_ENABLE


	)

2060 
	#__I2C3_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_DISABLE


	)

2061 
	#__I2C3_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_ENABLE


	)

2062 
	#__I2C3_FORCE_RESET
 
__HAL_RCC_I2C3_FORCE_RESET


	)

2063 
	#__I2C3_RELEASE_RESET
 
__HAL_RCC_I2C3_RELEASE_RESET


	)

2064 
	#__LCD_CLK_DISABLE
 
__HAL_RCC_LCD_CLK_DISABLE


	)

2065 
	#__LCD_CLK_ENABLE
 
__HAL_RCC_LCD_CLK_ENABLE


	)

2066 
	#__LCD_CLK_SLEEP_DISABLE
 
__HAL_RCC_LCD_CLK_SLEEP_DISABLE


	)

2067 
	#__LCD_CLK_SLEEP_ENABLE
 
__HAL_RCC_LCD_CLK_SLEEP_ENABLE


	)

2068 
	#__LCD_FORCE_RESET
 
__HAL_RCC_LCD_FORCE_RESET


	)

2069 
	#__LCD_RELEASE_RESET
 
__HAL_RCC_LCD_RELEASE_RESET


	)

2070 
	#__LPTIM1_CLK_DISABLE
 
__HAL_RCC_LPTIM1_CLK_DISABLE


	)

2071 
	#__LPTIM1_CLK_ENABLE
 
__HAL_RCC_LPTIM1_CLK_ENABLE


	)

2072 
	#__LPTIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE


	)

2073 
	#__LPTIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE


	)

2074 
	#__LPTIM1_FORCE_RESET
 
__HAL_RCC_LPTIM1_FORCE_RESET


	)

2075 
	#__LPTIM1_RELEASE_RESET
 
__HAL_RCC_LPTIM1_RELEASE_RESET


	)

2076 
	#__LPTIM2_CLK_DISABLE
 
__HAL_RCC_LPTIM2_CLK_DISABLE


	)

2077 
	#__LPTIM2_CLK_ENABLE
 
__HAL_RCC_LPTIM2_CLK_ENABLE


	)

2078 
	#__LPTIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE


	)

2079 
	#__LPTIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE


	)

2080 
	#__LPTIM2_FORCE_RESET
 
__HAL_RCC_LPTIM2_FORCE_RESET


	)

2081 
	#__LPTIM2_RELEASE_RESET
 
__HAL_RCC_LPTIM2_RELEASE_RESET


	)

2082 
	#__LPUART1_CLK_DISABLE
 
__HAL_RCC_LPUART1_CLK_DISABLE


	)

2083 
	#__LPUART1_CLK_ENABLE
 
__HAL_RCC_LPUART1_CLK_ENABLE


	)

2084 
	#__LPUART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE


	)

2085 
	#__LPUART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE


	)

2086 
	#__LPUART1_FORCE_RESET
 
__HAL_RCC_LPUART1_FORCE_RESET


	)

2087 
	#__LPUART1_RELEASE_RESET
 
__HAL_RCC_LPUART1_RELEASE_RESET


	)

2088 
	#__OPAMP_CLK_DISABLE
 
__HAL_RCC_OPAMP_CLK_DISABLE


	)

2089 
	#__OPAMP_CLK_ENABLE
 
__HAL_RCC_OPAMP_CLK_ENABLE


	)

2090 
	#__OPAMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE


	)

2091 
	#__OPAMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE


	)

2092 
	#__OPAMP_FORCE_RESET
 
__HAL_RCC_OPAMP_FORCE_RESET


	)

2093 
	#__OPAMP_RELEASE_RESET
 
__HAL_RCC_OPAMP_RELEASE_RESET


	)

2094 
	#__OTGFS_CLK_DISABLE
 
__HAL_RCC_OTGFS_CLK_DISABLE


	)

2095 
	#__OTGFS_CLK_ENABLE
 
__HAL_RCC_OTGFS_CLK_ENABLE


	)

2096 
	#__OTGFS_CLK_SLEEP_DISABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE


	)

2097 
	#__OTGFS_CLK_SLEEP_ENABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE


	)

2098 
	#__OTGFS_FORCE_RESET
 
__HAL_RCC_OTGFS_FORCE_RESET


	)

2099 
	#__OTGFS_RELEASE_RESET
 
__HAL_RCC_OTGFS_RELEASE_RESET


	)

2100 
	#__PWR_CLK_DISABLE
 
__HAL_RCC_PWR_CLK_DISABLE


	)

2101 
	#__PWR_CLK_ENABLE
 
__HAL_RCC_PWR_CLK_ENABLE


	)

2102 
	#__PWR_CLK_SLEEP_DISABLE
 
__HAL_RCC_PWR_CLK_SLEEP_DISABLE


	)

2103 
	#__PWR_CLK_SLEEP_ENABLE
 
__HAL_RCC_PWR_CLK_SLEEP_ENABLE


	)

2104 
	#__PWR_FORCE_RESET
 
__HAL_RCC_PWR_FORCE_RESET


	)

2105 
	#__PWR_RELEASE_RESET
 
__HAL_RCC_PWR_RELEASE_RESET


	)

2106 
	#__QSPI_CLK_DISABLE
 
__HAL_RCC_QSPI_CLK_DISABLE


	)

2107 
	#__QSPI_CLK_ENABLE
 
__HAL_RCC_QSPI_CLK_ENABLE


	)

2108 
	#__QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_DISABLE


	)

2109 
	#__QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_ENABLE


	)

2110 
	#__QSPI_FORCE_RESET
 
__HAL_RCC_QSPI_FORCE_RESET


	)

2111 
	#__QSPI_RELEASE_RESET
 
__HAL_RCC_QSPI_RELEASE_RESET


	)

2112 
	#__RNG_CLK_DISABLE
 
__HAL_RCC_RNG_CLK_DISABLE


	)

2113 
	#__RNG_CLK_ENABLE
 
__HAL_RCC_RNG_CLK_ENABLE


	)

2114 
	#__RNG_CLK_SLEEP_DISABLE
 
__HAL_RCC_RNG_CLK_SLEEP_DISABLE


	)

2115 
	#__RNG_CLK_SLEEP_ENABLE
 
__HAL_RCC_RNG_CLK_SLEEP_ENABLE


	)

2116 
	#__RNG_FORCE_RESET
 
__HAL_RCC_RNG_FORCE_RESET


	)

2117 
	#__RNG_RELEASE_RESET
 
__HAL_RCC_RNG_RELEASE_RESET


	)

2118 
	#__SAI1_CLK_DISABLE
 
__HAL_RCC_SAI1_CLK_DISABLE


	)

2119 
	#__SAI1_CLK_ENABLE
 
__HAL_RCC_SAI1_CLK_ENABLE


	)

2120 
	#__SAI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_DISABLE


	)

2121 
	#__SAI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_ENABLE


	)

2122 
	#__SAI1_FORCE_RESET
 
__HAL_RCC_SAI1_FORCE_RESET


	)

2123 
	#__SAI1_RELEASE_RESET
 
__HAL_RCC_SAI1_RELEASE_RESET


	)

2124 
	#__SAI2_CLK_DISABLE
 
__HAL_RCC_SAI2_CLK_DISABLE


	)

2125 
	#__SAI2_CLK_ENABLE
 
__HAL_RCC_SAI2_CLK_ENABLE


	)

2126 
	#__SAI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_DISABLE


	)

2127 
	#__SAI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_ENABLE


	)

2128 
	#__SAI2_FORCE_RESET
 
__HAL_RCC_SAI2_FORCE_RESET


	)

2129 
	#__SAI2_RELEASE_RESET
 
__HAL_RCC_SAI2_RELEASE_RESET


	)

2130 
	#__SDIO_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

2131 
	#__SDIO_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2132 
	#__SDMMC_CLK_DISABLE
 
__HAL_RCC_SDMMC_CLK_DISABLE


	)

2133 
	#__SDMMC_CLK_ENABLE
 
__HAL_RCC_SDMMC_CLK_ENABLE


	)

2134 
	#__SDMMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE


	)

2135 
	#__SDMMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE


	)

2136 
	#__SDMMC_FORCE_RESET
 
__HAL_RCC_SDMMC_FORCE_RESET


	)

2137 
	#__SDMMC_RELEASE_RESET
 
__HAL_RCC_SDMMC_RELEASE_RESET


	)

2138 
	#__SPI1_CLK_DISABLE
 
__HAL_RCC_SPI1_CLK_DISABLE


	)

2139 
	#__SPI1_CLK_ENABLE
 
__HAL_RCC_SPI1_CLK_ENABLE


	)

2140 
	#__SPI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_DISABLE


	)

2141 
	#__SPI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_ENABLE


	)

2142 
	#__SPI1_FORCE_RESET
 
__HAL_RCC_SPI1_FORCE_RESET


	)

2143 
	#__SPI1_RELEASE_RESET
 
__HAL_RCC_SPI1_RELEASE_RESET


	)

2144 
	#__SPI2_CLK_DISABLE
 
__HAL_RCC_SPI2_CLK_DISABLE


	)

2145 
	#__SPI2_CLK_ENABLE
 
__HAL_RCC_SPI2_CLK_ENABLE


	)

2146 
	#__SPI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_DISABLE


	)

2147 
	#__SPI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_ENABLE


	)

2148 
	#__SPI2_FORCE_RESET
 
__HAL_RCC_SPI2_FORCE_RESET


	)

2149 
	#__SPI2_RELEASE_RESET
 
__HAL_RCC_SPI2_RELEASE_RESET


	)

2150 
	#__SPI3_CLK_DISABLE
 
__HAL_RCC_SPI3_CLK_DISABLE


	)

2151 
	#__SPI3_CLK_ENABLE
 
__HAL_RCC_SPI3_CLK_ENABLE


	)

2152 
	#__SPI3_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_DISABLE


	)

2153 
	#__SPI3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_ENABLE


	)

2154 
	#__SPI3_FORCE_RESET
 
__HAL_RCC_SPI3_FORCE_RESET


	)

2155 
	#__SPI3_RELEASE_RESET
 
__HAL_RCC_SPI3_RELEASE_RESET


	)

2156 
	#__SRAM_CLK_DISABLE
 
__HAL_RCC_SRAM_CLK_DISABLE


	)

2157 
	#__SRAM_CLK_ENABLE
 
__HAL_RCC_SRAM_CLK_ENABLE


	)

2158 
	#__SRAM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE


	)

2159 
	#__SRAM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE


	)

2160 
	#__SRAM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE


	)

2161 
	#__SRAM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE


	)

2162 
	#__SWPMI1_CLK_DISABLE
 
__HAL_RCC_SWPMI1_CLK_DISABLE


	)

2163 
	#__SWPMI1_CLK_ENABLE
 
__HAL_RCC_SWPMI1_CLK_ENABLE


	)

2164 
	#__SWPMI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE


	)

2165 
	#__SWPMI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE


	)

2166 
	#__SWPMI1_FORCE_RESET
 
__HAL_RCC_SWPMI1_FORCE_RESET


	)

2167 
	#__SWPMI1_RELEASE_RESET
 
__HAL_RCC_SWPMI1_RELEASE_RESET


	)

2168 
	#__SYSCFG_CLK_DISABLE
 
__HAL_RCC_SYSCFG_CLK_DISABLE


	)

2169 
	#__SYSCFG_CLK_ENABLE
 
__HAL_RCC_SYSCFG_CLK_ENABLE


	)

2170 
	#__SYSCFG_CLK_SLEEP_DISABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE


	)

2171 
	#__SYSCFG_CLK_SLEEP_ENABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE


	)

2172 
	#__SYSCFG_FORCE_RESET
 
__HAL_RCC_SYSCFG_FORCE_RESET


	)

2173 
	#__SYSCFG_RELEASE_RESET
 
__HAL_RCC_SYSCFG_RELEASE_RESET


	)

2174 
	#__TIM1_CLK_DISABLE
 
__HAL_RCC_TIM1_CLK_DISABLE


	)

2175 
	#__TIM1_CLK_ENABLE
 
__HAL_RCC_TIM1_CLK_ENABLE


	)

2176 
	#__TIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_DISABLE


	)

2177 
	#__TIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_ENABLE


	)

2178 
	#__TIM1_FORCE_RESET
 
__HAL_RCC_TIM1_FORCE_RESET


	)

2179 
	#__TIM1_RELEASE_RESET
 
__HAL_RCC_TIM1_RELEASE_RESET


	)

2180 
	#__TIM10_CLK_DISABLE
 
__HAL_RCC_TIM10_CLK_DISABLE


	)

2181 
	#__TIM10_CLK_ENABLE
 
__HAL_RCC_TIM10_CLK_ENABLE


	)

2182 
	#__TIM10_FORCE_RESET
 
__HAL_RCC_TIM10_FORCE_RESET


	)

2183 
	#__TIM10_RELEASE_RESET
 
__HAL_RCC_TIM10_RELEASE_RESET


	)

2184 
	#__TIM11_CLK_DISABLE
 
__HAL_RCC_TIM11_CLK_DISABLE


	)

2185 
	#__TIM11_CLK_ENABLE
 
__HAL_RCC_TIM11_CLK_ENABLE


	)

2186 
	#__TIM11_FORCE_RESET
 
__HAL_RCC_TIM11_FORCE_RESET


	)

2187 
	#__TIM11_RELEASE_RESET
 
__HAL_RCC_TIM11_RELEASE_RESET


	)

2188 
	#__TIM12_CLK_DISABLE
 
__HAL_RCC_TIM12_CLK_DISABLE


	)

2189 
	#__TIM12_CLK_ENABLE
 
__HAL_RCC_TIM12_CLK_ENABLE


	)

2190 
	#__TIM12_FORCE_RESET
 
__HAL_RCC_TIM12_FORCE_RESET


	)

2191 
	#__TIM12_RELEASE_RESET
 
__HAL_RCC_TIM12_RELEASE_RESET


	)

2192 
	#__TIM13_CLK_DISABLE
 
__HAL_RCC_TIM13_CLK_DISABLE


	)

2193 
	#__TIM13_CLK_ENABLE
 
__HAL_RCC_TIM13_CLK_ENABLE


	)

2194 
	#__TIM13_FORCE_RESET
 
__HAL_RCC_TIM13_FORCE_RESET


	)

2195 
	#__TIM13_RELEASE_RESET
 
__HAL_RCC_TIM13_RELEASE_RESET


	)

2196 
	#__TIM14_CLK_DISABLE
 
__HAL_RCC_TIM14_CLK_DISABLE


	)

2197 
	#__TIM14_CLK_ENABLE
 
__HAL_RCC_TIM14_CLK_ENABLE


	)

2198 
	#__TIM14_FORCE_RESET
 
__HAL_RCC_TIM14_FORCE_RESET


	)

2199 
	#__TIM14_RELEASE_RESET
 
__HAL_RCC_TIM14_RELEASE_RESET


	)

2200 
	#__TIM15_CLK_DISABLE
 
__HAL_RCC_TIM15_CLK_DISABLE


	)

2201 
	#__TIM15_CLK_ENABLE
 
__HAL_RCC_TIM15_CLK_ENABLE


	)

2202 
	#__TIM15_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_DISABLE


	)

2203 
	#__TIM15_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_ENABLE


	)

2204 
	#__TIM15_FORCE_RESET
 
__HAL_RCC_TIM15_FORCE_RESET


	)

2205 
	#__TIM15_RELEASE_RESET
 
__HAL_RCC_TIM15_RELEASE_RESET


	)

2206 
	#__TIM16_CLK_DISABLE
 
__HAL_RCC_TIM16_CLK_DISABLE


	)

2207 
	#__TIM16_CLK_ENABLE
 
__HAL_RCC_TIM16_CLK_ENABLE


	)

2208 
	#__TIM16_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_DISABLE


	)

2209 
	#__TIM16_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_ENABLE


	)

2210 
	#__TIM16_FORCE_RESET
 
__HAL_RCC_TIM16_FORCE_RESET


	)

2211 
	#__TIM16_RELEASE_RESET
 
__HAL_RCC_TIM16_RELEASE_RESET


	)

2212 
	#__TIM17_CLK_DISABLE
 
__HAL_RCC_TIM17_CLK_DISABLE


	)

2213 
	#__TIM17_CLK_ENABLE
 
__HAL_RCC_TIM17_CLK_ENABLE


	)

2214 
	#__TIM17_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_DISABLE


	)

2215 
	#__TIM17_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_ENABLE


	)

2216 
	#__TIM17_FORCE_RESET
 
__HAL_RCC_TIM17_FORCE_RESET


	)

2217 
	#__TIM17_RELEASE_RESET
 
__HAL_RCC_TIM17_RELEASE_RESET


	)

2218 
	#__TIM2_CLK_DISABLE
 
__HAL_RCC_TIM2_CLK_DISABLE


	)

2219 
	#__TIM2_CLK_ENABLE
 
__HAL_RCC_TIM2_CLK_ENABLE


	)

2220 
	#__TIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_DISABLE


	)

2221 
	#__TIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_ENABLE


	)

2222 
	#__TIM2_FORCE_RESET
 
__HAL_RCC_TIM2_FORCE_RESET


	)

2223 
	#__TIM2_RELEASE_RESET
 
__HAL_RCC_TIM2_RELEASE_RESET


	)

2224 
	#__TIM3_CLK_DISABLE
 
__HAL_RCC_TIM3_CLK_DISABLE


	)

2225 
	#__TIM3_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

2226 
	#__TIM3_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_DISABLE


	)

2227 
	#__TIM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_ENABLE


	)

2228 
	#__TIM3_FORCE_RESET
 
__HAL_RCC_TIM3_FORCE_RESET


	)

2229 
	#__TIM3_RELEASE_RESET
 
__HAL_RCC_TIM3_RELEASE_RESET


	)

2230 
	#__TIM4_CLK_DISABLE
 
__HAL_RCC_TIM4_CLK_DISABLE


	)

2231 
	#__TIM4_CLK_ENABLE
 
__HAL_RCC_TIM4_CLK_ENABLE


	)

2232 
	#__TIM4_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_DISABLE


	)

2233 
	#__TIM4_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_ENABLE


	)

2234 
	#__TIM4_FORCE_RESET
 
__HAL_RCC_TIM4_FORCE_RESET


	)

2235 
	#__TIM4_RELEASE_RESET
 
__HAL_RCC_TIM4_RELEASE_RESET


	)

2236 
	#__TIM5_CLK_DISABLE
 
__HAL_RCC_TIM5_CLK_DISABLE


	)

2237 
	#__TIM5_CLK_ENABLE
 
__HAL_RCC_TIM5_CLK_ENABLE


	)

2238 
	#__TIM5_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_DISABLE


	)

2239 
	#__TIM5_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_ENABLE


	)

2240 
	#__TIM5_FORCE_RESET
 
__HAL_RCC_TIM5_FORCE_RESET


	)

2241 
	#__TIM5_RELEASE_RESET
 
__HAL_RCC_TIM5_RELEASE_RESET


	)

2242 
	#__TIM6_CLK_DISABLE
 
__HAL_RCC_TIM6_CLK_DISABLE


	)

2243 
	#__TIM6_CLK_ENABLE
 
__HAL_RCC_TIM6_CLK_ENABLE


	)

2244 
	#__TIM6_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_DISABLE


	)

2245 
	#__TIM6_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_ENABLE


	)

2246 
	#__TIM6_FORCE_RESET
 
__HAL_RCC_TIM6_FORCE_RESET


	)

2247 
	#__TIM6_RELEASE_RESET
 
__HAL_RCC_TIM6_RELEASE_RESET


	)

2248 
	#__TIM7_CLK_DISABLE
 
__HAL_RCC_TIM7_CLK_DISABLE


	)

2249 
	#__TIM7_CLK_ENABLE
 
__HAL_RCC_TIM7_CLK_ENABLE


	)

2250 
	#__TIM7_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_DISABLE


	)

2251 
	#__TIM7_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_ENABLE


	)

2252 
	#__TIM7_FORCE_RESET
 
__HAL_RCC_TIM7_FORCE_RESET


	)

2253 
	#__TIM7_RELEASE_RESET
 
__HAL_RCC_TIM7_RELEASE_RESET


	)

2254 
	#__TIM8_CLK_DISABLE
 
__HAL_RCC_TIM8_CLK_DISABLE


	)

2255 
	#__TIM8_CLK_ENABLE
 
__HAL_RCC_TIM8_CLK_ENABLE


	)

2256 
	#__TIM8_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_DISABLE


	)

2257 
	#__TIM8_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_ENABLE


	)

2258 
	#__TIM8_FORCE_RESET
 
__HAL_RCC_TIM8_FORCE_RESET


	)

2259 
	#__TIM8_RELEASE_RESET
 
__HAL_RCC_TIM8_RELEASE_RESET


	)

2260 
	#__TIM9_CLK_DISABLE
 
__HAL_RCC_TIM9_CLK_DISABLE


	)

2261 
	#__TIM9_CLK_ENABLE
 
__HAL_RCC_TIM9_CLK_ENABLE


	)

2262 
	#__TIM9_FORCE_RESET
 
__HAL_RCC_TIM9_FORCE_RESET


	)

2263 
	#__TIM9_RELEASE_RESET
 
__HAL_RCC_TIM9_RELEASE_RESET


	)

2264 
	#__TSC_CLK_DISABLE
 
__HAL_RCC_TSC_CLK_DISABLE


	)

2265 
	#__TSC_CLK_ENABLE
 
__HAL_RCC_TSC_CLK_ENABLE


	)

2266 
	#__TSC_CLK_SLEEP_DISABLE
 
__HAL_RCC_TSC_CLK_SLEEP_DISABLE


	)

2267 
	#__TSC_CLK_SLEEP_ENABLE
 
__HAL_RCC_TSC_CLK_SLEEP_ENABLE


	)

2268 
	#__TSC_FORCE_RESET
 
__HAL_RCC_TSC_FORCE_RESET


	)

2269 
	#__TSC_RELEASE_RESET
 
__HAL_RCC_TSC_RELEASE_RESET


	)

2270 
	#__UART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2271 
	#__UART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2272 
	#__UART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2273 
	#__UART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2274 
	#__UART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2275 
	#__UART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2276 
	#__UART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2277 
	#__UART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2278 
	#__UART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2279 
	#__UART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2280 
	#__UART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2281 
	#__UART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2282 
	#__USART1_CLK_DISABLE
 
__HAL_RCC_USART1_CLK_DISABLE


	)

2283 
	#__USART1_CLK_ENABLE
 
__HAL_RCC_USART1_CLK_ENABLE


	)

2284 
	#__USART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART1_CLK_SLEEP_DISABLE


	)

2285 
	#__USART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART1_CLK_SLEEP_ENABLE


	)

2286 
	#__USART1_FORCE_RESET
 
__HAL_RCC_USART1_FORCE_RESET


	)

2287 
	#__USART1_RELEASE_RESET
 
__HAL_RCC_USART1_RELEASE_RESET


	)

2288 
	#__USART2_CLK_DISABLE
 
__HAL_RCC_USART2_CLK_DISABLE


	)

2289 
	#__USART2_CLK_ENABLE
 
__HAL_RCC_USART2_CLK_ENABLE


	)

2290 
	#__USART2_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART2_CLK_SLEEP_DISABLE


	)

2291 
	#__USART2_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART2_CLK_SLEEP_ENABLE


	)

2292 
	#__USART2_FORCE_RESET
 
__HAL_RCC_USART2_FORCE_RESET


	)

2293 
	#__USART2_RELEASE_RESET
 
__HAL_RCC_USART2_RELEASE_RESET


	)

2294 
	#__USART3_CLK_DISABLE
 
__HAL_RCC_USART3_CLK_DISABLE


	)

2295 
	#__USART3_CLK_ENABLE
 
__HAL_RCC_USART3_CLK_ENABLE


	)

2296 
	#__USART3_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART3_CLK_SLEEP_DISABLE


	)

2297 
	#__USART3_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART3_CLK_SLEEP_ENABLE


	)

2298 
	#__USART3_FORCE_RESET
 
__HAL_RCC_USART3_FORCE_RESET


	)

2299 
	#__USART3_RELEASE_RESET
 
__HAL_RCC_USART3_RELEASE_RESET


	)

2300 
	#__USART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2301 
	#__USART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2302 
	#__USART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2303 
	#__USART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2304 
	#__USART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2305 
	#__USART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2306 
	#__USART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2307 
	#__USART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2308 
	#__USART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2309 
	#__USART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2310 
	#__USART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2311 
	#__USART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2312 
	#__USART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2313 
	#__USART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2314 
	#__USART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2315 
	#__USART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2316 
	#__USART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2317 
	#__USART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2318 
	#__USART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2319 
	#__USART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2320 
	#__USB_CLK_DISABLE
 
__HAL_RCC_USB_CLK_DISABLE


	)

2321 
	#__USB_CLK_ENABLE
 
__HAL_RCC_USB_CLK_ENABLE


	)

2322 
	#__USB_FORCE_RESET
 
__HAL_RCC_USB_FORCE_RESET


	)

2323 
	#__USB_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_CLK_SLEEP_ENABLE


	)

2324 
	#__USB_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_CLK_SLEEP_DISABLE


	)

2325 
	#__USB_OTG_FS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_DISABLE


	)

2326 
	#__USB_OTG_FS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_ENABLE


	)

2327 
	#__USB_RELEASE_RESET
 
__HAL_RCC_USB_RELEASE_RESET


	)

2328 
	#__WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG_CLK_DISABLE


	)

2329 
	#__WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG_CLK_ENABLE


	)

2330 
	#__WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_DISABLE


	)

2331 
	#__WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_ENABLE


	)

2332 
	#__WWDG_FORCE_RESET
 
__HAL_RCC_WWDG_FORCE_RESET


	)

2333 
	#__WWDG_RELEASE_RESET
 
__HAL_RCC_WWDG_RELEASE_RESET


	)

2334 
	#__TIM21_CLK_ENABLE
 
__HAL_RCC_TIM21_CLK_ENABLE


	)

2335 
	#__TIM21_CLK_DISABLE
 
__HAL_RCC_TIM21_CLK_DISABLE


	)

2336 
	#__TIM21_FORCE_RESET
 
__HAL_RCC_TIM21_FORCE_RESET


	)

2337 
	#__TIM21_RELEASE_RESET
 
__HAL_RCC_TIM21_RELEASE_RESET


	)

2338 
	#__TIM21_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_ENABLE


	)

2339 
	#__TIM21_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_DISABLE


	)

2340 
	#__TIM22_CLK_ENABLE
 
__HAL_RCC_TIM22_CLK_ENABLE


	)

2341 
	#__TIM22_CLK_DISABLE
 
__HAL_RCC_TIM22_CLK_DISABLE


	)

2342 
	#__TIM22_FORCE_RESET
 
__HAL_RCC_TIM22_FORCE_RESET


	)

2343 
	#__TIM22_RELEASE_RESET
 
__HAL_RCC_TIM22_RELEASE_RESET


	)

2344 
	#__TIM22_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_ENABLE


	)

2345 
	#__TIM22_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_DISABLE


	)

2346 
	#__CRS_CLK_DISABLE
 
__HAL_RCC_CRS_CLK_DISABLE


	)

2347 
	#__CRS_CLK_ENABLE
 
__HAL_RCC_CRS_CLK_ENABLE


	)

2348 
	#__CRS_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRS_CLK_SLEEP_DISABLE


	)

2349 
	#__CRS_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRS_CLK_SLEEP_ENABLE


	)

2350 
	#__CRS_FORCE_RESET
 
__HAL_RCC_CRS_FORCE_RESET


	)

2351 
	#__CRS_RELEASE_RESET
 
__HAL_RCC_CRS_RELEASE_RESET


	)

2352 
	#__RCC_BACKUPRESET_FORCE
 
__HAL_RCC_BACKUPRESET_FORCE


	)

2353 
	#__RCC_BACKUPRESET_RELEASE
 
__HAL_RCC_BACKUPRESET_RELEASE


	)

2355 
	#__USB_OTG_FS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2356 
	#__USB_OTG_FS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2357 
	#__USB_OTG_FS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE


	)

2358 
	#__USB_OTG_FS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE


	)

2359 
	#__USB_OTG_HS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_DISABLE


	)

2360 
	#__USB_OTG_HS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_ENABLE


	)

2361 
	#__USB_OTG_HS_ULPI_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE


	)

2362 
	#__USB_OTG_HS_ULPI_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE


	)

2363 
	#__TIM9_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_ENABLE


	)

2364 
	#__TIM9_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_DISABLE


	)

2365 
	#__TIM10_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_ENABLE


	)

2366 
	#__TIM10_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_DISABLE


	)

2367 
	#__TIM11_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_ENABLE


	)

2368 
	#__TIM11_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_DISABLE


	)

2369 
	#__ETHMACPTP_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE


	)

2370 
	#__ETHMACPTP_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE


	)

2371 
	#__ETHMACPTP_CLK_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_ENABLE


	)

2372 
	#__ETHMACPTP_CLK_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_DISABLE


	)

2373 
	#__HASH_CLK_ENABLE
 
__HAL_RCC_HASH_CLK_ENABLE


	)

2374 
	#__HASH_FORCE_RESET
 
__HAL_RCC_HASH_FORCE_RESET


	)

2375 
	#__HASH_RELEASE_RESET
 
__HAL_RCC_HASH_RELEASE_RESET


	)

2376 
	#__HASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_HASH_CLK_SLEEP_ENABLE


	)

2377 
	#__HASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_HASH_CLK_SLEEP_DISABLE


	)

2378 
	#__HASH_CLK_DISABLE
 
__HAL_RCC_HASH_CLK_DISABLE


	)

2379 
	#__SPI5_CLK_ENABLE
 
__HAL_RCC_SPI5_CLK_ENABLE


	)

2380 
	#__SPI5_CLK_DISABLE
 
__HAL_RCC_SPI5_CLK_DISABLE


	)

2381 
	#__SPI5_FORCE_RESET
 
__HAL_RCC_SPI5_FORCE_RESET


	)

2382 
	#__SPI5_RELEASE_RESET
 
__HAL_RCC_SPI5_RELEASE_RESET


	)

2383 
	#__SPI5_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_ENABLE


	)

2384 
	#__SPI5_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_DISABLE


	)

2385 
	#__SPI6_CLK_ENABLE
 
__HAL_RCC_SPI6_CLK_ENABLE


	)

2386 
	#__SPI6_CLK_DISABLE
 
__HAL_RCC_SPI6_CLK_DISABLE


	)

2387 
	#__SPI6_FORCE_RESET
 
__HAL_RCC_SPI6_FORCE_RESET


	)

2388 
	#__SPI6_RELEASE_RESET
 
__HAL_RCC_SPI6_RELEASE_RESET


	)

2389 
	#__SPI6_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_ENABLE


	)

2390 
	#__SPI6_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_DISABLE


	)

2391 
	#__LTDC_CLK_ENABLE
 
__HAL_RCC_LTDC_CLK_ENABLE


	)

2392 
	#__LTDC_CLK_DISABLE
 
__HAL_RCC_LTDC_CLK_DISABLE


	)

2393 
	#__LTDC_FORCE_RESET
 
__HAL_RCC_LTDC_FORCE_RESET


	)

2394 
	#__LTDC_RELEASE_RESET
 
__HAL_RCC_LTDC_RELEASE_RESET


	)

2395 
	#__LTDC_CLK_SLEEP_ENABLE
 
__HAL_RCC_LTDC_CLK_SLEEP_ENABLE


	)

2396 
	#__ETHMAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE


	)

2397 
	#__ETHMAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE


	)

2398 
	#__ETHMACTX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE


	)

2399 
	#__ETHMACTX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE


	)

2400 
	#__ETHMACRX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE


	)

2401 
	#__ETHMACRX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE


	)

2402 
	#__TIM12_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_ENABLE


	)

2403 
	#__TIM12_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_DISABLE


	)

2404 
	#__TIM13_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_ENABLE


	)

2405 
	#__TIM13_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_DISABLE


	)

2406 
	#__TIM14_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_ENABLE


	)

2407 
	#__TIM14_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_DISABLE


	)

2408 
	#__BKPSRAM_CLK_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_ENABLE


	)

2409 
	#__BKPSRAM_CLK_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_DISABLE


	)

2410 
	#__BKPSRAM_CLK_SLEEP_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE


	)

2411 
	#__BKPSRAM_CLK_SLEEP_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE


	)

2412 
	#__CCMDATARAMEN_CLK_ENABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_ENABLE


	)

2413 
	#__CCMDATARAMEN_CLK_DISABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_DISABLE


	)

2414 
	#__USART6_CLK_ENABLE
 
__HAL_RCC_USART6_CLK_ENABLE


	)

2415 
	#__USART6_CLK_DISABLE
 
__HAL_RCC_USART6_CLK_DISABLE


	)

2416 
	#__USART6_FORCE_RESET
 
__HAL_RCC_USART6_FORCE_RESET


	)

2417 
	#__USART6_RELEASE_RESET
 
__HAL_RCC_USART6_RELEASE_RESET


	)

2418 
	#__USART6_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART6_CLK_SLEEP_ENABLE


	)

2419 
	#__USART6_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART6_CLK_SLEEP_DISABLE


	)

2420 
	#__SPI4_CLK_ENABLE
 
__HAL_RCC_SPI4_CLK_ENABLE


	)

2421 
	#__SPI4_CLK_DISABLE
 
__HAL_RCC_SPI4_CLK_DISABLE


	)

2422 
	#__SPI4_FORCE_RESET
 
__HAL_RCC_SPI4_FORCE_RESET


	)

2423 
	#__SPI4_RELEASE_RESET
 
__HAL_RCC_SPI4_RELEASE_RESET


	)

2424 
	#__SPI4_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_ENABLE


	)

2425 
	#__SPI4_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_DISABLE


	)

2426 
	#__GPIOI_CLK_ENABLE
 
__HAL_RCC_GPIOI_CLK_ENABLE


	)

2427 
	#__GPIOI_CLK_DISABLE
 
__HAL_RCC_GPIOI_CLK_DISABLE


	)

2428 
	#__GPIOI_FORCE_RESET
 
__HAL_RCC_GPIOI_FORCE_RESET


	)

2429 
	#__GPIOI_RELEASE_RESET
 
__HAL_RCC_GPIOI_RELEASE_RESET


	)

2430 
	#__GPIOI_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE


	)

2431 
	#__GPIOI_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE


	)

2432 
	#__GPIOJ_CLK_ENABLE
 
__HAL_RCC_GPIOJ_CLK_ENABLE


	)

2433 
	#__GPIOJ_CLK_DISABLE
 
__HAL_RCC_GPIOJ_CLK_DISABLE


	)

2434 
	#__GPIOJ_FORCE_RESET
 
__HAL_RCC_GPIOJ_FORCE_RESET


	)

2435 
	#__GPIOJ_RELEASE_RESET
 
__HAL_RCC_GPIOJ_RELEASE_RESET


	)

2436 
	#__GPIOJ_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE


	)

2437 
	#__GPIOJ_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE


	)

2438 
	#__GPIOK_CLK_ENABLE
 
__HAL_RCC_GPIOK_CLK_ENABLE


	)

2439 
	#__GPIOK_CLK_DISABLE
 
__HAL_RCC_GPIOK_CLK_DISABLE


	)

2440 
	#__GPIOK_RELEASE_RESET
 
__HAL_RCC_GPIOK_RELEASE_RESET


	)

2441 
	#__GPIOK_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE


	)

2442 
	#__GPIOK_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE


	)

2443 
	#__ETH_CLK_ENABLE
 
__HAL_RCC_ETH_CLK_ENABLE


	)

2444 
	#__ETH_CLK_DISABLE
 
__HAL_RCC_ETH_CLK_DISABLE


	)

2445 
	#__DCMI_CLK_ENABLE
 
__HAL_RCC_DCMI_CLK_ENABLE


	)

2446 
	#__DCMI_CLK_DISABLE
 
__HAL_RCC_DCMI_CLK_DISABLE


	)

2447 
	#__DCMI_FORCE_RESET
 
__HAL_RCC_DCMI_FORCE_RESET


	)

2448 
	#__DCMI_RELEASE_RESET
 
__HAL_RCC_DCMI_RELEASE_RESET


	)

2449 
	#__DCMI_CLK_SLEEP_ENABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_ENABLE


	)

2450 
	#__DCMI_CLK_SLEEP_DISABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_DISABLE


	)

2451 
	#__UART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2452 
	#__UART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2453 
	#__UART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2454 
	#__UART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2455 
	#__UART7_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART7_CLK_SLEEP_ENABLE


	)

2456 
	#__UART7_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART7_CLK_SLEEP_DISABLE


	)

2457 
	#__UART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2458 
	#__UART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2459 
	#__UART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2460 
	#__UART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2461 
	#__UART8_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART8_CLK_SLEEP_ENABLE


	)

2462 
	#__UART8_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART8_CLK_SLEEP_DISABLE


	)

2463 
	#__OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2464 
	#__OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2465 
	#__OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2466 
	#__OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2467 
	#__OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2468 
	#__OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2469 
	#__HAL_RCC_OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2470 
	#__HAL_RCC_OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2471 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED


	)

2472 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED


	)

2473 
	#__HAL_RCC_OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2474 
	#__HAL_RCC_OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2475 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2476 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2477 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED


	)

2478 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED


	)

2479 
	#__SRAM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE


	)

2480 
	#__CAN2_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_ENABLE


	)

2481 
	#__CAN2_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_DISABLE


	)

2482 
	#__DAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC_CLK_SLEEP_ENABLE


	)

2483 
	#__DAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC_CLK_SLEEP_DISABLE


	)

2484 
	#__ADC2_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_ENABLE


	)

2485 
	#__ADC2_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_DISABLE


	)

2486 
	#__ADC3_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_ENABLE


	)

2487 
	#__ADC3_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_DISABLE


	)

2488 
	#__FSMC_FORCE_RESET
 
__HAL_RCC_FSMC_FORCE_RESET


	)

2489 
	#__FSMC_RELEASE_RESET
 
__HAL_RCC_FSMC_RELEASE_RESET


	)

2490 
	#__FSMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_ENABLE


	)

2491 
	#__FSMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_DISABLE


	)

2492 
	#__SDIO_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2493 
	#__SDIO_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2494 
	#__SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2495 
	#__SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2496 
	#__DMA2D_CLK_ENABLE
 
__HAL_RCC_DMA2D_CLK_ENABLE


	)

2497 
	#__DMA2D_CLK_DISABLE
 
__HAL_RCC_DMA2D_CLK_DISABLE


	)

2498 
	#__DMA2D_FORCE_RESET
 
__HAL_RCC_DMA2D_FORCE_RESET


	)

2499 
	#__DMA2D_RELEASE_RESET
 
__HAL_RCC_DMA2D_RELEASE_RESET


	)

2500 
	#__DMA2D_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE


	)

2501 
	#__DMA2D_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE


	)

2504 
	#__HAL_RCC_OTGFS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2505 
	#__HAL_RCC_OTGFS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2507 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2508 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2509 
	#__ADC34_CLK_ENABLE
 
__HAL_RCC_ADC34_CLK_ENABLE


	)

2510 
	#__ADC34_CLK_DISABLE
 
__HAL_RCC_ADC34_CLK_DISABLE


	)

2511 
	#__DAC2_CLK_ENABLE
 
__HAL_RCC_DAC2_CLK_ENABLE


	)

2512 
	#__DAC2_CLK_DISABLE
 
__HAL_RCC_DAC2_CLK_DISABLE


	)

2513 
	#__TIM18_CLK_ENABLE
 
__HAL_RCC_TIM18_CLK_ENABLE


	)

2514 
	#__TIM18_CLK_DISABLE
 
__HAL_RCC_TIM18_CLK_DISABLE


	)

2515 
	#__TIM19_CLK_ENABLE
 
__HAL_RCC_TIM19_CLK_ENABLE


	)

2516 
	#__TIM19_CLK_DISABLE
 
__HAL_RCC_TIM19_CLK_DISABLE


	)

2517 
	#__TIM20_CLK_ENABLE
 
__HAL_RCC_TIM20_CLK_ENABLE


	)

2518 
	#__TIM20_CLK_DISABLE
 
__HAL_RCC_TIM20_CLK_DISABLE


	)

2519 
	#__HRTIM1_CLK_ENABLE
 
__HAL_RCC_HRTIM1_CLK_ENABLE


	)

2520 
	#__HRTIM1_CLK_DISABLE
 
__HAL_RCC_HRTIM1_CLK_DISABLE


	)

2521 
	#__SDADC1_CLK_ENABLE
 
__HAL_RCC_SDADC1_CLK_ENABLE


	)

2522 
	#__SDADC2_CLK_ENABLE
 
__HAL_RCC_SDADC2_CLK_ENABLE


	)

2523 
	#__SDADC3_CLK_ENABLE
 
__HAL_RCC_SDADC3_CLK_ENABLE


	)

2524 
	#__SDADC1_CLK_DISABLE
 
__HAL_RCC_SDADC1_CLK_DISABLE


	)

2525 
	#__SDADC2_CLK_DISABLE
 
__HAL_RCC_SDADC2_CLK_DISABLE


	)

2526 
	#__SDADC3_CLK_DISABLE
 
__HAL_RCC_SDADC3_CLK_DISABLE


	)

2528 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2529 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2530 
	#__ADC34_FORCE_RESET
 
__HAL_RCC_ADC34_FORCE_RESET


	)

2531 
	#__ADC34_RELEASE_RESET
 
__HAL_RCC_ADC34_RELEASE_RESET


	)

2532 
	#__DAC2_FORCE_RESET
 
__HAL_RCC_DAC2_FORCE_RESET


	)

2533 
	#__DAC2_RELEASE_RESET
 
__HAL_RCC_DAC2_RELEASE_RESET


	)

2534 
	#__TIM18_FORCE_RESET
 
__HAL_RCC_TIM18_FORCE_RESET


	)

2535 
	#__TIM18_RELEASE_RESET
 
__HAL_RCC_TIM18_RELEASE_RESET


	)

2536 
	#__TIM19_FORCE_RESET
 
__HAL_RCC_TIM19_FORCE_RESET


	)

2537 
	#__TIM19_RELEASE_RESET
 
__HAL_RCC_TIM19_RELEASE_RESET


	)

2538 
	#__TIM20_FORCE_RESET
 
__HAL_RCC_TIM20_FORCE_RESET


	)

2539 
	#__TIM20_RELEASE_RESET
 
__HAL_RCC_TIM20_RELEASE_RESET


	)

2540 
	#__HRTIM1_FORCE_RESET
 
__HAL_RCC_HRTIM1_FORCE_RESET


	)

2541 
	#__HRTIM1_RELEASE_RESET
 
__HAL_RCC_HRTIM1_RELEASE_RESET


	)

2542 
	#__SDADC1_FORCE_RESET
 
__HAL_RCC_SDADC1_FORCE_RESET


	)

2543 
	#__SDADC2_FORCE_RESET
 
__HAL_RCC_SDADC2_FORCE_RESET


	)

2544 
	#__SDADC3_FORCE_RESET
 
__HAL_RCC_SDADC3_FORCE_RESET


	)

2545 
	#__SDADC1_RELEASE_RESET
 
__HAL_RCC_SDADC1_RELEASE_RESET


	)

2546 
	#__SDADC2_RELEASE_RESET
 
__HAL_RCC_SDADC2_RELEASE_RESET


	)

2547 
	#__SDADC3_RELEASE_RESET
 
__HAL_RCC_SDADC3_RELEASE_RESET


	)

2549 
	#__ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC1_IS_CLK_ENABLED


	)

2550 
	#__ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC1_IS_CLK_DISABLED


	)

2551 
	#__ADC12_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

2552 
	#__ADC12_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

2553 
	#__ADC34_IS_CLK_ENABLED
 
__HAL_RCC_ADC34_IS_CLK_ENABLED


	)

2554 
	#__ADC34_IS_CLK_DISABLED
 
__HAL_RCC_ADC34_IS_CLK_DISABLED


	)

2555 
	#__CEC_IS_CLK_ENABLED
 
__HAL_RCC_CEC_IS_CLK_ENABLED


	)

2556 
	#__CEC_IS_CLK_DISABLED
 
__HAL_RCC_CEC_IS_CLK_DISABLED


	)

2557 
	#__CRC_IS_CLK_ENABLED
 
__HAL_RCC_CRC_IS_CLK_ENABLED


	)

2558 
	#__CRC_IS_CLK_DISABLED
 
__HAL_RCC_CRC_IS_CLK_DISABLED


	)

2559 
	#__DAC1_IS_CLK_ENABLED
 
__HAL_RCC_DAC1_IS_CLK_ENABLED


	)

2560 
	#__DAC1_IS_CLK_DISABLED
 
__HAL_RCC_DAC1_IS_CLK_DISABLED


	)

2561 
	#__DAC2_IS_CLK_ENABLED
 
__HAL_RCC_DAC2_IS_CLK_ENABLED


	)

2562 
	#__DAC2_IS_CLK_DISABLED
 
__HAL_RCC_DAC2_IS_CLK_DISABLED


	)

2563 
	#__DMA1_IS_CLK_ENABLED
 
__HAL_RCC_DMA1_IS_CLK_ENABLED


	)

2564 
	#__DMA1_IS_CLK_DISABLED
 
__HAL_RCC_DMA1_IS_CLK_DISABLED


	)

2565 
	#__DMA2_IS_CLK_ENABLED
 
__HAL_RCC_DMA2_IS_CLK_ENABLED


	)

2566 
	#__DMA2_IS_CLK_DISABLED
 
__HAL_RCC_DMA2_IS_CLK_DISABLED


	)

2567 
	#__FLITF_IS_CLK_ENABLED
 
__HAL_RCC_FLITF_IS_CLK_ENABLED


	)

2568 
	#__FLITF_IS_CLK_DISABLED
 
__HAL_RCC_FLITF_IS_CLK_DISABLED


	)

2569 
	#__FMC_IS_CLK_ENABLED
 
__HAL_RCC_FMC_IS_CLK_ENABLED


	)

2570 
	#__FMC_IS_CLK_DISABLED
 
__HAL_RCC_FMC_IS_CLK_DISABLED


	)

2571 
	#__GPIOA_IS_CLK_ENABLED
 
__HAL_RCC_GPIOA_IS_CLK_ENABLED


	)

2572 
	#__GPIOA_IS_CLK_DISABLED
 
__HAL_RCC_GPIOA_IS_CLK_DISABLED


	)

2573 
	#__GPIOB_IS_CLK_ENABLED
 
__HAL_RCC_GPIOB_IS_CLK_ENABLED


	)

2574 
	#__GPIOB_IS_CLK_DISABLED
 
__HAL_RCC_GPIOB_IS_CLK_DISABLED


	)

2575 
	#__GPIOC_IS_CLK_ENABLED
 
__HAL_RCC_GPIOC_IS_CLK_ENABLED


	)

2576 
	#__GPIOC_IS_CLK_DISABLED
 
__HAL_RCC_GPIOC_IS_CLK_DISABLED


	)

2577 
	#__GPIOD_IS_CLK_ENABLED
 
__HAL_RCC_GPIOD_IS_CLK_ENABLED


	)

2578 
	#__GPIOD_IS_CLK_DISABLED
 
__HAL_RCC_GPIOD_IS_CLK_DISABLED


	)

2579 
	#__GPIOE_IS_CLK_ENABLED
 
__HAL_RCC_GPIOE_IS_CLK_ENABLED


	)

2580 
	#__GPIOE_IS_CLK_DISABLED
 
__HAL_RCC_GPIOE_IS_CLK_DISABLED


	)

2581 
	#__GPIOF_IS_CLK_ENABLED
 
__HAL_RCC_GPIOF_IS_CLK_ENABLED


	)

2582 
	#__GPIOF_IS_CLK_DISABLED
 
__HAL_RCC_GPIOF_IS_CLK_DISABLED


	)

2583 
	#__GPIOG_IS_CLK_ENABLED
 
__HAL_RCC_GPIOG_IS_CLK_ENABLED


	)

2584 
	#__GPIOG_IS_CLK_DISABLED
 
__HAL_RCC_GPIOG_IS_CLK_DISABLED


	)

2585 
	#__GPIOH_IS_CLK_ENABLED
 
__HAL_RCC_GPIOH_IS_CLK_ENABLED


	)

2586 
	#__GPIOH_IS_CLK_DISABLED
 
__HAL_RCC_GPIOH_IS_CLK_DISABLED


	)

2587 
	#__HRTIM1_IS_CLK_ENABLED
 
__HAL_RCC_HRTIM1_IS_CLK_ENABLED


	)

2588 
	#__HRTIM1_IS_CLK_DISABLED
 
__HAL_RCC_HRTIM1_IS_CLK_DISABLED


	)

2589 
	#__I2C1_IS_CLK_ENABLED
 
__HAL_RCC_I2C1_IS_CLK_ENABLED


	)

2590 
	#__I2C1_IS_CLK_DISABLED
 
__HAL_RCC_I2C1_IS_CLK_DISABLED


	)

2591 
	#__I2C2_IS_CLK_ENABLED
 
__HAL_RCC_I2C2_IS_CLK_ENABLED


	)

2592 
	#__I2C2_IS_CLK_DISABLED
 
__HAL_RCC_I2C2_IS_CLK_DISABLED


	)

2593 
	#__I2C3_IS_CLK_ENABLED
 
__HAL_RCC_I2C3_IS_CLK_ENABLED


	)

2594 
	#__I2C3_IS_CLK_DISABLED
 
__HAL_RCC_I2C3_IS_CLK_DISABLED


	)

2595 
	#__PWR_IS_CLK_ENABLED
 
__HAL_RCC_PWR_IS_CLK_ENABLED


	)

2596 
	#__PWR_IS_CLK_DISABLED
 
__HAL_RCC_PWR_IS_CLK_DISABLED


	)

2597 
	#__SYSCFG_IS_CLK_ENABLED
 
__HAL_RCC_SYSCFG_IS_CLK_ENABLED


	)

2598 
	#__SYSCFG_IS_CLK_DISABLED
 
__HAL_RCC_SYSCFG_IS_CLK_DISABLED


	)

2599 
	#__SPI1_IS_CLK_ENABLED
 
__HAL_RCC_SPI1_IS_CLK_ENABLED


	)

2600 
	#__SPI1_IS_CLK_DISABLED
 
__HAL_RCC_SPI1_IS_CLK_DISABLED


	)

2601 
	#__SPI2_IS_CLK_ENABLED
 
__HAL_RCC_SPI2_IS_CLK_ENABLED


	)

2602 
	#__SPI2_IS_CLK_DISABLED
 
__HAL_RCC_SPI2_IS_CLK_DISABLED


	)

2603 
	#__SPI3_IS_CLK_ENABLED
 
__HAL_RCC_SPI3_IS_CLK_ENABLED


	)

2604 
	#__SPI3_IS_CLK_DISABLED
 
__HAL_RCC_SPI3_IS_CLK_DISABLED


	)

2605 
	#__SPI4_IS_CLK_ENABLED
 
__HAL_RCC_SPI4_IS_CLK_ENABLED


	)

2606 
	#__SPI4_IS_CLK_DISABLED
 
__HAL_RCC_SPI4_IS_CLK_DISABLED


	)

2607 
	#__SDADC1_IS_CLK_ENABLED
 
__HAL_RCC_SDADC1_IS_CLK_ENABLED


	)

2608 
	#__SDADC1_IS_CLK_DISABLED
 
__HAL_RCC_SDADC1_IS_CLK_DISABLED


	)

2609 
	#__SDADC2_IS_CLK_ENABLED
 
__HAL_RCC_SDADC2_IS_CLK_ENABLED


	)

2610 
	#__SDADC2_IS_CLK_DISABLED
 
__HAL_RCC_SDADC2_IS_CLK_DISABLED


	)

2611 
	#__SDADC3_IS_CLK_ENABLED
 
__HAL_RCC_SDADC3_IS_CLK_ENABLED


	)

2612 
	#__SDADC3_IS_CLK_DISABLED
 
__HAL_RCC_SDADC3_IS_CLK_DISABLED


	)

2613 
	#__SRAM_IS_CLK_ENABLED
 
__HAL_RCC_SRAM_IS_CLK_ENABLED


	)

2614 
	#__SRAM_IS_CLK_DISABLED
 
__HAL_RCC_SRAM_IS_CLK_DISABLED


	)

2615 
	#__TIM1_IS_CLK_ENABLED
 
__HAL_RCC_TIM1_IS_CLK_ENABLED


	)

2616 
	#__TIM1_IS_CLK_DISABLED
 
__HAL_RCC_TIM1_IS_CLK_DISABLED


	)

2617 
	#__TIM2_IS_CLK_ENABLED
 
__HAL_RCC_TIM2_IS_CLK_ENABLED


	)

2618 
	#__TIM2_IS_CLK_DISABLED
 
__HAL_RCC_TIM2_IS_CLK_DISABLED


	)

2619 
	#__TIM3_IS_CLK_ENABLED
 
__HAL_RCC_TIM3_IS_CLK_ENABLED


	)

2620 
	#__TIM3_IS_CLK_DISABLED
 
__HAL_RCC_TIM3_IS_CLK_DISABLED


	)

2621 
	#__TIM4_IS_CLK_ENABLED
 
__HAL_RCC_TIM4_IS_CLK_ENABLED


	)

2622 
	#__TIM4_IS_CLK_DISABLED
 
__HAL_RCC_TIM4_IS_CLK_DISABLED


	)

2623 
	#__TIM5_IS_CLK_ENABLED
 
__HAL_RCC_TIM5_IS_CLK_ENABLED


	)

2624 
	#__TIM5_IS_CLK_DISABLED
 
__HAL_RCC_TIM5_IS_CLK_DISABLED


	)

2625 
	#__TIM6_IS_CLK_ENABLED
 
__HAL_RCC_TIM6_IS_CLK_ENABLED


	)

2626 
	#__TIM6_IS_CLK_DISABLED
 
__HAL_RCC_TIM6_IS_CLK_DISABLED


	)

2627 
	#__TIM7_IS_CLK_ENABLED
 
__HAL_RCC_TIM7_IS_CLK_ENABLED


	)

2628 
	#__TIM7_IS_CLK_DISABLED
 
__HAL_RCC_TIM7_IS_CLK_DISABLED


	)

2629 
	#__TIM8_IS_CLK_ENABLED
 
__HAL_RCC_TIM8_IS_CLK_ENABLED


	)

2630 
	#__TIM8_IS_CLK_DISABLED
 
__HAL_RCC_TIM8_IS_CLK_DISABLED


	)

2631 
	#__TIM12_IS_CLK_ENABLED
 
__HAL_RCC_TIM12_IS_CLK_ENABLED


	)

2632 
	#__TIM12_IS_CLK_DISABLED
 
__HAL_RCC_TIM12_IS_CLK_DISABLED


	)

2633 
	#__TIM13_IS_CLK_ENABLED
 
__HAL_RCC_TIM13_IS_CLK_ENABLED


	)

2634 
	#__TIM13_IS_CLK_DISABLED
 
__HAL_RCC_TIM13_IS_CLK_DISABLED


	)

2635 
	#__TIM14_IS_CLK_ENABLED
 
__HAL_RCC_TIM14_IS_CLK_ENABLED


	)

2636 
	#__TIM14_IS_CLK_DISABLED
 
__HAL_RCC_TIM14_IS_CLK_DISABLED


	)

2637 
	#__TIM15_IS_CLK_ENABLED
 
__HAL_RCC_TIM15_IS_CLK_ENABLED


	)

2638 
	#__TIM15_IS_CLK_DISABLED
 
__HAL_RCC_TIM15_IS_CLK_DISABLED


	)

2639 
	#__TIM16_IS_CLK_ENABLED
 
__HAL_RCC_TIM16_IS_CLK_ENABLED


	)

2640 
	#__TIM16_IS_CLK_DISABLED
 
__HAL_RCC_TIM16_IS_CLK_DISABLED


	)

2641 
	#__TIM17_IS_CLK_ENABLED
 
__HAL_RCC_TIM17_IS_CLK_ENABLED


	)

2642 
	#__TIM17_IS_CLK_DISABLED
 
__HAL_RCC_TIM17_IS_CLK_DISABLED


	)

2643 
	#__TIM18_IS_CLK_ENABLED
 
__HAL_RCC_TIM18_IS_CLK_ENABLED


	)

2644 
	#__TIM18_IS_CLK_DISABLED
 
__HAL_RCC_TIM18_IS_CLK_DISABLED


	)

2645 
	#__TIM19_IS_CLK_ENABLED
 
__HAL_RCC_TIM19_IS_CLK_ENABLED


	)

2646 
	#__TIM19_IS_CLK_DISABLED
 
__HAL_RCC_TIM19_IS_CLK_DISABLED


	)

2647 
	#__TIM20_IS_CLK_ENABLED
 
__HAL_RCC_TIM20_IS_CLK_ENABLED


	)

2648 
	#__TIM20_IS_CLK_DISABLED
 
__HAL_RCC_TIM20_IS_CLK_DISABLED


	)

2649 
	#__TSC_IS_CLK_ENABLED
 
__HAL_RCC_TSC_IS_CLK_ENABLED


	)

2650 
	#__TSC_IS_CLK_DISABLED
 
__HAL_RCC_TSC_IS_CLK_DISABLED


	)

2651 
	#__UART4_IS_CLK_ENABLED
 
__HAL_RCC_UART4_IS_CLK_ENABLED


	)

2652 
	#__UART4_IS_CLK_DISABLED
 
__HAL_RCC_UART4_IS_CLK_DISABLED


	)

2653 
	#__UART5_IS_CLK_ENABLED
 
__HAL_RCC_UART5_IS_CLK_ENABLED


	)

2654 
	#__UART5_IS_CLK_DISABLED
 
__HAL_RCC_UART5_IS_CLK_DISABLED


	)

2655 
	#__USART1_IS_CLK_ENABLED
 
__HAL_RCC_USART1_IS_CLK_ENABLED


	)

2656 
	#__USART1_IS_CLK_DISABLED
 
__HAL_RCC_USART1_IS_CLK_DISABLED


	)

2657 
	#__USART2_IS_CLK_ENABLED
 
__HAL_RCC_USART2_IS_CLK_ENABLED


	)

2658 
	#__USART2_IS_CLK_DISABLED
 
__HAL_RCC_USART2_IS_CLK_DISABLED


	)

2659 
	#__USART3_IS_CLK_ENABLED
 
__HAL_RCC_USART3_IS_CLK_ENABLED


	)

2660 
	#__USART3_IS_CLK_DISABLED
 
__HAL_RCC_USART3_IS_CLK_DISABLED


	)

2661 
	#__USB_IS_CLK_ENABLED
 
__HAL_RCC_USB_IS_CLK_ENABLED


	)

2662 
	#__USB_IS_CLK_DISABLED
 
__HAL_RCC_USB_IS_CLK_DISABLED


	)

2663 
	#__WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG_IS_CLK_ENABLED


	)

2664 
	#__WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG_IS_CLK_DISABLED


	)

2666 #i‡
deföed
(
STM32F4
)

2667 
	#__HAL_RCC_SDMMC1_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2668 
	#__HAL_RCC_SDMMC1_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2669 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2670 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2671 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2672 
	#__HAL_RCC_SDMMC1_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

2673 
	#__HAL_RCC_SDMMC1_IS_CLK_ENABLED
 
__HAL_RCC_SDIO_IS_CLK_ENABLED


	)

2674 
	#__HAL_RCC_SDMMC1_IS_CLK_DISABLED
 
__HAL_RCC_SDIO_IS_CLK_DISABLED


	)

2675 
	#Sdmmc1ClockSñe˘i⁄
 
SdioClockSñe˘i⁄


	)

2676 
	#RCC_PERIPHCLK_SDMMC1
 
RCC_PERIPHCLK_SDIO


	)

2677 
	#RCC_SDMMC1CLKSOURCE_CLK48
 
RCC_SDIOCLKSOURCE_CK48


	)

2678 
	#RCC_SDMMC1CLKSOURCE_SYSCLK
 
RCC_SDIOCLKSOURCE_SYSCLK


	)

2679 
	#__HAL_RCC_SDMMC1_CONFIG
 
__HAL_RCC_SDIO_CONFIG


	)

2680 
	#__HAL_RCC_GET_SDMMC1_SOURCE
 
__HAL_RCC_GET_SDIO_SOURCE


	)

2683 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

2684 
	#__HAL_RCC_SDIO_FORCE_RESET
 
__HAL_RCC_SDMMC1_FORCE_RESET


	)

2685 
	#__HAL_RCC_SDIO_RELEASE_RESET
 
__HAL_RCC_SDMMC1_RELEASE_RESET


	)

2686 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE


	)

2687 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE


	)

2688 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

2689 
	#__HAL_RCC_SDIO_CLK_DISABLE
 
__HAL_RCC_SDMMC1_CLK_DISABLE


	)

2690 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
 
__HAL_RCC_SDMMC1_IS_CLK_ENABLED


	)

2691 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
 
__HAL_RCC_SDMMC1_IS_CLK_DISABLED


	)

2692 
	#SdioClockSñe˘i⁄
 
Sdmmc1ClockSñe˘i⁄


	)

2693 
	#RCC_PERIPHCLK_SDIO
 
RCC_PERIPHCLK_SDMMC1


	)

2694 
	#__HAL_RCC_SDIO_CONFIG
 
__HAL_RCC_SDMMC1_CONFIG


	)

2695 
	#__HAL_RCC_GET_SDIO_SOURCE
 
__HAL_RCC_GET_SDMMC1_SOURCE


	)

2698 #i‡
deföed
(
STM32F7
)

2699 
	#RCC_SDIOCLKSOURCE_CLK48
 
RCC_SDMMC1CLKSOURCE_CLK48


	)

2700 
	#RCC_SDIOCLKSOURCE_SYSCLK
 
RCC_SDMMC1CLKSOURCE_SYSCLK


	)

2703 
	#__HAL_RCC_I2SCLK
 
__HAL_RCC_I2S_CONFIG


	)

2704 
	#__HAL_RCC_I2SCLK_CONFIG
 
__HAL_RCC_I2S_CONFIG


	)

2706 
	#__RCC_PLLSRC
 
RCC_GET_PLL_OSCSOURCE


	)

2708 
	#IS_RCC_MSIRANGE
 
IS_RCC_MSI_CLOCK_RANGE


	)

2709 
	#IS_RCC_RTCCLK_SOURCE
 
IS_RCC_RTCCLKSOURCE


	)

2710 
	#IS_RCC_SYSCLK_DIV
 
IS_RCC_HCLK


	)

2711 
	#IS_RCC_HCLK_DIV
 
IS_RCC_PCLK


	)

2712 
	#IS_RCC_PERIPHCLK
 
IS_RCC_PERIPHCLOCK


	)

2714 
	#RCC_IT_HSI14
 
RCC_IT_HSI14RDY


	)

2716 
	#RCC_IT_CSSLSE
 
RCC_IT_LSECSS


	)

2717 
	#RCC_IT_CSSHSE
 
RCC_IT_CSS


	)

2719 
	#RCC_PLLMUL_3
 
RCC_PLL_MUL3


	)

2720 
	#RCC_PLLMUL_4
 
RCC_PLL_MUL4


	)

2721 
	#RCC_PLLMUL_6
 
RCC_PLL_MUL6


	)

2722 
	#RCC_PLLMUL_8
 
RCC_PLL_MUL8


	)

2723 
	#RCC_PLLMUL_12
 
RCC_PLL_MUL12


	)

2724 
	#RCC_PLLMUL_16
 
RCC_PLL_MUL16


	)

2725 
	#RCC_PLLMUL_24
 
RCC_PLL_MUL24


	)

2726 
	#RCC_PLLMUL_32
 
RCC_PLL_MUL32


	)

2727 
	#RCC_PLLMUL_48
 
RCC_PLL_MUL48


	)

2729 
	#RCC_PLLDIV_2
 
RCC_PLL_DIV2


	)

2730 
	#RCC_PLLDIV_3
 
RCC_PLL_DIV3


	)

2731 
	#RCC_PLLDIV_4
 
RCC_PLL_DIV4


	)

2733 
	#IS_RCC_MCOSOURCE
 
IS_RCC_MCO1SOURCE


	)

2734 
	#__HAL_RCC_MCO_CONFIG
 
__HAL_RCC_MCO1_CONFIG


	)

2735 
	#RCC_MCO_NODIV
 
RCC_MCODIV_1


	)

2736 
	#RCC_MCO_DIV1
 
RCC_MCODIV_1


	)

2737 
	#RCC_MCO_DIV2
 
RCC_MCODIV_2


	)

2738 
	#RCC_MCO_DIV4
 
RCC_MCODIV_4


	)

2739 
	#RCC_MCO_DIV8
 
RCC_MCODIV_8


	)

2740 
	#RCC_MCO_DIV16
 
RCC_MCODIV_16


	)

2741 
	#RCC_MCO_DIV32
 
RCC_MCODIV_32


	)

2742 
	#RCC_MCO_DIV64
 
RCC_MCODIV_64


	)

2743 
	#RCC_MCO_DIV128
 
RCC_MCODIV_128


	)

2744 
	#RCC_MCOSOURCE_NONE
 
RCC_MCO1SOURCE_NOCLOCK


	)

2745 
	#RCC_MCOSOURCE_LSI
 
RCC_MCO1SOURCE_LSI


	)

2746 
	#RCC_MCOSOURCE_LSE
 
RCC_MCO1SOURCE_LSE


	)

2747 
	#RCC_MCOSOURCE_SYSCLK
 
RCC_MCO1SOURCE_SYSCLK


	)

2748 
	#RCC_MCOSOURCE_HSI
 
RCC_MCO1SOURCE_HSI


	)

2749 
	#RCC_MCOSOURCE_HSI14
 
RCC_MCO1SOURCE_HSI14


	)

2750 
	#RCC_MCOSOURCE_HSI48
 
RCC_MCO1SOURCE_HSI48


	)

2751 
	#RCC_MCOSOURCE_HSE
 
RCC_MCO1SOURCE_HSE


	)

2752 
	#RCC_MCOSOURCE_PLLCLK_DIV1
 
RCC_MCO1SOURCE_PLLCLK


	)

2753 
	#RCC_MCOSOURCE_PLLCLK_NODIV
 
RCC_MCO1SOURCE_PLLCLK


	)

2754 
	#RCC_MCOSOURCE_PLLCLK_DIV2
 
RCC_MCO1SOURCE_PLLCLK_DIV2


	)

2756 #i‡
deföed
(
STM32WB
Ë|| deföed(
STM32G0
)

2758 
	#RCC_RTCCLKSOURCE_NONE
 
RCC_RTCCLKSOURCE_NO_CLK


	)

2761 
	#RCC_USBCLK_PLLSAI1
 
RCC_USBCLKSOURCE_PLLSAI1


	)

2762 
	#RCC_USBCLK_PLL
 
RCC_USBCLKSOURCE_PLL


	)

2763 
	#RCC_USBCLK_MSI
 
RCC_USBCLKSOURCE_MSI


	)

2764 
	#RCC_USBCLKSOURCE_PLLCLK
 
RCC_USBCLKSOURCE_PLL


	)

2765 
	#RCC_USBPLLCLK_DIV1
 
RCC_USBCLKSOURCE_PLL


	)

2766 
	#RCC_USBPLLCLK_DIV1_5
 
RCC_USBCLKSOURCE_PLL_DIV1_5


	)

2767 
	#RCC_USBPLLCLK_DIV2
 
RCC_USBCLKSOURCE_PLL_DIV2


	)

2768 
	#RCC_USBPLLCLK_DIV3
 
RCC_USBCLKSOURCE_PLL_DIV3


	)

2770 
	#HSION_BôNumbî
 
RCC_HSION_BIT_NUMBER


	)

2771 
	#HSION_BITNUMBER
 
RCC_HSION_BIT_NUMBER


	)

2772 
	#HSEON_BôNumbî
 
RCC_HSEON_BIT_NUMBER


	)

2773 
	#HSEON_BITNUMBER
 
RCC_HSEON_BIT_NUMBER


	)

2774 
	#MSION_BITNUMBER
 
RCC_MSION_BIT_NUMBER


	)

2775 
	#CSSON_BôNumbî
 
RCC_CSSON_BIT_NUMBER


	)

2776 
	#CSSON_BITNUMBER
 
RCC_CSSON_BIT_NUMBER


	)

2777 
	#PLLON_BôNumbî
 
RCC_PLLON_BIT_NUMBER


	)

2778 
	#PLLON_BITNUMBER
 
RCC_PLLON_BIT_NUMBER


	)

2779 
	#PLLI2SON_BôNumbî
 
RCC_PLLI2SON_BIT_NUMBER


	)

2780 
	#I2SSRC_BôNumbî
 
RCC_I2SSRC_BIT_NUMBER


	)

2781 
	#RTCEN_BôNumbî
 
RCC_RTCEN_BIT_NUMBER


	)

2782 
	#RTCEN_BITNUMBER
 
RCC_RTCEN_BIT_NUMBER


	)

2783 
	#BDRST_BôNumbî
 
RCC_BDRST_BIT_NUMBER


	)

2784 
	#BDRST_BITNUMBER
 
RCC_BDRST_BIT_NUMBER


	)

2785 
	#RTCRST_BITNUMBER
 
RCC_RTCRST_BIT_NUMBER


	)

2786 
	#LSION_BôNumbî
 
RCC_LSION_BIT_NUMBER


	)

2787 
	#LSION_BITNUMBER
 
RCC_LSION_BIT_NUMBER


	)

2788 
	#LSEON_BôNumbî
 
RCC_LSEON_BIT_NUMBER


	)

2789 
	#LSEON_BITNUMBER
 
RCC_LSEON_BIT_NUMBER


	)

2790 
	#LSEBYP_BITNUMBER
 
RCC_LSEBYP_BIT_NUMBER


	)

2791 
	#PLLSAION_BôNumbî
 
RCC_PLLSAION_BIT_NUMBER


	)

2792 
	#TIMPRE_BôNumbî
 
RCC_TIMPRE_BIT_NUMBER


	)

2793 
	#RMVF_BôNumbî
 
RCC_RMVF_BIT_NUMBER


	)

2794 
	#RMVF_BITNUMBER
 
RCC_RMVF_BIT_NUMBER


	)

2795 
	#RCC_CR2_HSI14TRIM_BôNumbî
 
RCC_HSI14TRIM_BIT_NUMBER


	)

2796 
	#CR_BYTE2_ADDRESS
 
RCC_CR_BYTE2_ADDRESS


	)

2797 
	#CIR_BYTE1_ADDRESS
 
RCC_CIR_BYTE1_ADDRESS


	)

2798 
	#CIR_BYTE2_ADDRESS
 
RCC_CIR_BYTE2_ADDRESS


	)

2799 
	#BDCR_BYTE0_ADDRESS
 
RCC_BDCR_BYTE0_ADDRESS


	)

2800 
	#DBP_TIMEOUT_VALUE
 
RCC_DBP_TIMEOUT_VALUE


	)

2801 
	#LSE_TIMEOUT_VALUE
 
RCC_LSE_TIMEOUT_VALUE


	)

2803 
	#CR_HSION_BB
 
RCC_CR_HSION_BB


	)

2804 
	#CR_CSSON_BB
 
RCC_CR_CSSON_BB


	)

2805 
	#CR_PLLON_BB
 
RCC_CR_PLLON_BB


	)

2806 
	#CR_PLLI2SON_BB
 
RCC_CR_PLLI2SON_BB


	)

2807 
	#CR_MSION_BB
 
RCC_CR_MSION_BB


	)

2808 
	#CSR_LSION_BB
 
RCC_CSR_LSION_BB


	)

2809 
	#CSR_LSEON_BB
 
RCC_CSR_LSEON_BB


	)

2810 
	#CSR_LSEBYP_BB
 
RCC_CSR_LSEBYP_BB


	)

2811 
	#CSR_RTCEN_BB
 
RCC_CSR_RTCEN_BB


	)

2812 
	#CSR_RTCRST_BB
 
RCC_CSR_RTCRST_BB


	)

2813 
	#CFGR_I2SSRC_BB
 
RCC_CFGR_I2SSRC_BB


	)

2814 
	#BDCR_RTCEN_BB
 
RCC_BDCR_RTCEN_BB


	)

2815 
	#BDCR_BDRST_BB
 
RCC_BDCR_BDRST_BB


	)

2816 
	#CR_HSEON_BB
 
RCC_CR_HSEON_BB


	)

2817 
	#CSR_RMVF_BB
 
RCC_CSR_RMVF_BB


	)

2818 
	#CR_PLLSAION_BB
 
RCC_CR_PLLSAION_BB


	)

2819 
	#DCKCFGR_TIMPRE_BB
 
RCC_DCKCFGR_TIMPRE_BB


	)

2821 
	#__HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE


	)

2822 
	#__HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE


	)

2823 
	#__HAL_RCC_CRS_ENABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE


	)

2824 
	#__HAL_RCC_CRS_DISABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE


	)

2825 
	#__HAL_RCC_CRS_CALCULATE_RELOADVALUE
 
__HAL_RCC_CRS_RELOADVALUE_CALCULATE


	)

2827 
	#__HAL_RCC_GET_IT_SOURCE
 
__HAL_RCC_GET_IT


	)

2829 
	#RCC_CRS_SYNCWARM
 
RCC_CRS_SYNCWARN


	)

2830 
	#RCC_CRS_TRIMOV
 
RCC_CRS_TRIMOVF


	)

2832 
	#RCC_PERIPHCLK_CK48
 
RCC_PERIPHCLK_CLK48


	)

2833 
	#RCC_CK48CLKSOURCE_PLLQ
 
RCC_CLK48CLKSOURCE_PLLQ


	)

2834 
	#RCC_CK48CLKSOURCE_PLLSAIP
 
RCC_CLK48CLKSOURCE_PLLSAIP


	)

2835 
	#RCC_CK48CLKSOURCE_PLLI2SQ
 
RCC_CLK48CLKSOURCE_PLLI2SQ


	)

2836 
	#IS_RCC_CK48CLKSOURCE
 
IS_RCC_CLK48CLKSOURCE


	)

2837 
	#RCC_SDIOCLKSOURCE_CK48
 
RCC_SDIOCLKSOURCE_CLK48


	)

2839 
	#__HAL_RCC_DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM1_CLK_ENABLE


	)

2840 
	#__HAL_RCC_DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM1_CLK_DISABLE


	)

2841 
	#__HAL_RCC_DFSDM_IS_CLK_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_ENABLED


	)

2842 
	#__HAL_RCC_DFSDM_IS_CLK_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_DISABLED


	)

2843 
	#__HAL_RCC_DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM1_FORCE_RESET


	)

2844 
	#__HAL_RCC_DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM1_RELEASE_RESET


	)

2845 
	#__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_ENABLE


	)

2846 
	#__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_DISABLE


	)

2847 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_ENABLED


	)

2848 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_DISABLED


	)

2849 
	#DfsdmClockSñe˘i⁄
 
Dfsdm1ClockSñe˘i⁄


	)

2850 
	#RCC_PERIPHCLK_DFSDM
 
RCC_PERIPHCLK_DFSDM1


	)

2851 
	#RCC_DFSDMCLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK


	)

2852 
	#RCC_DFSDMCLKSOURCE_SYSCLK
 
RCC_DFSDM1CLKSOURCE_SYSCLK


	)

2853 
	#__HAL_RCC_DFSDM_CONFIG
 
__HAL_RCC_DFSDM1_CONFIG


	)

2854 
	#__HAL_RCC_GET_DFSDM_SOURCE
 
__HAL_RCC_GET_DFSDM1_SOURCE


	)

2862 
	#HAL_RNG_RódyCÆlback
(
__HANDLE__
Ë
	`HAL_RNG_RódyD©aCÆlback
((__HANDLE__), 
uöt32_t
 
øndom32bô
)

	)

2871 #i‡
deföed
 (
STM32G0
)

2873 
	#__HAL_RTC_CLEAR_FLAG
 
__HAL_RTC_EXTI_CLEAR_FLAG


	)

2875 
	#__HAL_RTC_DISABLE_IT
 
__HAL_RTC_EXTI_DISABLE_IT


	)

2876 
	#__HAL_RTC_ENABLE_IT
 
__HAL_RTC_EXTI_ENABLE_IT


	)

2878 #i‡
deföed
 (
STM32F1
)

2879 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
()

	)

2881 
	#__HAL_RTC_EXTI_ENABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
()

	)

2883 
	#__HAL_RTC_EXTI_DISABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
()

	)

2885 
	#__HAL_RTC_EXTI_GET_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
()

	)

2887 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
()

	)

2889 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
(Ë: \

	)

2890 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
() : \

2891 
__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
()))

2892 
	#__HAL_RTC_EXTI_ENABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
(Ë: \

	)

2893 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
() : \

2894 
__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
()))

2895 
	#__HAL_RTC_EXTI_DISABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
(Ë: \

	)

2896 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
() : \

2897 
__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
()))

2898 
	#__HAL_RTC_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
(Ë: \

	)

2899 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
() : \

2900 
__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
()))

2901 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
(Ë: \

	)

2902 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
() : \

2903 
__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
()))

2906 
	#IS_ALARM
 
IS_RTC_ALARM


	)

2907 
	#IS_ALARM_MASK
 
IS_RTC_ALARM_MASK


	)

2908 
	#IS_TAMPER
 
IS_RTC_TAMPER


	)

2909 
	#IS_TAMPER_ERASE_MODE
 
IS_RTC_TAMPER_ERASE_MODE


	)

2910 
	#IS_TAMPER_FILTER
 
IS_RTC_TAMPER_FILTER


	)

2911 
	#IS_TAMPER_INTERRUPT
 
IS_RTC_TAMPER_INTERRUPT


	)

2912 
	#IS_TAMPER_MASKFLAG_STATE
 
IS_RTC_TAMPER_MASKFLAG_STATE


	)

2913 
	#IS_TAMPER_PRECHARGE_DURATION
 
IS_RTC_TAMPER_PRECHARGE_DURATION


	)

2914 
	#IS_TAMPER_PULLUP_STATE
 
IS_RTC_TAMPER_PULLUP_STATE


	)

2915 
	#IS_TAMPER_SAMPLING_FREQ
 
IS_RTC_TAMPER_SAMPLING_FREQ


	)

2916 
	#IS_TAMPER_TIMESTAMPONTAMPER_DETECTION
 
IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION


	)

2917 
	#IS_TAMPER_TRIGGER
 
IS_RTC_TAMPER_TRIGGER


	)

2918 
	#IS_WAKEUP_CLOCK
 
IS_RTC_WAKEUP_CLOCK


	)

2919 
	#IS_WAKEUP_COUNTER
 
IS_RTC_WAKEUP_COUNTER


	)

2921 
	#__RTC_WRITEPROTECTION_ENABLE
 
__HAL_RTC_WRITEPROTECTION_ENABLE


	)

2922 
	#__RTC_WRITEPROTECTION_DISABLE
 
__HAL_RTC_WRITEPROTECTION_DISABLE


	)

2932 
	#SD_OCR_CID_CSD_OVERWRIETE
 
SD_OCR_CID_CSD_OVERWRITE


	)

2933 
	#SD_CMD_SD_APP_STAUS
 
SD_CMD_SD_APP_STATUS


	)

2935 #i‡
deföed
(
STM32F4
)

2936 
	#SD_SDMMC_DISABLED
 
SD_SDIO_DISABLED


	)

2937 
	#SD_SDMMC_FUNCTION_BUSY
 
SD_SDIO_FUNCTION_BUSY


	)

2938 
	#SD_SDMMC_FUNCTION_FAILED
 
SD_SDIO_FUNCTION_FAILED


	)

2939 
	#SD_SDMMC_UNKNOWN_FUNCTION
 
SD_SDIO_UNKNOWN_FUNCTION


	)

2940 
	#SD_CMD_SDMMC_SEN_OP_COND
 
SD_CMD_SDIO_SEN_OP_COND


	)

2941 
	#SD_CMD_SDMMC_RW_DIRECT
 
SD_CMD_SDIO_RW_DIRECT


	)

2942 
	#SD_CMD_SDMMC_RW_EXTENDED
 
SD_CMD_SDIO_RW_EXTENDED


	)

2943 
	#__HAL_SD_SDMMC_ENABLE
 
__HAL_SD_SDIO_ENABLE


	)

2944 
	#__HAL_SD_SDMMC_DISABLE
 
__HAL_SD_SDIO_DISABLE


	)

2945 
	#__HAL_SD_SDMMC_DMA_ENABLE
 
__HAL_SD_SDIO_DMA_ENABLE


	)

2946 
	#__HAL_SD_SDMMC_DMA_DISABLE
 
__HAL_SD_SDIO_DMA_DISABL


	)

2947 
	#__HAL_SD_SDMMC_ENABLE_IT
 
__HAL_SD_SDIO_ENABLE_IT


	)

2948 
	#__HAL_SD_SDMMC_DISABLE_IT
 
__HAL_SD_SDIO_DISABLE_IT


	)

2949 
	#__HAL_SD_SDMMC_GET_FLAG
 
__HAL_SD_SDIO_GET_FLAG


	)

2950 
	#__HAL_SD_SDMMC_CLEAR_FLAG
 
__HAL_SD_SDIO_CLEAR_FLAG


	)

2951 
	#__HAL_SD_SDMMC_GET_IT
 
__HAL_SD_SDIO_GET_IT


	)

2952 
	#__HAL_SD_SDMMC_CLEAR_IT
 
__HAL_SD_SDIO_CLEAR_IT


	)

2953 
	#SDMMC_STATIC_FLAGS
 
SDIO_STATIC_FLAGS


	)

2954 
	#SDMMC_CMD0TIMEOUT
 
SDIO_CMD0TIMEOUT


	)

2955 
	#SD_SDMMC_SEND_IF_COND
 
SD_SDIO_SEND_IF_COND


	)

2957 
	#SDMMC1_IRQn
 
SDIO_IRQn


	)

2958 
	#SDMMC1_IRQH™dÀr
 
SDIO_IRQH™dÀr


	)

2961 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

2962 
	#SD_SDIO_DISABLED
 
SD_SDMMC_DISABLED


	)

2963 
	#SD_SDIO_FUNCTION_BUSY
 
SD_SDMMC_FUNCTION_BUSY


	)

2964 
	#SD_SDIO_FUNCTION_FAILED
 
SD_SDMMC_FUNCTION_FAILED


	)

2965 
	#SD_SDIO_UNKNOWN_FUNCTION
 
SD_SDMMC_UNKNOWN_FUNCTION


	)

2966 
	#SD_CMD_SDIO_SEN_OP_COND
 
SD_CMD_SDMMC_SEN_OP_COND


	)

2967 
	#SD_CMD_SDIO_RW_DIRECT
 
SD_CMD_SDMMC_RW_DIRECT


	)

2968 
	#SD_CMD_SDIO_RW_EXTENDED
 
SD_CMD_SDMMC_RW_EXTENDED


	)

2969 
	#__HAL_SD_SDIO_ENABLE
 
__HAL_SD_SDMMC_ENABLE


	)

2970 
	#__HAL_SD_SDIO_DISABLE
 
__HAL_SD_SDMMC_DISABLE


	)

2971 
	#__HAL_SD_SDIO_DMA_ENABLE
 
__HAL_SD_SDMMC_DMA_ENABLE


	)

2972 
	#__HAL_SD_SDIO_DMA_DISABL
 
__HAL_SD_SDMMC_DMA_DISABLE


	)

2973 
	#__HAL_SD_SDIO_ENABLE_IT
 
__HAL_SD_SDMMC_ENABLE_IT


	)

2974 
	#__HAL_SD_SDIO_DISABLE_IT
 
__HAL_SD_SDMMC_DISABLE_IT


	)

2975 
	#__HAL_SD_SDIO_GET_FLAG
 
__HAL_SD_SDMMC_GET_FLAG


	)

2976 
	#__HAL_SD_SDIO_CLEAR_FLAG
 
__HAL_SD_SDMMC_CLEAR_FLAG


	)

2977 
	#__HAL_SD_SDIO_GET_IT
 
__HAL_SD_SDMMC_GET_IT


	)

2978 
	#__HAL_SD_SDIO_CLEAR_IT
 
__HAL_SD_SDMMC_CLEAR_IT


	)

2979 
	#SDIO_STATIC_FLAGS
 
SDMMC_STATIC_FLAGS


	)

2980 
	#SDIO_CMD0TIMEOUT
 
SDMMC_CMD0TIMEOUT


	)

2981 
	#SD_SDIO_SEND_IF_COND
 
SD_SDMMC_SEND_IF_COND


	)

2983 
	#SDIO_IRQn
 
SDMMC1_IRQn


	)

2984 
	#SDIO_IRQH™dÀr
 
SDMMC1_IRQH™dÀr


	)

2994 
	#__SMARTCARD_ENABLE_IT
 
__HAL_SMARTCARD_ENABLE_IT


	)

2995 
	#__SMARTCARD_DISABLE_IT
 
__HAL_SMARTCARD_DISABLE_IT


	)

2996 
	#__SMARTCARD_ENABLE
 
__HAL_SMARTCARD_ENABLE


	)

2997 
	#__SMARTCARD_DISABLE
 
__HAL_SMARTCARD_DISABLE


	)

2998 
	#__SMARTCARD_DMA_REQUEST_ENABLE
 
__HAL_SMARTCARD_DMA_REQUEST_ENABLE


	)

2999 
	#__SMARTCARD_DMA_REQUEST_DISABLE
 
__HAL_SMARTCARD_DMA_REQUEST_DISABLE


	)

3001 
	#__HAL_SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

3002 
	#__SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

3004 
	#IS_SMARTCARD_ONEBIT_SAMPLING
 
IS_SMARTCARD_ONE_BIT_SAMPLE


	)

3013 
	#__HAL_SMBUS_RESET_CR1
 
SMBUS_RESET_CR1


	)

3014 
	#__HAL_SMBUS_RESET_CR2
 
SMBUS_RESET_CR2


	)

3015 
	#__HAL_SMBUS_GENERATE_START
 
SMBUS_GENERATE_START


	)

3016 
	#__HAL_SMBUS_GET_ADDR_MATCH
 
SMBUS_GET_ADDR_MATCH


	)

3017 
	#__HAL_SMBUS_GET_DIR
 
SMBUS_GET_DIR


	)

3018 
	#__HAL_SMBUS_GET_STOP_MODE
 
SMBUS_GET_STOP_MODE


	)

3019 
	#__HAL_SMBUS_GET_PEC_MODE
 
SMBUS_GET_PEC_MODE


	)

3020 
	#__HAL_SMBUS_GET_ALERT_ENABLED
 
SMBUS_GET_ALERT_ENABLED


	)

3029 
	#__HAL_SPI_1LINE_TX
 
SPI_1LINE_TX


	)

3030 
	#__HAL_SPI_1LINE_RX
 
SPI_1LINE_RX


	)

3031 
	#__HAL_SPI_RESET_CRC
 
SPI_RESET_CRC


	)

3041 
	#__HAL_UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

3042 
	#__HAL_UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

3043 
	#__UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

3044 
	#__UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

3046 
	#IS_UART_WAKEUPMETHODE
 
IS_UART_WAKEUPMETHOD


	)

3048 
	#IS_UART_ONEBIT_SAMPLE
 
IS_UART_ONE_BIT_SAMPLE


	)

3049 
	#IS_UART_ONEBIT_SAMPLING
 
IS_UART_ONE_BIT_SAMPLE


	)

3060 
	#__USART_ENABLE_IT
 
__HAL_USART_ENABLE_IT


	)

3061 
	#__USART_DISABLE_IT
 
__HAL_USART_DISABLE_IT


	)

3062 
	#__USART_ENABLE
 
__HAL_USART_ENABLE


	)

3063 
	#__USART_DISABLE
 
__HAL_USART_DISABLE


	)

3065 
	#__HAL_USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

3066 
	#__USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

3075 
	#USB_EXTI_LINE_WAKEUP
 
USB_WAKEUP_EXTI_LINE


	)

3077 
	#USB_FS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE


	)

3078 
	#USB_FS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE


	)

3079 
	#USB_FS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

3080 
	#USB_FS_EXTI_LINE_WAKEUP
 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

3082 
	#USB_HS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE


	)

3083 
	#USB_HS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE


	)

3084 
	#USB_HS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

3085 
	#USB_HS_EXTI_LINE_WAKEUP
 
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

3087 
	#__HAL_USB_EXTI_ENABLE_IT
 
__HAL_USB_WAKEUP_EXTI_ENABLE_IT


	)

3088 
	#__HAL_USB_EXTI_DISABLE_IT
 
__HAL_USB_WAKEUP_EXTI_DISABLE_IT


	)

3089 
	#__HAL_USB_EXTI_GET_FLAG
 
__HAL_USB_WAKEUP_EXTI_GET_FLAG


	)

3090 
	#__HAL_USB_EXTI_CLEAR_FLAG
 
__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG


	)

3091 
	#__HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3092 
	#__HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3093 
	#__HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3095 
	#__HAL_USB_FS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT


	)

3096 
	#__HAL_USB_FS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT


	)

3097 
	#__HAL_USB_FS_EXTI_GET_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG


	)

3098 
	#__HAL_USB_FS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG


	)

3099 
	#__HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3100 
	#__HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3101 
	#__HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3102 
	#__HAL_USB_FS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT


	)

3104 
	#__HAL_USB_HS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT


	)

3105 
	#__HAL_USB_HS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT


	)

3106 
	#__HAL_USB_HS_EXTI_GET_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG


	)

3107 
	#__HAL_USB_HS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG


	)

3108 
	#__HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3109 
	#__HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3110 
	#__HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3111 
	#__HAL_USB_HS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT


	)

3113 
	#HAL_PCD_A˘iveRemŸeWakeup
 
HAL_PCD_A˘iv©eRemŸeWakeup


	)

3114 
	#HAL_PCD_DeA˘iveRemŸeWakeup
 
HAL_PCD_DeA˘iv©eRemŸeWakeup


	)

3116 
	#HAL_PCD_SëTxFiFo
 
HAL_PCDEx_SëTxFiFo


	)

3117 
	#HAL_PCD_SëRxFiFo
 
HAL_PCDEx_SëRxFiFo


	)

3125 
	#__HAL_TIM_SëICPªsˇÀrVÆue
 
TIM_SET_ICPRESCALERVALUE


	)

3126 
	#__HAL_TIM_Re£tICPªsˇÀrVÆue
 
TIM_RESET_ICPRESCALERVALUE


	)

3128 
	#TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

3129 
	#TIM_GET_CLEAR_IT
 
__HAL_TIM_CLEAR_IT


	)

3131 
	#__HAL_TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

3133 
	#__HAL_TIM_DIRECTION_STATUS
 
__HAL_TIM_IS_TIM_COUNTING_DOWN


	)

3134 
	#__HAL_TIM_PRESCALER
 
__HAL_TIM_SET_PRESCALER


	)

3135 
	#__HAL_TIM_SëCou¡î
 
__HAL_TIM_SET_COUNTER


	)

3136 
	#__HAL_TIM_GëCou¡î
 
__HAL_TIM_GET_COUNTER


	)

3137 
	#__HAL_TIM_SëAut‹ñﬂd
 
__HAL_TIM_SET_AUTORELOAD


	)

3138 
	#__HAL_TIM_GëAut‹ñﬂd
 
__HAL_TIM_GET_AUTORELOAD


	)

3139 
	#__HAL_TIM_SëClockDivisi⁄
 
__HAL_TIM_SET_CLOCKDIVISION


	)

3140 
	#__HAL_TIM_GëClockDivisi⁄
 
__HAL_TIM_GET_CLOCKDIVISION


	)

3141 
	#__HAL_TIM_SëICPªsˇÀr
 
__HAL_TIM_SET_ICPRESCALER


	)

3142 
	#__HAL_TIM_GëICPªsˇÀr
 
__HAL_TIM_GET_ICPRESCALER


	)

3143 
	#__HAL_TIM_SëCom∑ª
 
__HAL_TIM_SET_COMPARE


	)

3144 
	#__HAL_TIM_GëCom∑ª
 
__HAL_TIM_GET_COMPARE


	)

3146 
	#TIM_BREAKINPUTSOURCE_DFSDM
 
TIM_BREAKINPUTSOURCE_DFSDM1


	)

3155 
	#__HAL_ETH_EXTI_ENABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_IT


	)

3156 
	#__HAL_ETH_EXTI_DISABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_DISABLE_IT


	)

3157 
	#__HAL_ETH_EXTI_GET_FLAG
 
__HAL_ETH_WAKEUP_EXTI_GET_FLAG


	)

3158 
	#__HAL_ETH_EXTI_CLEAR_FLAG
 
__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG


	)

3159 
	#__HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER


	)

3160 
	#__HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER


	)

3161 
	#__HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER


	)

3163 
	#ETH_PROMISCIOUSMODE_ENABLE
 
ETH_PROMISCUOUS_MODE_ENABLE


	)

3164 
	#ETH_PROMISCIOUSMODE_DISABLE
 
ETH_PROMISCUOUS_MODE_DISABLE


	)

3165 
	#IS_ETH_PROMISCIOUS_MODE
 
IS_ETH_PROMISCUOUS_MODE


	)

3173 
	#__HAL_LTDC_LAYER
 
LTDC_LAYER


	)

3181 
	#SAI_OUTPUTDRIVE_DISABLED
 
SAI_OUTPUTDRIVE_DISABLE


	)

3182 
	#SAI_OUTPUTDRIVE_ENABLED
 
SAI_OUTPUTDRIVE_ENABLE


	)

3183 
	#SAI_MASTERDIVIDER_ENABLED
 
SAI_MASTERDIVIDER_ENABLE


	)

3184 
	#SAI_MASTERDIVIDER_DISABLED
 
SAI_MASTERDIVIDER_DISABLE


	)

3185 
	#SAI_STREOMODE
 
SAI_STEREOMODE


	)

3186 
	#SAI_FIFOSètus_Em±y
 
SAI_FIFOSTATUS_EMPTY


	)

3187 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_LESS1QUARTERFULL


	)

3188 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_1QUARTERFULL


	)

3189 
	#SAI_FIFOSètus_HÆfFuŒ
 
SAI_FIFOSTATUS_HALFFULL


	)

3190 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 
SAI_FIFOSTATUS_3QUARTERFULL


	)

3191 
	#SAI_FIFOSètus_FuŒ
 
SAI_FIFOSTATUS_FULL


	)

3192 
	#IS_SAI_BLOCK_MONO_STREO_MODE
 
IS_SAI_BLOCK_MONO_STEREO_MODE


	)

3193 
	#SAI_SYNCHRONOUS_EXT
 
SAI_SYNCHRONOUS_EXT_SAI1


	)

3194 
	#SAI_SYNCEXT_IN_ENABLE
 
SAI_SYNCEXT_OUTBLOCKA_ENABLE


	)

3208 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h

38 #i‚de‡
__STM32L0xx_HAL_H


39 
	#__STM32L0xx_HAL_H


	)

41 #ifde‡
__˝lu•lus


46 
	~"°m32l0xx_hÆ_c⁄f.h
"

62 
	#SYSCFG_BOOT_MAINFLASH
 ((
uöt32_t
)0x00000000U)

	)

63 
	#SYSCFG_BOOT_SYSTEMFLASH
 ((
uöt32_t
)
SYSCFG_CFGR1_BOOT_MODE_0
)

	)

64 
	#SYSCFG_BOOT_SRAM
 ((
uöt32_t
)
SYSCFG_CFGR1_BOOT_MODE
)

	)

73 
	#DBGMCU_SLEEP
 
DBGMCU_CR_DBG_SLEEP


	)

74 
	#DBGMCU_STOP
 
DBGMCU_CR_DBG_STOP


	)

75 
	#DBGMCU_STANDBY
 
DBGMCU_CR_DBG_STANDBY


	)

76 
	#IS_DBGMCU_PERIPH
(
__PERIPH__
Ë((((__PERIPH__Ë& (~(
DBGMCU_CR_DBG
))Ë=0x00UË&& ((__PERIPH__Ë!0x00U))

	)

83 #i‡
deföed
 (
LCD_BASE
)

87 
	#SYSCFG_LCD_EXT_CAPA
 
SYSCFG_CFGR2_CAPA


	)

88 
	#SYSCFG_VLCD_PB2_EXT_CAPA_ON
 
SYSCFG_CFGR2_CAPA_0


	)

89 
	#SYSCFG_VLCD_PB12_EXT_CAPA_ON
 
SYSCFG_CFGR2_CAPA_1


	)

90 
	#SYSCFG_VLCD_PB0_EXT_CAPA_ON
 
SYSCFG_CFGR2_CAPA_2


	)

91 #i‡
deföed
 (
SYSCFG_CFGR2_CAPA_3
)

92 
	#SYSCFG_VLCD_PE11_EXT_CAPA_ON
 
SYSCFG_CFGR2_CAPA_3


	)

94 #i‡
deföed
 (
SYSCFG_CFGR2_CAPA_4
)

95 
	#SYSCFG_VLCD_PE12_EXT_CAPA_ON
 
SYSCFG_CFGR2_CAPA_4


	)

106 
	#SYSCFG_VREFINT_OUT_NONE
 ((
uöt32_t
)0x00000000UË

	)

107 
	#SYSCFG_VREFINT_OUT_PB0
 
SYSCFG_CFGR3_VREF_OUT_0


	)

108 
	#SYSCFG_VREFINT_OUT_PB1
 
SYSCFG_CFGR3_VREF_OUT_1


	)

109 
	#SYSCFG_VREFINT_OUT_PB0_PB1
 
SYSCFG_CFGR3_VREF_OUT


	)

111 
	#IS_SYSCFG_VREFINT_OUT_SELECT
(
OUTPUT
Ë(((OUTPUTË=
SYSCFG_VREFINT_OUT_NONE
Ë|| \

	)

112 ((
OUTPUT
Ë=
SYSCFG_VREFINT_OUT_PB0
) || \

113 ((
OUTPUT
Ë=
SYSCFG_VREFINT_OUT_PB1
) || \

114 ((
OUTPUT
Ë=
SYSCFG_VREFINT_OUT_PB0_PB1
))

122 
	#SYSCFG_FLAG_VREFINT_READY
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

124 
	#IS_SYSCFG_FLAG
(
FLAG
Ë((FLAGË=
SYSCFG_FLAG_VREFINT_READY
))

	)

135 #i‡
deföed
 (
SYSCFG_CFGR2_I2C_PB6_FMP
)

136 
	#SYSCFG_FASTMODEPLUS_PB6
 
SYSCFG_CFGR2_I2C_PB6_FMP


	)

138 #i‡
deföed
 (
SYSCFG_CFGR2_I2C_PB7_FMP
)

139 
	#SYSCFG_FASTMODEPLUS_PB7
 
SYSCFG_CFGR2_I2C_PB7_FMP


	)

141 #i‡
deföed
 (
SYSCFG_CFGR2_I2C_PB8_FMP
)

142 
	#SYSCFG_FASTMODEPLUS_PB8
 
SYSCFG_CFGR2_I2C_PB8_FMP


	)

144 #i‡
deföed
 (
SYSCFG_CFGR2_I2C_PB9_FMP
)

145 
	#SYSCFG_FASTMODEPLUS_PB9
 
SYSCFG_CFGR2_I2C_PB9_FMP


	)

148 
	#IS_SYSCFG_FASTMODEPLUS
(
PIN
Ë((((PINË& (
SYSCFG_FASTMODEPLUS_PB6
)Ë=SYSCFG_FASTMODEPLUS_PB6Ë|| \

	)

149 (((
PIN
Ë& (
SYSCFG_FASTMODEPLUS_PB7
)) == SYSCFG_FASTMODEPLUS_PB7) || \

150 (((
PIN
Ë& (
SYSCFG_FASTMODEPLUS_PB8
)) == SYSCFG_FASTMODEPLUS_PB8) || \

151 (((
PIN
Ë& (
SYSCFG_FASTMODEPLUS_PB9
)) == SYSCFG_FASTMODEPLUS_PB9) )

165 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_TIM2_STOP
)

169 
	#__HAL_DBGMCU_FREEZE_TIM2
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
,
DBGMCU_APB1_FZ_DBG_TIM2_STOP
)

	)

170 
	#__HAL_DBGMCU_UNFREEZE_TIM2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
,
DBGMCU_APB1_FZ_DBG_TIM2_STOP
)

	)

173 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_TIM3_STOP
)

177 
	#__HAL_DBGMCU_FREEZE_TIM3
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
,
DBGMCU_APB1_FZ_DBG_TIM3_STOP
)

	)

178 
	#__HAL_DBGMCU_UNFREEZE_TIM3
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
,
DBGMCU_APB1_FZ_DBG_TIM3_STOP
)

	)

181 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_TIM6_STOP
)

185 
	#__HAL_DBGMCU_FREEZE_TIM6
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_TIM6_STOP
)

	)

186 
	#__HAL_DBGMCU_UNFREEZE_TIM6
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_TIM6_STOP
)

	)

189 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_TIM7_STOP
)

193 
	#__HAL_DBGMCU_FREEZE_TIM7
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_TIM7_STOP
)

	)

194 
	#__HAL_DBGMCU_UNFREEZE_TIM7
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_TIM7_STOP
)

	)

197 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_RTC_STOP
)

201 
	#__HAL_DBGMCU_FREEZE_RTC
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_RTC_STOP
)

	)

202 
	#__HAL_DBGMCU_UNFREEZE_RTC
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_RTC_STOP
)

	)

205 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_WWDG_STOP
)

209 
	#__HAL_DBGMCU_FREEZE_WWDG
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_WWDG_STOP
)

	)

210 
	#__HAL_DBGMCU_UNFREEZE_WWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_WWDG_STOP
)

	)

213 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_IWDG_STOP
)

217 
	#__HAL_DBGMCU_FREEZE_IWDG
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_IWDG_STOP
)

	)

218 
	#__HAL_DBGMCU_UNFREEZE_IWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_IWDG_STOP
)

	)

221 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_I2C1_STOP
)

225 
	#__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_I2C1_STOP
)

	)

226 
	#__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT_DBGMCU
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_I2C1_STOP
)

	)

229 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_I2C2_STOP
)

233 
	#__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT_DBGMCU
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_I2C2_STOP
)

	)

234 
	#__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT_DBGMCU
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_I2C2_STOP
)

	)

237 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_I2C3_STOP
)

241 
	#__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_I2C3_STOP
)

	)

242 
	#__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
, 
DBGMCU_APB1_FZ_DBG_I2C3_STOP
)

	)

245 #i‡
deföed
 (
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP
)

249 
	#__HAL_DBGMCU_FREEZE_LPTIMER
(Ë
	`SET_BIT
(
DBGMCU
->
APB1FZ
 ,
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP
)

	)

250 
	#__HAL_DBGMCU_UNFREEZE_LPTIMER
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB1FZ
 ,
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP
)

	)

253 #i‡
deföed
 (
DBGMCU_APB2_FZ_DBG_TIM22_STOP
)

257 
	#__HAL_DBGMCU_FREEZE_TIM22
(Ë
	`SET_BIT
(
DBGMCU
->
APB2FZ
, 
DBGMCU_APB2_FZ_DBG_TIM22_STOP
)

	)

258 
	#__HAL_DBGMCU_UNFREEZE_TIM22
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB2FZ
, 
DBGMCU_APB2_FZ_DBG_TIM22_STOP
)

	)

261 #i‡
deföed
 (
DBGMCU_APB2_FZ_DBG_TIM21_STOP
)

265 
	#__HAL_DBGMCU_FREEZE_TIM21
(Ë
	`SET_BIT
(
DBGMCU
->
APB2FZ
, 
DBGMCU_APB2_FZ_DBG_TIM21_STOP
)

	)

266 
	#__HAL_DBGMCU_UNFREEZE_TIM21
(Ë
	`CLEAR_BIT
(
DBGMCU
->
APB2FZ
, 
DBGMCU_APB2_FZ_DBG_TIM21_STOP
)

	)

271 
	#__HAL_SYSCFG_REMAPMEMORY_FLASH
(Ë
	`CLEAR_BIT
(
SYSCFG
->
CFGR1
, 
SYSCFG_CFGR1_MEM_MODE
)

	)

275 
	#__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH
(Ë
	`MODIFY_REG
(
SYSCFG
->
CFGR1
, 
SYSCFG_CFGR1_MEM_MODE
, 
SYSCFG_CFGR1_MEM_MODE_0
)

	)

280 
	#__HAL_SYSCFG_REMAPMEMORY_SRAM
(Ë
	`MODIFY_REG
(
SYSCFG
->
CFGR1
, 
SYSCFG_CFGR1_MEM_MODE
, 
SYSCFG_CFGR1_MEM_MODE_0
 | 
SYSCFG_CFGR1_MEM_MODE_1
)

	)

289 
	#__HAL_SYSCFG_DBG_LP_CONFIG
(
__DBGLPMODE__
Ëdÿ{
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(__DBGLPMODE__)); \

	)

290 
MODIFY_REG
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG
, (
__DBGLPMODE__
)); \

293 #i‡
deföed
 (
LCD_BASE
)

306 
	#__HAL_SYSCFG_VLCD_CAPA_CONFIG
(
__SYSCFG_VLCD_CAPA__
Ë\

	)

307 
MODIFY_REG
(
SYSCFG
->
CFGR2
, 
SYSCFG_LCD_EXT_CAPA
, (
uöt32_t
)(
__SYSCFG_VLCD_CAPA__
))

318 
	#__HAL_SYSCFG_GET_VLCD_CAPA_CONFIG
(Ë
	`READ_BIT
(
SYSCFG
->
CFGR2
, 
SYSCFG_LCD_EXT_CAPA
)

	)

329 
	#__HAL_SYSCFG_GET_BOOT_MODE
(Ë
	`READ_BIT
(
SYSCFG
->
CFGR1
, 
SYSCFG_CFGR1_BOOT_MODE
)

	)

337 
	#__HAL_SYSCFG_GET_FLAG
(
__FLAG__
Ë(((
SYSCFG
->
CFGR3
Ë& (__FLAG__)Ë=(__FLAG__))

	)

346 
	#__HAL_SYSCFG_FASTMODEPLUS_ENABLE
(
__FASTMODEPLUS__
Ëdÿ{
	`as£π_∑øm
(
	`IS_SYSCFG_FASTMODEPLUS
((__FASTMODEPLUS__))); \

	)

347 
SET_BIT
(
SYSCFG
->
CFGR2
, (
__FASTMODEPLUS__
)); \

356 
	#__HAL_SYSCFG_FASTMODEPLUS_DISABLE
(
__FASTMODEPLUS__
Ëdÿ{
	`as£π_∑øm
(
	`IS_SYSCFG_FASTMODEPLUS
((__FASTMODEPLUS__))); \

	)

357 
CLEAR_BIT
(
SYSCFG
->
CFGR2
, (
__FASTMODEPLUS__
)); \

372 
HAL_SètusTy≥Def
 
HAL_Inô
();

373 
HAL_SètusTy≥Def
 
HAL_DeInô
();

374 
HAL_M•Inô
();

375 
HAL_M•DeInô
();

376 
HAL_SètusTy≥Def
 
HAL_InôTick
 (
uöt32_t
 
TickPri‹ôy
);

386 
HAL_IncTick
();

387 
HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
);

388 
uöt32_t
 
HAL_GëTick
();

389 
HAL_Su•ídTick
();

390 
HAL_ResumeTick
();

391 
uöt32_t
 
HAL_GëHÆVîsi⁄
();

392 
uöt32_t
 
HAL_GëREVID
();

393 
uöt32_t
 
HAL_GëDEVID
();

394 
HAL_DBGMCU_E«bÀDBGSÀïMode
();

395 
HAL_DBGMCU_DißbÀDBGSÀïMode
();

396 
HAL_DBGMCU_E«bÀDBGSt›Mode
();

397 
HAL_DBGMCU_DißbÀDBGSt›Mode
();

398 
HAL_DBGMCU_E«bÀDBGSèndbyMode
();

399 
HAL_DBGMCU_DißbÀDBGSèndbyMode
();

400 
HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(
uöt32_t
 
Pîùh
);

401 
HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(
uöt32_t
 
Pîùh
);

402 
uöt32_t
 
HAL_SYSCFG_GëBoŸMode
();

403 
HAL_SYSCFG_E«bÀ_Lock_VREFINT
();

404 
HAL_SYSCFG_DißbÀ_Lock_VREFINT
();

405 
HAL_SYSCFG_VREFINT_OuçutSñe˘
(
uöt32_t
 
SYSCFG_Vªföt_OUTPUT
);

433 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h

37 #i‚de‡
__STM32L0xx_HAL_ADC_H


38 
	#__STM32L0xx_HAL_ADC_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

65 
uöt32_t
 
R©io
;

68 
uöt32_t
 
RightBôShi·
;

71 
uöt32_t
 
TriggîedMode
;

73 }
	tADC_Ovîßm∂ögTy≥Def
;

92 
uöt32_t
 
ClockPªsˇÀr
;

100 
uöt32_t
 
Resﬁuti⁄
;

103 
uöt32_t
 
D©aAlign
;

107 
uöt32_t
 
SˇnC⁄vMode
;

115 
uöt32_t
 
EOCSñe˘i⁄
;

118 
uöt32_t
 
LowPowîAutoWaô
;

129 
uöt32_t
 
LowPowîAutoPowîOff
;

134 
uöt32_t
 
C⁄töuousC⁄vMode
;

138 
uöt32_t
 
Disc⁄töuousC⁄vMode
;

145 
uöt32_t
 
Exã∫ÆTrigC⁄v
;

150 
uöt32_t
 
Exã∫ÆTrigC⁄vEdge
;

154 
uöt32_t
 
DMAC⁄töuousReque°s
;

159 
uöt32_t
 
Ovîrun
;

169 
uöt32_t
 
LowPowîFªquícyMode
;

175 
uöt32_t
 
Sam∂ögTime
;

180 
uöt32_t
 
Ovîßm∂ögMode
;

185 
ADC_Ovîßm∂ögTy≥Def
 
Ovîßm∂e
;

187 }
	tADC_InôTy≥Def
;

199 
uöt32_t
 
Ch™√l
;

203 
uöt32_t
 
R™k
;

208 }
	tADC_Ch™√lC⁄fTy≥Def
;

219 
uöt32_t
 
W©chdogMode
;

222 
uöt32_t
 
Ch™√l
;

226 
uöt32_t
 
ITMode
;

228 
uöt32_t
 
HighThªshﬁd
;

232 
uöt32_t
 
LowThªshﬁd
;

235 }
	tADC_A«logWDGC⁄fTy≥Def
;

246 
	#HAL_ADC_STATE_RESET
 ((
uöt32_t
)0x00000000Ë

	)

247 
	#HAL_ADC_STATE_READY
 ((
uöt32_t
)0x00000001Ë

	)

248 
	#HAL_ADC_STATE_BUSY_INTERNAL
 ((
uöt32_t
)0x00000002Ë

	)

249 
	#HAL_ADC_STATE_TIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

252 
	#HAL_ADC_STATE_ERROR_INTERNAL
 ((
uöt32_t
)0x00000010Ë

	)

253 
	#HAL_ADC_STATE_ERROR_CONFIG
 ((
uöt32_t
)0x00000020Ë

	)

254 
	#HAL_ADC_STATE_ERROR_DMA
 ((
uöt32_t
)0x00000040Ë

	)

257 
	#HAL_ADC_STATE_REG_BUSY
 ((
uöt32_t
)0x00000100Ë

	)

259 
	#HAL_ADC_STATE_REG_EOC
 ((
uöt32_t
)0x00000200Ë

	)

260 
	#HAL_ADC_STATE_REG_OVR
 ((
uöt32_t
)0x00000400Ë

	)

261 
	#HAL_ADC_STATE_REG_EOSMP
 ((
uöt32_t
)0x00000800Ë

	)

264 
	#HAL_ADC_STATE_INJ_BUSY
 ((
uöt32_t
)0x00001000Ë

	)

266 
	#HAL_ADC_STATE_INJ_EOC
 ((
uöt32_t
)0x00002000Ë

	)

267 
	#HAL_ADC_STATE_INJ_JQOVF
 ((
uöt32_t
)0x00004000Ë

	)

270 
	#HAL_ADC_STATE_AWD1
 ((
uöt32_t
)0x00010000Ë

	)

271 
	#HAL_ADC_STATE_AWD2
 ((
uöt32_t
)0x00020000Ë

	)

272 
	#HAL_ADC_STATE_AWD3
 ((
uöt32_t
)0x00040000Ë

	)

275 
	#HAL_ADC_STATE_MULTIMODE_SLAVE
 ((
uöt32_t
)0x00100000Ë

	)

284 
ADC_Ty≥Def
 *
In°™˚
;

286 
ADC_InôTy≥Def
 
Inô
;

288 
DMA_H™dÀTy≥Def
 *
DMA_H™dÀ
;

290 
HAL_LockTy≥Def
 
Lock
;

292 
__IO
 
uöt32_t
 
Sèã
;

294 
__IO
 
uöt32_t
 
Eº‹Code
;

295 }
	tADC_H™dÀTy≥Def
;

310 
	#HAL_ADC_ERROR_NONE
 ((
uöt32_t
)0x00UË

	)

311 
	#HAL_ADC_ERROR_INTERNAL
 ((
uöt32_t
)0x01UË

	)

313 
	#HAL_ADC_ERROR_OVR
 ((
uöt32_t
)0x02UË

	)

314 
	#HAL_ADC_ERROR_DMA
 ((
uöt32_t
)0x04UË

	)

328 
	#ADC_ENABLE_TIMEOUT
 10U

	)

329 
	#ADC_DISABLE_TIMEOUT
 10U

	)

330 
	#ADC_STOP_CONVERSION_TIMEOUT
 10U

	)

334 
	#ADC_DELAY_10US_MIN_CPU_CYCLES
 1800U

	)

342 
	#ADC_CLOCK_ASYNC_DIV1
 ((
uöt32_t
)0x00000000UË

	)

343 
	#ADC_CLOCK_ASYNC_DIV2
 (
ADC_CCR_PRESC_0
Ë

	)

344 
	#ADC_CLOCK_ASYNC_DIV4
 (
ADC_CCR_PRESC_1
Ë

	)

345 
	#ADC_CLOCK_ASYNC_DIV6
 (
ADC_CCR_PRESC_1
 | 
ADC_CCR_PRESC_0
Ë

	)

346 
	#ADC_CLOCK_ASYNC_DIV8
 (
ADC_CCR_PRESC_2
Ë

	)

347 
	#ADC_CLOCK_ASYNC_DIV10
 (
ADC_CCR_PRESC_2
 | 
ADC_CCR_PRESC_0
Ë

	)

348 
	#ADC_CLOCK_ASYNC_DIV12
 (
ADC_CCR_PRESC_2
 | 
ADC_CCR_PRESC_1
Ë

	)

349 
	#ADC_CLOCK_ASYNC_DIV16
 (
ADC_CCR_PRESC_2
 | 
ADC_CCR_PRESC_1
 | 
ADC_CCR_PRESC_0
Ë

	)

350 
	#ADC_CLOCK_ASYNC_DIV32
 (
ADC_CCR_PRESC_3
Ë

	)

351 
	#ADC_CLOCK_ASYNC_DIV64
 (
ADC_CCR_PRESC_3
 | 
ADC_CCR_PRESC_0
Ë

	)

352 
	#ADC_CLOCK_ASYNC_DIV128
 (
ADC_CCR_PRESC_3
 | 
ADC_CCR_PRESC_1
Ë

	)

353 
	#ADC_CLOCK_ASYNC_DIV256
 (
ADC_CCR_PRESC_3
 | 
ADC_CCR_PRESC_1
 | 
ADC_CCR_PRESC_0
Ë

	)

355 
	#ADC_CLOCK_SYNC_PCLK_DIV1
 ((
uöt32_t
)
ADC_CFGR2_CKMODE
Ë

	)

359 
	#ADC_CLOCK_SYNC_PCLK_DIV2
 ((
uöt32_t
)
ADC_CFGR2_CKMODE_0
Ë

	)

360 
	#ADC_CLOCK_SYNC_PCLK_DIV4
 ((
uöt32_t
)
ADC_CFGR2_CKMODE_1
Ë

	)

369 
	#ADC_RESOLUTION_12B
 ((
uöt32_t
)0x00000000UË

	)

370 
	#ADC_RESOLUTION_10B
 ((
uöt32_t
)
ADC_CFGR1_RES_0
Ë

	)

371 
	#ADC_RESOLUTION_8B
 ((
uöt32_t
)
ADC_CFGR1_RES_1
Ë

	)

372 
	#ADC_RESOLUTION_6B
 ((
uöt32_t
)
ADC_CFGR1_RES
Ë

	)

380 
	#ADC_DATAALIGN_RIGHT
 ((
uöt32_t
)0x00000000U)

	)

381 
	#ADC_DATAALIGN_LEFT
 ((
uöt32_t
)
ADC_CFGR1_ALIGN
)

	)

389 
	#ADC_EXTERNALTRIGCONVEDGE_NONE
 ((
uöt32_t
)0x00000000U)

	)

390 
	#ADC_EXTERNALTRIGCONVEDGE_RISING
 ((
uöt32_t
)
ADC_CFGR1_EXTEN_0
)

	)

391 
	#ADC_EXTERNALTRIGCONVEDGE_FALLING
 ((
uöt32_t
)
ADC_CFGR1_EXTEN_1
)

	)

392 
	#ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING
 ((
uöt32_t
)
ADC_CFGR1_EXTEN
)

	)

400 
	#ADC_EOC_SINGLE_CONV
 ((
uöt32_t
Ë
ADC_ISR_EOC
)

	)

401 
	#ADC_EOC_SEQ_CONV
 ((
uöt32_t
Ë
ADC_ISR_EOS
)

	)

402 
	#ADC_EOC_SINGLE_SEQ_CONV
 ((
uöt32_t
)(
ADC_ISR_EOC
 | 
ADC_ISR_EOS
)Ë

	)

410 
	#ADC_OVR_DATA_PRESERVED
 ((
uöt32_t
)0x00000000U)

	)

411 
	#ADC_OVR_DATA_OVERWRITTEN
 ((
uöt32_t
)
ADC_CFGR1_OVRMOD
)

	)

420 
	#ADC_RANK_CHANNEL_NUMBER
 ((
uöt32_t
)0x00001000UË

	)

421 
	#ADC_RANK_NONE
 ((
uöt32_t
)0x00001001UË

	)

430 
	#ADC_CHANNEL_0
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL0
))

	)

431 
	#ADC_CHANNEL_1
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL1
Ë| 
ADC_CFGR1_AWDCH_0
)

	)

432 
	#ADC_CHANNEL_2
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL2
Ë| 
ADC_CFGR1_AWDCH_1
)

	)

433 
	#ADC_CHANNEL_3
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL3
)| 
ADC_CFGR1_AWDCH_1
 | 
ADC_CFGR1_AWDCH_0
)

	)

434 
	#ADC_CHANNEL_4
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL4
)| 
ADC_CFGR1_AWDCH_2
)

	)

435 
	#ADC_CHANNEL_5
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL5
)| 
ADC_CFGR1_AWDCH_2
| 
ADC_CFGR1_AWDCH_0
)

	)

436 
	#ADC_CHANNEL_6
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL6
)| 
ADC_CFGR1_AWDCH_2
| 
ADC_CFGR1_AWDCH_1
)

	)

437 
	#ADC_CHANNEL_7
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL7
)| 
ADC_CFGR1_AWDCH_2
| 
ADC_CFGR1_AWDCH_1
 | 
ADC_CFGR1_AWDCH_0
)

	)

438 
	#ADC_CHANNEL_8
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL8
)| 
ADC_CFGR1_AWDCH_3
)

	)

439 
	#ADC_CHANNEL_9
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL9
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_0
)

	)

440 
	#ADC_CHANNEL_10
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL10
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_1
)

	)

441 
	#ADC_CHANNEL_11
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL11
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_1
| 
ADC_CFGR1_AWDCH_0
)

	)

442 
	#ADC_CHANNEL_12
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL12
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_2
)

	)

443 
	#ADC_CHANNEL_13
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL13
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_2
| 
ADC_CFGR1_AWDCH_0
)

	)

444 
	#ADC_CHANNEL_14
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL14
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_2
| 
ADC_CFGR1_AWDCH_1
)

	)

445 
	#ADC_CHANNEL_15
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL15
)| 
ADC_CFGR1_AWDCH_3
| 
ADC_CFGR1_AWDCH_2
| 
ADC_CFGR1_AWDCH_1
| 
ADC_CFGR1_AWDCH_0
)

	)

446 #i‡
deföed
 (
STM32L053xx
Ë|| deföed (
STM32L063xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L083xx
)

447 
	#ADC_CHANNEL_16
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL16
)| 
ADC_CFGR1_AWDCH_4
)

	)

449 
	#ADC_CHANNEL_17
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL17
)| 
ADC_CFGR1_AWDCH_4
| 
ADC_CFGR1_AWDCH_0
)

	)

450 
	#ADC_CHANNEL_18
 ((
uöt32_t
)(
ADC_CHSELR_CHSEL18
)| 
ADC_CFGR1_AWDCH_4
| 
ADC_CFGR1_AWDCH_1
)

	)

453 #i‡
deföed
 (
STM32L053xx
Ë|| deföed (
STM32L063xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L083xx
)

454 
	#ADC_CHANNEL_VLCD
 
ADC_CHANNEL_16


	)

456 
	#ADC_CHANNEL_VREFINT
 
ADC_CHANNEL_17


	)

457 
	#ADC_CHANNEL_TEMPSENSOR
 
ADC_CHANNEL_18


	)

465 
	#ADC_CHANNEL_MASK
 ((
uöt32_t
)0x0007FFFFU)

	)

466 
	#ADC_CHANNEL_AWD_MASK
 ((
uöt32_t
)0x7C000000U)

	)

474 
	#ADC_SAMPLETIME_1CYCLE_5
 ((
uöt32_t
)0x00000000UË

	)

475 
	#ADC_SAMPLETIME_3CYCLES_5
 ((
uöt32_t
)
ADC_SMPR_SMPR_0
Ë

	)

476 
	#ADC_SAMPLETIME_7CYCLES_5
 ((
uöt32_t
)
ADC_SMPR_SMPR_1
Ë

	)

477 
	#ADC_SAMPLETIME_12CYCLES_5
 ((
uöt32_t
)(
ADC_SMPR_SMPR_1
 | 
ADC_SMPR_SMPR_0
)Ë

	)

478 
	#ADC_SAMPLETIME_19CYCLES_5
 ((
uöt32_t
)
ADC_SMPR_SMPR_2
Ë

	)

479 
	#ADC_SAMPLETIME_39CYCLES_5
 ((
uöt32_t
)(
ADC_SMPR_SMPR_2
 | 
ADC_SMPR_SMPR_0
)Ë

	)

480 
	#ADC_SAMPLETIME_79CYCLES_5
 ((
uöt32_t
)(
ADC_SMPR_SMPR_2
 | 
ADC_SMPR_SMPR_1
)Ë

	)

481 
	#ADC_SAMPLETIME_160CYCLES_5
 ((
uöt32_t
)
ADC_SMPR_SMPR
Ë

	)

500 
	#ADC_SCAN_DIRECTION_FORWARD
 ((
uöt32_t
)0x00000001UË

	)

501 
	#ADC_SCAN_DIRECTION_BACKWARD
 ((
uöt32_t
)0x00000002UË

	)

503 
	#ADC_SCAN_ENABLE
 
ADC_SCAN_DIRECTION_FORWARD


	)

512 
	#ADC_OVERSAMPLING_RATIO_2
 ((
uöt32_t
)0x00000000UË

	)

513 
	#ADC_OVERSAMPLING_RATIO_4
 ((
uöt32_t
)0x00000004UË

	)

514 
	#ADC_OVERSAMPLING_RATIO_8
 ((
uöt32_t
)0x00000008UË

	)

515 
	#ADC_OVERSAMPLING_RATIO_16
 ((
uöt32_t
)0x0000000CUË

	)

516 
	#ADC_OVERSAMPLING_RATIO_32
 ((
uöt32_t
)0x00000010UË

	)

517 
	#ADC_OVERSAMPLING_RATIO_64
 ((
uöt32_t
)0x00000014UË

	)

518 
	#ADC_OVERSAMPLING_RATIO_128
 ((
uöt32_t
)0x00000018UË

	)

519 
	#ADC_OVERSAMPLING_RATIO_256
 ((
uöt32_t
)0x0000001CUË

	)

527 
	#ADC_RIGHTBITSHIFT_NONE
 ((
uöt32_t
)0x00000000UË

	)

528 
	#ADC_RIGHTBITSHIFT_1
 ((
uöt32_t
)0x00000020UË

	)

529 
	#ADC_RIGHTBITSHIFT_2
 ((
uöt32_t
)0x00000040UË

	)

530 
	#ADC_RIGHTBITSHIFT_3
 ((
uöt32_t
)0x00000060UË

	)

531 
	#ADC_RIGHTBITSHIFT_4
 ((
uöt32_t
)0x00000080UË

	)

532 
	#ADC_RIGHTBITSHIFT_5
 ((
uöt32_t
)0x000000A0UË

	)

533 
	#ADC_RIGHTBITSHIFT_6
 ((
uöt32_t
)0x000000C0UË

	)

534 
	#ADC_RIGHTBITSHIFT_7
 ((
uöt32_t
)0x000000E0UË

	)

535 
	#ADC_RIGHTBITSHIFT_8
 ((
uöt32_t
)0x00000100UË

	)

543 
	#ADC_TRIGGEREDMODE_SINGLE_TRIGGER
 ((
uöt32_t
)0x00000000UË

	)

544 
	#ADC_TRIGGEREDMODE_MULTI_TRIGGER
 ((
uöt32_t
)0x00000200UË

	)

552 
	#ADC_ANALOGWATCHDOG_NONE
 ((
uöt32_t
Ë0x00000000U)

	)

553 
	#ADC_ANALOGWATCHDOG_SINGLE_REG
 ((
uöt32_t
)(
ADC_CFGR1_AWDSGL
 | 
ADC_CFGR1_AWDEN
))

	)

554 
	#ADC_ANALOGWATCHDOG_ALL_REG
 ((
uöt32_t
Ë
ADC_CFGR1_AWDEN
)

	)

562 
	#ADC_REGULAR_GROUP
 ((
uöt32_t
)(
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
))

	)

570 
	#ADC_AWD_EVENT
 ((
uöt32_t
)
ADC_FLAG_AWD
)

	)

571 
	#ADC_OVR_EVENT
 ((
uöt32_t
)
ADC_FLAG_OVR
)

	)

579 
	#ADC_IT_RDY
 
ADC_IER_ADRDYIE


	)

580 
	#ADC_IT_EOSMP
 
ADC_IER_EOSMPIE


	)

581 
	#ADC_IT_EOC
 
ADC_IER_EOCIE


	)

582 
	#ADC_IT_EOS
 
ADC_IER_EOSEQIE


	)

583 
	#ADC_IT_OVR
 
ADC_IER_OVRIE


	)

584 
	#ADC_IT_AWD
 
ADC_IER_AWDIE


	)

585 
	#ADC_IT_EOCAL
 
ADC_IER_EOCALIE


	)

593 
	#ADC_FLAG_RDY
 
ADC_ISR_ADRDY


	)

594 
	#ADC_FLAG_EOSMP
 
ADC_ISR_EOSMP


	)

595 
	#ADC_FLAG_EOC
 
ADC_ISR_EOC


	)

596 
	#ADC_FLAG_EOS
 
ADC_ISR_EOSEQ


	)

597 
	#ADC_FLAG_OVR
 
ADC_ISR_OVR


	)

598 
	#ADC_FLAG_AWD
 
ADC_ISR_AWD


	)

599 
	#ADC_FLAG_EOCAL
 
ADC_ISR_EOCAL


	)

602 
	#ADC_FLAG_ALL
 (
ADC_FLAG_RDY
 | 
ADC_FLAG_EOSMP
 | 
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
 | \

	)

603 
ADC_FLAG_OVR
 | 
ADC_FLAG_AWD
 | 
ADC_FLAG_EOCAL
)

622 
	#__HAL_ADC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_ADC_STATE_RESET
)

	)

629 
	#__HAL_ADC_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
ADC_CR_ADEN
)

	)

636 
	#ADC_ENABLING_CONDITIONS
(
__HANDLE__
Ë\

	)

637 (––((
__HANDLE__
)->
In°™˚
->
CR
) & \

638 (
ADC_CR_ADCAL
 | 
ADC_CR_ADSTP
 | 
ADC_CR_ADSTART
 | \

639 
ADC_CR_ADDIS
 | 
ADC_CR_ADEN
 ) \

640 Ë=
RESET
 \

641 Ë? 
SET
 : 
RESET
)

648 
	#__HAL_ADC_DISABLE
(
__HANDLE__
Ë\

	)

650 (
__HANDLE__
)->
In°™˚
->
CR
 |
ADC_CR_ADDIS
; \

651 
__HAL_ADC_CLEAR_FLAG
((
__HANDLE__
), (
ADC_FLAG_EOSMP
 | 
ADC_FLAG_RDY
)); \

659 
	#ADC_DISABLING_CONDITIONS
(
__HANDLE__
Ë\

	)

660 (––((
__HANDLE__
)->
In°™˚
->
CR
) & \

661 (
ADC_CR_ADSTART
 | 
ADC_CR_ADEN
)) == ADC_CR_ADEN \

662 Ë? 
SET
 : 
RESET
)

669 
	#ADC_IS_ENABLE
(
__HANDLE__
Ë\

	)

670 (–((((
__HANDLE__
)->
In°™˚
->
CR
Ë& (
ADC_CR_ADEN
 | 
ADC_CR_ADDIS
)) == ADC_CR_ADEN) && \

671 ((((
__HANDLE__
)->
In°™˚
->
ISR
Ë& 
ADC_FLAG_RDY
) == ADC_FLAG_RDY) \

672 Ë? 
SET
 : 
RESET
)

679 
	#ADC_GET_RESOLUTION
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
CFGR1
Ë& 
ADC_CFGR1_RES
)

	)

686 
	#ADC_IS_SOFTWARE_START_REGULAR
(
__HANDLE__
Ë\

	)

687 (((
__HANDLE__
)->
In°™˚
->
CFGR1
 & 
ADC_CFGR1_EXTEN
Ë=
RESET
)

696 
	#ADC_IS_CONVERSION_ONGOING_REGULAR
(
__HANDLE__
Ë\

	)

697 (–(((
__HANDLE__
)->
In°™˚
->
CR
Ë& 
ADC_CR_ADSTART
Ë=
RESET
 \

698 Ë? 
RESET
 : 
SET
)

705 
	#ADC_CONTINUOUS
(
_CONTINUOUS_MODE_
Ë((_CONTINUOUS_MODE_Ë<< 13U)

	)

712 
	#ADC_SCANDIR
(
_SCAN_MODE_
Ë\

	)

713 ––(
_SCAN_MODE_
Ë=(
ADC_SCAN_DIRECTION_BACKWARD
) \

714 )? (
ADC_CFGR1_SCANDIR
) : (0x00000000U) \

722 
	#__HAL_ADC_CFGR1_DISCONTINUOUS_NUM
(
_NBR_DISCONTINUOUS_CONV_
Ë(((_NBR_DISCONTINUOUS_CONV_Ë- 1UË<< 17U)

	)

729 
	#ADC_DMACONTREQ
(
_DMAC⁄tReq_MODE_
Ë((_DMAC⁄tReq_MODE_Ë<< 1U)

	)

736 
	#__HAL_ADC_CFGR1_AutoDñay
(
_AutoDñay_
Ë((_AutoDñay_Ë<< 14U)

	)

743 
	#__HAL_ADC_CFGR1_AUTOFF
(
_AUTOFF_
Ë((_AUTOFF_Ë<< 15U)

	)

750 
	#ADC_TRX_HIGHTHRESHOLD
(
_Thªshﬁd_
Ë((_Thªshﬁd_Ë<< 16U)

	)

757 
	#__HAL_ADC_CCR_LOWFREQUENCY
(
_LOW_FREQUENCY_MODE_
Ë((_LOW_FREQUENCY_MODE_Ë<< 25U)

	)

771 
	#ADC_OFFSET_SHIFT_RESOLUTION
(
__HANDLE__
, 
_Off£t_
Ë\

	)

772 ((
_Off£t_
Ë<< ((((
__HANDLE__
)->
In°™˚
->
CFGR
 & 
ADC_CFGR1_RES
) >> 3U)*2U))

786 
	#ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
(
__HANDLE__
, 
_Thªshﬁd_
Ë\

	)

787 ((
_Thªshﬁd_
Ë<< ((((
__HANDLE__
)->
In°™˚
->
CFGR1
 & 
ADC_CFGR1_RES
) >> 3U)*2U))

795 
	#__HAL_ADC_VÆue_Shi·_À·
(
_VÆue_
, 
_Shi·_
Ë((_VÆue_Ë<< (_Shi·_))

	)

804 
	#__HAL_ADC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë\

	)

805 (((
__HANDLE__
)->
In°™˚
->
IER
Ë|(
__INTERRUPT__
))

813 
	#__HAL_ADC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë\

	)

814 (((
__HANDLE__
)->
In°™˚
->
IER
Ë&~(
__INTERRUPT__
))

823 
	#__HAL_ADC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë\

	)

824 (((
__HANDLE__
)->
In°™˚
->
IER
 & (
__INTERRUPT__
)) == (__INTERRUPT__))

833 
	#__HAL_ADC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë\

	)

834 (((
__HANDLE__
)->
In°™˚
->
ISR
Ë(
__FLAG__
))

842 
	#__HAL_ADC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë\

	)

843 ((((
__HANDLE__
)->
In°™˚
->
ISR
Ë& (
__FLAG__
)) == (__FLAG__))

853 
	#ADC_STATE_CLR_SET
 
MODIFY_REG


	)

860 
	#ADC_CLEAR_ERRORCODE
(
__HANDLE__
Ë\

	)

861 ((
__HANDLE__
)->
Eº‹Code
 = 
HAL_ADC_ERROR_NONE
)

870 
	#__HAL_ADC_CLOCK_PRESCALER
(
__HANDLE__
Ë\

	)

872 i‡((((
__HANDLE__
)->
Inô
.
ClockPªsˇÀr
Ë=
ADC_CLOCK_SYNC_PCLK_DIV1
) || \

873 (((
__HANDLE__
)->
Inô
.
ClockPªsˇÀr
Ë=
ADC_CLOCK_SYNC_PCLK_DIV2
) || \

874 (((
__HANDLE__
)->
Inô
.
ClockPªsˇÀr
Ë=
ADC_CLOCK_SYNC_PCLK_DIV4
)) \

876 (
__HANDLE__
)->
In°™˚
->
CFGR2
 &~(
ADC_CFGR2_CKMODE
); \

877 (
__HANDLE__
)->
In°™˚
->
CFGR2
 |(__HANDLE__)->
Inô
.
ClockPªsˇÀr
; \

882 (
__HANDLE__
)->
In°™˚
->
CFGR2
 &~(
ADC_CFGR2_CKMODE
); \

883 
ADC
->
CCR
 &~(
ADC_CCR_PRESC
); \

884 
ADC
->
CCR
 |(
__HANDLE__
)->
Inô
.
ClockPªsˇÀr
; \

889 
	#IS_ADC_CLOCKPRESCALER
(
ADC_CLOCK
Ë(((ADC_CLOCKË=
ADC_CLOCK_ASYNC_DIV1
Ë||\

	)

890 ((
ADC_CLOCK
Ë=
ADC_CLOCK_SYNC_PCLK_DIV1
) ||\

891 ((
ADC_CLOCK
Ë=
ADC_CLOCK_SYNC_PCLK_DIV2
) ||\

892 ((
ADC_CLOCK
Ë=
ADC_CLOCK_SYNC_PCLK_DIV4
) ||\

893 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV1
 ) ||\

894 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV2
 ) ||\

895 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV4
 ) ||\

896 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV6
 ) ||\

897 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV8
 ) ||\

898 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV10
 ) ||\

899 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV12
 ) ||\

900 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV16
 ) ||\

901 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV32
 ) ||\

902 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV64
 ) ||\

903 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV128
 ) ||\

904 ((
ADC_CLOCK
Ë=
ADC_CLOCK_ASYNC_DIV256
))

906 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_RESOLUTION_12B
Ë|| \

	)

907 ((
RESOLUTION
Ë=
ADC_RESOLUTION_10B
) || \

908 ((
RESOLUTION
Ë=
ADC_RESOLUTION_8B
) || \

909 ((
RESOLUTION
Ë=
ADC_RESOLUTION_6B
))

911 
	#IS_ADC_RESOLUTION_8_6_BITS
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_RESOLUTION_8B
Ë|| \

	)

912 ((
RESOLUTION
Ë=
ADC_RESOLUTION_6B
))

914 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_DATAALIGN_RIGHT
Ë|| \

	)

915 ((
ALIGN
Ë=
ADC_DATAALIGN_LEFT
))

917 
	#IS_ADC_EXTTRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_EXTERNALTRIGCONVEDGE_NONE
Ë|| \

	)

918 ((
EDGE
Ë=
ADC_EXTERNALTRIGCONVEDGE_RISING
) || \

919 ((
EDGE
Ë=
ADC_EXTERNALTRIGCONVEDGE_FALLING
) || \

920 ((
EDGE
Ë=
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING
))

922 
	#IS_ADC_EOC_SELECTION
(
EOC_SELECTION
Ë(((EOC_SELECTIONË=
ADC_EOC_SINGLE_CONV
Ë|| \

	)

923 ((
EOC_SELECTION
Ë=
ADC_EOC_SEQ_CONV
) || \

924 ((
EOC_SELECTION
Ë=
ADC_EOC_SINGLE_SEQ_CONV
))

926 
	#IS_ADC_OVERRUN
(
OVR
Ë(((OVRË=
ADC_OVR_DATA_PRESERVED
Ë|| \

	)

927 ((
OVR
Ë=
ADC_OVR_DATA_OVERWRITTEN
))

929 
	#IS_ADC_RANK
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_RANK_CHANNEL_NUMBER
Ë|| \

	)

930 ((
WATCHDOG
Ë=
ADC_RANK_NONE
))

932 #i‡
deföed
 (
STM32L053xx
Ë|| deföed (
STM32L063xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L083xx
)

933 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_CHANNEL_0
Ë|| \

	)

934 ((
CHANNEL
Ë=
ADC_CHANNEL_1
) || \

935 ((
CHANNEL
Ë=
ADC_CHANNEL_2
) || \

936 ((
CHANNEL
Ë=
ADC_CHANNEL_3
) || \

937 ((
CHANNEL
Ë=
ADC_CHANNEL_4
) || \

938 ((
CHANNEL
Ë=
ADC_CHANNEL_5
) || \

939 ((
CHANNEL
Ë=
ADC_CHANNEL_6
) || \

940 ((
CHANNEL
Ë=
ADC_CHANNEL_7
) || \

941 ((
CHANNEL
Ë=
ADC_CHANNEL_8
) || \

942 ((
CHANNEL
Ë=
ADC_CHANNEL_9
) || \

943 ((
CHANNEL
Ë=
ADC_CHANNEL_10
) || \

944 ((
CHANNEL
Ë=
ADC_CHANNEL_11
) || \

945 ((
CHANNEL
Ë=
ADC_CHANNEL_12
) || \

946 ((
CHANNEL
Ë=
ADC_CHANNEL_13
) || \

947 ((
CHANNEL
Ë=
ADC_CHANNEL_14
) || \

948 ((
CHANNEL
Ë=
ADC_CHANNEL_15
) || \

949 ((
CHANNEL
Ë=
ADC_CHANNEL_TEMPSENSOR
) || \

950 ((
CHANNEL
Ë=
ADC_CHANNEL_VREFINT
) || \

951 ((
CHANNEL
Ë=
ADC_CHANNEL_VLCD
))

953 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_CHANNEL_0
Ë|| \

	)

954 ((
CHANNEL
Ë=
ADC_CHANNEL_1
) || \

955 ((
CHANNEL
Ë=
ADC_CHANNEL_2
) || \

956 ((
CHANNEL
Ë=
ADC_CHANNEL_3
) || \

957 ((
CHANNEL
Ë=
ADC_CHANNEL_4
) || \

958 ((
CHANNEL
Ë=
ADC_CHANNEL_5
) || \

959 ((
CHANNEL
Ë=
ADC_CHANNEL_6
) || \

960 ((
CHANNEL
Ë=
ADC_CHANNEL_7
) || \

961 ((
CHANNEL
Ë=
ADC_CHANNEL_8
) || \

962 ((
CHANNEL
Ë=
ADC_CHANNEL_9
) || \

963 ((
CHANNEL
Ë=
ADC_CHANNEL_10
) || \

964 ((
CHANNEL
Ë=
ADC_CHANNEL_11
) || \

965 ((
CHANNEL
Ë=
ADC_CHANNEL_12
) || \

966 ((
CHANNEL
Ë=
ADC_CHANNEL_13
) || \

967 ((
CHANNEL
Ë=
ADC_CHANNEL_14
) || \

968 ((
CHANNEL
Ë=
ADC_CHANNEL_15
) || \

969 ((
CHANNEL
Ë=
ADC_CHANNEL_TEMPSENSOR
) || \

970 ((
CHANNEL
Ë=
ADC_CHANNEL_VREFINT
))

973 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_SAMPLETIME_1CYCLE_5
 ) || \

	)

974 ((
TIME
Ë=
ADC_SAMPLETIME_3CYCLES_5
 ) || \

975 ((
TIME
Ë=
ADC_SAMPLETIME_7CYCLES_5
 ) || \

976 ((
TIME
Ë=
ADC_SAMPLETIME_12CYCLES_5
 ) || \

977 ((
TIME
Ë=
ADC_SAMPLETIME_19CYCLES_5
 ) || \

978 ((
TIME
Ë=
ADC_SAMPLETIME_39CYCLES_5
 ) || \

979 ((
TIME
Ë=
ADC_SAMPLETIME_79CYCLES_5
 ) || \

980 ((
TIME
Ë=
ADC_SAMPLETIME_160CYCLES_5
))

982 
	#IS_ADC_SCAN_MODE
(
SCAN_MODE
Ë(((SCAN_MODEË=
ADC_SCAN_DIRECTION_FORWARD
Ë|| \

	)

983 ((
SCAN_MODE
Ë=
ADC_SCAN_DIRECTION_BACKWARD
))

985 
	#IS_ADC_OVERSAMPLING_RATIO
(
RATIO
Ë(((RATIOË=
ADC_OVERSAMPLING_RATIO_2
 ) || \

	)

986 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_4
 ) || \

987 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_8
 ) || \

988 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_16
 ) || \

989 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_32
 ) || \

990 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_64
 ) || \

991 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_128
 ) || \

992 ((
RATIO
Ë=
ADC_OVERSAMPLING_RATIO_256
 ))

994 
	#IS_ADC_RIGHT_BIT_SHIFT
(
SHIFT
Ë(((SHIFTË=
ADC_RIGHTBITSHIFT_NONE
Ë|| \

	)

995 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_1
 ) || \

996 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_2
 ) || \

997 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_3
 ) || \

998 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_4
 ) || \

999 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_5
 ) || \

1000 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_6
 ) || \

1001 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_7
 ) || \

1002 ((
SHIFT
Ë=
ADC_RIGHTBITSHIFT_8
 ))

1004 
	#IS_ADC_TRIGGERED_OVERSAMPLING_MODE
(
MODE
Ë(((MODEË=
ADC_TRIGGEREDMODE_SINGLE_TRIGGER
Ë|| \

	)

1005 ((
MODE
Ë=
ADC_TRIGGEREDMODE_MULTI_TRIGGER
) )

1007 
	#IS_ADC_ANALOG_WATCHDOG_MODE
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_ANALOGWATCHDOG_NONE
 ) || \

	)

1008 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_SINGLE_REG
) || \

1009 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_ALL_REG
 ))

1011 
	#IS_ADC_CONVERSION_GROUP
(
CONVERSION
Ë((CONVERSIONË=
ADC_REGULAR_GROUP
)

	)

1013 
	#IS_ADC_EVENT_TYPE
(
EVENT
Ë(((EVENTË=
ADC_AWD_EVENT
Ë|| \

	)

1014 ((
EVENT
Ë=
ADC_OVR_EVENT
))

1021 
	#IS_ADC_RANGE
(
RESOLUTION
, 
ADC_VALUE
Ë\

	)

1022 ((((
RESOLUTION
Ë=
ADC_RESOLUTION_12B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x0FFFU))) || \

1023 (((
RESOLUTION
Ë=
ADC_RESOLUTION_10B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x03FFU))) || \

1024 (((
RESOLUTION
Ë=
ADC_RESOLUTION_8B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x00FFU))) || \

1025 (((
RESOLUTION
Ë=
ADC_RESOLUTION_6B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x003FU))))

1033 
	#IS_ADC_REGULAR_NB_CONV
(
LENGTH
Ë(((LENGTHË>((
uöt32_t
)1U)Ë&& ((LENGTHË<((uöt32_t)16U)))

	)

1043 
	~"°m32l0xx_hÆ_adc_ex.h
"

1055 
HAL_SètusTy≥Def
 
HAL_ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
);

1056 
HAL_SètusTy≥Def
 
HAL_ADC_DeInô
(
ADC_H™dÀTy≥Def
 *
hadc
);

1057 
HAL_ADC_M•Inô
(
ADC_H™dÀTy≥Def
* 
hadc
);

1058 
HAL_ADC_M•DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
);

1070 
HAL_SètusTy≥Def
 
HAL_ADC_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
);

1071 
HAL_SètusTy≥Def
 
HAL_ADC_St›
(
ADC_H™dÀTy≥Def
* 
hadc
);

1072 
HAL_SètusTy≥Def
 
HAL_ADC_PﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
);

1073 
HAL_SètusTy≥Def
 
HAL_ADC_PﬁlF‹Evít
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
EvítTy≥
, uöt32_à
Timeout
);

1076 
HAL_SètusTy≥Def
 
HAL_ADC_Sèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
);

1077 
HAL_SètusTy≥Def
 
HAL_ADC_St›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
);

1080 
HAL_SètusTy≥Def
 
HAL_ADC_Sèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
);

1081 
HAL_SètusTy≥Def
 
HAL_ADC_St›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
);

1084 
uöt32_t
 
HAL_ADC_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
);

1087 
HAL_ADC_IRQH™dÀr
(
ADC_H™dÀTy≥Def
* 
hadc
);

1088 
HAL_ADC_C⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

1089 
HAL_ADC_C⁄vHÆfC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

1090 
HAL_ADC_LevñOutOfWödowCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

1091 
HAL_ADC_Eº‹CÆlback
(
ADC_H™dÀTy≥Def
 *
hadc
);

1101 
HAL_SètusTy≥Def
 
HAL_ADC_C⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
);

1102 
HAL_SètusTy≥Def
 
HAL_ADC_A«logWDGC⁄fig
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_A«logWDGC⁄fTy≥Def
* 
A«logWDGC⁄fig
);

1111 
uöt32_t
 
HAL_ADC_GëSèã
(
ADC_H™dÀTy≥Def
* 
hadc
);

1112 
uöt32_t
 
HAL_ADC_GëEº‹
(
ADC_H™dÀTy≥Def
 *
hadc
);

1130 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc_ex.h

37 #i‚de‡
__STM32L0xx_HAL_ADC_EX_H


38 
	#__STM32L0xx_HAL_ADC_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

65 
	#ADC_SINGLE_ENDED
 (
uöt32_t
)0x00000000U

	)

73 
	#ADC_EXTERNALTRIGCONV_T6_TRGO
 ((
uöt32_t
)0x00000000U)

	)

74 
	#ADC_EXTERNALTRIGCONV_T21_CC2
 (
ADC_CFGR1_EXTSEL_0
)

	)

75 
	#ADC_EXTERNALTRIGCONV_T2_TRGO
 (
ADC_CFGR1_EXTSEL_1
)

	)

76 
	#ADC_EXTERNALTRIGCONV_T2_CC4
 (
ADC_CFGR1_EXTSEL_1
 | 
ADC_CFGR1_EXTSEL_0
)

	)

77 
	#ADC_EXTERNALTRIGCONV_T22_TRGO
 (
ADC_CFGR1_EXTSEL_2
)

	)

78 
	#ADC_EXTERNALTRIGCONV_T3_TRGO
 (
ADC_CFGR1_EXTSEL_2
 | 
ADC_CFGR1_EXTSEL_1
)

	)

79 
	#ADC_EXTERNALTRIGCONV_EXT_IT11
 (
ADC_CFGR1_EXTSEL_2
 | 
ADC_CFGR1_EXTSEL_1
 | 
ADC_CFGR1_EXTSEL_0
)

	)

80 
	#ADC_SOFTWARE_START
 (
ADC_CFGR1_EXTSEL
 + (
uöt32_t
)1)

	)

84 #i‡
deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
) || \

85 
deföed
 (
STM32L051xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L053xx
) || \

86 
deföed
 (
STM32L061xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L063xx
) || \

87 
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) || \

88 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

89 
	#ADC_EXTERNALTRIGCONV_T21_TRGO
 (
ADC_EXTERNALTRIGCONV_T22_TRGO
)

	)

94 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
) || \

95 
deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
) || \

96 
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) || \

97 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

98 
	#ADC_EXTERNALTRIGCONV_T2_CC3
 (
ADC_CFGR1_EXTSEL_2
 | 
ADC_CFGR1_EXTSEL_0
)

	)

108 
	#ADC_FLAG_SENSOR
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

109 
	#ADC_FLAG_VREFINT
 
SYSCFG_VREFINT_ADC_RDYF


	)

124 
	#IS_ADC_SINGLE_DIFFERENTIAL
(
SING_DIFF
Ë((SING_DIFFË=
ADC_SINGLE_ENDED
)

	)

134 
	#IS_ADC_CALFACT
(
_CÆibøti⁄_Fa˘‹_
Ë((_CÆibøti⁄_Fa˘‹_Ë<((
uöt32_t
)0x7FU))

	)

142 #i‡
deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
) || \

143 
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) || \

144 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

145 
	#IS_ADC_EXTTRIG
(
CONV
Ë(((CONVË=
ADC_EXTERNALTRIGCONV_T6_TRGO
 ) || \

	)

146 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T21_CC2
 ) || \

147 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_TRGO
 ) || \

148 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_CC4
 ) || \

149 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T22_TRGO
 ) || \

150 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T21_TRGO
 ) || \

151 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_CC3
 ) || \

152 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T3_TRGO
 ) || \

153 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_EXT_IT11
 ) || \

154 ((
CONV
Ë=
ADC_SOFTWARE_START
))

155 #ñi‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

156 
	#IS_ADC_EXTTRIG
(
CONV
Ë(((CONVË=
ADC_EXTERNALTRIGCONV_T6_TRGO
 ) || \

	)

157 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T21_CC2
 ) || \

158 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_TRGO
 ) || \

159 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_CC4
 ) || \

160 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T22_TRGO
 ) || \

161 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_CC3
 ) || \

162 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T3_TRGO
 ) || \

163 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_EXT_IT11
 ) || \

164 ((
CONV
Ë=
ADC_SOFTWARE_START
))

165 #ñi‡
deföed
 (
STM32L051xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L053xx
) || \

166 
deföed
 (
STM32L061xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L063xx
)

167 
	#IS_ADC_EXTTRIG
(
CONV
Ë(((CONVË=
ADC_EXTERNALTRIGCONV_T6_TRGO
 ) || \

	)

168 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T21_CC2
 ) || \

169 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_TRGO
 ) || \

170 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T2_CC4
 ) || \

171 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T22_TRGO
 ) || \

172 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T21_TRGO
 ) || \

173 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_T3_TRGO
 ) || \

174 ((
CONV
Ë=
ADC_EXTERNALTRIGCONV_EXT_IT11
 ) || \

175 ((
CONV
Ë=
ADC_SOFTWARE_START
))

196 
HAL_SètusTy≥Def
 
HAL_ADCEx_CÆibøti⁄_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
SögÀDiff
);

197 
uöt32_t
 
HAL_ADCEx_CÆibøti⁄_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, uöt32_à
SögÀDiff
);

198 
HAL_SètusTy≥Def
 
HAL_ADCEx_CÆibøti⁄_SëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
SögÀDiff
, uöt32_à
CÆibøti⁄Fa˘‹
);

201 
HAL_SètusTy≥Def
 
HAL_ADCEx_E«bÀVREFINT
();

202 
HAL_ADCEx_DißbÀVREFINT
();

203 
HAL_SètusTy≥Def
 
HAL_ADCEx_E«bÀVREFINTTempSís‹
();

204 
HAL_ADCEx_DißbÀVREFINTTempSís‹
();

222 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h

37 #i‚de‡
__STM32L0xx_HAL_CORTEX_H


38 
	#__STM32L0xx_HAL_CORTEX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

60 #i‡(
__MPU_PRESENT
 == 1)

66 
uöt32_t
 
Ba£Addªss
;

68 
uöt8_t
 
E«bÀ
;

70 
uöt8_t
 
Numbî
;

73 
uöt8_t
 
Size
;

75 
uöt8_t
 
SubRegi⁄DißbÀ
;

77 
uöt8_t
 
Ty≥ExtFõld
;

79 
uöt8_t
 
Ac˚ssPîmissi⁄
;

81 
uöt8_t
 
DißbÀExec
;

83 
uöt8_t
 
IsSh¨óbÀ
;

85 
uöt8_t
 
IsCachóbÀ
;

87 
uöt8_t
 
IsBuf„øbÀ
;

89 }
	tMPU_Regi⁄_InôTy≥Def
;

107 
	#IS_NVIC_PREEMPTION_PRIORITY
(
__PRIORITY__
Ë((__PRIORITY__Ë< 0x4U)

	)

109 
	#IS_NVIC_DEVICE_IRQ
(
IRQ
Ë((IRQË>0x0)

	)

114 
	#SYSTICK_CLKSOURCE_HCLK_DIV8
 ((
uöt32_t
)0x00000000U)

	)

115 
	#SYSTICK_CLKSOURCE_HCLK
 ((
uöt32_t
)0x00000004U)

	)

116 
	#IS_SYSTICK_CLK_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
SYSTICK_CLKSOURCE_HCLK
Ë|| \

	)

117 ((
__SOURCE__
Ë=
SYSTICK_CLKSOURCE_HCLK_DIV8
))

122 #i‡(
__MPU_PRESENT
 == 1)

126 
	#MPU_HFNMI_PRIVDEF_NONE
 ((
uöt32_t
)0x00000000U)

	)

127 
	#MPU_HARDFAULT_NMI
 ((
uöt32_t
)0x00000002U)

	)

128 
	#MPU_PRIVILEGED_DEFAULT
 ((
uöt32_t
)0x00000004U)

	)

129 
	#MPU_HFNMI_PRIVDEF
 ((
uöt32_t
)0x00000006U)

	)

137 
	#MPU_REGION_ENABLE
 ((
uöt8_t
)0x01U)

	)

138 
	#MPU_REGION_DISABLE
 ((
uöt8_t
)0x00U)

	)

146 
	#MPU_INSTRUCTION_ACCESS_ENABLE
 ((
uöt8_t
)0x00U)

	)

147 
	#MPU_INSTRUCTION_ACCESS_DISABLE
 ((
uöt8_t
)0x01U)

	)

155 
	#MPU_ACCESS_SHAREABLE
 ((
uöt8_t
)0x01U)

	)

156 
	#MPU_ACCESS_NOT_SHAREABLE
 ((
uöt8_t
)0x00U)

	)

164 
	#MPU_ACCESS_CACHEABLE
 ((
uöt8_t
)0x01U)

	)

165 
	#MPU_ACCESS_NOT_CACHEABLE
 ((
uöt8_t
)0x00U)

	)

173 
	#MPU_ACCESS_BUFFERABLE
 ((
uöt8_t
)0x01U)

	)

174 
	#MPU_ACCESS_NOT_BUFFERABLE
 ((
uöt8_t
)0x00U)

	)

182 
	#MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04U)

	)

183 
	#MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05U)

	)

184 
	#MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06U)

	)

185 
	#MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07U)

	)

186 
	#MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08U)

	)

187 
	#MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09U)

	)

188 
	#MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0AU)

	)

189 
	#MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0BU)

	)

190 
	#MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0CU)

	)

191 
	#MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0DU)

	)

192 
	#MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0EU)

	)

193 
	#MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0FU)

	)

194 
	#MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10U)

	)

195 
	#MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11U)

	)

196 
	#MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12U)

	)

197 
	#MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13U)

	)

198 
	#MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14U)

	)

199 
	#MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15U)

	)

200 
	#MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16U)

	)

201 
	#MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17U)

	)

202 
	#MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18U)

	)

203 
	#MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19U)

	)

204 
	#MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1AU)

	)

205 
	#MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1BU)

	)

206 
	#MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1CU)

	)

207 
	#MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1DU)

	)

208 
	#MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1EU)

	)

209 
	#MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1FU)

	)

217 
	#MPU_REGION_NO_ACCESS
 ((
uöt8_t
)0x00U)

	)

218 
	#MPU_REGION_PRIV_RW
 ((
uöt8_t
)0x01U)

	)

219 
	#MPU_REGION_PRIV_RW_URO
 ((
uöt8_t
)0x02U)

	)

220 
	#MPU_REGION_FULL_ACCESS
 ((
uöt8_t
)0x03U)

	)

221 
	#MPU_REGION_PRIV_RO
 ((
uöt8_t
)0x05U)

	)

222 
	#MPU_REGION_PRIV_RO_URO
 ((
uöt8_t
)0x06U)

	)

230 
	#MPU_REGION_NUMBER0
 ((
uöt8_t
)0x00U)

	)

231 
	#MPU_REGION_NUMBER1
 ((
uöt8_t
)0x01U)

	)

232 
	#MPU_REGION_NUMBER2
 ((
uöt8_t
)0x02U)

	)

233 
	#MPU_REGION_NUMBER3
 ((
uöt8_t
)0x03U)

	)

234 
	#MPU_REGION_NUMBER4
 ((
uöt8_t
)0x04U)

	)

235 
	#MPU_REGION_NUMBER5
 ((
uöt8_t
)0x05U)

	)

236 
	#MPU_REGION_NUMBER6
 ((
uöt8_t
)0x06U)

	)

237 
	#MPU_REGION_NUMBER7
 ((
uöt8_t
)0x07U)

	)

257 
HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
);

258 
HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
);

259 
HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
);

260 
HAL_NVIC_Sy°emRe£t
();

261 
uöt32_t
 
HAL_SYSTICK_C⁄fig
(uöt32_à
TicksNumb
);

262 #i‡(
__MPU_PRESENT
 == 1)

267 
__STATIC_INLINE
 
HAL_MPU_DißbÀ
()

271 
__DMB
();

273 
MPU
->
CTRL
 = 0;

288 
__STATIC_INLINE
 
HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

291 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

293 
__DSB
();

295 
__ISB
();

308 
uöt32_t
 
HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
);

309 
uöt32_t
 
HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

310 
HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

311 
HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
);

312 
HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
);

313 
HAL_SYSTICK_IRQH™dÀr
();

314 
HAL_SYSTICK_CÆlback
();

315 #i‡(
__MPU_PRESENT
 == 1)

316 
HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
);

334 #i‡(
__MPU_PRESENT
 == 1)

335 
	#IS_MPU_REGION_ENABLE
(
STATE
Ë(((STATEË=
MPU_REGION_ENABLE
Ë|| \

	)

336 ((
STATE
Ë=
MPU_REGION_DISABLE
))

338 
	#IS_MPU_INSTRUCTION_ACCESS
(
STATE
Ë(((STATEË=
MPU_INSTRUCTION_ACCESS_ENABLE
Ë|| \

	)

339 ((
STATE
Ë=
MPU_INSTRUCTION_ACCESS_DISABLE
))

341 
	#IS_MPU_ACCESS_SHAREABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_SHAREABLE
Ë|| \

	)

342 ((
STATE
Ë=
MPU_ACCESS_NOT_SHAREABLE
))

344 
	#IS_MPU_ACCESS_CACHEABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_CACHEABLE
Ë|| \

	)

345 ((
STATE
Ë=
MPU_ACCESS_NOT_CACHEABLE
))

347 
	#IS_MPU_ACCESS_BUFFERABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_BUFFERABLE
Ë|| \

	)

348 ((
STATE
Ë=
MPU_ACCESS_NOT_BUFFERABLE
))

350 
	#IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
TYPE
Ë(((TYPEË=
MPU_REGION_NO_ACCESS
Ë|| \

	)

351 ((
TYPE
Ë=
MPU_REGION_PRIV_RW
) || \

352 ((
TYPE
Ë=
MPU_REGION_PRIV_RW_URO
) || \

353 ((
TYPE
Ë=
MPU_REGION_FULL_ACCESS
) || \

354 ((
TYPE
Ë=
MPU_REGION_PRIV_RO
) || \

355 ((
TYPE
Ë=
MPU_REGION_PRIV_RO_URO
))

357 
	#IS_MPU_REGION_NUMBER
(
NUMBER
Ë(((NUMBERË=
MPU_REGION_NUMBER0
Ë|| \

	)

358 ((
NUMBER
Ë=
MPU_REGION_NUMBER1
) || \

359 ((
NUMBER
Ë=
MPU_REGION_NUMBER2
) || \

360 ((
NUMBER
Ë=
MPU_REGION_NUMBER3
) || \

361 ((
NUMBER
Ë=
MPU_REGION_NUMBER4
) || \

362 ((
NUMBER
Ë=
MPU_REGION_NUMBER5
) || \

363 ((
NUMBER
Ë=
MPU_REGION_NUMBER6
) || \

364 ((
NUMBER
Ë=
MPU_REGION_NUMBER7
))

366 
	#IS_MPU_REGION_SIZE
(
SIZE
Ë(((SIZEË=
MPU_REGION_SIZE_256B
Ë|| \

	)

367 ((
SIZE
Ë=
MPU_REGION_SIZE_512B
) || \

368 ((
SIZE
Ë=
MPU_REGION_SIZE_1KB
) || \

369 ((
SIZE
Ë=
MPU_REGION_SIZE_2KB
) || \

370 ((
SIZE
Ë=
MPU_REGION_SIZE_4KB
) || \

371 ((
SIZE
Ë=
MPU_REGION_SIZE_8KB
) || \

372 ((
SIZE
Ë=
MPU_REGION_SIZE_16KB
) || \

373 ((
SIZE
Ë=
MPU_REGION_SIZE_32KB
) || \

374 ((
SIZE
Ë=
MPU_REGION_SIZE_64KB
) || \

375 ((
SIZE
Ë=
MPU_REGION_SIZE_128KB
) || \

376 ((
SIZE
Ë=
MPU_REGION_SIZE_256KB
) || \

377 ((
SIZE
Ë=
MPU_REGION_SIZE_512KB
) || \

378 ((
SIZE
Ë=
MPU_REGION_SIZE_1MB
) || \

379 ((
SIZE
Ë=
MPU_REGION_SIZE_2MB
) || \

380 ((
SIZE
Ë=
MPU_REGION_SIZE_4MB
) || \

381 ((
SIZE
Ë=
MPU_REGION_SIZE_8MB
) || \

382 ((
SIZE
Ë=
MPU_REGION_SIZE_16MB
) || \

383 ((
SIZE
Ë=
MPU_REGION_SIZE_32MB
) || \

384 ((
SIZE
Ë=
MPU_REGION_SIZE_64MB
) || \

385 ((
SIZE
Ë=
MPU_REGION_SIZE_128MB
) || \

386 ((
SIZE
Ë=
MPU_REGION_SIZE_256MB
) || \

387 ((
SIZE
Ë=
MPU_REGION_SIZE_512MB
) || \

388 ((
SIZE
Ë=
MPU_REGION_SIZE_1GB
) || \

389 ((
SIZE
Ë=
MPU_REGION_SIZE_2GB
) || \

390 ((
SIZE
Ë=
MPU_REGION_SIZE_4GB
))

392 
	#IS_MPU_SUB_REGION_DISABLE
(
SUBREGION
Ë((SUBREGIONË< (
uöt16_t
)0x00FFU)

	)

408 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dac.h

37 #i‚de‡
__STM32L0xx_HAL_DAC_H


38 
	#__STM32L0xx_HAL_DAC_H


	)

40 #ifde‡
__˝lu•lus


44 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
Ë&& !deföed (
STM32L031xx
Ë&& !deföed (
STM32L041xx
Ë&& !deföed (
STM32L051xx
Ë&& !deföed (
STM32L061xx
Ë&& !deföed (
STM32L071xx
Ë&& !deföed (
STM32L081xx
)

47 
	~"°m32l0xx_hÆ_def.h
"

68 
HAL_DAC_STATE_RESET
 = 0x00U,

69 
HAL_DAC_STATE_READY
 = 0x01U,

70 
HAL_DAC_STATE_BUSY
 = 0x02U,

71 
HAL_DAC_STATE_TIMEOUT
 = 0x03U,

72 
HAL_DAC_STATE_ERROR
 = 0x04U

74 }
	tHAL_DAC_SèãTy≥Def
;

81 
DAC_Ty≥Def
 *
	mIn°™˚
;

83 
__IO
 
HAL_DAC_SèãTy≥Def
 
	mSèã
;

85 
HAL_LockTy≥Def
 
	mLock
;

87 
DMA_H™dÀTy≥Def
 *
	mDMA_H™dÀ1
;

89 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

90 
DMA_H™dÀTy≥Def
 *
	mDMA_H™dÀ2
;

93 
__IO
 
uöt32_t
 
	mEº‹Code
;

95 }
	tDAC_H™dÀTy≥Def
;

102 
uöt32_t
 
	mDAC_Triggî
;

105 
uöt32_t
 
	mDAC_OuçutBuf„r
;

108 }
	tDAC_Ch™√lC⁄fTy≥Def
;

123 
	#HAL_DAC_ERROR_NONE
 0x00U

	)

124 
	#HAL_DAC_ERROR_DMAUNDERRUNCH1
 0x01U

	)

125 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

126 
	#HAL_DAC_ERROR_DMAUNDERRUNCH2
 0x02U

	)

128 
	#HAL_DAC_ERROR_DMA
 0x04U

	)

136 
	#DAC_TRIGGER_NONE
 ((
uöt32_t
)0x00000000UË

	)

137 
	#DAC_TRIGGER_T6_TRGO
 ((
uöt32_t
Ë
DAC_CR_TEN1
Ë

	)

138 
	#DAC_TRIGGER_T21_TRGO
 ((
uöt32_t
)–
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

139 
	#DAC_TRIGGER_T2_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TEN1
)Ë

	)

140 
	#DAC_TRIGGER_EXT_IT9
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_1
 | 
DAC_CR_TEN1
)Ë

	)

141 
	#DAC_TRIGGER_SOFTWARE
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

143 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

144 
	#DAC_TRIGGER_T3_TRGO
 ((
uöt32_t
)–
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

145 
	#DAC_TRIGGER_T3_CH3
 ((
uöt32_t
)–
DAC_CR_TSEL1_1
 | 
DAC_CR_TEN1
)Ë

	)

146 
	#DAC_TRIGGER_T7_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

149 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

150 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_TRIGGER_NONE
Ë|| \

	)

151 ((
	gTRIGGER
Ë=
DAC_TRIGGER_T6_TRGO
) || \

152 ((
TRIGGER
Ë=
DAC_TRIGGER_T3_TRGO
) || \

153 ((
TRIGGER
Ë=
DAC_TRIGGER_T3_CH3
) || \

154 ((
TRIGGER
Ë=
DAC_TRIGGER_T7_TRGO
) || \

155 ((
TRIGGER
Ë=
DAC_TRIGGER_T21_TRGO
) || \

156 ((
TRIGGER
Ë=
DAC_TRIGGER_T2_TRGO
) || \

157 ((
TRIGGER
Ë=
DAC_TRIGGER_EXT_IT9
) || \

158 ((
TRIGGER
Ë=
DAC_TRIGGER_SOFTWARE
))

160 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_TRIGGER_NONE
Ë|| \

	)

161 ((
TRIGGER
Ë=
DAC_TRIGGER_T6_TRGO
) || \

162 ((
TRIGGER
Ë=
DAC_TRIGGER_T21_TRGO
) || \

163 ((
TRIGGER
Ë=
DAC_TRIGGER_T2_TRGO
) || \

164 ((
TRIGGER
Ë=
DAC_TRIGGER_EXT_IT9
) || \

165 ((
TRIGGER
Ë=
DAC_TRIGGER_SOFTWARE
))

174 
	#DAC_OUTPUTBUFFER_ENABLE
 ((
uöt32_t
)0x00000000U)

	)

175 
	#DAC_OUTPUTBUFFER_DISABLE
 ((
uöt32_t
)
DAC_CR_BOFF1
)

	)

177 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OUTPUTBUFFER_ENABLE
Ë|| \

	)

178 ((
STATE
Ë=
DAC_OUTPUTBUFFER_DISABLE
))

186 
	#DAC_CHANNEL_1
 ((
uöt32_t
)0x00000000U)

	)

187 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

188 
	#DAC_CHANNEL_2
 ((
uöt32_t
)0x00000010U)

	)

191 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

192 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_CHANNEL_1
Ë|| \

	)

193 ((
CHANNEL
Ë=
DAC_CHANNEL_2
))

195 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë((CHANNELË=
DAC_CHANNEL_1
)

	)

204 
	#DAC_ALIGN_12B_R
 ((
uöt32_t
)0x00000000U)

	)

205 
	#DAC_ALIGN_12B_L
 ((
uöt32_t
)0x00000004U)

	)

206 
	#DAC_ALIGN_8B_R
 ((
uöt32_t
)0x00000008U)

	)

208 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_ALIGN_12B_R
Ë|| \

	)

209 ((
ALIGN
Ë=
DAC_ALIGN_12B_L
) || \

210 ((
ALIGN
Ë=
DAC_ALIGN_8B_R
))

218 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0U)

	)

226 
	#DAC_FLAG_DMAUDR1
 ((
uöt32_t
)
DAC_SR_DMAUDR1
)

	)

227 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

228 
	#DAC_FLAG_DMAUDR2
 ((
uöt32_t
)
DAC_SR_DMAUDR2
)

	)

238 
	#DAC_IT_DMAUDR1
 ((
uöt32_t
)
DAC_SR_DMAUDR1
)

	)

239 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

240 
	#DAC_IT_DMAUDR2
 ((
uöt32_t
)
DAC_SR_DMAUDR2
)

	)

261 
	#__HAL_DAC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DAC_STATE_RESET
)

	)

268 
	#__HAL_DAC_ENABLE
(
__HANDLE__
, 
__DAC_CHANNEL__
Ë\

	)

269 
SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR
, (
DAC_CR_EN1
 << (
__DAC_CHANNEL__
)))

276 
	#__HAL_DAC_DISABLE
(
__HANDLE__
, 
__DAC_CHANNEL__
Ë\

	)

277 
CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR
, (
DAC_CR_EN1
 << (
__DAC_CHANNEL__
)))

280 
	#__HAL_DAC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë\

	)

281 
SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR
, (
__INTERRUPT__
))

289 
	#__HAL_DAC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë\

	)

290 
CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR
, (
__INTERRUPT__
))

300 
	#__HAL_DAC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë\

	)

301 (((
	g__HANDLE__
)->
	gIn°™˚
->
	gCR
 & (
	g__INTERRUPT__
)Ë=(
__INTERRUPT__
))

308 
	#__HAL_DAC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë\

	)

309 ((((
	g__HANDLE__
)->
	gIn°™˚
->
	gSR
Ë& (
	g__FLAG__
)Ë=(
__FLAG__
))

316 
	#__HAL_DAC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë\

	)

317 (((
	g__HANDLE__
)->
	gIn°™˚
->
	gSR
Ë(
__FLAG__
))

333 
	#DAC_DHR12R1_ALIGNEMENT
(
__ALIGNEMENT__
Ë(((
uöt32_t
)0x00000008UË+ (__ALIGNEMENT__))

	)

339 
	#DAC_DHR12R2_ALIGNEMENT
(
__ALIGNEMENT__
Ë(((
uöt32_t
)0x00000014UË+ (__ALIGNEMENT__))

	)

345 
	#DAC_DHR12RD_ALIGNEMENT
(
__ALIGNEMENT__
Ë(((
uöt32_t
)0x00000020UË+ (__ALIGNEMENT__))

	)

359 
	~"°m32l0xx_hÆ_dac_ex.h
"

371 
HAL_SètusTy≥Def
 
HAL_DAC_Inô
(
DAC_H™dÀTy≥Def
* 
hdac
);

372 
HAL_SètusTy≥Def
 
HAL_DAC_DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
);

373 
HAL_DAC_M•Inô
(
DAC_H™dÀTy≥Def
* 
hdac
);

374 
HAL_DAC_M•DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
);

384 
HAL_SètusTy≥Def
 
HAL_DAC_Sèπ
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
);

385 
HAL_SètusTy≥Def
 
HAL_DAC_St›
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
);

386 
HAL_SètusTy≥Def
 
HAL_DAC_Sèπ_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_t* 
pD©a
, uöt32_à
Lígth
, uöt32_à
Alignmít
);

387 
HAL_SètusTy≥Def
 
HAL_DAC_St›_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
);

388 
HAL_SètusTy≥Def
 
HAL_DAC_SëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Alignmít
, uöt32_à
D©a
);

389 
uöt32_t
 
HAL_DAC_GëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, uöt32_à
Ch™√l
);

390 
HAL_DAC_IRQH™dÀr
(
DAC_H™dÀTy≥Def
* 
hdac
);

391 
HAL_DAC_C⁄vC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
);

392 
HAL_DAC_C⁄vHÆfC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
);

393 
HAL_DAC_Eº‹CÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
);

394 
HAL_DAC_DMAUndîrunCÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
);

404 
HAL_SètusTy≥Def
 
HAL_DAC_C⁄figCh™√l
(
DAC_H™dÀTy≥Def
* 
hdac
, 
DAC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

414 
HAL_DAC_SèãTy≥Def
 
HAL_DAC_GëSèã
(
DAC_H™dÀTy≥Def
* 
hdac
);

415 
uöt32_t
 
HAL_DAC_GëEº‹
(
DAC_H™dÀTy≥Def
 *
hdac
);

435 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dac_ex.h

37 #i‚de‡
__STM32L0xx_HAL_DAC_EX_H


38 
	#__STM32L0xx_HAL_DAC_EX_H


	)

40 #ifde‡
__˝lu•lus


44 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
Ë&& !deföed (
STM32L031xx
Ë&& !deföed (
STM32L041xx
Ë&& !deföed (
STM32L051xx
Ë&& !deföed (
STM32L061xx
Ë&& !deföed (
STM32L071xx
Ë&& !deföed (
STM32L081xx
)

47 
	~"°m32l0xx_hÆ_def.h
"

68 
	#DAC_LFSRUNMASK_BIT0
 ((
uöt32_t
)0x00000000UË

	)

69 
	#DAC_LFSRUNMASK_BITS1_0
 ((
uöt32_t
)
DAC_CR_MAMP1_0
Ë

	)

70 
	#DAC_LFSRUNMASK_BITS2_0
 ((
uöt32_t
)
DAC_CR_MAMP1_1
Ë

	)

71 
	#DAC_LFSRUNMASK_BITS3_0
 ((
uöt32_t
)
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
)

	)

72 
	#DAC_LFSRUNMASK_BITS4_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
Ë

	)

73 
	#DAC_LFSRUNMASK_BITS5_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
Ë

	)

74 
	#DAC_LFSRUNMASK_BITS6_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
Ë

	)

75 
	#DAC_LFSRUNMASK_BITS7_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

76 
	#DAC_LFSRUNMASK_BITS8_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
Ë

	)

77 
	#DAC_LFSRUNMASK_BITS9_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
Ë

	)

78 
	#DAC_LFSRUNMASK_BITS10_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
Ë

	)

79 
	#DAC_LFSRUNMASK_BITS11_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

80 
	#DAC_TRIANGLEAMPLITUDE_1
 ((
uöt32_t
)0x00000000UË

	)

81 
	#DAC_TRIANGLEAMPLITUDE_3
 ((
uöt32_t
)
DAC_CR_MAMP1_0
Ë

	)

82 
	#DAC_TRIANGLEAMPLITUDE_7
 ((
uöt32_t
)
DAC_CR_MAMP1_1
Ë

	)

83 
	#DAC_TRIANGLEAMPLITUDE_15
 ((
uöt32_t
)
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

84 
	#DAC_TRIANGLEAMPLITUDE_31
 ((
uöt32_t
)
DAC_CR_MAMP1_2
Ë

	)

85 
	#DAC_TRIANGLEAMPLITUDE_63
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
Ë

	)

86 
	#DAC_TRIANGLEAMPLITUDE_127
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
Ë

	)

87 
	#DAC_TRIANGLEAMPLITUDE_255
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

88 
	#DAC_TRIANGLEAMPLITUDE_511
 ((
uöt32_t
)
DAC_CR_MAMP1_3
Ë

	)

89 
	#DAC_TRIANGLEAMPLITUDE_1023
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
Ë

	)

90 
	#DAC_TRIANGLEAMPLITUDE_2047
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
Ë

	)

91 
	#DAC_TRIANGLEAMPLITUDE_4095
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

93 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUNMASK_BIT0
Ë|| \

	)

94 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS1_0
) || \

95 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS2_0
) || \

96 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS3_0
) || \

97 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS4_0
) || \

98 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS5_0
) || \

99 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS6_0
) || \

100 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS7_0
) || \

101 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS8_0
) || \

102 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS9_0
) || \

103 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS10_0
) || \

104 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS11_0
) || \

105 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_1
) || \

106 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_3
) || \

107 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_7
) || \

108 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_15
) || \

109 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_31
) || \

110 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_63
) || \

111 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_127
) || \

112 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_255
) || \

113 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_511
) || \

114 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_1023
) || \

115 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_2047
) || \

116 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_4095
))

138 
HAL_SètusTy≥Def
 
HAL_DACEx_TrüngÀWaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
);

139 
HAL_SètusTy≥Def
 
HAL_DACEx_Noi£WaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
);

141 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

142 
uöt32_t
 
HAL_DACEx_DuÆGëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
);

143 
HAL_SètusTy≥Def
 
HAL_DACEx_DuÆSëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Alignmít
, uöt32_à
D©a1
, uöt32_à
D©a2
);

144 
HAL_DACEx_C⁄vC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

145 
HAL_DACEx_C⁄vHÆfC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

146 
HAL_DACEx_Eº‹CÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

147 
HAL_DACEx_DMAUndîrunCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

176 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h

38 #i‚de‡
__STM32L0xx_HAL_DEF


39 
	#__STM32L0xx_HAL_DEF


	)

41 #ifde‡
__˝lu•lus


46 
	~"°m32l0xx.h
"

47 
	~"Legacy/°m32_hÆ_Àgacy.h
"

48 
	~<°dio.h
>

57 
HAL_OK
 = 0x00U,

58 
HAL_ERROR
 = 0x01U,

59 
HAL_BUSY
 = 0x02U,

60 
HAL_TIMEOUT
 = 0x03U

61 } 
	tHAL_SètusTy≥Def
;

68 
HAL_UNLOCKED
 = 0x00U,

69 
HAL_LOCKED
 = 0x01U

70 } 
	tHAL_LockTy≥Def
;

74 
	#UNUSED
(
x
Ë(()(x))

	)

76 
	#HAL_MAX_DELAY
 0xFFFFFFFFU

	)

78 
	#HAL_IS_BIT_SET
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë!
RESET
)

	)

79 
	#HAL_IS_BIT_CLR
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë=
RESET
)

	)

81 
	#__HAL_LINKDMA
(
__HANDLE__
, 
__PPP_DMA_FIELD__
, 
__DMA_HANDLE__
Ë\

	)

83 (
__HANDLE__
)->
__PPP_DMA_FIELD__
 = &(
__DMA_HANDLE__
); \

84 (
__DMA_HANDLE__
).
P¨ít
 = (
__HANDLE__
); \

102 
	#__HAL_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 0U)

	)

104 #i‡(
USE_RTOS
 == 1)

110 
	#__HAL_LOCK
(
__HANDLE__
Ë\

	)

112 if((
__HANDLE__
)->
Lock
 =
HAL_LOCKED
) \

114  
HAL_BUSY
; \

118 (
__HANDLE__
)->
Lock
 = 
HAL_LOCKED
; \

122 
	#__HAL_UNLOCK
(
__HANDLE__
Ë\

	)

124 (
__HANDLE__
)->
Lock
 = 
HAL_UNLOCKED
; \

128 #i‡ 
deföed
 ( 
__GNUC__
 )

129 #i‚de‡
__wók


130 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

132 #i‚de‡
__∑cked


133 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

136 
	#__NOINLINE
 
	`__©åibuã__
 ( (
noölöe
Ë)

	)

142 #i‡
deföed
 (
__GNUC__
)

143 #i‚de‡
__ALIGN_END


144 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

146 #i‚de‡
__ALIGN_BEGIN


147 
	#__ALIGN_BEGIN


	)

150 #i‚de‡
__ALIGN_END


151 
	#__ALIGN_END


	)

153 #i‚de‡
__ALIGN_BEGIN


154 #i‡
deföed
 (
__CC_ARM
)

155 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

156 #ñi‡
deföed
 (
__ICCARM__
)

157 
	#__ALIGN_BEGIN


	)

165 #i‡
deföed
 ( 
__CC_ARM
 )

175 
	#__RAM_FUNC
 
HAL_SètusTy≥Def


	)

177 
	#__NOINLINE
 
	`__©åibuã__
 ( (
noölöe
Ë)

	)

180 #ñi‡
deföed
 ( 
__ICCARM__
 )

185 
	#__RAM_FUNC
 
__ømfunc
 
HAL_SètusTy≥Def


	)

187 
	#__NOINLINE
 
	`_Pøgma
("›timizêno_ölöe")

	)

189 #ñi‡
deföed
 ( 
__GNUC__
 )

195 
	#__RAM_FUNC
 
HAL_SètusTy≥Def
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

199 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h

37 #i‚de‡
__STM32L0xx_HAL_DMA_H


38 
	#__STM32L0xx_HAL_DMA_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

65 
uöt32_t
 
Reque°
;

68 
uöt32_t
 
Dúe˘i⁄
;

72 
uöt32_t
 
PîùhInc
;

76 
uöt32_t
 
MemInc
;

80 
uöt32_t
 
PîùhD©aAlignmít
;

84 
uöt32_t
 
MemD©aAlignmít
;

88 
uöt32_t
 
Mode
;

93 
uöt32_t
 
Pri‹ôy
;

95 } 
	tDMA_InôTy≥Def
;

102 
DMA_MODE
 = 0U,

103 
DMA_PRIORITY
 = 1U,

105 } 
	tDMA_C⁄åﬁTy≥Def
;

112 
HAL_DMA_STATE_RESET
 = 0x00U,

113 
HAL_DMA_STATE_READY
 = 0x01U,

114 
HAL_DMA_STATE_BUSY
 = 0x02U,

115 
HAL_DMA_STATE_TIMEOUT
 = 0x03U,

116 
HAL_DMA_STATE_ERROR
 = 0x04U,

117 
HAL_DMA_STATE_READY_HALF
 = 0x05U,

118 }
	tHAL_DMA_SèãTy≥Def
;

125 
HAL_DMA_FULL_TRANSFER
 = 0x00U,

126 
HAL_DMA_HALF_TRANSFER
 = 0x01U,

128 }
	tHAL_DMA_LevñCom∂ëeTy≥Def
;

134 
	s__DMA_H™dÀTy≥Def


136 
DMA_Ch™√l_Ty≥Def
 *
In°™˚
;

138 
DMA_InôTy≥Def
 
Inô
;

140 
HAL_LockTy≥Def
 
Lock
;

142 
__IO
 
HAL_DMA_SèãTy≥Def
 
Sèã
;

144 *
P¨ít
;

146 (* 
X„rC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

148 (* 
X„rHÆfC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

150 (* 
X„rEº‹CÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

152 (* 
X„rAb‹tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

154 
__IO
 
uöt32_t
 
Eº‹Code
;

156 } 
	tDMA_H™dÀTy≥Def
;

171 
	#HAL_DMA_ERROR_NONE
 ((
uöt32_t
)0x00000000UË

	)

172 
	#HAL_DMA_ERROR_TE
 ((
uöt32_t
)0x00000001UË

	)

173 
	#HAL_DMA_ERROR_NO_XFER
 ((
uöt32_t
)0x00000004UË

	)

174 
	#HAL_DMA_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000020UË

	)

176 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

177 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Ch™√l1
Ë|| \

	)

178 ((
INSTANCE
Ë=
DMA1_Ch™√l2
) || \

179 ((
INSTANCE
Ë=
DMA1_Ch™√l3
) || \

180 ((
INSTANCE
Ë=
DMA1_Ch™√l4
) || \

181 ((
INSTANCE
Ë=
DMA1_Ch™√l5
))

183 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Ch™√l1
Ë|| \

	)

184 ((
INSTANCE
Ë=
DMA1_Ch™√l2
) || \

185 ((
INSTANCE
Ë=
DMA1_Ch™√l3
) || \

186 ((
INSTANCE
Ë=
DMA1_Ch™√l4
) || \

187 ((
INSTANCE
Ë=
DMA1_Ch™√l5
) || \

188 ((
INSTANCE
Ë=
DMA1_Ch™√l6
) || \

189 ((
INSTANCE
Ë=
DMA1_Ch™√l7
))

192 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
))

	)

202 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

204 
	#DMA_REQUEST_0
 ((
uöt32_t
)0x00000000U)

	)

205 
	#DMA_REQUEST_1
 ((
uöt32_t
)0x00000001U)

	)

206 
	#DMA_REQUEST_2
 ((
uöt32_t
)0x00000002U)

	)

207 
	#DMA_REQUEST_3
 ((
uöt32_t
)0x00000003U)

	)

208 
	#DMA_REQUEST_4
 ((
uöt32_t
)0x00000004U)

	)

209 
	#DMA_REQUEST_5
 ((
uöt32_t
)0x00000005U)

	)

210 
	#DMA_REQUEST_6
 ((
uöt32_t
)0x00000006U)

	)

211 
	#DMA_REQUEST_7
 ((
uöt32_t
)0x00000007U)

	)

212 
	#DMA_REQUEST_8
 ((
uöt32_t
)0x00000008U)

	)

213 
	#DMA_REQUEST_9
 ((
uöt32_t
)0x00000009U)

	)

214 
	#DMA_REQUEST_10
 ((
uöt32_t
)0x0000000AU)

	)

215 
	#DMA_REQUEST_11
 ((
uöt32_t
)0x0000000BU)

	)

216 
	#DMA_REQUEST_12
 ((
uöt32_t
)0x0000000CU)

	)

217 
	#DMA_REQUEST_13
 ((
uöt32_t
)0x0000000DU)

	)

218 
	#DMA_REQUEST_14
 ((
uöt32_t
)0x0000000EU)

	)

219 
	#DMA_REQUEST_15
 ((
uöt32_t
)0x0000000FU)

	)

221 
	#IS_DMA_ALL_REQUEST
(
REQUEST
Ë(((REQUESTË=
DMA_REQUEST_0
Ë|| \

	)

222 ((
REQUEST
Ë=
DMA_REQUEST_1
) || \

223 ((
REQUEST
Ë=
DMA_REQUEST_2
) || \

224 ((
REQUEST
Ë=
DMA_REQUEST_3
) || \

225 ((
REQUEST
Ë=
DMA_REQUEST_4
) || \

226 ((
REQUEST
Ë=
DMA_REQUEST_5
) || \

227 ((
REQUEST
Ë=
DMA_REQUEST_6
) || \

228 ((
REQUEST
Ë=
DMA_REQUEST_7
) || \

229 ((
REQUEST
Ë=
DMA_REQUEST_8
) || \

230 ((
REQUEST
Ë=
DMA_REQUEST_9
) || \

231 ((
REQUEST
Ë=
DMA_REQUEST_10
) || \

232 ((
REQUEST
Ë=
DMA_REQUEST_11
) || \

233 ((
REQUEST
Ë=
DMA_REQUEST_12
) || \

234 ((
REQUEST
Ë=
DMA_REQUEST_13
) || \

235 ((
REQUEST
Ë=
DMA_REQUEST_14
) || \

236 ((
REQUEST
Ë=
DMA_REQUEST_15
))

240 
	#DMA_REQUEST_0
 ((
uöt32_t
)0x00000000U)

	)

241 
	#DMA_REQUEST_1
 ((
uöt32_t
)0x00000001U)

	)

242 
	#DMA_REQUEST_2
 ((
uöt32_t
)0x00000002U)

	)

243 
	#DMA_REQUEST_3
 ((
uöt32_t
)0x00000003U)

	)

244 
	#DMA_REQUEST_4
 ((
uöt32_t
)0x00000004U)

	)

245 
	#DMA_REQUEST_5
 ((
uöt32_t
)0x00000005U)

	)

246 
	#DMA_REQUEST_6
 ((
uöt32_t
)0x00000006U)

	)

247 
	#DMA_REQUEST_7
 ((
uöt32_t
)0x00000007U)

	)

248 
	#DMA_REQUEST_8
 ((
uöt32_t
)0x00000008U)

	)

249 
	#DMA_REQUEST_9
 ((
uöt32_t
)0x00000009U)

	)

250 
	#DMA_REQUEST_11
 ((
uöt32_t
)0x0000000BU)

	)

252 
	#IS_DMA_ALL_REQUEST
(
REQUEST
Ë(((REQUESTË=
DMA_REQUEST_0
Ë|| \

	)

253 ((
REQUEST
Ë=
DMA_REQUEST_1
) || \

254 ((
REQUEST
Ë=
DMA_REQUEST_2
) || \

255 ((
REQUEST
Ë=
DMA_REQUEST_3
) || \

256 ((
REQUEST
Ë=
DMA_REQUEST_4
) || \

257 ((
REQUEST
Ë=
DMA_REQUEST_5
) || \

258 ((
REQUEST
Ë=
DMA_REQUEST_6
) || \

259 ((
REQUEST
Ë=
DMA_REQUEST_7
) || \

260 ((
REQUEST
Ë=
DMA_REQUEST_8
) || \

261 ((
REQUEST
Ë=
DMA_REQUEST_9
) || \

262 ((
REQUEST
Ë=
DMA_REQUEST_11
))

272 
	#DMA_PERIPH_TO_MEMORY
 ((
uöt32_t
)0x00000000UË

	)

273 
	#DMA_MEMORY_TO_PERIPH
 ((
uöt32_t
)
DMA_CCR_DIR
Ë

	)

274 
	#DMA_MEMORY_TO_MEMORY
 ((
uöt32_t
)(
DMA_CCR_MEM2MEM
)Ë

	)

276 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_PERIPH_TO_MEMORY
 ) || \

	)

277 ((
DIRECTION
Ë=
DMA_MEMORY_TO_PERIPH
) || \

278 ((
DIRECTION
Ë=
DMA_MEMORY_TO_MEMORY
))

286 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

294 
	#DMA_PINC_ENABLE
 ((
uöt32_t
)
DMA_CCR_PINC
Ë

	)

295 
	#DMA_PINC_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

297 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PINC_ENABLE
Ë|| \

	)

298 ((
STATE
Ë=
DMA_PINC_DISABLE
))

306 
	#DMA_MINC_ENABLE
 ((
uöt32_t
)
DMA_CCR_MINC
Ë

	)

307 
	#DMA_MINC_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

309 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_MINC_ENABLE
Ë|| \

	)

310 ((
STATE
Ë=
DMA_MINC_DISABLE
))

318 
	#DMA_PDATAALIGN_BYTE
 ((
uöt32_t
)0x00000000UË

	)

319 
	#DMA_PDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_CCR_PSIZE_0
Ë

	)

320 
	#DMA_PDATAALIGN_WORD
 ((
uöt32_t
)
DMA_CCR_PSIZE_1
Ë

	)

322 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PDATAALIGN_BYTE
Ë|| \

	)

323 ((
SIZE
Ë=
DMA_PDATAALIGN_HALFWORD
) || \

324 ((
SIZE
Ë=
DMA_PDATAALIGN_WORD
))

333 
	#DMA_MDATAALIGN_BYTE
 ((
uöt32_t
)0x00000000UË

	)

334 
	#DMA_MDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_CCR_MSIZE_0
Ë

	)

335 
	#DMA_MDATAALIGN_WORD
 ((
uöt32_t
)
DMA_CCR_MSIZE_1
Ë

	)

337 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_MDATAALIGN_BYTE
Ë|| \

	)

338 ((
SIZE
Ë=
DMA_MDATAALIGN_HALFWORD
) || \

339 ((
SIZE
Ë=
DMA_MDATAALIGN_WORD
 ))

347 
	#DMA_NORMAL
 ((
uöt32_t
)0x00000000UË

	)

348 
	#DMA_CIRCULAR
 ((
uöt32_t
)
DMA_CCR_CIRC
Ë

	)

350 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_NORMAL
 ) || \

	)

351 ((
MODE
Ë=
DMA_CIRCULAR
))

359 
	#DMA_PRIORITY_LOW
 ((
uöt32_t
)0x00000000UË

	)

360 
	#DMA_PRIORITY_MEDIUM
 ((
uöt32_t
)
DMA_CCR_PL_0
Ë

	)

361 
	#DMA_PRIORITY_HIGH
 ((
uöt32_t
)
DMA_CCR_PL_1
Ë

	)

362 
	#DMA_PRIORITY_VERY_HIGH
 ((
uöt32_t
)
DMA_CCR_PL
Ë

	)

364 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_PRIORITY_LOW
 ) || \

	)

365 ((
PRIORITY
Ë=
DMA_PRIORITY_MEDIUM
) || \

366 ((
PRIORITY
Ë=
DMA_PRIORITY_HIGH
) || \

367 ((
PRIORITY
Ë=
DMA_PRIORITY_VERY_HIGH
))

377 
	#DMA_IT_TC
 ((
uöt32_t
)
DMA_CCR_TCIE
)

	)

378 
	#DMA_IT_HT
 ((
uöt32_t
)
DMA_CCR_HTIE
)

	)

379 
	#DMA_IT_TE
 ((
uöt32_t
)
DMA_CCR_TEIE
)

	)

389 
	#DMA_FLAG_GL1
 ((
uöt32_t
)0x00000001U)

	)

390 
	#DMA_FLAG_TC1
 ((
uöt32_t
)0x00000002U)

	)

391 
	#DMA_FLAG_HT1
 ((
uöt32_t
)0x00000004U)

	)

392 
	#DMA_FLAG_TE1
 ((
uöt32_t
)0x00000008U)

	)

393 
	#DMA_FLAG_GL2
 ((
uöt32_t
)0x00000010U)

	)

394 
	#DMA_FLAG_TC2
 ((
uöt32_t
)0x00000020U)

	)

395 
	#DMA_FLAG_HT2
 ((
uöt32_t
)0x00000040U)

	)

396 
	#DMA_FLAG_TE2
 ((
uöt32_t
)0x00000080U)

	)

397 
	#DMA_FLAG_GL3
 ((
uöt32_t
)0x00000100U)

	)

398 
	#DMA_FLAG_TC3
 ((
uöt32_t
)0x00000200U)

	)

399 
	#DMA_FLAG_HT3
 ((
uöt32_t
)0x00000400U)

	)

400 
	#DMA_FLAG_TE3
 ((
uöt32_t
)0x00000800U)

	)

401 
	#DMA_FLAG_GL4
 ((
uöt32_t
)0x00001000U)

	)

402 
	#DMA_FLAG_TC4
 ((
uöt32_t
)0x00002000U)

	)

403 
	#DMA_FLAG_HT4
 ((
uöt32_t
)0x00004000U)

	)

404 
	#DMA_FLAG_TE4
 ((
uöt32_t
)0x00008000U)

	)

405 
	#DMA_FLAG_GL5
 ((
uöt32_t
)0x00010000U)

	)

406 
	#DMA_FLAG_TC5
 ((
uöt32_t
)0x00020000U)

	)

407 
	#DMA_FLAG_HT5
 ((
uöt32_t
)0x00040000U)

	)

408 
	#DMA_FLAG_TE5
 ((
uöt32_t
)0x00080000U)

	)

409 
	#DMA_FLAG_GL6
 ((
uöt32_t
)0x00100000U)

	)

410 
	#DMA_FLAG_TC6
 ((
uöt32_t
)0x00200000U)

	)

411 
	#DMA_FLAG_HT6
 ((
uöt32_t
)0x00400000U)

	)

412 
	#DMA_FLAG_TE6
 ((
uöt32_t
)0x00800000U)

	)

413 
	#DMA_FLAG_GL7
 ((
uöt32_t
)0x01000000U)

	)

414 
	#DMA_FLAG_TC7
 ((
uöt32_t
)0x02000000U)

	)

415 
	#DMA_FLAG_HT7
 ((
uöt32_t
)0x04000000U)

	)

416 
	#DMA_FLAG_TE7
 ((
uöt32_t
)0x08000000U)

	)

437 
	#__HAL_DMA_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DMA_STATE_RESET
)

	)

444 
	#__HAL_DMA_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CCR
 |
DMA_CCR_EN
)

	)

451 
	#__HAL_DMA_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CCR
 &~
DMA_CCR_EN
)

	)

462 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

463 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
Ë\

	)

464 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

465 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

466 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

467 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

468 
DMA_FLAG_TC5
)

470 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
Ë\

	)

471 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

472 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

473 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

474 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

475 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

476 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

477 
DMA_FLAG_TC7
)

484 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

485 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

	)

486 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

487 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

488 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

489 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

490 
DMA_FLAG_HT5
)

492 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

	)

493 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

494 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

495 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

496 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

497 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

498 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

499 
DMA_FLAG_HT7
)

506 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

507 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

	)

508 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

509 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

510 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

511 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

512 
DMA_FLAG_TE5
)

514 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

	)

515 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

516 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

517 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

518 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

519 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

520 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

521 
DMA_FLAG_TE7
)

528 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

529 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

	)

530 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_ISR_GIF1
 :\

531 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_ISR_GIF2
 :\

532 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_ISR_GIF3
 :\

533 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_ISR_GIF4
 :\

534 
DMA_ISR_GIF5
)

536 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

	)

537 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_ISR_GIF1
 :\

538 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_ISR_GIF2
 :\

539 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_ISR_GIF3
 :\

540 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_ISR_GIF4
 :\

541 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_ISR_GIF5
 :\

542 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_ISR_GIF6
 :\

543 
DMA_ISR_GIF7
)

557 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
ISR
 & (__FLAG__))

	)

571 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
IFCR
 = (__FLAG__))

	)

583 
	#__HAL_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CCR
 |(__INTERRUPT__))

	)

595 
	#__HAL_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CCR
 &~(__INTERRUPT__))

	)

607 
	#__HAL_DMA_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CCR
 & (__INTERRUPT__)))

	)

615 
	#__HAL_DMA_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CNDTR
)

	)

632 
HAL_SètusTy≥Def
 
HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
);

633 
HAL_SètusTy≥Def
 
HAL_DMA_DeInô
 (
DMA_H™dÀTy≥Def
 *
hdma
);

644 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ
 (
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

645 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

646 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

647 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
);

648 
HAL_SètusTy≥Def
 
HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
);

649 
HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
);

659 
HAL_DMA_SèãTy≥Def
 
HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
);

660 
uöt32_t
 
HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

687 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_flash.h

37 #i‚de‡
__STM32L0xx_HAL_FLASH_H


38 
	#__STM32L0xx_HAL_FLASH_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

58 
	#FLASH_TIMEOUT_VALUE
 (50000UË

	)

59 
	#FLASH_SIZE_DATA_REGISTER
 
FLASHSIZE_BASE


	)

68 
	#IS_FLASH_TYPEPROGRAM
(
_VALUE_
Ë((_VALUE_Ë=
FLASH_TYPEPROGRAM_WORD
)

	)

70 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë(((__LATENCY__Ë=
FLASH_LATENCY_0
Ë|| \

	)

71 ((
__LATENCY__
Ë=
FLASH_LATENCY_1
))

87 
FLASH_PROC_NONE
 = 0,

88 
FLASH_PROC_PAGEERASE
 = 1,

89 
FLASH_PROC_PROGRAM
 = 2,

90 } 
	tFLASH_Pro˚duªTy≥Def
;

97 
__IO
 
FLASH_Pro˚duªTy≥Def
 
Pro˚duªOnGoög
;

99 
__IO
 
uöt32_t
 
NbPagesToEø£
;

101 
__IO
 
uöt32_t
 
Addªss
;

103 
__IO
 
uöt32_t
 
Page
;

105 
HAL_LockTy≥Def
 
Lock
;

107 
__IO
 
uöt32_t
 
Eº‹Code
;

109 } 
	tFLASH_Pro˚ssTy≥Def
;

124 
	#HAL_FLASH_ERROR_NONE
 0x00U

	)

125 
	#HAL_FLASH_ERROR_PGA
 0x01U

	)

126 
	#HAL_FLASH_ERROR_WRP
 0x02U

	)

127 
	#HAL_FLASH_ERROR_OPTV
 0x04U

	)

128 
	#HAL_FLASH_ERROR_SIZE
 0x08U

	)

129 
	#HAL_FLASH_ERROR_RD
 0x10U

	)

130 
	#HAL_FLASH_ERROR_FWWERR
 0x20U

	)

131 
	#HAL_FLASH_ERROR_NOTZERO
 0x40U

	)

141 
	#FLASH_SIZE
 (
uöt32_t
)((*((uöt32_à*)
FLASHSIZE_BASE
)&0xFFFFË* 1024U)

	)

142 
	#FLASH_PAGE_SIZE
 ((
uöt32_t
)128UË

	)

151 
	#FLASH_TYPEPROGRAM_WORD
 ((
uöt32_t
)0x02UË

	)

160 
	#FLASH_LATENCY_0
 ((
uöt32_t
)0x00000000UË

	)

161 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY


	)

171 
	#FLASH_IT_EOP
 
FLASH_PECR_EOPIE


	)

172 
	#FLASH_IT_ERR
 
FLASH_PECR_ERRIE


	)

181 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

182 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

183 
	#FLASH_FLAG_ENDHV
 
FLASH_SR_HVOFF


	)

184 
	#FLASH_FLAG_READY
 
FLASH_SR_READY


	)

185 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPERR


	)

186 
	#FLASH_FLAG_PGAERR
 
FLASH_SR_PGAERR


	)

187 
	#FLASH_FLAG_SIZERR
 
FLASH_SR_SIZERR


	)

188 
	#FLASH_FLAG_OPTVERR
 
FLASH_SR_OPTVERR


	)

189 
	#FLASH_FLAG_RDERR
 
FLASH_SR_RDERR


	)

190 
	#FLASH_FLAG_FWWERR
 
FLASH_SR_FWWERR


	)

191 
	#FLASH_FLAG_NOTZEROERR
 
FLASH_SR_NOTZEROERR


	)

201 
	#FLASH_PDKEY1
 ((
uöt32_t
)0x04152637UË

	)

202 
	#FLASH_PDKEY2
 ((
uöt32_t
)0xFAFBFCFDUË

	)

205 
	#FLASH_PEKEY1
 ((
uöt32_t
)0x89ABCDEFUË

	)

206 
	#FLASH_PEKEY2
 ((
uöt32_t
)0x02030405UË

	)

210 
	#FLASH_PRGKEY1
 ((
uöt32_t
)0x8C9DAEBFUË

	)

211 
	#FLASH_PRGKEY2
 ((
uöt32_t
)0x13141516UË

	)

214 
	#FLASH_OPTKEY1
 ((
uöt32_t
)0xFBEAD9C8UË

	)

215 
	#FLASH_OPTKEY2
 ((
uöt32_t
)0x24252627UË

	)

223 #i‡
deföed
 ( 
__ICCARM__
 )

224 
	#I¡îru±Ty≥_ACTLR_DISMCYCINT_Msk
 
I¡Ty≥_ACTLR_DISMCYCINT_Msk


	)

252 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
Ë
	`SET_BIT
((
FLASH
->
PECR
), (__INTERRUPT__))

	)

262 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
Ë
	`CLEAR_BIT
((
FLASH
->
PECR
), (
uöt32_t
)(__INTERRUPT__))

	)

281 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((
FLASH
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

297 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
Ë((
FLASH
->
SR
Ë(__FLAG__))

	)

308 
	~"°m32l0xx_hÆ_Êash_ex.h
"

309 
	~"°m32l0xx_hÆ_Êash_ømfunc.h
"

320 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, uöt32_à
D©a
);

321 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, uöt32_à
D©a
);

324 
HAL_FLASH_IRQH™dÀr
();

326 
HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

327 
HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

337 
HAL_SètusTy≥Def
 
HAL_FLASH_U∆ock
();

338 
HAL_SètusTy≥Def
 
HAL_FLASH_Lock
();

339 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_U∆ock
();

340 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Lock
();

341 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Launch
();

351 
uöt32_t
 
HAL_FLASH_GëEº‹
();

365 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

379 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_flash_ex.h

37 #i‚de‡
__STM32L0xx_HAL_FLASH_EX_H


38 
	#__STM32L0xx_HAL_FLASH_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

58 
	#FLASH_SIZE_DATA_REGISTER
 
FLASHSIZE_BASE


	)

60 
	#FLASH_NBPAGES_MAX
 (
FLASH_SIZE
 / 
FLASH_PAGE_SIZE
)

	)

62 
	#WRP_MASK_LOW
 (0x0000FFFFU)

	)

63 
	#WRP_MASK_HIGH
 (0xFFFF0000U)

	)

73 
	#IS_FLASH_TYPEERASE
(
__VALUE__
Ë(((__VALUE__Ë=
FLASH_TYPEERASE_PAGES
))

	)

75 
	#IS_OPTIONBYTE
(
__VALUE__
Ë(((__VALUE__Ë<(
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | \

	)

76 
OPTIONBYTE_USER
 | 
OPTIONBYTE_BOR
 | 
OPTIONBYTE_BOOT_BIT1
)))

78 
	#IS_WRPSTATE
(
__VALUE__
Ë(((__VALUE__Ë=
OB_WRPSTATE_DISABLE
Ë|| \

	)

79 ((
__VALUE__
Ë=
OB_WRPSTATE_ENABLE
))

81 
	#IS_OB_WRP
(
__PAGE__
Ë(((__PAGE__Ë!0x0000000U))

	)

83 
	#IS_OB_RDP
(
__LEVEL__
Ë(((__LEVEL__Ë=
OB_RDP_LEVEL_0
Ë||\

	)

84 ((
__LEVEL__
Ë=
OB_RDP_LEVEL_1
) ||\

85 ((
__LEVEL__
Ë=
OB_RDP_LEVEL_2
))

87 
	#IS_OB_BOR_LEVEL
(
__LEVEL__
Ë(((__LEVEL__Ë=
OB_BOR_OFF
Ë|| \

	)

88 ((
__LEVEL__
Ë=
OB_BOR_LEVEL1
) || \

89 ((
__LEVEL__
Ë=
OB_BOR_LEVEL2
) || \

90 ((
__LEVEL__
Ë=
OB_BOR_LEVEL3
) || \

91 ((
__LEVEL__
Ë=
OB_BOR_LEVEL4
) || \

92 ((
__LEVEL__
Ë=
OB_BOR_LEVEL5
))

94 
	#IS_OB_IWDG_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
OB_IWDG_SW
Ë|| ((__SOURCE__Ë=
OB_IWDG_HW
))

	)

96 
	#IS_OB_STOP_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
OB_STOP_NORST
Ë|| ((__SOURCE__Ë=
OB_STOP_RST
))

	)

98 
	#IS_OB_STDBY_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
OB_STDBY_NORST
Ë|| ((__SOURCE__Ë=
OB_STDBY_RST
))

	)

100 #i‡
deföed
(
FLASH_OPTR_WPRMOD
Ë&& deföed(
FLASH_OPTR_BFB2
)

102 
	#IS_OBEX
(
__VALUE__
Ë(((__VALUE__Ë=
OPTIONBYTE_PCROP
Ë|| ((__VALUE__Ë=
OPTIONBYTE_BOOTCONFIG
))

	)

104 #ñi‡
deföed
(
FLASH_OPTR_WPRMOD
Ë&& !deföed(
FLASH_OPTR_BFB2
)

106 
	#IS_OBEX
(
__VALUE__
Ë((__VALUE__Ë=
OPTIONBYTE_PCROP
)

	)

108 #ñi‡!
deföed
(
FLASH_OPTR_WPRMOD
Ë&& deföed(
FLASH_OPTR_BFB2
)

110 
	#IS_OBEX
(
__VALUE__
Ë((__VALUE__Ë=
OPTIONBYTE_BOOTCONFIG
)

	)

114 #i‡
deföed
(
FLASH_OPTR_WPRMOD
)

116 
	#IS_PCROPSTATE
(
__VALUE__
Ë(((__VALUE__Ë=
OB_PCROP_STATE_DISABLE
Ë|| \

	)

117 ((
__VALUE__
Ë=
OB_PCROP_STATE_ENABLE
))

119 
	#IS_OB_PCROP
(
__PAGE__
Ë(((__PAGE__Ë!0x0000000U))

	)

122 #i‡
deföed
(
FLASH_OPTR_BFB2
)

124 
	#IS_OB_BOOT_BANK
(
__BANK__
Ë(((__BANK__Ë=
OB_BOOT_BANK2
Ë|| ((__BANK__Ë=
OB_BOOT_BANK1
))

	)

128 
	#IS_OB_BOOT1
(
__BOOT_BIT1__
Ë(((__BOOT_BIT1__Ë=
OB_BOOT_BIT1_RESET
Ë|| ((__BOOT_BIT1__Ë=
OB_BOOT_BIT1_SET
))

	)

129 
	#IS_TYPEPROGRAMDATA
(
__VALUE__
Ë(((__VALUE__Ë=
FLASH_TYPEPROGRAMDATA_BYTE
Ë|| \

	)

130 ((
__VALUE__
Ë=
FLASH_TYPEPROGRAMDATA_HALFWORD
) || \

131 ((
__VALUE__
Ë=
FLASH_TYPEPROGRAMDATA_WORD
))

138 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

140 
	#IS_FLASH_DATA_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
DATA_EEPROM_BASE
Ë&& ((__ADDRESS__Ë<
DATA_EEPROM_BANK2_END
))

	)

141 
	#IS_FLASH_DATA_BANK1_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
DATA_EEPROM_BASE
Ë&& ((__ADDRESS__Ë<
DATA_EEPROM_BANK1_END
))

	)

142 
	#IS_FLASH_DATA_BANK2_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
DATA_EEPROM_BANK2_BASE
Ë&& ((__ADDRESS__Ë<
DATA_EEPROM_BANK2_END
))

	)

143 
	#IS_FLASH_PROGRAM_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
FLASH_BASE
Ë&& ((__ADDRESS__Ë< (FLASH_BASE + 
FLASH_SIZE
)))

	)

144 
	#IS_FLASH_PROGRAM_BANK1_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
FLASH_BASE
Ë&& ((__ADDRESS__Ë< (FLASH_BASE + (
FLASH_SIZE
 >> 1))))

	)

145 
	#IS_FLASH_PROGRAM_BANK2_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
FLASH_BANK2_BASE
Ë&& ((__ADDRESS__Ë< (
FLASH_BASE
 + 
FLASH_SIZE
)))

	)

147 
	#IS_FLASH_DATA_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
DATA_EEPROM_BASE
Ë&& ((__ADDRESS__Ë<
DATA_EEPROM_END
))

	)

148 
	#IS_FLASH_PROGRAM_ADDRESS
(
__ADDRESS__
Ë(((__ADDRESS__Ë>
FLASH_BASE
Ë&& ((__ADDRESS__Ë< (FLASH_BASE + 
FLASH_SIZE
)))

	)

151 
	#IS_NBPAGES
(
__PAGES__
Ë(((__PAGES__Ë>1Ë&& ((__PAGES__Ë<
FLASH_NBPAGES_MAX
))

	)

171 
uöt32_t
 
Ty≥Eø£
;

174 
uöt32_t
 
PageAddªss
;

177 
uöt32_t
 
NbPages
;

180 } 
	tFLASH_Eø£InôTy≥Def
;

187 
uöt32_t
 
O±i⁄Ty≥
;

190 
uöt32_t
 
WRPSèã
;

193 
uöt32_t
 
WRPSe˘‹
;

196 #i‡
deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

197 
uöt32_t
 
WRPSe˘‹2
;

201 
uöt8_t
 
RDPLevñ
;

204 
uöt8_t
 
BORLevñ
;

207 
uöt8_t
 
USERC⁄fig
;

211 
uöt8_t
 
BOOTBô1C⁄fig
;

213 } 
	tFLASH_OBProgømInôTy≥Def
;

215 #i‡
deföed
(
FLASH_OPTR_WPRMOD
Ë|| deföed(
FLASH_OPTR_BFB2
)

221 
uöt32_t
 
O±i⁄Ty≥
;

224 #i‡
deföed
(
FLASH_OPTR_WPRMOD
)

225 
uöt32_t
 
PCROPSèã
;

228 
uöt32_t
 
PCROPSe˘‹
;

231 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

232 
uöt32_t
 
PCROPSe˘‹2
;

237 #i‡
deföed
(
FLASH_OPTR_BFB2
)

238 
uöt16_t
 
BoŸC⁄fig
;

241 } 
	tFLASH_AdvOBProgømInôTy≥Def
;

258 
	#FLASH_TYPEERASE_PAGES
 ((
uöt32_t
)0x00UË

	)

267 
	#OPTIONBYTE_WRP
 ((
uöt32_t
)0x01UË

	)

268 
	#OPTIONBYTE_RDP
 ((
uöt32_t
)0x02UË

	)

269 
	#OPTIONBYTE_USER
 ((
uöt32_t
)0x04UË

	)

270 
	#OPTIONBYTE_BOR
 ((
uöt32_t
)0x08UË

	)

271 
	#OPTIONBYTE_BOOT_BIT1
 ((
uöt32_t
)0x10UË

	)

280 
	#OB_WRPSTATE_DISABLE
 ((
uöt32_t
)0x00UË

	)

281 
	#OB_WRPSTATE_ENABLE
 ((
uöt32_t
)0x01UË

	)

287 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
Ë|| deföed (
STM32L031xx
Ë|| deföed (
STM32L041xx
)

291 
	#OB_WRP_Pages0to31
 ((
uöt32_t
)0x00000001UË

	)

292 
	#OB_WRP_Pages32to63
 ((
uöt32_t
)0x00000002UË

	)

293 
	#OB_WRP_Pages64to95
 ((
uöt32_t
)0x00000004UË

	)

294 
	#OB_WRP_Pages96to127
 ((
uöt32_t
)0x00000008UË

	)

295 
	#OB_WRP_Pages128to159
 ((
uöt32_t
)0x00000010UË

	)

296 
	#OB_WRP_Pages160to191
 ((
uöt32_t
)0x00000020UË

	)

297 
	#OB_WRP_Pages192to223
 ((
uöt32_t
)0x00000040UË

	)

298 
	#OB_WRP_Pages224to255
 ((
uöt32_t
)0x00000080UË

	)

299 
	#OB_WRP_AŒPages
 ((
uöt32_t
)0x000000FFUË

	)

303 #ñi‡
deföed
 (
STM32L051xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L053xx
Ë|| deföed (
STM32L061xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L063xx
)

307 
	#OB_WRP_Pages0to31
 ((
uöt32_t
)0x00000001UË

	)

308 
	#OB_WRP_Pages32to63
 ((
uöt32_t
)0x00000002UË

	)

309 
	#OB_WRP_Pages64to95
 ((
uöt32_t
)0x00000004UË

	)

310 
	#OB_WRP_Pages96to127
 ((
uöt32_t
)0x00000008UË

	)

311 
	#OB_WRP_Pages128to159
 ((
uöt32_t
)0x00000010UË

	)

312 
	#OB_WRP_Pages160to191
 ((
uöt32_t
)0x00000020UË

	)

313 
	#OB_WRP_Pages192to223
 ((
uöt32_t
)0x00000040UË

	)

314 
	#OB_WRP_Pages224to255
 ((
uöt32_t
)0x00000080UË

	)

315 
	#OB_WRP_Pages256to287
 ((
uöt32_t
)0x00000100UË

	)

316 
	#OB_WRP_Pages288to319
 ((
uöt32_t
)0x00000200UË

	)

317 
	#OB_WRP_Pages320to351
 ((
uöt32_t
)0x00000400UË

	)

318 
	#OB_WRP_Pages352to383
 ((
uöt32_t
)0x00000800UË

	)

319 
	#OB_WRP_Pages384to415
 ((
uöt32_t
)0x00001000UË

	)

320 
	#OB_WRP_Pages416to447
 ((
uöt32_t
)0x00002000UË

	)

321 
	#OB_WRP_Pages448to479
 ((
uöt32_t
)0x00004000UË

	)

322 
	#OB_WRP_Pages480to511
 ((
uöt32_t
)0x00008000UË

	)

323 
	#OB_WRP_AŒPages
 ((
uöt32_t
)0x0000FFFFUË

	)

328 #ñi‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

332 
	#OB_WRP_Pages0to31
 ((
uöt32_t
)0x00000001UË

	)

333 
	#OB_WRP_Pages32to63
 ((
uöt32_t
)0x00000002UË

	)

334 
	#OB_WRP_Pages64to95
 ((
uöt32_t
)0x00000004UË

	)

335 
	#OB_WRP_Pages96to127
 ((
uöt32_t
)0x00000008UË

	)

336 
	#OB_WRP_Pages128to159
 ((
uöt32_t
)0x00000010UË

	)

337 
	#OB_WRP_Pages160to191
 ((
uöt32_t
)0x00000020UË

	)

338 
	#OB_WRP_Pages192to223
 ((
uöt32_t
)0x00000040UË

	)

339 
	#OB_WRP_Pages224to255
 ((
uöt32_t
)0x00000080UË

	)

340 
	#OB_WRP_Pages256to287
 ((
uöt32_t
)0x00000100UË

	)

341 
	#OB_WRP_Pages288to319
 ((
uöt32_t
)0x00000200UË

	)

342 
	#OB_WRP_Pages320to351
 ((
uöt32_t
)0x00000400UË

	)

343 
	#OB_WRP_Pages352to383
 ((
uöt32_t
)0x00000800UË

	)

344 
	#OB_WRP_Pages384to415
 ((
uöt32_t
)0x00001000UË

	)

345 
	#OB_WRP_Pages416to447
 ((
uöt32_t
)0x00002000UË

	)

346 
	#OB_WRP_Pages448to479
 ((
uöt32_t
)0x00004000UË

	)

347 
	#OB_WRP_Pages480to511
 ((
uöt32_t
)0x00008000UË

	)

348 
	#OB_WRP_Pages512to543
 ((
uöt32_t
)0x00010000UË

	)

349 
	#OB_WRP_Pages544to575
 ((
uöt32_t
)0x00020000UË

	)

350 
	#OB_WRP_Pages576to607
 ((
uöt32_t
)0x00040000UË

	)

351 
	#OB_WRP_Pages608to639
 ((
uöt32_t
)0x00080000UË

	)

352 
	#OB_WRP_Pages640to671
 ((
uöt32_t
)0x00100000UË

	)

353 
	#OB_WRP_Pages672to703
 ((
uöt32_t
)0x00200000UË

	)

354 
	#OB_WRP_Pages704to735
 ((
uöt32_t
)0x00400000UË

	)

355 
	#OB_WRP_Pages736to767
 ((
uöt32_t
)0x00800000UË

	)

356 
	#OB_WRP_Pages768to799
 ((
uöt32_t
)0x01000000UË

	)

357 
	#OB_WRP_Pages800to831
 ((
uöt32_t
)0x02000000UË

	)

358 
	#OB_WRP_Pages832to863
 ((
uöt32_t
)0x04000000UË

	)

359 
	#OB_WRP_Pages864to895
 ((
uöt32_t
)0x08000000UË

	)

360 
	#OB_WRP_Pages896to927
 ((
uöt32_t
)0x10000000UË

	)

361 
	#OB_WRP_Pages928to959
 ((
uöt32_t
)0x20000000UË

	)

362 
	#OB_WRP_Pages960to991
 ((
uöt32_t
)0x40000000UË

	)

363 
	#OB_WRP_Pages992to1023
 ((
uöt32_t
)0x80000000UË

	)

364 
	#OB_WRP_AŒPages
 ((
uöt32_t
)0xFFFFFFFFUË

	)

372 
	#OB_WRP2_Pages1024to1055
 ((
uöt32_t
)0x00000001UË

	)

373 
	#OB_WRP2_Pages1056to1087
 ((
uöt32_t
)0x00000002UË

	)

374 
	#OB_WRP2_Pages1088to1119
 ((
uöt32_t
)0x00000004UË

	)

375 
	#OB_WRP2_Pages1120to1151
 ((
uöt32_t
)0x00000008UË

	)

376 
	#OB_WRP2_Pages1152to1183
 ((
uöt32_t
)0x00000010UË

	)

377 
	#OB_WRP2_Pages1184to1215
 ((
uöt32_t
)0x00000020UË

	)

378 
	#OB_WRP2_Pages1216to1247
 ((
uöt32_t
)0x00000040UË

	)

379 
	#OB_WRP2_Pages1248to1279
 ((
uöt32_t
)0x00000080UË

	)

380 
	#OB_WRP2_Pages1280to1311
 ((
uöt32_t
)0x00000100UË

	)

381 
	#OB_WRP2_Pages1312to1343
 ((
uöt32_t
)0x00000200UË

	)

382 
	#OB_WRP2_Pages1344to1375
 ((
uöt32_t
)0x00000400UË

	)

383 
	#OB_WRP2_Pages1376to1407
 ((
uöt32_t
)0x00000800UË

	)

384 
	#OB_WRP2_Pages1408to1439
 ((
uöt32_t
)0x00001000UË

	)

385 
	#OB_WRP2_Pages1440to1471
 ((
uöt32_t
)0x00002000UË

	)

386 
	#OB_WRP2_Pages1472to1503
 ((
uöt32_t
)0x00004000UË

	)

387 
	#OB_WRP2_Pages1504to1535
 ((
uöt32_t
)0x00008000UË

	)

388 
	#OB_WRP2_AŒPages
 ((
uöt32_t
)0x0000FFFFUË

	)

397 
	#OB_RDP_LEVEL_0
 ((
uöt8_t
)0xAAU)

	)

398 
	#OB_RDP_LEVEL_1
 ((
uöt8_t
)0xBBU)

	)

399 
	#OB_RDP_LEVEL_2
 ((
uöt8_t
)0xCCUË

	)

410 
	#OB_BOR_OFF
 ((
uöt8_t
)0x00UË

	)

412 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08UË

	)

413 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x09UË

	)

414 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x0AUË

	)

415 
	#OB_BOR_LEVEL4
 ((
uöt8_t
)0x0BUË

	)

416 
	#OB_BOR_LEVEL5
 ((
uöt8_t
)0x0CUË

	)

426 
	#OB_IWDG_SW
 ((
uöt8_t
)0x10UË

	)

427 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00UË

	)

437 
	#OB_STOP_NORST
 ((
uöt8_t
)0x20UË

	)

438 
	#OB_STOP_RST
 ((
uöt8_t
)0x00UË

	)

447 
	#OB_STDBY_NORST
 ((
uöt8_t
)0x40UË

	)

448 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00UË

	)

454 #i‡
deföed
(
FLASH_OPTR_WPRMOD
)

460 
	#OPTIONBYTE_PCROP
 ((
uöt32_t
)0x01UË

	)

468 #i‡
deföed
(
FLASH_OPTR_BFB2
)

474 
	#OPTIONBYTE_BOOTCONFIG
 ((
uöt32_t
)0x02UË

	)

482 #i‡
deföed
(
FLASH_OPTR_WPRMOD
)

487 
	#OB_PCROP_STATE_DISABLE
 ((
uöt32_t
)0x00UË

	)

488 
	#OB_PCROP_STATE_ENABLE
 ((
uöt32_t
)0x01UË

	)

497 
	#OB_PCROP_DESELECTED
 ((
uöt16_t
)0x0000UË

	)

498 
	#OB_PCROP_SELECTED
 ((
uöt16_t
)
FLASH_OPTR_WPRMOD
Ë

	)

505 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
Ë|| deföed (
STM32L031xx
Ë|| deföed (
STM32L041xx
)

509 
	#OB_PCROP_Pages0to31
 ((
uöt32_t
)0x00000001UË

	)

510 
	#OB_PCROP_Pages32to63
 ((
uöt32_t
)0x00000002UË

	)

511 
	#OB_PCROP_Pages64to95
 ((
uöt32_t
)0x00000004UË

	)

512 
	#OB_PCROP_Pages96to127
 ((
uöt32_t
)0x00000008UË

	)

513 
	#OB_PCROP_Pages128to159
 ((
uöt32_t
)0x00000010UË

	)

514 
	#OB_PCROP_Pages160to191
 ((
uöt32_t
)0x00000020UË

	)

515 
	#OB_PCROP_Pages192to223
 ((
uöt32_t
)0x00000040UË

	)

516 
	#OB_PCROP_Pages224to255
 ((
uöt32_t
)0x00000080UË

	)

517 
	#OB_PCROP_AŒPages
 ((
uöt32_t
)0x000000FFUË

	)

521 #ñi‡
deföed
 (
STM32L051xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L053xx
Ë|| deföed (
STM32L061xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L063xx
)

525 
	#OB_PCROP_Pages0to31
 ((
uöt32_t
)0x00000001UË

	)

526 
	#OB_PCROP_Pages32to63
 ((
uöt32_t
)0x00000002UË

	)

527 
	#OB_PCROP_Pages64to95
 ((
uöt32_t
)0x00000004UË

	)

528 
	#OB_PCROP_Pages96to127
 ((
uöt32_t
)0x00000008UË

	)

529 
	#OB_PCROP_Pages128to159
 ((
uöt32_t
)0x00000010UË

	)

530 
	#OB_PCROP_Pages160to191
 ((
uöt32_t
)0x00000020UË

	)

531 
	#OB_PCROP_Pages192to223
 ((
uöt32_t
)0x00000040UË

	)

532 
	#OB_PCROP_Pages224to255
 ((
uöt32_t
)0x00000080UË

	)

533 
	#OB_PCROP_Pages256to287
 ((
uöt32_t
)0x00000100UË

	)

534 
	#OB_PCROP_Pages288to319
 ((
uöt32_t
)0x00000200UË

	)

535 
	#OB_PCROP_Pages320to351
 ((
uöt32_t
)0x00000400UË

	)

536 
	#OB_PCROP_Pages352to383
 ((
uöt32_t
)0x00000800UË

	)

537 
	#OB_PCROP_Pages384to415
 ((
uöt32_t
)0x00001000UË

	)

538 
	#OB_PCROP_Pages416to447
 ((
uöt32_t
)0x00002000UË

	)

539 
	#OB_PCROP_Pages448to479
 ((
uöt32_t
)0x00004000UË

	)

540 
	#OB_PCROP_Pages480to511
 ((
uöt32_t
)0x00008000UË

	)

541 
	#OB_PCROP_AŒPages
 ((
uöt32_t
)0x0000FFFFUË

	)

547 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

551 
	#OB_PCROP_Pages0to31
 ((
uöt32_t
)0x00000001UË

	)

552 
	#OB_PCROP_Pages32to63
 ((
uöt32_t
)0x00000002UË

	)

553 
	#OB_PCROP_Pages64to95
 ((
uöt32_t
)0x00000004UË

	)

554 
	#OB_PCROP_Pages96to127
 ((
uöt32_t
)0x00000008UË

	)

555 
	#OB_PCROP_Pages128to159
 ((
uöt32_t
)0x00000010UË

	)

556 
	#OB_PCROP_Pages160to191
 ((
uöt32_t
)0x00000020UË

	)

557 
	#OB_PCROP_Pages192to223
 ((
uöt32_t
)0x00000040UË

	)

558 
	#OB_PCROP_Pages224to255
 ((
uöt32_t
)0x00000080UË

	)

559 
	#OB_PCROP_Pages256to287
 ((
uöt32_t
)0x00000100UË

	)

560 
	#OB_PCROP_Pages288to319
 ((
uöt32_t
)0x00000200UË

	)

561 
	#OB_PCROP_Pages320to351
 ((
uöt32_t
)0x00000400UË

	)

562 
	#OB_PCROP_Pages352to383
 ((
uöt32_t
)0x00000800UË

	)

563 
	#OB_PCROP_Pages384to415
 ((
uöt32_t
)0x00001000UË

	)

564 
	#OB_PCROP_Pages416to447
 ((
uöt32_t
)0x00002000UË

	)

565 
	#OB_PCROP_Pages448to479
 ((
uöt32_t
)0x00004000UË

	)

566 
	#OB_PCROP_Pages480to511
 ((
uöt32_t
)0x00008000UË

	)

567 
	#OB_PCROP_Pages512to543
 ((
uöt32_t
)0x00010000UË

	)

568 
	#OB_PCROP_Pages544to575
 ((
uöt32_t
)0x00020000UË

	)

569 
	#OB_PCROP_Pages576to607
 ((
uöt32_t
)0x00040000UË

	)

570 
	#OB_PCROP_Pages608to639
 ((
uöt32_t
)0x00080000UË

	)

571 
	#OB_PCROP_Pages640to671
 ((
uöt32_t
)0x00100000UË

	)

572 
	#OB_PCROP_Pages672to703
 ((
uöt32_t
)0x00200000UË

	)

573 
	#OB_PCROP_Pages704to735
 ((
uöt32_t
)0x00400000UË

	)

574 
	#OB_PCROP_Pages736to767
 ((
uöt32_t
)0x00800000UË

	)

575 
	#OB_PCROP_Pages768to799
 ((
uöt32_t
)0x01000000UË

	)

576 
	#OB_PCROP_Pages800to831
 ((
uöt32_t
)0x02000000UË

	)

577 
	#OB_PCROP_Pages832to863
 ((
uöt32_t
)0x04000000UË

	)

578 
	#OB_PCROP_Pages864to895
 ((
uöt32_t
)0x08000000UË

	)

579 
	#OB_PCROP_Pages896to927
 ((
uöt32_t
)0x10000000UË

	)

580 
	#OB_PCROP_Pages928to959
 ((
uöt32_t
)0x20000000UË

	)

581 
	#OB_PCROP_Pages960to991
 ((
uöt32_t
)0x40000000UË

	)

582 
	#OB_PCROP_Pages992to1023
 ((
uöt32_t
)0x80000000UË

	)

583 
	#OB_PCROP_AŒPages
 ((
uöt32_t
)0xFFFFFFFFUË

	)

591 
	#OB_PCROP2_Pages1024to1055
 ((
uöt32_t
)0x00000001UË

	)

592 
	#OB_PCROP2_Pages1056to1087
 ((
uöt32_t
)0x00000002UË

	)

593 
	#OB_PCROP2_Pages1088to1119
 ((
uöt32_t
)0x00000004UË

	)

594 
	#OB_PCROP2_Pages1120to1151
 ((
uöt32_t
)0x00000008UË

	)

595 
	#OB_PCROP2_Pages1152to1183
 ((
uöt32_t
)0x00000010UË

	)

596 
	#OB_PCROP2_Pages1184to1215
 ((
uöt32_t
)0x00000020UË

	)

597 
	#OB_PCROP2_Pages1216to1247
 ((
uöt32_t
)0x00000040UË

	)

598 
	#OB_PCROP2_Pages1248to1279
 ((
uöt32_t
)0x00000080UË

	)

599 
	#OB_PCROP2_Pages1280to1311
 ((
uöt32_t
)0x00000100UË

	)

600 
	#OB_PCROP2_Pages1312to1343
 ((
uöt32_t
)0x00000200UË

	)

601 
	#OB_PCROP2_Pages1344to1375
 ((
uöt32_t
)0x00000400UË

	)

602 
	#OB_PCROP2_Pages1376to1407
 ((
uöt32_t
)0x00000800UË

	)

603 
	#OB_PCROP2_Pages1408to1439
 ((
uöt32_t
)0x00001000UË

	)

604 
	#OB_PCROP2_Pages1440to1471
 ((
uöt32_t
)0x00002000UË

	)

605 
	#OB_PCROP2_Pages1472to1503
 ((
uöt32_t
)0x00004000UË

	)

606 
	#OB_PCROP2_Pages1504to1535
 ((
uöt32_t
)0x00008000UË

	)

607 
	#OB_PCROP2_AŒPages
 ((
uöt32_t
)0x0000FFFFUË

	)

616 
	#OB_BOOT_BIT1_RESET
 (
uöt8_t
)(0x00UË

	)

617 
	#OB_BOOT_BIT1_SET
 (
uöt8_t
)(0x01UË

	)

625 
	#FLASH_TYPEPROGRAMDATA_BYTE
 ((
uöt32_t
)0x00UË

	)

626 
	#FLASH_TYPEPROGRAMDATA_HALFWORD
 ((
uöt32_t
)0x01UË

	)

627 
	#FLASH_TYPEPROGRAMDATA_WORD
 ((
uöt32_t
)0x02UË

	)

633 #i‡
deföed
(
FLASH_OPTR_BFB2
)

639 
	#OB_BOOT_BANK1
 ((
uöt8_t
)0x00UË

	)

641 
	#OB_BOOT_BANK2
 ((
uöt8_t
)(
FLASH_OPTR_BFB2
 >> 16)Ë

	)

667 
	#__HAL_FLASH_SET_LATENCY
(
__LATENCY__
Ë\

	)

668 
MODIFY_REG
(
FLASH
->
ACR
, 
FLASH_ACR_LATENCY
, (
uöt32_t
)(
__LATENCY__
))

677 
	#__HAL_FLASH_GET_LATENCY
(Ë(
	`READ_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_LATENCY
))

	)

683 
	#__HAL_FLASH_PREFETCH_BUFFER_ENABLE
(Ë
	`SET_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_PRFTEN
)

	)

689 
	#__HAL_FLASH_PREFETCH_BUFFER_DISABLE
(Ë
	`CLEAR_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_PRFTEN
)

	)

695 
	#__HAL_FLASH_BUFFER_CACHE_ENABLE
(Ë
	`SET_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_DISAB_BUF
)

	)

701 
	#__HAL_FLASH_BUFFER_CACHE_DISABLE
(Ë
	`CLEAR_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_DISAB_BUF
)

	)

707 
	#__HAL_FLASH_PREREAD_BUFFER_ENABLE
(Ë
	`SET_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_PRE_READ
)

	)

713 
	#__HAL_FLASH_PREREAD_BUFFER_DISABLE
(Ë
	`CLEAR_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_PRE_READ
)

	)

719 
	#__HAL_FLASH_SLEEP_POWERDOWN_ENABLE
(Ë
	`SET_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_SLEEP_PD
)

	)

725 
	#__HAL_FLASH_SLEEP_POWERDOWN_DISABLE
(Ë
	`CLEAR_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_SLEEP_PD
)

	)

732 
	#__HAL_FLASH_POWER_DOWN_ENABLE
(Ëdÿ{ 
FLASH
->
PDKEYR
 = 
FLASH_PDKEY1
; \

	)

733 
FLASH
->
PDKEYR
 = 
FLASH_PDKEY2
; \

734 
SET_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_RUN_PD
); \

742 
	#__HAL_FLASH_POWER_DOWN_DISABLE
(Ëdÿ{ 
FLASH
->
PDKEYR
 = 
FLASH_PDKEY1
; \

	)

743 
FLASH
->
PDKEYR
 = 
FLASH_PDKEY2
; \

744 
CLEAR_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_RUN_PD
); \

761 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
);

762 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
);

772 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

773 
HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

775 #i‡
deföed
(
FLASH_OPTR_WPRMOD
Ë|| deföed(
FLASH_OPTR_BFB2
)

777 
HAL_SètusTy≥Def
 
HAL_FLASHEx_AdvOBProgøm
 (
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
);

778 
HAL_FLASHEx_AdvOBGëC⁄fig
(
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
);

782 #i‡
deföed
(
FLASH_OPTR_WPRMOD
)

784 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OB_Sñe˘PCROP
();

785 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OB_DeSñe˘PCROP
();

797 
HAL_SètusTy≥Def
 
HAL_FLASHEx_DATAEEPROM_U∆ock
();

798 
HAL_SètusTy≥Def
 
HAL_FLASHEx_DATAEEPROM_Lock
();

800 
HAL_SètusTy≥Def
 
HAL_FLASHEx_DATAEEPROM_Eø£
(
uöt32_t
 
Addªss
);

801 
HAL_SètusTy≥Def
 
HAL_FLASHEx_DATAEEPROM_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, uöt32_à
D©a
);

802 
HAL_FLASHEx_DATAEEPROM_E«bÀFixedTimeProgøm
();

803 
HAL_FLASHEx_DATAEEPROM_DißbÀFixedTimeProgøm
();

821 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_flash_ramfunc.h

37 #i‚de‡
__STM32L0xx_FLASH_RAMFUNC_H


38 
	#__STM32L0xx_FLASH_RAMFUNC_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

74 
__RAM_FUNC
 
HAL_FLASHEx_E«bÀRunPowîDown
();

75 
__RAM_FUNC
 
HAL_FLASHEx_DißbÀRunPowîDown
();

85 #i‡
deföed
(
FLASH_PECR_PARALLBANK
)

87 
__RAM_FUNC
 
HAL_FLASHEx_Eø£P¨ÆÀlPage
(
uöt32_t
 
Page_Addªss1
, uöt32_à
Page_Addªss2
);

88 
__RAM_FUNC
 
HAL_FLASHEx_ProgømP¨ÆÀlHÆfPage
(
uöt32_t
 
Addªss1
, uöt32_t* 
pBuf„r1
, uöt32_à
Addªss2
, uöt32_t* 
pBuf„r2
);

92 
__RAM_FUNC
 
HAL_FLASHEx_HÆfPageProgøm
(
uöt32_t
 
Addªss
, uöt32_t* 
pBuf„r
);

101 
__RAM_FUNC
 
HAL_FLASHEx_GëEº‹
(
uöt32_t
 *
Eº‹
);

118 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h

37 #i‚de‡
__STM32L0xx_HAL_GPIO_H


38 
	#__STM32L0xx_HAL_GPIO_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

70 
uöt32_t
 
Pö
;

73 
uöt32_t
 
Mode
;

76 
uöt32_t
 
PuŒ
;

79 
uöt32_t
 
S≥ed
;

82 
uöt32_t
 
A…î«ã
;

84 }
	tGPIO_InôTy≥Def
;

97 
GPIO_PIN_RESET
 = 0U,

98 
GPIO_PIN_SET


99 }
	tGPIO_PöSèã
;

105 
	#IS_GPIO_PIN_ACTION
(
__ACTION__
Ë(((__ACTION__Ë=
GPIO_PIN_RESET
Ë|| ((__ACTION__Ë=
GPIO_PIN_SET
))

	)

121 
	#GPIO_PIN_0
 ((
uöt16_t
)0x0001UË

	)

122 
	#GPIO_PIN_1
 ((
uöt16_t
)0x0002UË

	)

123 
	#GPIO_PIN_2
 ((
uöt16_t
)0x0004UË

	)

124 
	#GPIO_PIN_3
 ((
uöt16_t
)0x0008UË

	)

125 
	#GPIO_PIN_4
 ((
uöt16_t
)0x0010UË

	)

126 
	#GPIO_PIN_5
 ((
uöt16_t
)0x0020UË

	)

127 
	#GPIO_PIN_6
 ((
uöt16_t
)0x0040UË

	)

128 
	#GPIO_PIN_7
 ((
uöt16_t
)0x0080UË

	)

129 
	#GPIO_PIN_8
 ((
uöt16_t
)0x0100UË

	)

130 
	#GPIO_PIN_9
 ((
uöt16_t
)0x0200UË

	)

131 
	#GPIO_PIN_10
 ((
uöt16_t
)0x0400UË

	)

132 
	#GPIO_PIN_11
 ((
uöt16_t
)0x0800UË

	)

133 
	#GPIO_PIN_12
 ((
uöt16_t
)0x1000UË

	)

134 
	#GPIO_PIN_13
 ((
uöt16_t
)0x2000UË

	)

135 
	#GPIO_PIN_14
 ((
uöt16_t
)0x4000UË

	)

136 
	#GPIO_PIN_15
 ((
uöt16_t
)0x8000UË

	)

137 
	#GPIO_PIN_AŒ
 ((
uöt16_t
)0xFFFFUË

	)

142 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFUË

	)

143 
	#IS_GPIO_PIN
(
__PIN__
Ë((((__PIN__Ë& 
GPIO_PIN_MASK
Ë!(
uöt32_t
)0x00Ë&&\

	)

144 (((
__PIN__
Ë& ~
GPIO_PIN_MASK
Ë=(
uöt32_t
)0x00))

156 
	#GPIO_MODE_INPUT
 ((
uöt32_t
)0x00000000UË

	)

157 
	#GPIO_MODE_OUTPUT_PP
 ((
uöt32_t
)0x00000001UË

	)

158 
	#GPIO_MODE_OUTPUT_OD
 ((
uöt32_t
)0x00000011UË

	)

159 
	#GPIO_MODE_AF_PP
 ((
uöt32_t
)0x00000002UË

	)

160 
	#GPIO_MODE_AF_OD
 ((
uöt32_t
)0x00000012UË

	)

162 
	#GPIO_MODE_ANALOG
 ((
uöt32_t
)0x00000003UË

	)

164 
	#GPIO_MODE_IT_RISING
 ((
uöt32_t
)0x10110000UË

	)

165 
	#GPIO_MODE_IT_FALLING
 ((
uöt32_t
)0x10210000UË

	)

166 
	#GPIO_MODE_IT_RISING_FALLING
 ((
uöt32_t
)0x10310000UË

	)

168 
	#GPIO_MODE_EVT_RISING
 ((
uöt32_t
)0x10120000UË

	)

169 
	#GPIO_MODE_EVT_FALLING
 ((
uöt32_t
)0x10220000UË

	)

170 
	#GPIO_MODE_EVT_RISING_FALLING
 ((
uöt32_t
)0x10320000UË

	)

176 
	#IS_GPIO_MODE
(
__MODE__
Ë(((__MODE__Ë=
GPIO_MODE_INPUT
Ë||\

	)

177 ((
__MODE__
Ë=
GPIO_MODE_OUTPUT_PP
) ||\

178 ((
__MODE__
Ë=
GPIO_MODE_OUTPUT_OD
) ||\

179 ((
__MODE__
Ë=
GPIO_MODE_AF_PP
) ||\

180 ((
__MODE__
Ë=
GPIO_MODE_AF_OD
) ||\

181 ((
__MODE__
Ë=
GPIO_MODE_IT_RISING
) ||\

182 ((
__MODE__
Ë=
GPIO_MODE_IT_FALLING
) ||\

183 ((
__MODE__
Ë=
GPIO_MODE_IT_RISING_FALLING
) ||\

184 ((
__MODE__
Ë=
GPIO_MODE_EVT_RISING
) ||\

185 ((
__MODE__
Ë=
GPIO_MODE_EVT_FALLING
) ||\

186 ((
__MODE__
Ë=
GPIO_MODE_EVT_RISING_FALLING
) ||\

187 ((
__MODE__
Ë=
GPIO_MODE_ANALOG
))

194 
	#GPIO_SPEED_FREQ_LOW
 ((
uöt32_t
)0x00000000UË

	)

195 
	#GPIO_SPEED_FREQ_MEDIUM
 ((
uöt32_t
)0x00000001UË

	)

196 
	#GPIO_SPEED_FREQ_HIGH
 ((
uöt32_t
)0x00000002UË

	)

197 
	#GPIO_SPEED_FREQ_VERY_HIGH
 ((
uöt32_t
)0x00000003UË

	)

203 
	#IS_GPIO_SPEED
(
__SPEED__
Ë(((__SPEED__Ë=
GPIO_SPEED_FREQ_LOW
 ) || ((__SPEED__Ë=
GPIO_SPEED_FREQ_MEDIUM
 ) || \

	)

204 ((
__SPEED__
Ë=
GPIO_SPEED_FREQ_HIGH
 ) || ((__SPEED__Ë=
GPIO_SPEED_FREQ_VERY_HIGH
))

211 
	#GPIO_NOPULL
 ((
uöt32_t
)0x00000000UË

	)

212 
	#GPIO_PULLUP
 ((
uöt32_t
)0x00000001UË

	)

213 
	#GPIO_PULLDOWN
 ((
uöt32_t
)0x00000002UË

	)

219 
	#IS_GPIO_PULL
(
__PULL__
Ë(((__PULL__Ë=
GPIO_NOPULL
Ë|| ((__PULL__Ë=
GPIO_PULLUP
Ë|| \

	)

220 ((
__PULL__
Ë=
GPIO_PULLDOWN
))

239 
	#__HAL_GPIO_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

247 
	#__HAL_GPIO_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

255 
	#__HAL_GPIO_EXTI_GET_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

263 
	#__HAL_GPIO_EXTI_CLEAR_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

271 
	#__HAL_GPIO_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(
EXTI
->
SWIER
 |(__EXTI_LINE__))

	)

277 
	~"°m32l0xx_hÆ_gpio_ex.h
"

292 
HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
);

293 
HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
);

302 
GPIO_PöSèã
 
HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

303 
HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
);

304 
HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

305 
HAL_SètusTy≥Def
 
HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

306 
HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
);

307 
HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
);

335 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio_ex.h

37 #i‚de‡
__STM32L0xx_HAL_GPIO_EX_H


38 
	#__STM32L0xx_HAL_GPIO_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

68 #i‡
deföed
 (
STM32L083xx
Ë|| deföed (
STM32L073xx
)

178 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

179 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

180 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

181 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

182 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

183 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

184 
	#GPIO_AF0_USART1
 ((
uöt8_t
)0x00UË

	)

185 
	#GPIO_AF0_SPI2
 ((
uöt8_t
)0x00UË

	)

186 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

187 
	#GPIO_AF0_TIM22
 ((
uöt8_t
)0x00UË

	)

188 
	#GPIO_AF0_LPUART1
 ((
uöt8_t
)0x00UË

	)

189 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

190 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00UË

	)

191 
	#GPIO_AF0_USB
 ((
uöt8_t
)0x00UË

	)

199 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

200 
	#GPIO_AF1_SPI2
 ((
uöt8_t
)0x01UË

	)

201 
	#GPIO_AF1_TIM21
 ((
uöt8_t
)0x01UË

	)

202 
	#GPIO_AF1_LCD
 ((
uöt8_t
)0x01UË

	)

210 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

211 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02UË

	)

212 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

213 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

214 
	#GPIO_AF2_LPUART1
 ((
uöt8_t
)0x02UË

	)

215 
	#GPIO_AF2_MCO
 ((
uöt8_t
)0x02UË

	)

216 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

217 
	#GPIO_AF2_SPI2
 ((
uöt8_t
)0x02UË

	)

218 
	#GPIO_AF2_USART5
 ((
uöt8_t
)0x02UË

	)

219 
	#GPIO_AF2_SPI1
 ((
uöt8_t
)0x02UË

	)

220 
	#GPIO_AF2_USB
 ((
uöt8_t
)0x00UË

	)

228 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

229 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

230 
	#GPIO_AF3_TSC
 ((
uöt8_t
)0x03UË

	)

238 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

239 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

240 
	#GPIO_AF4_USART1
 ((
uöt8_t
)0x04UË

	)

241 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

242 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

243 
	#GPIO_AF4_TIM3
 ((
uöt8_t
)0x04UË

	)

244 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

252 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

253 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

254 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

255 
	#GPIO_AF5_USART1
 ((
uöt8_t
)0x05UË

	)

256 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05UË

	)

257 
	#GPIO_AF5_I2C2
 ((
uöt8_t
)0x05UË

	)

266 
	#GPIO_AF6_USART4
 ((
uöt8_t
)0x06UË

	)

267 
	#GPIO_AF6_LPUART1
 ((
uöt8_t
)0x06UË

	)

268 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

269 
	#GPIO_AF6_I2C1
 ((
uöt8_t
)0x06UË

	)

270 
	#GPIO_AF6_I2C2
 ((
uöt8_t
)0x06UË

	)

271 
	#GPIO_AF6_USART5
 ((
uöt8_t
)0x06UË

	)

272 
	#GPIO_AF6_TIM21
 ((
uöt8_t
)0x06UË

	)

280 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

281 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

282 
	#GPIO_AF7_I2C3
 ((
uöt8_t
)0x07UË

	)

283 
	#GPIO_AF7_LPUART1
 ((
uöt8_t
)0x07UË

	)

302 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF1_LCD
Ë|| \

	)

303 ((
__AF__
Ë=
GPIO_AF0_SPI1
Ë|| ((__AF__Ë=
GPIO_AF1_I2C1
) || \

304 ((
__AF__
Ë=
GPIO_AF0_TIM21
Ë|| ((__AF__Ë=
GPIO_AF1_SPI2
) || \

305 ((
__AF__
Ë=
GPIO_AF0_MCO
Ë|| ((__AF__Ë=
GPIO_AF1_TIM21
) || \

306 ((
__AF__
Ë=
GPIO_AF0_SWDIO
Ë|| ((__AF__Ë=
GPIO_AF2_TIM2
) || \

307 ((
__AF__
Ë=
GPIO_AF0_SWCLK
Ë|| ((__AF__Ë=
GPIO_AF2_TIM3
) || \

308 ((
__AF__
Ë=
GPIO_AF0_USART1
Ë|| ((__AF__Ë=
GPIO_AF2_USB
) || \

309 ((
__AF__
Ë=
GPIO_AF0_SPI2
Ë|| ((__AF__Ë=
GPIO_AF2_EVENTOUT
) || \

310 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
Ë|| ((__AF__Ë=
GPIO_AF2_LPTIM1
) || \

311 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF2_LPUART1
) || \

312 ((
__AF__
Ë=
GPIO_AF0_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF2_MCO
) || \

313 ((
__AF__
Ë=
GPIO_AF0_USART2
Ë|| ((__AF__Ë=
GPIO_AF2_RTC
) || \

314 ((
__AF__
Ë=
GPIO_AF0_USB
Ë|| ((__AF__Ë=
GPIO_AF2_SPI2
) || \

315 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF2_USART5
) || \

316 ((
__AF__
Ë=
GPIO_AF3_TSC
Ë|| ((__AF__Ë=
GPIO_AF2_SPI1
) || \

317 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF4_USART2
) || \

318 ((
__AF__
Ë=
GPIO_AF3_I2C1
Ë|| ((__AF__Ë=
GPIO_AF4_LPUART1
) || \

319 ((
__AF__
Ë=
GPIO_AF5_TIM21
Ë|| ((__AF__Ë=
GPIO_AF4_EVENTOUT
) || \

320 ((
__AF__
Ë=
GPIO_AF5_TIM2
Ë|| ((__AF__Ë=
GPIO_AF4_USART1
) || \

321 ((
__AF__
Ë=
GPIO_AF5_USART1
Ë|| ((__AF__Ë=
GPIO_AF4_TIM22
) || \

322 ((
__AF__
Ë=
GPIO_AF5_TIM22
Ë|| ((__AF__Ë=
GPIO_AF4_TIM3
) || \

323 ((
__AF__
Ë=
GPIO_AF5_SPI2
Ë|| ((__AF__Ë=
GPIO_AF4_I2C1
) || \

324 ((
__AF__
Ë=
GPIO_AF5_I2C2
Ë|| ((__AF__Ë=
GPIO_AF6_USART4
) || \

325 ((
__AF__
Ë=
GPIO_AF7_COMP2
Ë|| ((__AF__Ë=
GPIO_AF6_LPUART1
) || \

326 ((
__AF__
Ë=
GPIO_AF7_COMP1
Ë|| ((__AF__Ë=
GPIO_AF6_I2C1
) || \

327 ((
__AF__
Ë=
GPIO_AF7_I2C3
Ë|| ((__AF__Ë=
GPIO_AF6_EVENTOUT
) || \

328 ((
__AF__
Ë=
GPIO_AF7_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF6_I2C2
) || \

329 ((
__AF__
Ë=
GPIO_AF6_USART5
Ë|| ((__AF__Ë=
GPIO_AF6_TIM21
))

332 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

333 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

334 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

335 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

336 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

337 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

338 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

339 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

340 ((
__AF__
Ë=
GPIO_AF7_I2C3
))) || \

341 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

342 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

343 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

344 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

345 ((
__AF__
Ë=
GPIO_AF4_TIM3
) || \

346 ((
__AF__
Ë=
GPIO_AF5_I2C2
) || \

347 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

348 ((
__AF__
Ë=
GPIO_AF7_LPUART1
))) || \

349 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPTIM1
) || \

350 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

351 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

352 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

353 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

354 ((
__AF__
Ë=
GPIO_AF7_I2C3
))) || \

355 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPUART1
) || \

356 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

357 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

358 ((
__AF__
Ë=
GPIO_AF6_USART5
))) || \

359 (((
__INSTANCE__
Ë=
GPIOE
Ë&& (((
__AF__
Ë=
GPIO_AF0_TIM22
) || \

360 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

361 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

362 ((
__AF__
Ë=
GPIO_AF6_USART4
))) || \

363 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__AF__
Ë=
GPIO_AF0_USB
))))

373 #i‡
deföed
 (
STM32L082xx
Ë|| deföed (
STM32L072xx
)

483 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

484 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

485 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

486 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

487 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

488 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

489 
	#GPIO_AF0_USART1
 ((
uöt8_t
)0x00UË

	)

490 
	#GPIO_AF0_SPI2
 ((
uöt8_t
)0x00UË

	)

491 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

492 
	#GPIO_AF0_TIM22
 ((
uöt8_t
)0x00UË

	)

493 
	#GPIO_AF0_LPUART1
 ((
uöt8_t
)0x00UË

	)

494 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

495 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00UË

	)

496 
	#GPIO_AF0_USB
 ((
uöt8_t
)0x00UË

	)

504 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

505 
	#GPIO_AF1_SPI2
 ((
uöt8_t
)0x01UË

	)

506 
	#GPIO_AF1_TIM21
 ((
uöt8_t
)0x01UË

	)

514 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

515 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02UË

	)

516 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

517 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

518 
	#GPIO_AF2_LPUART1
 ((
uöt8_t
)0x02UË

	)

519 
	#GPIO_AF2_MCO
 ((
uöt8_t
)0x02UË

	)

520 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

521 
	#GPIO_AF2_SPI2
 ((
uöt8_t
)0x02UË

	)

522 
	#GPIO_AF2_USART5
 ((
uöt8_t
)0x02UË

	)

523 
	#GPIO_AF2_SPI1
 ((
uöt8_t
)0x02UË

	)

524 
	#GPIO_AF2_USB
 ((
uöt8_t
)0x00UË

	)

532 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

533 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

534 
	#GPIO_AF3_TSC
 ((
uöt8_t
)0x03UË

	)

542 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

543 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

544 
	#GPIO_AF4_USART1
 ((
uöt8_t
)0x04UË

	)

545 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

546 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

547 
	#GPIO_AF4_TIM3
 ((
uöt8_t
)0x04UË

	)

548 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

556 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

557 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

558 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

559 
	#GPIO_AF5_USART1
 ((
uöt8_t
)0x05UË

	)

560 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05UË

	)

561 
	#GPIO_AF5_I2C2
 ((
uöt8_t
)0x05UË

	)

569 
	#GPIO_AF6_USART4
 ((
uöt8_t
)0x06UË

	)

570 
	#GPIO_AF6_LPUART1
 ((
uöt8_t
)0x06UË

	)

571 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

572 
	#GPIO_AF6_I2C1
 ((
uöt8_t
)0x06UË

	)

573 
	#GPIO_AF6_I2C2
 ((
uöt8_t
)0x06UË

	)

574 
	#GPIO_AF6_USART5
 ((
uöt8_t
)0x06UË

	)

575 
	#GPIO_AF6_TIM21
 ((
uöt8_t
)0x06UË

	)

583 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

584 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

585 
	#GPIO_AF7_I2C3
 ((
uöt8_t
)0x07UË

	)

586 
	#GPIO_AF7_LPUART1
 ((
uöt8_t
)0x07UË

	)

605 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF6_TIM21
Ë|| \

	)

606 ((
__AF__
Ë=
GPIO_AF0_SPI1
Ë|| ((__AF__Ë=
GPIO_AF1_I2C1
) || \

607 ((
__AF__
Ë=
GPIO_AF0_TIM21
Ë|| ((__AF__Ë=
GPIO_AF1_SPI2
) || \

608 ((
__AF__
Ë=
GPIO_AF0_MCO
Ë|| ((__AF__Ë=
GPIO_AF1_TIM21
) || \

609 ((
__AF__
Ë=
GPIO_AF0_SWDIO
Ë|| ((__AF__Ë=
GPIO_AF2_TIM2
) || \

610 ((
__AF__
Ë=
GPIO_AF0_SWCLK
Ë|| ((__AF__Ë=
GPIO_AF2_TIM3
) || \

611 ((
__AF__
Ë=
GPIO_AF0_USART1
Ë|| ((__AF__Ë=
GPIO_AF2_USB
) || \

612 ((
__AF__
Ë=
GPIO_AF0_SPI2
Ë|| ((__AF__Ë=
GPIO_AF2_EVENTOUT
) || \

613 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
Ë|| ((__AF__Ë=
GPIO_AF2_LPTIM1
) || \

614 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF2_LPUART1
) || \

615 ((
__AF__
Ë=
GPIO_AF0_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF2_MCO
) || \

616 ((
__AF__
Ë=
GPIO_AF0_USART2
Ë|| ((__AF__Ë=
GPIO_AF2_RTC
) || \

617 ((
__AF__
Ë=
GPIO_AF0_USB
Ë|| ((__AF__Ë=
GPIO_AF2_SPI2
) || \

618 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF2_USART5
) || \

619 ((
__AF__
Ë=
GPIO_AF3_TSC
Ë|| ((__AF__Ë=
GPIO_AF2_SPI1
) || \

620 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF4_USART2
) || \

621 ((
__AF__
Ë=
GPIO_AF3_I2C1
Ë|| ((__AF__Ë=
GPIO_AF4_LPUART1
) || \

622 ((
__AF__
Ë=
GPIO_AF5_TIM21
Ë|| ((__AF__Ë=
GPIO_AF4_EVENTOUT
) || \

623 ((
__AF__
Ë=
GPIO_AF5_TIM2
Ë|| ((__AF__Ë=
GPIO_AF4_USART1
) || \

624 ((
__AF__
Ë=
GPIO_AF5_USART1
Ë|| ((__AF__Ë=
GPIO_AF4_TIM22
) || \

625 ((
__AF__
Ë=
GPIO_AF5_TIM22
Ë|| ((__AF__Ë=
GPIO_AF4_TIM3
) || \

626 ((
__AF__
Ë=
GPIO_AF5_SPI2
Ë|| ((__AF__Ë=
GPIO_AF4_I2C1
) || \

627 ((
__AF__
Ë=
GPIO_AF5_I2C2
Ë|| ((__AF__Ë=
GPIO_AF6_USART4
) || \

628 ((
__AF__
Ë=
GPIO_AF7_COMP2
Ë|| ((__AF__Ë=
GPIO_AF6_LPUART1
) || \

629 ((
__AF__
Ë=
GPIO_AF7_COMP1
Ë|| ((__AF__Ë=
GPIO_AF6_I2C1
) || \

630 ((
__AF__
Ë=
GPIO_AF7_I2C3
Ë|| ((__AF__Ë=
GPIO_AF6_EVENTOUT
) || \

631 ((
__AF__
Ë=
GPIO_AF7_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF6_I2C2
) || \

632 ((
__AF__
Ë=
GPIO_AF6_USART5
))

634 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

635 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

636 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

637 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

638 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

639 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

640 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
) || \

641 ((
__AF__
Ë=
GPIO_AF7_COMP1
))) || \

642 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

643 ((
__AF__
Ë=
GPIO_AF1_I2C1
) || \

644 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

645 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

646 ((
__AF__
Ë=
GPIO_AF4_TIM22
) || \

647 ((
__AF__
Ë=
GPIO_AF5_I2C2
) || \

648 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

649 ((
__AF__
Ë=
GPIO_AF7_LPUART1
))) || \

650 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_TIM22
) || \

651 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

652 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

653 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

654 ((
__AF__
Ë=
GPIO_AF7_I2C3
))) || \

655 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__AF__
Ë=
GPIO_AF0_TIM21
) || \

656 ((
__AF__
Ë=
GPIO_AF1_TIM21
) || \

657 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

658 ((
__AF__
Ë=
GPIO_AF6_USART5
))) || \

659 (((
__INSTANCE__
Ë=
GPIOE
Ë&& (((
__AF__
Ë=
GPIO_AF0_TIM22
) || \

660 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

661 ((
__AF__
Ë=
GPIO_AF6_USART4
))) || \

662 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__AF__
Ë=
GPIO_AF0_USB
))))

673 #i‡
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L071xx
)

785 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

786 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

787 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

788 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

789 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

790 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

791 
	#GPIO_AF0_USART1
 ((
uöt8_t
)0x00UË

	)

792 
	#GPIO_AF0_SPI2
 ((
uöt8_t
)0x00UË

	)

793 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

794 
	#GPIO_AF0_TIM22
 ((
uöt8_t
)0x00UË

	)

795 
	#GPIO_AF0_LPUART1
 ((
uöt8_t
)0x00UË

	)

796 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

797 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00UË

	)

806 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

807 
	#GPIO_AF1_SPI2
 ((
uöt8_t
)0x01UË

	)

808 
	#GPIO_AF1_TIM21
 ((
uöt8_t
)0x01UË

	)

817 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

818 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02UË

	)

819 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

820 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

821 
	#GPIO_AF2_LPUART1
 ((
uöt8_t
)0x02UË

	)

822 
	#GPIO_AF2_MCO
 ((
uöt8_t
)0x02UË

	)

823 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

824 
	#GPIO_AF2_SPI2
 ((
uöt8_t
)0x02UË

	)

825 
	#GPIO_AF2_USART5
 ((
uöt8_t
)0x02UË

	)

826 
	#GPIO_AF2_SPI1
 ((
uöt8_t
)0x02UË

	)

835 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

836 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

845 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

846 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

847 
	#GPIO_AF4_USART1
 ((
uöt8_t
)0x04UË

	)

848 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

849 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

850 
	#GPIO_AF4_TIM3
 ((
uöt8_t
)0x04UË

	)

851 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

860 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

861 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

862 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

863 
	#GPIO_AF5_USART1
 ((
uöt8_t
)0x05UË

	)

864 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05UË

	)

865 
	#GPIO_AF5_I2C2
 ((
uöt8_t
)0x05UË

	)

874 
	#GPIO_AF6_USART4
 ((
uöt8_t
)0x06UË

	)

875 
	#GPIO_AF6_LPUART1
 ((
uöt8_t
)0x06UË

	)

876 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

877 
	#GPIO_AF6_I2C1
 ((
uöt8_t
)0x06UË

	)

878 
	#GPIO_AF6_I2C2
 ((
uöt8_t
)0x06UË

	)

879 
	#GPIO_AF6_USART5
 ((
uöt8_t
)0x06UË

	)

880 
	#GPIO_AF6_TIM21
 ((
uöt8_t
)0x06UË

	)

889 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

890 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

891 
	#GPIO_AF7_I2C3
 ((
uöt8_t
)0x07UË

	)

892 
	#GPIO_AF7_LPUART1
 ((
uöt8_t
)0x07UË

	)

912 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF7_LPUART1
Ë|| \

	)

913 ((
__AF__
Ë=
GPIO_AF0_SPI1
Ë|| ((__AF__Ë=
GPIO_AF1_I2C1
) || \

914 ((
__AF__
Ë=
GPIO_AF0_TIM21
Ë|| ((__AF__Ë=
GPIO_AF1_SPI2
) || \

915 ((
__AF__
Ë=
GPIO_AF0_MCO
Ë|| ((__AF__Ë=
GPIO_AF1_TIM21
) || \

916 ((
__AF__
Ë=
GPIO_AF0_SWDIO
Ë|| ((__AF__Ë=
GPIO_AF2_TIM2
) || \

917 ((
__AF__
Ë=
GPIO_AF0_SWCLK
Ë|| ((__AF__Ë=
GPIO_AF2_TIM3
) || \

918 ((
__AF__
Ë=
GPIO_AF0_USART1
Ë|| ((__AF__Ë=
GPIO_AF6_TIM21
) || \

919 ((
__AF__
Ë=
GPIO_AF0_SPI2
Ë|| ((__AF__Ë=
GPIO_AF2_EVENTOUT
) || \

920 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
Ë|| ((__AF__Ë=
GPIO_AF2_LPTIM1
) || \

921 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF2_LPUART1
) || \

922 ((
__AF__
Ë=
GPIO_AF0_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF2_MCO
) || \

923 ((
__AF__
Ë=
GPIO_AF0_USART2
Ë|| ((__AF__Ë=
GPIO_AF2_RTC
) || \

924 ((
__AF__
Ë=
GPIO_AF2_SPI2
Ë|| ((__AF__Ë=
GPIO_AF6_USART5
) || \

925 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF2_USART5
) || \

926 ((
__AF__
Ë=
GPIO_AF2_SPI1
Ë|| ((__AF__Ë=
GPIO_AF6_I2C2
) || \

927 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF4_USART2
) || \

928 ((
__AF__
Ë=
GPIO_AF3_I2C1
Ë|| ((__AF__Ë=
GPIO_AF4_LPUART1
) || \

929 ((
__AF__
Ë=
GPIO_AF5_TIM21
Ë|| ((__AF__Ë=
GPIO_AF4_EVENTOUT
) || \

930 ((
__AF__
Ë=
GPIO_AF5_TIM2
Ë|| ((__AF__Ë=
GPIO_AF4_USART1
) || \

931 ((
__AF__
Ë=
GPIO_AF5_USART1
Ë|| ((__AF__Ë=
GPIO_AF4_TIM22
) || \

932 ((
__AF__
Ë=
GPIO_AF5_TIM22
Ë|| ((__AF__Ë=
GPIO_AF4_TIM3
) || \

933 ((
__AF__
Ë=
GPIO_AF5_SPI2
Ë|| ((__AF__Ë=
GPIO_AF4_I2C1
) || \

934 ((
__AF__
Ë=
GPIO_AF5_I2C2
Ë|| ((__AF__Ë=
GPIO_AF6_USART4
) || \

935 ((
__AF__
Ë=
GPIO_AF7_COMP2
Ë|| ((__AF__Ë=
GPIO_AF6_LPUART1
) || \

936 ((
__AF__
Ë=
GPIO_AF7_COMP1
Ë|| ((__AF__Ë=
GPIO_AF6_I2C1
) || \

937 ((
__AF__
Ë=
GPIO_AF7_I2C3
Ë|| ((__AF__Ë=
GPIO_AF6_EVENTOUT
))

940 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

941 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

942 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

943 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
) || \

944 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

945 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

946 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

947 ((
__AF__
Ë=
GPIO_AF7_COMP1
))) || \

948 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

949 ((
__AF__
Ë=
GPIO_AF1_I2C1
) || \

950 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

951 ((
__AF__
Ë=
GPIO_AF3_I2C1
) || \

952 ((
__AF__
Ë=
GPIO_AF4_I2C1
) || \

953 ((
__AF__
Ë=
GPIO_AF5_I2C2
) || \

954 ((
__AF__
Ë=
GPIO_AF6_USART4
) || \

955 ((
__AF__
Ë=
GPIO_AF7_LPUART1
))) || \

956 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

957 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

958 ((
__AF__
Ë=
GPIO_AF6_LPUART1
) || \

959 ((
__AF__
Ë=
GPIO_AF7_I2C3
))) || \

960 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPUART1
) || \

961 ((
__AF__
Ë=
GPIO_AF1_SPI2
) || \

962 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

963 ((
__AF__
Ë=
GPIO_AF6_USART5
))) || \

964 (((
__INSTANCE__
Ë=
GPIOE
Ë&& (((
__AF__
Ë=
GPIO_AF0_TIM22
) || \

965 ((
__AF__
Ë=
GPIO_AF2_TIM3
) || \

966 ((
__AF__
Ë=
GPIO_AF6_USART4
))))

976 #i‡
deföed
 (
STM32L053xx
Ë|| deföed (
STM32L063xx
)

1049 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

1050 
	#GPIO_AF0_SPI2
 ((
uöt8_t
)0x00UË

	)

1051 
	#GPIO_AF0_USART1
 ((
uöt8_t
)0x00UË

	)

1052 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

1053 
	#GPIO_AF0_LPUART1
 ((
uöt8_t
)0x00UË

	)

1054 
	#GPIO_AF0_USB
 ((
uöt8_t
)0x00UË

	)

1055 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

1056 
	#GPIO_AF0_TSC
 ((
uöt8_t
)0x00UË

	)

1057 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00UË

	)

1058 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

1059 
	#GPIO_AF0_TIM22
 ((
uöt8_t
)0x00UË

	)

1060 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

1061 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

1062 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

1063 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

1071 
	#GPIO_AF1_SPI1
 ((
uöt8_t
)0x01UË

	)

1072 
	#GPIO_AF1_SPI2
 ((
uöt8_t
)0x01UË

	)

1073 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

1074 
	#GPIO_AF1_LCD
 ((
uöt8_t
)0x01UË

	)

1082 
	#GPIO_AF2_SPI2
 ((
uöt8_t
)0x02UË

	)

1083 
	#GPIO_AF2_LPUART1
 ((
uöt8_t
)0x02UË

	)

1084 
	#GPIO_AF2_USB
 ((
uöt8_t
)0x02UË

	)

1085 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

1086 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

1087 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

1088 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

1096 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

1097 
	#GPIO_AF3_TSC
 ((
uöt8_t
)0x03UË

	)

1098 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

1106 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

1107 
	#GPIO_AF4_USART1
 ((
uöt8_t
)0x04UË

	)

1108 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

1109 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

1110 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

1111 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

1119 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05UË

	)

1120 
	#GPIO_AF5_I2C2
 ((
uöt8_t
)0x05UË

	)

1121 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

1122 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

1123 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

1131 
	#GPIO_AF6_I2C2
 ((
uöt8_t
)0x06UË

	)

1132 
	#GPIO_AF6_TIM21
 ((
uöt8_t
)0x06UË

	)

1133 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

1141 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

1142 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

1162 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_SPI1
Ë|| ((__AF__Ë=
GPIO_AF2_SPI2
Ë|| \

	)

1163 ((
__AF__
Ë=
GPIO_AF0_SPI2
Ë|| ((__AF__Ë=
GPIO_AF2_LPUART1
) || \

1164 ((
__AF__
Ë=
GPIO_AF0_USART1
Ë|| ((__AF__Ë=
GPIO_AF2_USB
) || \

1165 ((
__AF__
Ë=
GPIO_AF0_USART2
Ë|| ((__AF__Ë=
GPIO_AF2_LPTIM1
) || \

1166 ((
__AF__
Ë=
GPIO_AF0_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF2_TIM2
) || \

1167 ((
__AF__
Ë=
GPIO_AF0_USB
Ë|| ((__AF__Ë=
GPIO_AF3_TSC
) || \

1168 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
Ë|| ((__AF__Ë=
GPIO_AF2_EVENTOUT
) || \

1169 ((
__AF__
Ë=
GPIO_AF0_TSC
Ë|| ((__AF__Ë=
GPIO_AF2_RTC
) || \

1170 ((
__AF__
Ë=
GPIO_AF3_I2C1
Ë|| ((__AF__Ë=
GPIO_AF7_COMP2
) || \

1171 ((
__AF__
Ë=
GPIO_AF0_TIM22
Ë|| ((__AF__Ë=
GPIO_AF3_EVENTOUT
) || \

1172 ((
__AF__
Ë=
GPIO_AF0_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF4_I2C1
) || \

1173 ((
__AF__
Ë=
GPIO_AF0_MCO
Ë|| ((__AF__Ë=
GPIO_AF4_USART1
) || \

1174 ((
__AF__
Ë=
GPIO_AF0_SWDIO
Ë|| ((__AF__Ë=
GPIO_AF0_SWCLK
) || \

1175 ((
__AF__
Ë=
GPIO_AF1_SPI1
Ë|| ((__AF__Ë=
GPIO_AF4_USART2
) || \

1176 ((
__AF__
Ë=
GPIO_AF1_SPI2
Ë|| ((__AF__Ë=
GPIO_AF4_LPUART1
) || \

1177 ((
__AF__
Ë=
GPIO_AF7_COMP2
Ë|| ((__AF__Ë=
GPIO_AF4_TIM22
) || \

1178 ((
__AF__
Ë=
GPIO_AF1_I2C1
Ë|| ((__AF__Ë=
GPIO_AF4_EVENTOUT
) || \

1179 ((
__AF__
Ë=
GPIO_AF1_LCD
Ë|| ((__AF__Ë=
GPIO_AF5_SPI2
) || \

1180 ((
__AF__
Ë=
GPIO_AF5_I2C2
Ë|| ((__AF__Ë=
GPIO_AF5_TIM2
) || \

1181 ((
__AF__
Ë=
GPIO_AF5_TIM21
Ë|| ((__AF__Ë=
GPIO_AF5_TIM22
) || \

1182 ((
__AF__
Ë=
GPIO_AF6_I2C2
Ë|| ((__AF__Ë=
GPIO_AF6_TIM21
) || \

1183 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF7_COMP1
))

1187 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

1188 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1189 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

1190 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1191 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

1192 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

1193 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

1194 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
) || \

1195 ((
__AF__
Ë=
GPIO_AF7_COMP1
))) || \

1196 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1197 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

1198 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1199 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

1200 ((
__AF__
Ë=
GPIO_AF4_EVENTOUT
) || \

1201 ((
__AF__
Ë=
GPIO_AF5_I2C2
) || \

1202 ((
__AF__
Ë=
GPIO_AF6_TIM21
))) || \

1203 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1204 ((
__AF__
Ë=
GPIO_AF1_LCD
) || \

1205 ((
__AF__
Ë=
GPIO_AF2_EVENTOUT
) || \

1206 ((
__AF__
Ë=
GPIO_AF3_TSC
))) || \

1207 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPUART1
) || \

1208 ((
__AF__
Ë=
GPIO_AF1_LCD
))) || \

1209 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__AF__
Ë=
GPIO_AF0_USB
))))

1221 #i‡
deföed
 (
STM32L052xx
Ë|| deföed (
STM32L062xx
)

1294 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

1295 
	#GPIO_AF0_SPI2
 ((
uöt8_t
)0x00UË

	)

1296 
	#GPIO_AF0_USART1
 ((
uöt8_t
)0x00UË

	)

1297 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

1298 
	#GPIO_AF0_LPUART1
 ((
uöt8_t
)0x00UË

	)

1299 
	#GPIO_AF0_USB
 ((
uöt8_t
)0x00UË

	)

1300 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

1301 
	#GPIO_AF0_TSC
 ((
uöt8_t
)0x00UË

	)

1302 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00UË

	)

1303 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

1304 
	#GPIO_AF0_TIM22
 ((
uöt8_t
)0x00UË

	)

1305 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

1306 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

1307 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

1308 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

1316 
	#GPIO_AF1_SPI1
 ((
uöt8_t
)0x01UË

	)

1317 
	#GPIO_AF1_SPI2
 ((
uöt8_t
)0x01UË

	)

1318 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

1326 
	#GPIO_AF2_SPI2
 ((
uöt8_t
)0x02UË

	)

1327 
	#GPIO_AF2_LPUART1
 ((
uöt8_t
)0x02UË

	)

1328 
	#GPIO_AF2_USB
 ((
uöt8_t
)0x02UË

	)

1329 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

1330 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

1331 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

1332 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

1340 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

1341 
	#GPIO_AF3_TSC
 ((
uöt8_t
)0x03UË

	)

1342 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

1350 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

1351 
	#GPIO_AF4_USART1
 ((
uöt8_t
)0x04UË

	)

1352 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

1353 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

1354 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

1355 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

1363 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05UË

	)

1364 
	#GPIO_AF5_I2C2
 ((
uöt8_t
)0x05UË

	)

1365 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

1366 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

1367 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

1375 
	#GPIO_AF6_I2C2
 ((
uöt8_t
)0x06UË

	)

1376 
	#GPIO_AF6_TIM21
 ((
uöt8_t
)0x06UË

	)

1377 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

1385 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

1386 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

1406 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_SPI1
Ë|| ((__AF__Ë=
GPIO_AF2_SPI2
Ë|| \

	)

1407 ((
__AF__
Ë=
GPIO_AF0_SPI2
Ë|| ((__AF__Ë=
GPIO_AF2_LPUART1
) || \

1408 ((
__AF__
Ë=
GPIO_AF0_USART1
Ë|| ((__AF__Ë=
GPIO_AF2_USB
) || \

1409 ((
__AF__
Ë=
GPIO_AF0_USART2
Ë|| ((__AF__Ë=
GPIO_AF2_LPTIM1
) || \

1410 ((
__AF__
Ë=
GPIO_AF0_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF2_TIM2
) || \

1411 ((
__AF__
Ë=
GPIO_AF0_USB
Ë|| ((__AF__Ë=
GPIO_AF4_TIM22
) || \

1412 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
Ë|| ((__AF__Ë=
GPIO_AF2_EVENTOUT
) || \

1413 ((
__AF__
Ë=
GPIO_AF0_TSC
Ë|| ((__AF__Ë=
GPIO_AF2_RTC
) || \

1414 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF3_I2C1
) || \

1415 ((
__AF__
Ë=
GPIO_AF0_TIM21
Ë|| ((__AF__Ë=
GPIO_AF3_TSC
) || \

1416 ((
__AF__
Ë=
GPIO_AF0_TIM22
Ë|| ((__AF__Ë=
GPIO_AF3_EVENTOUT
) || \

1417 ((
__AF__
Ë=
GPIO_AF0_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF4_I2C1
) || \

1418 ((
__AF__
Ë=
GPIO_AF0_MCO
Ë|| ((__AF__Ë=
GPIO_AF4_USART1
) || \

1419 ((
__AF__
Ë=
GPIO_AF0_SWDIO
Ë|| ((__AF__Ë=
GPIO_AF0_SWCLK
) || \

1420 ((
__AF__
Ë=
GPIO_AF1_SPI1
Ë|| ((__AF__Ë=
GPIO_AF4_USART2
) || \

1421 ((
__AF__
Ë=
GPIO_AF1_SPI2
Ë|| ((__AF__Ë=
GPIO_AF4_LPUART1
) || \

1422 ((
__AF__
Ë=
GPIO_AF1_I2C1
Ë|| ((__AF__Ë=
GPIO_AF4_EVENTOUT
) || \

1423 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF5_SPI2
) || \

1424 ((
__AF__
Ë=
GPIO_AF5_I2C2
Ë|| ((__AF__Ë=
GPIO_AF5_TIM2
) || \

1425 ((
__AF__
Ë=
GPIO_AF5_TIM21
Ë|| ((__AF__Ë=
GPIO_AF5_TIM22
) || \

1426 ((
__AF__
Ë=
GPIO_AF6_I2C2
Ë|| ((__AF__Ë=
GPIO_AF6_TIM21
) || \

1427 ((
__AF__
Ë=
GPIO_AF7_COMP2
Ë|| ((__AF__Ë=
GPIO_AF7_COMP1
))

1430 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

1431 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1432 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1433 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

1434 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

1435 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

1436 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
) || \

1437 ((
__AF__
Ë=
GPIO_AF7_COMP1
))) || \

1438 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1439 ((
__AF__
Ë=
GPIO_AF1_I2C1
) || \

1440 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1441 ((
__AF__
Ë=
GPIO_AF3_TSC
) || \

1442 ((
__AF__
Ë=
GPIO_AF4_LPUART1
) || \

1443 ((
__AF__
Ë=
GPIO_AF5_I2C2
) || \

1444 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
))) || \

1445 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1446 ((
__AF__
Ë=
GPIO_AF2_EVENTOUT
) || \

1447 ((
__AF__
Ë=
GPIO_AF3_TSC
))) || \

1448 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPUART1
))) || \

1449 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__AF__
Ë=
GPIO_AF0_USB
))))

1460 #i‡
deföed
 (
STM32L051xx
)|| deföed (
STM32L061xx
)

1532 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

1533 
	#GPIO_AF0_SPI2
 ((
uöt8_t
)0x00UË

	)

1534 
	#GPIO_AF0_USART1
 ((
uöt8_t
)0x00UË

	)

1535 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

1536 
	#GPIO_AF0_LPUART1
 ((
uöt8_t
)0x00UË

	)

1537 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

1538 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00UË

	)

1539 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

1540 
	#GPIO_AF0_TIM22
 ((
uöt8_t
)0x00UË

	)

1541 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

1542 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

1543 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

1544 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

1552 
	#GPIO_AF1_SPI1
 ((
uöt8_t
)0x01UË

	)

1553 
	#GPIO_AF1_SPI2
 ((
uöt8_t
)0x01UË

	)

1554 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

1562 
	#GPIO_AF2_SPI2
 ((
uöt8_t
)0x02UË

	)

1563 
	#GPIO_AF2_LPUART1
 ((
uöt8_t
)0x02UË

	)

1564 
	#GPIO_AF2_USB
 ((
uöt8_t
)0x02UË

	)

1565 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

1566 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

1567 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

1568 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

1576 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

1577 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

1585 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

1586 
	#GPIO_AF4_USART1
 ((
uöt8_t
)0x04UË

	)

1587 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

1588 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

1589 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

1590 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

1598 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05UË

	)

1599 
	#GPIO_AF5_I2C2
 ((
uöt8_t
)0x05UË

	)

1600 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

1601 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

1602 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

1610 
	#GPIO_AF6_I2C2
 ((
uöt8_t
)0x06UË

	)

1611 
	#GPIO_AF6_TIM21
 ((
uöt8_t
)0x06UË

	)

1612 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

1620 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

1621 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

1641 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_SPI1
Ë|| ((__AF__Ë=
GPIO_AF2_SPI2
Ë|| \

	)

1642 ((
__AF__
Ë=
GPIO_AF0_SPI2
Ë|| ((__AF__Ë=
GPIO_AF2_LPUART1
) || \

1643 ((
__AF__
Ë=
GPIO_AF0_USART1
Ë|| ((__AF__Ë=
GPIO_AF7_COMP1
) || \

1644 ((
__AF__
Ë=
GPIO_AF0_USART2
Ë|| ((__AF__Ë=
GPIO_AF2_LPTIM1
) || \

1645 ((
__AF__
Ë=
GPIO_AF0_LPUART1
Ë|| ((__AF__Ë=
GPIO_AF2_TIM2
) || \

1646 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
Ë|| ((__AF__Ë=
GPIO_AF2_EVENTOUT
) || \

1647 ((
__AF__
Ë=
GPIO_AF2_RTC
Ë|| ((__AF__Ë=
GPIO_AF4_TIM22
) || \

1648 ((
__AF__
Ë=
GPIO_AF0_TIM2
Ë|| ((__AF__Ë=
GPIO_AF3_I2C1
) || \

1649 ((
__AF__
Ë=
GPIO_AF0_TIM21
Ë|| ((__AF__Ë=
GPIO_AF7_COMP2
) || \

1650 ((
__AF__
Ë=
GPIO_AF0_TIM22
Ë|| ((__AF__Ë=
GPIO_AF3_EVENTOUT
) || \

1651 ((
__AF__
Ë=
GPIO_AF0_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF4_I2C1
) || \

1652 ((
__AF__
Ë=
GPIO_AF0_MCO
Ë|| ((__AF__Ë=
GPIO_AF4_USART1
) || \

1653 ((
__AF__
Ë=
GPIO_AF0_SWDIO
Ë|| ((__AF__Ë=
GPIO_AF0_SWCLK
) || \

1654 ((
__AF__
Ë=
GPIO_AF1_SPI1
Ë|| ((__AF__Ë=
GPIO_AF4_USART2
) || \

1655 ((
__AF__
Ë=
GPIO_AF1_SPI2
Ë|| ((__AF__Ë=
GPIO_AF4_LPUART1
) || \

1656 ((
__AF__
Ë=
GPIO_AF1_I2C1
Ë|| ((__AF__Ë=
GPIO_AF4_EVENTOUT
) || \

1657 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
Ë|| ((__AF__Ë=
GPIO_AF5_SPI2
) || \

1658 ((
__AF__
Ë=
GPIO_AF5_I2C2
Ë|| ((__AF__Ë=
GPIO_AF5_TIM2
) || \

1659 ((
__AF__
Ë=
GPIO_AF5_TIM21
Ë|| ((__AF__Ë=
GPIO_AF5_TIM22
) || \

1660 ((
__AF__
Ë=
GPIO_AF6_I2C2
Ë|| ((__AF__Ë=
GPIO_AF6_TIM21
))

1664 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

1665 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1666 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1667 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
) || \

1668 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

1669 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

1670 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
) || \

1671 ((
__AF__
Ë=
GPIO_AF7_COMP2
))) || \

1672 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1673 ((
__AF__
Ë=
GPIO_AF1_I2C1
) || \

1674 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1675 ((
__AF__
Ë=
GPIO_AF3_I2C1
) || \

1676 ((
__AF__
Ë=
GPIO_AF4_LPUART1
) || \

1677 ((
__AF__
Ë=
GPIO_AF5_I2C2
) || \

1678 ((
__AF__
Ë=
GPIO_AF6_TIM21
))) || \

1679 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1680 ((
__AF__
Ë=
GPIO_AF2_LPUART1
))) || \

1681 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPUART1
))))

1692 #i‡
deföed
 (
STM32L031xx
)|| deföed (
STM32L041xx
)

1750 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

1751 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

1752 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

1753 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

1754 
	#GPIO_AF0_LPTIM1
 ((
uöt8_t
)0x00UË

	)

1755 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

1756 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

1757 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

1765 
	#GPIO_AF1_SPI1
 ((
uöt8_t
)0x01UË

	)

1766 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

1767 
	#GPIO_AF1_LPTIM1
 ((
uöt8_t
)0x01UË

	)

1775 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

1776 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

1777 
	#GPIO_AF2_MCO
 ((
uöt8_t
)0x02UË

	)

1778 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

1779 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

1787 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

1788 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

1796 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

1797 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

1798 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

1799 
	#GPIO_AF4_TIM22
 ((
uöt8_t
)0x04UË

	)

1800 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

1808 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

1809 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

1810 
	#GPIO_AF5_TIM22
 ((
uöt8_t
)0x05UË

	)

1818 
	#GPIO_AF6_LPUART1
 ((
uöt8_t
)0x06UË

	)

1819 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

1827 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

1828 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

1848 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_EVENTOUT
 ) || \

	)

1849 ((
__AF__
Ë=
GPIO_AF0_TIM21
 ) || \

1850 ((
__AF__
Ë=
GPIO_AF0_SPI1
 ) || \

1851 ((
__AF__
Ë=
GPIO_AF0_USART2
 ) || \

1852 ((
__AF__
Ë=
GPIO_AF0_LPTIM1
 ) || \

1853 ((
__AF__
Ë=
GPIO_AF0_MCO
 ) || \

1854 ((
__AF__
Ë=
GPIO_AF0_SWDIO
 ) || \

1855 ((
__AF__
Ë=
GPIO_AF0_SWCLK
 ) || \

1856 ((
__AF__
Ë=
GPIO_AF1_SPI1
 ) || \

1857 ((
__AF__
Ë=
GPIO_AF1_I2C1
 ) || \

1858 ((
__AF__
Ë=
GPIO_AF1_LPTIM1
 ) || \

1859 ((
__AF__
Ë=
GPIO_AF2_LPTIM1
 ) || \

1860 ((
__AF__
Ë=
GPIO_AF2_TIM2
 ) || \

1861 ((
__AF__
Ë=
GPIO_AF2_MCO
 ) || \

1862 ((
__AF__
Ë=
GPIO_AF2_EVENTOUT
 ) || \

1863 ((
__AF__
Ë=
GPIO_AF2_RTC
 ) || \

1864 ((
__AF__
Ë=
GPIO_AF3_I2C1
 ) || \

1865 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
 ) || \

1866 ((
__AF__
Ë=
GPIO_AF4_I2C1
 ) || \

1867 ((
__AF__
Ë=
GPIO_AF4_USART2
 ) || \

1868 ((
__AF__
Ë=
GPIO_AF4_LPUART1
 ) || \

1869 ((
__AF__
Ë=
GPIO_AF4_TIM22
 ) || \

1870 ((
__AF__
Ë=
GPIO_AF4_EVENTOUT
 ) || \

1871 ((
__AF__
Ë=
GPIO_AF5_TIM2
 ) || \

1872 ((
__AF__
Ë=
GPIO_AF5_TIM21
 ) || \

1873 ((
__AF__
Ë=
GPIO_AF5_TIM22
 ) || \

1874 ((
__AF__
Ë=
GPIO_AF6_LPUART1
 ) || \

1875 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
 ) || \

1876 ((
__AF__
Ë=
GPIO_AF7_COMP1
 ) || \

1877 ((
__AF__
Ë=
GPIO_AF7_COMP2
 ))

1880 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

1881 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1882 ((
__AF__
Ë=
GPIO_AF1_LPTIM1
) || \

1883 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

1884 ((
__AF__
Ë=
GPIO_AF3_I2C1
) || \

1885 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

1886 ((
__AF__
Ë=
GPIO_AF5_TIM22
) || \

1887 ((
__AF__
Ë=
GPIO_AF6_LPUART1
) || \

1888 ((
__AF__
Ë=
GPIO_AF7_COMP2
))) || \

1889 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

1890 ((
__AF__
Ë=
GPIO_AF1_SPI1
) || \

1891 ((
__AF__
Ë=
GPIO_AF2_LPTIM1
) || \

1892 ((
__AF__
Ë=
GPIO_AF3_I2C1
) || \

1893 ((
__AF__
Ë=
GPIO_AF4_LPUART1
) || \

1894 ((
__AF__
Ë=
GPIO_AF5_TIM2
) || \

1895 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
))) || \

1896 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__AF__
Ë=
GPIO_AF0_LPTIM1
) || \

1897 ((
__AF__
Ë=
GPIO_AF2_EVENTOUT
) || \

1898 ((
__AF__
Ë=
GPIO_AF6_LPUART1
))))

1910 #i‡
deföed
 (
STM32L011xx
)|| deföed (
STM32L021xx
)

1957 
	#GPIO_AF0_EVENTOUT
 ((
uöt8_t
)0x00UË

	)

1958 
	#GPIO_AF0_TIM21
 ((
uöt8_t
)0x00UË

	)

1959 
	#GPIO_AF0_SPI1
 ((
uöt8_t
)0x00UË

	)

1960 
	#GPIO_AF0_USART2
 ((
uöt8_t
)0x00UË

	)

1961 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00UË

	)

1962 
	#GPIO_AF0_SWDIO
 ((
uöt8_t
)0x00UË

	)

1963 
	#GPIO_AF0_SWCLK
 ((
uöt8_t
)0x00UË

	)

1971 
	#GPIO_AF1_SPI1
 ((
uöt8_t
)0x01UË

	)

1972 
	#GPIO_AF1_I2C1
 ((
uöt8_t
)0x01UË

	)

1973 
	#GPIO_AF1_LPTIM1
 ((
uöt8_t
)0x01UË

	)

1981 
	#GPIO_AF2_LPTIM1
 ((
uöt8_t
)0x02UË

	)

1982 
	#GPIO_AF2_TIM2
 ((
uöt8_t
)0x02UË

	)

1983 
	#GPIO_AF2_RTC
 ((
uöt8_t
)0x02UË

	)

1984 
	#GPIO_AF2_EVENTOUT
 ((
uöt8_t
)0x02UË

	)

1992 
	#GPIO_AF3_I2C1
 ((
uöt8_t
)0x03UË

	)

1993 
	#GPIO_AF3_EVENTOUT
 ((
uöt8_t
)0x03UË

	)

2001 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04UË

	)

2002 
	#GPIO_AF4_USART2
 ((
uöt8_t
)0x04UË

	)

2003 
	#GPIO_AF4_LPUART1
 ((
uöt8_t
)0x04UË

	)

2004 
	#GPIO_AF4_EVENTOUT
 ((
uöt8_t
)0x04UË

	)

2012 
	#GPIO_AF5_TIM2
 ((
uöt8_t
)0x05UË

	)

2013 
	#GPIO_AF5_TIM21
 ((
uöt8_t
)0x05UË

	)

2014 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05UË

	)

2022 
	#GPIO_AF6_LPUART1
 ((
uöt8_t
)0x06UË

	)

2023 
	#GPIO_AF6_EVENTOUT
 ((
uöt8_t
)0x06UË

	)

2031 
	#GPIO_AF7_COMP1
 ((
uöt8_t
)0x07UË

	)

2032 
	#GPIO_AF7_COMP2
 ((
uöt8_t
)0x07UË

	)

2052 
	#IS_GPIO_AF
(
__AF__
Ë(((__AF__Ë=
GPIO_AF0_EVENTOUT
 ) || \

	)

2053 ((
__AF__
Ë=
GPIO_AF0_TIM21
 ) || \

2054 ((
__AF__
Ë=
GPIO_AF0_SPI1
 ) || \

2055 ((
__AF__
Ë=
GPIO_AF0_USART2
 ) || \

2056 ((
__AF__
Ë=
GPIO_AF0_MCO
 ) || \

2057 ((
__AF__
Ë=
GPIO_AF0_SWDIO
 ) || \

2058 ((
__AF__
Ë=
GPIO_AF0_SWCLK
 ) || \

2059 ((
__AF__
Ë=
GPIO_AF1_SPI1
 ) || \

2060 ((
__AF__
Ë=
GPIO_AF1_I2C1
 ) || \

2061 ((
__AF__
Ë=
GPIO_AF1_LPTIM1
 ) || \

2062 ((
__AF__
Ë=
GPIO_AF2_LPTIM1
 ) || \

2063 ((
__AF__
Ë=
GPIO_AF2_TIM2
 ) || \

2064 ((
__AF__
Ë=
GPIO_AF2_EVENTOUT
 ) || \

2065 ((
__AF__
Ë=
GPIO_AF2_RTC
 ) || \

2066 ((
__AF__
Ë=
GPIO_AF3_I2C1
 ) || \

2067 ((
__AF__
Ë=
GPIO_AF3_EVENTOUT
 ) || \

2068 ((
__AF__
Ë=
GPIO_AF4_I2C1
 ) || \

2069 ((
__AF__
Ë=
GPIO_AF4_USART2
 ) || \

2070 ((
__AF__
Ë=
GPIO_AF4_LPUART1
 ) || \

2071 ((
__AF__
Ë=
GPIO_AF4_EVENTOUT
 ) || \

2072 ((
__AF__
Ë=
GPIO_AF5_TIM2
 ) || \

2073 ((
__AF__
Ë=
GPIO_AF5_TIM21
 ) || \

2074 ((
__AF__
Ë=
GPIO_AF5_SPI1
 ) || \

2075 ((
__AF__
Ë=
GPIO_AF6_LPUART1
 ) || \

2076 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
 ) || \

2077 ((
__AF__
Ë=
GPIO_AF7_COMP1
 ) || \

2078 ((
__AF__
Ë=
GPIO_AF7_COMP2
 ))

2081 
	#IS_GPIO_AF_AVAILABLE
(
__INSTANCE__
,
__AF__
Ë\

	)

2082 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

2083 ((
__AF__
Ë=
GPIO_AF1_LPTIM1
) || \

2084 ((
__AF__
Ë=
GPIO_AF2_TIM2
) || \

2085 ((
__AF__
Ë=
GPIO_AF3_I2C1
) || \

2086 ((
__AF__
Ë=
GPIO_AF4_USART2
) || \

2087 ((
__AF__
Ë=
GPIO_AF5_TIM2
) || \

2088 ((
__AF__
Ë=
GPIO_AF6_LPUART1
) || \

2089 ((
__AF__
Ë=
GPIO_AF7_COMP2
))) || \

2090 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__AF__
Ë=
GPIO_AF0_EVENTOUT
) || \

2091 ((
__AF__
Ë=
GPIO_AF1_SPI1
) || \

2092 ((
__AF__
Ë=
GPIO_AF2_LPTIM1
) || \

2093 ((
__AF__
Ë=
GPIO_AF3_I2C1
) || \

2094 ((
__AF__
Ë=
GPIO_AF4_LPUART1
) || \

2095 ((
__AF__
Ë=
GPIO_AF5_TIM2
) || \

2096 ((
__AF__
Ë=
GPIO_AF6_EVENTOUT
))))

2107 #i‡
deföed
 (
STM32L083xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L081xx
) || \

2108 
deföed
 (
STM32L073xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L071xx
)

2116 
	#GPIOA_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2117 
	#GPIOB_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2118 
	#GPIOC_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2119 
	#GPIOD_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2120 
	#GPIOE_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2121 
	#GPIOH_PIN_AVAILABLE
 (
GPIO_PIN_0
 | 
GPIO_PIN_1
 | 
GPIO_PIN_9
 | 
GPIO_PIN_10
)

	)

2132 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

	)

2133 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

2134 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

2135 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

2136 ((
__GPIOx__
Ë=(
GPIOE
))? 4U :\

2137 ((
__GPIOx__
Ë=(
GPIOH
))? 5U : 6U)

2139 
	#IS_GPIO_PIN_AVAILABLE
(
__INSTANCE__
,
__PIN__
Ë\

	)

2140 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__PIN__
Ë& (
GPIOA_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \

2141 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__PIN__
Ë& (
GPIOB_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \

2142 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__PIN__
Ë& (
GPIOC_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \

2143 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__PIN__
Ë& (
GPIOD_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) || \

2144 (((
__INSTANCE__
Ë=
GPIOE
Ë&& (((
__PIN__
Ë& (
GPIOE_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOE_PIN_AVAILABLE)) == (GPIOE_PIN_AVAILABLE))) || \

2145 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__PIN__
Ë& (
GPIOH_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))

2149 #ñi‡
deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
)

2158 
	#GPIOA_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2159 
	#GPIOB_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2160 
	#GPIOC_PIN_AVAILABLE
 (
GPIO_PIN_0
 | 
GPIO_PIN_13
 | 
GPIO_PIN_14
 | 
GPIO_PIN_15
)

	)

2161 
	#GPIOH_PIN_AVAILABLE
 (
GPIO_PIN_0
 | 
GPIO_PIN_1
)

	)

2172 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

	)

2173 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

2174 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

2175 ((
__GPIOx__
Ë=(
GPIOH
))? 5U : 6U)

2178 
	#IS_GPIO_PIN_AVAILABLE
(
__INSTANCE__
,
__PIN__
Ë\

	)

2179 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__PIN__
Ë& (
GPIOA_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \

2180 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__PIN__
Ë& (
GPIOB_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \

2181 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__PIN__
Ë& (
GPIOC_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \

2182 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__PIN__
Ë& (
GPIOH_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))

2188 #ñi‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

2197 
	#GPIOA_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2198 
	#GPIOB_PIN_AVAILABLE
 (
GPIO_PIN_0
 | 
GPIO_PIN_1
 | 
GPIO_PIN_2
 | 
GPIO_PIN_3
 | 
GPIO_PIN_4
 | \

	)

2199 
GPIO_PIN_5
 | 
GPIO_PIN_6
 | 
GPIO_PIN_7
 | 
GPIO_PIN_8
 | 
GPIO_PIN_9
 )

2200 
	#GPIOC_PIN_AVAILABLE
 (
GPIO_PIN_14
 | 
GPIO_PIN_15
)

	)

2212 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

	)

2213 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

2214 ((
__GPIOx__
Ë=(
GPIOC
))? 2U : 6U)

2217 
	#IS_GPIO_PIN_AVAILABLE
(
__INSTANCE__
,
__PIN__
Ë\

	)

2218 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__PIN__
Ë& (
GPIOA_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \

2219 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__PIN__
Ë& (
GPIOB_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \

2220 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__PIN__
Ë& (
GPIOC_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))))

2225 #ñi‡
deföed
 (
STM32L063xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L061xx
) || \

2226 
deföed
 (
STM32L053xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L051xx
)

2234 
	#GPIOA_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2235 
	#GPIOB_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2236 
	#GPIOC_PIN_AVAILABLE
 
GPIO_PIN_AŒ


	)

2237 
	#GPIOD_PIN_AVAILABLE
 
GPIO_PIN_2


	)

2238 
	#GPIOH_PIN_AVAILABLE
 
GPIO_PIN_0
 | 
GPIO_PIN_1


	)

2249 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

	)

2250 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

2251 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

2252 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

2253 ((
__GPIOx__
Ë=(
GPIOH
))? 5U : 6U)

2255 
	#IS_GPIO_PIN_AVAILABLE
(
__INSTANCE__
,
__PIN__
Ë\

	)

2256 ((((
__INSTANCE__
Ë=
GPIOA
Ë&& (((
__PIN__
Ë& (
GPIOA_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \

2257 (((
__INSTANCE__
Ë=
GPIOB
Ë&& (((
__PIN__
Ë& (
GPIOB_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \

2258 (((
__INSTANCE__
Ë=
GPIOC
Ë&& (((
__PIN__
Ë& (
GPIOC_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \

2259 (((
__INSTANCE__
Ë=
GPIOD
Ë&& (((
__PIN__
Ë& (
GPIOD_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) || \

2260 (((
__INSTANCE__
Ë=
GPIOH
Ë&& (((
__PIN__
Ë& (
GPIOH_PIN_AVAILABLE
)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))

2275 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h

37 #i‚de‡
__STM32L0xx_HAL_I2C_H


38 
	#__STM32L0xx_HAL_I2C_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

66 
uöt32_t
 
Timög
;

70 
uöt32_t
 
OwnAddªss1
;

73 
uöt32_t
 
AddªssögMode
;

76 
uöt32_t
 
DuÆAddªssMode
;

79 
uöt32_t
 
OwnAddªss2
;

82 
uöt32_t
 
OwnAddªss2Masks
;

85 
uöt32_t
 
GíîÆCÆlMode
;

88 
uöt32_t
 
NoSåëchMode
;

91 } 
	tI2C_InôTy≥Def
;

126 
HAL_I2C_STATE_RESET
 = 0x00U,

127 
HAL_I2C_STATE_READY
 = 0x20U,

128 
HAL_I2C_STATE_BUSY
 = 0x24U,

129 
HAL_I2C_STATE_BUSY_TX
 = 0x21U,

130 
HAL_I2C_STATE_BUSY_RX
 = 0x22U,

131 
HAL_I2C_STATE_LISTEN
 = 0x28U,

132 
HAL_I2C_STATE_BUSY_TX_LISTEN
 = 0x29U,

134 
HAL_I2C_STATE_BUSY_RX_LISTEN
 = 0x2AU,

136 
HAL_I2C_STATE_ABORT
 = 0x60U,

137 
HAL_I2C_STATE_TIMEOUT
 = 0xA0U,

138 
HAL_I2C_STATE_ERROR
 = 0xE0U

140 } 
	tHAL_I2C_SèãTy≥Def
;

166 
HAL_I2C_MODE_NONE
 = 0x00U,

167 
HAL_I2C_MODE_MASTER
 = 0x10U,

168 
HAL_I2C_MODE_SLAVE
 = 0x20U,

169 
HAL_I2C_MODE_MEM
 = 0x40U

171 } 
	tHAL_I2C_ModeTy≥Def
;

181 
	#HAL_I2C_ERROR_NONE
 (0x00000000UË

	)

182 
	#HAL_I2C_ERROR_BERR
 (0x00000001UË

	)

183 
	#HAL_I2C_ERROR_ARLO
 (0x00000002UË

	)

184 
	#HAL_I2C_ERROR_AF
 (0x00000004UË

	)

185 
	#HAL_I2C_ERROR_OVR
 (0x00000008UË

	)

186 
	#HAL_I2C_ERROR_DMA
 (0x00000010UË

	)

187 
	#HAL_I2C_ERROR_TIMEOUT
 (0x00000020UË

	)

188 
	#HAL_I2C_ERROR_SIZE
 (0x00000040UË

	)

197 
	s__I2C_H™dÀTy≥Def


199 
I2C_Ty≥Def
 *
In°™˚
;

201 
I2C_InôTy≥Def
 
Inô
;

203 
uöt8_t
 *
pBuffPå
;

205 
uöt16_t
 
X„rSize
;

207 
__IO
 
uöt16_t
 
X„rCou¡
;

209 
__IO
 
uöt32_t
 
X„rO±i⁄s
;

212 
__IO
 
uöt32_t
 
PªviousSèã
;

214 
HAL_SètusTy≥Def
(*
X„rISR
)(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
);

216 
DMA_H™dÀTy≥Def
 *
hdm©x
;

218 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

220 
HAL_LockTy≥Def
 
Lock
;

222 
__IO
 
HAL_I2C_SèãTy≥Def
 
Sèã
;

224 
__IO
 
HAL_I2C_ModeTy≥Def
 
Mode
;

226 
__IO
 
uöt32_t
 
Eº‹Code
;

228 
__IO
 
uöt32_t
 
AddrEvítCou¡
;

229 } 
	tI2C_H™dÀTy≥Def
;

246 
	#I2C_FIRST_FRAME
 ((
uöt32_t
)
I2C_SOFTEND_MODE
)

	)

247 
	#I2C_FIRST_AND_NEXT_FRAME
 ((
uöt32_t
)(
I2C_RELOAD_MODE
 | 
I2C_SOFTEND_MODE
))

	)

248 
	#I2C_NEXT_FRAME
 ((
uöt32_t
)(
I2C_RELOAD_MODE
 | 
I2C_SOFTEND_MODE
))

	)

249 
	#I2C_FIRST_AND_LAST_FRAME
 ((
uöt32_t
)
I2C_AUTOEND_MODE
)

	)

250 
	#I2C_LAST_FRAME
 ((
uöt32_t
)
I2C_AUTOEND_MODE
)

	)

258 
	#I2C_ADDRESSINGMODE_7BIT
 (0x00000001U)

	)

259 
	#I2C_ADDRESSINGMODE_10BIT
 (0x00000002U)

	)

267 
	#I2C_DUALADDRESS_DISABLE
 (0x00000000U)

	)

268 
	#I2C_DUALADDRESS_ENABLE
 
I2C_OAR2_OA2EN


	)

276 
	#I2C_OA2_NOMASK
 ((
uöt8_t
)0x00U)

	)

277 
	#I2C_OA2_MASK01
 ((
uöt8_t
)0x01U)

	)

278 
	#I2C_OA2_MASK02
 ((
uöt8_t
)0x02U)

	)

279 
	#I2C_OA2_MASK03
 ((
uöt8_t
)0x03U)

	)

280 
	#I2C_OA2_MASK04
 ((
uöt8_t
)0x04U)

	)

281 
	#I2C_OA2_MASK05
 ((
uöt8_t
)0x05U)

	)

282 
	#I2C_OA2_MASK06
 ((
uöt8_t
)0x06U)

	)

283 
	#I2C_OA2_MASK07
 ((
uöt8_t
)0x07U)

	)

291 
	#I2C_GENERALCALL_DISABLE
 (0x00000000U)

	)

292 
	#I2C_GENERALCALL_ENABLE
 
I2C_CR1_GCEN


	)

300 
	#I2C_NOSTRETCH_DISABLE
 (0x00000000U)

	)

301 
	#I2C_NOSTRETCH_ENABLE
 
I2C_CR1_NOSTRETCH


	)

309 
	#I2C_MEMADD_SIZE_8BIT
 (0x00000001U)

	)

310 
	#I2C_MEMADD_SIZE_16BIT
 (0x00000002U)

	)

318 
	#I2C_DIRECTION_TRANSMIT
 (0x00000000U)

	)

319 
	#I2C_DIRECTION_RECEIVE
 (0x00000001U)

	)

327 
	#I2C_RELOAD_MODE
 
I2C_CR2_RELOAD


	)

328 
	#I2C_AUTOEND_MODE
 
I2C_CR2_AUTOEND


	)

329 
	#I2C_SOFTEND_MODE
 (0x00000000U)

	)

337 
	#I2C_NO_STARTSTOP
 (0x00000000U)

	)

338 
	#I2C_GENERATE_STOP
 (
uöt32_t
)(0x80000000U | 
I2C_CR2_STOP
)

	)

339 
	#I2C_GENERATE_START_READ
 (
uöt32_t
)(0x80000000U | 
I2C_CR2_START
 | 
I2C_CR2_RD_WRN
)

	)

340 
	#I2C_GENERATE_START_WRITE
 (
uöt32_t
)(0x80000000U | 
I2C_CR2_START
)

	)

351 
	#I2C_IT_ERRI
 
I2C_CR1_ERRIE


	)

352 
	#I2C_IT_TCI
 
I2C_CR1_TCIE


	)

353 
	#I2C_IT_STOPI
 
I2C_CR1_STOPIE


	)

354 
	#I2C_IT_NACKI
 
I2C_CR1_NACKIE


	)

355 
	#I2C_IT_ADDRI
 
I2C_CR1_ADDRIE


	)

356 
	#I2C_IT_RXI
 
I2C_CR1_RXIE


	)

357 
	#I2C_IT_TXI
 
I2C_CR1_TXIE


	)

365 
	#I2C_FLAG_TXE
 
I2C_ISR_TXE


	)

366 
	#I2C_FLAG_TXIS
 
I2C_ISR_TXIS


	)

367 
	#I2C_FLAG_RXNE
 
I2C_ISR_RXNE


	)

368 
	#I2C_FLAG_ADDR
 
I2C_ISR_ADDR


	)

369 
	#I2C_FLAG_AF
 
I2C_ISR_NACKF


	)

370 
	#I2C_FLAG_STOPF
 
I2C_ISR_STOPF


	)

371 
	#I2C_FLAG_TC
 
I2C_ISR_TC


	)

372 
	#I2C_FLAG_TCR
 
I2C_ISR_TCR


	)

373 
	#I2C_FLAG_BERR
 
I2C_ISR_BERR


	)

374 
	#I2C_FLAG_ARLO
 
I2C_ISR_ARLO


	)

375 
	#I2C_FLAG_OVR
 
I2C_ISR_OVR


	)

376 
	#I2C_FLAG_PECERR
 
I2C_ISR_PECERR


	)

377 
	#I2C_FLAG_TIMEOUT
 
I2C_ISR_TIMEOUT


	)

378 
	#I2C_FLAG_ALERT
 
I2C_ISR_ALERT


	)

379 
	#I2C_FLAG_BUSY
 
I2C_ISR_BUSY


	)

380 
	#I2C_FLAG_DIR
 
I2C_ISR_DIR


	)

399 
	#__HAL_I2C_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_I2C_STATE_RESET
)

	)

415 
	#__HAL_I2C_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |(__INTERRUPT__))

	)

431 
	#__HAL_I2C_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &(~(__INTERRUPT__)))

	)

447 
	#__HAL_I2C_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR1
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

472 
	#__HAL_I2C_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& (__FLAG__)Ë=(__FLAG__)Ë? 
SET
 : 
RESET
)

	)

491 
	#__HAL_I2C_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__FLAG__Ë=
I2C_FLAG_TXE
Ë? ((__HANDLE__)->
In°™˚
->
ISR
 |(__FLAG__)Ë\

	)

492 : ((
__HANDLE__
)->
In°™˚
->
ICR
 = (
__FLAG__
)))

498 
	#__HAL_I2C_ENABLE
(
__HANDLE__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
I2C_CR1_PE
))

	)

504 
	#__HAL_I2C_DISABLE
(
__HANDLE__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR1
, 
I2C_CR1_PE
))

	)

510 
	#__HAL_I2C_GENERATE_NACK
(
__HANDLE__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR2
, 
I2C_CR2_NACK
))

	)

516 
	~"°m32l0xx_hÆ_i2c_ex.h
"

527 
HAL_SètusTy≥Def
 
HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

528 
HAL_SètusTy≥Def
 
HAL_I2C_DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

529 
HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

530 
HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

540 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

541 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

542 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

543 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

544 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

545 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

546 
HAL_SètusTy≥Def
 
HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
);

549 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

550 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

551 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

552 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

553 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

554 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

556 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Sequítül_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
);

557 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Sequítül_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
);

558 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Sequítül_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
);

559 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Sequítül_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
);

560 
HAL_SètusTy≥Def
 
HAL_I2C_E«bÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
);

561 
HAL_SètusTy≥Def
 
HAL_I2C_DißbÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
);

562 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Ab‹t_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
);

565 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

566 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

567 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

568 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

569 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

570 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

579 
HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
);

580 
HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
);

581 
HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

582 
HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

583 
HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

584 
HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

585 
HAL_I2C_AddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 
Tøns„rDúe˘i⁄
, 
uöt16_t
 
AddrM©chCode
);

586 
HAL_I2C_Li°íC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

587 
HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

588 
HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

589 
HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

590 
HAL_I2C_Ab‹tC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

599 
HAL_I2C_SèãTy≥Def
 
HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
);

600 
HAL_I2C_ModeTy≥Def
 
HAL_I2C_GëMode
(
I2C_H™dÀTy≥Def
 *
hi2c
);

601 
uöt32_t
 
HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
);

625 
	#IS_I2C_ADDRESSING_MODE
(
MODE
Ë(((MODEË=
I2C_ADDRESSINGMODE_7BIT
Ë|| \

	)

626 ((
MODE
Ë=
I2C_ADDRESSINGMODE_10BIT
))

628 
	#IS_I2C_DUAL_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_DUALADDRESS_DISABLE
Ë|| \

	)

629 ((
ADDRESS
Ë=
I2C_DUALADDRESS_ENABLE
))

631 
	#IS_I2C_OWN_ADDRESS2_MASK
(
MASK
Ë(((MASKË=
I2C_OA2_NOMASK
Ë|| \

	)

632 ((
MASK
Ë=
I2C_OA2_MASK01
) || \

633 ((
MASK
Ë=
I2C_OA2_MASK02
) || \

634 ((
MASK
Ë=
I2C_OA2_MASK03
) || \

635 ((
MASK
Ë=
I2C_OA2_MASK04
) || \

636 ((
MASK
Ë=
I2C_OA2_MASK05
) || \

637 ((
MASK
Ë=
I2C_OA2_MASK06
) || \

638 ((
MASK
Ë=
I2C_OA2_MASK07
))

640 
	#IS_I2C_GENERAL_CALL
(
CALL
Ë(((CALLË=
I2C_GENERALCALL_DISABLE
Ë|| \

	)

641 ((
CALL
Ë=
I2C_GENERALCALL_ENABLE
))

643 
	#IS_I2C_NO_STRETCH
(
STRETCH
Ë(((STRETCHË=
I2C_NOSTRETCH_DISABLE
Ë|| \

	)

644 ((
STRETCH
Ë=
I2C_NOSTRETCH_ENABLE
))

646 
	#IS_I2C_MEMADD_SIZE
(
SIZE
Ë(((SIZEË=
I2C_MEMADD_SIZE_8BIT
Ë|| \

	)

647 ((
SIZE
Ë=
I2C_MEMADD_SIZE_16BIT
))

649 
	#IS_TRANSFER_MODE
(
MODE
Ë(((MODEË=
I2C_RELOAD_MODE
Ë|| \

	)

650 ((
MODE
Ë=
I2C_AUTOEND_MODE
) || \

651 ((
MODE
Ë=
I2C_SOFTEND_MODE
))

653 
	#IS_TRANSFER_REQUEST
(
REQUEST
Ë(((REQUESTË=
I2C_GENERATE_STOP
Ë|| \

	)

654 ((
REQUEST
Ë=
I2C_GENERATE_START_READ
) || \

655 ((
REQUEST
Ë=
I2C_GENERATE_START_WRITE
) || \

656 ((
REQUEST
Ë=
I2C_NO_STARTSTOP
))

658 
	#IS_I2C_TRANSFER_OPTIONS_REQUEST
(
REQUEST
Ë(((REQUESTË=
I2C_FIRST_FRAME
Ë|| \

	)

659 ((
REQUEST
Ë=
I2C_FIRST_AND_NEXT_FRAME
) || \

660 ((
REQUEST
Ë=
I2C_NEXT_FRAME
) || \

661 ((
REQUEST
Ë=
I2C_FIRST_AND_LAST_FRAME
) || \

662 ((
REQUEST
Ë=
I2C_LAST_FRAME
))

664 
	#I2C_RESET_CR2
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR2
 &(
uöt32_t
)~((uöt32_t)(
I2C_CR2_SADD
 | 
I2C_CR2_HEAD10R
 | 
I2C_CR2_NBYTES
 | 
I2C_CR2_RELOAD
 | 
I2C_CR2_RD_WRN
)))

	)

666 
	#I2C_GET_ADDR_MATCH
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
ISR
 & 
I2C_ISR_ADDCODE
Ë>> 16U)

	)

667 
	#I2C_GET_DIR
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
ISR
 & 
I2C_ISR_DIR
Ë>> 16U)

	)

668 
	#I2C_GET_STOP_MODE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR2
 & 
I2C_CR2_AUTOEND
)

	)

669 
	#I2C_GET_OWN_ADDRESS1
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
OAR1
 & 
I2C_OAR1_OA1
)

	)

670 
	#I2C_GET_OWN_ADDRESS2
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
OAR2
 & 
I2C_OAR2_OA2
)

	)

672 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x000003FFU)

	)

673 
	#IS_I2C_OWN_ADDRESS2
(
ADDRESS2
Ë((ADDRESS2Ë<(
uöt16_t
)0x00FFU)

	)

675 
	#I2C_MEM_ADD_MSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0xFF00U))Ë>> 8U)))

	)

676 
	#I2C_MEM_ADD_LSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)(0x00FFU))))

	)

678 
	#I2C_GENERATE_START
(
__ADDMODE__
,
__ADDRESS__
Ë(((__ADDMODE__Ë=
I2C_ADDRESSINGMODE_7BIT
Ë? (
uöt32_t
)((((uöt32_t)(__ADDRESS__Ë& (
I2C_CR2_SADD
)Ë| (
I2C_CR2_START
Ë| (
I2C_CR2_AUTOEND
)Ë& (~
I2C_CR2_RD_WRN
)Ë: \

	)

679 (
uöt32_t
)((((uöt32_t)(
__ADDRESS__
Ë& (
I2C_CR2_SADD
)Ë| (
I2C_CR2_ADD10
Ë| (
I2C_CR2_START
)Ë& (~
I2C_CR2_RD_WRN
)))

701 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c_ex.h

37 #i‚de‡
__STM32L0xx_HAL_I2C_EX_H


38 
	#__STM32L0xx_HAL_I2C_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

65 
	#I2C_ANALOGFILTER_ENABLE
 0x00000000U

	)

66 
	#I2C_ANALOGFILTER_DISABLE
 
I2C_CR1_ANFOFF


	)

74 
	#I2C_FMP_NOT_SUPPORTED
 0xAAAA0000U

	)

75 
	#I2C_FASTMODEPLUS_PB6
 
SYSCFG_CFGR2_I2C_PB6_FMP


	)

76 
	#I2C_FASTMODEPLUS_PB7
 
SYSCFG_CFGR2_I2C_PB7_FMP


	)

77 
	#I2C_FASTMODEPLUS_PB8
 
SYSCFG_CFGR2_I2C_PB8_FMP


	)

78 
	#I2C_FASTMODEPLUS_PB9
 
SYSCFG_CFGR2_I2C_PB9_FMP


	)

79 
	#I2C_FASTMODEPLUS_I2C1
 
SYSCFG_CFGR2_I2C1_FMP


	)

80 #i‡
deföed
(
SYSCFG_CFGR2_I2C2_FMP
)

81 
	#I2C_FASTMODEPLUS_I2C2
 
SYSCFG_CFGR2_I2C2_FMP


	)

83 
	#I2C_FASTMODEPLUS_I2C2
 (
uöt32_t
)(0x00000200U | 
I2C_FMP_NOT_SUPPORTED
Ë

	)

85 #i‡
deföed
(
SYSCFG_CFGR2_I2C3_FMP
)

86 
	#I2C_FASTMODEPLUS_I2C3
 
SYSCFG_CFGR2_I2C3_FMP


	)

88 
	#I2C_FASTMODEPLUS_I2C3
 (
uöt32_t
)(0x00000400U | 
I2C_FMP_NOT_SUPPORTED
Ë

	)

111 
HAL_SètusTy≥Def
 
HAL_I2CEx_C⁄figA«logFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
A«logFûãr
);

112 
HAL_SètusTy≥Def
 
HAL_I2CEx_C⁄figDigôÆFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
DigôÆFûãr
);

113 
HAL_SètusTy≥Def
 
HAL_I2CEx_E«bÀWakeUp
(
I2C_H™dÀTy≥Def
 *
hi2c
);

114 
HAL_SètusTy≥Def
 
HAL_I2CEx_DißbÀWakeUp
(
I2C_H™dÀTy≥Def
 *
hi2c
);

115 
HAL_I2CEx_E«bÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
);

116 
HAL_I2CEx_DißbÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
);

131 
	#IS_I2C_ANALOG_FILTER
(
FILTER
Ë(((FILTERË=
I2C_ANALOGFILTER_ENABLE
Ë|| \

	)

132 ((
FILTER
Ë=
I2C_ANALOGFILTER_DISABLE
))

134 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000FU)

	)

136 
	#IS_I2C_FASTMODEPLUS
(
__CONFIG__
Ë((((__CONFIG__Ë& 
I2C_FMP_NOT_SUPPORTED
Ë!I2C_FMP_NOT_SUPPORTEDË&& \

	)

137 ((((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_PB6
)) == I2C_FASTMODEPLUS_PB6) || \

138 (((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_PB7
)) == I2C_FASTMODEPLUS_PB7) || \

139 (((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_PB8
)) == I2C_FASTMODEPLUS_PB8) || \

140 (((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_PB9
)) == I2C_FASTMODEPLUS_PB9) || \

141 (((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_I2C1
)) == I2C_FASTMODEPLUS_I2C1) || \

142 (((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_I2C2
)) == I2C_FASTMODEPLUS_I2C2) || \

143 (((
__CONFIG__
Ë& (
I2C_FASTMODEPLUS_I2C3
)) == I2C_FASTMODEPLUS_I2C3)))

173 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2s.h

37 #i‚de‡
__STM32L0xx_HAL_I2S_H


38 
	#__STM32L0xx_HAL_I2S_H


	)

40 #ifde‡
__˝lu•lus


44 #i‡!
deföed
 (
STM32L031xx
Ë&& !deföed (
STM32L041xx
Ë&& !deföed (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

46 
	~"°m32l0xx_hÆ_def.h
"

66 
uöt32_t
 
Mode
;

69 
uöt32_t
 
Sènd¨d
;

72 
uöt32_t
 
D©aF‹m©
;

75 
uöt32_t
 
MCLKOuçut
;

78 
uöt32_t
 
AudioFªq
;

81 
uöt32_t
 
CPOL
;

84 }
	tI2S_InôTy≥Def
;

91 
	mHAL_I2S_STATE_RESET
 = 0x00U,

92 
	mHAL_I2S_STATE_READY
 = 0x01U,

93 
	mHAL_I2S_STATE_BUSY
 = 0x02U,

94 
	mHAL_I2S_STATE_BUSY_TX
 = 0x12U,

95 
	mHAL_I2S_STATE_BUSY_RX
 = 0x22U,

96 
	mHAL_I2S_STATE_TIMEOUT
 = 0x03U,

97 
	mHAL_I2S_STATE_ERROR
 = 0x04U

98 }
	tHAL_I2S_SèãTy≥Def
;

105 
SPI_Ty≥Def
 *
	mIn°™˚
;

107 
I2S_InôTy≥Def
 
	mInô
;

109 
uöt16_t
 *
	mpTxBuffPå
;

111 
__IO
 
uöt16_t
 
	mTxX„rSize
;

113 
__IO
 
uöt16_t
 
	mTxX„rCou¡
;

115 
uöt16_t
 *
	mpRxBuffPå
;

117 
__IO
 
uöt16_t
 
	mRxX„rSize
;

119 
__IO
 
uöt16_t
 
	mRxX„rCou¡
;

126 
DMA_H™dÀTy≥Def
 *
	mhdm©x
;

128 
DMA_H™dÀTy≥Def
 *
	mhdm¨x
;

130 
__IO
 
HAL_LockTy≥Def
 
	mLock
;

132 
__IO
 
HAL_I2S_SèãTy≥Def
 
	mSèã
;

134 
__IO
 
uöt32_t
 
	mEº‹Code
;

136 }
	tI2S_H™dÀTy≥Def
;

150 
	#HAL_I2S_ERROR_NONE
 ((
uöt32_t
)0x00UË

	)

151 
	#HAL_I2S_ERROR_UDR
 ((
uöt32_t
)0x01UË

	)

152 
	#HAL_I2S_ERROR_OVR
 ((
uöt32_t
)0x02UË

	)

153 
	#HAL_I2S_ERROR_FRE
 ((
uöt32_t
)0x04UË

	)

154 
	#HAL_I2S_ERROR_DMA
 ((
uöt32_t
)0x08UË

	)

162 
	#I2S_MODE_SLAVE_TX
 ((
uöt32_t
Ë0x00000000U)

	)

163 
	#I2S_MODE_SLAVE_RX
 ((
uöt32_t
Ë
SPI_I2SCFGR_I2SCFG_0
)

	)

164 
	#I2S_MODE_MASTER_TX
 ((
uöt32_t
Ë
SPI_I2SCFGR_I2SCFG_1
)

	)

165 
	#I2S_MODE_MASTER_RX
 ((
uöt32_t
)(
SPI_I2SCFGR_I2SCFG_0
 |\

	)

166 
	gSPI_I2SCFGR_I2SCFG_1
))

174 
	#I2S_STANDARD_PHILIPS
 ((
uöt32_t
Ë0x00000000U)

	)

175 
	#I2S_STANDARD_MSB
 ((
uöt32_t
Ë
SPI_I2SCFGR_I2SSTD_0
)

	)

176 
	#I2S_STANDARD_LSB
 ((
uöt32_t
Ë
SPI_I2SCFGR_I2SSTD_1
)

	)

177 
	#I2S_STANDARD_PCM_SHORT
 ((
uöt32_t
)(
SPI_I2SCFGR_I2SSTD_0
 |\

	)

178 
	gSPI_I2SCFGR_I2SSTD_1
))

179 
	#I2S_STANDARD_PCM_LONG
 ((
uöt32_t
)(
SPI_I2SCFGR_I2SSTD_0
 |\

	)

180 
	gSPI_I2SCFGR_I2SSTD_1
 |\

181 
	gSPI_I2SCFGR_PCMSYNC
))

185 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

197 
	#I2S_DATAFORMAT_16B
 ((
uöt32_t
Ë0x00000000U)

	)

198 
	#I2S_DATAFORMAT_16B_EXTENDED
 ((
uöt32_t
Ë
SPI_I2SCFGR_CHLEN
)

	)

199 
	#I2S_DATAFORMAT_24B
 ((
uöt32_t
)(
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_0
))

	)

200 
	#I2S_DATAFORMAT_32B
 ((
uöt32_t
)(
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN_1
))

	)

208 
	#I2S_MCLKOUTPUT_ENABLE
 ((
uöt32_t
)
SPI_I2SPR_MCKOE
)

	)

209 
	#I2S_MCLKOUTPUT_DISABLE
 ((
uöt32_t
)0x00000000U)

	)

217 
	#I2S_AUDIOFREQ_192K
 ((
uöt32_t
)192000U)

	)

218 
	#I2S_AUDIOFREQ_96K
 ((
uöt32_t
)96000U)

	)

219 
	#I2S_AUDIOFREQ_48K
 ((
uöt32_t
)48000U)

	)

220 
	#I2S_AUDIOFREQ_44K
 ((
uöt32_t
)44100U)

	)

221 
	#I2S_AUDIOFREQ_32K
 ((
uöt32_t
)32000U)

	)

222 
	#I2S_AUDIOFREQ_22K
 ((
uöt32_t
)22050U)

	)

223 
	#I2S_AUDIOFREQ_16K
 ((
uöt32_t
)16000U)

	)

224 
	#I2S_AUDIOFREQ_11K
 ((
uöt32_t
)11025U)

	)

225 
	#I2S_AUDIOFREQ_8K
 ((
uöt32_t
)8000U)

	)

226 
	#I2S_AUDIOFREQ_DEFAULT
 ((
uöt32_t
)2U)

	)

234 
	#I2S_CPOL_LOW
 ((
uöt32_t
)0x00000000U)

	)

235 
	#I2S_CPOL_HIGH
 ((
uöt32_t
)
SPI_I2SCFGR_CKPOL
)

	)

243 
	#I2S_IT_TXE
 
SPI_CR2_TXEIE


	)

244 
	#I2S_IT_RXNE
 
SPI_CR2_RXNEIE


	)

245 
	#I2S_IT_ERR
 
SPI_CR2_ERRIE


	)

253 
	#I2S_FLAG_TXE
 
SPI_SR_TXE


	)

254 
	#I2S_FLAG_RXNE
 
SPI_SR_RXNE


	)

256 
	#I2S_FLAG_UDR
 
SPI_SR_UDR


	)

257 
	#I2S_FLAG_OVR
 
SPI_SR_OVR


	)

258 
	#I2S_FLAG_FRE
 
SPI_SR_FRE


	)

260 
	#I2S_FLAG_CHSIDE
 
SPI_SR_CHSIDE


	)

261 
	#I2S_FLAG_BSY
 
SPI_SR_BSY


	)

279 
	#__HAL_I2S_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_I2S_STATE_RESET
)

	)

285 
	#__HAL_I2S_ENABLE
(
__HANDLE__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

	)

291 
	#__HAL_I2S_DISABLE
(
__HANDLE__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

	)

302 
	#__HAL_I2S_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR2
,(__INTERRUPT__)))

	)

313 
	#__HAL_I2S_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR2
,(__INTERRUPT__)))

	)

325 
	#__HAL_I2S_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR2
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

339 
	#__HAL_I2S_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

345 
	#__HAL_I2S_CLEAR_OVRFLAG
(
__HANDLE__
Ëdo{
__IO
 
uöt32_t
 
tm¥eg
 = (__HANDLE__)->
In°™˚
->
DR
;\

	)

346 
	gtm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
;\

347 
UNUSED
(
tm¥eg
);\

353 
	#__HAL_I2S_CLEAR_UDRFLAG
(
__HANDLE__
)((__HANDLE__)->
In°™˚
->
SR
)

	)

367 
HAL_SètusTy≥Def
 
	`HAL_I2S_Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
);

368 
HAL_SètusTy≥Def
 
	`HAL_I2S_DeInô
 (
I2S_H™dÀTy≥Def
 *
hi2s
);

369 
	`HAL_I2S_M•Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
);

370 
	`HAL_I2S_M•DeInô
(
I2S_H™dÀTy≥Def
 *
hi2s
);

380 
HAL_SètusTy≥Def
 
	`HAL_I2S_Tønsmô
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

381 
HAL_SètusTy≥Def
 
	`HAL_I2S_Re˚ive
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

384 
HAL_SètusTy≥Def
 
	`HAL_I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

385 
HAL_SètusTy≥Def
 
	`HAL_I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

386 
	`HAL_I2S_IRQH™dÀr
(
I2S_H™dÀTy≥Def
 *
hi2s
);

389 
HAL_SètusTy≥Def
 
	`HAL_I2S_Tønsmô_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

390 
HAL_SètusTy≥Def
 
	`HAL_I2S_Re˚ive_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

392 
HAL_SètusTy≥Def
 
	`HAL_I2S_DMAPau£
(
I2S_H™dÀTy≥Def
 *
hi2s
);

393 
HAL_SètusTy≥Def
 
	`HAL_I2S_DMAResume
(
I2S_H™dÀTy≥Def
 *
hi2s
);

394 
HAL_SètusTy≥Def
 
	`HAL_I2S_DMASt›
(
I2S_H™dÀTy≥Def
 *
hi2s
);

397 
	`HAL_I2S_TxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

398 
	`HAL_I2S_TxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

399 
	`HAL_I2S_RxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

400 
	`HAL_I2S_RxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

401 
	`HAL_I2S_Eº‹CÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

410 
HAL_I2S_SèãTy≥Def
 
	`HAL_I2S_GëSèã
(
I2S_H™dÀTy≥Def
 *
hi2s
);

411 
uöt32_t
 
	`HAL_I2S_GëEº‹
(
I2S_H™dÀTy≥Def
 *
hi2s
);

424 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_MODE_SLAVE_TX
Ë|| \

	)

425 ((
MODE
Ë=
I2S_MODE_SLAVE_RX
) || \

426 ((
MODE
Ë=
I2S_MODE_MASTER_TX
) || \

427 ((
MODE
Ë=
I2S_MODE_MASTER_RX
))

429 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_STANDARD_PHILIPS
Ë|| \

	)

430 ((
STANDARD
Ë=
I2S_STANDARD_MSB
) || \

431 ((
STANDARD
Ë=
I2S_STANDARD_LSB
) || \

432 ((
STANDARD
Ë=
I2S_STANDARD_PCM_SHORT
) || \

433 ((
STANDARD
Ë=
I2S_STANDARD_PCM_LONG
))

435 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_DATAFORMAT_16B
Ë|| \

	)

436 ((
FORMAT
Ë=
I2S_DATAFORMAT_16B_EXTENDED
) || \

437 ((
FORMAT
Ë=
I2S_DATAFORMAT_24B
) || \

438 ((
FORMAT
Ë=
I2S_DATAFORMAT_32B
))

440 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOUTPUT_ENABLE
Ë|| \

	)

441 ((
OUTPUT
Ë=
I2S_MCLKOUTPUT_DISABLE
))

443 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AUDIOFREQ_8K
Ë&& \

	)

444 ((
FREQ
Ë<
I2S_AUDIOFREQ_192K
)) || \

445 ((
FREQ
Ë=
I2S_AUDIOFREQ_DEFAULT
))

447 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_LOW
Ë|| \

	)

448 ((
CPOL
Ë=
I2S_CPOL_HIGH
))

473 #ifde‡
__˝lu•lus


474 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_pwr.h

37 #i‚de‡
__STM32L0xx_HAL_PWR_H


38 
	#__STM32L0xx_HAL_PWR_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

64 
uöt32_t
 
PVDLevñ
;

67 
uöt32_t
 
Mode
;

69 }
	tPWR_PVDTy≥Def
;

79 
	#PWR_EXTI_LINE_PVD
 
EXTI_FTSR_TR16


	)

92 
	#PWR_WAKEUP_PIN1
 
PWR_CSR_EWUP1


	)

93 
	#PWR_WAKEUP_PIN2
 
PWR_CSR_EWUP2


	)

94 #i‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
Ë|| deföed (
STM32L031xx
Ë|| deföed (
STM32L041xx
Ë|| deföed (
STM32L071xx
) || \

95 
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

96 
	#PWR_WAKEUP_PIN3
 
PWR_CSR_EWUP3


	)

105 
	#PWR_PVDLEVEL_0
 
PWR_CR_PLS_LEV0


	)

106 
	#PWR_PVDLEVEL_1
 
PWR_CR_PLS_LEV1


	)

107 
	#PWR_PVDLEVEL_2
 
PWR_CR_PLS_LEV2


	)

108 
	#PWR_PVDLEVEL_3
 
PWR_CR_PLS_LEV3


	)

109 
	#PWR_PVDLEVEL_4
 
PWR_CR_PLS_LEV4


	)

110 
	#PWR_PVDLEVEL_5
 
PWR_CR_PLS_LEV5


	)

111 
	#PWR_PVDLEVEL_6
 
PWR_CR_PLS_LEV6


	)

112 
	#PWR_PVDLEVEL_7
 
PWR_CR_PLS_LEV7


	)

121 
	#PWR_PVD_MODE_NORMAL
 ((
uöt32_t
)0x00000000UË

	)

122 
	#PWR_PVD_MODE_IT_RISING
 ((
uöt32_t
)0x00010001UË

	)

123 
	#PWR_PVD_MODE_IT_FALLING
 ((
uöt32_t
)0x00010002UË

	)

124 
	#PWR_PVD_MODE_IT_RISING_FALLING
 ((
uöt32_t
)0x00010003UË

	)

125 
	#PWR_PVD_MODE_EVENT_RISING
 ((
uöt32_t
)0x00020001UË

	)

126 
	#PWR_PVD_MODE_EVENT_FALLING
 ((
uöt32_t
)0x00020002UË

	)

127 
	#PWR_PVD_MODE_EVENT_RISING_FALLING
 ((
uöt32_t
)0x00020003UË

	)

136 
	#PWR_MAINREGULATOR_ON
 ((
uöt32_t
)0x00000000U)

	)

137 
	#PWR_LOWPOWERREGULATOR_ON
 
PWR_CR_LPSDSR


	)

146 
	#PWR_SLEEPENTRY_WFI
 ((
uöt8_t
)0x01U)

	)

147 
	#PWR_SLEEPENTRY_WFE
 ((
uöt8_t
)0x02U)

	)

155 
	#PWR_STOPENTRY_WFI
 ((
uöt8_t
)0x01U)

	)

156 
	#PWR_STOPENTRY_WFE
 ((
uöt8_t
)0x02U)

	)

165 
	#PWR_REGULATOR_VOLTAGE_SCALE1
 
PWR_CR_VOS_0


	)

166 
	#PWR_REGULATOR_VOLTAGE_SCALE2
 
PWR_CR_VOS_1


	)

167 
	#PWR_REGULATOR_VOLTAGE_SCALE3
 
PWR_CR_VOS


	)

169 
	#IS_PWR_VOLTAGE_SCALING_RANGE
(
RANGE
Ë(((RANGEË=
PWR_REGULATOR_VOLTAGE_SCALE1
Ë|| \

	)

170 ((
RANGE
Ë=
PWR_REGULATOR_VOLTAGE_SCALE2
) || \

171 ((
RANGE
Ë=
PWR_REGULATOR_VOLTAGE_SCALE3
))

179 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

180 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

181 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

182 
	#PWR_FLAG_VREFINTRDY
 
PWR_CSR_VREFINTRDYF


	)

183 
	#PWR_FLAG_VOS
 
PWR_CSR_VOSF


	)

184 
	#PWR_FLAG_REGLP
 
PWR_CSR_REGLPF


	)

216 
	#__HAL_PWR_VOLTAGESCALING_CONFIG
(
__REGULATOR__
Ë(
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_VOS
, (__REGULATOR__)))

	)

244 
	#__HAL_PWR_GET_FLAG
(
__FLAG__
Ë((
PWR
->
CSR
 & (__FLAG__)Ë=(__FLAG__))

	)

252 
	#__HAL_PWR_CLEAR_FLAG
(
__FLAG__
Ë
	`SET_BIT
(
PWR
->
CR
, (__FLAG__Ë<< 2U)

	)

258 
	#__HAL_PWR_PVD_EXTI_ENABLE_IT
(Ë
	`SET_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

264 
	#__HAL_PWR_PVD_EXTI_DISABLE_IT
(Ë
	`CLEAR_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

270 
	#__HAL_PWR_PVD_EXTI_ENABLE_EVENT
(Ë
	`SET_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

276 
	#__HAL_PWR_PVD_EXTI_DISABLE_EVENT
(Ë
	`CLEAR_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

283 
	#__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

290 
	#__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

297 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

304 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

310 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE
(Ëdÿ{ 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(); } 0);

	)

317 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
(Ëdÿ{ 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(); } 0);

	)

325 
	#__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
PWR_EXTI_LINE_PVD
))

	)

331 
	#__HAL_PWR_PVD_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
PWR_EXTI_LINE_PVD
))

	)

337 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
PWR_EXTI_LINE_PVD
)

	)

343 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
PWR_EXTI_LINE_PVD
)

	)

352 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLEVEL_0
Ë|| ((LEVELË=
PWR_PVDLEVEL_1
)|| \

	)

353 ((
LEVEL
Ë=
PWR_PVDLEVEL_2
Ë|| ((LEVELË=
PWR_PVDLEVEL_3
)|| \

354 ((
LEVEL
Ë=
PWR_PVDLEVEL_4
Ë|| ((LEVELË=
PWR_PVDLEVEL_5
)|| \

355 ((
LEVEL
Ë=
PWR_PVDLEVEL_6
Ë|| ((LEVELË=
PWR_PVDLEVEL_7
))

357 
	#IS_PWR_PVD_MODE
(
MODE
Ë(((MODEË=
PWR_PVD_MODE_IT_RISING
)|| ((MODEË=
PWR_PVD_MODE_IT_FALLING
Ë|| \

	)

358 ((
MODE
Ë=
PWR_PVD_MODE_IT_RISING_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING
) || \

359 ((
MODE
Ë=
PWR_PVD_MODE_EVENT_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING_FALLING
) || \

360 ((
MODE
Ë=
PWR_PVD_MODE_NORMAL
))

362 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

363 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
Ë|| \

	)

364 ((
PIN
Ë=
PWR_WAKEUP_PIN2
) || \

365 ((
PIN
Ë=
PWR_WAKEUP_PIN3
))

366 #ñi‡
deföed
 (
STM32L051xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L053xx
Ë|| deföed (
STM32L061xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L063xx
)

367 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
Ë|| \

	)

368 ((
PIN
Ë=
PWR_WAKEUP_PIN2
))

369 #ñi‡
deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
)

370 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
Ë|| \

	)

371 ((
PIN
Ë=
PWR_WAKEUP_PIN2
))

372 #ñi‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

373 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
Ë|| \

	)

374 ((
PIN
Ë=
PWR_WAKEUP_PIN3
))

377 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MAINREGULATOR_ON
Ë|| \

	)

378 ((
REGULATOR
Ë=
PWR_LOWPOWERREGULATOR_ON
))

379 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPENTRY_WFI
Ë|| ((ENTRYË=
PWR_SLEEPENTRY_WFE
))

	)

381 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPENTRY_WFI
Ë|| ((ENTRYË=
PWR_STOPENTRY_WFE
))

	)

388 
	~"°m32l0xx_hÆ_pwr_ex.h
"

397 
HAL_PWR_DeInô
();

398 
HAL_PWR_E«bÀBkUpAc˚ss
();

399 
HAL_PWR_DißbÀBkUpAc˚ss
();

409 
HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
);

410 
HAL_PWR_E«bÀPVD
();

411 
HAL_PWR_DißbÀPVD
();

412 
HAL_PWR_PVD_IRQH™dÀr
();

413 
HAL_PWR_PVDCÆlback
();

416 
HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

417 
HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

420 
HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
);

421 
HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
);

422 
HAL_PWR_E¡îSTANDBYMode
();

424 
HAL_PWR_E«bÀSÀïOnExô
();

425 
HAL_PWR_DißbÀSÀïOnExô
();

426 
HAL_PWR_E«bÀSEVOnPíd
();

427 
HAL_PWR_DißbÀSEVOnPíd
();

455 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_pwr_ex.h

37 #i‚de‡
__STM32L0xx_HAL_PWR_EX_H


38 
	#__STM32L0xx_HAL_PWR_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

64 
	#__HAL_PWR_FLASHWAKEUP_ENABLE
(Ë
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_DSEEKOFF
)

	)

71 
	#__HAL_PWR_FLASHWAKEUP_DISABLE
(Ë
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DSEEKOFF
)

	)

79 
uöt32_t
 
HAL_PWREx_GëVﬁègeR™ge
();

80 
HAL_PWREx_E«bÀFa°WakeUp
();

81 
HAL_PWREx_DißbÀFa°WakeUp
();

82 
HAL_PWREx_E«bÀU…øLowPowî
();

83 
HAL_PWREx_DißbÀU…øLowPowî
();

84 
HAL_PWREx_E«bÀLowPowîRunMode
();

85 
HAL_SètusTy≥Def
 
HAL_PWREx_DißbÀLowPowîRunMode
();

108 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h

37 #i‚de‡
__STM32L0xx_HAL_RCC_H


38 
	#__STM32L0xx_HAL_RCC_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

64 
	#RCC_DBP_TIMEOUT_VALUE
 (100UË

	)

66 
	#RCC_LSE_TIMEOUT_VALUE
 
LSE_STARTUP_TIMEOUT


	)

67 
	#CLOCKSWITCH_TIMEOUT_VALUE
 (5000UË

	)

68 
	#HSE_TIMEOUT_VALUE
 
HSE_STARTUP_TIMEOUT


	)

69 
	#MSI_TIMEOUT_VALUE
 (2UË

	)

70 
	#HSI_TIMEOUT_VALUE
 (2UË

	)

71 
	#HSI48_TIMEOUT_VALUE
 (2UË

	)

72 
	#LSI_TIMEOUT_VALUE
 (2UË

	)

73 
	#PLL_TIMEOUT_VALUE
 (2UË

	)

74 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

75 
	#HSI48_TIMEOUT_VALUE
 (2UË

	)

86 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

89 
	#RCC_CR_OFFSET
 (
RCC_OFFSET
 + 0x00U)

	)

92 
	#RCC_CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08U)

	)

94 
	#RCC_CSR_OFFSET
 (
RCC_OFFSET
 + 0x74U)

	)

97 
	#RCC_CR_BYTE2_ADDRESS
 (0x40023802U)

	)

100 
	#CIER_BYTE0_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x10U + 0x00U))

	)

107 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

108 
	#CSR_REG_INDEX
 ((
uöt8_t
)2)

	)

109 
	#CRRCR_REG_INDEX
 ((
uöt8_t
)3)

	)

111 
	#RCC_FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

120 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

121 
	#IS_RCC_OSCILLATORTYPE
(
__OSCILLATOR__
Ë(((__OSCILLATOR__Ë=
RCC_OSCILLATORTYPE_NONE
Ë|| \

	)

122 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE) || \

123 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI) || \

124 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSI48
) == RCC_OSCILLATORTYPE_HSI48) || \

125 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI) || \

126 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE) || \

127 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_MSI
) == RCC_OSCILLATORTYPE_MSI))

129 
	#IS_RCC_HSI48
(
__HSI48__
Ë(((__HSI48__Ë=
RCC_HSI48_OFF
Ë|| ((__HSI48__Ë=
RCC_HSI48_ON
))

	)

131 
	#IS_RCC_OSCILLATORTYPE
(
__OSCILLATOR__
Ë(((__OSCILLATOR__Ë=
RCC_OSCILLATORTYPE_NONE
Ë|| \

	)

132 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE) || \

133 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI) || \

134 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI) || \

135 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE) || \

136 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_MSI
) == RCC_OSCILLATORTYPE_MSI))

138 
	#IS_RCC_PLLSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PLLSOURCE_HSI
Ë|| \

	)

139 ((
__SOURCE__
Ë=
RCC_PLLSOURCE_HSE
))

140 
	#IS_RCC_HSE
(
__HSE__
Ë(((__HSE__Ë=
RCC_HSE_OFF
Ë|| ((__HSE__Ë=
RCC_HSE_ON
Ë|| \

	)

141 ((
__HSE__
Ë=
RCC_HSE_BYPASS
))

142 
	#IS_RCC_LSE
(
__LSE__
Ë(((__LSE__Ë=
RCC_LSE_OFF
Ë|| ((__LSE__Ë=
RCC_LSE_ON
Ë|| \

	)

143 ((
__LSE__
Ë=
RCC_LSE_BYPASS
))

144 #i‡
deföed
(
RCC_CR_HSIOUTEN
)

145 
	#IS_RCC_HSI
(
__HSI__
Ë(((__HSI__Ë=
RCC_HSI_OFF
Ë|| ((__HSI__Ë=
RCC_HSI_ON
Ë|| \

	)

146 ((
__HSI__
Ë=
RCC_HSI_DIV4
Ë|| ((__HSI__Ë=
RCC_HSI_OUTEN
 ))

148 
	#IS_RCC_HSI
(
__HSI__
Ë(((__HSI__Ë=
RCC_HSI_OFF
Ë|| ((__HSI__Ë=
RCC_HSI_ON
Ë|| \

	)

149 ((
__HSI__
Ë=
RCC_HSI_DIV4
))

151 
	#IS_RCC_CALIBRATION_VALUE
(
__VALUE__
Ë((__VALUE__Ë<0x1F)

	)

152 
	#IS_RCC_MSICALIBRATION_VALUE
(
__VALUE__
Ë((__VALUE__Ë<0xFF)

	)

153 
	#IS_RCC_MSI_CLOCK_RANGE
(
__RANGE__
Ë(((__RANGE__Ë=
RCC_MSIRANGE_0
Ë|| \

	)

154 ((
__RANGE__
Ë=
RCC_MSIRANGE_1
) || \

155 ((
__RANGE__
Ë=
RCC_MSIRANGE_2
) || \

156 ((
__RANGE__
Ë=
RCC_MSIRANGE_3
) || \

157 ((
__RANGE__
Ë=
RCC_MSIRANGE_4
) || \

158 ((
__RANGE__
Ë=
RCC_MSIRANGE_5
) || \

159 ((
__RANGE__
Ë=
RCC_MSIRANGE_6
))

160 
	#IS_RCC_LSI
(
__LSI__
Ë(((__LSI__Ë=
RCC_LSI_OFF
Ë|| ((__LSI__Ë=
RCC_LSI_ON
))

	)

161 
	#IS_RCC_MSI
(
__MSI__
Ë(((__MSI__Ë=
RCC_MSI_OFF
Ë|| ((__MSI__Ë=
RCC_MSI_ON
))

	)

163 
	#IS_RCC_PLL
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL_NONE
Ë|| ((__PLL__Ë=
RCC_PLL_OFF
Ë|| \

	)

164 ((
__PLL__
Ë=
RCC_PLL_ON
))

165 
	#IS_RCC_PLL_DIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_PLL_DIV2
Ë|| \

	)

166 ((
__DIV__
Ë=
RCC_PLL_DIV3
Ë|| ((__DIV__Ë=
RCC_PLL_DIV4
))

168 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL3
Ë|| ((__MUL__Ë=
RCC_PLL_MUL4
Ë|| \

	)

169 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL8
) || \

170 ((
__MUL__
Ë=
RCC_PLL_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL_MUL16
) || \

171 ((
__MUL__
Ë=
RCC_PLL_MUL24
Ë|| ((__MUL__Ë=
RCC_PLL_MUL32
) || \

172 ((
__MUL__
Ë=
RCC_PLL_MUL48
))

173 
	#IS_RCC_CLOCKTYPE
(
CLK
Ë((((CLKË& 
RCC_CLOCKTYPE_SYSCLK
Ë=RCC_CLOCKTYPE_SYSCLKË|| \

	)

174 (((
CLK
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK) || \

175 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1) || \

176 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2))

177 
	#IS_RCC_SYSCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_MSI
Ë|| \

	)

178 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_HSI
) || \

179 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_HSE
) || \

180 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_PLLCLK
))

181 
	#IS_RCC_SYSCLKSOURCE_STATUS
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_STATUS_MSI
Ë|| \

	)

182 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
) || \

183 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
) || \

184 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
))

185 
	#IS_RCC_HCLK
(
__HCLK__
Ë(((__HCLK__Ë=
RCC_SYSCLK_DIV1
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV2
Ë|| \

	)

186 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV4
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV8
) || \

187 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV16
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV64
) || \

188 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV128
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV256
) || \

189 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV512
))

190 
	#IS_RCC_PCLK
(
__PCLK__
Ë(((__PCLK__Ë=
RCC_HCLK_DIV1
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV2
Ë|| \

	)

191 ((
__PCLK__
Ë=
RCC_HCLK_DIV4
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV8
) || \

192 ((
__PCLK__
Ë=
RCC_HCLK_DIV16
))

193 #i‡ 
deföed
(
STM32L031xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

194 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

195 
	#IS_RCC_MCO
(
__MCO__
Ë(((__MCO__Ë=
RCC_MCO1
Ë|| ((__MCO__Ë=
RCC_MCO2
Ë|| ((__MCO__Ë=
RCC_MCO3
))

	)

197 
	#IS_RCC_MCO
(
__MCO__
Ë(((__MCO__Ë=
RCC_MCO1
Ë|| ((__MCO__Ë=
RCC_MCO2
))

	)

200 
	#IS_RCC_MCODIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_MCODIV_1
Ë|| ((__DIV__Ë=
RCC_MCODIV_2
Ë|| \

	)

201 ((
__DIV__
Ë=
RCC_MCODIV_4
Ë|| ((__DIV__Ë=
RCC_MCODIV_8
) || \

202 ((
__DIV__
Ë=
RCC_MCODIV_16
))

203 #i‡
deföed
(
RCC_CFGR_MCOSEL_HSI48
)

204 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_NOCLOCK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| \

	)

205 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSI
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_MSI
) || \

206 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) || \

207 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_LSI
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_LSE
) || \

208 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSI48
))

210 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_NOCLOCK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| \

	)

211 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSI
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_MSI
) || \

212 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) || \

213 ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_LSI
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_LSE
))

215 
	#IS_RCC_RTCCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_RTCCLKSOURCE_NO_CLK
Ë|| \

	)

216 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSE
) || \

217 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSI
) || \

218 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV2
) || \

219 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV4
) || \

220 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV8
) || \

221 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV16
))

238 
uöt32_t
 
PLLSèã
;

241 
uöt32_t
 
PLLSour˚
;

244 
uöt32_t
 
PLLMUL
;

247 
uöt32_t
 
PLLDIV
;

249 } 
	tRCC_PLLInôTy≥Def
;

256 
uöt32_t
 
Oscûœt‹Ty≥
;

259 
uöt32_t
 
HSESèã
;

262 
uöt32_t
 
LSESèã
;

265 
uöt32_t
 
HSISèã
;

268 
uöt32_t
 
HSICÆibøti⁄VÆue
;

271 
uöt32_t
 
LSISèã
;

274 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

275 
uöt32_t
 
HSI48Sèã
;

279 
uöt32_t
 
MSISèã
;

282 
uöt32_t
 
MSICÆibøti⁄VÆue
;

285 
uöt32_t
 
MSIClockR™ge
;

288 
RCC_PLLInôTy≥Def
 
PLL
;

290 } 
	tRCC_OscInôTy≥Def
;

297 
uöt32_t
 
ClockTy≥
;

300 
uöt32_t
 
SYSCLKSour˚
;

303 
uöt32_t
 
AHBCLKDividî
;

306 
uöt32_t
 
APB1CLKDividî
;

309 
uöt32_t
 
APB2CLKDividî
;

311 } 
	tRCC_ClkInôTy≥Def
;

326 
	#RCC_PLLSOURCE_HSI
 
RCC_CFGR_PLLSRC_HSI


	)

327 
	#RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC_HSE


	)

336 
	#RCC_OSCILLATORTYPE_NONE
 ((
uöt32_t
)0x00000000)

	)

337 
	#RCC_OSCILLATORTYPE_HSE
 ((
uöt32_t
)0x00000001)

	)

338 
	#RCC_OSCILLATORTYPE_HSI
 ((
uöt32_t
)0x00000002)

	)

339 
	#RCC_OSCILLATORTYPE_LSE
 ((
uöt32_t
)0x00000004)

	)

340 
	#RCC_OSCILLATORTYPE_LSI
 ((
uöt32_t
)0x00000008)

	)

341 
	#RCC_OSCILLATORTYPE_MSI
 ((
uöt32_t
)0x00000010)

	)

342 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

343 
	#RCC_OSCILLATORTYPE_HSI48
 ((
uöt32_t
)0x00000020)

	)

352 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000Ë

	)

353 
	#RCC_HSE_ON
 
RCC_CR_HSEON


	)

354 
	#RCC_HSE_BYPASS
 ((
uöt32_t
)(
RCC_CR_HSEBYP
 | 
RCC_CR_HSEON
)Ë

	)

362 
	#RCC_LSE_OFF
 ((
uöt32_t
)0x00000000Ë

	)

363 
	#RCC_LSE_ON
 
RCC_CSR_LSEON


	)

364 
	#RCC_LSE_BYPASS
 ((
uöt32_t
)(
RCC_CSR_LSEBYP
 | 
RCC_CSR_LSEON
)Ë

	)

373 
	#RCC_HSI_OFF
 ((
uöt32_t
)0x00000000Ë

	)

374 
	#RCC_HSI_ON
 
RCC_CR_HSION


	)

375 
	#RCC_HSI_DIV4
 (
RCC_CR_HSIDIVEN
 | 
RCC_CR_HSION
Ë

	)

376 #i‡
deföed
(
RCC_CR_HSIOUTEN
)

377 
	#RCC_HSI_OUTEN
 
RCC_CR_HSIOUTEN


	)

380 
	#RCC_HSICALIBRATION_DEFAULT
 ((
uöt32_t
)0x10Ë

	)

390 
	#RCC_MSIRANGE_0
 
RCC_ICSCR_MSIRANGE_0


	)

391 
	#RCC_MSIRANGE_1
 
RCC_ICSCR_MSIRANGE_1


	)

392 
	#RCC_MSIRANGE_2
 
RCC_ICSCR_MSIRANGE_2


	)

393 
	#RCC_MSIRANGE_3
 
RCC_ICSCR_MSIRANGE_3


	)

394 
	#RCC_MSIRANGE_4
 
RCC_ICSCR_MSIRANGE_4


	)

395 
	#RCC_MSIRANGE_5
 
RCC_ICSCR_MSIRANGE_5


	)

396 
	#RCC_MSIRANGE_6
 
RCC_ICSCR_MSIRANGE_6


	)

405 
	#RCC_LSI_OFF
 ((
uöt32_t
)0x00000000Ë

	)

406 
	#RCC_LSI_ON
 
RCC_CSR_LSION


	)

415 
	#RCC_MSI_OFF
 ((
uöt32_t
)0x00000000)

	)

416 
	#RCC_MSI_ON
 ((
uöt32_t
)0x00000001)

	)

418 
	#RCC_MSICALIBRATION_DEFAULT
 ((
uöt32_t
)0x00000000UË

	)

424 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

428 
	#RCC_HSI48_OFF
 ((
uöt8_t
)0x00)

	)

429 
	#RCC_HSI48_ON
 ((
uöt8_t
)0x01)

	)

439 
	#RCC_PLL_NONE
 ((
uöt32_t
)0x00000000Ë

	)

440 
	#RCC_PLL_OFF
 ((
uöt32_t
)0x00000001Ë

	)

441 
	#RCC_PLL_ON
 ((
uöt32_t
)0x00000002Ë

	)

450 
	#RCC_CLOCKTYPE_SYSCLK
 ((
uöt32_t
)0x00000001Ë

	)

451 
	#RCC_CLOCKTYPE_HCLK
 ((
uöt32_t
)0x00000002Ë

	)

452 
	#RCC_CLOCKTYPE_PCLK1
 ((
uöt32_t
)0x00000004Ë

	)

453 
	#RCC_CLOCKTYPE_PCLK2
 ((
uöt32_t
)0x00000008Ë

	)

462 
	#RCC_SYSCLKSOURCE_MSI
 
RCC_CFGR_SW_MSI


	)

463 
	#RCC_SYSCLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

464 
	#RCC_SYSCLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

465 
	#RCC_SYSCLKSOURCE_PLLCLK
 
RCC_CFGR_SW_PLL


	)

474 
	#RCC_SYSCLKSOURCE_STATUS_MSI
 
RCC_CFGR_SWS_MSI


	)

475 
	#RCC_SYSCLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

476 
	#RCC_SYSCLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

477 
	#RCC_SYSCLKSOURCE_STATUS_PLLCLK
 
RCC_CFGR_SWS_PLL


	)

486 
	#RCC_SYSCLK_DIV1
 
RCC_CFGR_HPRE_DIV1


	)

487 
	#RCC_SYSCLK_DIV2
 
RCC_CFGR_HPRE_DIV2


	)

488 
	#RCC_SYSCLK_DIV4
 
RCC_CFGR_HPRE_DIV4


	)

489 
	#RCC_SYSCLK_DIV8
 
RCC_CFGR_HPRE_DIV8


	)

490 
	#RCC_SYSCLK_DIV16
 
RCC_CFGR_HPRE_DIV16


	)

491 
	#RCC_SYSCLK_DIV64
 
RCC_CFGR_HPRE_DIV64


	)

492 
	#RCC_SYSCLK_DIV128
 
RCC_CFGR_HPRE_DIV128


	)

493 
	#RCC_SYSCLK_DIV256
 
RCC_CFGR_HPRE_DIV256


	)

494 
	#RCC_SYSCLK_DIV512
 
RCC_CFGR_HPRE_DIV512


	)

503 
	#RCC_HCLK_DIV1
 
RCC_CFGR_PPRE1_DIV1


	)

504 
	#RCC_HCLK_DIV2
 
RCC_CFGR_PPRE1_DIV2


	)

505 
	#RCC_HCLK_DIV4
 
RCC_CFGR_PPRE1_DIV4


	)

506 
	#RCC_HCLK_DIV8
 
RCC_CFGR_PPRE1_DIV8


	)

507 
	#RCC_HCLK_DIV16
 
RCC_CFGR_PPRE1_DIV16


	)

516 
	#RCC_RTC_HSE_DIV_2
 (
uöt32_t
)0x00000000U

	)

517 
	#RCC_RTC_HSE_DIV_4
 
RCC_CR_RTCPRE_0


	)

518 
	#RCC_RTC_HSE_DIV_8
 
RCC_CR_RTCPRE_1


	)

519 
	#RCC_RTC_HSE_DIV_16
 
RCC_CR_RTCPRE


	)

527 
	#RCC_RTCCLKSOURCE_NO_CLK
 ((
uöt32_t
)0x00000000Ë

	)

528 
	#RCC_RTCCLKSOURCE_LSE
 
RCC_CSR_RTCSEL_LSE


	)

529 
	#RCC_RTCCLKSOURCE_LSI
 
RCC_CSR_RTCSEL_LSI


	)

530 
	#RCC_RTCCLKSOURCE_HSE_DIVX
 
RCC_CSR_RTCSEL_HSE


	)

531 
	#RCC_RTCCLKSOURCE_HSE_DIV2
 (
RCC_RTC_HSE_DIV_2
 | 
RCC_CSR_RTCSEL_HSE
Ë

	)

532 
	#RCC_RTCCLKSOURCE_HSE_DIV4
 (
RCC_RTC_HSE_DIV_4
 | 
RCC_CSR_RTCSEL_HSE
Ë

	)

533 
	#RCC_RTCCLKSOURCE_HSE_DIV8
 (
RCC_RTC_HSE_DIV_8
 | 
RCC_CSR_RTCSEL_HSE
Ë

	)

534 
	#RCC_RTCCLKSOURCE_HSE_DIV16
 (
RCC_RTC_HSE_DIV_16
 | 
RCC_CSR_RTCSEL_HSE
Ë

	)

543 
	#RCC_PLL_DIV2
 
RCC_CFGR_PLLDIV2


	)

544 
	#RCC_PLL_DIV3
 
RCC_CFGR_PLLDIV3


	)

545 
	#RCC_PLL_DIV4
 
RCC_CFGR_PLLDIV4


	)

555 
	#RCC_PLL_MUL3
 
RCC_CFGR_PLLMUL3


	)

556 
	#RCC_PLL_MUL4
 
RCC_CFGR_PLLMUL4


	)

557 
	#RCC_PLL_MUL6
 
RCC_CFGR_PLLMUL6


	)

558 
	#RCC_PLL_MUL8
 
RCC_CFGR_PLLMUL8


	)

559 
	#RCC_PLL_MUL12
 
RCC_CFGR_PLLMUL12


	)

560 
	#RCC_PLL_MUL16
 
RCC_CFGR_PLLMUL16


	)

561 
	#RCC_PLL_MUL24
 
RCC_CFGR_PLLMUL24


	)

562 
	#RCC_PLL_MUL32
 
RCC_CFGR_PLLMUL32


	)

563 
	#RCC_PLL_MUL48
 
RCC_CFGR_PLLMUL48


	)

572 
	#RCC_MCO1
 ((
uöt32_t
)0x00000000)

	)

573 
	#RCC_MCO2
 ((
uöt32_t
)0x00000001)

	)

574 #i‡ 
deföed
(
STM32L031xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

575 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

576 
	#RCC_MCO3
 ((
uöt32_t
)0x00000002)

	)

586 
	#RCC_MCODIV_1
 
RCC_CFGR_MCO_PRE_1


	)

587 
	#RCC_MCODIV_2
 
RCC_CFGR_MCO_PRE_2


	)

588 
	#RCC_MCODIV_4
 
RCC_CFGR_MCO_PRE_4


	)

589 
	#RCC_MCODIV_8
 
RCC_CFGR_MCO_PRE_8


	)

590 
	#RCC_MCODIV_16
 
RCC_CFGR_MCO_PRE_16


	)

599 
	#RCC_MCO1SOURCE_NOCLOCK
 
RCC_CFGR_MCO_NOCLOCK


	)

600 
	#RCC_MCO1SOURCE_SYSCLK
 
RCC_CFGR_MCO_SYSCLK


	)

601 
	#RCC_MCO1SOURCE_MSI
 
RCC_CFGR_MCO_MSI


	)

602 
	#RCC_MCO1SOURCE_HSI
 
RCC_CFGR_MCO_HSI


	)

603 
	#RCC_MCO1SOURCE_LSE
 
RCC_CFGR_MCO_LSE


	)

604 
	#RCC_MCO1SOURCE_LSI
 
RCC_CFGR_MCO_LSI


	)

605 
	#RCC_MCO1SOURCE_HSE
 
RCC_CFGR_MCO_HSE


	)

606 
	#RCC_MCO1SOURCE_PLLCLK
 
RCC_CFGR_MCO_PLL


	)

607 #i‡
deföed
(
RCC_CFGR_MCOSEL_HSI48
)

608 
	#RCC_MCO1SOURCE_HSI48
 
RCC_CFGR_MCO_HSI48


	)

617 
	#RCC_IT_LSIRDY
 
RCC_CIFR_LSIRDYF


	)

618 
	#RCC_IT_LSERDY
 
RCC_CIFR_LSERDYF


	)

619 
	#RCC_IT_HSIRDY
 
RCC_CIFR_HSIRDYF


	)

620 
	#RCC_IT_HSERDY
 
RCC_CIFR_HSERDYF


	)

621 
	#RCC_IT_PLLRDY
 
RCC_CIFR_PLLRDYF


	)

622 
	#RCC_IT_MSIRDY
 
RCC_CIFR_MSIRDYF


	)

623 
	#RCC_IT_LSECSS
 
RCC_CIFR_CSSLSEF


	)

624 #i‡
deföed
(
RCC_HSECSS_SUPPORT
)

625 
	#RCC_IT_CSS
 
RCC_CIFR_CSSHSEF


	)

627 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

628 
	#RCC_IT_HSI48RDY
 
RCC_CIFR_HSI48RDYF


	)

645 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 2)Ë

	)

646 
	#RCC_FLAG_HSIDIV
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 4)Ë

	)

647 
	#RCC_FLAG_MSIRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 9)Ë

	)

648 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 17)Ë

	)

649 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 25)Ë

	)

651 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 1)Ë

	)

652 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 9)Ë

	)

653 
	#RCC_FLAG_LSECSS
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 14)Ë

	)

654 
	#RCC_FLAG_OBLRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 25)Ë

	)

655 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 26)Ë

	)

656 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 27)Ë

	)

657 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 28)Ë

	)

658 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 29)Ë

	)

659 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 30)Ë

	)

660 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 31)Ë

	)

661 #i‡
deföed
(
RCC_CSR_FWRSTF
)

662 
	#RCC_FLAG_FWRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 8)Ë

	)

665 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

666 
	#RCC_FLAG_HSI48RDY
 ((
uöt8_t
)((
CRRCR_REG_INDEX
 << 5Ë| 1)Ë

	)

690 
	#__HAL_RCC_DMA1_CLK_ENABLE
(Ëdÿ{ \

	)

691 
__IO
 
uöt32_t
 
tm¥eg
; \

692 
SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

694 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

695 
UNUSED
(
tm¥eg
); \

698 
	#__HAL_RCC_MIF_CLK_ENABLE
(Ëdÿ{ \

	)

699 
__IO
 
uöt32_t
 
tm¥eg
; \

700 
SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_MIFEN
);\

702 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_MIFEN
);\

703 
UNUSED
(
tm¥eg
); \

706 
	#__HAL_RCC_CRC_CLK_ENABLE
(Ëdÿ{ \

	)

707 
__IO
 
uöt32_t
 
tm¥eg
; \

708 
SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

710 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

711 
UNUSED
(
tm¥eg
); \

715 
	#__HAL_RCC_DMA1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
)

	)

716 
	#__HAL_RCC_MIF_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_MIFEN
)

	)

717 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
)

	)

730 
	#__HAL_RCC_GPIOA_CLK_ENABLE
(Ëdÿ{ \

	)

731 
__IO
 
uöt32_t
 
tm¥eg
; \

732 
SET_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOAEN
);\

734 
tm¥eg
 = 
READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOAEN
);\

735 
UNUSED
(
tm¥eg
); \

738 
	#__HAL_RCC_GPIOB_CLK_ENABLE
(Ëdÿ{ \

	)

739 
__IO
 
uöt32_t
 
tm¥eg
; \

740 
SET_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOBEN
);\

742 
tm¥eg
 = 
READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOBEN
);\

743 
UNUSED
(
tm¥eg
); \

746 
	#__HAL_RCC_GPIOC_CLK_ENABLE
(Ëdÿ{ \

	)

747 
__IO
 
uöt32_t
 
tm¥eg
; \

748 
SET_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOCEN
);\

750 
tm¥eg
 = 
READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOCEN
);\

751 
UNUSED
(
tm¥eg
); \

754 
	#__HAL_RCC_GPIOH_CLK_ENABLE
(Ëdÿ{ \

	)

755 
__IO
 
uöt32_t
 
tm¥eg
; \

756 
SET_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOHEN
);\

758 
tm¥eg
 = 
READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOHEN
);\

759 
UNUSED
(
tm¥eg
); \

763 
	#__HAL_RCC_GPIOA_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOAEN
)

	)

764 
	#__HAL_RCC_GPIOB_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOBEN
)

	)

765 
	#__HAL_RCC_GPIOC_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOCEN
)

	)

766 
	#__HAL_RCC_GPIOH_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOHEN
)

	)

779 
	#__HAL_RCC_WWDG_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_WWDGEN
))

	)

780 
	#__HAL_RCC_PWR_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_PWREN
))

	)

782 
	#__HAL_RCC_WWDG_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_WWDGEN
))

	)

783 
	#__HAL_RCC_PWR_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_PWREN
))

	)

795 
	#__HAL_RCC_SYSCFG_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_SYSCFGEN
))

	)

796 
	#__HAL_RCC_DBGMCU_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_DBGMCUEN
))

	)

798 
	#__HAL_RCC_SYSCFG_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_SYSCFGEN
))

	)

799 
	#__HAL_RCC_DBGMCU_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_DBGMCUEN
))

	)

812 
	#__HAL_RCC_DMA1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
Ë!
RESET
)

	)

813 
	#__HAL_RCC_MIF_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_MIFEN
Ë!
RESET
)

	)

814 
	#__HAL_RCC_CRC_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
Ë!
RESET
)

	)

815 
	#__HAL_RCC_DMA1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
Ë=
RESET
)

	)

816 
	#__HAL_RCC_MIF_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_MIFEN
Ë=
RESET
)

	)

817 
	#__HAL_RCC_CRC_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
Ë=
RESET
)

	)

831 
	#__HAL_RCC_GPIOA_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOAEN
Ë!
RESET
)

	)

832 
	#__HAL_RCC_GPIOB_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOBEN
Ë!
RESET
)

	)

833 
	#__HAL_RCC_GPIOC_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOCEN
Ë!
RESET
)

	)

834 
	#__HAL_RCC_GPIOH_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOHEN
Ë!
RESET
)

	)

835 
	#__HAL_RCC_GPIOA_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOAEN
Ë=
RESET
)

	)

836 
	#__HAL_RCC_GPIOB_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOBEN
Ë=
RESET
)

	)

837 
	#__HAL_RCC_GPIOC_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOCEN
Ë=
RESET
)

	)

838 
	#__HAL_RCC_GPIOH_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOHEN
Ë=
RESET
)

	)

851 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
Ë!
RESET
)

	)

852 
	#__HAL_RCC_PWR_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
Ë!
RESET
)

	)

853 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
Ë=
RESET
)

	)

854 
	#__HAL_RCC_PWR_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
Ë=
RESET
)

	)

867 
	#__HAL_RCC_SYSCFG_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SYSCFGEN
Ë!
RESET
)

	)

868 
	#__HAL_RCC_DBGMCU_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_DBGMCUEN
Ë!
RESET
)

	)

869 
	#__HAL_RCC_SYSCFG_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SYSCFGEN
Ë=
RESET
)

	)

870 
	#__HAL_RCC_DBGMCU_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_DBGMCUEN
Ë=
RESET
)

	)

880 
	#__HAL_RCC_AHB_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0xFFFFFFFFU)

	)

881 
	#__HAL_RCC_DMA1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_DMA1RST
))

	)

882 
	#__HAL_RCC_MIF_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_MIFRST
))

	)

883 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_CRCRST
))

	)

885 
	#__HAL_RCC_AHB_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0x00000000U)

	)

886 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_CRCRST
))

	)

887 
	#__HAL_RCC_DMA1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_DMA1RST
))

	)

888 
	#__HAL_RCC_MIF_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_MIFRST
))

	)

897 
	#__HAL_RCC_IOP_FORCE_RESET
(Ë(
RCC
->
IOPRSTR
 = 0xFFFFFFFFU)

	)

898 
	#__HAL_RCC_GPIOA_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOARST
))

	)

899 
	#__HAL_RCC_GPIOB_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOBRST
))

	)

900 
	#__HAL_RCC_GPIOC_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOCRST
))

	)

901 
	#__HAL_RCC_GPIOH_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOHRST
))

	)

903 
	#__HAL_RCC_IOP_RELEASE_RESET
(Ë(
RCC
->
IOPRSTR
 = 0x00000000U)

	)

904 
	#__HAL_RCC_GPIOA_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOARST
))

	)

905 
	#__HAL_RCC_GPIOB_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOBRST
))

	)

906 
	#__HAL_RCC_GPIOC_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOCRST
))

	)

907 
	#__HAL_RCC_GPIOH_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOHRST
))

	)

917 
	#__HAL_RCC_APB1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0xFFFFFFFFU)

	)

918 
	#__HAL_RCC_WWDG_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_WWDGRST
))

	)

919 
	#__HAL_RCC_PWR_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_PWRRST
))

	)

921 
	#__HAL_RCC_APB1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0x00000000U)

	)

922 
	#__HAL_RCC_WWDG_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_WWDGRST
))

	)

923 
	#__HAL_RCC_PWR_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_PWRRST
))

	)

933 
	#__HAL_RCC_APB2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFFU)

	)

934 
	#__HAL_RCC_DBGMCU_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_DBGMCURST
))

	)

935 
	#__HAL_RCC_SYSCFG_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_SYSCFGRST
))

	)

937 
	#__HAL_RCC_APB2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0x00000000U)

	)

938 
	#__HAL_RCC_DBGMCU_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_DBGMCURST
))

	)

939 
	#__HAL_RCC_SYSCFG_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_SYSCFGRST
))

	)

953 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_CRCSMEN
))

	)

954 
	#__HAL_RCC_MIF_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_MIFSMEN
))

	)

955 
	#__HAL_RCC_SRAM_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_SRAMSMEN
))

	)

956 
	#__HAL_RCC_DMA1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_DMA1SMEN
))

	)

958 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_CRCSMEN
))

	)

959 
	#__HAL_RCC_MIF_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_MIFSMEN
))

	)

960 
	#__HAL_RCC_SRAM_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_SRAMSMEN
))

	)

961 
	#__HAL_RCC_DMA1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_DMA1SMEN
))

	)

975 
	#__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOASMEN
))

	)

976 
	#__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOBSMEN
))

	)

977 
	#__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOCSMEN
))

	)

978 
	#__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOHSMEN
))

	)

980 
	#__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOASMEN
))

	)

981 
	#__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOBSMEN
))

	)

982 
	#__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOCSMEN
))

	)

983 
	#__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOHSMEN
))

	)

996 
	#__HAL_RCC_WWDG_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_WWDGSMEN
))

	)

997 
	#__HAL_RCC_PWR_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_PWRSMEN
))

	)

999 
	#__HAL_RCC_WWDG_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_WWDGSMEN
))

	)

1000 
	#__HAL_RCC_PWR_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_PWRSMEN
))

	)

1014 
	#__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_SYSCFGSMEN
))

	)

1015 
	#__HAL_RCC_DBGMCU_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_DBGMCUSMEN
))

	)

1017 
	#__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_SYSCFGSMEN
))

	)

1018 
	#__HAL_RCC_DBGMCU_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_DBGMCUSMEN
))

	)

1032 
	#__HAL_RCC_CRC_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_CRCSMEN
Ë!
RESET
)

	)

1033 
	#__HAL_RCC_MIF_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_MIFSMEN
Ë!
RESET
)

	)

1034 
	#__HAL_RCC_SRAM_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_SRAMSMEN
Ë!
RESET
)

	)

1035 
	#__HAL_RCC_DMA1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_DMA1SMEN
Ë!
RESET
)

	)

1036 
	#__HAL_RCC_CRC_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_CRCSMEN
Ë=
RESET
)

	)

1037 
	#__HAL_RCC_MIF_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_MIFSMEN
Ë=
RESET
)

	)

1038 
	#__HAL_RCC_SRAM_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_SRAMSMEN
Ë=
RESET
)

	)

1039 
	#__HAL_RCC_DMA1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_DMA1SMEN
Ë=
RESET
)

	)

1053 
	#__HAL_RCC_GPIOA_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOASMEN
Ë!
RESET
)

	)

1054 
	#__HAL_RCC_GPIOB_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOBSMEN
Ë!
RESET
)

	)

1055 
	#__HAL_RCC_GPIOC_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOCSMEN
Ë!
RESET
)

	)

1056 
	#__HAL_RCC_GPIOH_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOHSMEN
Ë!
RESET
)

	)

1057 
	#__HAL_RCC_GPIOA_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOASMEN
Ë=
RESET
)

	)

1058 
	#__HAL_RCC_GPIOB_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOBSMEN
Ë=
RESET
)

	)

1059 
	#__HAL_RCC_GPIOC_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOCSMEN
Ë=
RESET
)

	)

1060 
	#__HAL_RCC_GPIOH_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOHSMEN
Ë=
RESET
)

	)

1074 
	#__HAL_RCC_WWDG_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_WWDGSMEN
Ë!
RESET
)

	)

1075 
	#__HAL_RCC_PWR_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_PWRSMEN
Ë!
RESET
)

	)

1076 
	#__HAL_RCC_WWDG_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_WWDGSMEN
Ë=
RESET
)

	)

1077 
	#__HAL_RCC_PWR_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_PWRSMEN
Ë=
RESET
)

	)

1091 
	#__HAL_RCC_SYSCFG_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_SYSCFGSMEN
Ë!
RESET
)

	)

1092 
	#__HAL_RCC_DBGMCU_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_DBGMCUSMEN
Ë!
RESET
)

	)

1093 
	#__HAL_RCC_SYSCFG_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_SYSCFGSMEN
Ë=
RESET
)

	)

1094 
	#__HAL_RCC_DBGMCU_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_DBGMCUSMEN
Ë=
RESET
)

	)

1119 
	#__HAL_RCC_HSI_CONFIG
(
__STATE__
Ë\

	)

1120 
MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSION
 | 
RCC_CR_HSIDIVEN
 , (
uöt32_t
)(
__STATE__
))

1136 
	#__HAL_RCC_HSI_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
)

	)

1137 
	#__HAL_RCC_HSI_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
)

	)

1146 
	#__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
_HSICALIBRATIONVALUE_
Ë\

	)

1147 (
MODIFY_REG
(
RCC
->
ICSCR
, 
RCC_ICSCR_HSITRIM
, (
uöt32_t
)(
_HSICALIBRATIONVALUE_
) << 8))

1162 
	#__HAL_RCC_LSI_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSION
)

	)

1169 
	#__HAL_RCC_LSI_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSION
)

	)

1201 
	#__HAL_RCC_HSE_CONFIG
(
__STATE__
Ë\

	)

1203 
__IO
 
uöt32_t
 
tm¥eg
; \

1204 i‡((
__STATE__
Ë=
RCC_HSE_ON
) \

1206 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

1208 i‡((
__STATE__
Ë=
RCC_HSE_BYPASS
) \

1210 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

1211 
SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

1215 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

1217 
tm¥eg
 = 
READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

1218 
UNUSED
(
tm¥eg
); \

1219 
CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

1248 
	#__HAL_RCC_LSE_CONFIG
(
__STATE__
Ë\

	)

1250 i‡((
__STATE__
Ë=
RCC_LSE_ON
) \

1252 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEON
); \

1254 i‡((
__STATE__
Ë=
RCC_LSE_OFF
) \

1256 
CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEON
); \

1257 
CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEBYP
); \

1259 i‡((
__STATE__
Ë=
RCC_LSE_BYPASS
) \

1261 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEBYP
); \

1262 
SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEON
); \

1266 
CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEON
); \

1267 
CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSEBYP
); \

1284 
	#__HAL_RCC_MSI_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_MSION
)

	)

1297 
	#__HAL_RCC_MSI_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_MSION
)

	)

1308 
	#__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
_MSICALIBRATIONVALUE_
Ë\

	)

1309 (
MODIFY_REG
(
RCC
->
ICSCR
, 
RCC_ICSCR_MSITRIM
, (
uöt32_t
)(
_MSICALIBRATIONVALUE_
) << 24))

1326 
	#__HAL_RCC_MSI_RANGE_CONFIG
(
_MSIRANGEVALUE_
Ë(
	`MODIFY_REG
(
RCC
->
ICSCR
, \

	)

1327 
RCC_ICSCR_MSIRANGE
, (
uöt32_t
)(
_MSIRANGEVALUE_
)))

1340 
	#__HAL_RCC_GET_MSI_RANGE
(Ë(
uöt32_t
)(
	`READ_BIT
(
RCC
->
ICSCR
, 
RCC_ICSCR_MSIRANGE
))

	)

1356 
	#__HAL_RCC_PLL_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
)

	)

1361 
	#__HAL_RCC_PLL_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
)

	)

1392 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSOURCE__
, 
__PLLMUL__
, 
__PLLDIV__
)\

	)

1393 
MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_PLLSRC
|
RCC_CFGR_PLLMUL
|
RCC_CFGR_PLLDIV
),((
__RCC_PLLSOURCE__
Ë| (
__PLLMUL__
Ë| (
__PLLDIV__
)))

1401 
	#__HAL_RCC_GET_PLL_OSCSOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
)))

	)

1420 
	#__HAL_RCC_SYSCLK_CONFIG
(
__SYSCLKSOURCE__
Ë\

	)

1421 
MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, (
__SYSCLKSOURCE__
))

1431 
	#__HAL_RCC_GET_SYSCLK_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
,
RCC_CFGR_SWS
)))

	)

1477 
	#__HAL_RCC_MCO1_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
Ë\

	)

1478 
MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_MCOSEL
 | 
RCC_CFGR_MCO_PRE
), ((
__MCOCLKSOURCE__
Ë| (
__MCODIV__
)))

1514 
	#__HAL_RCC_RTC_CLKPRESCALER
(
__RTC_CLKSOURCE__
Ëdÿ{ \

	)

1515 if(((
__RTC_CLKSOURCE__
Ë& 
RCC_CSR_RTCSEL_HSE
) == RCC_CSR_RTCSEL_HSE) \

1517 
MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_RTCPRE
, ((
__RTC_CLKSOURCE__
) & RCC_CR_RTCPRE)); \

1521 
	#__HAL_RCC_RTC_CONFIG
(
__RTC_CLKSOURCE__
Ëdÿ{ \

	)

1522 
__HAL_RCC_RTC_CLKPRESCALER
(
__RTC_CLKSOURCE__
); \

1523 
RCC
->
CSR
 |((
__RTC_CLKSOURCE__
Ë& 
RCC_CSR_RTCSEL
); \

1533 
	#__HAL_RCC_GET_RTC_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
CSR
, 
RCC_CSR_RTCSEL
))

	)

1545 
	#__HAL_RCC_GET_RTC_HSE_PRESCALER
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_RTCPRE
)))

	)

1550 
	#__HAL_RCC_RTC_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RTCEN
)

	)

1555 
	#__HAL_RCC_RTC_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_RTCEN
)

	)

1562 
	#__HAL_RCC_BACKUPRESET_FORCE
(Ë
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RTCRST
)

	)

1566 
	#__HAL_RCC_BACKUPRESET_RELEASE
(Ë
	`CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_RTCRST
)

	)

1595 
	#__HAL_RCC_ENABLE_IT
(
__INTERRUPT__
Ë
	`SET_BIT
(
RCC
->
CIER
, (__INTERRUPT__))

	)

1615 
	#__HAL_RCC_DISABLE_IT
(
__INTERRUPT__
Ë
	`CLEAR_BIT
(
RCC
->
CIER
, (__INTERRUPT__))

	)

1630 
	#__HAL_RCC_CLEAR_IT
(
__INTERRUPT__
Ë(
RCC
->
CICR
 = (__INTERRUPT__))

	)

1645 
	#__HAL_RCC_GET_IT
(
__INTERRUPT__
Ë((
RCC
->
CIFR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

1652 
	#__HAL_RCC_CLEAR_RESET_FLAGS
(Ë(
RCC
->
CSR
 |
RCC_CSR_RMVF
)

	)

1676 #i‡
deföed
(
RCC_HSI48_SUPPORT
)

1677 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
Ë(((((((((__FLAG__Ë>> 5Ë=
CR_REG_INDEX
)? 
RCC
->
CR
 :((((__FLAG__Ë>> 5Ë=
CSR_REG_INDEX
Ë? RCC->
CSR
 :RCC->
CRRCR
)))Ë& ((
uöt32_t
)1 << ((__FLAG__Ë& 
RCC_FLAG_MASK
))Ë!0 ) ? 1 : 0 )

	)

1679 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
Ë(((((((((__FLAG__Ë>> 5Ë=
CR_REG_INDEX
)? 
RCC
->
CR
 : RCC->
CSR
))Ë& ((
uöt32_t
)1 << ((__FLAG__Ë& 
RCC_FLAG_MASK
))Ë!0 ) ? 1 : 0 )

	)

1691 
	~"°m32l0xx_hÆ_rcc_ex.h
"

1703 
HAL_RCC_DeInô
();

1704 
HAL_SètusTy≥Def
 
HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1705 
HAL_SètusTy≥Def
 
HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
);

1716 
HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
);

1717 #i‡
deföed
(
RCC_HSECSS_SUPPORT
)

1718 
HAL_RCC_E«bÀCSS
();

1720 
HAL_RCC_NMI_IRQH™dÀr
();

1722 
HAL_RCC_CSSCÆlback
();

1724 
uöt32_t
 
HAL_RCC_GëSysClockFªq
();

1725 
uöt32_t
 
HAL_RCC_GëHCLKFªq
();

1726 
uöt32_t
 
HAL_RCC_GëPCLK1Fªq
();

1727 
uöt32_t
 
HAL_RCC_GëPCLK2Fªq
();

1728 
HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1729 
HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
);

1747 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h

37 #i‚de‡
__STM32L0xx_HAL_RCC_EX_H


38 
	#__STM32L0xx_HAL_RCC_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

60 #i‡
deföed
(
CRS
)

62 
	#RCC_CRS_IT_ERROR_MASK
 ((
uöt32_t
)(
RCC_CRS_IT_TRIMOVF
 | 
RCC_CRS_IT_SYNCERR
 | 
RCC_CRS_IT_SYNCMISS
))

	)

65 
	#RCC_CRS_FLAG_ERROR_MASK
 ((
uöt32_t
)(
RCC_CRS_FLAG_TRIMOVF
 | 
RCC_CRS_FLAG_SYNCERR
 | 
RCC_CRS_FLAG_SYNCMISS
))

	)

75 #i‡
deföed
 (
STM32L052xx
Ë|| deföed(
STM32L062xx
)

76 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<(
RCC_PERIPHCLK_USART1
 | 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

77 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_I2C2
 | 
RCC_PERIPHCLK_RTC
 | \

78 
RCC_PERIPHCLK_USB
 | 
RCC_PERIPHCLK_LPTIM1
))

79 #ñi‡
deföed
 (
STM32L053xx
Ë|| deföed(
STM32L063xx
)

80 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<(
RCC_PERIPHCLK_USART1
 | 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

81 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_I2C2
 | 
RCC_PERIPHCLK_RTC
 | \

82 
RCC_PERIPHCLK_USB
 | 
RCC_PERIPHCLK_LPTIM1
 | 
RCC_PERIPHCLK_LCD
))

83 #ñi‡
deföed
 (
STM32L072xx
Ë|| deföed(
STM32L082xx
)

84 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<(
RCC_PERIPHCLK_USART1
 | 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

85 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_I2C2
 | 
RCC_PERIPHCLK_RTC
 | \

86 
RCC_PERIPHCLK_USB
 | 
RCC_PERIPHCLK_LPTIM1
 | 
RCC_PERIPHCLK_I2C3
 ))

87 #ñi‡
deföed
 (
STM32L073xx
Ë|| deföed(
STM32L083xx
)

88 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<(
RCC_PERIPHCLK_USART1
 | 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

89 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_I2C2
 | 
RCC_PERIPHCLK_RTC
 | \

90 
RCC_PERIPHCLK_USB
 | 
RCC_PERIPHCLK_LPTIM1
 | 
RCC_PERIPHCLK_I2C3
 | \

91 
RCC_PERIPHCLK_LCD
))

94 #i‡
deföed
(
STM32L011xx
Ë|| deföed(
STM32L021xx
Ë|| deföed(
STM32L031xx
Ë|| deföed(
STM32L041xx
)

95 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<–
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

96 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_RTC
 | \

97 
RCC_PERIPHCLK_LPTIM1
))

98 #ñi‡
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
)

99 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<(
RCC_PERIPHCLK_USART1
 | 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

100 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_I2C2
 | 
RCC_PERIPHCLK_RTC
 | \

101 
RCC_PERIPHCLK_LPTIM1
))

102 #ñi‡
deföed
(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

103 
	#IS_RCC_PERIPHCLOCK
(
__CLK__
Ë((__CLK__Ë<(
RCC_PERIPHCLK_USART1
 | 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

	)

104 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_I2C2
 | 
RCC_PERIPHCLK_RTC
 | \

105 
RCC_PERIPHCLK_LPTIM1
 | 
RCC_PERIPHCLK_I2C3
))

108 #i‡
deföed
 (
RCC_CCIPR_USART1SEL
)

109 
	#IS_RCC_USART1CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_USART1CLKSOURCE_PCLK2
Ë|| \

	)

110 ((
__SOURCE__
Ë=
RCC_USART1CLKSOURCE_SYSCLK
) || \

111 ((
__SOURCE__
Ë=
RCC_USART1CLKSOURCE_LSE
) || \

112 ((
__SOURCE__
Ë=
RCC_USART1CLKSOURCE_HSI
))

115 
	#IS_RCC_USART2CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_USART2CLKSOURCE_PCLK1
Ë|| \

	)

116 ((
__SOURCE__
Ë=
RCC_USART2CLKSOURCE_SYSCLK
) || \

117 ((
__SOURCE__
Ë=
RCC_USART2CLKSOURCE_LSE
) || \

118 ((
__SOURCE__
Ë=
RCC_USART2CLKSOURCE_HSI
))

120 
	#IS_RCC_LPUART1CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_LPUART1CLKSOURCE_PCLK1
Ë|| \

	)

121 ((
__SOURCE__
Ë=
RCC_LPUART1CLKSOURCE_SYSCLK
) || \

122 ((
__SOURCE__
Ë=
RCC_LPUART1CLKSOURCE_LSE
) || \

123 ((
__SOURCE__
Ë=
RCC_LPUART1CLKSOURCE_HSI
))

125 
	#IS_RCC_I2C1CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2C1CLKSOURCE_PCLK1
Ë|| \

	)

126 ((
__SOURCE__
Ë=
RCC_I2C1CLKSOURCE_SYSCLK
)|| \

127 ((
__SOURCE__
Ë=
RCC_I2C1CLKSOURCE_HSI
))

129 #i‡
deföed
(
RCC_CCIPR_I2C3SEL
)

130 
	#IS_RCC_I2C3CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2C3CLKSOURCE_PCLK1
Ë|| \

	)

131 ((
__SOURCE__
Ë=
RCC_I2C3CLKSOURCE_SYSCLK
)|| \

132 ((
__SOURCE__
Ë=
RCC_I2C3CLKSOURCE_HSI
))

135 #i‡
deföed
(
USB
)

136 
	#IS_RCC_USBCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_USBCLKSOURCE_HSI48
Ë|| \

	)

137 ((
__SOURCE__
Ë=
RCC_USBCLKSOURCE_PLL
))

140 #i‡
deföed
(
RNG
)

141 
	#IS_RCC_RNGCLKSOURCE
(
_SOURCE_
Ë(((_SOURCE_Ë=
RCC_RNGCLKSOURCE_HSI48
Ë|| \

	)

142 ((
_SOURCE_
Ë=
RCC_RNGCLKSOURCE_PLLCLK
))

145 #i‡
deföed
(
RCC_CCIPR_HSI48SEL
)

146 
	#IS_RCC_HSI48MCLKSOURCE
(
__HSI48MCLK__
Ë(((__HSI48MCLK__Ë=
RCC_HSI48M_PLL
Ë|| ((__HSI48MCLK__Ë=
RCC_HSI48M_HSI48
))

	)

149 
	#IS_RCC_LPTIMCLK
(
__LPTIMCLK_
Ë(((__LPTIMCLK_Ë=
RCC_LPTIM1CLKSOURCE_PCLK
Ë|| \

	)

150 ((
__LPTIMCLK_
Ë=
RCC_LPTIM1CLKSOURCE_LSI
) || \

151 ((
__LPTIMCLK_
Ë=
RCC_LPTIM1CLKSOURCE_HSI
) || \

152 ((
__LPTIMCLK_
Ë=
RCC_LPTIM1CLKSOURCE_LSE
))

154 
	#IS_RCC_STOPWAKEUP_CLOCK
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_STOP_WAKEUPCLOCK_MSI
Ë|| \

	)

155 ((
__SOURCE__
Ë=
RCC_STOP_WAKEUPCLOCK_HSI
))

157 
	#IS_RCC_LSE_DRIVE
(
__DRIVE__
Ë(((__DRIVE__Ë=
RCC_LSEDRIVE_LOW
Ë|| ((
__SOURCE__
Ë=
RCC_LSEDRIVE_MEDIUMLOW
Ë|| \

	)

158 ((
__DRIVE__
Ë=
RCC_LSEDRIVE_MEDIUMHIGH
Ë|| ((
__SOURCE__
Ë=
RCC_LSEDRIVE_HIGH
))

160 #i‡
deföed
(
CRS
)

162 
	#IS_RCC_CRS_SYNC_SOURCE
(
_SOURCE_
Ë(((_SOURCE_Ë=
RCC_CRS_SYNC_SOURCE_GPIO
Ë|| \

	)

163 ((
_SOURCE_
Ë=
RCC_CRS_SYNC_SOURCE_LSE
) || \

164 ((
_SOURCE_
Ë=
RCC_CRS_SYNC_SOURCE_USB
))

165 
	#IS_RCC_CRS_SYNC_DIV
(
_DIV_
Ë(((_DIV_Ë=
RCC_CRS_SYNC_DIV1
Ë|| ((_DIV_Ë=
RCC_CRS_SYNC_DIV2
Ë|| \

	)

166 ((
_DIV_
Ë=
RCC_CRS_SYNC_DIV4
Ë|| ((_DIV_Ë=
RCC_CRS_SYNC_DIV8
) || \

167 ((
_DIV_
Ë=
RCC_CRS_SYNC_DIV16
Ë|| ((_DIV_Ë=
RCC_CRS_SYNC_DIV32
) || \

168 ((
_DIV_
Ë=
RCC_CRS_SYNC_DIV64
Ë|| ((_DIV_Ë=
RCC_CRS_SYNC_DIV128
))

169 
	#IS_RCC_CRS_SYNC_POLARITY
(
_POLARITY_
Ë(((_POLARITY_Ë=
RCC_CRS_SYNC_POLARITY_RISING
Ë|| \

	)

170 ((
_POLARITY_
Ë=
RCC_CRS_SYNC_POLARITY_FALLING
))

171 
	#IS_RCC_CRS_RELOADVALUE
(
_VALUE_
Ë(((_VALUE_Ë<0xFFFF))

	)

172 
	#IS_RCC_CRS_ERRORLIMIT
(
_VALUE_
Ë(((_VALUE_Ë<0xFF))

	)

173 
	#IS_RCC_CRS_HSI48CALIBRATION
(
_VALUE_
Ë(((_VALUE_Ë<0x3F))

	)

174 
	#IS_RCC_CRS_FREQERRORDIR
(
_DIR_
Ë(((_DIR_Ë=
RCC_CRS_FREQERRORDIR_UP
Ë|| \

	)

175 ((
_DIR_
Ë=
RCC_CRS_FREQERRORDIR_DOWN
))

192 
uöt32_t
 
PîùhClockSñe˘i⁄
;

195 
uöt32_t
 
RTCClockSñe˘i⁄
;

198 #i‡
deföed
(
LCD
)

200 
uöt32_t
 
LCDClockSñe˘i⁄
;

204 #i‡
deföed
(
RCC_CCIPR_USART1SEL
)

205 
uöt32_t
 
Ußπ1ClockSñe˘i⁄
;

208 
uöt32_t
 
Ußπ2ClockSñe˘i⁄
;

211 
uöt32_t
 
Lpu¨t1ClockSñe˘i⁄
;

214 
uöt32_t
 
I2c1ClockSñe˘i⁄
;

217 #i‡
deföed
(
RCC_CCIPR_I2C3SEL
)

218 
uöt32_t
 
I2c3ClockSñe˘i⁄
;

221 
uöt32_t
 
L±imClockSñe˘i⁄
;

223 #i‡
deföed
(
USB
)

224 
uöt32_t
 
UsbClockSñe˘i⁄
;

227 } 
	tRCC_PîùhCLKInôTy≥Def
;

229 #i‡
deföed
 (
CRS
)

235 
uöt32_t
 
PªsˇÀr
;

238 
uöt32_t
 
Sour˚
;

241 
uöt32_t
 
Pﬁ¨ôy
;

244 
uöt32_t
 
RñﬂdVÆue
;

248 
uöt32_t
 
Eº‹LimôVÆue
;

251 
uöt32_t
 
HSI48CÆibøti⁄VÆue
;

254 }
	tRCC_CRSInôTy≥Def
;

261 
uöt32_t
 
RñﬂdVÆue
;

264 
uöt32_t
 
HSI48CÆibøti⁄VÆue
;

267 
uöt32_t
 
FªqEº‹C≠tuª
;

271 
uöt32_t
 
FªqEº‹Dúe˘i⁄
;

276 }
	tRCC_CRSSynchroInfoTy≥Def
;

294 
	#RCC_EXTI_LINE_LSECSS
 (
EXTI_IMR_IM19
Ë

	)

302 #i‡
deföed
(
RCC_CCIPR_USART1SEL
)

303 
	#RCC_PERIPHCLK_USART1
 ((
uöt32_t
)0x00000001)

	)

305 
	#RCC_PERIPHCLK_USART2
 ((
uöt32_t
)0x00000002)

	)

306 
	#RCC_PERIPHCLK_LPUART1
 ((
uöt32_t
)0x00000004)

	)

307 
	#RCC_PERIPHCLK_I2C1
 ((
uöt32_t
)0x00000008)

	)

308 
	#RCC_PERIPHCLK_I2C2
 ((
uöt32_t
)0x00000010)

	)

309 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000020)

	)

310 #i‡
deföed
(
USB
)

311 
	#RCC_PERIPHCLK_USB
 ((
uöt32_t
)0x00000040)

	)

313 
	#RCC_PERIPHCLK_LPTIM1
 ((
uöt32_t
)0x00000080)

	)

314 #i‡
deföed
(
LCD
)

315 
	#RCC_PERIPHCLK_LCD
 ((
uöt32_t
)0x00000800)

	)

317 #i‡
deföed
(
RCC_CCIPR_I2C3SEL
)

318 
	#RCC_PERIPHCLK_I2C3
 ((
uöt32_t
)0x00000100)

	)

325 #i‡
deföed
 (
RCC_CCIPR_USART1SEL
)

329 
	#RCC_USART1CLKSOURCE_PCLK2
 (0x00000000U)

	)

330 
	#RCC_USART1CLKSOURCE_SYSCLK
 
RCC_CCIPR_USART1SEL_0


	)

331 
	#RCC_USART1CLKSOURCE_HSI
 
RCC_CCIPR_USART1SEL_1


	)

332 
	#RCC_USART1CLKSOURCE_LSE
 (
RCC_CCIPR_USART1SEL_0
 | 
RCC_CCIPR_USART1SEL_1
)

	)

341 
	#RCC_USART2CLKSOURCE_PCLK1
 (0x00000000U)

	)

342 
	#RCC_USART2CLKSOURCE_SYSCLK
 
RCC_CCIPR_USART2SEL_0


	)

343 
	#RCC_USART2CLKSOURCE_HSI
 
RCC_CCIPR_USART2SEL_1


	)

344 
	#RCC_USART2CLKSOURCE_LSE
 (
RCC_CCIPR_USART2SEL_0
 | 
RCC_CCIPR_USART2SEL_1
)

	)

352 
	#RCC_LPUART1CLKSOURCE_PCLK1
 (0x00000000U)

	)

353 
	#RCC_LPUART1CLKSOURCE_SYSCLK
 
RCC_CCIPR_LPUART1SEL_0


	)

354 
	#RCC_LPUART1CLKSOURCE_HSI
 
RCC_CCIPR_LPUART1SEL_1


	)

355 
	#RCC_LPUART1CLKSOURCE_LSE
 (
RCC_CCIPR_LPUART1SEL_0
 | 
RCC_CCIPR_LPUART1SEL_1
)

	)

363 
	#RCC_I2C1CLKSOURCE_PCLK1
 (0x00000000U)

	)

364 
	#RCC_I2C1CLKSOURCE_SYSCLK
 
RCC_CCIPR_I2C1SEL_0


	)

365 
	#RCC_I2C1CLKSOURCE_HSI
 
RCC_CCIPR_I2C1SEL_1


	)

370 #i‡
deföed
(
RCC_CCIPR_I2C3SEL
)

375 
	#RCC_I2C3CLKSOURCE_PCLK1
 (0x00000000U)

	)

376 
	#RCC_I2C3CLKSOURCE_SYSCLK
 
RCC_CCIPR_I2C3SEL_0


	)

377 
	#RCC_I2C3CLKSOURCE_HSI
 
RCC_CCIPR_I2C3SEL_1


	)

386 
	#RCC_TIMPRES_DESACTIVATED
 ((
uöt8_t
)0x00)

	)

387 
	#RCC_TIMPRES_ACTIVATED
 ((
uöt8_t
)0x01)

	)

392 #i‡
deföed
(
USB
)

396 
	#RCC_USBCLKSOURCE_HSI48
 
RCC_CCIPR_HSI48SEL


	)

397 
	#RCC_USBCLKSOURCE_PLL
 (0x00000000U)

	)

403 #i‡
deföed
(
RNG
)

407 
	#RCC_RNGCLKSOURCE_HSI48
 
RCC_CCIPR_HSI48SEL


	)

408 
	#RCC_RNGCLKSOURCE_PLLCLK
 (0x00000000U)

	)

414 #i‡
deföed
(
RCC_CCIPR_HSI48SEL
)

418 
	#RCC_FLAG_HSI48
 
SYSCFG_CFGR3_VREFINT_RDYF


	)

420 
	#RCC_HSI48M_PLL
 (0x00000000U)

	)

421 
	#RCC_HSI48M_HSI48
 
RCC_CCIPR_HSI48SEL


	)

431 
	#RCC_LPTIM1CLKSOURCE_PCLK
 (0x00000000U)

	)

432 
	#RCC_LPTIM1CLKSOURCE_LSI
 
RCC_CCIPR_LPTIM1SEL_0


	)

433 
	#RCC_LPTIM1CLKSOURCE_HSI
 
RCC_CCIPR_LPTIM1SEL_1


	)

434 
	#RCC_LPTIM1CLKSOURCE_LSE
 
RCC_CCIPR_LPTIM1SEL


	)

443 
	#RCC_STOP_WAKEUPCLOCK_MSI
 (0x00000000U)

	)

444 
	#RCC_STOP_WAKEUPCLOCK_HSI
 
RCC_CFGR_STOPWUCK


	)

453 
	#RCC_LSEDRIVE_LOW
 (0x00000000U)

	)

454 
	#RCC_LSEDRIVE_MEDIUMLOW
 
RCC_CSR_LSEDRV_0


	)

455 
	#RCC_LSEDRIVE_MEDIUMHIGH
 
RCC_CSR_LSEDRV_1


	)

456 
	#RCC_LSEDRIVE_HIGH
 
RCC_CSR_LSEDRV


	)

461 #i‡
deföed
(
CRS
)

466 
	#RCC_CRS_NONE
 (0x00000000U)

	)

467 
	#RCC_CRS_TIMEOUT
 ((
uöt32_t
)0x00000001)

	)

468 
	#RCC_CRS_SYNCOK
 ((
uöt32_t
)0x00000002)

	)

469 
	#RCC_CRS_SYNCWARN
 ((
uöt32_t
)0x00000004)

	)

470 
	#RCC_CRS_SYNCERR
 ((
uöt32_t
)0x00000008)

	)

471 
	#RCC_CRS_SYNCMISS
 ((
uöt32_t
)0x00000010)

	)

472 
	#RCC_CRS_TRIMOVF
 ((
uöt32_t
)0x00000020)

	)

481 
	#RCC_CRS_SYNC_SOURCE_GPIO
 ((
uöt32_t
)0x00000000UË

	)

482 
	#RCC_CRS_SYNC_SOURCE_LSE
 
CRS_CFGR_SYNCSRC_0


	)

483 
	#RCC_CRS_SYNC_SOURCE_USB
 
CRS_CFGR_SYNCSRC_1


	)

491 
	#RCC_CRS_SYNC_DIV1
 ((
uöt32_t
)0x00000000UË

	)

492 
	#RCC_CRS_SYNC_DIV2
 
CRS_CFGR_SYNCDIV_0


	)

493 
	#RCC_CRS_SYNC_DIV4
 
CRS_CFGR_SYNCDIV_1


	)

494 
	#RCC_CRS_SYNC_DIV8
 (
CRS_CFGR_SYNCDIV_1
 | 
CRS_CFGR_SYNCDIV_0
Ë

	)

495 
	#RCC_CRS_SYNC_DIV16
 
CRS_CFGR_SYNCDIV_2


	)

496 
	#RCC_CRS_SYNC_DIV32
 (
CRS_CFGR_SYNCDIV_2
 | 
CRS_CFGR_SYNCDIV_0
Ë

	)

497 
	#RCC_CRS_SYNC_DIV64
 (
CRS_CFGR_SYNCDIV_2
 | 
CRS_CFGR_SYNCDIV_1
Ë

	)

498 
	#RCC_CRS_SYNC_DIV128
 
CRS_CFGR_SYNCDIV


	)

506 
	#RCC_CRS_SYNC_POLARITY_RISING
 ((
uöt32_t
)0x00000000UË

	)

507 
	#RCC_CRS_SYNC_POLARITY_FALLING
 
CRS_CFGR_SYNCPOL


	)

515 
	#RCC_CRS_RELOADVALUE_DEFAULT
 ((
uöt32_t
)0x0000BB7FUË

	)

524 
	#RCC_CRS_ERRORLIMIT_DEFAULT
 ((
uöt32_t
)0x00000022UË

	)

532 
	#RCC_CRS_HSI48CALIBRATION_DEFAULT
 ((
uöt32_t
)0x00000020UË

	)

542 
	#RCC_CRS_FREQERRORDIR_UP
 ((
uöt32_t
)0x00000000UË

	)

543 
	#RCC_CRS_FREQERRORDIR_DOWN
 ((
uöt32_t
)
CRS_ISR_FEDIR
Ë

	)

551 
	#RCC_CRS_IT_SYNCOK
 
CRS_CR_SYNCOKIE


	)

552 
	#RCC_CRS_IT_SYNCWARN
 
CRS_CR_SYNCWARNIE


	)

553 
	#RCC_CRS_IT_ERR
 
CRS_CR_ERRIE


	)

554 
	#RCC_CRS_IT_ESYNC
 
CRS_CR_ESYNCIE


	)

555 
	#RCC_CRS_IT_SYNCERR
 
CRS_CR_ERRIE


	)

556 
	#RCC_CRS_IT_SYNCMISS
 
CRS_CR_ERRIE


	)

557 
	#RCC_CRS_IT_TRIMOVF
 
CRS_CR_ERRIE


	)

566 
	#RCC_CRS_FLAG_SYNCOK
 
CRS_ISR_SYNCOKF


	)

567 
	#RCC_CRS_FLAG_SYNCWARN
 
CRS_ISR_SYNCWARNF


	)

568 
	#RCC_CRS_FLAG_ERR
 
CRS_ISR_ERRF


	)

569 
	#RCC_CRS_FLAG_ESYNC
 
CRS_ISR_ESYNCF


	)

570 
	#RCC_CRS_FLAG_SYNCERR
 
CRS_ISR_SYNCERR


	)

571 
	#RCC_CRS_FLAG_SYNCMISS
 
CRS_ISR_SYNCMISS


	)

572 
	#RCC_CRS_FLAG_TRIMOVF
 
CRS_ISR_TRIMOVF


	)

597 #i‡
deföed
(
STM32L062xx
Ë|| deföed(
STM32L063xx
)|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L021xx
)

598 
	#__HAL_RCC_AES_CLK_ENABLE
(Ëdÿ{ \

	)

599 
__IO
 
uöt32_t
 
tm¥eg
; \

600 
SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRYPEN
);\

602 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRYPEN
);\

603 
UNUSED
(
tm¥eg
); \

605 
	#__HAL_RCC_AES_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBENR
, (
RCC_AHBENR_CRYPEN
))

	)

607 
	#__HAL_RCC_AES_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRYPEN
Ë!
RESET
)

	)

608 
	#__HAL_RCC_AES_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRYPEN
Ë=
RESET
)

	)

612 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
Ë&& !deföed(
STM32L051xx
Ë&& !deföed(
STM32L061xx
Ë&& !deföed(
STM32L071xx
Ë&& !deföed(
STM32L081xx
)

613 
	#__HAL_RCC_TSC_CLK_ENABLE
(Ëdÿ{ \

	)

614 
__IO
 
uöt32_t
 
tm¥eg
; \

615 
SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_TSCEN
);\

617 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_TSCEN
);\

618 
UNUSED
(
tm¥eg
); \

620 
	#__HAL_RCC_TSC_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBENR
, (
RCC_AHBENR_TSCEN
))

	)

622 
	#__HAL_RCC_TSC_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_TSCEN
Ë!
RESET
)

	)

623 
	#__HAL_RCC_TSC_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_TSCEN
Ë=
RESET
)

	)

625 
	#__HAL_RCC_RNG_CLK_ENABLE
(Ëdÿ{ \

	)

626 
__IO
 
uöt32_t
 
tm¥eg
; \

627 
SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_RNGEN
);\

629 
tm¥eg
 = 
READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_RNGEN
);\

630 
UNUSED
(
tm¥eg
); \

632 
	#__HAL_RCC_RNG_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBENR
, (
RCC_AHBENR_RNGEN
))

	)

634 
	#__HAL_RCC_RNG_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_RNGEN
Ë!
RESET
)

	)

635 
	#__HAL_RCC_RNG_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_RNGEN
Ë=
RESET
)

	)

649 #i‡
deföed
(
GPIOE
)

650 
	#__HAL_RCC_GPIOE_CLK_ENABLE
(Ëdÿ{ \

	)

651 
__IO
 
uöt32_t
 
tm¥eg
; \

652 
SET_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOEEN
);\

654 
tm¥eg
 = 
READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOEEN
);\

655 
UNUSED
(
tm¥eg
); \

658 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPENR
,(
RCC_IOPENR_GPIOEEN
))

	)

660 
	#__HAL_RCC_GPIOE_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOEEN
Ë!
RESET
)

	)

661 
	#__HAL_RCC_GPIOE_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIOEEN
Ë=
RESET
)

	)

664 #i‡
deföed
(
GPIOD
)

665 
	#__HAL_RCC_GPIOD_CLK_ENABLE
(Ëdÿ{ \

	)

666 
__IO
 
uöt32_t
 
tm¥eg
; \

667 
SET_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIODEN
);\

669 
tm¥eg
 = 
READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIODEN
);\

670 
UNUSED
(
tm¥eg
); \

672 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPENR
,(
RCC_IOPENR_GPIODEN
))

	)

674 
	#__HAL_RCC_GPIOD_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIODEN
Ë!
RESET
)

	)

675 
	#__HAL_RCC_GPIOD_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPENR
, 
RCC_IOPENR_GPIODEN
Ë=
RESET
)

	)

690 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
Ë&& !deföed(
STM32L051xx
Ë&& !deföed(
STM32L061xx
Ë&& !deföed(
STM32L071xx
Ë&& !deföed(
STM32L081xx
)

691 
	#__HAL_RCC_USB_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USBEN
))

	)

692 
	#__HAL_RCC_USB_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USBEN
))

	)

694 
	#__HAL_RCC_USB_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
Ë!
RESET
)

	)

695 
	#__HAL_RCC_USB_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
Ë=
RESET
)

	)

697 
	#__HAL_RCC_CRS_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_CRSEN
))

	)

698 
	#__HAL_RCC_CRS_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
,(
RCC_APB1ENR_CRSEN
))

	)

700 
	#__HAL_RCC_CRS_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CRSEN
Ë!
RESET
)

	)

701 
	#__HAL_RCC_CRS_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CRSEN
Ë=
RESET
)

	)

706 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
)

707 
	#__HAL_RCC_LCD_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LCDEN
))

	)

708 
	#__HAL_RCC_LCD_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LCDEN
))

	)

710 
	#__HAL_RCC_LCD_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LCDEN
Ë!
RESET
)

	)

711 
	#__HAL_RCC_LCD_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LCDEN
Ë=
RESET
)

	)

715 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
) \

716 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
) \

717 || 
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
)

718 
	#__HAL_RCC_TIM2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM2EN
))

	)

719 
	#__HAL_RCC_TIM6_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM6EN
))

	)

720 
	#__HAL_RCC_SPI2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_SPI2EN
))

	)

721 
	#__HAL_RCC_USART2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART2EN
))

	)

722 
	#__HAL_RCC_LPUART1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPUART1EN
))

	)

723 
	#__HAL_RCC_I2C1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C1EN
))

	)

724 
	#__HAL_RCC_I2C2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C2EN
))

	)

725 
	#__HAL_RCC_DAC_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_DACEN
))

	)

726 
	#__HAL_RCC_LPTIM1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPTIM1EN
))

	)

728 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM2EN
))

	)

729 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM6EN
))

	)

730 
	#__HAL_RCC_SPI2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_SPI2EN
))

	)

731 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART2EN
))

	)

732 
	#__HAL_RCC_LPUART1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPUART1EN
))

	)

733 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C1EN
))

	)

734 
	#__HAL_RCC_I2C2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C2EN
))

	)

735 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_DACEN
))

	)

736 
	#__HAL_RCC_LPTIM1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPTIM1EN
))

	)

738 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
Ë!
RESET
)

	)

739 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
Ë!
RESET
)

	)

740 
	#__HAL_RCC_SPI2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
Ë!
RESET
)

	)

741 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
Ë!
RESET
)

	)

742 
	#__HAL_RCC_LPUART1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPUART1EN
Ë!
RESET
)

	)

743 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
Ë!
RESET
)

	)

744 
	#__HAL_RCC_I2C2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
Ë!
RESET
)

	)

745 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
Ë!
RESET
)

	)

746 
	#__HAL_RCC_LPTIM1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
Ë!
RESET
)

	)

747 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
Ë=
RESET
)

	)

748 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
Ë=
RESET
)

	)

749 
	#__HAL_RCC_SPI2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
Ë=
RESET
)

	)

750 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
Ë=
RESET
)

	)

751 
	#__HAL_RCC_LPUART1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPUART1EN
Ë=
RESET
)

	)

752 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
Ë=
RESET
)

	)

753 
	#__HAL_RCC_I2C2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
Ë=
RESET
)

	)

754 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
Ë=
RESET
)

	)

755 
	#__HAL_RCC_LPTIM1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
Ë=
RESET
)

	)

761 #i‡
deföed
(
STM32L011xx
Ë|| deföed(
STM32L021xx
Ë|| deföed(
STM32L031xx
Ë|| deföed(
STM32L041xx
)

762 
	#__HAL_RCC_TIM2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM2EN
))

	)

763 
	#__HAL_RCC_USART2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART2EN
))

	)

764 
	#__HAL_RCC_LPUART1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPUART1EN
))

	)

765 
	#__HAL_RCC_I2C1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C1EN
))

	)

766 
	#__HAL_RCC_LPTIM1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPTIM1EN
))

	)

768 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM2EN
))

	)

769 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART2EN
))

	)

770 
	#__HAL_RCC_LPUART1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPUART1EN
))

	)

771 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C1EN
))

	)

772 
	#__HAL_RCC_LPTIM1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPTIM1EN
))

	)

774 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
Ë!
RESET
)

	)

775 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
Ë!
RESET
)

	)

776 
	#__HAL_RCC_LPUART1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPUART1EN
Ë!
RESET
)

	)

777 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
Ë!
RESET
)

	)

778 
	#__HAL_RCC_LPTIM1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
Ë!
RESET
)

	)

779 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
Ë=
RESET
)

	)

780 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
Ë=
RESET
)

	)

781 
	#__HAL_RCC_LPUART1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPUART1EN
Ë=
RESET
)

	)

782 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
Ë=
RESET
)

	)

783 
	#__HAL_RCC_LPTIM1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
Ë=
RESET
)

	)

788 #i‡
deföed
(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

789 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

790 || 
deföed
(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

791 
	#__HAL_RCC_TIM2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM2EN
))

	)

792 
	#__HAL_RCC_TIM3_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM3EN
))

	)

793 
	#__HAL_RCC_TIM6_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM6EN
))

	)

794 
	#__HAL_RCC_TIM7_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM7EN
))

	)

795 
	#__HAL_RCC_SPI2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_SPI2EN
))

	)

796 
	#__HAL_RCC_USART2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART2EN
))

	)

797 
	#__HAL_RCC_USART4_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART4EN
))

	)

798 
	#__HAL_RCC_USART5_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART5EN
))

	)

799 
	#__HAL_RCC_LPUART1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPUART1EN
))

	)

800 
	#__HAL_RCC_I2C1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C1EN
))

	)

801 
	#__HAL_RCC_I2C2_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C2EN
))

	)

802 
	#__HAL_RCC_I2C3_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C3EN
))

	)

803 
	#__HAL_RCC_DAC_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_DACEN
))

	)

804 
	#__HAL_RCC_LPTIM1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPTIM1EN
))

	)

806 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM2EN
))

	)

807 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM3EN
))

	)

808 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM6EN
))

	)

809 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_TIM7EN
))

	)

810 
	#__HAL_RCC_SPI2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_SPI2EN
))

	)

811 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART2EN
))

	)

812 
	#__HAL_RCC_USART4_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART4EN
))

	)

813 
	#__HAL_RCC_USART5_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_USART5EN
))

	)

814 
	#__HAL_RCC_LPUART1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPUART1EN
))

	)

815 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C1EN
))

	)

816 
	#__HAL_RCC_I2C2_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C2EN
))

	)

817 
	#__HAL_RCC_I2C3_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C3EN
))

	)

818 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_DACEN
))

	)

819 
	#__HAL_RCC_LPTIM1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_LPTIM1EN
))

	)

821 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
Ë!
RESET
)

	)

822 
	#__HAL_RCC_TIM3_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
Ë!
RESET
)

	)

823 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
Ë!
RESET
)

	)

824 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
Ë!
RESET
)

	)

825 
	#__HAL_RCC_SPI2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
Ë!
RESET
)

	)

826 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
Ë!
RESET
)

	)

827 
	#__HAL_RCC_USART4_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART4EN
Ë!
RESET
)

	)

828 
	#__HAL_RCC_USART5_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART5EN
Ë!
RESET
)

	)

829 
	#__HAL_RCC_LPUART1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPUART1EN
Ë!
RESET
)

	)

830 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
Ë!
RESET
)

	)

831 
	#__HAL_RCC_I2C2_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
Ë!
RESET
)

	)

832 
	#__HAL_RCC_I2C3_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
Ë!
RESET
)

	)

833 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
Ë!
RESET
)

	)

834 
	#__HAL_RCC_LPTIM1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
Ë!
RESET
)

	)

835 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
Ë=
RESET
)

	)

836 
	#__HAL_RCC_TIM3_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
Ë=
RESET
)

	)

837 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
Ë=
RESET
)

	)

838 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
Ë=
RESET
)

	)

839 
	#__HAL_RCC_SPI2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
Ë=
RESET
)

	)

840 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
Ë=
RESET
)

	)

841 
	#__HAL_RCC_USART4_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART4EN
Ë=
RESET
)

	)

842 
	#__HAL_RCC_USART5_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART5EN
Ë=
RESET
)

	)

843 
	#__HAL_RCC_LPUART1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPUART1EN
Ë=
RESET
)

	)

844 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
Ë=
RESET
)

	)

845 
	#__HAL_RCC_I2C2_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
Ë=
RESET
)

	)

846 
	#__HAL_RCC_I2C3_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
Ë=
RESET
)

	)

847 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
Ë=
RESET
)

	)

848 
	#__HAL_RCC_LPTIM1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
Ë=
RESET
)

	)

858 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

859 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

860 || 
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
Ë|| deföed(
STM32L071xx
Ë|| deföed(
STM32L081xx
) \

861 || 
deföed
(
STM32L031xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L011xx
Ë|| deföed(
STM32L021xx
)

869 
	#__HAL_RCC_TIM21_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_TIM21EN
))

	)

870 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

871 
	#__HAL_RCC_TIM22_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_TIM22EN
))

	)

873 
	#__HAL_RCC_ADC1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_ADC1EN
))

	)

874 
	#__HAL_RCC_SPI1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_SPI1EN
))

	)

875 
	#__HAL_RCC_USART1_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_USART1EN
))

	)

877 
	#__HAL_RCC_TIM21_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_TIM21EN
))

	)

878 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

879 
	#__HAL_RCC_TIM22_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_TIM22EN
))

	)

881 
	#__HAL_RCC_ADC1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_ADC1EN
))

	)

882 
	#__HAL_RCC_SPI1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_SPI1EN
))

	)

883 
	#__HAL_RCC_USART1_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_USART1EN
))

	)

884 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
)

885 
	#__HAL_RCC_FIREWALL_CLK_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_MIFIEN
))

	)

886 
	#__HAL_RCC_FIREWALL_CLK_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_MIFIEN
))

	)

889 
	#__HAL_RCC_TIM21_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM21EN
Ë!
RESET
)

	)

890 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

891 
	#__HAL_RCC_TIM22_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM22EN
Ë!
RESET
)

	)

893 
	#__HAL_RCC_ADC1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
Ë!
RESET
)

	)

894 
	#__HAL_RCC_SPI1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
Ë!
RESET
)

	)

895 
	#__HAL_RCC_USART1_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
Ë!
RESET
)

	)

897 
	#__HAL_RCC_TIM21_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_TIM21EN
Ë=
RESET
)

	)

898 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

899 
	#__HAL_RCC_TIM22_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_TIM22EN
Ë=
RESET
)

	)

901 
	#__HAL_RCC_ADC1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_ADC1EN
Ë=
RESET
)

	)

902 
	#__HAL_RCC_SPI1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_SPI1EN
Ë=
RESET
)

	)

903 
	#__HAL_RCC_USART1_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_USART1EN
Ë=
RESET
)

	)

904 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
)

905 
	#__HAL_RCC_FIREWALL_IS_CLK_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_MIFIEN
Ë!
RESET
)

	)

906 
	#__HAL_RCC_FIREWALL_IS_CLK_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2ENR
, (
RCC_APB2ENR_MIFIEN
Ë=
RESET
)

	)

922 #i‡
deföed
(
STM32L062xx
Ë|| deföed(
STM32L063xx
)|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L021xx
)

923 
	#__HAL_RCC_AES_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_CRYPRST
))

	)

924 
	#__HAL_RCC_AES_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_CRYPRST
))

	)

927 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
Ë&& !deföed(
STM32L051xx
Ë&& !deföed(
STM32L061xx
Ë&& !deföed(
STM32L071xx
Ë&& !deföed(
STM32L081xx
)

928 
	#__HAL_RCC_TSC_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_TSCRST
))

	)

929 
	#__HAL_RCC_TSC_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_TSCRST
))

	)

930 
	#__HAL_RCC_RNG_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_RNGRST
))

	)

931 
	#__HAL_RCC_RNG_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
AHBRSTR
, (
RCC_AHBRSTR_RNGRST
))

	)

942 #i‡
deföed
(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

943 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

944 || 
deföed
(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

945 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIOERST
))

	)

947 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
IOPRSTR
,(
RCC_IOPRSTR_GPIOERST
))

	)

952 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
)

953 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
IOPRSTR
, (
RCC_IOPRSTR_GPIODRST
))

	)

954 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
IOPRSTR
,(
RCC_IOPRSTR_GPIODRST
))

	)

965 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
) \

966 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
) \

967 || 
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
)

968 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM2RST
))

	)

969 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM6RST
))

	)

970 
	#__HAL_RCC_LPTIM1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPTIM1RST
))

	)

971 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C1RST
))

	)

972 
	#__HAL_RCC_I2C2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C2RST
))

	)

973 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART2RST
))

	)

974 
	#__HAL_RCC_LPUART1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPUART1RST
))

	)

975 
	#__HAL_RCC_SPI2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_SPI2RST
))

	)

976 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_DACRST
))

	)

978 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM2RST
))

	)

979 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM6RST
))

	)

980 
	#__HAL_RCC_LPTIM1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPTIM1RST
))

	)

981 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C1RST
))

	)

982 
	#__HAL_RCC_I2C2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C2RST
))

	)

983 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART2RST
))

	)

984 
	#__HAL_RCC_LPUART1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPUART1RST
))

	)

985 
	#__HAL_RCC_SPI2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_SPI2RST
))

	)

986 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_DACRST
))

	)

990 #i‡
deföed
(
STM32L011xx
Ë|| deföed(
STM32L021xx
Ë|| deföed(
STM32L031xx
Ë|| deföed(
STM32L041xx
)

991 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM2RST
))

	)

992 
	#__HAL_RCC_LPTIM1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPTIM1RST
))

	)

993 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C1RST
))

	)

994 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART2RST
))

	)

995 
	#__HAL_RCC_LPUART1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPUART1RST
))

	)

997 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM2RST
))

	)

998 
	#__HAL_RCC_LPTIM1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPTIM1RST
))

	)

999 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C1RST
))

	)

1000 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART2RST
))

	)

1001 
	#__HAL_RCC_LPUART1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPUART1RST
))

	)

1004 #i‡
deföed
(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

1005 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

1006 || 
deföed
(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

1007 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM2RST
))

	)

1008 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM3RST
))

	)

1009 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM6RST
))

	)

1010 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM7RST
))

	)

1011 
	#__HAL_RCC_LPTIM1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPTIM1RST
))

	)

1012 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C1RST
))

	)

1013 
	#__HAL_RCC_I2C2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C2RST
))

	)

1014 
	#__HAL_RCC_I2C3_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C3RST
))

	)

1015 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART2RST
))

	)

1016 
	#__HAL_RCC_USART4_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART4RST
))

	)

1017 
	#__HAL_RCC_USART5_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART5RST
))

	)

1018 
	#__HAL_RCC_LPUART1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPUART1RST
))

	)

1019 
	#__HAL_RCC_SPI2_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_SPI2RST
))

	)

1020 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_DACRST
))

	)

1022 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM2RST
))

	)

1023 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM3RST
))

	)

1024 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM6RST
))

	)

1025 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_TIM7RST
))

	)

1026 
	#__HAL_RCC_LPTIM1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPTIM1RST
))

	)

1027 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C1RST
))

	)

1028 
	#__HAL_RCC_I2C2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C2RST
))

	)

1029 
	#__HAL_RCC_I2C3_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_I2C3RST
))

	)

1030 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART2RST
))

	)

1031 
	#__HAL_RCC_USART4_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART4RST
))

	)

1032 
	#__HAL_RCC_USART5_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USART5RST
))

	)

1033 
	#__HAL_RCC_LPUART1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LPUART1RST
))

	)

1034 
	#__HAL_RCC_SPI2_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_SPI2RST
))

	)

1035 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_DACRST
))

	)

1040 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
Ë&& !deföed(
STM32L051xx
Ë&& !deföed(
STM32L061xx
Ë&& !deföed(
STM32L071xx
Ë&& !deföed(
STM32L081xx
)

1041 
	#__HAL_RCC_USB_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USBRST
))

	)

1042 
	#__HAL_RCC_USB_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_USBRST
))

	)

1043 
	#__HAL_RCC_CRS_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_CRSRST
))

	)

1044 
	#__HAL_RCC_CRS_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
,(
RCC_APB1RSTR_CRSRST
))

	)

1047 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
)

1048 
	#__HAL_RCC_LCD_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LCDRST
))

	)

1049 
	#__HAL_RCC_LCD_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB1RSTR
, (
RCC_APB1RSTR_LCDRST
))

	)

1056 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

1057 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

1058 || 
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
Ë|| deföed(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

1064 
	#__HAL_RCC_USART1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_USART1RST
))

	)

1065 
	#__HAL_RCC_ADC1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_ADC1RST
))

	)

1066 
	#__HAL_RCC_SPI1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_SPI1RST
))

	)

1067 
	#__HAL_RCC_TIM21_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM21RST
))

	)

1068 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1069 
	#__HAL_RCC_TIM22_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM22RST
))

	)

1072 
	#__HAL_RCC_USART1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_USART1RST
))

	)

1073 
	#__HAL_RCC_ADC1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_ADC1RST
))

	)

1074 
	#__HAL_RCC_SPI1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_SPI1RST
))

	)

1075 
	#__HAL_RCC_TIM21_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM21RST
))

	)

1076 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1077 
	#__HAL_RCC_TIM22_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM22RST
))

	)

1082 #i‡
deföed
(
STM32L011xx
Ë|| deföed(
STM32L021xx
Ë|| deföed(
STM32L031xx
Ë|| deföed(
STM32L041xx
)

1083 
	#__HAL_RCC_ADC1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_ADC1RST
))

	)

1084 
	#__HAL_RCC_SPI1_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_SPI1RST
))

	)

1085 
	#__HAL_RCC_TIM21_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM21RST
))

	)

1086 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1087 
	#__HAL_RCC_TIM22_FORCE_RESET
(Ë
	`SET_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM22RST
))

	)

1089 
	#__HAL_RCC_ADC1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_ADC1RST
))

	)

1090 
	#__HAL_RCC_SPI1_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_SPI1RST
))

	)

1091 
	#__HAL_RCC_TIM21_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM21RST
))

	)

1092 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1093 
	#__HAL_RCC_TIM22_RELEASE_RESET
(Ë
	`CLEAR_BIT
(
RCC
->
APB2RSTR
, (
RCC_APB2RSTR_TIM22RST
))

	)

1110 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
Ë&& !deföed(
STM32L051xx
Ë&& !deföed(
STM32L061xx
Ë&& !deföed(
STM32L071xx
Ë&& !deföed(
STM32L081xx
)

1111 
	#__HAL_RCC_TSC_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_TSCSMEN
))

	)

1112 
	#__HAL_RCC_RNG_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_RNGSMEN
))

	)

1113 
	#__HAL_RCC_TSC_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_TSCSMEN
))

	)

1114 
	#__HAL_RCC_RNG_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBSMENR
, (
RCC_AHBSMENR_RNGSMEN
))

	)

1116 
	#__HAL_RCC_TSC_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_TSCSMEN
Ë!
RESET
)

	)

1117 
	#__HAL_RCC_RNG_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_RNGSMEN
Ë!
RESET
)

	)

1118 
	#__HAL_RCC_TSC_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_TSCSMEN
Ë=
RESET
)

	)

1119 
	#__HAL_RCC_RNG_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBSMENR
, 
RCC_AHBSMENR_RNGSMEN
Ë=
RESET
)

	)

1122 #i‡
deföed
(
STM32L062xx
Ë|| deföed(
STM32L063xx
)|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
Ë|| deföed(
STM32L041xx
)

1123 
	#__HAL_RCC_AES_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
AHBLPENR
, (
RCC_AHBSMENR_CRYPSMEN
))

	)

1124 
	#__HAL_RCC_AES_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
AHBLPENR
, (
RCC_AHBSMENR_CRYPSMEN
))

	)

1126 
	#__HAL_RCC_AES_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBLPENR
, 
RCC_AHBSMENR_CRYPSMEN
Ë!
RESET
)

	)

1127 
	#__HAL_RCC_AES_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
AHBLPENR
, 
RCC_AHBSMENR_CRYPSMEN
Ë=
RESET
)

	)

1142 #i‡
deföed
(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

1143 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

1144 || 
deföed
(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

1145 
	#__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIOESMEN
))

	)

1146 
	#__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPSMENR
,(
RCC_IOPSMENR_GPIOESMEN
))

	)

1148 
	#__HAL_RCC_GPIOE_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOESMEN
Ë!
RESET
)

	)

1149 
	#__HAL_RCC_GPIOE_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIOESMEN
Ë=
RESET
)

	)

1153 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
)

1154 
	#__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
IOPSMENR
, (
RCC_IOPSMENR_GPIODSMEN
))

	)

1155 
	#__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
IOPSMENR
,(
RCC_IOPSMENR_GPIODSMEN
))

	)

1157 
	#__HAL_RCC_GPIOD_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIODSMEN
Ë!
RESET
)

	)

1158 
	#__HAL_RCC_GPIOD_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
IOPSMENR
, 
RCC_IOPSMENR_GPIODSMEN
Ë=
RESET
)

	)

1174 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
) \

1175 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
) \

1176 || 
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
)

1177 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM2SMEN
))

	)

1178 
	#__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM6SMEN
))

	)

1179 
	#__HAL_RCC_SPI2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_SPI2SMEN
))

	)

1180 
	#__HAL_RCC_USART2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART2SMEN
))

	)

1181 
	#__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPUART1SMEN
))

	)

1182 
	#__HAL_RCC_I2C1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C1SMEN
))

	)

1183 
	#__HAL_RCC_I2C2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C2SMEN
))

	)

1184 
	#__HAL_RCC_DAC_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_DACSMEN
))

	)

1185 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPTIM1SMEN
))

	)

1187 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM2SMEN
))

	)

1188 
	#__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM6SMEN
))

	)

1189 
	#__HAL_RCC_SPI2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_SPI2SMEN
))

	)

1190 
	#__HAL_RCC_USART2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART2SMEN
))

	)

1191 
	#__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPUART1SMEN
))

	)

1192 
	#__HAL_RCC_I2C1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C1SMEN
))

	)

1193 
	#__HAL_RCC_I2C2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C2SMEN
))

	)

1194 
	#__HAL_RCC_DAC_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_DACSMEN
))

	)

1195 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPTIM1SMEN
))

	)

1197 
	#__HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM2SMEN
Ë!
RESET
)

	)

1198 
	#__HAL_RCC_TIM6_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM6SMEN
Ë!
RESET
)

	)

1199 
	#__HAL_RCC_SPI2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_SPI2SMEN
Ë!
RESET
)

	)

1200 
	#__HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART2SMEN
Ë!
RESET
)

	)

1201 
	#__HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPUART1SMEN
Ë!
RESET
)

	)

1202 
	#__HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C1SMEN
Ë!
RESET
)

	)

1203 
	#__HAL_RCC_I2C2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C2SMEN
Ë!
RESET
)

	)

1204 
	#__HAL_RCC_DAC_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_DACSMEN
Ë!
RESET
)

	)

1205 
	#__HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPTIM1SMEN
Ë!
RESET
)

	)

1206 
	#__HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM2SMEN
Ë=
RESET
)

	)

1207 
	#__HAL_RCC_TIM6_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM6SMEN
Ë=
RESET
)

	)

1208 
	#__HAL_RCC_SPI2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_SPI2SMEN
Ë=
RESET
)

	)

1209 
	#__HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART2SMEN
Ë=
RESET
)

	)

1210 
	#__HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPUART1SMEN
Ë=
RESET
)

	)

1211 
	#__HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C1SMEN
Ë=
RESET
)

	)

1212 
	#__HAL_RCC_I2C2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C2SMEN
Ë=
RESET
)

	)

1213 
	#__HAL_RCC_DAC_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_DACSMEN
Ë=
RESET
)

	)

1214 
	#__HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPTIM1SMEN
Ë=
RESET
)

	)

1219 #i‡
deföed
(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

1220 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

1221 || 
deföed
(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

1222 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM2SMEN
))

	)

1223 
	#__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM3SMEN
))

	)

1224 
	#__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM6SMEN
))

	)

1225 
	#__HAL_RCC_TIM7_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM7SMEN
))

	)

1226 
	#__HAL_RCC_SPI2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_SPI2SMEN
))

	)

1227 
	#__HAL_RCC_USART2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART2SMEN
))

	)

1228 
	#__HAL_RCC_USART4_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART4SMEN
))

	)

1229 
	#__HAL_RCC_USART5_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART5SMEN
))

	)

1230 
	#__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPUART1SMEN
))

	)

1231 
	#__HAL_RCC_I2C1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C1SMEN
))

	)

1232 
	#__HAL_RCC_I2C2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C2SMEN
))

	)

1233 
	#__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C3SMEN
))

	)

1234 
	#__HAL_RCC_DAC_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_DACSMEN
))

	)

1235 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPTIM1SMEN
))

	)

1237 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM2SMEN
))

	)

1238 
	#__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM3SMEN
))

	)

1239 
	#__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM6SMEN
))

	)

1240 
	#__HAL_RCC_TIM7_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM7SMEN
))

	)

1241 
	#__HAL_RCC_SPI2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_SPI2SMEN
))

	)

1242 
	#__HAL_RCC_USART2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART2SMEN
))

	)

1243 
	#__HAL_RCC_USART4_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART4SMEN
))

	)

1244 
	#__HAL_RCC_USART5_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART5SMEN
))

	)

1245 
	#__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPUART1SMEN
))

	)

1246 
	#__HAL_RCC_I2C1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C1SMEN
))

	)

1247 
	#__HAL_RCC_I2C2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C2SMEN
))

	)

1248 
	#__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C3SMEN
))

	)

1249 
	#__HAL_RCC_DAC_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_DACSMEN
))

	)

1250 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPTIM1SMEN
))

	)

1252 
	#__HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM2SMEN
Ë!
RESET
)

	)

1253 
	#__HAL_RCC_TIM3_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM3SMEN
Ë!
RESET
)

	)

1254 
	#__HAL_RCC_TIM6_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM6SMEN
Ë!
RESET
)

	)

1255 
	#__HAL_RCC_TIM7_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM7SMEN
Ë!
RESET
)

	)

1256 
	#__HAL_RCC_SPI2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_SPI2SMEN
Ë!
RESET
)

	)

1257 
	#__HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART2SMEN
Ë!
RESET
)

	)

1258 
	#__HAL_RCC_USART4_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART4SMEN
Ë!
RESET
)

	)

1259 
	#__HAL_RCC_USART5_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART5SMEN
Ë!
RESET
)

	)

1260 
	#__HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPUART1SMEN
Ë!
RESET
)

	)

1261 
	#__HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C1SMEN
Ë!
RESET
)

	)

1262 
	#__HAL_RCC_I2C2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C2SMEN
Ë!
RESET
)

	)

1263 
	#__HAL_RCC_I2C3_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C3SMEN
Ë!
RESET
)

	)

1264 
	#__HAL_RCC_DAC_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_DACSMEN
Ë!
RESET
)

	)

1265 
	#__HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPTIM1SMEN
Ë!
RESET
)

	)

1266 
	#__HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM2SMEN
Ë=
RESET
)

	)

1267 
	#__HAL_RCC_TIM3_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM3SMEN
Ë=
RESET
)

	)

1268 
	#__HAL_RCC_TIM6_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM6SMEN
Ë=
RESET
)

	)

1269 
	#__HAL_RCC_TIM7_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM7SMEN
Ë=
RESET
)

	)

1270 
	#__HAL_RCC_SPI2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_SPI2SMEN
Ë=
RESET
)

	)

1271 
	#__HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART2SMEN
Ë=
RESET
)

	)

1272 
	#__HAL_RCC_USART4_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART4SMEN
Ë=
RESET
)

	)

1273 
	#__HAL_RCC_USART5_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART5SMEN
Ë=
RESET
)

	)

1274 
	#__HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPUART1SMEN
Ë=
RESET
)

	)

1275 
	#__HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C1SMEN
Ë=
RESET
)

	)

1276 
	#__HAL_RCC_I2C2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C2SMEN
Ë=
RESET
)

	)

1277 
	#__HAL_RCC_I2C3_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C3SMEN
Ë=
RESET
)

	)

1278 
	#__HAL_RCC_DAC_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_DACSMEN
Ë=
RESET
)

	)

1279 
	#__HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPTIM1SMEN
Ë=
RESET
)

	)

1284 #i‡
deföed
(
STM32L011xx
Ë|| deföed(
STM32L021xx
Ë|| deföed(
STM32L031xx
Ë|| deföed(
STM32L041xx
)

1285 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM2SMEN
))

	)

1286 
	#__HAL_RCC_USART2_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART2SMEN
))

	)

1287 
	#__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPUART1SMEN
))

	)

1288 
	#__HAL_RCC_I2C1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C1SMEN
))

	)

1289 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPTIM1SMEN
))

	)

1291 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_TIM2SMEN
))

	)

1292 
	#__HAL_RCC_USART2_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USART2SMEN
))

	)

1293 
	#__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPUART1SMEN
))

	)

1294 
	#__HAL_RCC_I2C1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_I2C1SMEN
))

	)

1295 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LPTIM1SMEN
))

	)

1297 
	#__HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM2SMEN
Ë!
RESET
)

	)

1298 
	#__HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART2SMEN
Ë!
RESET
)

	)

1299 
	#__HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPUART1SMEN
Ë!
RESET
)

	)

1300 
	#__HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C1SMEN
Ë!
RESET
)

	)

1301 
	#__HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPTIM1SMEN
Ë!
RESET
)

	)

1302 
	#__HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_TIM2SMEN
Ë=
RESET
)

	)

1303 
	#__HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USART2SMEN
Ë=
RESET
)

	)

1304 
	#__HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPUART1SMEN
Ë=
RESET
)

	)

1305 
	#__HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_I2C1SMEN
Ë=
RESET
)

	)

1306 
	#__HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LPTIM1SMEN
Ë=
RESET
)

	)

1310 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
Ë&& !deföed(
STM32L051xx
Ë&& !deföed(
STM32L061xx
Ë&& !deföed(
STM32L071xx
Ë&& !deföed(
STM32L081xx
)

1311 
	#__HAL_RCC_USB_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USBSMEN
))

	)

1312 
	#__HAL_RCC_USB_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_USBSMEN
))

	)

1313 
	#__HAL_RCC_CRS_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_CRSSMEN
))

	)

1314 
	#__HAL_RCC_CRS_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_CRSSMEN
))

	)

1316 
	#__HAL_RCC_USB_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USBSMEN
Ë!
RESET
)

	)

1317 
	#__HAL_RCC_USB_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_USBSMEN
Ë=
RESET
)

	)

1318 
	#__HAL_RCC_CRS_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_CRSSMEN
Ë!
RESET
)

	)

1319 
	#__HAL_RCC_CRS_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_CRSSMEN
Ë=
RESET
)

	)

1322 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
)

1323 
	#__HAL_RCC_LCD_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LCDSMEN
))

	)

1324 
	#__HAL_RCC_LCD_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB1SMENR
, (
RCC_APB1SMENR_LCDSMEN
))

	)

1326 
	#__HAL_RCC_LCD_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LCDSMEN
Ë!
RESET
)

	)

1327 
	#__HAL_RCC_LCD_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB1SMENR
, 
RCC_APB1SMENR_LCDSMEN
Ë=
RESET
)

	)

1334 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

1335 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L082xx
) \

1336 || 
deföed
(
STM32L051xx
Ë|| deföed(
STM32L061xx
Ë|| deföed(
STM32L071xx
Ë|| deföed(
STM32L081xx
) \

1337 || 
deföed
(
STM32L031xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L011xx
Ë|| deföed(
STM32L021xx
)

1347 
	#__HAL_RCC_TIM21_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_TIM21SMEN
))

	)

1348 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1349 
	#__HAL_RCC_TIM22_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_TIM22SMEN
))

	)

1351 
	#__HAL_RCC_ADC1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_ADC1SMEN
))

	)

1352 
	#__HAL_RCC_SPI1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_SPI1SMEN
))

	)

1353 
	#__HAL_RCC_USART1_CLK_SLEEP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_USART1SMEN
))

	)

1355 
	#__HAL_RCC_TIM21_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_TIM21SMEN
))

	)

1356 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1357 
	#__HAL_RCC_TIM22_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_TIM22SMEN
))

	)

1359 
	#__HAL_RCC_ADC1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_ADC1SMEN
))

	)

1360 
	#__HAL_RCC_SPI1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_SPI1SMEN
))

	)

1361 
	#__HAL_RCC_USART1_CLK_SLEEP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_USART1SMEN
))

	)

1363 
	#__HAL_RCC_TIM21_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_TIM21SMEN
Ë!
RESET
)

	)

1364 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1365 
	#__HAL_RCC_TIM22_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_TIM22SMEN
Ë!
RESET
)

	)

1367 
	#__HAL_RCC_ADC1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_ADC1SMEN
Ë!
RESET
)

	)

1368 
	#__HAL_RCC_SPI1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_SPI1SMEN
Ë!
RESET
)

	)

1369 
	#__HAL_RCC_USART1_IS_CLK_SLEEP_ENABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, 
RCC_APB2SMENR_USART1SMEN
Ë!
RESET
)

	)

1371 
	#__HAL_RCC_TIM21_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_TIM21SMEN
Ë=
RESET
)

	)

1372 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

1373 
	#__HAL_RCC_TIM22_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_TIM22SMEN
Ë=
RESET
)

	)

1375 
	#__HAL_RCC_ADC1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_ADC1SMEN
Ë=
RESET
)

	)

1376 
	#__HAL_RCC_SPI1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_SPI1SMEN
Ë=
RESET
)

	)

1377 
	#__HAL_RCC_USART1_IS_CLK_SLEEP_DISABLED
(Ë(
	`READ_BIT
(
RCC
->
APB2SMENR
, (
RCC_APB2SMENR_USART1SMEN
Ë=
RESET
)

	)

1393 
	#__HAL_RCC_LSECSS_EXTI_ENABLE_IT
(Ë
	`SET_BIT
(
EXTI
->
IMR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1399 
	#__HAL_RCC_LSECSS_EXTI_DISABLE_IT
(Ë
	`CLEAR_BIT
(
EXTI
->
IMR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1405 
	#__HAL_RCC_LSECSS_EXTI_ENABLE_EVENT
(Ë
	`SET_BIT
(
EXTI
->
EMR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1411 
	#__HAL_RCC_LSECSS_EXTI_DISABLE_EVENT
(Ë
	`CLEAR_BIT
(
EXTI
->
EMR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1418 
	#__HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1425 
	#__HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1432 
	#__HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1438 
	#__HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
RCC_EXTI_LINE_LSECSS
)

	)

1444 
	#__HAL_RCC_LSECSS_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë\

	)

1446 
__HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE
(); \

1447 
__HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE
(); \

1454 
	#__HAL_RCC_LSECSS_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë\

	)

1456 
__HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE
(); \

1457 
__HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE
(); \

1464 
	#__HAL_RCC_LSECSS_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
RCC_EXTI_LINE_LSECSS
))

	)

1470 
	#__HAL_RCC_LSECSS_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
RCC_EXTI_LINE_LSECSS
))

	)

1476 
	#__HAL_RCC_LSECSS_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
RCC_EXTI_LINE_LSECSS
)

	)

1479 #i‡
deföed
(
LCD
)

1500 
	#__HAL_RCC_LCD_CONFIG
(
__LCD_CLKSOURCE__
Ë
	`__HAL_RCC_RTC_CONFIG
(__LCD_CLKSOURCE__)

	)

1504 
	#__HAL_RCC_GET_LCD_SOURCE
(Ë
	`__HAL_RCC_GET_RTC_SOURCE
()

	)

1508 
	#__HAL_RCC_GET_LCD_HSE_PRESCALER
(Ë
	`__HAL_RCC_GET_RTC_HSE_PRESCALER
()

	)

1524 
	#__HAL_RCC_I2C1_CONFIG
(
__I2C1_CLKSOURCE__
Ë\

	)

1525 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_I2C1SEL
, (
uöt32_t
)(
__I2C1_CLKSOURCE__
))

1533 
	#__HAL_RCC_GET_I2C1_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_I2C1SEL
)))

	)

1535 #i‡
deföed
(
RCC_CCIPR_I2C3SEL
)

1544 
	#__HAL_RCC_I2C3_CONFIG
(
__I2C3_CLKSOURCE__
Ë\

	)

1545 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_I2C3SEL
, (
uöt32_t
)(
__I2C3_CLKSOURCE__
))

1553 
	#__HAL_RCC_GET_I2C3_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_I2C3SEL
)))

	)

1557 #i‡
deföed
 (
RCC_CCIPR_USART1SEL
)

1567 
	#__HAL_RCC_USART1_CONFIG
(
__USART1_CLKSOURCE__
Ë\

	)

1568 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_USART1SEL
, (
uöt32_t
)(
__USART1_CLKSOURCE__
))

1577 
	#__HAL_RCC_GET_USART1_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_USART1SEL
)))

	)

1589 
	#__HAL_RCC_USART2_CONFIG
(
__USART2_CLKSOURCE__
Ë\

	)

1590 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_USART2SEL
, (
uöt32_t
)(
__USART2_CLKSOURCE__
))

1599 
	#__HAL_RCC_GET_USART2_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_USART2SEL
)))

	)

1610 
	#__HAL_RCC_LPUART1_CONFIG
(
__LPUART1_CLKSOURCE__
Ë\

	)

1611 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_LPUART1SEL
, (
uöt32_t
)(
__LPUART1_CLKSOURCE__
))

1620 
	#__HAL_RCC_GET_LPUART1_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_LPUART1SEL
)))

	)

1631 
	#__HAL_RCC_LPTIM1_CONFIG
(
__LPTIM1_CLKSOURCE__
Ë\

	)

1632 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_LPTIM1SEL
, (
uöt32_t
)(
__LPTIM1_CLKSOURCE__
))

1641 
	#__HAL_RCC_GET_LPTIM1_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_LPTIM1SEL
)))

	)

1643 #i‡
deföed
(
USB
)

1650 
	#__HAL_RCC_USB_CONFIG
(
__USB_CLKSOURCE__
Ë\

	)

1651 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_HSI48SEL
, (
uöt32_t
)(
__USB_CLKSOURCE__
))

1658 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_HSI48SEL
)))

	)

1661 #i‡
deföed
(
RNG
)

1668 
	#__HAL_RCC_RNG_CONFIG
(
__RNG_CLKSOURCE__
Ë\

	)

1669 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_HSI48SEL
, (
uöt32_t
)(
__RNG_CLKSOURCE__
))

1676 
	#__HAL_RCC_GET_RNG_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_HSI48SEL
)))

	)

1679 #i‡
deföed
(
RCC_CCIPR_HSI48SEL
)

1690 
	#__HAL_RCC_HSI48M_CONFIG
(
__HSI48M_CLKSOURCE__
Ë\

	)

1691 
MODIFY_REG
(
RCC
->
CCIPR
, 
RCC_CCIPR_HSI48SEL
, (
uöt32_t
)(
__HSI48M_CLKSOURCE__
))

1700 
	#__HAL_RCC_GET_HSI48M_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CCIPR
, 
RCC_CCIPR_HSI48SEL
)))

	)

1708 
	#__HAL_RCC_HSISTOP_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSIKERON
)

	)

1715 
	#__HAL_RCC_HSISTOP_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSIKERON
)

	)

1727 
	#__HAL_RCC_LSEDRIVE_CONFIG
(
__RCC_LSEDRIVE__
Ë(
	`MODIFY_REG
(
RCC
->
CSR
,\

	)

1728 
RCC_CSR_LSEDRV
, (
uöt32_t
)(
__RCC_LSEDRIVE__
) ))

1738 
	#__HAL_RCC_WAKEUPSTOP_CLK_CONFIG
(
__RCC_STOPWUCLK__
Ë(
	`MODIFY_REG
(
RCC
->
CFGR
,\

	)

1739 
RCC_CFGR_STOPWUCK
, (
uöt32_t
)(
__RCC_STOPWUCLK__
) ))

1741 #i‡
deföed
(
CRS
)

1752 
	#__HAL_RCC_CRS_ENABLE_IT
(
__INTERRUPT__
Ë
	`SET_BIT
(
CRS
->
CR
, (__INTERRUPT__))

	)

1764 
	#__HAL_RCC_CRS_DISABLE_IT
(
__INTERRUPT__
Ë
	`CLEAR_BIT
(
CRS
->
CR
,(__INTERRUPT__))

	)

1775 
	#__HAL_RCC_CRS_GET_IT_SOURCE
(
__INTERRUPT__
Ë((
CRS
->
CR
 & (__INTERRUPT__))? 
SET
 : 
RESET
)

	)

1789 
	#__HAL_RCC_CRS_CLEAR_IT
(
__INTERRUPT__
Ëdÿ{ \

	)

1790 if(((
__INTERRUPT__
Ë& 
RCC_CRS_IT_ERROR_MASK
Ë!
RESET
) \

1792 
WRITE_REG
(
CRS
->
ICR
, 
CRS_ICR_ERRC
 | ((
__INTERRUPT__
Ë& ~
RCC_CRS_IT_ERROR_MASK
)); \

1796 
WRITE_REG
(
CRS
->
ICR
, (
__INTERRUPT__
)); \

1813 
	#__HAL_RCC_CRS_GET_FLAG
(
__FLAG__
Ë((
CRS
->
ISR
 & (__FLAG__)Ë=(__FLAG__))

	)

1828 
	#__HAL_RCC_CRS_CLEAR_FLAG
(
__FLAG__
Ëdÿ{ \

	)

1829 if(((
__FLAG__
Ë& 
RCC_CRS_FLAG_ERROR_MASK
Ë!
RESET
) \

1831 
WRITE_REG
(
CRS
->
ICR
, 
CRS_ICR_ERRC
 | ((
__FLAG__
Ë& ~
RCC_CRS_FLAG_ERROR_MASK
)); \

1835 
WRITE_REG
(
CRS
->
ICR
, (
__FLAG__
)); \

1844 
	#__HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE
(Ë
	`SET_BIT
(
CRS
->
CR
, 
CRS_CR_CEN
)

	)

1850 
	#__HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE
(Ë
	`CLEAR_BIT
(
CRS
->
CR
, 
CRS_CR_CEN
)

	)

1857 
	#__HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE
(Ë
	`SET_BIT
(
CRS
->
CR
, 
CRS_CR_AUTOTRIMEN
)

	)

1863 
	#__HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE
(Ë
	`CLEAR_BIT
(
CRS
->
CR
, 
CRS_CR_AUTOTRIMEN
)

	)

1875 
	#__HAL_RCC_CRS_RELOADVALUE_CALCULATE
(
__FTARGET__
, 
__FSYNC__
Ë(((__FTARGET__Ë/ (__FSYNC__)Ë- 1)

	)

1880 #i‡
deföed
(
RCC_CR_HSIOUTEN
)

1885 
	#__HAL_RCC_HSI_OUT_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSIOUTEN
)

	)

1891 
	#__HAL_RCC_HSI_OUT_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSIOUTEN
)

	)

1895 #i‡
deföed
(
STM32L053xx
Ë|| deföed(
STM32L063xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
)\

1896 || 
deföed
(
STM32L052xx
Ë|| deföed(
STM32L062xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L082xx
)

1905 
	#__HAL_RCC_HSI48_ENABLE
(Ëdÿ{ 
	`SET_BIT
(
RCC
->
CRRCR
, 
RCC_CRRCR_HSI48ON
); \

	)

1906 
SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SYSCFGEN
); \

1907 
SET_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENREF_HSI48
); \

1912 
	#__HAL_RCC_HSI48_DISABLE
(Ëdÿ{ 
	`CLEAR_BIT
(
RCC
->
CRRCR
, 
RCC_CRRCR_HSI48ON
); \

	)

1913 
CLEAR_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENREF_HSI48
); \

1921 
	#__HAL_RCC_GET_HSI48_STATE
(Ë\

	)

1922 (((
uöt32_t
)(
READ_BIT
(
RCC
->
CRRCR
, 
RCC_CRRCR_HSI48ON
)Ë!
RESET
Ë? 
RCC_HSI48_ON
 : 
RCC_HSI48_OFF
)

1928 
	#__HAL_RCC_HSI48M_DIV6_OUT_ENABLE
(Ë
	`SET_BIT
(
RCC
->
CR
, 
RCC_CRRCR_HSI48DIV6OUTEN
)

	)

1929 
	#__HAL_RCC_HSI48M_DIV6_OUT_DISABLE
(Ë
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CRRCR_HSI48DIV6OUTEN
)

	)

1949 
HAL_SètusTy≥Def
 
HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1950 
HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1951 
uöt32_t
 
HAL_RCCEx_GëPîùhCLKFªq
(uöt32_à
PîùhClk
);

1954 
HAL_RCCEx_E«bÀLSECSS
();

1955 
HAL_RCCEx_DißbÀLSECSS
();

1956 
HAL_RCCEx_E«bÀLSECSS_IT
();

1957 
HAL_RCCEx_LSECSS_IRQH™dÀr
();

1958 
HAL_RCCEx_LSECSS_CÆlback
();

1961 #i‡
deföed
(
SYSCFG_CFGR3_ENREF_HSI48
)

1962 
HAL_RCCEx_E«bÀHSI48_VREFINT
();

1963 
HAL_RCCEx_DißbÀHSI48_VREFINT
();

1970 #i‡
deföed
(
CRS
)

1976 
HAL_RCCEx_CRSC⁄fig
(
RCC_CRSInôTy≥Def
 *
pInô
);

1977 
HAL_RCCEx_CRSSo·w¨eSynchr⁄iz©i⁄Gíî©e
();

1978 
HAL_RCCEx_CRSGëSynchr⁄iz©i⁄Info
(
RCC_CRSSynchroInfoTy≥Def
 *
pSynchroInfo
);

1979 
uöt32_t
 
HAL_RCCEx_CRSWaôSynchr⁄iz©i⁄
(uöt32_à
Timeout
);

1980 
HAL_RCCEx_CRS_IRQH™dÀr
();

1981 
HAL_RCCEx_CRS_SyncOkCÆlback
();

1982 
HAL_RCCEx_CRS_SyncW¨nCÆlback
();

1983 
HAL_RCCEx_CRS_Ex≥˘edSyncCÆlback
();

1984 
HAL_RCCEx_CRS_Eº‹CÆlback
(
uöt32_t
 
Eº‹
);

2004 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim.h

37 #i‚de‡
__STM32L0xx_HAL_TIM_H


38 
	#__STM32L0xx_HAL_TIM_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

69 
uöt32_t
 
PªsˇÀr
;

72 
uöt32_t
 
Cou¡îMode
;

75 
uöt32_t
 
Pîiod
;

79 
uöt32_t
 
ClockDivisi⁄
;

81 } 
	tTIM_Ba£_InôTy≥Def
;

96 
uöt32_t
 
OCMode
;

99 
uöt32_t
 
Pul£
;

102 
uöt32_t
 
OCPﬁ¨ôy
;

105 
uöt32_t
 
OCFa°Mode
;

109 } 
	tTIM_OC_InôTy≥Def
;

122 
uöt32_t
 
OCMode
;

125 
uöt32_t
 
Pul£
;

128 
uöt32_t
 
OCPﬁ¨ôy
;

132 
uöt32_t
 
ICPﬁ¨ôy
;

135 
uöt32_t
 
ICSñe˘i⁄
;

138 
uöt32_t
 
ICFûãr
;

140 } 
	tTIM_O√Pul£_InôTy≥Def
;

154 
uöt32_t
 
ICPﬁ¨ôy
;

157 
uöt32_t
 
ICSñe˘i⁄
;

160 
uöt32_t
 
ICPªsˇÀr
;

163 
uöt32_t
 
ICFûãr
;

165 } 
	tTIM_IC_InôTy≥Def
;

179 
uöt32_t
 
EncodîMode
;

182 
uöt32_t
 
IC1Pﬁ¨ôy
;

185 
uöt32_t
 
IC1Sñe˘i⁄
;

188 
uöt32_t
 
IC1PªsˇÀr
;

191 
uöt32_t
 
IC1Fûãr
;

194 
uöt32_t
 
IC2Pﬁ¨ôy
;

197 
uöt32_t
 
IC2Sñe˘i⁄
;

200 
uöt32_t
 
IC2PªsˇÀr
;

203 
uöt32_t
 
IC2Fûãr
;

205 } 
	tTIM_Encodî_InôTy≥Def
;

218 
uöt32_t
 
ClockSour˚
;

220 
uöt32_t
 
ClockPﬁ¨ôy
;

222 
uöt32_t
 
ClockPªsˇÀr
;

224 
uöt32_t
 
ClockFûãr
;

226 }
	tTIM_ClockC⁄figTy≥Def
;

239 
uöt32_t
 
CÀ¨I≈utSèã
;

241 
uöt32_t
 
CÀ¨I≈utSour˚
;

243 
uöt32_t
 
CÀ¨I≈utPﬁ¨ôy
;

245 
uöt32_t
 
CÀ¨I≈utPªsˇÀr
;

247 
uöt32_t
 
CÀ¨I≈utFûãr
;

249 }
	tTIM_CÀ¨I≈utC⁄figTy≥Def
;

261 
uöt32_t
 
SœveMode
;

263 
uöt32_t
 
I≈utTriggî
;

265 
uöt32_t
 
TriggîPﬁ¨ôy
;

267 
uöt32_t
 
TriggîPªsˇÀr
;

269 
uöt32_t
 
TriggîFûãr
;

272 }
	tTIM_SœveC⁄figTy≥Def
;

285 
HAL_TIM_STATE_RESET
 = 0x00U,

286 
HAL_TIM_STATE_READY
 = 0x01U,

287 
HAL_TIM_STATE_BUSY
 = 0x02U,

288 
HAL_TIM_STATE_TIMEOUT
 = 0x03U,

289 
HAL_TIM_STATE_ERROR
 = 0x04U

290 }
	tHAL_TIM_SèãTy≥Def
;

303 
HAL_TIM_ACTIVE_CHANNEL_1
 = 0x01U,

304 
HAL_TIM_ACTIVE_CHANNEL_2
 = 0x02U,

305 
HAL_TIM_ACTIVE_CHANNEL_3
 = 0x04U,

306 
HAL_TIM_ACTIVE_CHANNEL_4
 = 0x08U,

307 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
 = 0x00U

308 }
	tHAL_TIM_A˘iveCh™√l
;

321 
TIM_Ty≥Def
 *
In°™˚
;

322 
TIM_Ba£_InôTy≥Def
 
Inô
;

323 
HAL_TIM_A˘iveCh™√l
 
Ch™√l
;

324 
DMA_H™dÀTy≥Def
 *
hdma
[7];

326 
HAL_LockTy≥Def
 
Lock
;

327 
__IO
 
HAL_TIM_SèãTy≥Def
 
Sèã
;

328 }
	tTIM_H™dÀTy≥Def
;

342 
	#IS_TIM_PERIOD
(
__PERIOD__
Ë((__PERIOD__Ë<0xFFFFU)

	)

344 
	#IS_TIM_PRESCALER
(
__PRESCALER__
Ë((__PRESCALER__Ë<0xFFFFU)

	)

350 
	#TIM_INPUTCHANNELPOLARITY_RISING
 ((
uöt32_t
)0x00000000UË

	)

351 
	#TIM_INPUTCHANNELPOLARITY_FALLING
 (
TIM_CCER_CC1P
Ë

	)

352 
	#TIM_INPUTCHANNELPOLARITY_BOTHEDGE
 (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
Ë

	)

360 
	#TIM_ETRPOLARITY_INVERTED
 (
TIM_SMCR_ETP
Ë

	)

361 
	#TIM_ETRPOLARITY_NONINVERTED
 ((
uöt32_t
)0x0000UË

	)

369 
	#TIM_ETRPRESCALER_DIV1
 ((
uöt32_t
)0x0000UË

	)

370 
	#TIM_ETRPRESCALER_DIV2
 (
TIM_SMCR_ETPS_0
Ë

	)

371 
	#TIM_ETRPRESCALER_DIV4
 (
TIM_SMCR_ETPS_1
Ë

	)

372 
	#TIM_ETRPRESCALER_DIV8
 (
TIM_SMCR_ETPS
Ë

	)

380 
	#TIM_COUNTERMODE_UP
 ((
uöt32_t
)0x0000U)

	)

381 
	#TIM_COUNTERMODE_DOWN
 
TIM_CR1_DIR


	)

382 
	#TIM_COUNTERMODE_CENTERALIGNED1
 
TIM_CR1_CMS_0


	)

383 
	#TIM_COUNTERMODE_CENTERALIGNED2
 
TIM_CR1_CMS_1


	)

384 
	#TIM_COUNTERMODE_CENTERALIGNED3
 
TIM_CR1_CMS


	)

388 
	#IS_TIM_COUNTER_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_COUNTERMODE_UP
Ë|| \

	)

389 ((
__MODE__
Ë=
TIM_COUNTERMODE_DOWN
) || \

390 ((
__MODE__
Ë=
TIM_COUNTERMODE_CENTERALIGNED1
) || \

391 ((
__MODE__
Ë=
TIM_COUNTERMODE_CENTERALIGNED2
) || \

392 ((
__MODE__
Ë=
TIM_COUNTERMODE_CENTERALIGNED3
))

400 
	#TIM_CLOCKDIVISION_DIV1
 ((
uöt32_t
)0x0000U)

	)

401 
	#TIM_CLOCKDIVISION_DIV2
 (
TIM_CR1_CKD_0
)

	)

402 
	#TIM_CLOCKDIVISION_DIV4
 (
TIM_CR1_CKD_1
)

	)

406 
	#IS_TIM_CLOCKDIVISION_DIV
(
__DIV__
Ë(((__DIV__Ë=
TIM_CLOCKDIVISION_DIV1
Ë|| \

	)

407 ((
__DIV__
Ë=
TIM_CLOCKDIVISION_DIV2
) || \

408 ((
__DIV__
Ë=
TIM_CLOCKDIVISION_DIV4
))

414 
	#TIM_OCMODE_TIMING
 ((
uöt32_t
)0x0000U)

	)

415 
	#TIM_OCMODE_ACTIVE
 (
TIM_CCMR1_OC1M_0
)

	)

416 
	#TIM_OCMODE_INACTIVE
 (
TIM_CCMR1_OC1M_1
)

	)

417 
	#TIM_OCMODE_TOGGLE
 (
TIM_CCMR1_OC1M_0
 | 
TIM_CCMR1_OC1M_1
)

	)

418 
	#TIM_OCMODE_PWM1
 (
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_2
)

	)

419 
	#TIM_OCMODE_PWM2
 (
TIM_CCMR1_OC1M
)

	)

420 
	#TIM_OCMODE_FORCED_ACTIVE
 (
TIM_CCMR1_OC1M_0
 | 
TIM_CCMR1_OC1M_2
)

	)

421 
	#TIM_OCMODE_FORCED_INACTIVE
 (
TIM_CCMR1_OC1M_2
)

	)

426 
	#IS_TIM_PWM_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_OCMODE_PWM1
Ë|| \

	)

427 ((
__MODE__
Ë=
TIM_OCMODE_PWM2
))

429 
	#IS_TIM_OC_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_OCMODE_TIMING
Ë|| \

	)

430 ((
__MODE__
Ë=
TIM_OCMODE_ACTIVE
) || \

431 ((
__MODE__
Ë=
TIM_OCMODE_INACTIVE
) || \

432 ((
__MODE__
Ë=
TIM_OCMODE_TOGGLE
) || \

433 ((
__MODE__
Ë=
TIM_OCMODE_FORCED_ACTIVE
) || \

434 ((
__MODE__
Ë=
TIM_OCMODE_FORCED_INACTIVE
))

440 
	#TIM_OUTPUTSTATE_DISABLE
 ((
uöt32_t
)0x0000U)

	)

441 
	#TIM_OUTPUTSTATE_ENABLE
 (
TIM_CCER_CC1E
)

	)

449 
	#TIM_OCFAST_DISABLE
 ((
uöt32_t
)0x0000U)

	)

450 
	#TIM_OCFAST_ENABLE
 (
TIM_CCMR1_OC1FE
)

	)

454 
	#IS_TIM_FAST_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_OCFAST_DISABLE
Ë|| \

	)

455 ((
__STATE__
Ë=
TIM_OCFAST_ENABLE
))

460 
	#TIM_OUTPUTNSTATE_DISABLE
 ((
uöt32_t
)0x0000U)

	)

461 
	#TIM_OUTPUTNSTATE_ENABLE
 (
TIM_CCER_CC1NE
)

	)

469 
	#TIM_OCPOLARITY_HIGH
 ((
uöt32_t
)0x0000U)

	)

470 
	#TIM_OCPOLARITY_LOW
 (
TIM_CCER_CC1P
)

	)

474 
	#IS_TIM_OC_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_OCPOLARITY_HIGH
Ë|| \

	)

475 ((
__POLARITY__
Ë=
TIM_OCPOLARITY_LOW
))

480 
	#TIM_CHANNEL_1
 ((
uöt32_t
)0x0000U)

	)

481 
	#TIM_CHANNEL_2
 ((
uöt32_t
)0x0004U)

	)

482 
	#TIM_CHANNEL_3
 ((
uöt32_t
)0x0008U)

	)

483 
	#TIM_CHANNEL_4
 ((
uöt32_t
)0x000CU)

	)

484 
	#TIM_CHANNEL_ALL
 ((
uöt32_t
)0x0018U)

	)

489 
	#IS_TIM_CHANNELS
(
__CHANNEL__
Ë(((__CHANNEL__Ë=
TIM_CHANNEL_1
Ë|| \

	)

490 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

491 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
) || \

492 ((
__CHANNEL__
Ë=
TIM_CHANNEL_4
) || \

493 ((
__CHANNEL__
Ë=
TIM_CHANNEL_ALL
))

495 
	#IS_TIM_OPM_CHANNELS
(
__CHANNEL__
Ë(((__CHANNEL__Ë=
TIM_CHANNEL_1
Ë|| \

	)

496 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))

502 
	#TIM_ICPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

503 
	#TIM_ICPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

504 
	#TIM_ICPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

508 
	#IS_TIM_IC_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_ICPOLARITY_RISING
Ë|| \

	)

509 ((
__POLARITY__
Ë=
TIM_ICPOLARITY_FALLING
) || \

510 ((
__POLARITY__
Ë=
TIM_ICPOLARITY_BOTHEDGE
))

516 
	#TIM_ICSELECTION_DIRECTTI
 (
TIM_CCMR1_CC1S_0
Ë

	)

518 
	#TIM_ICSELECTION_INDIRECTTI
 (
TIM_CCMR1_CC1S_1
Ë

	)

520 
	#TIM_ICSELECTION_TRC
 (
TIM_CCMR1_CC1S
Ë

	)

522 
	#IS_TIM_IC_SELECTION
(
__SELECTION__
Ë(((__SELECTION__Ë=
TIM_ICSELECTION_DIRECTTI
Ë|| \

	)

523 ((
__SELECTION__
Ë=
TIM_ICSELECTION_INDIRECTTI
) || \

524 ((
__SELECTION__
Ë=
TIM_ICSELECTION_TRC
))

532 
	#TIM_ICPSC_DIV1
 ((
uöt32_t
)0x0000UË

	)

533 
	#TIM_ICPSC_DIV2
 (
TIM_CCMR1_IC1PSC_0
Ë

	)

534 
	#TIM_ICPSC_DIV4
 (
TIM_CCMR1_IC1PSC_1
Ë

	)

535 
	#TIM_ICPSC_DIV8
 (
TIM_CCMR1_IC1PSC
Ë

	)

539 
	#IS_TIM_IC_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_ICPSC_DIV1
Ë|| \

	)

540 ((
__PRESCALER__
Ë=
TIM_ICPSC_DIV2
) || \

541 ((
__PRESCALER__
Ë=
TIM_ICPSC_DIV4
) || \

542 ((
__PRESCALER__
Ë=
TIM_ICPSC_DIV8
))

547 
	#TIM_OPMODE_SINGLE
 (
TIM_CR1_OPM
)

	)

548 
	#TIM_OPMODE_REPETITIVE
 ((
uöt32_t
)0x0000U)

	)

552 
	#IS_TIM_OPM_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_OPMODE_SINGLE
Ë|| \

	)

553 ((
__MODE__
Ë=
TIM_OPMODE_REPETITIVE
))

558 
	#TIM_ENCODERMODE_TI1
 (
TIM_SMCR_SMS_0
)

	)

559 
	#TIM_ENCODERMODE_TI2
 (
TIM_SMCR_SMS_1
)

	)

560 
	#TIM_ENCODERMODE_TI12
 (
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
)

	)

564 
	#IS_TIM_ENCODER_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_ENCODERMODE_TI1
Ë|| \

	)

565 ((
__MODE__
Ë=
TIM_ENCODERMODE_TI2
) || \

566 ((
__MODE__
Ë=
TIM_ENCODERMODE_TI12
))

571 
	#TIM_IT_UPDATE
 (
TIM_DIER_UIE
)

	)

572 
	#TIM_IT_CC1
 (
TIM_DIER_CC1IE
)

	)

573 
	#TIM_IT_CC2
 (
TIM_DIER_CC2IE
)

	)

574 
	#TIM_IT_CC3
 (
TIM_DIER_CC3IE
)

	)

575 
	#TIM_IT_CC4
 (
TIM_DIER_CC4IE
)

	)

576 
	#TIM_IT_TRIGGER
 (
TIM_DIER_TIE
)

	)

584 
	#TIM_DMA_UPDATE
 (
TIM_DIER_UDE
)

	)

585 
	#TIM_DMA_CC1
 (
TIM_DIER_CC1DE
)

	)

586 
	#TIM_DMA_CC2
 (
TIM_DIER_CC2DE
)

	)

587 
	#TIM_DMA_CC3
 (
TIM_DIER_CC3DE
)

	)

588 
	#TIM_DMA_CC4
 (
TIM_DIER_CC4DE
)

	)

589 
	#TIM_DMA_TRIGGER
 (
TIM_DIER_TDE
)

	)

593 
	#IS_TIM_DMA_SOURCE
(
__SOURCE__
Ë((((__SOURCE__Ë& 0xFFFFA0FFUË=0x00000000UË&& ((__SOURCE__Ë!0x00000000U))

	)

600 
	#TIM_EVENTSOURCE_UPDATE
 
TIM_EGR_UG


	)

601 
	#TIM_EVENTSOURCE_CC1
 
TIM_EGR_CC1G


	)

602 
	#TIM_EVENTSOURCE_CC2
 
TIM_EGR_CC2G


	)

603 
	#TIM_EVENTSOURCE_CC3
 
TIM_EGR_CC3G


	)

604 
	#TIM_EVENTSOURCE_CC4
 
TIM_EGR_CC4G


	)

605 
	#TIM_EVENTSOURCE_TRIGGER
 
TIM_EGR_TG


	)

609 
	#IS_TIM_EVENT_SOURCE
(
__SOURCE__
Ë((((__SOURCE__Ë& 0xFFFFFFA0UË=0x00000000UË&& ((__SOURCE__Ë!0x00000000U))

	)

615 
	#TIM_FLAG_UPDATE
 (
TIM_SR_UIF
)

	)

616 
	#TIM_FLAG_CC1
 (
TIM_SR_CC1IF
)

	)

617 
	#TIM_FLAG_CC2
 (
TIM_SR_CC2IF
)

	)

618 
	#TIM_FLAG_CC3
 (
TIM_SR_CC3IF
)

	)

619 
	#TIM_FLAG_CC4
 (
TIM_SR_CC4IF
)

	)

620 
	#TIM_FLAG_TRIGGER
 (
TIM_SR_TIF
)

	)

621 
	#TIM_FLAG_CC1OF
 (
TIM_SR_CC1OF
)

	)

622 
	#TIM_FLAG_CC2OF
 (
TIM_SR_CC2OF
)

	)

623 
	#TIM_FLAG_CC3OF
 (
TIM_SR_CC3OF
)

	)

624 
	#TIM_FLAG_CC4OF
 (
TIM_SR_CC4OF
)

	)

632 
	#TIM_CLOCKSOURCE_ETRMODE2
 (
TIM_SMCR_ETPS_1
)

	)

633 
	#TIM_CLOCKSOURCE_INTERNAL
 (
TIM_SMCR_ETPS_0
)

	)

634 
	#TIM_CLOCKSOURCE_ITR0
 ((
uöt32_t
)0x0000U)

	)

635 
	#TIM_CLOCKSOURCE_ITR1
 (
TIM_SMCR_TS_0
)

	)

636 
	#TIM_CLOCKSOURCE_ITR2
 (
TIM_SMCR_TS_1
)

	)

637 
	#TIM_CLOCKSOURCE_ITR3
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
)

	)

638 
	#TIM_CLOCKSOURCE_TI1ED
 (
TIM_SMCR_TS_2
)

	)

639 
	#TIM_CLOCKSOURCE_TI1
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_2
)

	)

640 
	#TIM_CLOCKSOURCE_TI2
 (
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_2
)

	)

641 
	#TIM_CLOCKSOURCE_ETRMODE1
 (
TIM_SMCR_TS
)

	)

646 
	#IS_TIM_CLOCKSOURCE
(
__CLOCK__
Ë(((__CLOCK__Ë=
TIM_CLOCKSOURCE_INTERNAL
Ë|| \

	)

647 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ETRMODE2
) || \

648 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR0
) || \

649 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR1
) || \

650 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR2
) || \

651 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR3
) || \

652 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_TI1ED
) || \

653 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_TI1
) || \

654 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_TI2
) || \

655 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ETRMODE1
))

661 
	#TIM_CLOCKPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

662 
	#TIM_CLOCKPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

663 
	#TIM_CLOCKPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

664 
	#TIM_CLOCKPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

665 
	#TIM_CLOCKPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

669 
	#IS_TIM_CLOCKPOLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_CLOCKPOLARITY_INVERTED
Ë|| \

	)

670 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_NONINVERTED
) || \

671 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_RISING
) || \

672 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_FALLING
) || \

673 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_BOTHEDGE
))

678 
	#TIM_CLOCKPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

679 
	#TIM_CLOCKPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

680 
	#TIM_CLOCKPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

681 
	#TIM_CLOCKPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

685 
	#IS_TIM_CLOCKPRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_CLOCKPRESCALER_DIV1
Ë|| \

	)

686 ((
__PRESCALER__
Ë=
TIM_CLOCKPRESCALER_DIV2
) || \

687 ((
__PRESCALER__
Ë=
TIM_CLOCKPRESCALER_DIV4
) || \

688 ((
__PRESCALER__
Ë=
TIM_CLOCKPRESCALER_DIV8
))

692 
	#IS_TIM_CLOCKFILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

697 
	#TIM_CLEARINPUTSOURCE_ETR
 ((
uöt32_t
)0x0001U)

	)

698 
	#TIM_CLEARINPUTSOURCE_NONE
 ((
uöt32_t
)0x0000U)

	)

703 
	#IS_TIM_CLEARINPUT_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
TIM_CLEARINPUTSOURCE_NONE
Ë|| \

	)

704 ((
__SOURCE__
Ë=
TIM_CLEARINPUTSOURCE_ETR
))

710 
	#TIM_CLEARINPUTPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

711 
	#TIM_CLEARINPUTPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

715 
	#IS_TIM_CLEARINPUT_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_CLEARINPUTPOLARITY_INVERTED
Ë|| \

	)

716 ((
__POLARITY__
Ë=
TIM_CLEARINPUTPOLARITY_NONINVERTED
))

722 
	#TIM_CLEARINPUTPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

723 
	#TIM_CLEARINPUTPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

724 
	#TIM_CLEARINPUTPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

725 
	#TIM_CLEARINPUTPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

729 
	#IS_TIM_CLEARINPUT_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_CLEARINPUTPRESCALER_DIV1
Ë|| \

	)

730 ((
__PRESCALER__
Ë=
TIM_CLEARINPUTPRESCALER_DIV2
) || \

731 ((
__PRESCALER__
Ë=
TIM_CLEARINPUTPRESCALER_DIV4
) || \

732 ((
__PRESCALER__
Ë=
TIM_CLEARINPUTPRESCALER_DIV8
))

736 
	#IS_TIM_CLEARINPUT_FILTER
(
ICFILTER
Ë((ICFILTERË<0xFU)

	)

742 
	#TIM_TRGO_RESET
 ((
uöt32_t
)0x0000U)

	)

743 
	#TIM_TRGO_ENABLE
 (
TIM_CR2_MMS_0
)

	)

744 
	#TIM_TRGO_UPDATE
 (
TIM_CR2_MMS_1
)

	)

745 
	#TIM_TRGO_OC1
 ((
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
))

	)

746 
	#TIM_TRGO_OC1REF
 (
TIM_CR2_MMS_2
)

	)

747 
	#TIM_TRGO_OC2REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_0
))

	)

748 
	#TIM_TRGO_OC3REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
))

	)

749 
	#TIM_TRGO_OC4REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
))

	)

753 
	#IS_TIM_TRGO_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
TIM_TRGO_RESET
Ë|| \

	)

754 ((
__SOURCE__
Ë=
TIM_TRGO_ENABLE
) || \

755 ((
__SOURCE__
Ë=
TIM_TRGO_UPDATE
) || \

756 ((
__SOURCE__
Ë=
TIM_TRGO_OC1
) || \

757 ((
__SOURCE__
Ë=
TIM_TRGO_OC1REF
) || \

758 ((
__SOURCE__
Ë=
TIM_TRGO_OC2REF
) || \

759 ((
__SOURCE__
Ë=
TIM_TRGO_OC3REF
) || \

760 ((
__SOURCE__
Ë=
TIM_TRGO_OC4REF
))

767 
	#TIM_SLAVEMODE_DISABLE
 ((
uöt32_t
)0x0000U)

	)

768 
	#TIM_SLAVEMODE_RESET
 ((
uöt32_t
)0x0004U)

	)

769 
	#TIM_SLAVEMODE_GATED
 ((
uöt32_t
)0x0005U)

	)

770 
	#TIM_SLAVEMODE_TRIGGER
 ((
uöt32_t
)0x0006U)

	)

771 
	#TIM_SLAVEMODE_EXTERNAL1
 ((
uöt32_t
)0x0007U)

	)

775 
	#IS_TIM_SLAVE_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_SLAVEMODE_DISABLE
Ë|| \

	)

776 ((
__MODE__
Ë=
TIM_SLAVEMODE_GATED
) || \

777 ((
__MODE__
Ë=
TIM_SLAVEMODE_RESET
) || \

778 ((
__MODE__
Ë=
TIM_SLAVEMODE_TRIGGER
) || \

779 ((
__MODE__
Ë=
TIM_SLAVEMODE_EXTERNAL1
))

785 
	#TIM_MASTERSLAVEMODE_ENABLE
 ((
uöt32_t
)0x0080U)

	)

786 
	#TIM_MASTERSLAVEMODE_DISABLE
 ((
uöt32_t
)0x0000U)

	)

790 
	#IS_TIM_MSM_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_MASTERSLAVEMODE_ENABLE
Ë|| \

	)

791 ((
__STATE__
Ë=
TIM_MASTERSLAVEMODE_DISABLE
))

796 
	#TIM_TS_ITR0
 ((
uöt32_t
)0x0000U)

	)

797 
	#TIM_TS_ITR1
 ((
uöt32_t
)0x0010U)

	)

798 
	#TIM_TS_ITR2
 ((
uöt32_t
)0x0020U)

	)

799 
	#TIM_TS_ITR3
 ((
uöt32_t
)0x0030U)

	)

800 
	#TIM_TS_TI1F_ED
 ((
uöt32_t
)0x0040U)

	)

801 
	#TIM_TS_TI1FP1
 ((
uöt32_t
)0x0050U)

	)

802 
	#TIM_TS_TI2FP2
 ((
uöt32_t
)0x0060U)

	)

803 
	#TIM_TS_ETRF
 ((
uöt32_t
)0x0070U)

	)

804 
	#TIM_TS_NONE
 ((
uöt32_t
)0xFFFFU)

	)

808 
	#IS_TIM_TRIGGER_SELECTION
(
__SELECTION__
Ë(((__SELECTION__Ë=
TIM_TS_ITR0
Ë|| \

	)

809 ((
__SELECTION__
Ë=
TIM_TS_ITR1
) || \

810 ((
__SELECTION__
Ë=
TIM_TS_ITR2
) || \

811 ((
__SELECTION__
Ë=
TIM_TS_ITR3
) || \

812 ((
__SELECTION__
Ë=
TIM_TS_TI1F_ED
) || \

813 ((
__SELECTION__
Ë=
TIM_TS_TI1FP1
) || \

814 ((
__SELECTION__
Ë=
TIM_TS_TI2FP2
) || \

815 ((
__SELECTION__
Ë=
TIM_TS_ETRF
))

816 
	#IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
__SELECTION__
Ë(((__SELECTION__Ë=
TIM_TS_ITR0
Ë|| \

	)

817 ((
__SELECTION__
Ë=
TIM_TS_ITR1
) || \

818 ((
__SELECTION__
Ë=
TIM_TS_ITR2
) || \

819 ((
__SELECTION__
Ë=
TIM_TS_ITR3
) || \

820 ((
__SELECTION__
Ë=
TIM_TS_NONE
))

826 
	#TIM_TRIGGERPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

827 
	#TIM_TRIGGERPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

828 
	#TIM_TRIGGERPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

829 
	#TIM_TRIGGERPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

830 
	#TIM_TRIGGERPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

834 
	#IS_TIM_TRIGGERPOLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_TRIGGERPOLARITY_INVERTED
 ) || \

	)

835 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_NONINVERTED
) || \

836 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_RISING
 ) || \

837 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_FALLING
 ) || \

838 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_BOTHEDGE
 ))

844 
	#TIM_TRIGGERPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

845 
	#TIM_TRIGGERPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

846 
	#TIM_TRIGGERPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

847 
	#TIM_TRIGGERPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

851 
	#IS_TIM_TRIGGERPRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_TRIGGERPRESCALER_DIV1
Ë|| \

	)

852 ((
__PRESCALER__
Ë=
TIM_TRIGGERPRESCALER_DIV2
) || \

853 ((
__PRESCALER__
Ë=
TIM_TRIGGERPRESCALER_DIV4
) || \

854 ((
__PRESCALER__
Ë=
TIM_TRIGGERPRESCALER_DIV8
))

858 
	#IS_TIM_TRIGGERFILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

864 
	#TIM_TI1SELECTION_CH1
 ((
uöt32_t
)0x0000U)

	)

865 
	#TIM_TI1SELECTION_XORCOMBINATION
 (
TIM_CR2_TI1S
)

	)

869 
	#IS_TIM_TI1SELECTION
(
__TI1SELECTION__
Ë(((__TI1SELECTION__Ë=
TIM_TI1SELECTION_CH1
Ë|| \

	)

870 ((
__TI1SELECTION__
Ë=
TIM_TI1SELECTION_XORCOMBINATION
))

876 
	#TIM_DMABASE_CR1
 (0x00000000U)

	)

877 
	#TIM_DMABASE_CR2
 (0x00000001U)

	)

878 
	#TIM_DMABASE_SMCR
 (0x00000002U)

	)

879 
	#TIM_DMABASE_DIER
 (0x00000003U)

	)

880 
	#TIM_DMABASE_SR
 (0x00000004U)

	)

881 
	#TIM_DMABASE_EGR
 (0x00000005U)

	)

882 
	#TIM_DMABASE_CCMR1
 (0x00000006U)

	)

883 
	#TIM_DMABASE_CCMR2
 (0x00000007U)

	)

884 
	#TIM_DMABASE_CCER
 (0x00000008U)

	)

885 
	#TIM_DMABASE_CNT
 (0x00000009U)

	)

886 
	#TIM_DMABASE_PSC
 (0x0000000AU)

	)

887 
	#TIM_DMABASE_ARR
 (0x0000000BU)

	)

888 
	#TIM_DMABASE_CCR1
 (0x0000000DU)

	)

889 
	#TIM_DMABASE_CCR2
 (0x0000000EU)

	)

890 
	#TIM_DMABASE_CCR3
 (0x0000000FU)

	)

891 
	#TIM_DMABASE_CCR4
 (0x00000010U)

	)

892 
	#TIM_DMABASE_DCR
 (0x00000012U)

	)

893 
	#TIM_DMABASE_OR
 (0x00000013U)

	)

897 
	#IS_TIM_DMA_BASE
(
__BASE__
Ë(((__BASE__Ë=
TIM_DMABASE_CR1
Ë|| \

	)

898 ((
__BASE__
Ë=
TIM_DMABASE_CR2
) || \

899 ((
__BASE__
Ë=
TIM_DMABASE_SMCR
) || \

900 ((
__BASE__
Ë=
TIM_DMABASE_DIER
) || \

901 ((
__BASE__
Ë=
TIM_DMABASE_SR
) || \

902 ((
__BASE__
Ë=
TIM_DMABASE_EGR
) || \

903 ((
__BASE__
Ë=
TIM_DMABASE_CCMR1
) || \

904 ((
__BASE__
Ë=
TIM_DMABASE_CCMR2
 ) || \

905 ((
__BASE__
Ë=
TIM_DMABASE_CCER
) || \

906 ((
__BASE__
Ë=
TIM_DMABASE_CNT
) || \

907 ((
__BASE__
Ë=
TIM_DMABASE_PSC
) || \

908 ((
__BASE__
Ë=
TIM_DMABASE_ARR
) || \

909 ((
__BASE__
Ë=
TIM_DMABASE_CCR1
) || \

910 ((
__BASE__
Ë=
TIM_DMABASE_CCR2
) || \

911 ((
__BASE__
Ë=
TIM_DMABASE_CCR3
) || \

912 ((
__BASE__
Ë=
TIM_DMABASE_CCR4
) || \

913 ((
__BASE__
Ë=
TIM_DMABASE_DCR
) || \

914 ((
__BASE__
Ë=
TIM_DMABASE_OR
))

920 
	#TIM_DMABURSTLENGTH_1TRANSFER
 (0x00000000U)

	)

921 
	#TIM_DMABURSTLENGTH_2TRANSFERS
 (0x00000100U)

	)

922 
	#TIM_DMABURSTLENGTH_3TRANSFERS
 (0x00000200U)

	)

923 
	#TIM_DMABURSTLENGTH_4TRANSFERS
 (0x00000300U)

	)

924 
	#TIM_DMABURSTLENGTH_5TRANSFERS
 (0x00000400U)

	)

925 
	#TIM_DMABURSTLENGTH_6TRANSFERS
 (0x00000500U)

	)

926 
	#TIM_DMABURSTLENGTH_7TRANSFERS
 (0x00000600U)

	)

927 
	#TIM_DMABURSTLENGTH_8TRANSFERS
 (0x00000700U)

	)

928 
	#TIM_DMABURSTLENGTH_9TRANSFERS
 (0x00000800U)

	)

929 
	#TIM_DMABURSTLENGTH_10TRANSFERS
 (0x00000900U)

	)

930 
	#TIM_DMABURSTLENGTH_11TRANSFERS
 (0x00000A00U)

	)

931 
	#TIM_DMABURSTLENGTH_12TRANSFERS
 (0x00000B00U)

	)

932 
	#TIM_DMABURSTLENGTH_13TRANSFERS
 (0x00000C00U)

	)

933 
	#TIM_DMABURSTLENGTH_14TRANSFERS
 (0x00000D00U)

	)

934 
	#TIM_DMABURSTLENGTH_15TRANSFERS
 (0x00000E00U)

	)

935 
	#TIM_DMABURSTLENGTH_16TRANSFERS
 (0x00000F00U)

	)

936 
	#TIM_DMABURSTLENGTH_17TRANSFERS
 (0x00001000U)

	)

937 
	#TIM_DMABURSTLENGTH_18TRANSFERS
 (0x00001100U)

	)

941 
	#IS_TIM_DMA_LENGTH
(
__LENGTH__
Ë(((__LENGTH__Ë=
TIM_DMABURSTLENGTH_1TRANSFER
 ) || \

	)

942 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_2TRANSFERS
) || \

943 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_3TRANSFERS
) || \

944 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_4TRANSFERS
) || \

945 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_5TRANSFERS
) || \

946 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_6TRANSFERS
) || \

947 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_7TRANSFERS
) || \

948 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_8TRANSFERS
) || \

949 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_9TRANSFERS
 ) || \

950 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_10TRANSFERS
) || \

951 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_11TRANSFERS
 ) || \

952 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_12TRANSFERS
) || \

953 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_13TRANSFERS
) || \

954 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_14TRANSFERS
) || \

955 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_15TRANSFERS
) || \

956 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_16TRANSFERS
) || \

957 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_17TRANSFERS
) || \

958 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_18TRANSFERS
 ))

962 
	#IS_TIM_IC_FILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

967 
	#TIM_DMA_ID_UPDATE
 ((
uöt16_t
Ë0x0UË

	)

968 
	#TIM_DMA_ID_CC1
 ((
uöt16_t
Ë0x1UË

	)

969 
	#TIM_DMA_ID_CC2
 ((
uöt16_t
Ë0x2UË

	)

970 
	#TIM_DMA_ID_CC3
 ((
uöt16_t
Ë0x3UË

	)

971 
	#TIM_DMA_ID_CC4
 ((
uöt16_t
Ë0x4UË

	)

972 
	#TIM_DMA_ID_TRIGGER
 ((
uöt16_t
Ë0x5UË

	)

980 
	#TIM_CCx_ENABLE
 ((
uöt32_t
)0x0001U)

	)

981 
	#TIM_CCx_DISABLE
 ((
uöt32_t
)0x0000U)

	)

999 
	#__HAL_TIM_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_TIM_STATE_RESET
)

	)

1006 
	#__HAL_TIM_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
|=(
TIM_CR1_CEN
))

	)

1010 
	#TIM_CCER_CCxE_MASK
 ((
uöt32_t
)(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
 | 
TIM_CCER_CC3E
 | 
TIM_CCER_CC4E
))

	)

1017 
	#__HAL_TIM_DISABLE
(
__HANDLE__
Ë\

	)

1019 i‡(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0U) \

1021 (
__HANDLE__
)->
In°™˚
->
CR1
 &~(
TIM_CR1_CEN
); \

1025 
	#__HAL_TIM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DIER
 |(__INTERRUPT__))

	)

1026 
	#__HAL_TIM_ENABLE_DMA
(
__HANDLE__
, 
__DMA__
Ë((__HANDLE__)->
In°™˚
->
DIER
 |(__DMA__))

	)

1027 
	#__HAL_TIM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DIER
 &~(__INTERRUPT__))

	)

1028 
	#__HAL_TIM_DISABLE_DMA
(
__HANDLE__
, 
__DMA__
Ë((__HANDLE__)->
In°™˚
->
DIER
 &~(__DMA__))

	)

1029 
	#__HAL_TIM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 &(__FLAG__)Ë=(__FLAG__))

	)

1030 
	#__HAL_TIM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

1032 
	#__HAL_TIM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
DIER
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

1033 
	#__HAL_TIM_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__INTERRUPT__))

	)

1035 
	#__HAL_TIM_IS_TIM_COUNTING_DOWN
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
CR1
 &(
TIM_CR1_DIR
)Ë=(TIM_CR1_DIR))

	)

1036 
	#__HAL_TIM_SET_PRESCALER
(
__HANDLE__
, 
__PRESC__
Ë((__HANDLE__)->
In°™˚
->
PSC
 = (__PRESC__))

	)

1038 
	#TIM_SET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
Ë\

	)

1039 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |(
__ICPSC__
)) :\

1040 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |((
__ICPSC__
) << 8U)) :\

1041 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |(
__ICPSC__
)) :\

1042 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |((
__ICPSC__
) << 8)))

1044 
	#TIM_RESET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
Ë\

	)

1045 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
) :\

1046 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
) :\

1047 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
) :\

1048 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
))

1050 
	#TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
Ë\

	)

1051 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |(
__POLARITY__
)) :\

1052 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |((
__POLARITY__
) << 4U)) :\

1053 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |((
__POLARITY__
) << 8U)) :\

1054 ((
__HANDLE__
)->
In°™˚
->
CCER
 |(((
__POLARITY__
Ë<< 12UË& 
TIM_CCER_CC4P
)))

1056 
	#TIM_RESET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
Ë\

	)

1057 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
)) :\

1058 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
)) :\

1059 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
)) :\

1060 ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4P
))

1075 
	#__HAL_TIM_SET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
, 
__COMPARE__
Ë\

	)

1076 (*(
__IO
 
uöt32_t
 *)(&((
__HANDLE__
)->
In°™˚
->
CCR1
Ë+ ((
__CHANNEL__
Ë>> 2U)Ë(
__COMPARE__
))

1089 
	#__HAL_TIM_GET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
Ë\

	)

1090 (*(
__IO
 
uöt32_t
 *)(&((
__HANDLE__
)->
In°™˚
->
CCR1
Ë+ ((
__CHANNEL__
) >> 2U)))

1098 
	#__HAL_TIM_SET_COUNTER
(
__HANDLE__
, 
__COUNTER__
Ë((__HANDLE__)->
In°™˚
->
CNT
 = (__COUNTER__))

	)

1105 
	#__HAL_TIM_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CNT
)

	)

1114 
	#__HAL_TIM_SET_AUTORELOAD
(
__HANDLE__
, 
__AUTORELOAD__
Ë\

	)

1116 (
__HANDLE__
)->
In°™˚
->
ARR
 = (
__AUTORELOAD__
); \

1117 (
__HANDLE__
)->
Inô
.
Pîiod
 = (
__AUTORELOAD__
); \

1124 
	#__HAL_TIM_GET_AUTORELOAD
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
ARR
)

	)

1137 
	#__HAL_TIM_SET_CLOCKDIVISION
(
__HANDLE__
, 
__CKD__
Ë\

	)

1139 (
__HANDLE__
)->
In°™˚
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
); \

1140 (
__HANDLE__
)->
In°™˚
->
CR1
 |(
__CKD__
); \

1141 (
__HANDLE__
)->
Inô
.
ClockDivisi⁄
 = (
__CKD__
); \

1148 
	#__HAL_TIM_GET_CLOCKDIVISION
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 & 
TIM_CR1_CKD
)

	)

1168 
	#__HAL_TIM_SET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
Ë\

	)

1170 
TIM_RESET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
)); \

1171 
TIM_SET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
), (
__ICPSC__
)); \

1185 
	#__HAL_TIM_GET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
Ë\

	)

1186 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_IC1PSC
) :\

1187 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? (((
__HANDLE__
)->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_IC2PSC
) >> 8) :\

1188 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_IC3PSC
) :\

1189 (((
__HANDLE__
)->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_IC4PSC
)) >> 8U)

1200 
	#__HAL_TIM_URS_ENABLE
(
__HANDLE__
Ë\

	)

1201 ((
__HANDLE__
)->
In°™˚
->
CR1
|(
TIM_CR1_URS
))

1214 
	#__HAL_TIM_URS_DISABLE
(
__HANDLE__
Ë\

	)

1215 ((
__HANDLE__
)->
In°™˚
->
CR1
&=~(
TIM_CR1_URS
))

1233 
	#__HAL_TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
Ë\

	)

1235 
TIM_RESET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
)); \

1236 
TIM_SET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
), (
__POLARITY__
)); \

1244 
	~"°m32l0xx_hÆ_tim_ex.h
"

1258 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1259 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1260 
HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1261 
HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1263 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
);

1264 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›
(
TIM_H™dÀTy≥Def
 *
htim
);

1266 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

1267 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

1269 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
);

1270 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
);

1284 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1285 
HAL_SètusTy≥Def
 
HAL_TIM_OC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1286 
HAL_TIM_OC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1287 
HAL_TIM_OC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1289 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1290 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1292 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1293 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1295 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1296 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1308 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1309 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1310 
HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1311 
HAL_TIM_PWM_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1313 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1314 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1316 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1317 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1319 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1320 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1331 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1332 
HAL_SètusTy≥Def
 
HAL_TIM_IC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1333 
HAL_TIM_IC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1334 
HAL_TIM_IC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1336 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1337 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1339 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1340 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1342 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1343 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1354 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
O√Pul£Mode
);

1355 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1356 
HAL_TIM_O√Pul£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1357 
HAL_TIM_O√Pul£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1359 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1360 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1363 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1364 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1376 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Encodî_InôTy≥Def
* 
sC⁄fig
);

1377 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1378 
HAL_TIM_Encodî_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1379 
HAL_TIM_Encodî_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1381 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1382 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1384 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1385 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1387 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a1
, uöt32_à*
pD©a2
, 
uöt16_t
 
Lígth
);

1388 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1400 
HAL_TIM_IRQH™dÀr
(
TIM_H™dÀTy≥Def
 *
htim
);

1411 
HAL_SètusTy≥Def
 
HAL_TIM_OC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1412 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1413 
HAL_SètusTy≥Def
 
HAL_TIM_IC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_IC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1414 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_O√Pul£_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
OuçutCh™√l
, uöt32_à
I≈utCh™√l
);

1415 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figOCªfCÀ¨
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_CÀ¨I≈utC⁄figTy≥Def
 * 
sCÀ¨I≈utC⁄fig
, 
uöt32_t
 
Ch™√l
);

1416 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figClockSour˚
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_ClockC⁄figTy≥Def
 * 
sClockSour˚C⁄fig
);

1417 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figTI1I≈ut
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
TI1_Sñe˘i⁄
);

1418 
HAL_SètusTy≥Def
 
HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
);

1419 
HAL_SètusTy≥Def
 
HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
);

1420 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_WrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
, \

1421 
uöt32_t
 *
Bur°Buf„r
, uöt32_à
Bur°Lígth
);

1422 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_WrôeSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
);

1423 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_RódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
, \

1424 
uöt32_t
 *
Bur°Buf„r
, uöt32_à
Bur°Lígth
);

1425 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_RódSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
);

1426 
HAL_SètusTy≥Def
 
HAL_TIM_Gíî©eEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
EvítSour˚
);

1427 
uöt32_t
 
HAL_TIM_RódC≠tuªdVÆue
(
TIM_H™dÀTy≥Def
 *
htim
, uöt32_à
Ch™√l
);

1439 
HAL_TIM_PîiodEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1440 
HAL_TIM_OC_DñayEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1441 
HAL_TIM_IC_C≠tuªCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1442 
HAL_TIM_PWM_Pul£FöishedCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1443 
HAL_TIM_TriggîCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1444 
HAL_TIM_Eº‹CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1456 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_Ba£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1457 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_OC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1458 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_PWM_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1459 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_IC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1460 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_O√Pul£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1461 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_Encodî_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1462 
TIM_DMADñayPul£C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

1463 
TIM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

1464 
TIM_DMAC≠tuªC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

1492 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim_ex.h

37 #i‚de‡
__STM32L0xx_HAL_TIM_EX_H


38 
	#__STM32L0xx_HAL_TIM_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

63 
uöt32_t
 
Ma°îOuçutTriggî
;

65 
uöt32_t
 
Ma°îSœveMode
;

67 }
	tTIM_Ma°îC⁄figTy≥Def
;

81 
	#TIM_TRGO_RESET
 ((
uöt32_t
)0x0000U)

	)

82 
	#TIM_TRGO_ENABLE
 (
TIM_CR2_MMS_0
)

	)

83 
	#TIM_TRGO_UPDATE
 (
TIM_CR2_MMS_1
)

	)

84 
	#TIM_TRGO_OC1
 ((
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
))

	)

85 
	#TIM_TRGO_OC1REF
 (
TIM_CR2_MMS_2
)

	)

86 
	#TIM_TRGO_OC2REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_0
))

	)

87 
	#TIM_TRGO_OC3REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
))

	)

88 
	#TIM_TRGO_OC4REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
))

	)

90 
	#IS_TIM_TRGO_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
TIM_TRGO_RESET
Ë|| \

	)

91 ((
__SOURCE__
Ë=
TIM_TRGO_ENABLE
) || \

92 ((
__SOURCE__
Ë=
TIM_TRGO_UPDATE
) || \

93 ((
__SOURCE__
Ë=
TIM_TRGO_OC1
) || \

94 ((
__SOURCE__
Ë=
TIM_TRGO_OC1REF
) || \

95 ((
__SOURCE__
Ë=
TIM_TRGO_OC2REF
) || \

96 ((
__SOURCE__
Ë=
TIM_TRGO_OC3REF
) || \

97 ((
__SOURCE__
Ë=
TIM_TRGO_OC4REF
))

106 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) \

107 || 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

109 
	#TIM2_ETR_GPIO
 ((
uöt32_t
)0x0U)

	)

110 
	#TIM2_ETR_HSI48
 
TIM2_OR_ETR_RMP_2


	)

111 
	#TIM2_ETR_HSI16
 (
TIM2_OR_ETR_RMP_1
 | 
TIM2_OR_ETR_RMP_0
)

	)

112 
	#TIM2_ETR_LSE
 (
TIM2_OR_ETR_RMP_2
 | 
TIM2_OR_ETR_RMP_0
)

	)

113 
	#TIM2_ETR_COMP2_OUT
 (
TIM2_OR_ETR_RMP_2
 | 
TIM2_OR_ETR_RMP_1
)

	)

114 
	#TIM2_ETR_COMP1_OUT
 
TIM2_OR_ETR_RMP


	)

116 #ñi‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
Ë|| deföed (
STM32L031xx
Ë|| deföed (
STM32L041xx
)

118 
	#TIM2_ETR_GPIO
 ((
uöt32_t
)0x0U)

	)

119 
	#TIM2_ETR_HSI16
 (
TIM2_OR_ETR_RMP_1
 | 
TIM2_OR_ETR_RMP_0
)

	)

120 
	#TIM2_ETR_LSE
 (
TIM2_OR_ETR_RMP_2
 | 
TIM2_OR_ETR_RMP_0
)

	)

121 
	#TIM2_ETR_COMP2_OUT
 (
TIM2_OR_ETR_RMP_2
 | 
TIM2_OR_ETR_RMP_1
)

	)

122 
	#TIM2_ETR_COMP1_OUT
 
TIM2_OR_ETR_RMP


	)

126 
	#TIM2_ETR_GPIO
 ((
uöt32_t
)0x0U)

	)

127 
	#TIM2_ETR_HSI48
 
TIM2_OR_ETR_RMP_2


	)

128 
	#TIM2_ETR_LSE
 (
TIM2_OR_ETR_RMP_2
 | 
TIM2_OR_ETR_RMP_0
)

	)

129 
	#TIM2_ETR_COMP2_OUT
 (
TIM2_OR_ETR_RMP_2
 | 
TIM2_OR_ETR_RMP_1
)

	)

130 
	#TIM2_ETR_COMP1_OUT
 
TIM2_OR_ETR_RMP


	)

136 
	#TIM2_TI4_GPIO
 ((
uöt32_t
)0x0U)

	)

137 
	#TIM2_TI4_COMP2
 
TIM2_OR_TI4_RMP_0


	)

138 
	#TIM2_TI4_COMP1
 
TIM2_OR_TI4_RMP_1


	)

140 
	#TIM21_ETR_GPIO
 ((
uöt32_t
)0x0U)

	)

141 
	#TIM21_ETR_COMP2_OUT
 
TIM21_OR_ETR_RMP_0


	)

142 
	#TIM21_ETR_COMP1_OUT
 
TIM21_OR_ETR_RMP_1


	)

143 
	#TIM21_ETR_LSE
 
TIM21_OR_ETR_RMP


	)

144 
	#TIM21_TI1_GPIO
 ((
uöt32_t
)0x0U)

	)

145 
	#TIM21_TI1_MCO
 
TIM21_OR_TI1_RMP


	)

146 
	#TIM21_TI1_RTC_WKUT_IT
 
TIM21_OR_TI1_RMP_0


	)

147 
	#TIM21_TI1_HSE_RTC
 
TIM21_OR_TI1_RMP_1


	)

148 
	#TIM21_TI1_MSI
 (
TIM21_OR_TI1_RMP_0
 | 
TIM21_OR_TI1_RMP_1
)

	)

149 
	#TIM21_TI1_LSE
 
TIM21_OR_TI1_RMP_2


	)

150 
	#TIM21_TI1_LSI
 (
TIM21_OR_TI1_RMP_2
 | 
TIM21_OR_TI1_RMP_0
)

	)

151 
	#TIM21_TI1_COMP1_OUT
 (
TIM21_OR_TI1_RMP_2
 | 
TIM21_OR_TI1_RMP_1
)

	)

152 
	#TIM21_TI2_GPIO
 ((
uöt32_t
)0x0U)

	)

153 
	#TIM21_TI2_COMP2_OUT
 
TIM21_OR_TI2_RMP


	)

155 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
)

156 
	#TIM22_ETR_GPIO
 ((
uöt32_t
)0x0U)

	)

157 
	#TIM22_ETR_COMP2_OUT
 
TIM22_OR_ETR_RMP_0


	)

158 
	#TIM22_ETR_COMP1_OUT
 
TIM22_OR_ETR_RMP_1


	)

159 
	#TIM22_ETR_LSE
 
TIM22_OR_ETR_RMP


	)

160 
	#TIM22_TI1_GPIO1
 ((
uöt32_t
)0x0U)

	)

161 
	#TIM22_TI1_COMP2_OUT
 
TIM22_OR_TI1_RMP_0


	)

162 
	#TIM22_TI1_COMP1_OUT
 
TIM22_OR_TI1_RMP_1


	)

163 
	#TIM22_TI1_GPIO2
 
TIM22_OR_TI1_RMP


	)

166 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) \

167 || 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

169 
	#TIM3_TI4_GPIO_DEF
 ((
uöt32_t
)0x0U)

	)

170 
	#TIM3_TI4_GPIOC9_AF2
 
TIM3_OR_TI4_RMP


	)

171 
	#TIM3_TI2_GPIO_DEF
 ((
uöt32_t
)0x0U)

	)

172 
	#TIM3_TI2_GPIOB5_AF4
 
TIM3_OR_TI2_RMP


	)

173 
	#TIM3_TI1_USB_SOF
 ((
uöt32_t
)0x0U)

	)

174 
	#TIM3_TI1_GPIO
 
TIM3_OR_TI1_RMP


	)

175 
	#TIM3_ETR_GPIO
 ((
uöt32_t
)0x0U)

	)

176 
	#TIM3_ETR_HSI
 
TIM3_OR_ETR_RMP_1


	)

181 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) \

182 || 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

185 
	#IS_TIM_REMAP
(
__INSTANCE__
, 
__TIM_REMAP__
Ë\

	)

186 ((((
__INSTANCE__
Ë=
TIM2
Ë&& ((
__TIM_REMAP__
Ë<(
TIM2_OR_TI4_RMP
 | 
TIM2_OR_ETR_RMP
))) || \

187 (((
__INSTANCE__
Ë=
TIM22
Ë&& ((
__TIM_REMAP__
Ë<(
TIM22_OR_TI1_RMP
 | 
TIM22_OR_ETR_RMP
))) || \

188 (((
__INSTANCE__
Ë=
TIM21
Ë&& ((
__TIM_REMAP__
Ë<(
TIM21_OR_ETR_RMP
 | 
TIM21_OR_TI1_RMP
 | 
TIM21_OR_TI2_RMP
))) || \

189 (((
__INSTANCE__
Ë=
TIM3
Ë&& ((
__TIM_REMAP__
Ë<(
TIM3_OR_ETR_RMP
 | 
TIM3_OR_TI1_RMP
 | 
TIM3_OR_TI2_RMP
 | 
TIM3_OR_TI4_RMP
))))

191 
	#IS_CHANNEL_AVAILABLE
(
__INSTANCE__
, 
__CHANNEL__
Ë\

	)

192 ((((
__INSTANCE__
Ë=
TIM2
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

193 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

194 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
) || \

195 ((
__CHANNEL__
Ë=
TIM_CHANNEL_4
))) || \

196 (((
__INSTANCE__
Ë=
TIM3
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

197 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

198 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
) || \

199 ((
__CHANNEL__
Ë=
TIM_CHANNEL_4
))) || \

200 (((
__INSTANCE__
Ë=
TIM21
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

201 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))) || \

202 (((
__INSTANCE__
Ë=
TIM22
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

203 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))))

205 #ñi‡
deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

207 
	#IS_TIM_REMAP
(
__INSTANCE__
, 
__TIM_REMAP__
Ë\

	)

208 ((((
__INSTANCE__
Ë=
TIM2
Ë&& ((
__TIM_REMAP__
Ë<(
TIM2_OR_TI4_RMP
 | 
TIM2_OR_ETR_RMP
))) || \

209 (((
__INSTANCE__
Ë=
TIM21
Ë&& ((
__TIM_REMAP__
Ë<(
TIM21_OR_ETR_RMP
 | 
TIM21_OR_TI1_RMP
 | 
TIM21_OR_TI2_RMP
))))

211 
	#IS_CHANNEL_AVAILABLE
(
__INSTANCE__
, 
__CHANNEL__
Ë\

	)

212 ((((
__INSTANCE__
Ë=
TIM2
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

213 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

214 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
) || \

215 ((
__CHANNEL__
Ë=
TIM_CHANNEL_4
))) || \

216 (((
__INSTANCE__
Ë=
TIM21
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

217 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))))

221 
	#IS_TIM_REMAP
(
__INSTANCE__
, 
__TIM_REMAP__
Ë\

	)

222 ((((
__INSTANCE__
Ë=
TIM2
Ë&& ((
__TIM_REMAP__
Ë<(
TIM2_OR_TI4_RMP
 | 
TIM2_OR_ETR_RMP
))) || \

223 (((
__INSTANCE__
Ë=
TIM22
Ë&& ((
__TIM_REMAP__
Ë<(
TIM22_OR_TI1_RMP
 | 
TIM22_OR_ETR_RMP
))) || \

224 (((
__INSTANCE__
Ë=
TIM21
Ë&& ((
__TIM_REMAP__
Ë<(
TIM21_OR_ETR_RMP
 | 
TIM21_OR_TI1_RMP
 | 
TIM21_OR_TI2_RMP
))))

226 
	#IS_CHANNEL_AVAILABLE
(
__INSTANCE__
, 
__CHANNEL__
Ë\

	)

227 ((((
__INSTANCE__
Ë=
TIM2
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

228 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

229 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
) || \

230 ((
__CHANNEL__
Ë=
TIM_CHANNEL_4
))) || \

231 (((
__INSTANCE__
Ë=
TIM21
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

232 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))) || \

233 (((
__INSTANCE__
Ë=
TIM22
Ë&& (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
) || \

234 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))))

260 
HAL_SètusTy≥Def
 
HAL_TIMEx_Rem≠C⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Rem≠
);

261 
HAL_SètusTy≥Def
 
HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Ma°îC⁄figTy≥Def
 * 
sMa°îC⁄fig
);

278 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h

37 #i‚de‡
__STM32L0xx_HAL_UART_H


38 
	#__STM32L0xx_HAL_UART_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

65 
uöt32_t
 
BaudR©e
;

74 
uöt32_t
 
W‹dLígth
;

77 
uöt32_t
 
St›Bôs
;

80 
uöt32_t
 
P¨ôy
;

87 
uöt32_t
 
Mode
;

90 
uöt32_t
 
HwFlowCé
;

94 
uöt32_t
 
OvîSam∂ög
;

97 
uöt32_t
 
O√BôSam∂ög
;

100 }
	tUART_InôTy≥Def
;

107 
uöt32_t
 
AdvFótuªInô
;

111 
uöt32_t
 
TxPöLevñInvît
;

114 
uöt32_t
 
RxPöLevñInvît
;

117 
uöt32_t
 
D©aInvît
;

121 
uöt32_t
 
Sw≠
;

124 
uöt32_t
 
OvîrunDißbÀ
;

127 
uöt32_t
 
DMADißbÀ⁄RxEº‹
;

130 
uöt32_t
 
AutoBaudR©eE«bÀ
;

133 
uöt32_t
 
AutoBaudR©eMode
;

137 
uöt32_t
 
MSBFú°
;

139 } 
	tUART_AdvFótuªInôTy≥Def
;

184 
HAL_UART_STATE_RESET
 = 0x00U,

186 
HAL_UART_STATE_READY
 = 0x20U,

188 
HAL_UART_STATE_BUSY
 = 0x24U,

190 
HAL_UART_STATE_BUSY_TX
 = 0x21U,

192 
HAL_UART_STATE_BUSY_RX
 = 0x22U,

194 
HAL_UART_STATE_BUSY_TX_RX
 = 0x23U,

197 
HAL_UART_STATE_TIMEOUT
 = 0xA0U,

199 
HAL_UART_STATE_ERROR
 = 0xE0U

201 }
	tHAL_UART_SèãTy≥Def
;

208 
HAL_UART_ERROR_NONE
 = 0x00,

209 
HAL_UART_ERROR_PE
 = 0x01,

210 
HAL_UART_ERROR_NE
 = 0x02,

211 
HAL_UART_ERROR_FE
 = 0x04,

212 
HAL_UART_ERROR_ORE
 = 0x08,

213 
HAL_UART_ERROR_DMA
 = 0x10,

214 
HAL_UART_ERROR_BUSY
 = 0x20

215 }
	tHAL_UART_Eº‹Ty≥Def
;

222 
UART_CLOCKSOURCE_PCLK1
 = 0x00,

223 
UART_CLOCKSOURCE_PCLK2
 = 0x01,

224 
UART_CLOCKSOURCE_HSI
 = 0x02,

225 
UART_CLOCKSOURCE_SYSCLK
 = 0x04,

226 
UART_CLOCKSOURCE_LSE
 = 0x08,

227 
UART_CLOCKSOURCE_UNDEFINED
 = 0x10

228 }
	tUART_ClockSour˚Ty≥Def
;

235 
USART_Ty≥Def
 *
In°™˚
;

237 
UART_InôTy≥Def
 
Inô
;

239 
UART_AdvFótuªInôTy≥Def
 
Adv™˚dInô
;

241 
uöt8_t
 *
pTxBuffPå
;

243 
uöt16_t
 
TxX„rSize
;

245 
__IO
 
uöt16_t
 
TxX„rCou¡
;

247 
uöt8_t
 *
pRxBuffPå
;

249 
uöt16_t
 
RxX„rSize
;

251 
__IO
 
uöt16_t
 
RxX„rCou¡
;

253 
uöt16_t
 
Mask
;

255 
DMA_H™dÀTy≥Def
 *
hdm©x
;

257 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

259 
HAL_LockTy≥Def
 
Lock
;

261 
__IO
 
HAL_UART_SèãTy≥Def
 
gSèã
;

265 
__IO
 
HAL_UART_SèãTy≥Def
 
RxSèã
;

268 
__IO
 
uöt32_t
 
Eº‹Code
;

270 }
	tUART_H™dÀTy≥Def
;

284 
	#UART_STOPBITS_1
 ((
uöt32_t
)0x00000000UË

	)

285 
	#UART_STOPBITS_1_5
 (
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
Ë

	)

286 
	#UART_STOPBITS_2
 
USART_CR2_STOP_1


	)

294 
	#UART_PARITY_NONE
 ((
uöt32_t
)0x00000000UË

	)

295 
	#UART_PARITY_EVEN
 ((
uöt32_t
)
USART_CR1_PCE
Ë

	)

296 
	#UART_PARITY_ODD
 ((
uöt32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
)Ë

	)

304 
	#UART_HWCONTROL_NONE
 ((
uöt32_t
)0x00000000UË

	)

305 
	#UART_HWCONTROL_RTS
 ((
uöt32_t
)
USART_CR3_RTSE
Ë

	)

306 
	#UART_HWCONTROL_CTS
 ((
uöt32_t
)
USART_CR3_CTSE
Ë

	)

307 
	#UART_HWCONTROL_RTS_CTS
 ((
uöt32_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
)Ë

	)

315 
	#UART_MODE_RX
 ((
uöt32_t
)
USART_CR1_RE
Ë

	)

316 
	#UART_MODE_TX
 ((
uöt32_t
)
USART_CR1_TE
Ë

	)

317 
	#UART_MODE_TX_RX
 ((
uöt32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
)Ë

	)

325 
	#UART_STATE_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

326 
	#UART_STATE_ENABLE
 ((
uöt32_t
)
USART_CR1_UE
Ë

	)

334 
	#UART_OVERSAMPLING_16
 ((
uöt32_t
)0x00000000UË

	)

335 
	#UART_OVERSAMPLING_8
 ((
uöt32_t
)
USART_CR1_OVER8
Ë

	)

343 
	#UART_ONE_BIT_SAMPLE_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

344 
	#UART_ONE_BIT_SAMPLE_ENABLE
 ((
uöt32_t
)
USART_CR3_ONEBIT
Ë

	)

352 
	#UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT
 ((
uöt32_t
)0x00000000Ë

	)

353 
	#UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE
 ((
uöt32_t
)
USART_CR2_ABRMODE_0
Ë

	)

354 
	#UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME
 ((
uöt32_t
)
USART_CR2_ABRMODE_1
Ë

	)

355 
	#UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME
 ((
uöt32_t
)
USART_CR2_ABRMODE
Ë

	)

363 
	#UART_RECEIVER_TIMEOUT_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

364 
	#UART_RECEIVER_TIMEOUT_ENABLE
 ((
uöt32_t
)
USART_CR2_RTOEN
Ë

	)

372 
	#UART_LIN_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

373 
	#UART_LIN_ENABLE
 ((
uöt32_t
)
USART_CR2_LINEN
Ë

	)

381 
	#UART_LINBREAKDETECTLENGTH_10B
 ((
uöt32_t
)0x00000000UË

	)

382 
	#UART_LINBREAKDETECTLENGTH_11B
 ((
uöt32_t
)
USART_CR2_LBDL
Ë

	)

390 
	#UART_DMA_TX_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

391 
	#UART_DMA_TX_ENABLE
 ((
uöt32_t
)
USART_CR3_DMAT
Ë

	)

399 
	#UART_DMA_RX_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

400 
	#UART_DMA_RX_ENABLE
 ((
uöt32_t
)
USART_CR3_DMAR
Ë

	)

408 
	#UART_HALF_DUPLEX_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

409 
	#UART_HALF_DUPLEX_ENABLE
 ((
uöt32_t
)
USART_CR3_HDSEL
Ë

	)

417 
	#UART_WAKEUPMETHOD_IDLELINE
 ((
uöt32_t
)0x00000000UË

	)

418 
	#UART_WAKEUPMETHOD_ADDRESSMARK
 ((
uöt32_t
)
USART_CR1_WAKE
Ë

	)

426 
	#UART_AUTOBAUD_REQUEST
 ((
uöt32_t
)
USART_RQR_ABRRQ
Ë

	)

427 
	#UART_SENDBREAK_REQUEST
 ((
uöt32_t
)
USART_RQR_SBKRQ
Ë

	)

428 
	#UART_MUTE_MODE_REQUEST
 ((
uöt32_t
)
USART_RQR_MMRQ
Ë

	)

429 
	#UART_RXDATA_FLUSH_REQUEST
 ((
uöt32_t
)
USART_RQR_RXFRQ
Ë

	)

430 
	#UART_TXDATA_FLUSH_REQUEST
 ((
uöt32_t
)
USART_RQR_TXFRQ
Ë

	)

438 
	#UART_ADVFEATURE_NO_INIT
 ((
uöt32_t
)0x00000000UË

	)

439 
	#UART_ADVFEATURE_TXINVERT_INIT
 ((
uöt32_t
)0x00000001UË

	)

440 
	#UART_ADVFEATURE_RXINVERT_INIT
 ((
uöt32_t
)0x00000002UË

	)

441 
	#UART_ADVFEATURE_DATAINVERT_INIT
 ((
uöt32_t
)0x00000004UË

	)

442 
	#UART_ADVFEATURE_SWAP_INIT
 ((
uöt32_t
)0x00000008UË

	)

443 
	#UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 ((
uöt32_t
)0x00000010UË

	)

444 
	#UART_ADVFEATURE_DMADISABLEONERROR_INIT
 ((
uöt32_t
)0x00000020UË

	)

445 
	#UART_ADVFEATURE_AUTOBAUDRATE_INIT
 ((
uöt32_t
)0x00000040UË

	)

446 
	#UART_ADVFEATURE_MSBFIRST_INIT
 ((
uöt32_t
)0x00000080UË

	)

454 
	#UART_ADVFEATURE_TXINV_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

455 
	#UART_ADVFEATURE_TXINV_ENABLE
 ((
uöt32_t
)
USART_CR2_TXINV
Ë

	)

463 
	#UART_ADVFEATURE_RXINV_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

464 
	#UART_ADVFEATURE_RXINV_ENABLE
 ((
uöt32_t
)
USART_CR2_RXINV
Ë

	)

472 
	#UART_ADVFEATURE_DATAINV_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

473 
	#UART_ADVFEATURE_DATAINV_ENABLE
 ((
uöt32_t
)
USART_CR2_DATAINV
Ë

	)

481 
	#UART_ADVFEATURE_SWAP_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

482 
	#UART_ADVFEATURE_SWAP_ENABLE
 ((
uöt32_t
)
USART_CR2_SWAP
Ë

	)

490 
	#UART_ADVFEATURE_OVERRUN_ENABLE
 ((
uöt32_t
)0x00000000UË

	)

491 
	#UART_ADVFEATURE_OVERRUN_DISABLE
 ((
uöt32_t
)
USART_CR3_OVRDIS
Ë

	)

499 
	#UART_ADVFEATURE_AUTOBAUDRATE_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

500 
	#UART_ADVFEATURE_AUTOBAUDRATE_ENABLE
 ((
uöt32_t
)
USART_CR2_ABREN
Ë

	)

508 
	#UART_ADVFEATURE_DMA_ENABLEONRXERROR
 ((
uöt32_t
)0x00000000UË

	)

509 
	#UART_ADVFEATURE_DMA_DISABLEONRXERROR
 ((
uöt32_t
)
USART_CR3_DDRE
Ë

	)

517 
	#UART_ADVFEATURE_MSBFIRST_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

518 
	#UART_ADVFEATURE_MSBFIRST_ENABLE
 ((
uöt32_t
)
USART_CR2_MSBFIRST
Ë

	)

526 
	#UART_ADVFEATURE_STOPMODE_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

527 
	#UART_ADVFEATURE_STOPMODE_ENABLE
 ((
uöt32_t
)
USART_CR1_UESM
Ë

	)

535 
	#UART_ADVFEATURE_MUTEMODE_DISABLE
 ((
uöt32_t
)0x00000000UË

	)

536 
	#UART_ADVFEATURE_MUTEMODE_ENABLE
 ((
uöt32_t
)
USART_CR1_MME
Ë

	)

544 
	#UART_CR2_ADDRESS_LSB_POS
 ((
uöt32_t
Ë24UË

	)

552 
	#UART_WAKEUP_ON_ADDRESS
 ((
uöt32_t
)0x00000000UË

	)

553 
	#UART_WAKEUP_ON_STARTBIT
 ((
uöt32_t
)
USART_CR3_WUS_1
Ë

	)

554 
	#UART_WAKEUP_ON_READDATA_NONEMPTY
 ((
uöt32_t
)
USART_CR3_WUS
Ë

	)

562 
	#UART_DE_POLARITY_HIGH
 ((
uöt32_t
)0x00000000UË

	)

563 
	#UART_DE_POLARITY_LOW
 ((
uöt32_t
)
USART_CR3_DEP
Ë

	)

571 
	#UART_CR1_DEAT_ADDRESS_LSB_POS
 ((
uöt32_t
Ë21UË

	)

579 
	#UART_CR1_DEDT_ADDRESS_LSB_POS
 ((
uöt32_t
Ë16UË

	)

587 
	#UART_IT_MASK
 ((
uöt32_t
)0x001FUË

	)

595 
	#HAL_UART_TIMEOUT_VALUE
 0x1FFFFFF

	)

605 
	#UART_FLAG_REACK
 
USART_ISR_REACK


	)

606 
	#UART_FLAG_TEACK
 
USART_ISR_TEACK


	)

607 
	#UART_FLAG_WUF
 
USART_ISR_WUF


	)

608 
	#UART_FLAG_RWU
 
USART_ISR_RWU


	)

609 
	#UART_FLAG_SBKF
 
USART_ISR_SBKF


	)

610 
	#UART_FLAG_CMF
 
USART_ISR_CMF


	)

611 
	#UART_FLAG_BUSY
 
USART_ISR_BUSY


	)

612 
	#UART_FLAG_ABRF
 
USART_ISR_ABRF


	)

613 
	#UART_FLAG_ABRE
 
USART_ISR_ABRE


	)

614 
	#UART_FLAG_EOBF
 
USART_ISR_EOBF


	)

615 
	#UART_FLAG_RTOF
 
USART_ISR_RTOF


	)

616 
	#UART_FLAG_CTS
 
USART_ISR_CTS


	)

617 
	#UART_FLAG_CTSIF
 
USART_ISR_CTSIF


	)

618 
	#UART_FLAG_LBDF
 
USART_ISR_LBDF


	)

619 
	#UART_FLAG_TXE
 
USART_ISR_TXE


	)

620 
	#UART_FLAG_TC
 
USART_ISR_TC


	)

621 
	#UART_FLAG_RXNE
 
USART_ISR_RXNE


	)

622 
	#UART_FLAG_IDLE
 
USART_ISR_IDLE


	)

623 
	#UART_FLAG_ORE
 
USART_ISR_ORE


	)

624 
	#UART_FLAG_NE
 
USART_ISR_NE


	)

625 
	#UART_FLAG_FE
 
USART_ISR_FE


	)

626 
	#UART_FLAG_PE
 
USART_ISR_PE


	)

641 
	#UART_IT_PE
 ((
uöt32_t
)0x0028Ë

	)

642 
	#UART_IT_TXE
 ((
uöt32_t
)0x0727Ë

	)

643 
	#UART_IT_TC
 ((
uöt32_t
)0x0626Ë

	)

644 
	#UART_IT_RXNE
 ((
uöt32_t
)0x0525Ë

	)

645 
	#UART_IT_IDLE
 ((
uöt32_t
)0x0424Ë

	)

646 
	#UART_IT_LBD
 ((
uöt32_t
)0x0846Ë

	)

647 
	#UART_IT_CTS
 ((
uöt32_t
)0x096AË

	)

648 
	#UART_IT_CM
 ((
uöt32_t
)0x112EË

	)

649 
	#UART_IT_WUF
 ((
uöt32_t
)0x1476Ë

	)

658 
	#UART_IT_ERR
 ((
uöt32_t
)0x0060Ë

	)

663 
	#UART_IT_ORE
 ((
uöt32_t
)0x0300Ë

	)

664 
	#UART_IT_NE
 ((
uöt32_t
)0x0200Ë

	)

665 
	#UART_IT_FE
 ((
uöt32_t
)0x0100Ë

	)

673 
	#UART_CLEAR_PEF
 
USART_ICR_PECF


	)

674 
	#UART_CLEAR_FEF
 
USART_ICR_FECF


	)

675 
	#UART_CLEAR_NEF
 
USART_ICR_NCF


	)

676 
	#UART_CLEAR_OREF
 
USART_ICR_ORECF


	)

677 
	#UART_CLEAR_IDLEF
 
USART_ICR_IDLECF


	)

678 
	#UART_CLEAR_TCF
 
USART_ICR_TCCF


	)

679 
	#UART_CLEAR_LBDF
 
USART_ICR_LBDCF


	)

680 
	#UART_CLEAR_CTSF
 
USART_ICR_CTSCF


	)

681 
	#UART_CLEAR_RTOF
 
USART_ICR_RTOCF


	)

682 
	#UART_CLEAR_EOBF
 
USART_ICR_EOBCF


	)

683 
	#UART_CLEAR_CMF
 
USART_ICR_CMCF


	)

684 
	#UART_CLEAR_WUF
 
USART_ICR_WUCF


	)

703 
	#__HAL_UART_RESET_HANDLE_STATE
(
__HANDLE__
Ëdo{ \

	)

704 (
__HANDLE__
)->
gSèã
 = 
HAL_UART_STATE_RESET
; \

705 (
__HANDLE__
)->
RxSèã
 = 
HAL_UART_STATE_RESET
; \

711 
	#__HAL_UART_FLUSH_DRREGISTER
(
__HANDLE__
Ë\

	)

713 
SET_BIT
((
__HANDLE__
)->
In°™˚
->
RQR
, 
UART_RXDATA_FLUSH_REQUEST
); \

714 
SET_BIT
((
__HANDLE__
)->
In°™˚
->
RQR
, 
UART_TXDATA_FLUSH_REQUEST
); \

735 
	#__HAL_UART_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ICR
 = (__FLAG__))

	)

741 
	#__HAL_UART_CLEAR_PEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_FLAG
((__HANDLE__), 
UART_CLEAR_PEF
)

	)

747 
	#__HAL_UART_CLEAR_FEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_FLAG
((__HANDLE__), 
UART_CLEAR_FEF
)

	)

753 
	#__HAL_UART_CLEAR_NEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_FLAG
((__HANDLE__), 
UART_CLEAR_NEF
)

	)

759 
	#__HAL_UART_CLEAR_OREFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_FLAG
((__HANDLE__), 
UART_CLEAR_OREF
)

	)

765 
	#__HAL_UART_CLEAR_IDLEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_FLAG
((__HANDLE__), 
UART_CLEAR_IDLEF
)

	)

794 
	#__HAL_UART_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
ISR
 & (__FLAG__)Ë=(__FLAG__))

	)

812 
	#__HAL_UART_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((
uöt8_t
)(__INTERRUPT__)Ë>> 5UË=1U)? ((__HANDLE__)->
In°™˚
->
CR1
 |(1U << ((__INTERRUPT__Ë& 
UART_IT_MASK
))): \

	)

813 ((((
uöt8_t
)(
__INTERRUPT__
)Ë>> 5UË=2U)? ((
__HANDLE__
)->
In°™˚
->
CR2
 |(1U << ((__INTERRUPT__Ë& 
UART_IT_MASK
))): \

814 ((
__HANDLE__
)->
In°™˚
->
CR3
 |(1U << ((
__INTERRUPT__
Ë& 
UART_IT_MASK
))))

833 
	#__HAL_UART_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((
uöt8_t
)(__INTERRUPT__)Ë>> 5UË=1U)? ((__HANDLE__)->
In°™˚
->
CR1
 &~ (1U << ((__INTERRUPT__Ë& 
UART_IT_MASK
))): \

	)

834 ((((
uöt8_t
)(
__INTERRUPT__
)Ë>> 5UË=2U)? ((
__HANDLE__
)->
In°™˚
->
CR2
 &~ (1U << ((__INTERRUPT__Ë& 
UART_IT_MASK
))): \

835 ((
__HANDLE__
)->
In°™˚
->
CR3
 &~ (1U << ((
__INTERRUPT__
Ë& 
UART_IT_MASK
))))

855 
	#__HAL_UART_GET_IT
(
__HANDLE__
, 
__IT__
Ë((__HANDLE__)->
In°™˚
->
ISR
 & ((
uöt32_t
)1U << ((__IT__)>> 0x08U)))

	)

873 
	#__HAL_UART_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
Ë((((((
uöt8_t
)(__IT__)Ë>> 5UË=1U)? (__HANDLE__)->
In°™˚
->
CR1
:(((((uöt8_t)(__IT__)Ë>> 5UË=2U)? \

	)

874 (
__HANDLE__
)->
In°™˚
->
CR2
 : (__HANDLE__)->In°™˚->
CR3
)Ë& ((
uöt32_t
)1U << (((
uöt16_t
)(
__IT__
)Ë& 
UART_IT_MASK
)))

895 
	#__HAL_UART_CLEAR_IT
(
__HANDLE__
, 
__IT_CLEAR__
Ë((__HANDLE__)->
In°™˚
->
ICR
 = (
uöt32_t
)(__IT_CLEAR__))

	)

908 
	#__HAL_UART_SEND_REQ
(
__HANDLE__
, 
__REQ__
Ë((__HANDLE__)->
In°™˚
->
RQR
 |(
uöt32_t
)(__REQ__))

	)

914 
	#__HAL_UART_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

920 
	#__HAL_UART_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_ONEBIT
))

	)

926 
	#__HAL_UART_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
USART_CR1_UE
)

	)

932 
	#__HAL_UART_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
USART_CR1_UE
)

	)

946 
	#__HAL_UART_HWCONTROL_CTS_ENABLE
(
__HANDLE__
Ë\

	)

948 
SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_CTSE
); \

949 (
__HANDLE__
)->
Inô
.
HwFlowCé
 |
USART_CR3_CTSE
; \

964 
	#__HAL_UART_HWCONTROL_CTS_DISABLE
(
__HANDLE__
Ë\

	)

966 
CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_CTSE
); \

967 (
__HANDLE__
)->
Inô
.
HwFlowCé
 &~(
USART_CR3_CTSE
); \

982 
	#__HAL_UART_HWCONTROL_RTS_ENABLE
(
__HANDLE__
Ë\

	)

984 
SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_RTSE
); \

985 (
__HANDLE__
)->
Inô
.
HwFlowCé
 |
USART_CR3_RTSE
; \

1000 
	#__HAL_UART_HWCONTROL_RTS_DISABLE
(
__HANDLE__
Ë\

	)

1002 
CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_RTSE
);\

1003 (
__HANDLE__
)->
Inô
.
HwFlowCé
 &~(
USART_CR3_RTSE
); \

1010 
	#__HAL_UART_ONE_BIT_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

1016 
	#__HAL_UART_ONE_BIT_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
))

	)

1032 
	#UART_DIV_LPUART
(
__PCLK__
, 
__BAUD__
Ë((((
uöt64_t
)(__PCLK__)*256UË+ ((__BAUD__)/2U)Ë/ (__BAUD__))

	)

1039 
	#UART_DIV_SAMPLING8
(
__PCLK__
, 
__BAUD__
Ë((((__PCLK__)*2UË+ ((__BAUD__)/2U)Ë/ (__BAUD__))

	)

1046 
	#UART_DIV_SAMPLING16
(
__PCLK__
, 
__BAUD__
Ë(((__PCLK__Ë+ ((__BAUD__)/2U)Ë/ (__BAUD__))

	)

1052 
	#UART_INSTANCE_LOWPOWER
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
 =
LPUART1
Ë? 
SET
 : 
RESET
 )

	)

1060 
	#IS_UART_BAUDRATE
(
__BAUDRATE__
Ë((__BAUDRATE__Ë< 4000001)

	)

1066 
	#IS_UART_7B_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0x7F)

	)

1072 
	#IS_UART_4B_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

1078 
	#IS_UART_ASSERTIONTIME
(
__TIME__
Ë((__TIME__Ë<0x1F)

	)

1084 
	#IS_UART_DEASSERTIONTIME
(
__TIME__
Ë((__TIME__Ë<0x1F)

	)

1091 
	#IS_UART_STOPBITS
(
__STOPBITS__
Ë(((__STOPBITS__Ë=
UART_STOPBITS_1
Ë|| \

	)

1092 ((
__STOPBITS__
Ë=
UART_STOPBITS_1_5
) || \

1093 ((
__STOPBITS__
Ë=
UART_STOPBITS_2
))

1100 
	#IS_LPUART_STOPBITS
(
__STOPBITS__
Ë(((__STOPBITS__Ë=
UART_STOPBITS_1
Ë|| \

	)

1101 ((
__STOPBITS__
Ë=
UART_STOPBITS_2
))

1108 
	#IS_UART_PARITY
(
__PARITY__
Ë(((__PARITY__Ë=
UART_PARITY_NONE
Ë|| \

	)

1109 ((
__PARITY__
Ë=
UART_PARITY_EVEN
) || \

1110 ((
__PARITY__
Ë=
UART_PARITY_ODD
))

1117 
	#IS_UART_HARDWARE_FLOW_CONTROL
(
__CONTROL__
)\

	)

1118 (((
__CONTROL__
Ë=
UART_HWCONTROL_NONE
) || \

1119 ((
__CONTROL__
Ë=
UART_HWCONTROL_RTS
) || \

1120 ((
__CONTROL__
Ë=
UART_HWCONTROL_CTS
) || \

1121 ((
__CONTROL__
Ë=
UART_HWCONTROL_RTS_CTS
))

1128 
	#IS_UART_MODE
(
__MODE__
Ë((((__MODE__Ë& (~((
uöt32_t
)(
UART_MODE_TX_RX
)))Ë=(uöt32_t)0x00UË&& ((__MODE__Ë!(uöt32_t)0x00U))

	)

1135 
	#IS_UART_STATE
(
__STATE__
Ë(((__STATE__Ë=
UART_STATE_DISABLE
Ë|| \

	)

1136 ((
__STATE__
Ë=
UART_STATE_ENABLE
))

1143 
	#IS_UART_OVERSAMPLING
(
__SAMPLING__
Ë(((__SAMPLING__Ë=
UART_OVERSAMPLING_16
Ë|| \

	)

1144 ((
__SAMPLING__
Ë=
UART_OVERSAMPLING_8
))

1151 
	#IS_UART_ONE_BIT_SAMPLE
(
__ONEBIT__
Ë(((__ONEBIT__Ë=
UART_ONE_BIT_SAMPLE_DISABLE
Ë|| \

	)

1152 ((
__ONEBIT__
Ë=
UART_ONE_BIT_SAMPLE_ENABLE
))

1159 
	#IS_UART_ADVFEATURE_AUTOBAUDRATEMODE
(
__MODE__
Ë(((__MODE__Ë=
UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT
Ë|| \

	)

1160 ((
__MODE__
Ë=
UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE
) || \

1161 ((
__MODE__
Ë=
UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME
) || \

1162 ((
__MODE__
Ë=
UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME
))

1169 
	#IS_UART_RECEIVER_TIMEOUT
(
__TIMEOUT__
Ë(((__TIMEOUT__Ë=
UART_RECEIVER_TIMEOUT_DISABLE
Ë|| \

	)

1170 ((
__TIMEOUT__
Ë=
UART_RECEIVER_TIMEOUT_ENABLE
))

1177 
	#IS_UART_LIN
(
__LIN__
Ë(((__LIN__Ë=
UART_LIN_DISABLE
Ë|| \

	)

1178 ((
__LIN__
Ë=
UART_LIN_ENABLE
))

1185 
	#IS_UART_LIN_BREAK_DETECT_LENGTH
(
__LENGTH__
Ë(((__LENGTH__Ë=
UART_LINBREAKDETECTLENGTH_10B
Ë|| \

	)

1186 ((
__LENGTH__
Ë=
UART_LINBREAKDETECTLENGTH_11B
))

1193 
	#IS_UART_DMA_TX
(
__DMATX__
Ë(((__DMATX__Ë=
UART_DMA_TX_DISABLE
Ë|| \

	)

1194 ((
__DMATX__
Ë=
UART_DMA_TX_ENABLE
))

1201 
	#IS_UART_DMA_RX
(
__DMARX__
Ë(((__DMARX__Ë=
UART_DMA_RX_DISABLE
Ë|| \

	)

1202 ((
__DMARX__
Ë=
UART_DMA_RX_ENABLE
))

1209 
	#IS_UART_HALF_DUPLEX
(
__HDSEL__
Ë(((__HDSEL__Ë=
UART_HALF_DUPLEX_DISABLE
Ë|| \

	)

1210 ((
__HDSEL__
Ë=
UART_HALF_DUPLEX_ENABLE
))

1217 
	#IS_UART_WAKEUPMETHOD
(
__WAKEUP__
Ë(((__WAKEUP__Ë=
UART_WAKEUPMETHOD_IDLELINE
Ë|| \

	)

1218 ((
__WAKEUP__
Ë=
UART_WAKEUPMETHOD_ADDRESSMARK
))

1225 
	#IS_UART_REQUEST_PARAMETER
(
__PARAM__
Ë(((__PARAM__Ë=
UART_AUTOBAUD_REQUEST
Ë|| \

	)

1226 ((
__PARAM__
Ë=
UART_SENDBREAK_REQUEST
) || \

1227 ((
__PARAM__
Ë=
UART_MUTE_MODE_REQUEST
) || \

1228 ((
__PARAM__
Ë=
UART_RXDATA_FLUSH_REQUEST
) || \

1229 ((
__PARAM__
Ë=
UART_TXDATA_FLUSH_REQUEST
))

1236 
	#IS_UART_ADVFEATURE_INIT
(
__INIT__
Ë((__INIT__Ë<(
UART_ADVFEATURE_NO_INIT
 | \

	)

1237 
UART_ADVFEATURE_TXINVERT_INIT
 | \

1238 
UART_ADVFEATURE_RXINVERT_INIT
 | \

1239 
UART_ADVFEATURE_DATAINVERT_INIT
 | \

1240 
UART_ADVFEATURE_SWAP_INIT
 | \

1241 
UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 | \

1242 
UART_ADVFEATURE_DMADISABLEONERROR_INIT
 | \

1243 
UART_ADVFEATURE_AUTOBAUDRATE_INIT
 | \

1244 
UART_ADVFEATURE_MSBFIRST_INIT
))

1251 
	#IS_UART_ADVFEATURE_TXINV
(
__TXINV__
Ë(((__TXINV__Ë=
UART_ADVFEATURE_TXINV_DISABLE
Ë|| \

	)

1252 ((
__TXINV__
Ë=
UART_ADVFEATURE_TXINV_ENABLE
))

1259 
	#IS_UART_ADVFEATURE_RXINV
(
__RXINV__
Ë(((__RXINV__Ë=
UART_ADVFEATURE_RXINV_DISABLE
Ë|| \

	)

1260 ((
__RXINV__
Ë=
UART_ADVFEATURE_RXINV_ENABLE
))

1267 
	#IS_UART_ADVFEATURE_DATAINV
(
__DATAINV__
Ë(((__DATAINV__Ë=
UART_ADVFEATURE_DATAINV_DISABLE
Ë|| \

	)

1268 ((
__DATAINV__
Ë=
UART_ADVFEATURE_DATAINV_ENABLE
))

1275 
	#IS_UART_ADVFEATURE_SWAP
(
__SWAP__
Ë(((__SWAP__Ë=
UART_ADVFEATURE_SWAP_DISABLE
Ë|| \

	)

1276 ((
__SWAP__
Ë=
UART_ADVFEATURE_SWAP_ENABLE
))

1283 
	#IS_UART_OVERRUN
(
__OVERRUN__
Ë(((__OVERRUN__Ë=
UART_ADVFEATURE_OVERRUN_ENABLE
Ë|| \

	)

1284 ((
__OVERRUN__
Ë=
UART_ADVFEATURE_OVERRUN_DISABLE
))

1291 
	#IS_UART_ADVFEATURE_AUTOBAUDRATE
(
__AUTOBAUDRATE__
Ë(((__AUTOBAUDRATE__Ë=
UART_ADVFEATURE_AUTOBAUDRATE_DISABLE
Ë|| \

	)

1292 ((
__AUTOBAUDRATE__
Ë=
UART_ADVFEATURE_AUTOBAUDRATE_ENABLE
))

1299 
	#IS_UART_ADVFEATURE_DMAONRXERROR
(
__DMA__
Ë(((__DMA__Ë=
UART_ADVFEATURE_DMA_ENABLEONRXERROR
Ë|| \

	)

1300 ((
__DMA__
Ë=
UART_ADVFEATURE_DMA_DISABLEONRXERROR
))

1307 
	#IS_UART_ADVFEATURE_MSBFIRST
(
__MSBFIRST__
Ë(((__MSBFIRST__Ë=
UART_ADVFEATURE_MSBFIRST_DISABLE
Ë|| \

	)

1308 ((
__MSBFIRST__
Ë=
UART_ADVFEATURE_MSBFIRST_ENABLE
))

1315 
	#IS_UART_ADVFEATURE_STOPMODE
(
__STOPMODE__
Ë(((__STOPMODE__Ë=
UART_ADVFEATURE_STOPMODE_DISABLE
Ë|| \

	)

1316 ((
__STOPMODE__
Ë=
UART_ADVFEATURE_STOPMODE_ENABLE
))

1323 
	#IS_UART_MUTE_MODE
(
__MUTE__
Ë(((__MUTE__Ë=
UART_ADVFEATURE_MUTEMODE_DISABLE
Ë|| \

	)

1324 ((
__MUTE__
Ë=
UART_ADVFEATURE_MUTEMODE_ENABLE
))

1331 
	#IS_UART_WAKEUP_SELECTION
(
__WAKE__
Ë(((__WAKE__Ë=
UART_WAKEUP_ON_ADDRESS
Ë|| \

	)

1332 ((
__WAKE__
Ë=
UART_WAKEUP_ON_STARTBIT
) || \

1333 ((
__WAKE__
Ë=
UART_WAKEUP_ON_READDATA_NONEMPTY
))

1340 
	#IS_UART_DE_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
UART_DE_POLARITY_HIGH
Ë|| \

	)

1341 ((
__POLARITY__
Ë=
UART_DE_POLARITY_LOW
))

1348 
	~"°m32l0xx_hÆ_u¨t_ex.h
"

1360 
HAL_SètusTy≥Def
 
HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1361 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1362 
HAL_SètusTy≥Def
 
HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
);

1363 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
);

1364 
HAL_SètusTy≥Def
 
HAL_UART_DeInô
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

1365 
HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1366 
HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1377 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

1378 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

1379 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

1380 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

1381 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

1382 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

1383 
HAL_SètusTy≥Def
 
HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1384 
HAL_SètusTy≥Def
 
HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1385 
HAL_SètusTy≥Def
 
HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1387 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹t
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1388 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tTønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1389 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tRe˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1390 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹t_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1391 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1392 
HAL_SètusTy≥Def
 
HAL_UART_Ab‹tRe˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1394 
HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1395 
HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1396 
HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1397 
HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1398 
HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1399 
HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1400 
HAL_UART_Ab‹tC∂tCÆlback
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

1401 
HAL_UART_Ab‹tTønsmôC∂tCÆlback
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

1402 
HAL_UART_Ab‹tRe˚iveC∂tCÆlback
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

1413 
HAL_SètusTy≥Def
 
HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1414 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_E«bÀMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1415 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_DißbÀMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1416 
HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1417 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1418 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1429 
HAL_UART_SèãTy≥Def
 
HAL_UART_GëSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1430 
uöt32_t
 
HAL_UART_GëEº‹
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1445 
HAL_SètusTy≥Def
 
UART_SëC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1446 
HAL_SètusTy≥Def
 
UART_CheckIdÀSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1447 
HAL_SètusTy≥Def
 
UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Tick°¨t
, uöt32_à
Timeout
);

1448 
UART_AdvFótuªC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
);

1462 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart_ex.h

37 #i‚de‡
__STM32L0xx_HAL_UART_EX_H


38 
	#__STM32L0xx_HAL_UART_EX_H


	)

40 #ifde‡
__˝lu•lus


45 
	~"°m32l0xx_hÆ_def.h
"

65 
uöt32_t
 
WakeUpEvít
;

70 
uöt16_t
 
AddªssLígth
;

73 
uöt8_t
 
Addªss
;

74 } 
	tUART_WakeUpTy≥Def
;

88 
	#UART_WORDLENGTH_7B
 ((
uöt32_t
)
USART_CR1_M1
Ë

	)

89 
	#UART_WORDLENGTH_8B
 ((
uöt32_t
)0x00000000UË

	)

90 
	#UART_WORDLENGTH_9B
 ((
uöt32_t
)
USART_CR1_M0
Ë

	)

98 
	#UART_ADDRESS_DETECT_4B
 ((
uöt32_t
)0x00000000UË

	)

99 
	#UART_ADDRESS_DETECT_7B
 ((
uöt32_t
)
USART_CR2_ADDM7
Ë

	)

119 
HAL_SètusTy≥Def
 
HAL_RS485Ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Pﬁ¨ôy
, uöt32_à
As£πi⁄Time
, uöt32_à
Dós£πi⁄Time
);

132 
HAL_SètusTy≥Def
 
HAL_UARTEx_St›ModeWakeUpSour˚C⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
UART_WakeUpTy≥Def
 
WakeUpSñe˘i⁄
);

133 
HAL_SètusTy≥Def
 
HAL_UARTEx_E«bÀSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

134 
HAL_SètusTy≥Def
 
HAL_UARTEx_DißbÀSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

135 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹Ex_AddªssLígth_Së
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
AddªssLígth
);

136 
HAL_SètusTy≥Def
 
HAL_UARTEx_E«bÀClockSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

137 
HAL_SètusTy≥Def
 
HAL_UARTEx_DißbÀClockSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

138 
HAL_UARTEx_WakeupCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

158 #i‡
deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
Ë|| deföed (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

159 
	#UART_GETCLOCKSOURCE
(
__HANDLE__
,
__CLOCKSOURCE__
Ë\

	)

161 if((
__HANDLE__
)->
In°™˚
 =
USART2
) \

163 
__HAL_RCC_GET_USART2_SOURCE
()) \

165 
RCC_USART2CLKSOURCE_PCLK1
: \

166 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

168 
RCC_USART2CLKSOURCE_HSI
: \

169 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

171 
RCC_USART2CLKSOURCE_SYSCLK
: \

172 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

174 
RCC_USART2CLKSOURCE_LSE
: \

175 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

178 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

182 if((
__HANDLE__
)->
In°™˚
 =
LPUART1
) \

184 
__HAL_RCC_GET_LPUART1_SOURCE
()) \

186 
RCC_LPUART1CLKSOURCE_PCLK1
: \

187 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

189 
RCC_LPUART1CLKSOURCE_HSI
: \

190 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

192 
RCC_LPUART1CLKSOURCE_SYSCLK
: \

193 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

195 
RCC_LPUART1CLKSOURCE_LSE
: \

196 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

199 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

205 #ñi‡
deföed
 (
STM32L051xx
Ë|| deföed (
STM32L052xx
Ë|| deföed (
STM32L053xx
Ë|| deföed (
STM32L061xx
Ë|| deföed (
STM32L062xx
Ë|| deföed (
STM32L063xx
)

207 
	#UART_GETCLOCKSOURCE
(
__HANDLE__
,
__CLOCKSOURCE__
Ë\

	)

209 if((
__HANDLE__
)->
In°™˚
 =
USART1
) \

211 
__HAL_RCC_GET_USART1_SOURCE
()) \

213 
RCC_USART1CLKSOURCE_PCLK2
: \

214 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK2
; \

216 
RCC_USART1CLKSOURCE_HSI
: \

217 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

219 
RCC_USART1CLKSOURCE_SYSCLK
: \

220 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

222 
RCC_USART1CLKSOURCE_LSE
: \

223 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

226 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

230 if((
__HANDLE__
)->
In°™˚
 =
USART2
) \

232 
__HAL_RCC_GET_USART2_SOURCE
()) \

234 
RCC_USART2CLKSOURCE_PCLK1
: \

235 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

237 
RCC_USART2CLKSOURCE_HSI
: \

238 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

240 
RCC_USART2CLKSOURCE_SYSCLK
: \

241 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

243 
RCC_USART2CLKSOURCE_LSE
: \

244 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

247 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

251 if((
__HANDLE__
)->
In°™˚
 =
LPUART1
) \

253 
__HAL_RCC_GET_LPUART1_SOURCE
()) \

255 
RCC_LPUART1CLKSOURCE_PCLK1
: \

256 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

258 
RCC_LPUART1CLKSOURCE_HSI
: \

259 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

261 
RCC_LPUART1CLKSOURCE_SYSCLK
: \

262 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

264 
RCC_LPUART1CLKSOURCE_LSE
: \

265 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

268 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

276 
	#UART_GETCLOCKSOURCE
(
__HANDLE__
,
__CLOCKSOURCE__
Ë\

	)

278 if((
__HANDLE__
)->
In°™˚
 =
USART1
) \

280 
__HAL_RCC_GET_USART1_SOURCE
()) \

282 
RCC_USART1CLKSOURCE_PCLK2
: \

283 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK2
; \

285 
RCC_USART1CLKSOURCE_HSI
: \

286 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

288 
RCC_USART1CLKSOURCE_SYSCLK
: \

289 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

291 
RCC_USART1CLKSOURCE_LSE
: \

292 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

295 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

299 if((
__HANDLE__
)->
In°™˚
 =
USART2
) \

301 
__HAL_RCC_GET_USART2_SOURCE
()) \

303 
RCC_USART2CLKSOURCE_PCLK1
: \

304 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

306 
RCC_USART2CLKSOURCE_HSI
: \

307 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

309 
RCC_USART2CLKSOURCE_SYSCLK
: \

310 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

312 
RCC_USART2CLKSOURCE_LSE
: \

313 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

316 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

320 if((
__HANDLE__
)->
In°™˚
 =
USART4
) \

322 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

324 if((
__HANDLE__
)->
In°™˚
 =
USART5
) \

326 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

328 if((
__HANDLE__
)->
In°™˚
 =
LPUART1
) \

330 
__HAL_RCC_GET_LPUART1_SOURCE
()) \

332 
RCC_LPUART1CLKSOURCE_PCLK1
: \

333 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_PCLK1
; \

335 
RCC_LPUART1CLKSOURCE_HSI
: \

336 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_HSI
; \

338 
RCC_LPUART1CLKSOURCE_SYSCLK
: \

339 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_SYSCLK
; \

341 
RCC_LPUART1CLKSOURCE_LSE
: \

342 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_LSE
; \

345 (
__CLOCKSOURCE__
Ë
UART_CLOCKSOURCE_UNDEFINED
; \

361 
	#UART_MASK_COMPUTATION
(
__HANDLE__
Ë\

	)

363 i‡((
__HANDLE__
)->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
) \

365 i‡((
__HANDLE__
)->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
) \

367 (
__HANDLE__
)->
Mask
 = 0x01FF ; \

371 (
__HANDLE__
)->
Mask
 = 0x00FF ; \

374 i‡((
__HANDLE__
)->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_8B
) \

376 i‡((
__HANDLE__
)->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
) \

378 (
__HANDLE__
)->
Mask
 = 0x00FF ; \

382 (
__HANDLE__
)->
Mask
 = 0x007F ; \

385 i‡((
__HANDLE__
)->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_7B
) \

387 i‡((
__HANDLE__
)->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
) \

389 (
__HANDLE__
)->
Mask
 = 0x007F ; \

393 (
__HANDLE__
)->
Mask
 = 0x003F ; \

404 
	#IS_UART_WORD_LENGTH
(
__LENGTH__
Ë(((__LENGTH__Ë=
UART_WORDLENGTH_7B
Ë|| \

	)

405 ((
__LENGTH__
Ë=
UART_WORDLENGTH_8B
) || \

406 ((
__LENGTH__
Ë=
UART_WORDLENGTH_9B
))

413 
	#IS_UART_ADDRESSLENGTH_DETECT
(
__ADDRESS__
Ë(((__ADDRESS__Ë=
UART_ADDRESS_DETECT_4B
Ë|| \

	)

414 ((
__ADDRESS__
Ë=
UART_ADDRESS_DETECT_7B
))

430 #ifde‡
__˝lu•lus


	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal.c

52 
	~"°m32l0xx_hÆ.h
"

58 #ifde‡
HAL_MODULE_ENABLED


76 
__IO
 
uöt32_t
 
	guwTick
;

89 
	#__STM32L0xx_HAL_VERSION_MAIN
 (0x01UË

	)

90 
	#__STM32L0xx_HAL_VERSION_SUB1
 (0x08UË

	)

91 
	#__STM32L0xx_HAL_VERSION_SUB2
 (0x02UË

	)

92 
	#__STM32L0xx_HAL_VERSION_RC
 (0x00UË

	)

93 
	#__STM32L0xx_HAL_VERSION
 ((
__STM32L0xx_HAL_VERSION_MAIN
 << 24U)\

	)

94 |(
	g__STM32L0xx_HAL_VERSION_SUB1
 << 16U)\

95 |(
	g__STM32L0xx_HAL_VERSION_SUB2
 << 8U )\

96 |(
	g__STM32L0xx_HAL_VERSION_RC
))

98 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFFU)

	)

165 
HAL_SètusTy≥Def
 
	$HAL_Inô
()

168 #i‡(
BUFFER_CACHE_DISABLE
 != 0)

169 
	`__HAL_FLASH_BUFFER_CACHE_DISABLE
();

172 #i‡(
PREREAD_ENABLE
 != 0)

173 
	`__HAL_FLASH_PREREAD_BUFFER_ENABLE
();

176 #i‡(
PREFETCH_ENABLE
 != 0)

177 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

182 
	`HAL_InôTick
(
TICK_INT_PRIORITY
);

185 
	`HAL_M•Inô
();

188  
HAL_OK
;

189 
	}
}

197 
HAL_SètusTy≥Def
 
	$HAL_DeInô
()

200 
	`__HAL_RCC_APB1_FORCE_RESET
();

201 
	`__HAL_RCC_APB1_RELEASE_RESET
();

203 
	`__HAL_RCC_APB2_FORCE_RESET
();

204 
	`__HAL_RCC_APB2_RELEASE_RESET
();

206 
	`__HAL_RCC_AHB_FORCE_RESET
();

207 
	`__HAL_RCC_AHB_RELEASE_RESET
();

209 
	`__HAL_RCC_IOP_FORCE_RESET
();

210 
	`__HAL_RCC_IOP_RELEASE_RESET
();

213 
	`HAL_M•DeInô
();

216  
HAL_OK
;

217 
	}
}

223 
__wók
 
	$HAL_M•Inô
()

228 
	}
}

234 
__wók
 
	$HAL_M•DeInô
()

239 
	}
}

258 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
)

261 
	`HAL_SYSTICK_C⁄fig
(
Sy°emC‹eClock
/1000U);

264 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
TickPri‹ôy
 ,0U);

267  
HAL_OK
;

268 
	}
}

305 
__wók
 
	$HAL_IncTick
()

307 
uwTick
++;

308 
	}
}

316 
__wók
 
uöt32_t
 
	$HAL_GëTick
()

318  
uwTick
;

319 
	}
}

331 
__wók
 
	$HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
)

333 
uöt32_t
 
tick°¨t
 = 0U;

334 
tick°¨t
 = 
	`HAL_GëTick
();

335 (
	`HAL_GëTick
(Ë- 
tick°¨t
Ë< 
Dñay
)

338 
	}
}

350 
__wók
 
	$HAL_Su•ídTick
()

353 
SysTick
->
CTRL
 &~
SysTick_CTRL_TICKINT_Msk
;

354 
	}
}

366 
__wók
 
	$HAL_ResumeTick
()

369 
SysTick
->
CTRL
 |
SysTick_CTRL_TICKINT_Msk
;

370 
	}
}

376 
uöt32_t
 
	$HAL_GëHÆVîsi⁄
()

378  
__STM32L0xx_HAL_VERSION
;

379 
	}
}

385 
uöt32_t
 
	$HAL_GëREVID
()

387 ((
DBGMCU
->
IDCODE
) >> 16U);

388 
	}
}

394 
uöt32_t
 
	$HAL_GëDEVID
()

396 ((
DBGMCU
->
IDCODE
Ë& 
IDCODE_DEVID_MASK
);

397 
	}
}

403 
	$HAL_DBGMCU_E«bÀDBGSÀïMode
()

405 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

406 
	}
}

412 
	$HAL_DBGMCU_DißbÀDBGSÀïMode
()

414 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

415 
	}
}

421 
	$HAL_DBGMCU_E«bÀDBGSt›Mode
()

423 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

424 
	}
}

430 
	$HAL_DBGMCU_DißbÀDBGSt›Mode
()

432 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

433 
	}
}

439 
	$HAL_DBGMCU_E«bÀDBGSèndbyMode
()

441 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

442 
	}
}

448 
	$HAL_DBGMCU_DißbÀDBGSèndbyMode
()

450 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

451 
	}
}

462 
	$HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(
uöt32_t
 
Pîùh
)

465 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
Pîùh
));

467 
DBGMCU
->
CR
 |
Pîùh
;

469 
	}
}

479 
	$HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(
uöt32_t
 
Pîùh
)

482 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
Pîùh
));

484 
DBGMCU
->
CR
 &~
Pîùh
;

486 
	}
}

496 
uöt32_t
 
	$HAL_SYSCFG_GëBoŸMode
()

498  (
SYSCFG
->
CFGR1
 & 
SYSCFG_CFGR1_BOOT_MODE
);

499 
	}
}

513 
	$HAL_SYSCFG_VREFINT_OuçutSñe˘
(
uöt32_t
 
SYSCFG_Vªföt_OUTPUT
)

516 
	`as£π_∑øm
(
	`IS_SYSCFG_VREFINT_OUT_SELECT
(
SYSCFG_Vªföt_OUTPUT
));

519 
SYSCFG
->
CFGR3
 &~(
SYSCFG_CFGR3_VREF_OUT
);

520 
SYSCFG
->
CFGR3
 |(
uöt32_t
)(
SYSCFG_Vªföt_OUTPUT
);

521 
	}
}

527 
	$HAL_SYSCFG_E«bÀ_Lock_VREFINT
()

530 
	`SET_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_REF_LOCK
);

531 
	}
}

537 
	$HAL_SYSCFG_DißbÀ_Lock_VREFINT
()

540 
	`CLEAR_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_REF_LOCK
);

541 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c

257 
	~"°m32l0xx_hÆ.h
"

268 #ifde‡
HAL_ADC_MODULE_ENABLED


280 
	#ADC_STAB_DELAY_US
 ((
uöt32_t
Ë1U)

	)

285 
	#ADC_TEMPSENSOR_DELAY_US
 ((
uöt32_t
Ë10U)

	)

296 
HAL_SètusTy≥Def
 
ADC_E«bÀ
(
ADC_H™dÀTy≥Def
* 
hadc
);

297 
HAL_SètusTy≥Def
 
ADC_DißbÀ
(
ADC_H™dÀTy≥Def
* 
hadc
);

298 
HAL_SètusTy≥Def
 
ADC_C⁄vîsi⁄St›
(
ADC_H™dÀTy≥Def
* 
hadc
);

299 
ADC_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

300 
ADC_DMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

301 
ADC_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

302 
ADC_DñayMi¸oSec⁄d
(
uöt32_t
 
mi¸oSec⁄d
);

355 
HAL_SètusTy≥Def
 
	$HAL_ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

359 if(
hadc
 =
NULL
)

361  
HAL_ERROR
;

365 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

366 
	`as£π_∑øm
(
	`IS_ADC_CLOCKPRESCALER
(
hadc
->
Inô
.
ClockPªsˇÀr
));

367 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
hadc
->
Inô
.
Resﬁuti⁄
));

368 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
hadc
->
Inô
.
D©aAlign
));

369 
	`as£π_∑øm
(
	`IS_ADC_SCAN_MODE
(
hadc
->
Inô
.
SˇnC⁄vMode
));

370 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

371 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
));

372 
	`as£π_∑øm
(
	`IS_ADC_EXTTRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

373 
	`as£π_∑øm
(
	`IS_ADC_EXTTRIG
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
));

374 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
DMAC⁄töuousReque°s
));

375 
	`as£π_∑øm
(
	`IS_ADC_EOC_SELECTION
(
hadc
->
Inô
.
EOCSñe˘i⁄
));

376 
	`as£π_∑øm
(
	`IS_ADC_OVERRUN
(
hadc
->
Inô
.
Ovîrun
));

377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
LowPowîAutoWaô
));

378 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
LowPowîFªquícyMode
));

379 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
LowPowîAutoPowîOff
));

380 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
hadc
->
Inô
.
Sam∂ögTime
));

381 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
Ovîßm∂ögMode
));

391 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_RESET
)

394 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

397 
hadc
->
Lock
 = 
HAL_UNLOCKED
;

400 
	`HAL_ADC_M•Inô
(
hadc
);

408 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
) ||

409 (
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë!
RESET
) )

412 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

415 
	`__HAL_UNLOCK
(
hadc
);

416  
HAL_ERROR
;

420 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

421 
HAL_ADC_STATE_REG_BUSY
,

422 
HAL_ADC_STATE_BUSY_INTERNAL
);

429 i‡(
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
)

441 
	`__HAL_ADC_CLOCK_PRESCALER
(
hadc
);

445 
hadc
->
In°™˚
->
CFGR1
 &~–
ADC_CFGR1_RES
);

446 
hadc
->
In°™˚
->
CFGR1
 |hadc->
Inô
.
Resﬁuti⁄
;

450 
ADC
->
CCR
 &(
uöt32_t
)~
ADC_CCR_LFMEN
;

451 
ADC
->
CCR
 |=
	`__HAL_ADC_CCR_LOWFREQUENCY
(
hadc
->
Inô
.
LowPowîFªquícyMode
);

454 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR
, 
ADC_CR_ADVREGEN
))

457 
hadc
->
In°™˚
->
CR
 |
ADC_CR_ADVREGEN
;

471 
hadc
->
In°™˚
->
CFGR1
 &~(
ADC_CFGR1_ALIGN
 |

472 
ADC_CFGR1_SCANDIR
 |

473 
ADC_CFGR1_EXTSEL
 |

474 
ADC_CFGR1_EXTEN
 |

475 
ADC_CFGR1_CONT
 |

476 
ADC_CFGR1_DMACFG
 |

477 
ADC_CFGR1_OVRMOD
 |

478 
ADC_CFGR1_AUTDLY
 |

479 
ADC_CFGR1_AUTOFF
 |

480 
ADC_CFGR1_DISCEN
 );

482 
hadc
->
In°™˚
->
CFGR1
 |(hadc->
Inô
.
D©aAlign
 |

483 
	`ADC_SCANDIR
(
hadc
->
Inô
.
SˇnC⁄vMode
) |

484 
	`ADC_CONTINUOUS
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
) |

485 
	`ADC_DMACONTREQ
(
hadc
->
Inô
.
DMAC⁄töuousReque°s
) |

486 
hadc
->
Inô
.
Ovîrun
 |

487 
	`__HAL_ADC_CFGR1_AutoDñay
(
hadc
->
Inô
.
LowPowîAutoWaô
) |

488 
	`__HAL_ADC_CFGR1_AUTOFF
(
hadc
->
Inô
.
LowPowîAutoPowîOff
));

495 i‡(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
 !
ADC_SOFTWARE_START
)

497 
hadc
->
In°™˚
->
CFGR1
 |hadc->
Inô
.
Exã∫ÆTrigC⁄v
 |

498 
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
;

502 i‡(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
 =
ENABLE
)

504 i‡(
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
)

507 
hadc
->
In°™˚
->
CFGR1
 |(
ADC_CFGR1_DISCEN
);

516 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

519 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

523 i‡(
hadc
->
Inô
.
Ovîßm∂ögMode
 =
ENABLE
)

525 
	`as£π_∑øm
(
	`IS_ADC_OVERSAMPLING_RATIO
(
hadc
->
Inô
.
Ovîßm∂e
.
R©io
));

526 
	`as£π_∑øm
(
	`IS_ADC_RIGHT_BIT_SHIFT
(
hadc
->
Inô
.
Ovîßm∂e
.
RightBôShi·
));

527 
	`as£π_∑øm
(
	`IS_ADC_TRIGGERED_OVERSAMPLING_MODE
(
hadc
->
Inô
.
Ovîßm∂e
.
TriggîedMode
));

534 
hadc
->
In°™˚
->
CFGR2
 &~–
ADC_CFGR2_OVSR
 |

535 
ADC_CFGR2_OVSS
 |

536 
ADC_CFGR2_TOVS
 );

538 
hadc
->
In°™˚
->
CFGR2
 |–hadc->
Inô
.
Ovîßm∂e
.
R©io
 |

539 
hadc
->
Inô
.
Ovîßm∂e
.
RightBôShi·
 |

540 
hadc
->
Inô
.
Ovîßm∂e
.
TriggîedMode
 );

543 
hadc
->
In°™˚
->
CFGR2
 |
ADC_CFGR2_OVSE
;

547 if(
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CFGR2
, 
ADC_CFGR2_OVSE
))

550 
hadc
->
In°™˚
->
CFGR2
 &~
ADC_CFGR2_OVSE
;

555 
hadc
->
In°™˚
->
SMPR
 &(
uöt32_t
)(~
ADC_SMPR_SMPR
);

558 
hadc
->
In°™˚
->
SMPR
 |hadc->
Inô
.
Sam∂ögTime
;

561 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

564 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

565 
HAL_ADC_STATE_BUSY_INTERNAL
,

566 
HAL_ADC_STATE_READY
);

570  
HAL_OK
;

571 
	}
}

585 
HAL_SètusTy≥Def
 
	$HAL_ADC_DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
)

587 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

590 if(
hadc
 =
NULL
)

592  
HAL_ERROR
;

596 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

599 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_BUSY_INTERNAL
);

602 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›
(
hadc
);

605 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

608 
tmp_hÆ_°©us
 = 
	`ADC_DißbÀ
(
hadc
);

611 i‡(
tmp_hÆ_°©us
 !
HAL_ERROR
)

614 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

621 i‡(
tmp_hÆ_°©us
 !
HAL_ERROR
)

626 
	`__HAL_ADC_DISABLE_IT
(
hadc
, (
ADC_IT_AWD
 | 
ADC_IT_OVR
 | 
ADC_IT_EOCAL
 | 
ADC_IT_EOS
 | \

627 
ADC_IT_EOC
 | 
ADC_IT_RDY
 | 
ADC_IT_EOSMP
 ));

631 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_AWD
 | 
ADC_FLAG_EOCAL
 | 
ADC_FLAG_OVR
 | 
ADC_FLAG_EOS
 | \

632 
ADC_FLAG_EOC
 | 
ADC_FLAG_EOSMP
 | 
ADC_FLAG_RDY
));

639 
hadc
->
In°™˚
->
CR
 &~
ADC_CR_ADVREGEN
;

645 
hadc
->
In°™˚
->
CFGR1
 &~(
ADC_CFGR1_AWDCH
 | 
ADC_CFGR1_AWDEN
 | 
ADC_CFGR1_AWDSGL
 | \

646 
ADC_CFGR1_DISCEN
 | 
ADC_CFGR1_AUTOFF
 | 
ADC_CFGR1_AUTDLY
 | \

647 
ADC_CFGR1_CONT
 | 
ADC_CFGR1_OVRMOD
 | 
ADC_CFGR1_EXTEN
 | \

648 
ADC_CFGR1_EXTSEL
 | 
ADC_CFGR1_ALIGN
 | 
ADC_CFGR1_RES
 | \

649 
ADC_CFGR1_SCANDIR
| 
ADC_CFGR1_DMACFG
 | 
ADC_CFGR1_DMAEN
);

652 
hadc
->
In°™˚
->
CFGR2
 &~(
ADC_CFGR2_TOVS
 | 
ADC_CFGR2_OVSS
 | 
ADC_CFGR2_OVSR
 | \

653 
ADC_CFGR2_OVSE
 | 
ADC_CFGR2_CKMODE
 );

657 
hadc
->
In°™˚
->
SMPR
 &~(
ADC_SMPR_SMPR
);

660 
hadc
->
In°™˚
->
TR
 &~(
ADC_TR_LT
 | 
ADC_TR_HT
);

663 
hadc
->
In°™˚
->
CALFACT
 &~(
ADC_CALFACT_CALFACT
);

673 
hadc
->
In°™˚
->
CALFACT
 &~(
ADC_CALFACT_CALFACT
);

685 
	`HAL_ADC_M•DeInô
(
hadc
);

688 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

691 
hadc
->
Sèã
 = 
HAL_ADC_STATE_RESET
;

695 
	`__HAL_UNLOCK
(
hadc
);

698  
tmp_hÆ_°©us
;

699 
	}
}

706 
__wók
 
	$HAL_ADC_M•Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

709 
	`UNUSED
(
hadc
);

714 
	}
}

721 
__wók
 
	$HAL_ADC_M•DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
)

724 
	`UNUSED
(
hadc
);

729 
	}
}

763 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
)

765 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

768 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

771 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

774 
	`__HAL_LOCK
(
hadc
);

779 i‡(
hadc
->
Inô
.
LowPowîAutoPowîOff
 !
ENABLE
)

781 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

785 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

790 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

791 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
 | 
HAL_ADC_STATE_REG_EOSMP
,

792 
HAL_ADC_STATE_REG_BUSY
);

795 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

800 
	`__HAL_UNLOCK
(
hadc
);

805 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
 | 
ADC_FLAG_OVR
));

811 
hadc
->
In°™˚
->
CR
 |
ADC_CR_ADSTART
;

816 
tmp_hÆ_°©us
 = 
HAL_BUSY
;

820  
tmp_hÆ_°©us
;

821 
	}
}

829 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›
(
ADC_H™dÀTy≥Def
* 
hadc
)

831 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

834 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

837 
	`__HAL_LOCK
(
hadc
);

840 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›
(
hadc
);

843 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

846 
tmp_hÆ_°©us
 = 
	`ADC_DißbÀ
(
hadc
);

849 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

852 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

853 
HAL_ADC_STATE_REG_BUSY
,

854 
HAL_ADC_STATE_READY
);

859 
	`__HAL_UNLOCK
(
hadc
);

862  
tmp_hÆ_°©us
;

863 
	}
}

883 
HAL_SètusTy≥Def
 
	$HAL_ADC_PﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
)

885 
uöt32_t
 
tick°¨t
 = 0;

886 
uöt32_t
 
tmp_Fœg_EOC
 = 0x00;

889 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

892 i‡(
hadc
->
Inô
.
EOCSñe˘i⁄
 =
ADC_EOC_SEQ_CONV
)

894 
tmp_Fœg_EOC
 = 
ADC_FLAG_EOS
;

905 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CFGR1
, 
ADC_CFGR1_DMAEN
))

908 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

911 
	`__HAL_UNLOCK
(
hadc
);

913  
HAL_ERROR
;

917 
tmp_Fœg_EOC
 = (
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
);

922 
tick°¨t
 = 
	`HAL_GëTick
();

925 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
ISR
, 
tmp_Fœg_EOC
))

928 if(
Timeout
 !
HAL_MAX_DELAY
)

930 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

933 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_TIMEOUT
);

936 
	`__HAL_UNLOCK
(
hadc
);

938  
HAL_TIMEOUT
;

944 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_EOC
);

948 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

949 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) )

952 if–
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOS
) )

956 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

962 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
 | 
ADC_IT_EOS
);

965 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

966 
HAL_ADC_STATE_REG_BUSY
,

967 
HAL_ADC_STATE_READY
);

972 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

975 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

983 i‡(
hadc
->
Inô
.
LowPowîAutoWaô
 =
DISABLE
)

986 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
));

990  
HAL_OK
;

991 
	}
}

1009 
HAL_SètusTy≥Def
 
	$HAL_ADC_PﬁlF‹Evít
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
EvítTy≥
, uöt32_à
Timeout
)

1011 
uöt32_t
 
tick°¨t
 = 0U;

1014 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1015 
	`as£π_∑øm
(
	`IS_ADC_EVENT_TYPE
(
EvítTy≥
));

1018 
tick°¨t
 = 
	`HAL_GëTick
();

1021 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
EvítTy≥
Ë=
RESET
)

1024 if(
Timeout
 !
HAL_MAX_DELAY
)

1026 if((
Timeout
 =0UË||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1029 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_TIMEOUT
);

1032 
	`__HAL_UNLOCK
(
hadc
);

1034  
HAL_TIMEOUT
;

1039 
EvítTy≥
)

1042 
ADC_AWD_EVENT
:

1044 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_AWD1
);

1047 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

1056 i‡(
hadc
->
Inô
.
Ovîrun
 =
ADC_OVR_DATA_PRESERVED
)

1059 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_OVR
);

1062 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_OVR
);

1066 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

1071  
HAL_OK
;

1072 
	}
}

1092 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

1094 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1097 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1100 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

1103 
	`__HAL_LOCK
(
hadc
);

1108 i‡(
hadc
->
Inô
.
LowPowîAutoPowîOff
 !
ENABLE
)

1110 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

1114 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1119 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1120 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
 | 
HAL_ADC_STATE_REG_EOSMP
,

1121 
HAL_ADC_STATE_REG_BUSY
);

1124 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1129 
	`__HAL_UNLOCK
(
hadc
);

1134 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
 | 
ADC_FLAG_OVR
));

1138 
hadc
->
Inô
.
EOCSñe˘i⁄
)

1140 
ADC_EOC_SEQ_CONV
:

1141 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

1142 
	`__HAL_ADC_ENABLE_IT
(
hadc
, (
ADC_IT_EOS
 | 
ADC_IT_OVR
));

1146 
	`__HAL_ADC_ENABLE_IT
(
hadc
, (
ADC_IT_EOC
 | 
ADC_IT_EOS
 | 
ADC_IT_OVR
));

1154 
hadc
->
In°™˚
->
CR
 |
ADC_CR_ADSTART
;

1159 
tmp_hÆ_°©us
 = 
HAL_BUSY
;

1163  
tmp_hÆ_°©us
;

1164 
	}
}

1173 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

1175 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1178 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1181 
	`__HAL_LOCK
(
hadc
);

1184 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›
(
hadc
);

1187 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1191 
	`__HAL_ADC_DISABLE_IT
(
hadc
, (
ADC_IT_EOC
 | 
ADC_IT_EOS
 | 
ADC_IT_OVR
));

1194 
tmp_hÆ_°©us
 = 
	`ADC_DißbÀ
(
hadc
);

1197 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1200 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1201 
HAL_ADC_STATE_REG_BUSY
,

1202 
HAL_ADC_STATE_READY
);

1207 
	`__HAL_UNLOCK
(
hadc
);

1210  
tmp_hÆ_°©us
;

1211 
	}
}

1223 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
)

1225 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1228 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1231 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

1234 
	`__HAL_LOCK
(
hadc
);

1239 i‡(
hadc
->
Inô
.
LowPowîAutoPowîOff
 !
ENABLE
)

1241 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

1245 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1250 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1251 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
 | 
HAL_ADC_STATE_REG_EOSMP
,

1252 
HAL_ADC_STATE_REG_BUSY
);

1255 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1260 
	`__HAL_UNLOCK
(
hadc
);

1263 
hadc
->
DMA_H™dÀ
->
X„rC∂tCÆlback
 = 
ADC_DMAC⁄vC∂t
;

1266 
hadc
->
DMA_H™dÀ
->
X„rHÆfC∂tCÆlback
 = 
ADC_DMAHÆfC⁄vC∂t
;

1269 
hadc
->
DMA_H™dÀ
->
X„rEº‹CÆlback
 = 
ADC_DMAEº‹
;

1278 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
 | 
ADC_FLAG_OVR
));

1281 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_OVR
);

1284 
hadc
->
In°™˚
->
CFGR1
 |
ADC_CFGR1_DMAEN
;

1287 
	`HAL_DMA_Sèπ_IT
(
hadc
->
DMA_H™dÀ
, (
uöt32_t
)&hadc->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Lígth
);

1293 
hadc
->
In°™˚
->
CR
 |
ADC_CR_ADSTART
;

1298 
tmp_hÆ_°©us
 = 
HAL_BUSY
;

1302  
tmp_hÆ_°©us
;

1303 
	}
}

1313 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
)

1315 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1318 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1321 
	`__HAL_LOCK
(
hadc
);

1324 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›
(
hadc
);

1327 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1330 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
CFGR1
, 
ADC_CFGR1_DMAEN
);

1334 
tmp_hÆ_°©us
 = 
	`HAL_DMA_Ab‹t
(
hadc
->
DMA_H™dÀ
);

1337 i‡(
tmp_hÆ_°©us
 !
HAL_OK
)

1340 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_DMA
);

1344 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_OVR
);

1349 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1351 
tmp_hÆ_°©us
 = 
	`ADC_DißbÀ
(
hadc
);

1355 
	`ADC_DißbÀ
(
hadc
);

1359 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1362 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1363 
HAL_ADC_STATE_REG_BUSY
,

1364 
HAL_ADC_STATE_READY
);

1370 
	`__HAL_UNLOCK
(
hadc
);

1373  
tmp_hÆ_°©us
;

1374 
	}
}

1395 
uöt32_t
 
	$HAL_ADC_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
)

1398 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1404  
hadc
->
In°™˚
->
DR
;

1405 
	}
}

1412 
	$HAL_ADC_IRQH™dÀr
(
ADC_H™dÀTy≥Def
* 
hadc
)

1415 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1416 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

1417 
	`as£π_∑øm
(
	`IS_ADC_EOC_SELECTION
(
hadc
->
Inô
.
EOCSñe˘i⁄
));

1420 if–(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOC
Ë&& 
	`__HAL_ADC_GET_IT_SOURCE
(hadc, 
ADC_IT_EOC
)) ||

1421 (
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOS
Ë&& 
	`__HAL_ADC_GET_IT_SOURCE
(hadc, 
ADC_IT_EOS
)) )

1424 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
))

1427 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_EOC
);

1432 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1433 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) )

1436 if–
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOS
) )

1440 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

1446 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
 | 
ADC_IT_EOS
);

1449 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1450 
HAL_ADC_STATE_REG_BUSY
,

1451 
HAL_ADC_STATE_READY
);

1456 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1459 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

1468 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

1480 i‡(
hadc
->
Inô
.
LowPowîAutoWaô
 !
ENABLE
)

1482 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_EOC
 | 
ADC_FLAG_EOS
));

1487 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_AWD
Ë&& 
	`__HAL_ADC_GET_IT_SOURCE
(hadc, 
ADC_IT_AWD
))

1490 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_AWD1
);

1493 
	`HAL_ADC_LevñOutOfWödowCÆlback
(
hadc
);

1496 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

1502 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_OVR
Ë&& 
	`__HAL_ADC_GET_IT_SOURCE
(hadc, 
ADC_IT_OVR
))

1510 i‡((
hadc
->
Inô
.
Ovîrun
 =
ADC_OVR_DATA_PRESERVED
) ||

1511 
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CFGR1
, 
ADC_CFGR1_DMAEN
) )

1514 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_OVR
);

1517 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

1520 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

1524 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

1527 
	}
}

1534 
__wók
 
	$HAL_ADC_C⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1537 
	`UNUSED
(
hadc
);

1542 
	}
}

1549 
__wók
 
	$HAL_ADC_C⁄vHÆfC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1552 
	`UNUSED
(
hadc
);

1557 
	}
}

1564 
__wók
 
	$HAL_ADC_LevñOutOfWödowCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1567 
	`UNUSED
(
hadc
);

1572 
	}
}

1586 
__wók
 
	$HAL_ADC_Eº‹CÆlback
(
ADC_H™dÀTy≥Def
 *
hadc
)

1589 
	`UNUSED
(
hadc
);

1594 
	}
}

1637 
HAL_SètusTy≥Def
 
	$HAL_ADC_C⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
)

1640 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1641 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
sC⁄fig
->
Ch™√l
));

1642 
	`as£π_∑øm
(
	`IS_ADC_RANK
(
sC⁄fig
->
R™k
));

1645 
	`__HAL_LOCK
(
hadc
);

1652 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë!
RESET
)

1655 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1657 
	`__HAL_UNLOCK
(
hadc
);

1658  
HAL_ERROR
;

1661 i‡(
sC⁄fig
->
R™k
 !
ADC_RANK_NONE
)

1664 
hadc
->
In°™˚
->
CHSELR
 |(
uöt32_t
)(
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
);

1672 i‡(((
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
Ë& 
ADC_CHANNEL_TEMPSENSOR
 ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))

1674 
ADC
->
CCR
 |
ADC_CCR_TSEN
;

1677 
	`ADC_DñayMi¸oSec⁄d
(
ADC_TEMPSENSOR_DELAY_US
);

1681 i‡(((
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
Ë& 
ADC_CHANNEL_VREFINT
) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))

1683 
ADC
->
CCR
 |
ADC_CCR_VREFEN
;

1686 #i‡
	`deföed
 (
STM32L053xx
Ë|| deföed (
STM32L063xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L083xx
)

1688 i‡(((
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
Ë& 
ADC_CHANNEL_VLCD
) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))

1690 
ADC
->
CCR
 |
ADC_CCR_VLCDEN
;

1698 
hadc
->
In°™˚
->
CHSELR
 &~((
uöt32_t
)(
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
));

1703 i‡(((
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
Ë& 
ADC_CHANNEL_TEMPSENSOR
 ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))

1705 
ADC
->
CCR
 &~
ADC_CCR_TSEN
;

1709 i‡(((
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
Ë& 
ADC_CHANNEL_VREFINT
) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))

1711 
ADC
->
CCR
 &~
ADC_CCR_VREFEN
;

1714 #i‡
	`deföed
 (
STM32L053xx
Ë|| deföed (
STM32L063xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L083xx
)

1716 i‡(((
sC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_MASK
Ë& 
ADC_CHANNEL_VLCD
) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))

1718 
ADC
->
CCR
 &~
ADC_CCR_VLCDEN
;

1724 
	`__HAL_UNLOCK
(
hadc
);

1727  
HAL_OK
;

1728 
	}
}

1752 
HAL_SètusTy≥Def
 
	$HAL_ADC_A«logWDGC⁄fig
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_A«logWDGC⁄fTy≥Def
* 
A«logWDGC⁄fig
)

1754 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1756 
uöt32_t
 
tmpAWDHighThªshﬁdShi·ed
;

1757 
uöt32_t
 
tmpAWDLowThªshﬁdShi·ed
;

1760 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1761 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG_MODE
(
A«logWDGC⁄fig
->
W©chdogMode
));

1762 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
A«logWDGC⁄fig
->
ITMode
));

1764 if(
A«logWDGC⁄fig
->
W©chdogMode
 =
ADC_ANALOGWATCHDOG_SINGLE_REG
)

1766 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
A«logWDGC⁄fig
->
Ch™√l
));

1770 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
	`ADC_GET_RESOLUTION
(
hadc
), 
A«logWDGC⁄fig
->
HighThªshﬁd
));

1771 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
	`ADC_GET_RESOLUTION
(
hadc
), 
A«logWDGC⁄fig
->
LowThªshﬁd
));

1774 
	`__HAL_LOCK
(
hadc
);

1781 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

1784 if(
A«logWDGC⁄fig
->
ITMode
 =
ENABLE
)

1787 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_AWD
);

1792 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_AWD
);

1799 
hadc
->
In°™˚
->
CFGR1
 &~–
ADC_CFGR1_AWDSGL
 |

1800 
ADC_CFGR1_AWDEN
 |

1801 
ADC_CFGR1_AWDCH
);

1803 
hadc
->
In°™˚
->
CFGR1
 |–
A«logWDGC⁄fig
->
W©chdogMode
 |

1804 (
A«logWDGC⁄fig
->
Ch™√l
 & 
ADC_CHANNEL_AWD_MASK
));

1809 
tmpAWDHighThªshﬁdShi·ed
 = 
	`ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
(
hadc
, 
A«logWDGC⁄fig
->
HighThªshﬁd
);

1810 
tmpAWDLowThªshﬁdShi·ed
 = 
	`ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
(
hadc
, 
A«logWDGC⁄fig
->
LowThªshﬁd
);

1813 
hadc
->
In°™˚
->
TR
 &(
uöt32_t
Ë~ (
ADC_TR_HT
 | 
ADC_TR_LT
);

1816 
hadc
->
In°™˚
->
TR
 = 
	`ADC_TRX_HIGHTHRESHOLD
 (
tmpAWDHighThªshﬁdShi·ed
);

1818 
hadc
->
In°™˚
->
TR
 |
tmpAWDLowThªshﬁdShi·ed
;

1825 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

1827 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

1831 
	`__HAL_UNLOCK
(
hadc
);

1834  
tmp_hÆ_°©us
;

1835 
	}
}

1869 
uöt32_t
 
	$HAL_ADC_GëSèã
(
ADC_H™dÀTy≥Def
* 
hadc
)

1872 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1875  
hadc
->
Sèã
;

1876 
	}
}

1883 
uöt32_t
 
	$HAL_ADC_GëEº‹
(
ADC_H™dÀTy≥Def
 *
hadc
)

1886 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1888  
hadc
->
Eº‹Code
;

1889 
	}
}

1916 
HAL_SètusTy≥Def
 
	$ADC_E«bÀ
(
ADC_H™dÀTy≥Def
* 
hadc
)

1918 
uöt32_t
 
tick°¨t
 = 0U;

1924 i‡(
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
)

1927 i‡(
	`ADC_ENABLING_CONDITIONS
(
hadc
Ë=
RESET
)

1930 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

1933 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

1935  
HAL_ERROR
;

1939 
	`__HAL_ADC_ENABLE
(
hadc
);

1942 
	`ADC_DñayMi¸oSec⁄d
(
ADC_STAB_DELAY_US
);

1945 
tick°¨t
 = 
	`HAL_GëTick
();

1948 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_RDY
Ë=
RESET
)

1950 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
ADC_ENABLE_TIMEOUT
)

1953 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

1956 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

1958  
HAL_ERROR
;

1964  
HAL_OK
;

1965 
	}
}

1974 
HAL_SètusTy≥Def
 
	$ADC_DißbÀ
(
ADC_H™dÀTy≥Def
* 
hadc
)

1976 
uöt32_t
 
tick°¨t
 = 0U;

1981 i‡(
	`ADC_IS_ENABLE
(
hadc
Ë!
RESET
)

1984 i‡(
	`ADC_DISABLING_CONDITIONS
(
hadc
Ë!
RESET
)

1987 
	`__HAL_ADC_DISABLE
(
hadc
);

1992 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

1995 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

1997  
HAL_ERROR
;

2002 
tick°¨t
 = 
	`HAL_GëTick
();

2004 
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR
, 
ADC_CR_ADEN
))

2006 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
ADC_DISABLE_TIMEOUT
)

2009 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

2012 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

2014  
HAL_ERROR
;

2020  
HAL_OK
;

2021 
	}
}

2031 
HAL_SètusTy≥Def
 
	$ADC_C⁄vîsi⁄St›
(
ADC_H™dÀTy≥Def
* 
hadc
)

2033 
uöt32_t
 
tick°¨t
 = 0U;

2036 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

2040 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
))

2045 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR
, 
ADC_CR_ADSTART
) &&

2046 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR
, 
ADC_CR_ADDIS
) )

2049 
hadc
->
In°™˚
->
CR
 |
ADC_CR_ADSTP
;

2054 
tick°¨t
 = 
	`HAL_GëTick
();

2056 (
hadc
->
In°™˚
->
CR
 & 
ADC_CR_ADSTART
Ë!
RESET
)

2058 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
ADC_STOP_CONVERSION_TIMEOUT
)

2061 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

2064 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

2066  
HAL_ERROR
;

2073  
HAL_OK
;

2074 
	}
}

2082 
	$ADC_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2085 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2088 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
 | 
HAL_ADC_STATE_ERROR_DMA
))

2091 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_EOC
);

2095 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

2096 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) )

2099 if–
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOS
) )

2103 i‡(
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
)

2109 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
 | 
ADC_IT_EOS
);

2112 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

2113 
HAL_ADC_STATE_REG_BUSY
,

2114 
HAL_ADC_STATE_READY
);

2119 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

2122 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

2128 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

2133 
hadc
->
DMA_H™dÀ
->
	`X„rEº‹CÆlback
(
hdma
);

2135 
	}
}

2142 
	$ADC_DMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2145 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2148 
	`HAL_ADC_C⁄vHÆfC∂tCÆlback
(
hadc
);

2149 
	}
}

2156 
	$ADC_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2159 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2162 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_DMA
);

2165 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_DMA
);

2168 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

2169 
	}
}

2176 
	$ADC_DñayMi¸oSec⁄d
(
uöt32_t
 
mi¸oSec⁄d
)

2179 
__IO
 
uöt32_t
 
waôLo›Index
 = (
mi¸oSec⁄d
 * (
Sy°emC‹eClock
 / 1000000U));

2181 
waôLo›Index
 != 0U)

2183 
waôLo›Index
--;

2185 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc_ex.c

52 
	~"°m32l0xx_hÆ.h
"

63 #ifde‡
HAL_ADC_MODULE_ENABLED


77 
	#ADC_CALIBRATION_TIMEOUT
 10U

	)

82 
	#SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT
 ((
uöt32_t
Ë3U)

	)

87 
	#SYSCFG_BUF_TEMPSENSOR_ENABLE_TIMEOUT
 ((
uöt32_t
Ë1U)

	)

123 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_CÆibøti⁄_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
SögÀDiff
)

125 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

126 
uöt32_t
 
tick°¨t
 = 0U;

127 
uöt32_t
 
backup_£âög_adc_dma_å™s„r
 = 0U;

130 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

133 
	`__HAL_LOCK
(
hadc
);

136 i‡(
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
)

139 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

140 
HAL_ADC_STATE_REG_BUSY
,

141 
HAL_ADC_STATE_BUSY_INTERNAL
);

149 
backup_£âög_adc_dma_å™s„r
 = 
	`READ_BIT
(
hadc
->
In°™˚
->
CFGR1
, 
ADC_CFGR1_DMAEN
 | 
ADC_CFGR1_DMACFG
);

150 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
CFGR1
, 
ADC_CFGR1_DMAEN
 | 
ADC_CFGR1_DMACFG
);

153 
hadc
->
In°™˚
->
CR
 |
ADC_CR_ADCAL
;

155 
tick°¨t
 = 
	`HAL_GëTick
();

158 
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR
, 
ADC_CR_ADCAL
))

160 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
ADC_CALIBRATION_TIMEOUT
)

163 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

164 
HAL_ADC_STATE_BUSY_INTERNAL
,

165 
HAL_ADC_STATE_ERROR_INTERNAL
);

168 
	`__HAL_UNLOCK
(
hadc
);

170  
HAL_ERROR
;

175 
	`SET_BIT
(
hadc
->
In°™˚
->
CFGR1
, 
backup_£âög_adc_dma_å™s„r
);

178 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

179 
HAL_ADC_STATE_BUSY_INTERNAL
,

180 
HAL_ADC_STATE_READY
);

185 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

187 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

191 
	`__HAL_UNLOCK
(
hadc
);

194  
tmp_hÆ_°©us
;

195 
	}
}

204 
uöt32_t
 
	$HAL_ADCEx_CÆibøti⁄_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
SögÀDiff
)

207 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

208 
	`as£π_∑øm
(
	`IS_ADC_SINGLE_DIFFERENTIAL
(
SögÀDiff
));

211  ((
hadc
->
In°™˚
->
CALFACT
) & 0x0000007FU);

212 
	}
}

223 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_CÆibøti⁄_SëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
SögÀDiff
, uöt32_à
CÆibøti⁄Fa˘‹
)

225 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

228 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

229 
	`as£π_∑øm
(
	`IS_ADC_SINGLE_DIFFERENTIAL
(
SögÀDiff
));

230 
	`as£π_∑øm
(
	`IS_ADC_CALFACT
(
CÆibøti⁄Fa˘‹
));

233 
	`__HAL_LOCK
(
hadc
);

237 i‡–(
	`ADC_IS_ENABLE
(
hadc
Ë!
RESET
) &&

238 (
	`ADC_IS_CONVERSION_ONGOING_REGULAR
(
hadc
Ë=
RESET
) )

241 
hadc
->
In°™˚
->
CALFACT
 &~
ADC_CALFACT_CALFACT
;

242 
hadc
->
In°™˚
->
CALFACT
 |
CÆibøti⁄Fa˘‹
;

247 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

249 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

252 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

256 
	`__HAL_UNLOCK
(
hadc
);

259  
tmp_hÆ_°©us
;

260 
	}
}

270 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_E«bÀVREFINT
()

272 
uöt32_t
 
tick°¨t
 = 0U;

275 
	`SET_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENBUF_VREFINT_ADC
);

279 
tick°¨t
 = 
	`HAL_GëTick
();

281 
	`HAL_IS_BIT_CLR
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_VREFINT_RDYF
))

283 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT
)

285  
HAL_ERROR
;

289  
HAL_OK
;

290 
	}
}

297 
	$HAL_ADCEx_DißbÀVREFINT
()

300 
	`CLEAR_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENBUF_VREFINT_ADC
);

301 
	}
}

311 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_E«bÀVREFINTTempSís‹
()

313 
uöt32_t
 
tick°¨t
 = 0U;

316 
	`SET_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENBUF_SENSOR_ADC
);

320 
tick°¨t
 = 
	`HAL_GëTick
();

322 
	`HAL_IS_BIT_CLR
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_VREFINT_RDYF
))

324 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
SYSCFG_BUF_TEMPSENSOR_ENABLE_TIMEOUT
)

326  
HAL_ERROR
;

330  
HAL_OK
;

331 
	}
}

338 
	$HAL_ADCEx_DißbÀVREFINTTempSís‹
()

341 
	`CLEAR_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENBUF_SENSOR_ADC
);

342 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c

96 
	~"°m32l0xx_hÆ.h
"

102 #ifde‡
HAL_CORTEX_MODULE_ENABLED


149 
	$HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

152 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
Pªem±Pri‹ôy
));

153 
	`NVIC_SëPri‹ôy
(
IRQn
,
Pªem±Pri‹ôy
);

154 
	}
}

165 
	$HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

168 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

171 
	`NVIC_E«bÀIRQ
(
IRQn
);

172 
	}
}

181 
	$HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

184 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

187 
	`NVIC_DißbÀIRQ
(
IRQn
);

188 
	}
}

194 
	$HAL_NVIC_Sy°emRe£t
()

197 
	`NVIC_Sy°emRe£t
();

198 
	}
}

207 
uöt32_t
 
	$HAL_SYSTICK_C⁄fig
(
uöt32_t
 
TicksNumb
)

209  
	`SysTick_C⁄fig
(
TicksNumb
);

210 
	}
}

239 
uöt32_t
 
	$HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

242  
	`NVIC_GëPri‹ôy
(
IRQn
);

243 
	}
}

252 
	$HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

255 
	`NVIC_SëPídögIRQ
(
IRQn
);

256 
	}
}

267 
uöt32_t
 
	$HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

270  
	`NVIC_GëPídögIRQ
(
IRQn
);

271 
	}
}

280 
	$HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

283 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

284 
	}
}

295 
	$HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
)

298 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSour˚
));

299 i‡(
CLKSour˚
 =
SYSTICK_CLKSOURCE_HCLK
)

301 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
;

305 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
;

307 
	}
}

313 
	$HAL_SYSTICK_IRQH™dÀr
()

315 
	`HAL_SYSTICK_CÆlback
();

316 
	}
}

322 
__wók
 
	$HAL_SYSTICK_CÆlback
()

327 
	}
}

329 #i‡(
__MPU_PRESENT
 == 1)

336 
	$HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
)

339 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
MPU_Inô
->
Numbî
));

340 
	`as£π_∑øm
(
	`IS_MPU_REGION_ENABLE
(
MPU_Inô
->
E«bÀ
));

343 
MPU
->
RNR
 = 
MPU_Inô
->
Numbî
;

345 i‡((
MPU_Inô
->
E«bÀ
Ë=
MPU_REGION_ENABLE
)

348 
	`as£π_∑øm
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_Inô
->
DißbÀExec
));

349 
	`as£π_∑øm
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_Inô
->
Ac˚ssPîmissi⁄
));

350 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_Inô
->
IsSh¨óbÀ
));

351 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_Inô
->
IsCachóbÀ
));

352 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_Inô
->
IsBuf„øbÀ
));

353 
	`as£π_∑øm
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_Inô
->
SubRegi⁄DißbÀ
));

354 
	`as£π_∑øm
(
	`IS_MPU_REGION_SIZE
(
MPU_Inô
->
Size
));

357 
MPU
->
RBAR
 = (
MPU_Inô
->
Ba£Addªss
) & 0xfffffff0U;

360 
MPU
->
RASR
 = ((
uöt32_t
)
MPU_Inô
->
DißbÀExec
 << 
MPU_RASR_XN_Pos
) |

361 ((
uöt32_t
)
MPU_Inô
->
Ac˚ssPîmissi⁄
 << 
MPU_RASR_AP_Pos
) |

362 ((
uöt32_t
)
MPU_Inô
->
IsSh¨óbÀ
 << 
MPU_RASR_S_Pos
) |

363 ((
uöt32_t
)
MPU_Inô
->
IsCachóbÀ
 << 
MPU_RASR_C_Pos
) |

364 ((
uöt32_t
)
MPU_Inô
->
IsBuf„øbÀ
 << 
MPU_RASR_B_Pos
) |

365 ((
uöt32_t
)
MPU_Inô
->
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
) |

366 ((
uöt32_t
)
MPU_Inô
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

367 ((
uöt32_t
)
MPU_Inô
->
E«bÀ
 << 
MPU_RASR_ENABLE_Pos
);

371 
MPU
->
RBAR
 = 0x00U;

372 
MPU
->
RASR
 = 0x00U;

374 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dac.c

186 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
Ë&& !deföed (
STM32L031xx
Ë&& !deföed (
STM32L041xx
Ë&& !deföed (
STM32L051xx
Ë&& !deföed (
STM32L061xx
Ë&& !deföed (
STM32L071xx
Ë&& !deföed (
STM32L081xx
)

188 
	~"°m32l0xx_hÆ.h
"

190 #ifde‡
HAL_DAC_MODULE_ENABLED


235 
HAL_SètusTy≥Def
 
	$HAL_DAC_Inô
(
DAC_H™dÀTy≥Def
* 
hdac
)

238 if(
hdac
 =
NULL
)

240  
HAL_ERROR
;

243 
	`as£π_∑øm
(
	`IS_DAC_ALL_INSTANCE
(
hdac
->
In°™˚
));

245 if(
hdac
->
Sèã
 =
HAL_DAC_STATE_RESET
)

248 
hdac
->
Lock
 = 
HAL_UNLOCKED
;

251 
	`HAL_DAC_M•Inô
(
hdac
);

255 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

258 
hdac
->
Eº‹Code
 = 
HAL_DAC_ERROR_NONE
;

261 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

264  
HAL_OK
;

265 
	}
}

273 
HAL_SètusTy≥Def
 
	$HAL_DAC_DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
)

276 if(
hdac
 =
NULL
)

278  
HAL_ERROR
;

282 
	`as£π_∑øm
(
	`IS_DAC_ALL_INSTANCE
(
hdac
->
In°™˚
));

285 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

288 
	`HAL_DAC_M•DeInô
(
hdac
);

291 
hdac
->
Eº‹Code
 = 
HAL_DAC_ERROR_NONE
;

294 
hdac
->
Sèã
 = 
HAL_DAC_STATE_RESET
;

297 
	`__HAL_UNLOCK
(
hdac
);

300  
HAL_OK
;

301 
	}
}

309 
__wók
 
	$HAL_DAC_M•Inô
(
DAC_H™dÀTy≥Def
* 
hdac
)

312 
	`UNUSED
(
hdac
);

317 
	}
}

325 
__wók
 
	$HAL_DAC_M•DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
)

328 
	`UNUSED
(
hdac
);

333 
	}
}

368 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

371 
	`UNUSED
(
hdac
);

372 
	`UNUSED
(
Ch™√l
);

378  
HAL_OK
;

379 
	}
}

391 
HAL_SètusTy≥Def
 
	$HAL_DAC_St›
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

394 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

397 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch™√l
);

400 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

403  
HAL_OK
;

404 
	}
}

423 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_t* 
pD©a
, uöt32_à
Lígth
, uöt32_à
Alignmít
)

426 
	`UNUSED
(
hdac
);

427 
	`UNUSED
(
Ch™√l
);

428 
	`UNUSED
(
pD©a
);

429 
	`UNUSED
(
Lígth
);

430 
	`UNUSED
(
Alignmít
);

436  
HAL_OK
;

437 
	}
}

449 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_DAC_St›_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

452 
	`UNUSED
(
hdac
);

453 
	`UNUSED
(
Ch™√l
);

459  
HAL_OK
;

460 
	}
}

472 
__wók
 
uöt32_t
 
	$HAL_DAC_GëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

475 
	`UNUSED
(
hdac
);

476 
	`UNUSED
(
Ch™√l
);

483 
	}
}

491 
__wók
 
	$HAL_DAC_IRQH™dÀr
(
DAC_H™dÀTy≥Def
* 
hdac
)

494 
	`UNUSED
(
hdac
);

499 
	}
}

507 
__wók
 
	$HAL_DAC_C⁄vC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
)

510 
	`UNUSED
(
hdac
);

515 
	}
}

523 
__wók
 
	$HAL_DAC_C⁄vHÆfC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
)

526 
	`UNUSED
(
hdac
);

531 
	}
}

539 
__wók
 
	$HAL_DAC_Eº‹CÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
)

542 
	`UNUSED
(
hdac
);

547 
	}
}

555 
__wók
 
	$HAL_DAC_DMAUndîrunCÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
)

558 
	`UNUSED
(
hdac
);

563 
	}
}

595 
HAL_SètusTy≥Def
 
	$HAL_DAC_C⁄figCh™√l
(
DAC_H™dÀTy≥Def
* 
hdac
, 
DAC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

597 
uöt32_t
 
tm¥eg1
 = 0U, 
tm¥eg2
 = 0U;

600 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
sC⁄fig
->
DAC_Triggî
));

601 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
sC⁄fig
->
DAC_OuçutBuf„r
));

602 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

605 
	`__HAL_LOCK
(
hdac
);

608 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

611 
tm¥eg1
 = 
hdac
->
In°™˚
->
CR
;

613 
tm¥eg1
 &~(((
uöt32_t
)(
DAC_CR_MAMP1
 | 
DAC_CR_WAVE1
 | 
DAC_CR_TSEL1
 | 
DAC_CR_TEN1
 | 
DAC_CR_BOFF1
)Ë<< 
Ch™√l
);

617 
tm¥eg2
 = (
sC⁄fig
->
DAC_Triggî
 | sC⁄fig->
DAC_OuçutBuf„r
);

619 
tm¥eg1
 |
tm¥eg2
 << 
Ch™√l
;

621 
hdac
->
In°™˚
->
CR
 = 
tm¥eg1
;

623 
	`CLEAR_BIT
(
hdac
->
In°™˚
->
CR
, (
DAC_CR_WAVE1
 << 
Ch™√l
));

625 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

628 
	`__HAL_UNLOCK
(
hdac
);

631  
HAL_OK
;

632 
	}
}

660 
HAL_DAC_SèãTy≥Def
 
	$HAL_DAC_GëSèã
(
DAC_H™dÀTy≥Def
* 
hdac
)

663  
hdac
->
Sèã
;

664 
	}
}

673 
uöt32_t
 
	$HAL_DAC_GëEº‹
(
DAC_H™dÀTy≥Def
 *
hdac
)

675  
hdac
->
Eº‹Code
;

676 
	}
}

694 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_DAC_SëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Alignmít
, uöt32_à
D©a
)

697 
	`UNUSED
(
hdac
);

698 
	`UNUSED
(
Ch™√l
);

699 
	`UNUSED
(
Alignmít
);

700 
	`UNUSED
(
D©a
);

705  
HAL_OK
;

706 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dac_ex.c

54 #i‡!
deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
Ë&& !deföed (
STM32L031xx
Ë&& !deföed (
STM32L041xx
Ë&& !deföed (
STM32L051xx
Ë&& !deföed (
STM32L061xx
Ë&& !deföed (
STM32L071xx
Ë&& !deföed (
STM32L081xx
)

56 
	~"°m32l0xx_hÆ.h
"

58 #ifde‡
HAL_DAC_MODULE_ENABLED


79 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

80 
DAC_DMAC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
);

81 
DAC_DMAEº‹Ch2
(
DMA_H™dÀTy≥Def
 *
hdma
);

82 
DAC_DMAHÆfC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
);

84 
DAC_DMAC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
);

85 
DAC_DMAEº‹Ch1
(
DMA_H™dÀTy≥Def
 *
hdma
);

86 
DAC_DMAHÆfC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
);

102 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

109 
uöt32_t
 
	$HAL_DACEx_DuÆGëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
)

111 
uöt32_t
 
tmp
 = 0U;

113 
tmp
 |
hdac
->
In°™˚
->
DOR1
;

115 
tmp
 |
hdac
->
In°™˚
->
DOR2
 << 16U;

118  
tmp
;

119 
	}
}

146 
HAL_SètusTy≥Def
 
	$HAL_DACEx_TrüngÀWaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
)

149 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

150 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
Am∂ôude
));

153 
	`__HAL_LOCK
(
hdac
);

156 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

159 
	`MODIFY_REG
(
hdac
->
In°™˚
->
CR
, ((
DAC_CR_WAVE1
)|(
DAC_CR_MAMP1
))<<
Ch™√l
, (
DAC_CR_WAVE1_1
 | 
Am∂ôude
) << Channel);

163 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

166 
	`__HAL_UNLOCK
(
hdac
);

169  
HAL_OK
;

170 
	}
}

196 
HAL_SètusTy≥Def
 
	$HAL_DACEx_Noi£WaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
)

199 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

200 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
Am∂ôude
));

203 
	`__HAL_LOCK
(
hdac
);

206 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

209 
	`MODIFY_REG
(
hdac
->
In°™˚
->
CR
, ((
DAC_CR_WAVE1
)|(
DAC_CR_MAMP1
))<<
Ch™√l
, (
DAC_CR_WAVE1_0
 | 
Am∂ôude
) << Channel);

212 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

215 
	`__HAL_UNLOCK
(
hdac
);

218  
HAL_OK
;

219 
	}
}

221 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

237 
HAL_SètusTy≥Def
 
	$HAL_DACEx_DuÆSëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Alignmít
, uöt32_à
D©a1
, uöt32_à
D©a2
)

239 
uöt32_t
 
d©a
 = 0U, 
tmp
 = 0U;

242 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

243 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

244 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

247 i‡(
Alignmít
 =
DAC_ALIGN_8B_R
)

249 
d©a
 = ((
uöt32_t
)
D©a2
 << 8UË| 
D©a1
;

253 
d©a
 = ((
uöt32_t
)
D©a2
 << 16UË| 
D©a1
;

256 
tmp
 = (
uöt32_t
)
hdac
->
In°™˚
;

257 
tmp
 +
	`DAC_DHR12RD_ALIGNEMENT
(
Alignmít
);

260 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

263  
HAL_OK
;

264 
	}
}

273 
__wók
 
	$HAL_DACEx_C⁄vC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
)

276 
	`UNUSED
(
hdac
);

281 
	}
}

289 
__wók
 
	$HAL_DACEx_C⁄vHÆfC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
)

292 
	`UNUSED
(
hdac
);

297 
	}
}

305 
__wók
 
	$HAL_DACEx_Eº‹CÆlbackCh2
(
DAC_H™dÀTy≥Def
 *
hdac
)

308 
	`UNUSED
(
hdac
);

313 
	}
}

321 
__wók
 
	$HAL_DACEx_DMAUndîrunCÆlbackCh2
(
DAC_H™dÀTy≥Def
 *
hdac
)

324 
	`UNUSED
(
hdac
);

329 
	}
}

341 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

343 
uöt32_t
 
tmp1
 = 0U, 
tmp2
 = 0U;

346 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

349 
	`__HAL_LOCK
(
hdac
);

352 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

355 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch™√l
);

357 if(
Ch™√l
 =
DAC_CHANNEL_1
)

359 
tmp1
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TEN1
;

360 
tmp2
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TSEL1
;

362 if((
tmp1
 =
DAC_CR_TEN1
Ë&& (
tmp2
 =
DAC_CR_TSEL1
))

365 
	`SET_BIT
(
hdac
->
In°™˚
->
SWTRIGR
, 
DAC_SWTRIGR_SWTRIG1
);

370 
tmp1
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TEN2
;

371 
tmp2
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TSEL2
;

373 if((
tmp1
 =
DAC_CR_TEN2
Ë&& (
tmp2
 =
DAC_CR_TSEL2
))

376 
	`SET_BIT
(
hdac
->
In°™˚
->
SWTRIGR
, 
DAC_SWTRIGR_SWTRIG2
);

381 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

384 
	`__HAL_UNLOCK
(
hdac
);

387  
HAL_OK
;

388 
	}
}

407 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_t* 
pD©a
, uöt32_à
Lígth
, uöt32_à
Alignmít
)

409 
uöt32_t
 
tm¥eg
 = 0U;

412 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

413 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

416 
	`__HAL_LOCK
(
hdac
);

419 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

421 if(
Ch™√l
 =
DAC_CHANNEL_1
)

424 
hdac
->
DMA_H™dÀ1
->
X„rC∂tCÆlback
 = 
DAC_DMAC⁄vC∂tCh1
;

427 
hdac
->
DMA_H™dÀ1
->
X„rHÆfC∂tCÆlback
 = 
DAC_DMAHÆfC⁄vC∂tCh1
;

430 
hdac
->
DMA_H™dÀ1
->
X„rEº‹CÆlback
 = 
DAC_DMAEº‹Ch1
;

433 
	`SET_BIT
(
hdac
->
In°™˚
->
CR
, 
DAC_CR_DMAEN1
);

436 
Alignmít
)

438 
DAC_ALIGN_12B_R
:

440 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12R1
;

442 
DAC_ALIGN_12B_L
:

444 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12L1
;

446 
DAC_ALIGN_8B_R
:

448 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR8R1
;

453 
	`UNUSED
(
tm¥eg
);

458 
hdac
->
DMA_H™dÀ2
->
X„rC∂tCÆlback
 = 
DAC_DMAC⁄vC∂tCh2
;

461 
hdac
->
DMA_H™dÀ2
->
X„rHÆfC∂tCÆlback
 = 
DAC_DMAHÆfC⁄vC∂tCh2
;

464 
hdac
->
DMA_H™dÀ2
->
X„rEº‹CÆlback
 = 
DAC_DMAEº‹Ch2
;

467 
	`SET_BIT
(
hdac
->
In°™˚
->
CR
, 
DAC_CR_DMAEN2
);

470 
Alignmít
)

472 
DAC_ALIGN_12B_R
:

474 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12R2
;

476 
DAC_ALIGN_12B_L
:

478 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12L2
;

480 
DAC_ALIGN_8B_R
:

482 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR8R2
;

490 if(
Ch™√l
 =
DAC_CHANNEL_1
)

493 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR1
);

496 
	`HAL_DMA_Sèπ_IT
(
hdac
->
DMA_H™dÀ1
, (
uöt32_t
)
pD©a
, 
tm¥eg
, 
Lígth
);

501 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR2
);

504 
	`HAL_DMA_Sèπ_IT
(
hdac
->
DMA_H™dÀ2
, (
uöt32_t
)
pD©a
, 
tm¥eg
, 
Lígth
);

508 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch™√l
);

511 
	`__HAL_UNLOCK
(
hdac
);

514  
HAL_OK
;

515 
	}
}

527 
HAL_SètusTy≥Def
 
	$HAL_DAC_St›_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

529 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

532 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

535 
	`CLEAR_BIT
(
hdac
->
In°™˚
->
CR
, (
DAC_CR_DMAEN1
 << 
Ch™√l
));

538 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch™√l
);

542 if(
Ch™√l
 =
DAC_CHANNEL_1
)

544 
°©us
 = 
	`HAL_DMA_Ab‹t
(
hdac
->
DMA_H™dÀ1
);

548 
°©us
 = 
	`HAL_DMA_Ab‹t
(
hdac
->
DMA_H™dÀ2
);

552 if(
°©us
 !
HAL_OK
)

555 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

560 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

564  
°©us
;

565 
	}
}

577 
uöt32_t
 
	$HAL_DAC_GëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

580 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

583 if(
Ch™√l
 =
DAC_CHANNEL_1
)

585  
hdac
->
In°™˚
->
DOR1
;

589  
hdac
->
In°™˚
->
DOR2
;

591 
	}
}

599 
	$HAL_DAC_IRQH™dÀr
(
DAC_H™dÀTy≥Def
* 
hdac
)

602 if(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR1
))

605 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

608 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMAUNDERRUNCH1
;

611 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
,
DAC_FLAG_DMAUDR1
);

614 
	`CLEAR_BIT
(
hdac
->
In°™˚
->
CR
, 
DAC_CR_DMAEN1
);

617 
	`HAL_DAC_DMAUndîrunCÆlbackCh1
(
hdac
);

621 if(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR2
))

624 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

627 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMAUNDERRUNCH2
;

630 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
,
DAC_FLAG_DMAUDR2
);

633 
	`CLEAR_BIT
(
hdac
->
In°™˚
->
CR
, 
DAC_CR_DMAEN2
);

636 
	`HAL_DACEx_DMAUndîrunCÆlbackCh2
(
hdac
);

638 
	}
}

657 
HAL_SètusTy≥Def
 
	$HAL_DAC_SëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Alignmít
, uöt32_à
D©a
)

659 
__IO
 
uöt32_t
 
tmp
 = 0U;

662 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

663 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

664 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

666 
tmp
 = (
uöt32_t
)
hdac
->
In°™˚
;

667 if(
Ch™√l
 =
DAC_CHANNEL_1
)

669 
tmp
 +
	`DAC_DHR12R1_ALIGNEMENT
(
Alignmít
);

673 
tmp
 +
	`DAC_DHR12R2_ALIGNEMENT
(
Alignmít
);

677 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

680  
HAL_OK
;

681 
	}
}

693 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

695 
uöt32_t
 
tmp1
 = 0U, 
tmp2
 = 0U;

698 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

701 
	`__HAL_LOCK
(
hdac
);

704 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

707 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch™√l
);

709 
tmp1
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TEN1
;

710 
tmp2
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TSEL1
;

712 if((
tmp1
 =
DAC_CR_TEN1
Ë&& (
tmp2
 =
DAC_CR_TSEL1
))

715 
	`SET_BIT
(
hdac
->
In°™˚
->
SWTRIGR
, 
DAC_SWTRIGR_SWTRIG1
);

719 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

722 
	`__HAL_UNLOCK
(
hdac
);

725  
HAL_OK
;

726 
	}
}

744 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_t* 
pD©a
, uöt32_à
Lígth
, uöt32_à
Alignmít
)

746 
uöt32_t
 
tm¥eg
 = 0U;

749 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

750 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

753 
	`__HAL_LOCK
(
hdac
);

756 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

759 
hdac
->
DMA_H™dÀ1
->
X„rC∂tCÆlback
 = 
DAC_DMAC⁄vC∂tCh1
;

762 
hdac
->
DMA_H™dÀ1
->
X„rHÆfC∂tCÆlback
 = 
DAC_DMAHÆfC⁄vC∂tCh1
;

765 
hdac
->
DMA_H™dÀ1
->
X„rEº‹CÆlback
 = 
DAC_DMAEº‹Ch1
;

768 
	`SET_BIT
(
hdac
->
In°™˚
->
CR
, 
DAC_CR_DMAEN1
);

771 
Alignmít
)

773 
DAC_ALIGN_12B_R
:

775 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12R1
;

777 
DAC_ALIGN_12B_L
:

779 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12L1
;

781 
DAC_ALIGN_8B_R
:

783 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR8R1
;

788 
	`UNUSED
(
tm¥eg
);

792 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR1
);

795 
	`HAL_DMA_Sèπ_IT
(
hdac
->
DMA_H™dÀ1
, (
uöt32_t
)
pD©a
, 
tm¥eg
, 
Lígth
);

798 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch™√l
);

801 
	`__HAL_UNLOCK
(
hdac
);

804  
HAL_OK
;

805 
	}
}

816 
HAL_SètusTy≥Def
 
	$HAL_DAC_St›_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

818 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

821 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

824 
	`CLEAR_BIT
(
hdac
->
In°™˚
->
CR
, (
DAC_CR_DMAEN1
 << 
Ch™√l
));

827 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch™√l
);

830 
°©us
 = 
	`HAL_DMA_Ab‹t
(
hdac
->
DMA_H™dÀ1
);

833 if(
°©us
 !
HAL_OK
)

836 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

841 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

845  
°©us
;

846 
	}
}

857 
uöt32_t
 
	$HAL_DAC_GëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

860 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

863  
hdac
->
In°™˚
->
DOR1
;

864 
	}
}

872 
	$HAL_DAC_IRQH™dÀr
(
DAC_H™dÀTy≥Def
* 
hdac
)

875 if(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR1
))

878 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

881 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMAUNDERRUNCH1
;

884 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
,
DAC_FLAG_DMAUDR1
);

887 
	`CLEAR_BIT
(
hdac
->
In°™˚
->
CR
, 
DAC_CR_DMAEN1
);

890 
	`HAL_DAC_DMAUndîrunCÆlbackCh1
(
hdac
);

892 
	}
}

909 
HAL_SètusTy≥Def
 
	$HAL_DAC_SëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Alignmít
, uöt32_à
D©a
)

911 
__IO
 
uöt32_t
 
tmp
 = 0U;

914 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

915 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

916 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

918 
tmp
 = (
uöt32_t
)
hdac
->
In°™˚
;

919 
tmp
 +
	`DAC_DHR12R1_ALIGNEMENT
(
Alignmít
);

922 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

925  
HAL_OK
;

926 
	}
}

941 #i‡
deföed
 (
STM32L072xx
Ë|| deföed (
STM32L073xx
Ë|| deföed (
STM32L082xx
Ë|| deföed (
STM32L083xx
)

948 
	$DAC_DMAC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
)

950 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

952 
	`HAL_DACEx_C⁄vC∂tCÆlbackCh2
(
hdac
);

954 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

955 
	}
}

963 
	$DAC_DMAHÆfC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
)

965 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

967 
	`HAL_DACEx_C⁄vHÆfC∂tCÆlbackCh2
(
hdac
);

968 
	}
}

976 
	$DAC_DMAEº‹Ch2
(
DMA_H™dÀTy≥Def
 *
hdma
)

978 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

981 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMA
;

983 
	`HAL_DACEx_Eº‹CÆlbackCh2
(
hdac
);

985 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

986 
	}
}

995 
	$DAC_DMAC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
)

997 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

999 
	`HAL_DAC_C⁄vC∂tCÆlbackCh1
(
hdac
);

1001 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

1002 
	}
}

1010 
	$DAC_DMAHÆfC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
)

1012 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1014 
	`HAL_DAC_C⁄vHÆfC∂tCÆlbackCh1
(
hdac
);

1015 
	}
}

1023 
	$DAC_DMAEº‹Ch1
(
DMA_H™dÀTy≥Def
 *
hdma
)

1025 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1028 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMA
;

1030 
	`HAL_DAC_Eº‹CÆlbackCh1
(
hdac
);

1032 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

1033 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dma.c

88 
	~"°m32l0xx_hÆ.h
"

93 #ifde‡
HAL_DMA_MODULE_ENABLED


105 
	#HAL_TIMEOUT_DMA_ABORT
 ((
uöt32_t
)1000UË

	)

108 
DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

139 
HAL_SètusTy≥Def
 
	$HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
)

141 
uöt32_t
 
tmp
 = 0U;

144 if(
hdma
 =
NULL
)

146  
HAL_ERROR
;

150 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

151 
	`as£π_∑øm
(
	`IS_DMA_ALL_REQUEST
(
hdma
->
Inô
.
Reque°
));

152 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
hdma
->
Inô
.
Dúe˘i⁄
));

153 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
hdma
->
Inô
.
PîùhInc
));

154 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
hdma
->
Inô
.
MemInc
));

155 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
hdma
->
Inô
.
PîùhD©aAlignmít
));

156 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
hdma
->
Inô
.
MemD©aAlignmít
));

157 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
hdma
->
Inô
.
Mode
));

158 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
hdma
->
Inô
.
Pri‹ôy
));

160 if(
hdma
->
Sèã
 =
HAL_DMA_STATE_RESET
)

163 
hdma
->
Lock
 = 
HAL_UNLOCKED
;

167 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

170 
tmp
 = 
hdma
->
In°™˚
->
CCR
;

173 
tmp
 &((
uöt32_t
)~(
DMA_CCR_PL
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PSIZE
 | \

174 
DMA_CCR_MINC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_CIRC
 | \

175 
DMA_CCR_DIR
));

178 
tmp
 |
hdma
->
Inô
.
Dúe˘i⁄
 |

179 
hdma
->
Inô
.
PîùhInc
 | hdma->Inô.
MemInc
 |

180 
hdma
->
Inô
.
PîùhD©aAlignmít
 | hdma->Inô.
MemD©aAlignmít
 |

181 
hdma
->
Inô
.
Mode
 | hdma->Inô.
Pri‹ôy
;

184 
hdma
->
In°™˚
->
CCR
 = 
tmp
;

187 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l1
)

190 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C1S
;

193 
DMA1_CSELR
->
CSELR
 |
hdma
->
Inô
.
Reque°
;

195 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l2
)

198 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C2S
;

201 
DMA1_CSELR
->
CSELR
 |(
uöt32_t
)(
hdma
->
Inô
.
Reque°
 << 4U);

203 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l3
)

206 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C3S
;

209 
DMA1_CSELR
->
CSELR
 |(
uöt32_t
Ë(
hdma
->
Inô
.
Reque°
 << 8U);

211 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l4
)

214 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C4S
;

217 
DMA1_CSELR
->
CSELR
 |(
uöt32_t
Ë(
hdma
->
Inô
.
Reque°
 << 12U);

219 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l5
)

222 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C5S
;

225 
DMA1_CSELR
->
CSELR
 |(
uöt32_t
Ë(
hdma
->
Inô
.
Reque°
 << 16U);

227 #i‡!
	`deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

228 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l6
)

231 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C6S
;

234 
DMA1_CSELR
->
CSELR
 |(
uöt32_t
Ë(
hdma
->
Inô
.
Reque°
 << 20U);

236 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l7
)

239 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C7S
;

242 
DMA1_CSELR
->
CSELR
 |(
uöt32_t
Ë(
hdma
->
Inô
.
Reque°
 << 24U);

246 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

248  
HAL_OK
;

249 
	}
}

257 
HAL_SètusTy≥Def
 
	$HAL_DMA_DeInô
(
DMA_H™dÀTy≥Def
 *
hdma
)

260 if(
hdma
 =
NULL
)

262  
HAL_ERROR
;

266 if(
hdma
->
Sèã
 =
HAL_DMA_STATE_BUSY
)

268  
HAL_ERROR
;

272 
	`__HAL_DMA_DISABLE
(
hdma
);

275 
hdma
->
In°™˚
->
CCR
 = 0U;

278 
hdma
->
In°™˚
->
CNDTR
 = 0U;

281 
hdma
->
In°™˚
->
CPAR
 = 0U;

284 
hdma
->
In°™˚
->
CMAR
 = 0U;

287 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_GI_FLAG_INDEX
(hdma));

288 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

289 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma));

290 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

293 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l1
)

296 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C1S
;

298 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l2
)

301 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C2S
;

303 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l3
)

306 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C3S
;

308 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l4
)

311 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C4S
;

313 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l5
)

316 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C5S
;

318 #i‡!
	`deföed
 (
STM32L011xx
Ë&& !deföed (
STM32L021xx
)

319 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l6
)

322 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C6S
;

324 i‡(
hdma
->
In°™˚
 =
DMA1_Ch™√l7
)

327 
DMA1_CSELR
->
CSELR
 &~
DMA_CSELR_C7S
;

331 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

334 
hdma
->
Sèã
 = 
HAL_DMA_STATE_RESET
;

337 
	`__HAL_UNLOCK
(
hdma
);

339  
HAL_OK
;

340 
	}
}

374 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

377 
	`__HAL_LOCK
(
hdma
);

380 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

383 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

386 
	`__HAL_DMA_DISABLE
(
hdma
);

389 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

392 
	`__HAL_DMA_ENABLE
(
hdma
);

394  
HAL_OK
;

395 
	}
}

406 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

409 
	`__HAL_LOCK
(
hdma
);

412 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

415 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

418 
	`__HAL_DMA_DISABLE
(
hdma
);

421 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

424 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_TC
);

427 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_HT
);

430 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_TE
);

433 
	`__HAL_DMA_ENABLE
(
hdma
);

435  
HAL_OK
;

436 
	}
}

444 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

446 
uöt32_t
 
tick°¨t
 = 0U;

449 
	`__HAL_DMA_DISABLE
(
hdma
);

452 
tick°¨t
 = 
	`HAL_GëTick
();

455 (
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_EN
) != 0U)

458 if–(
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HAL_TIMEOUT_DMA_ABORT
)

461 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_TIMEOUT
;

464 
	`__HAL_UNLOCK
(
hdma
);

467 
hdma
->
Sèã
 = 
HAL_DMA_STATE_TIMEOUT
;

469  
HAL_TIMEOUT
;

473 
	`__HAL_UNLOCK
(
hdma
);

476 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

478  
HAL_OK
;

479 
	}
}

487 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
)

489 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

491 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

494 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

496 
°©us
 = 
HAL_ERROR
;

501 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

504 
	`__HAL_DMA_DISABLE
(
hdma
);

507 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_GI_FLAG_INDEX
(hdma));

510 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

513 
	`__HAL_UNLOCK
(
hdma
);

516 if(
hdma
->
X„rAb‹tCÆlback
 !
NULL
)

518 
hdma
->
	`X„rAb‹tCÆlback
(hdma);

521  
°©us
;

522 
	}
}

532 
HAL_SètusTy≥Def
 
	$HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
)

534 
uöt32_t
 
ãmp
;

535 
uöt32_t
 
tick°¨t
 = 0U;

538 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

541 
ãmp
 = 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(
hdma
);

546 
ãmp
 = 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(
hdma
);

550 
tick°¨t
 = 
	`HAL_GëTick
();

552 
	`__HAL_DMA_GET_FLAG
(
hdma
, 
ãmp
Ë=
RESET
)

554 if((
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma)Ë!
RESET
))

557 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma));

560 
	`SET_BIT
(
hdma
->
Eº‹Code
, 
HAL_DMA_ERROR_TE
);

563 
hdma
->
Sèã

HAL_DMA_STATE_ERROR
;

566 
	`__HAL_UNLOCK
(
hdma
);

568  
HAL_ERROR
;

571 if(
Timeout
 !
HAL_MAX_DELAY
)

573 if((
Timeout
 =0U)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

576 
	`SET_BIT
(
hdma
->
Eº‹Code
, 
HAL_DMA_ERROR_TIMEOUT
);

579 
hdma
->
Sèã

HAL_DMA_STATE_TIMEOUT
;

582 
	`__HAL_UNLOCK
(
hdma
);

584  
HAL_TIMEOUT
;

589 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

592 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

596 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

599 
	`__HAL_UNLOCK
(
hdma
);

604 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

608 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF
;

611 
	`__HAL_UNLOCK
(
hdma
);

614  
HAL_OK
;

615 
	}
}

622 
	$HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
)

625 if(
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma)Ë!
RESET
)

627 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_TE
Ë!
RESET
)

630 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TE
);

633 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma));

636 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_TE
;

639 
hdma
->
Sèã
 = 
HAL_DMA_STATE_ERROR
;

642 
	`__HAL_UNLOCK
(
hdma
);

644 i‡(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

647 
hdma
->
	`X„rEº‹CÆlback
(hdma);

653 if(
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma)Ë!
RESET
)

655 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_HT
Ë!
RESET
)

658 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

661 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

664 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

667 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF
;

669 if(
hdma
->
X„rHÆfC∂tCÆlback
 !
NULL
)

672 
hdma
->
	`X„rHÆfC∂tCÆlback
(hdma);

678 if(
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma)Ë!
RESET
)

680 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_TC
Ë!
RESET
)

682 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

685 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TC
);

688 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

691 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_NONE
;

694 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

697 
	`__HAL_UNLOCK
(
hdma
);

699 if(
hdma
->
X„rC∂tCÆlback
 !
NULL
)

702 
hdma
->
	`X„rC∂tCÆlback
(hdma);

706 
	}
}

734 
HAL_DMA_SèãTy≥Def
 
	$HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
)

736  
hdma
->
Sèã
;

737 
	}
}

745 
uöt32_t
 
	$HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

747  
hdma
->
Eº‹Code
;

748 
	}
}

775 
	$DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

778 
hdma
->
In°™˚
->
CNDTR
 = 
D©aLígth
;

781 if((
hdma
->
Inô
.
Dúe˘i⁄
Ë=
DMA_MEMORY_TO_PERIPH
)

784 
hdma
->
In°™˚
->
CPAR
 = 
D°Addªss
;

787 
hdma
->
In°™˚
->
CMAR
 = 
SrcAddªss
;

793 
hdma
->
In°™˚
->
CPAR
 = 
SrcAddªss
;

796 
hdma
->
In°™˚
->
CMAR
 = 
D°Addªss
;

798 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_flash.c

169 
	~"°m32l0xx_hÆ.h
"

175 #ifde‡
HAL_FLASH_MODULE_ENABLED


205 
FLASH_Pro˚ssTy≥Def
 
	gpFœsh
;

214 
FLASH_SëEº‹Code
();

215 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

247 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, uöt32_à
D©a
)

249 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

252 
	`__HAL_LOCK
(&
pFœsh
);

255 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

256 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

259 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

261 if(
°©us
 =
HAL_OK
)

264 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

267 *(
__IO
 
uöt32_t
 *)
Addªss
 = 
D©a
;

270 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

274 
	`__HAL_UNLOCK
(&
pFœsh
);

276  
°©us
;

277 
	}
}

289 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, uöt32_à
D©a
)

291 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

294 
	`__HAL_LOCK
(&
pFœsh
);

297 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

298 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

301 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

303 
pFœsh
.
Addªss
 = Address;

304 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAM
;

306 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

308 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

311 *(
__IO
 
uöt32_t
 *)
Addªss
 = 
D©a
;

313  
°©us
;

314 
	}
}

320 
	$HAL_FLASH_IRQH™dÀr
()

322 
uöt32_t
 
addªs°mp
 = 0;

337 if–
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

338 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGAERR
) ||

339 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_SIZERR
) ||

340 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

341 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_RDERR
) ||

342 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_FWWERR
) ||

343 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_NOTZEROERR
) )

345 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

348 
addªs°mp
 = 
pFœsh
.
Page
;

349 
pFœsh
.
Page
 = 0xFFFFFFFFU;

354 
addªs°mp
 = 
pFœsh
.
Addªss
;

357 
	`FLASH_SëEº‹Code
();

360 
	`HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
addªs°mp
);

363 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

367 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

370 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

373 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

375 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

378 
pFœsh
.
NbPagesToEø£
--;

381 if(
pFœsh
.
NbPagesToEø£
 != 0U)

383 
addªs°mp
 = 
pFœsh
.
Page
;

385 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

388 
addªs°mp
 = 
pFœsh
.
Page
 + 
FLASH_PAGE_SIZE
;

389 
pFœsh
.
Page
 = 
addªs°mp
;

392 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_ERASE
);

394 
	`FLASH_PageEø£
(
addªs°mp
);

400 
pFœsh
.
Page
 = 
addªs°mp
 = 0xFFFFFFFFU;

401 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

403 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

409 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

413 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

416 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

417 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

423 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_NONE
)

426 
	`CLEAR_BIT
(
FLASH
->
PECR
, (
FLASH_PECR_ERASE
 | 
FLASH_PECR_PROG
));

429 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

432 
	`__HAL_UNLOCK
(&
pFœsh
);

434 
	}
}

444 
__wók
 
	$HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

447 
	`UNUSED
(
Rëu∫VÆue
);

452 
	}
}

461 
__wók
 
	$HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

464 
	`UNUSED
(
Rëu∫VÆue
);

469 
	}
}

494 
HAL_SètusTy≥Def
 
	$HAL_FLASH_U∆ock
()

496 i‡(
	`HAL_IS_BIT_SET
(
FLASH
->
PECR
, 
FLASH_PECR_PRGLOCK
))

499 if(
	`HAL_IS_BIT_SET
(
FLASH
->
PECR
, 
FLASH_PECR_PELOCK
))

501 
	`WRITE_REG
(
FLASH
->
PEKEYR
, 
FLASH_PEKEY1
);

502 
	`WRITE_REG
(
FLASH
->
PEKEYR
, 
FLASH_PEKEY2
);

506 
	`WRITE_REG
(
FLASH
->
PRGKEYR
, 
FLASH_PRGKEY1
);

507 
	`WRITE_REG
(
FLASH
->
PRGKEYR
, 
FLASH_PRGKEY2
);

511  
HAL_ERROR
;

514  
HAL_OK
;

515 
	}
}

521 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Lock
()

524 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PRGLOCK
);

526  
HAL_OK
;

527 
	}
}

533 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_U∆ock
()

535 if(
	`HAL_IS_BIT_SET
(
FLASH
->
PECR
, 
FLASH_PECR_OPTLOCK
))

538 if(
	`HAL_IS_BIT_SET
(
FLASH
->
PECR
, 
FLASH_PECR_PELOCK
))

541 
	`WRITE_REG
(
FLASH
->
PEKEYR
, 
FLASH_PEKEY1
);

542 
	`WRITE_REG
(
FLASH
->
PEKEYR
, 
FLASH_PEKEY2
);

546 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY1
);

547 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY2
);

551  
HAL_ERROR
;

554  
HAL_OK
;

555 
	}
}

561 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Lock
()

564 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_OPTLOCK
);

566  
HAL_OK
;

567 
	}
}

574 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Launch
()

577 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_OBL_LAUNCH
);

580 (
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
));

581 
	}
}

606 
uöt32_t
 
	$HAL_FLASH_GëEº‹
()

608  
pFœsh
.
Eº‹Code
;

609 
	}
}

628 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

634 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

636 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
))

638 i‡(
Timeout
 !
HAL_MAX_DELAY
)

640 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

642  
HAL_TIMEOUT
;

648 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

651 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

654 if–
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

655 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGAERR
) ||

656 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_SIZERR
) ||

657 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

658 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_RDERR
) ||

659 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_FWWERR
) ||

660 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_NOTZEROERR
) )

672 
	`FLASH_SëEº‹Code
();

673  
HAL_ERROR
;

677  
HAL_OK
;

678 
	}
}

685 
	$FLASH_SëEº‹Code
()

687 
uöt32_t
 
Êags
 = 0;

689 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
))

691 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_WRP
;

692 
Êags
 |
FLASH_FLAG_WRPERR
;

694 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGAERR
))

696 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PGA
;

697 
Êags
 |
FLASH_FLAG_PGAERR
;

699 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_SIZERR
))

701 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_SIZE
;

702 
Êags
 |
FLASH_FLAG_SIZERR
;

704 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
))

714 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_OPTV
;

715 
Êags
 |
FLASH_FLAG_OPTVERR
;

718 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_RDERR
))

720 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_RD
;

721 
Êags
 |
FLASH_FLAG_RDERR
;

723 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_FWWERR
))

725 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_FWWERR
;

726 
Êags
 |
HAL_FLASH_ERROR_FWWERR
;

728 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_NOTZEROERR
))

730 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_NOTZERO
;

731 
Êags
 |
FLASH_FLAG_NOTZEROERR
;

735 
	`__HAL_FLASH_CLEAR_FLAG
(
Êags
);

736 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_flash_ex.c

67 
	~"°m32l0xx_hÆ.h
"

72 #ifde‡
HAL_FLASH_MODULE_ENABLED


81 
FLASH_Pro˚ssTy≥Def
 
pFœsh
;

117 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

118 #i‡
deföed
(
FLASH_OPTR_BFB2
)

119 
HAL_SètusTy≥Def
 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

121 
HAL_SètusTy≥Def
 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

122 
HAL_SètusTy≥Def
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

123 
HAL_SètusTy≥Def
 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

124 
uöt8_t
 
FLASH_OB_GëRDP
();

125 
uöt8_t
 
FLASH_OB_GëU£r
();

126 
uöt8_t
 
FLASH_OB_GëBOR
();

127 
uöt8_t
 
FLASH_OB_GëBOOTBô1
();

128 
HAL_SètusTy≥Def
 
FLASH_OB_BOOTBô1C⁄fig
(
uöt8_t
 
OB_BoŸBô1
);

129 #i‡
deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

130 
HAL_SètusTy≥Def
 
FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
uöt32_t
 
Se˘‹
, uöt32_à
Se˘‹2
, uöt32_à
NewSèã
);

132 
HAL_SètusTy≥Def
 
FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
uöt32_t
 
Se˘‹
, uöt32_à
NewSèã
);

134 
uöt32_t
 
FLASH_OB_GëWRP
();

135 #i‡
deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

136 
uöt32_t
 
FLASH_OB_GëWRP2
();

187 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
)

189 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

190 
uöt32_t
 
addªss
 = 0U;

193 
	`__HAL_LOCK
(&
pFœsh
);

196 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

198 i‡(
°©us
 =
HAL_OK
)

201 *
PageEº‹
 = 0xFFFFFFFFU;

204 
	`as£π_∑øm
(
	`IS_NBPAGES
(
pEø£Inô
->
NbPages
));

205 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

206 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

207 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
((
pEø£Inô
->
PageAddªss
 & ~(
FLASH_PAGE_SIZE
 - 1U)Ë+ÖEø£Inô->
NbPages
 * FLASH_PAGE_SIZE - 1U));

210 
addªss
 = 
pEø£Inô
->
PageAddªss
;

211 
addªss
 < ((
pEø£Inô
->
NbPages
 * 
FLASH_PAGE_SIZE
Ë+ÖEø£Inô->
PageAddªss
);

212 
addªss
 +
FLASH_PAGE_SIZE
)

214 
	`FLASH_PageEø£
(
addªss
);

217 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

220 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

221 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_ERASE
);

223 i‡(
°©us
 !
HAL_OK
)

226 *
PageEº‹
 = 
addªss
;

233 
	`__HAL_UNLOCK
(&
pFœsh
);

235  
°©us
;

236 
	}
}

251 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
)

253 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

256 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

258  
HAL_ERROR
;

262 
	`as£π_∑øm
(
	`IS_NBPAGES
(
pEø£Inô
->
NbPages
));

263 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

264 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

265 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
((
pEø£Inô
->
PageAddªss
 & ~(
FLASH_PAGE_SIZE
 - 1)Ë+ÖEø£Inô->
NbPages
 * FLASH_PAGE_SIZE - 1));

268 
	`__HAL_LOCK
(&
pFœsh
);

271 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

273 i‡(
°©us
 =
HAL_OK
)

276 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

278 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PAGEERASE
;

279 
pFœsh
.
NbPagesToEø£
 = 
pEø£Inô
->
NbPages
;

280 
pFœsh
.
Page
 = 
pEø£Inô
->
PageAddªss
;

283 
	`FLASH_PageEø£
(
pEø£Inô
->
PageAddªss
);

288 
	`__HAL_UNLOCK
(&
pFœsh
);

291  
°©us
;

292 
	}
}

343 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

345 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

348 
	`__HAL_LOCK
(&
pFœsh
);

351 
	`as£π_∑øm
(
	`IS_OPTIONBYTE
(
pOBInô
->
O±i⁄Ty≥
));

354 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_WRP
) == OPTIONBYTE_WRP)

356 
	`as£π_∑øm
(
	`IS_WRPSTATE
(
pOBInô
->
WRPSèã
));

357 #i‡
	`deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

358 
°©us
 = 
	`FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
pOBInô
->
WRPSe˘‹
,ÖOBInô->
WRPSe˘‹2
,ÖOBInô->
WRPSèã
);

360 
°©us
 = 
	`FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
pOBInô
->
WRPSe˘‹
,ÖOBInô->
WRPSèã
);

362 i‡(
°©us
 !
HAL_OK
)

365 
	`__HAL_UNLOCK
(&
pFœsh
);

366  
°©us
;

371 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_RDP
) == OPTIONBYTE_RDP)

373 
°©us
 = 
	`FLASH_OB_RDPC⁄fig
(
pOBInô
->
RDPLevñ
);

374 i‡(
°©us
 !
HAL_OK
)

377 
	`__HAL_UNLOCK
(&
pFœsh
);

378  
°©us
;

383 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_USER
) == OPTIONBYTE_USER)

385 
°©us
 = 
	`FLASH_OB_U£rC⁄fig
(
pOBInô
->
USERC⁄fig
 & 
OB_IWDG_SW
,

386 
pOBInô
->
USERC⁄fig
 & 
OB_STOP_NORST
,

387 
pOBInô
->
USERC⁄fig
 & 
OB_STDBY_NORST
);

388 i‡(
°©us
 !
HAL_OK
)

391 
	`__HAL_UNLOCK
(&
pFœsh
);

392  
°©us
;

397 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_BOR
) == OPTIONBYTE_BOR)

399 
°©us
 = 
	`FLASH_OB_BORC⁄fig
(
pOBInô
->
BORLevñ
);

400 i‡(
°©us
 !
HAL_OK
)

403 
	`__HAL_UNLOCK
(&
pFœsh
);

404  
°©us
;

409 i‡((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_BOOT_BIT1
) == OPTIONBYTE_BOOT_BIT1)

411 
°©us
 = 
	`FLASH_OB_BOOTBô1C⁄fig
(
pOBInô
->
BOOTBô1C⁄fig
);

414 
	`__HAL_UNLOCK
(&
pFœsh
);

416  
°©us
;

417 
	}
}

426 
	$HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

428 
pOBInô
->
O±i⁄Ty≥
 = 
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
 | 
OPTIONBYTE_BOR
;

431 
pOBInô
->
WRPSe˘‹
 = 
	`FLASH_OB_GëWRP
();

433 #i‡
	`deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

434 
pOBInô
->
WRPSe˘‹2
 = 
	`FLASH_OB_GëWRP2
();

438 
pOBInô
->
RDPLevñ
 = 
	`FLASH_OB_GëRDP
();

441 
pOBInô
->
USERC⁄fig
 = 
	`FLASH_OB_GëU£r
();

444 
pOBInô
->
BORLevñ
 = 
	`FLASH_OB_GëBOR
();

447 
pOBInô
->
BOOTBô1C⁄fig
 = 
	`FLASH_OB_GëBOOTBô1
();

448 
	}
}

450 #i‡
deföed
(
FLASH_OPTR_WPRMOD
Ë|| deföed(
FLASH_OPTR_BFB2
)

459 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_AdvOBProgøm
 (
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
)

461 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

464 
	`as£π_∑øm
(
	`IS_OBEX
(
pAdvOBInô
->
O±i⁄Ty≥
));

466 #i‡
	`deföed
(
FLASH_OPTR_WPRMOD
)

469 i‡((
pAdvOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_PCROP
) == OPTIONBYTE_PCROP)

472 
	`as£π_∑øm
(
	`IS_PCROPSTATE
(
pAdvOBInô
->
PCROPSèã
));

473 #i‡
	`deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

474 
°©us
 = 
	`FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
pAdvOBInô
->
PCROPSe˘‹
,ÖAdvOBInô->
PCROPSe˘‹2
,ÖAdvOBInô->
PCROPSèã
);

476 
°©us
 = 
	`FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
pAdvOBInô
->
PCROPSe˘‹
,ÖAdvOBInô->
PCROPSèã
);

482 #i‡
	`deföed
(
FLASH_OPTR_BFB2
)

485 i‡((
pAdvOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_BOOTCONFIG
) == OPTIONBYTE_BOOTCONFIG)

487 
°©us
 = 
	`FLASH_OB_BoŸC⁄fig
(
pAdvOBInô
->
BoŸC⁄fig
);

492  
°©us
;

493 
	}
}

502 
	$HAL_FLASHEx_AdvOBGëC⁄fig
(
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
)

504 
pAdvOBInô
->
O±i⁄Ty≥
 = 0;

506 #i‡
	`deföed
(
FLASH_OPTR_WPRMOD
)

508 
pAdvOBInô
->
O±i⁄Ty≥
 |
OPTIONBYTE_PCROP
;

512 
pAdvOBInô
->
PCROPSèã
 = (
FLASH
->
OPTR
 & 
FLASH_OPTR_WPRMOD
Ë>> 
FLASH_OPTR_WPRMOD_Pos
;

514 
pAdvOBInô
->
PCROPSe˘‹
 = 
FLASH
->
WRPR
;

516 #i‡
	`deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

518 
pAdvOBInô
->
PCROPSe˘‹2
 = 
FLASH
->
WRPR2
;

522 #i‡
	`deföed
(
FLASH_OPTR_BFB2
)

524 
pAdvOBInô
->
O±i⁄Ty≥
 |
OPTIONBYTE_BOOTCONFIG
;

527 
pAdvOBInô
->
BoŸC⁄fig
 = (
FLASH
->
OPTR
 & 
FLASH_OPTR_BFB2
) >> 16U;

530 
	}
}

534 #i‡
deföed
(
FLASH_OPTR_WPRMOD
)

542 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OB_Sñe˘PCROP
()

544 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

545 
uöt16_t
 
tmp1
 = 0;

546 
uöt32_t
 
tmp2
 = 0;

547 
uöt8_t
 
›ti⁄tmp
 = 0;

548 
uöt16_t
 
›ti⁄tmp2
 = 0;

550 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

553 
›ti⁄tmp
 = (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OB_BASE
));

556 
›ti⁄tmp2
 = (
uöt16_t
)(
OB_PCROP_SELECTED
 | 
›ti⁄tmp
);

559 
tmp1
 = (
uöt16_t
)(~(
›ti⁄tmp2
 ));

560 
tmp2
 = (
uöt32_t
)(((uöt32_t)((uöt32_t)(
tmp1
Ë<< 16U)Ë| ((uöt32_t)
›ti⁄tmp2
));

562 if(
°©us
 =
HAL_OK
)

565 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

568 
OB
->
RDP
 = 
tmp2
;

571 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

575  
°©us
;

576 
	}
}

584 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OB_DeSñe˘PCROP
()

586 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

587 
uöt16_t
 
tmp1
 = 0;

588 
uöt32_t
 
tmp2
 = 0;

589 
uöt8_t
 
›ti⁄tmp
 = 0;

590 
uöt16_t
 
›ti⁄tmp2
 = 0;

592 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

595 
›ti⁄tmp
 = (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OB_BASE
));

598 
›ti⁄tmp2
 = (
uöt16_t
)(
OB_PCROP_DESELECTED
 | 
›ti⁄tmp
);

601 
tmp1
 = (
uöt16_t
)(~(
›ti⁄tmp2
 ));

602 
tmp2
 = (
uöt32_t
)(((uöt32_t)((uöt32_t)(
tmp1
Ë<< 16U)Ë| ((uöt32_t)
›ti⁄tmp2
));

604 if(
°©us
 =
HAL_OK
)

607 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

610 
OB
->
RDP
 = 
tmp2
;

613 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

617  
°©us
;

618 
	}
}

650 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_DATAEEPROM_U∆ock
()

652 if((
FLASH
->
PECR
 & 
FLASH_PECR_PELOCK
Ë!
RESET
)

655 
FLASH
->
PEKEYR
 = 
FLASH_PEKEY1
;

656 
FLASH
->
PEKEYR
 = 
FLASH_PEKEY2
;

660  
HAL_ERROR
;

662  
HAL_OK
;

663 
	}
}

669 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_DATAEEPROM_Lock
()

672 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PELOCK
);

674  
HAL_OK
;

675 
	}
}

687 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_DATAEEPROM_Eø£
(
uöt32_t
 
Addªss
)

689 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

692 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

695 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

697 if(
°©us
 =
HAL_OK
)

700 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

703 *(
__IO
 
uöt32_t
 *Ë
Addªss
 = 0x00000000U;

705 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

709  
°©us
;

710 
	}
}

729 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_DATAEEPROM_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, uöt32_à
D©a
)

731 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

734 
	`__HAL_LOCK
(&
pFœsh
);

737 
	`as£π_∑øm
(
	`IS_TYPEPROGRAMDATA
(
Ty≥Progøm
));

738 
	`as£π_∑øm
(
	`IS_FLASH_DATA_ADDRESS
(
Addªss
));

741 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

743 if(
°©us
 =
HAL_OK
)

746 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

748 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAMDATA_WORD
)

751 *(
__IO
 
uöt32_t
 *)
Addªss
 = 
D©a
;

753 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAMDATA_HALFWORD
)

756 *(
__IO
 
uöt16_t
 *)
Addªss
 = (uöt16_tË
D©a
;

758 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAMDATA_BYTE
)

761 *(
__IO
 
uöt8_t
 *)
Addªss
 = (uöt8_tË
D©a
;

765 
°©us
 = 
HAL_ERROR
;

768 i‡(
°©us
 !
HAL_OK
)

771 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

776 
	`__HAL_UNLOCK
(&
pFœsh
);

778  
°©us
;

779 
	}
}

785 
	$HAL_FLASHEx_DATAEEPROM_E«bÀFixedTimeProgøm
()

787 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_FIX
);

788 
	}
}

794 
	$HAL_FLASHEx_DATAEEPROM_DißbÀFixedTimeProgøm
()

796 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_FIX
);

797 
	}
}

830 
HAL_SètusTy≥Def
 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

832 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

833 
uöt32_t
 
tmp1
 = 0U, 
tmp2
 = 0U, 
tmp3
 = 0U;

836 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

838 
tmp1
 = (
uöt32_t
)(
OB
->
RDP
 & 
FLASH_OPTR_RDPROT
);

840 #i‡
	`deföed
(
FLASH_OPTR_WPRMOD
)

842 
tmp3
 = (
uöt32_t
)(
OB
->
RDP
 & 
FLASH_OPTR_WPRMOD
);

846 
tmp1
 = (~((
uöt32_t
)(
OB_RDP
 | 
tmp3
)));

847 
tmp2
 = (
uöt32_t
)(((uöt32_t)((uöt32_t)(
tmp1
Ë<< 16U)Ë| ((uöt32_t)(
OB_RDP
 | 
tmp3
)));

850 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

852 if(
°©us
 =
HAL_OK
)

855 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

858 
OB
->
RDP
 = 
tmp2
;

861 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

865  
°©us
;

866 
	}
}

881 
HAL_SètusTy≥Def
 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

883 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

884 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

887 
	`as£π_∑øm
(
	`IS_OB_BOR_LEVEL
(
OB_BOR
));

890 
tmp1
 = 
OB
->
USER
 & ((~
FLASH_OPTR_BOR_LEV
) >> 16U);

893 
tmp
 = (
uöt32_t
)~((
OB_BOR
 | 
tmp1
)) << 16U;

894 
tmp
 |(
OB_BOR
 | 
tmp1
);

897 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

899 if(
°©us
 =
HAL_OK
)

902 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

905 
OB
->
USER
 = 
tmp
;

908 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

912  
°©us
;

913 
	}
}

923 
HAL_SètusTy≥Def
 
	$FLASH_OB_BOOTBô1C⁄fig
(
uöt8_t
 
OB_BoŸBô1
)

925 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

926 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0, 
OB_Bôs
 = ((uöt32_tË
OB_BoŸBô1
) << 15;

929 
	`as£π_∑øm
(
	`IS_OB_BOOT1
(
OB_BoŸBô1
));

932 
tmp1
 = 
OB
->
USER
 & ((~
FLASH_OPTR_BOOT1
) >> 16U);

935 
tmp
 = (~(
OB_Bôs
 | 
tmp1
)) << 16U;

936 
tmp
 |
OB_Bôs
 | 
tmp1
;

939 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

941 if(
°©us
 =
HAL_OK
)

944 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

946 
OB
->
USER
 = 
tmp
;

948 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

951  
°©us
;

952 
	}
}

958 
uöt8_t
 
	$FLASH_OB_GëU£r
()

961  (
uöt8_t
)((
FLASH
->
OPTR
 & 
FLASH_OPTR_USER
) >> 16U);

962 
	}
}

972 
uöt8_t
 
	$FLASH_OB_GëRDP
()

974  (
uöt8_t
)(
FLASH
->
OPTR
 & 
FLASH_OPTR_RDPROT
);

975 
	}
}

981 
uöt8_t
 
	$FLASH_OB_GëBOR
()

984  (
uöt8_t
)((
FLASH
->
OPTR
 & (
uöt32_t
)
FLASH_OPTR_BOR_LEV
) >> 16U);

985 
	}
}

991 
uöt8_t
 
	$FLASH_OB_GëBOOTBô1
()

994  (
FLASH
->
OPTR
 & 
FLASH_OPTR_BOOT1
Ë>> 
FLASH_OPTR_BOOT1_Pos
;

996 
	}
}

1002 
uöt32_t
 
	$FLASH_OB_GëWRP
()

1005  (
uöt32_t
)(
FLASH
->
WRPR
);

1006 
	}
}

1008 #i‡
deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

1013 
uöt32_t
 
	$FLASH_OB_GëWRP2
()

1016  (
uöt32_t
)(
FLASH
->
WRPR2
);

1017 
	}
}

1020 #i‡
deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

1031 
HAL_SètusTy≥Def
 
	$FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
uöt32_t
 
Se˘‹
, uöt32_à
Se˘‹2
, uöt32_à
NewSèã
)

1042 
HAL_SètusTy≥Def
 
	$FLASH_OB_PrŸe˘edSe˘‹sC⁄fig
(
uöt32_t
 
Se˘‹
, uöt32_à
NewSèã
)

1045 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1046 
uöt32_t
 
WRP_D©a
 = 0;

1047 
uöt32_t
 
OB_WRP
 = 
Se˘‹
;

1050 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

1052 if(
°©us
 =
HAL_OK
)

1055 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1058 i‡(
OB_WRP
 != 0x00000000U)

1060 i‡((
OB_WRP
 & 
WRP_MASK_LOW
) != 0x00000000U)

1062 i‡(
NewSèã
 !
OB_WRPSTATE_DISABLE
)

1064 
WRP_D©a
 = (
uöt16_t
)(((
OB_WRP
 & 
WRP_MASK_LOW
Ë| 
OB
->
WRP01
));

1065 
OB
->
WRP01
 = (
uöt32_t
)(~(
WRP_D©a
) << 16U) | (WRP_Data);

1069 
WRP_D©a
 = (
uöt16_t
)(~
OB_WRP
 & (
WRP_MASK_LOW
 & 
OB
->
WRP01
));

1070 
OB
->
WRP01
 = (
uöt32_t
)((~
WRP_D©a
) << 16U) | (WRP_Data);

1074 #i‡
	`deföed
(
STM32L071xx
Ë|| deföed(
STM32L072xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L081xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L083xx
)

1076 i‡(
OB_WRP
 != 0x00000000U)

1078 i‡((
OB_WRP
 & 
WRP_MASK_HIGH
) != 0x00000000U)

1080 i‡(
NewSèã
 !
OB_WRPSTATE_DISABLE
)

1082 
WRP_D©a
 = (
uöt16_t
)((((
OB_WRP
 & 
WRP_MASK_HIGH
Ë>> 16U | 
OB
->
WRP23
)));

1083 
OB
->
WRP23
 = (
uöt32_t
)(~(
WRP_D©a
) << 16U) | (WRP_Data);

1087 
WRP_D©a
 = (
uöt16_t
)((((~
OB_WRP
 & 
WRP_MASK_HIGH
Ë>> 16U & 
OB
->
WRP23
)));

1088 
OB
->
WRP23
 = (
uöt32_t
)((~
WRP_D©a
) << 16U) | (WRP_Data);

1093 
OB_WRP
 = 
Se˘‹2
;

1095 i‡(
OB_WRP
 != 0x00000000U)

1097 i‡((
OB_WRP
 & 
WRP_MASK_LOW
) != 0x00000000U)

1099 i‡(
NewSèã
 !
OB_WRPSTATE_DISABLE
)

1101 
WRP_D©a
 = (
uöt16_t
)(((
OB_WRP
 & 
WRP_MASK_LOW
Ë| 
OB
->
WRP45
));

1102 
OB
->
WRP45
 =(
uöt32_t
)(~(
WRP_D©a
) << 16U) | (WRP_Data);

1106 
WRP_D©a
 = (
uöt16_t
)(~
OB_WRP
 & (
WRP_MASK_LOW
 & 
OB
->
WRP45
));

1107 
OB
->
WRP45
 = (
uöt32_t
)((~
WRP_D©a
) << 16U) | (WRP_Data);

1114 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

1117  
°©us
;

1118 
	}
}

1136 
HAL_SètusTy≥Def
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

1138 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1139 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

1142 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1143 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1144 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1147 
tmp1
 = 
OB
->
USER
 & ((~
FLASH_OPTR_USER
) >> 16U);

1150 
tmp
 = (
uöt32_t
)(((uöt32_t)~((uöt32_t)((uöt32_t)(
OB_IWDG
Ë| (uöt32_t)(
OB_STOP
Ë| (uöt32_t)(
OB_STDBY
Ë| 
tmp1
))) << 16U);

1151 
tmp
 |((
uöt32_t
)(
OB_IWDG
Ë| ((uöt32_t)
OB_STOP
Ë| (uöt32_t)(
OB_STDBY
Ë| 
tmp1
);

1154 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

1156 if(
°©us
 =
HAL_OK
)

1159 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1162 
OB
->
USER
 = 
tmp
;

1165 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

1169  
°©us
;

1170 
	}
}

1172 #i‡
deföed
(
FLASH_OPTR_BFB2
)

1182 
HAL_SètusTy≥Def
 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
)

1184 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1185 
uöt32_t
 
tmp
 = 0U, 
tmp1
 = 0U;

1188 
	`as£π_∑øm
(
	`IS_OB_BOOT_BANK
(
OB_BOOT
));

1191 
tmp1
 = 
OB
->
USER
 & ((~
FLASH_OPTR_BFB2
) >> 16U);

1194 
tmp
 = (
uöt32_t
)~(
OB_BOOT
 | 
tmp1
) << 16U;

1195 
tmp
 |(
OB_BOOT
 | 
tmp1
);

1198 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

1200 if(
°©us
 =
HAL_OK
)

1203 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1206 
OB
->
USER
 = 
tmp
;

1209 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

1213  
°©us
;

1214 
	}
}

1242 
	$FLASH_PageEø£
(
uöt32_t
 
PageAddªss
)

1245 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1248 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_ERASE
);

1251 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

1254 *(
__IO
 
uöt32_t
 *)(uöt32_t)(
PageAddªss
 & ~(
FLASH_PAGE_SIZE
 - 1)) = 0x00000000;

1255 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_flash_ramfunc.c

61 
	~"°m32l0xx_hÆ.h
"

67 #ifde‡
HAL_FLASH_MODULE_ENABLED


75 
FLASH_Pro˚ssTy≥Def
 
pFœsh
;

99 
__RAM_FUNC
 
FLASHRAM_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

100 
__RAM_FUNC
 
FLASHRAM_SëEº‹Code
();

131 
__RAM_FUNC
 
	$HAL_FLASHEx_E«bÀRunPowîDown
()

134 
	`__HAL_FLASH_POWER_DOWN_ENABLE
();

136  
HAL_OK
;

137 
	}
}

144 
__RAM_FUNC
 
	$HAL_FLASHEx_DißbÀRunPowîDown
()

147 
	`__HAL_FLASH_POWER_DOWN_DISABLE
();

149  
HAL_OK
;

150 
	}
}

163 #i‡
deföed
(
FLASH_PECR_PARALLBANK
)

181 
__RAM_FUNC
 
	$HAL_FLASHEx_Eø£P¨ÆÀlPage
(
uöt32_t
 
Page_Addªss1
, uöt32_à
Page_Addªss2
)

183 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

186 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

188 if(
°©us
 =
HAL_OK
)

191 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PARALLBANK
);

192 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_ERASE
);

193 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

196 *(
__IO
 
uöt32_t
 *)
Page_Addªss1
 = 0x00000000U;

198 *(
__IO
 
uöt32_t
 *)
Page_Addªss2
 = 0x00000000U;

201 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

204 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

205 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_ERASE
);

206 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PARALLBANK
);

209  
°©us
;

210 
	}
}

240 
__RAM_FUNC
 
	$HAL_FLASHEx_ProgømP¨ÆÀlHÆfPage
(
uöt32_t
 
Addªss1
, uöt32_t* 
pBuf„r1
, uöt32_à
Addªss2
, uöt32_t* 
pBuf„r2
)

242 
uöt32_t
 
cou¡
 = 0U;

243 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

246 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

248 if(
°©us
 =
HAL_OK
)

251 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PARALLBANK
);

252 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_FPRG
);

253 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

256 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

257 if(
°©us
 =
HAL_OK
)

260 
	`__dißbÀ_úq
();

263 
cou¡
 < 16U)

266 *(
__IO
 
uöt32_t
*Ë
Addªss1
 = *
pBuf„r1
;

267 
pBuf„r1
++;

268 
cou¡
 ++;

272 
cou¡
 = 0U;

273 
cou¡
 < 16U)

276 *(
__IO
 
uöt32_t
*Ë
Addªss2
 = *
pBuf„r2
;

277 
pBuf„r2
++;

278 
cou¡
 ++;

282 
	`__íabÀ_úq
();

285 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

289 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

290 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_FPRG
);

291 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PARALLBANK
);

295  
°©us
;

296 
	}
}

321 
__RAM_FUNC
 
	$HAL_FLASHEx_HÆfPageProgøm
(
uöt32_t
 
Addªss
, uöt32_t* 
pBuf„r
)

323 
uöt32_t
 
cou¡
 = 0U;

324 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

327 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

329 if(
°©us
 =
HAL_OK
)

332 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_FPRG
);

333 
	`SET_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

336 
	`__dißbÀ_úq
();

339 
cou¡
 < 16U)

342 *(
__IO
 
uöt32_t
*Ë
Addªss
 = *
pBuf„r
;

343 
pBuf„r
++;

344 
cou¡
 ++;

348 
	`__íabÀ_úq
();

351 
°©us
 = 
	`FLASHRAM_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

354 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_PROG
);

355 
	`CLEAR_BIT
(
FLASH
->
PECR
, 
FLASH_PECR_FPRG
);

359  
°©us
;

360 
	}
}

392 
__RAM_FUNC
 
	$HAL_FLASHEx_GëEº‹
(
uöt32_t
 * 
Eº‹
)

394 *
Eº‹
 = 
pFœsh
.
Eº‹Code
;

395  
HAL_OK
;

396 
	}
}

414 
__RAM_FUNC
 
	$FLASHRAM_SëEº‹Code
()

416 
uöt32_t
 
Êags
 = 0;

418 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
))

420 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_WRP
;

421 
Êags
 |
FLASH_FLAG_WRPERR
;

423 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGAERR
))

425 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PGA
;

426 
Êags
 |
FLASH_FLAG_PGAERR
;

428 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_SIZERR
))

430 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_SIZE
;

431 
Êags
 |
FLASH_FLAG_SIZERR
;

433 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
))

443 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_OPTV
;

444 
Êags
 |
FLASH_FLAG_OPTVERR
;

447 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_RDERR
))

449 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_RD
;

450 
Êags
 |
FLASH_FLAG_RDERR
;

452 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_FWWERR
))

454 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_FWWERR
;

455 
Êags
 |
HAL_FLASH_ERROR_FWWERR
;

457 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_NOTZEROERR
))

459 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_NOTZERO
;

460 
Êags
 |
FLASH_FLAG_NOTZEROERR
;

464 
	`__HAL_FLASH_CLEAR_FLAG
(
Êags
);

466  
HAL_OK
;

467 
	}
}

474 
__RAM_FUNC
 
	$FLASHRAM_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

480 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
Ë&& (
Timeout
 != 0x00U))

482 
Timeout
--;

485 if(
Timeout
 == 0x00U)

487  
HAL_TIMEOUT
;

491 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

494 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

497 if–
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

498 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGAERR
) ||

499 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_SIZERR
) ||

500 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

501 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_RDERR
) ||

502 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_FWWERR
) ||

503 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_NOTZEROERR
) )

515 
	`FLASHRAM_SëEº‹Code
();

516  
HAL_ERROR
;

520  
HAL_OK
;

521 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_gpio.c

127 
	~"°m32l0xx_hÆ.h
"

133 #ifde‡
HAL_GPIO_MODULE_ENABLED


146 
	#GPIO_MODE
 ((
uöt32_t
)0x00000003U)

	)

147 
	#EXTI_MODE
 ((
uöt32_t
)0x10000000U)

	)

148 
	#GPIO_MODE_IT
 ((
uöt32_t
)0x00010000U)

	)

149 
	#GPIO_MODE_EVT
 ((
uöt32_t
)0x00020000U)

	)

150 
	#RISING_EDGE
 ((
uöt32_t
)0x00100000U)

	)

151 
	#FALLING_EDGE
 ((
uöt32_t
)0x00200000U)

	)

152 
	#GPIO_OUTPUT_TYPE
 ((
uöt32_t
)0x00000010U)

	)

154 
	#GPIO_NUMBER
 ((
uöt32_t
)16U)

	)

183 
	$HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
)

185 
uöt32_t
 
posôi⁄
 = 0x00U;

186 
uöt32_t
 
iocuºít
 = 0x00U;

187 
uöt32_t
 
ãmp
 = 0x00U;

190 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_Inô
->
Mode
));

191 
	`as£π_∑øm
(
	`IS_GPIO_PULL
(
GPIO_Inô
->
PuŒ
));

192 
	`as£π_∑øm
(
	`IS_GPIO_PIN_AVAILABLE
(
GPIOx
,(
GPIO_Inô
->
Pö
)));

195 ((
GPIO_Inô
->
Pö
Ë>> 
posôi⁄
) != 0)

198 
iocuºít
 = (
GPIO_Inô
->
Pö
Ë& (1U << 
posôi⁄
);

200 if(
iocuºít
)

204 if((
GPIO_Inô
->
Mode
 =
GPIO_MODE_AF_PP
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_OD
))

207 
	`as£π_∑øm
(
	`IS_GPIO_AF_AVAILABLE
(
GPIOx
,(
GPIO_Inô
->
A…î«ã
)));

209 
ãmp
 = 
GPIOx
->
AFR
[
posôi⁄
 >> 3U];

210 
ãmp
 &~((
uöt32_t
)0xFU << ((uöt32_t)(
posôi⁄
 & (uint32_t)0x07U) * 4U)) ;

211 
ãmp
 |((
uöt32_t
)(
GPIO_Inô
->
A…î«ã
Ë<< (((uöt32_t)
posôi⁄
 & (uint32_t)0x07U) * 4U)) ;

212 
GPIOx
->
AFR
[
posôi⁄
 >> 3U] = 
ãmp
;

216 if((
GPIO_Inô
->
Mode
 =
GPIO_MODE_OUTPUT_PP
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_PP
) ||

217 (
GPIO_Inô
->
Mode
 =
GPIO_MODE_OUTPUT_OD
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_OD
))

220 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

222 
ãmp
 = 
GPIOx
->
OSPEEDR
;

223 
ãmp
 &~(
GPIO_OSPEEDER_OSPEED0
 << (
posôi⁄
 * 2U));

224 
ãmp
 |(
GPIO_Inô
->
S≥ed
 << (
posôi⁄
 * 2U));

225 
GPIOx
->
OSPEEDR
 = 
ãmp
;

228 
ãmp

GPIOx
->
OTYPER
;

229 
ãmp
 &~(
GPIO_OTYPER_OT_0
 << 
posôi⁄
) ;

230 
ãmp
 |(((
GPIO_Inô
->
Mode
 & 
GPIO_OUTPUT_TYPE
Ë>> 4UË<< 
posôi⁄
);

231 
GPIOx
->
OTYPER
 = 
ãmp
;

235 
ãmp
 = 
GPIOx
->
MODER
;

236 
ãmp
 &~(
GPIO_MODER_MODE0
 << (
posôi⁄
 * 2U));

237 
ãmp
 |((
GPIO_Inô
->
Mode
 & 
GPIO_MODE
Ë<< (
posôi⁄
 * 2U));

238 
GPIOx
->
MODER
 = 
ãmp
;

241 
ãmp
 = 
GPIOx
->
PUPDR
;

242 
ãmp
 &~(
GPIO_PUPDR_PUPD0
 << (
posôi⁄
 * 2U));

243 
ãmp
 |((
GPIO_Inô
->
PuŒ
Ë<< (
posôi⁄
 * 2U));

244 
GPIOx
->
PUPDR
 = 
ãmp
;

248 if((
GPIO_Inô
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

251 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

253 
ãmp
 = 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2U];

254 
	`CLEAR_BIT
(
ãmp
, ((
uöt32_t
)0x0FUË<< (4U * (
posôi⁄
 & 0x03U)));

255 
	`SET_BIT
(
ãmp
, (
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4 * (
posôi⁄
 & 0x03U)));

256 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2U] = 
ãmp
;

259 
ãmp
 = 
EXTI
->
IMR
;

260 
ãmp
 &~((
uöt32_t
)
iocuºít
);

261 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

263 
ãmp
 |
iocuºít
;

265 
EXTI
->
IMR
 = 
ãmp
;

267 
ãmp
 = 
EXTI
->
EMR
;

268 
ãmp
 &~((
uöt32_t
)
iocuºít
);

269 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

271 
ãmp
 |
iocuºít
;

273 
EXTI
->
EMR
 = 
ãmp
;

276 
ãmp
 = 
EXTI
->
RTSR
;

277 
ãmp
 &~((
uöt32_t
)
iocuºít
);

278 if((
GPIO_Inô
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

280 
ãmp
 |
iocuºít
;

282 
EXTI
->
RTSR
 = 
ãmp
;

284 
ãmp
 = 
EXTI
->
FTSR
;

285 
ãmp
 &~((
uöt32_t
)
iocuºít
);

286 if((
GPIO_Inô
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

288 
ãmp
 |
iocuºít
;

290 
EXTI
->
FTSR
 = 
ãmp
;

293 
posôi⁄
++;

295 
	}
}

306 
	$HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
)

308 
uöt32_t
 
posôi⁄
 = 0x00U;

309 
uöt32_t
 
iocuºít
 = 0x00U;

310 
uöt32_t
 
tmp
 = 0x00U;

313 
	`as£π_∑øm
(
	`IS_GPIO_PIN_AVAILABLE
(
GPIOx
,
GPIO_Pö
));

316 (
GPIO_Pö
 >> 
posôi⁄
) != 0)

319 
iocuºít
 = (
GPIO_Pö
Ë& (1U << 
posôi⁄
);

321 if(
iocuºít
)

325 
GPIOx
->
MODER
 |(
GPIO_MODER_MODE0
 << (
posôi⁄
 * 2U));

328 
GPIOx
->
AFR
[
posôi⁄
 >> 3U] &~((
uöt32_t
)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;

331 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEED0
 << (
posôi⁄
 * 2U));

334 
GPIOx
->
OTYPER
 &~(
GPIO_OTYPER_OT_0
 << 
posôi⁄
) ;

337 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPD0
 << (
posôi⁄
 * 2U));

342 
tmp
 = 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2U];

343 
tmp
 &(((
uöt32_t
)0x0FUË<< (4U * (
posôi⁄
 & 0x03U)));

344 if(
tmp
 =(
	`GPIO_GET_INDEX
(
GPIOx
Ë<< (4U * (
posôi⁄
 & 0x03U))))

346 
tmp
 = ((
uöt32_t
)0x0FUË<< (4U * (
posôi⁄
 & 0x03U));

347 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2U] &~
tmp
;

350 
EXTI
->
IMR
 &~((
uöt32_t
)
iocuºít
);

351 
EXTI
->
EMR
 &~((
uöt32_t
)
iocuºít
);

354 
EXTI
->
RTSR
 &~((
uöt32_t
)
iocuºít
);

355 
EXTI
->
FTSR
 &~((
uöt32_t
)
iocuºít
);

358 
posôi⁄
++;

360 
	}
}

387 
GPIO_PöSèã
 
	$HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

389 
GPIO_PöSèã
 
bô°©us
;

392 
	`as£π_∑øm
(
	`IS_GPIO_PIN_AVAILABLE
(
GPIOx
,
GPIO_Pö
));

394 if((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
GPIO_PIN_RESET
)

396 
bô°©us
 = 
GPIO_PIN_SET
;

400 
bô°©us
 = 
GPIO_PIN_RESET
;

402  
bô°©us
;

403 
	}
}

423 
	$HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
)

426 
	`as£π_∑øm
(
	`IS_GPIO_PIN_AVAILABLE
(
GPIOx
,
GPIO_Pö
));

427 
	`as£π_∑øm
(
	`IS_GPIO_PIN_ACTION
(
PöSèã
));

429 if(
PöSèã
 !
GPIO_PIN_RESET
)

431 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

435 
GPIOx
->
BRR
 = 
GPIO_Pö
 ;

437 
	}
}

447 
	$HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

450 
	`as£π_∑øm
(
	`IS_GPIO_PIN_AVAILABLE
(
GPIOx
,
GPIO_Pö
));

452 
GPIOx
->
ODR
 ^
GPIO_Pö
;

453 
	}
}

468 
HAL_SètusTy≥Def
 
	$HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

470 
__IO
 
uöt32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

473 
	`as£π_∑øm
(
	`IS_GPIO_PIN_AVAILABLE
(
GPIOx
,
GPIO_Pö
));

476 
tmp
 |
GPIO_Pö
;

478 
GPIOx
->
LCKR
 = 
tmp
;

480 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

482 
GPIOx
->
LCKR
 = 
tmp
;

484 
tmp
 = 
GPIOx
->
LCKR
;

486 if((
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
Ë!
RESET
)

488  
HAL_OK
;

492  
HAL_ERROR
;

494 
	}
}

500 
	$HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
)

503 if(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_Pö
Ë!
RESET
)

505 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_Pö
);

506 
	`HAL_GPIO_EXTI_CÆlback
(
GPIO_Pö
);

508 
	}
}

515 
__wók
 
	$HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
)

518 
	`UNUSED
(
GPIO_Pö
);

523 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_i2c.c

242 
	~"°m32l0xx_hÆ.h
"

253 #ifde‡
HAL_I2C_MODULE_ENABLED


261 
	#TIMING_CLEAR_MASK
 (0xF0FFFFFFUË

	)

262 
	#I2C_TIMEOUT_ADDR
 (10000UË

	)

263 
	#I2C_TIMEOUT_BUSY
 (25UË

	)

264 
	#I2C_TIMEOUT_DIR
 (25UË

	)

265 
	#I2C_TIMEOUT_RXNE
 (25UË

	)

266 
	#I2C_TIMEOUT_STOPF
 (25UË

	)

267 
	#I2C_TIMEOUT_TC
 (25UË

	)

268 
	#I2C_TIMEOUT_TCR
 (25UË

	)

269 
	#I2C_TIMEOUT_TXIS
 (25UË

	)

270 
	#I2C_TIMEOUT_FLAG
 (25UË

	)

272 
	#MAX_NBYTE_SIZE
 255U

	)

273 
	#SœveAddr_SHIFT
 7U

	)

274 
	#SœveAddr_MSK
 0x06U

	)

277 
	#I2C_STATE_MSK
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 | 
HAL_I2C_STATE_BUSY_RX
Ë& (~((uöt32_t)
HAL_I2C_STATE_READY
)))Ë

	)

278 
	#I2C_STATE_NONE
 ((
uöt32_t
)(
HAL_I2C_MODE_NONE
)Ë

	)

279 
	#I2C_STATE_MASTER_BUSY_TX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_MASTER
)Ë

	)

280 
	#I2C_STATE_MASTER_BUSY_RX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_MASTER
)Ë

	)

281 
	#I2C_STATE_SLAVE_BUSY_TX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_SLAVE
)Ë

	)

282 
	#I2C_STATE_SLAVE_BUSY_RX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_SLAVE
)Ë

	)

283 
	#I2C_STATE_MEM_BUSY_TX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_MEM
)Ë

	)

284 
	#I2C_STATE_MEM_BUSY_RX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_MEM
)Ë

	)

288 
	#I2C_XFER_TX_IT
 (0x00000001U)

	)

289 
	#I2C_XFER_RX_IT
 (0x00000002U)

	)

290 
	#I2C_XFER_LISTEN_IT
 (0x00000004U)

	)

292 
	#I2C_XFER_ERROR_IT
 (0x00000011U)

	)

293 
	#I2C_XFER_CPLT_IT
 (0x00000012U)

	)

294 
	#I2C_XFER_RELOAD_IT
 (0x00000012U)

	)

297 
	#I2C_NO_OPTION_FRAME
 (0xFFFF0000U)

	)

303 
	#I2C_GET_DMA_REMAIN_DATA
(
__HANDLE__
Ë((((__HANDLE__)->
Sèã
Ë=
HAL_I2C_STATE_BUSY_TX
Ë? \

	)

304 ((
	guöt32_t
)((
	g__HANDLE__
)->
	ghdm©x
->
	gIn°™˚
->
	gCNDTR
)) : \

305 ((
uöt32_t
)((
__HANDLE__
)->
hdm¨x
->
In°™˚
->
CNDTR
)))

314 
I2C_DMAMa°îTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

315 
I2C_DMAMa°îRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

316 
I2C_DMASœveTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

317 
I2C_DMASœveRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

318 
I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

319 
I2C_DMAAb‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

322 
I2C_ITAddrC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
);

323 
I2C_ITMa°îSequítülC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
);

324 
I2C_ITSœveSequítülC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
);

325 
I2C_ITMa°îC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
);

326 
I2C_ITSœveC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
);

327 
I2C_ITLi°íC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
);

328 
I2C_ITEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Eº‹Code
);

331 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

332 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

335 
HAL_SètusTy≥Def
 
I2C_Ma°î_ISR_IT
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
);

336 
HAL_SètusTy≥Def
 
I2C_Sœve_ISR_IT
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
);

337 
HAL_SètusTy≥Def
 
I2C_Ma°î_ISR_DMA
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
);

338 
HAL_SètusTy≥Def
 
I2C_Sœve_ISR_DMA
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
);

341 
HAL_SètusTy≥Def
 
I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
);

342 
HAL_SètusTy≥Def
 
I2C_WaôOnTXISFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

343 
HAL_SètusTy≥Def
 
I2C_WaôOnRXNEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

344 
HAL_SètusTy≥Def
 
I2C_WaôOnSTOPFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

345 
HAL_SètusTy≥Def
 
I2C_IsAcknowÀdgeFaûed
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

348 
HAL_SètusTy≥Def
 
I2C_E«bÀ_IRQ
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
I¡îru±Reque°
);

349 
HAL_SètusTy≥Def
 
I2C_DißbÀ_IRQ
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
I¡îru±Reque°
);

352 
I2C_Flush_TXDR
(
I2C_H™dÀTy≥Def
 *
hi2c
);

355 
I2C_Tøns„rC⁄fig
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 
Size
, 
uöt32_t
 
Mode
, uöt32_à
Reque°
);

404 
HAL_SètusTy≥Def
 
	$HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

407 i‡(
hi2c
 =
NULL
)

409  
HAL_ERROR
;

413 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

414 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
hi2c
->
Inô
.
OwnAddªss1
));

415 
	`as£π_∑øm
(
	`IS_I2C_ADDRESSING_MODE
(
hi2c
->
Inô
.
AddªssögMode
));

416 
	`as£π_∑øm
(
	`IS_I2C_DUAL_ADDRESS
(
hi2c
->
Inô
.
DuÆAddªssMode
));

417 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2
(
hi2c
->
Inô
.
OwnAddªss2
));

418 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2_MASK
(
hi2c
->
Inô
.
OwnAddªss2Masks
));

419 
	`as£π_∑øm
(
	`IS_I2C_GENERAL_CALL
(
hi2c
->
Inô
.
GíîÆCÆlMode
));

420 
	`as£π_∑øm
(
	`IS_I2C_NO_STRETCH
(
hi2c
->
Inô
.
NoSåëchMode
));

422 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_RESET
)

425 
hi2c
->
Lock
 = 
HAL_UNLOCKED
;

428 
	`HAL_I2C_M•Inô
(
hi2c
);

431 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

434 
	`__HAL_I2C_DISABLE
(
hi2c
);

438 
hi2c
->
In°™˚
->
TIMINGR
 = hi2c->
Inô
.
Timög
 & 
TIMING_CLEAR_MASK
;

442 
hi2c
->
In°™˚
->
OAR1
 &~
I2C_OAR1_OA1EN
;

445 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

447 
hi2c
->
In°™˚
->
OAR1
 = (
I2C_OAR1_OA1EN
 | hi2c->
Inô
.
OwnAddªss1
);

451 
hi2c
->
In°™˚
->
OAR1
 = (
I2C_OAR1_OA1EN
 | 
I2C_OAR1_OA1MODE
 | hi2c->
Inô
.
OwnAddªss1
);

456 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
)

458 
hi2c
->
In°™˚
->
CR2
 = (
I2C_CR2_ADD10
);

461 
hi2c
->
In°™˚
->
CR2
 |(
I2C_CR2_AUTOEND
 | 
I2C_CR2_NACK
);

465 
hi2c
->
In°™˚
->
OAR2
 &~
I2C_DUALADDRESS_ENABLE
;

468 
hi2c
->
In°™˚
->
OAR2
 = (hi2c->
Inô
.
DuÆAddªssMode
 | hi2c->Inô.
OwnAddªss2
 | (hi2c->Inô.
OwnAddªss2Masks
 << 8));

472 
hi2c
->
In°™˚
->
CR1
 = (hi2c->
Inô
.
GíîÆCÆlMode
 | hi2c->Inô.
NoSåëchMode
);

475 
	`__HAL_I2C_ENABLE
(
hi2c
);

477 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

478 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

479 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

480 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

482  
HAL_OK
;

483 
	}
}

491 
HAL_SètusTy≥Def
 
	$HAL_I2C_DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

494 i‡(
hi2c
 =
NULL
)

496  
HAL_ERROR
;

500 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

502 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

505 
	`__HAL_I2C_DISABLE
(
hi2c
);

508 
	`HAL_I2C_M•DeInô
(
hi2c
);

510 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

511 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_RESET
;

512 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

513 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

516 
	`__HAL_UNLOCK
(
hi2c
);

518  
HAL_OK
;

519 
	}
}

527 
__wók
 
	$HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

530 
	`UNUSED
(
hi2c
);

535 
	}
}

543 
__wók
 
	$HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

546 
	`UNUSED
(
hi2c
);

551 
	}
}

627 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

629 
uöt32_t
 
tick°¨t
 = 0U;

631 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

634 
	`__HAL_LOCK
(
hi2c
);

637 
tick°¨t
 = 
	`HAL_GëTick
();

639 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY
, 
tick°¨t
Ë!
HAL_OK
)

641  
HAL_TIMEOUT
;

644 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

645 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

646 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

649 
hi2c
->
pBuffPå
 = 
pD©a
;

650 
hi2c
->
X„rCou¡
 = 
Size
;

651 
hi2c
->
X„rISR
 = 
NULL
;

655 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

657 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

658 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_GENERATE_START_WRITE
);

662 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

663 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_GENERATE_START_WRITE
);

666 
hi2c
->
X„rCou¡
 > 0U)

669 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

671 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

673  
HAL_ERROR
;

677  
HAL_TIMEOUT
;

681 
hi2c
->
In°™˚
->
TXDR
 = (*hi2c->
pBuffPå
++);

682 
hi2c
->
X„rCou¡
--;

683 
hi2c
->
X„rSize
--;

685 i‡((
hi2c
->
X„rSize
 =0UË&& (hi2c->
X„rCou¡
 != 0U))

688 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TCR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

690  
HAL_TIMEOUT
;

693 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

695 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

696 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_NO_STARTSTOP
);

700 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

701 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_NO_STARTSTOP
);

708 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

710 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

712  
HAL_ERROR
;

716  
HAL_TIMEOUT
;

721 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

724 
	`I2C_RESET_CR2
(
hi2c
);

726 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

727 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

730 
	`__HAL_UNLOCK
(
hi2c
);

732  
HAL_OK
;

736  
HAL_BUSY
;

738 
	}
}

751 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

753 
uöt32_t
 
tick°¨t
 = 0U;

755 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

758 
	`__HAL_LOCK
(
hi2c
);

761 
tick°¨t
 = 
	`HAL_GëTick
();

763 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY
, 
tick°¨t
Ë!
HAL_OK
)

765  
HAL_TIMEOUT
;

768 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

769 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

770 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

773 
hi2c
->
pBuffPå
 = 
pD©a
;

774 
hi2c
->
X„rCou¡
 = 
Size
;

775 
hi2c
->
X„rISR
 = 
NULL
;

779 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

781 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

782 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_GENERATE_START_READ
);

786 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

787 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_GENERATE_START_READ
);

790 
hi2c
->
X„rCou¡
 > 0U)

793 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

795 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

797  
HAL_ERROR
;

801  
HAL_TIMEOUT
;

806 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

807 
hi2c
->
X„rSize
--;

808 
hi2c
->
X„rCou¡
--;

810 i‡((
hi2c
->
X„rSize
 =0UË&& (hi2c->
X„rCou¡
 != 0U))

813 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TCR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

815  
HAL_TIMEOUT
;

818 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

820 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

821 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_NO_STARTSTOP
);

825 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

826 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_NO_STARTSTOP
);

833 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

835 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

837  
HAL_ERROR
;

841  
HAL_TIMEOUT
;

846 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

849 
	`I2C_RESET_CR2
(
hi2c
);

851 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

852 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

855 
	`__HAL_UNLOCK
(
hi2c
);

857  
HAL_OK
;

861  
HAL_BUSY
;

863 
	}
}

874 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

876 
uöt32_t
 
tick°¨t
 = 0U;

878 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

880 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

882  
HAL_ERROR
;

885 
	`__HAL_LOCK
(
hi2c
);

888 
tick°¨t
 = 
	`HAL_GëTick
();

890 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

891 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

892 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

895 
hi2c
->
pBuffPå
 = 
pD©a
;

896 
hi2c
->
X„rCou¡
 = 
Size
;

897 
hi2c
->
X„rISR
 = 
NULL
;

900 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

903 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

906 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

907  
HAL_TIMEOUT
;

911 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

914 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
)

917 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

920 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

921  
HAL_TIMEOUT
;

925 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

929 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_DIR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

932 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

933  
HAL_TIMEOUT
;

936 
hi2c
->
X„rCou¡
 > 0U)

939 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

942 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

944 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

946  
HAL_ERROR
;

950  
HAL_TIMEOUT
;

955 
hi2c
->
In°™˚
->
TXDR
 = (*hi2c->
pBuffPå
++);

956 
hi2c
->
X„rCou¡
--;

960 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

963 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

965 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

969 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

973  
HAL_TIMEOUT
;

978 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

981 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

984 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

985  
HAL_TIMEOUT
;

989 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

991 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

992 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

995 
	`__HAL_UNLOCK
(
hi2c
);

997  
HAL_OK
;

1001  
HAL_BUSY
;

1003 
	}
}

1014 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1016 
uöt32_t
 
tick°¨t
 = 0U;

1018 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1020 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1022  
HAL_ERROR
;

1025 
	`__HAL_LOCK
(
hi2c
);

1028 
tick°¨t
 = 
	`HAL_GëTick
();

1030 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1031 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1032 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1035 
hi2c
->
pBuffPå
 = 
pD©a
;

1036 
hi2c
->
X„rCou¡
 = 
Size
;

1037 
hi2c
->
X„rISR
 = 
NULL
;

1040 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

1043 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1046 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

1047  
HAL_TIMEOUT
;

1051 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

1054 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_DIR
, 
SET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1057 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

1058  
HAL_TIMEOUT
;

1061 
hi2c
->
X„rCou¡
 > 0U)

1064 i‡(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1067 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

1070 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

1073 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

1074 
hi2c
->
X„rCou¡
--;

1077 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_TIMEOUT
)

1079  
HAL_TIMEOUT
;

1083  
HAL_ERROR
;

1088 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

1089 
hi2c
->
X„rCou¡
--;

1093 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1096 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

1098 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1100  
HAL_ERROR
;

1104  
HAL_TIMEOUT
;

1109 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

1112 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1115 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

1116  
HAL_TIMEOUT
;

1120 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

1122 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1123 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1126 
	`__HAL_UNLOCK
(
hi2c
);

1128  
HAL_OK
;

1132  
HAL_BUSY
;

1134 
	}
}

1146 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1148 
uöt32_t
 
x„rmode
 = 0U;

1150 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1152 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

1154  
HAL_BUSY
;

1158 
	`__HAL_LOCK
(
hi2c
);

1160 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1161 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1162 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1165 
hi2c
->
pBuffPå
 = 
pD©a
;

1166 
hi2c
->
X„rCou¡
 = 
Size
;

1167 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1168 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

1170 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1172 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1173 
x„rmode
 = 
I2C_RELOAD_MODE
;

1177 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1178 
x„rmode
 = 
I2C_AUTOEND_MODE
;

1183 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_GENERATE_START_WRITE
);

1186 
	`__HAL_UNLOCK
(
hi2c
);

1195 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

1197  
HAL_OK
;

1201  
HAL_BUSY
;

1203 
	}
}

1215 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1217 
uöt32_t
 
x„rmode
 = 0U;

1219 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1221 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

1223  
HAL_BUSY
;

1227 
	`__HAL_LOCK
(
hi2c
);

1229 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1230 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1231 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1234 
hi2c
->
pBuffPå
 = 
pD©a
;

1235 
hi2c
->
X„rCou¡
 = 
Size
;

1236 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1237 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

1239 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1241 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1242 
x„rmode
 = 
I2C_RELOAD_MODE
;

1246 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1247 
x„rmode
 = 
I2C_AUTOEND_MODE
;

1252 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_GENERATE_START_READ
);

1255 
	`__HAL_UNLOCK
(
hi2c
);

1264 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

1266  
HAL_OK
;

1270  
HAL_BUSY
;

1272 
	}
}

1282 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1284 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1287 
	`__HAL_LOCK
(
hi2c
);

1289 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1290 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1291 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1294 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

1297 
hi2c
->
pBuffPå
 = 
pD©a
;

1298 
hi2c
->
X„rCou¡
 = 
Size
;

1299 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1300 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1301 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_IT
;

1304 
	`__HAL_UNLOCK
(
hi2c
);

1313 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
 | 
I2C_XFER_LISTEN_IT
);

1315  
HAL_OK
;

1319  
HAL_BUSY
;

1321 
	}
}

1331 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1333 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1336 
	`__HAL_LOCK
(
hi2c
);

1338 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1339 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1340 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1343 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

1346 
hi2c
->
pBuffPå
 = 
pD©a
;

1347 
hi2c
->
X„rCou¡
 = 
Size
;

1348 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1349 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1350 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_IT
;

1353 
	`__HAL_UNLOCK
(
hi2c
);

1362 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
 | 
I2C_XFER_LISTEN_IT
);

1364  
HAL_OK
;

1368  
HAL_BUSY
;

1370 
	}
}

1382 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1384 
uöt32_t
 
x„rmode
 = 0U;

1386 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1388 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

1390  
HAL_BUSY
;

1394 
	`__HAL_LOCK
(
hi2c
);

1396 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1397 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1398 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1401 
hi2c
->
pBuffPå
 = 
pD©a
;

1402 
hi2c
->
X„rCou¡
 = 
Size
;

1403 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1404 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_DMA
;

1406 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1408 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1409 
x„rmode
 = 
I2C_RELOAD_MODE
;

1413 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1414 
x„rmode
 = 
I2C_AUTOEND_MODE
;

1417 i‡(
hi2c
->
X„rSize
 > 0U)

1420 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAMa°îTønsmôC∂t
;

1423 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1426 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

1427 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1430 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hi2c->
In°™˚
->
TXDR
, hi2c->
X„rSize
);

1434 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_GENERATE_START_WRITE
);

1437 
hi2c
->
X„rCou¡
 -hi2c->
X„rSize
;

1440 
	`__HAL_UNLOCK
(
hi2c
);

1446 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_ERROR_IT
);

1449 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_TXDMAEN
;

1454 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

1458 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_GENERATE_START_WRITE
);

1461 
	`__HAL_UNLOCK
(
hi2c
);

1469 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

1472  
HAL_OK
;

1476  
HAL_BUSY
;

1478 
	}
}

1490 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1492 
uöt32_t
 
x„rmode
 = 0U;

1494 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1496 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

1498  
HAL_BUSY
;

1502 
	`__HAL_LOCK
(
hi2c
);

1504 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1505 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1506 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1509 
hi2c
->
pBuffPå
 = 
pD©a
;

1510 
hi2c
->
X„rCou¡
 = 
Size
;

1511 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1512 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_DMA
;

1514 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1516 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1517 
x„rmode
 = 
I2C_RELOAD_MODE
;

1521 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1522 
x„rmode
 = 
I2C_AUTOEND_MODE
;

1525 i‡(
hi2c
->
X„rSize
 > 0U)

1528 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAMa°îRe˚iveC∂t
;

1531 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1534 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

1535 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1538 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
RXDR
, (uöt32_t)
pD©a
, hi2c->
X„rSize
);

1542 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_GENERATE_START_READ
);

1545 
hi2c
->
X„rCou¡
 -hi2c->
X„rSize
;

1548 
	`__HAL_UNLOCK
(
hi2c
);

1554 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_ERROR_IT
);

1557 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_RXDMAEN
;

1562 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

1566 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_GENERATE_START_READ
);

1569 
	`__HAL_UNLOCK
(
hi2c
);

1577 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

1579  
HAL_OK
;

1583  
HAL_BUSY
;

1585 
	}
}

1595 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1597 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1599 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1601  
HAL_ERROR
;

1604 
	`__HAL_LOCK
(
hi2c
);

1606 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1607 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1608 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1611 
hi2c
->
pBuffPå
 = 
pD©a
;

1612 
hi2c
->
X„rCou¡
 = 
Size
;

1613 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1614 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1615 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_DMA
;

1618 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMASœveTønsmôC∂t
;

1621 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1624 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

1625 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1628 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hi2c->
In°™˚
->
TXDR
, hi2c->
X„rSize
);

1631 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

1634 
	`__HAL_UNLOCK
(
hi2c
);

1640 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
);

1643 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_TXDMAEN
;

1645  
HAL_OK
;

1649  
HAL_BUSY
;

1651 
	}
}

1661 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1663 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1665 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1667  
HAL_ERROR
;

1670 
	`__HAL_LOCK
(
hi2c
);

1672 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1673 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1674 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1677 
hi2c
->
pBuffPå
 = 
pD©a
;

1678 
hi2c
->
X„rCou¡
 = 
Size
;

1679 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1680 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1681 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_DMA
;

1684 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMASœveRe˚iveC∂t
;

1687 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1690 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

1691 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1694 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
RXDR
, (uöt32_t)
pD©a
, hi2c->
X„rSize
);

1697 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

1700 
	`__HAL_UNLOCK
(
hi2c
);

1706 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
);

1709 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_RXDMAEN
;

1711  
HAL_OK
;

1715  
HAL_BUSY
;

1717 
	}
}

1731 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1733 
uöt32_t
 
tick°¨t
 = 0U;

1736 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

1738 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1740 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1742  
HAL_ERROR
;

1746 
	`__HAL_LOCK
(
hi2c
);

1749 
tick°¨t
 = 
	`HAL_GëTick
();

1751 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY
, 
tick°¨t
Ë!
HAL_OK
)

1753  
HAL_TIMEOUT
;

1756 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1757 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

1758 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1761 
hi2c
->
pBuffPå
 = 
pD©a
;

1762 
hi2c
->
X„rCou¡
 = 
Size
;

1763 
hi2c
->
X„rISR
 = 
NULL
;

1766 i‡(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1768 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1771 
	`__HAL_UNLOCK
(
hi2c
);

1772  
HAL_ERROR
;

1777 
	`__HAL_UNLOCK
(
hi2c
);

1778  
HAL_TIMEOUT
;

1783 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1785 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1786 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_NO_STARTSTOP
);

1790 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1791 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_NO_STARTSTOP
);

1797 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1799 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1801  
HAL_ERROR
;

1805  
HAL_TIMEOUT
;

1810 
hi2c
->
In°™˚
->
TXDR
 = (*hi2c->
pBuffPå
++);

1811 
hi2c
->
X„rCou¡
--;

1812 
hi2c
->
X„rSize
--;

1814 i‡((
hi2c
->
X„rSize
 =0UË&& (hi2c->
X„rCou¡
 != 0U))

1817 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TCR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1819  
HAL_TIMEOUT
;

1822 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1824 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1825 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_NO_STARTSTOP
);

1829 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1830 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_NO_STARTSTOP
);

1835 
hi2c
->
X„rCou¡
 > 0U);

1839 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1841 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1843  
HAL_ERROR
;

1847  
HAL_TIMEOUT
;

1852 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

1855 
	`I2C_RESET_CR2
(
hi2c
);

1857 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1858 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1861 
	`__HAL_UNLOCK
(
hi2c
);

1863  
HAL_OK
;

1867  
HAL_BUSY
;

1869 
	}
}

1884 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1886 
uöt32_t
 
tick°¨t
 = 0U;

1889 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

1891 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1893 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1895  
HAL_ERROR
;

1899 
	`__HAL_LOCK
(
hi2c
);

1902 
tick°¨t
 = 
	`HAL_GëTick
();

1904 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY
, 
tick°¨t
Ë!
HAL_OK
)

1906  
HAL_TIMEOUT
;

1909 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1910 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

1911 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1914 
hi2c
->
pBuffPå
 = 
pD©a
;

1915 
hi2c
->
X„rCou¡
 = 
Size
;

1916 
hi2c
->
X„rISR
 = 
NULL
;

1919 i‡(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1921 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1924 
	`__HAL_UNLOCK
(
hi2c
);

1925  
HAL_ERROR
;

1930 
	`__HAL_UNLOCK
(
hi2c
);

1931  
HAL_TIMEOUT
;

1937 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1939 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1940 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_GENERATE_START_READ
);

1944 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1945 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_GENERATE_START_READ
);

1951 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_RXNE
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1953  
HAL_TIMEOUT
;

1957 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

1958 
hi2c
->
X„rSize
--;

1959 
hi2c
->
X„rCou¡
--;

1961 i‡((
hi2c
->
X„rSize
 =0UË&& (hi2c->
X„rCou¡
 != 0U))

1964 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TCR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1966  
HAL_TIMEOUT
;

1969 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

1971 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

1972 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_NO_STARTSTOP
);

1976 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1977 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_NO_STARTSTOP
);

1981 
hi2c
->
X„rCou¡
 > 0U);

1985 i‡(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1987 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1989  
HAL_ERROR
;

1993  
HAL_TIMEOUT
;

1998 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

2001 
	`I2C_RESET_CR2
(
hi2c
);

2003 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2004 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2007 
	`__HAL_UNLOCK
(
hi2c
);

2009  
HAL_OK
;

2013  
HAL_BUSY
;

2015 
	}
}

2028 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2030 
uöt32_t
 
tick°¨t
 = 0U;

2031 
uöt32_t
 
x„rmode
 = 0U;

2034 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2036 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2038 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2040  
HAL_ERROR
;

2043 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

2045  
HAL_BUSY
;

2049 
	`__HAL_LOCK
(
hi2c
);

2052 
tick°¨t
 = 
	`HAL_GëTick
();

2054 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2055 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2056 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2059 
hi2c
->
pBuffPå
 = 
pD©a
;

2060 
hi2c
->
X„rCou¡
 = 
Size
;

2061 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2062 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

2064 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

2066 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

2067 
x„rmode
 = 
I2C_RELOAD_MODE
;

2071 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2072 
x„rmode
 = 
I2C_AUTOEND_MODE
;

2076 i‡(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2078 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2081 
	`__HAL_UNLOCK
(
hi2c
);

2082  
HAL_ERROR
;

2087 
	`__HAL_UNLOCK
(
hi2c
);

2088  
HAL_TIMEOUT
;

2093 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_NO_STARTSTOP
);

2096 
	`__HAL_UNLOCK
(
hi2c
);

2105 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

2107  
HAL_OK
;

2111  
HAL_BUSY
;

2113 
	}
}

2127 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2129 
uöt32_t
 
tick°¨t
 = 0U;

2130 
uöt32_t
 
x„rmode
 = 0U;

2133 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2135 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2137 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2139  
HAL_ERROR
;

2142 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

2144  
HAL_BUSY
;

2148 
	`__HAL_LOCK
(
hi2c
);

2151 
tick°¨t
 = 
	`HAL_GëTick
();

2153 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2154 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2155 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2158 
hi2c
->
pBuffPå
 = 
pD©a
;

2159 
hi2c
->
X„rCou¡
 = 
Size
;

2160 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2161 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

2163 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

2165 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

2166 
x„rmode
 = 
I2C_RELOAD_MODE
;

2170 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2171 
x„rmode
 = 
I2C_AUTOEND_MODE
;

2175 i‡(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2177 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2180 
	`__HAL_UNLOCK
(
hi2c
);

2181  
HAL_ERROR
;

2186 
	`__HAL_UNLOCK
(
hi2c
);

2187  
HAL_TIMEOUT
;

2192 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_GENERATE_START_READ
);

2195 
	`__HAL_UNLOCK
(
hi2c
);

2204 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

2206  
HAL_OK
;

2210  
HAL_BUSY
;

2212 
	}
}

2225 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2227 
uöt32_t
 
tick°¨t
 = 0U;

2228 
uöt32_t
 
x„rmode
 = 0U;

2231 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2233 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2235 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2237  
HAL_ERROR
;

2240 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

2242  
HAL_BUSY
;

2246 
	`__HAL_LOCK
(
hi2c
);

2249 
tick°¨t
 = 
	`HAL_GëTick
();

2251 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2252 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2253 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2256 
hi2c
->
pBuffPå
 = 
pD©a
;

2257 
hi2c
->
X„rCou¡
 = 
Size
;

2258 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2259 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_DMA
;

2261 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

2263 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

2264 
x„rmode
 = 
I2C_RELOAD_MODE
;

2268 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2269 
x„rmode
 = 
I2C_AUTOEND_MODE
;

2273 i‡(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2275 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2278 
	`__HAL_UNLOCK
(
hi2c
);

2279  
HAL_ERROR
;

2284 
	`__HAL_UNLOCK
(
hi2c
);

2285  
HAL_TIMEOUT
;

2290 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAMa°îTønsmôC∂t
;

2293 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2296 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2297 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2300 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hi2c->
In°™˚
->
TXDR
, hi2c->
X„rSize
);

2304 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_NO_STARTSTOP
);

2307 
hi2c
->
X„rCou¡
 -hi2c->
X„rSize
;

2310 
	`__HAL_UNLOCK
(
hi2c
);

2316 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_ERROR_IT
);

2319 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_TXDMAEN
;

2321  
HAL_OK
;

2325  
HAL_BUSY
;

2327 
	}
}

2341 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2343 
uöt32_t
 
tick°¨t
 = 0U;

2344 
uöt32_t
 
x„rmode
 = 0U;

2347 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2349 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2351 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2353  
HAL_ERROR
;

2356 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

2358  
HAL_BUSY
;

2362 
	`__HAL_LOCK
(
hi2c
);

2365 
tick°¨t
 = 
	`HAL_GëTick
();

2367 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2368 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2369 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2372 
hi2c
->
pBuffPå
 = 
pD©a
;

2373 
hi2c
->
X„rCou¡
 = 
Size
;

2374 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2375 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_DMA
;

2377 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

2379 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

2380 
x„rmode
 = 
I2C_RELOAD_MODE
;

2384 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2385 
x„rmode
 = 
I2C_AUTOEND_MODE
;

2389 i‡(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2391 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2394 
	`__HAL_UNLOCK
(
hi2c
);

2395  
HAL_ERROR
;

2400 
	`__HAL_UNLOCK
(
hi2c
);

2401  
HAL_TIMEOUT
;

2406 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAMa°îRe˚iveC∂t
;

2409 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2412 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2413 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2416 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
RXDR
, (uöt32_t)
pD©a
, hi2c->
X„rSize
);

2419 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_GENERATE_START_READ
);

2422 
hi2c
->
X„rCou¡
 -hi2c->
X„rSize
;

2425 
	`__HAL_UNLOCK
(
hi2c
);

2428 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_RXDMAEN
;

2434 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_ERROR_IT
);

2436  
HAL_OK
;

2440  
HAL_BUSY
;

2442 
	}
}

2455 
HAL_SètusTy≥Def
 
	$HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
)

2457 
uöt32_t
 
tick°¨t
 = 0U;

2459 
__IO
 
uöt32_t
 
I2C_Trüls
 = 0U;

2461 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2463 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë=
SET
)

2465  
HAL_BUSY
;

2469 
	`__HAL_LOCK
(
hi2c
);

2471 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

2472 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2477 
hi2c
->
In°™˚
->
CR2
 = 
	`I2C_GENERATE_START
(hi2c->
Inô
.
AddªssögMode
, 
DevAddªss
);

2481 
tick°¨t
 = 
	`HAL_GëTick
();

2482 (
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
RESET
Ë&& (__HAL_I2C_GET_FLAG(hi2c, 
I2C_FLAG_AF
Ë=RESETË&& (hi2c->
Sèã
 !
HAL_I2C_STATE_TIMEOUT
))

2484 i‡(
Timeout
 !
HAL_MAX_DELAY
)

2486 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

2489 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2491 
	`__HAL_UNLOCK
(
hi2c
);

2492  
HAL_TIMEOUT
;

2498 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
RESET
)

2501 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_STOPF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2503  
HAL_TIMEOUT
;

2507 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

2510 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2513 
	`__HAL_UNLOCK
(
hi2c
);

2515  
HAL_OK
;

2520 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_STOPF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2522  
HAL_TIMEOUT
;

2526 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2529 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

2533 i‡(
I2C_Trüls
++ =
Trüls
)

2536 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_STOP
;

2539 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_STOPF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2541  
HAL_TIMEOUT
;

2545 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

2548 
I2C_Trüls
 < 
Trüls
);

2550 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2553 
	`__HAL_UNLOCK
(
hi2c
);

2555  
HAL_TIMEOUT
;

2559  
HAL_BUSY
;

2561 
	}
}

2575 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Sequítül_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

2577 
uöt32_t
 
x„rmode
 = 0U;

2578 
uöt32_t
 
x„ºeque°
 = 
I2C_GENERATE_START_WRITE
;

2581 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

2583 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2586 
	`__HAL_LOCK
(
hi2c
);

2588 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2589 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2590 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2593 
hi2c
->
pBuffPå
 = 
pD©a
;

2594 
hi2c
->
X„rCou¡
 = 
Size
;

2595 
hi2c
->
X„rO±i⁄s
 = XferOptions;

2596 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

2599 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

2601 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

2602 
x„rmode
 = 
I2C_RELOAD_MODE
;

2606 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2607 
x„rmode
 = 
hi2c
->
X„rO±i⁄s
;

2612 i‡(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_TX
)

2614 
x„ºeque°
 = 
I2C_NO_STARTSTOP
;

2618 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
x„ºeque°
);

2621 
	`__HAL_UNLOCK
(
hi2c
);

2626 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

2628  
HAL_OK
;

2632  
HAL_BUSY
;

2634 
	}
}

2648 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Sequítül_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

2650 
uöt32_t
 
x„rmode
 = 0U;

2651 
uöt32_t
 
x„ºeque°
 = 
I2C_GENERATE_START_READ
;

2654 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

2656 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2659 
	`__HAL_LOCK
(
hi2c
);

2661 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2662 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2663 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2666 
hi2c
->
pBuffPå
 = 
pD©a
;

2667 
hi2c
->
X„rCou¡
 = 
Size
;

2668 
hi2c
->
X„rO±i⁄s
 = XferOptions;

2669 
hi2c
->
X„rISR
 = 
I2C_Ma°î_ISR_IT
;

2672 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

2674 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

2675 
x„rmode
 = 
I2C_RELOAD_MODE
;

2679 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2680 
x„rmode
 = 
hi2c
->
X„rO±i⁄s
;

2685 i‡(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_RX
)

2687 
x„ºeque°
 = 
I2C_NO_STARTSTOP
;

2691 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, hi2c->
X„rSize
, 
x„rmode
, 
x„ºeque°
);

2694 
	`__HAL_UNLOCK
(
hi2c
);

2699 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

2701  
HAL_OK
;

2705  
HAL_BUSY
;

2707 
	}
}

2719 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Sequítül_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

2722 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

2724 i‡((
hi2c
->
Sèã
 & 
HAL_I2C_STATE_LISTEN
) == HAL_I2C_STATE_LISTEN)

2726 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2728  
HAL_ERROR
;

2732 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
 | 
I2C_XFER_TX_IT
);

2735 
	`__HAL_LOCK
(
hi2c
);

2739 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
)

2742 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

2745 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX_LISTEN
;

2746 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2747 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2750 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

2753 
hi2c
->
pBuffPå
 = 
pD©a
;

2754 
hi2c
->
X„rCou¡
 = 
Size
;

2755 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2756 
hi2c
->
X„rO±i⁄s
 = XferOptions;

2757 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_IT
;

2759 i‡(
	`I2C_GET_DIR
(
hi2c
Ë=
I2C_DIRECTION_RECEIVE
)

2763 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

2767 
	`__HAL_UNLOCK
(
hi2c
);

2773 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
 | 
I2C_XFER_LISTEN_IT
);

2775  
HAL_OK
;

2779  
HAL_ERROR
;

2781 
	}
}

2793 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Sequítül_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

2796 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

2798 i‡((
hi2c
->
Sèã
 & 
HAL_I2C_STATE_LISTEN
) == HAL_I2C_STATE_LISTEN)

2800 i‡((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2802  
HAL_ERROR
;

2806 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
 | 
I2C_XFER_RX_IT
);

2809 
	`__HAL_LOCK
(
hi2c
);

2813 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
)

2816 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

2819 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX_LISTEN
;

2820 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2821 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2824 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_NACK
;

2827 
hi2c
->
pBuffPå
 = 
pD©a
;

2828 
hi2c
->
X„rCou¡
 = 
Size
;

2829 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2830 
hi2c
->
X„rO±i⁄s
 = XferOptions;

2831 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_IT
;

2833 i‡(
	`I2C_GET_DIR
(
hi2c
Ë=
I2C_DIRECTION_TRANSMIT
)

2837 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

2841 
	`__HAL_UNLOCK
(
hi2c
);

2847 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
 | 
I2C_XFER_LISTEN_IT
);

2849  
HAL_OK
;

2853  
HAL_ERROR
;

2855 
	}
}

2863 
HAL_SètusTy≥Def
 
	$HAL_I2C_E«bÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2865 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2867 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

2868 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_IT
;

2871 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
);

2873  
HAL_OK
;

2877  
HAL_BUSY
;

2879 
	}
}

2887 
HAL_SètusTy≥Def
 
	$HAL_I2C_DißbÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2890 
uöt32_t
 
tmp
;

2893 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

2895 
tmp
 = (
uöt32_t
)(
hi2c
->
Sèã
Ë& 
I2C_STATE_MSK
;

2896 
hi2c
->
PªviousSèã
 = 
tmp
 | (
uöt32_t
)(hi2c->
Mode
);

2897 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2898 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2899 
hi2c
->
X„rISR
 = 
NULL
;

2902 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
);

2904  
HAL_OK
;

2908  
HAL_BUSY
;

2910 
	}
}

2920 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Ab‹t_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
)

2922 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MASTER
)

2925 
	`__HAL_LOCK
(
hi2c
);

2928 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

2929 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

2932 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_ABORT
;

2936 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, 1, 
I2C_AUTOEND_MODE
, 
I2C_GENERATE_STOP
);

2939 
	`__HAL_UNLOCK
(
hi2c
);

2944 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_CPLT_IT
);

2946  
HAL_OK
;

2952  
HAL_ERROR
;

2954 
	}
}

2970 
	$HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2973 
uöt32_t
 
ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
ISR
);

2974 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
CR1
);

2977 i‡(
hi2c
->
X„rISR
 !
NULL
)

2979 
hi2c
->
	`X„rISR
(hi2c, 
ôÊags
, 
ôsour˚s
);

2981 
	}
}

2989 
	$HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2991 
uöt32_t
 
ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
ISR
);

2992 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
CR1
);

2995 i‡(((
ôÊags
 & 
I2C_FLAG_BERR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERRI
) != RESET))

2997 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_BERR
;

3000 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_BERR
);

3004 i‡(((
ôÊags
 & 
I2C_FLAG_OVR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERRI
) != RESET))

3006 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_OVR
;

3009 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_OVR
);

3013 i‡(((
ôÊags
 & 
I2C_FLAG_ARLO
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERRI
) != RESET))

3015 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_ARLO
;

3018 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ARLO
);

3022 i‡((
hi2c
->
Eº‹Code
 & (
HAL_I2C_ERROR_BERR
 | 
HAL_I2C_ERROR_OVR
 | 
HAL_I2C_ERROR_ARLO
)Ë!
HAL_I2C_ERROR_NONE
)

3024 
	`I2C_ITEº‹
(
hi2c
, hi2c->
Eº‹Code
);

3026 
	}
}

3034 
__wók
 
	$HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3037 
	`UNUSED
(
hi2c
);

3042 
	}
}

3050 
__wók
 
	$HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3053 
	`UNUSED
(
hi2c
);

3058 
	}
}

3065 
__wók
 
	$HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3068 
	`UNUSED
(
hi2c
);

3073 
	}
}

3081 
__wók
 
	$HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3084 
	`UNUSED
(
hi2c
);

3089 
	}
}

3099 
__wók
 
	$HAL_I2C_AddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 
Tøns„rDúe˘i⁄
, 
uöt16_t
 
AddrM©chCode
)

3102 
	`UNUSED
(
hi2c
);

3103 
	`UNUSED
(
Tøns„rDúe˘i⁄
);

3104 
	`UNUSED
(
AddrM©chCode
);

3109 
	}
}

3117 
__wók
 
	$HAL_I2C_Li°íC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3120 
	`UNUSED
(
hi2c
);

3125 
	}
}

3133 
__wók
 
	$HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3136 
	`UNUSED
(
hi2c
);

3141 
	}
}

3149 
__wók
 
	$HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3152 
	`UNUSED
(
hi2c
);

3157 
	}
}

3165 
__wók
 
	$HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3168 
	`UNUSED
(
hi2c
);

3173 
	}
}

3181 
__wók
 
	$HAL_I2C_Ab‹tC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3184 
	`UNUSED
(
hi2c
);

3189 
	}
}

3216 
HAL_I2C_SèãTy≥Def
 
	$HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3219  
hi2c
->
Sèã
;

3220 
	}
}

3228 
HAL_I2C_ModeTy≥Def
 
	$HAL_I2C_GëMode
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3230  
hi2c
->
Mode
;

3231 
	}
}

3239 
uöt32_t
 
	$HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3241  
hi2c
->
Eº‹Code
;

3242 
	}
}

3264 
HAL_SètusTy≥Def
 
	$I2C_Ma°î_ISR_IT
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
)

3266 
uöt16_t
 
devaddªss
 = 0U;

3269 
	`__HAL_LOCK
(
hi2c
);

3271 i‡(((
ITFœgs
 & 
I2C_FLAG_AF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_NACKI
) != RESET))

3274 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3279 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

3282 
	`I2C_Flush_TXDR
(
hi2c
);

3284 i‡(((
ITFœgs
 & 
I2C_FLAG_RXNE
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_RXI
) != RESET))

3287 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

3288 
hi2c
->
X„rSize
--;

3289 
hi2c
->
X„rCou¡
--;

3291 i‡(((
ITFœgs
 & 
I2C_FLAG_TXIS
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_TXI
) != RESET))

3294 
hi2c
->
In°™˚
->
TXDR
 = (*hi2c->
pBuffPå
++);

3295 
hi2c
->
X„rSize
--;

3296 
hi2c
->
X„rCou¡
--;

3298 i‡(((
ITFœgs
 & 
I2C_FLAG_TCR
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_TCI
) != RESET))

3300 i‡((
hi2c
->
X„rSize
 =0UË&& (hi2c->
X„rCou¡
 != 0U))

3302 
devaddªss
 = (
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_SADD
);

3304 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

3306 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

3307 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
devaddªss
, hi2c->
X„rSize
, 
I2C_RELOAD_MODE
, 
I2C_NO_STARTSTOP
);

3311 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3312 i‡(
hi2c
->
X„rO±i⁄s
 !
I2C_NO_OPTION_FRAME
)

3314 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
devaddªss
, hi2c->
X„rSize
, hi2c->
X„rO±i⁄s
, 
I2C_NO_STARTSTOP
);

3318 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
devaddªss
, hi2c->
X„rSize
, 
I2C_AUTOEND_MODE
, 
I2C_NO_STARTSTOP
);

3325 i‡(
	`I2C_GET_STOP_MODE
(
hi2c
Ë!
I2C_AUTOEND_MODE
)

3328 
	`I2C_ITMa°îSequítülC∂t
(
hi2c
);

3334 
	`I2C_ITEº‹
(
hi2c
, 
HAL_I2C_ERROR_SIZE
);

3338 i‡(((
ITFœgs
 & 
I2C_FLAG_TC
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_TCI
) != RESET))

3340 i‡(
hi2c
->
X„rCou¡
 == 0U)

3342 i‡(
	`I2C_GET_STOP_MODE
(
hi2c
Ë!
I2C_AUTOEND_MODE
)

3345 i‡(
hi2c
->
X„rO±i⁄s
 =
I2C_NO_OPTION_FRAME
)

3348 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_STOP
;

3353 
	`I2C_ITMa°îSequítülC∂t
(
hi2c
);

3361 
	`I2C_ITEº‹
(
hi2c
, 
HAL_I2C_ERROR_SIZE
);

3365 i‡(((
ITFœgs
 & 
I2C_FLAG_STOPF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_STOPI
) != RESET))

3368 
	`I2C_ITMa°îC∂t
(
hi2c
, 
ITFœgs
);

3372 
	`__HAL_UNLOCK
(
hi2c
);

3374  
HAL_OK
;

3375 
	}
}

3385 
HAL_SètusTy≥Def
 
	$I2C_Sœve_ISR_IT
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
)

3388 
	`__HAL_LOCK
(
hi2c
);

3390 i‡(((
ITFœgs
 & 
I2C_FLAG_AF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_NACKI
) != RESET))

3396 i‡(
hi2c
->
X„rCou¡
 == 0U)

3398 i‡(((
hi2c
->
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_LAST_FRAME
)) && \

3399 (
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
))

3402 
	`I2C_ITLi°íC∂t
(
hi2c
, 
ITFœgs
);

3404 i‡((
hi2c
->
X„rO±i⁄s
 !
I2C_NO_OPTION_FRAME
Ë&& (hi2c->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
))

3407 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3410 
	`I2C_Flush_TXDR
(
hi2c
);

3414 
	`I2C_ITSœveSequítülC∂t
(
hi2c
);

3419 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3426 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3429 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

3432 i‡(((
ITFœgs
 & 
I2C_FLAG_RXNE
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_RXI
) != RESET))

3434 i‡(
hi2c
->
X„rCou¡
 > 0U)

3437 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

3438 
hi2c
->
X„rSize
--;

3439 
hi2c
->
X„rCou¡
--;

3442 i‡((
hi2c
->
X„rCou¡
 == 0U) && \

3443 (
hi2c
->
X„rO±i⁄s
 !
I2C_NO_OPTION_FRAME
))

3446 
	`I2C_ITSœveSequítülC∂t
(
hi2c
);

3449 i‡(((
ITFœgs
 & 
I2C_FLAG_ADDR
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_ADDRI
) != RESET))

3451 
	`I2C_ITAddrC∂t
(
hi2c
, 
ITFœgs
);

3453 i‡(((
ITFœgs
 & 
I2C_FLAG_TXIS
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_TXI
) != RESET))

3459 i‡(
hi2c
->
X„rCou¡
 > 0U)

3462 
hi2c
->
In°™˚
->
TXDR
 = (*hi2c->
pBuffPå
++);

3463 
hi2c
->
X„rCou¡
--;

3464 
hi2c
->
X„rSize
--;

3468 i‡((
hi2c
->
X„rO±i⁄s
 =
I2C_NEXT_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_FIRST_FRAME
))

3472 
	`I2C_ITSœveSequítülC∂t
(
hi2c
);

3478 i‡(((
ITFœgs
 & 
I2C_FLAG_STOPF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_STOPI
) != RESET))

3481 
	`I2C_ITSœveC∂t
(
hi2c
, 
ITFœgs
);

3485 
	`__HAL_UNLOCK
(
hi2c
);

3487  
HAL_OK
;

3488 
	}
}

3498 
HAL_SètusTy≥Def
 
	$I2C_Ma°î_ISR_DMA
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
)

3500 
uöt16_t
 
devaddªss
 = 0U;

3501 
uöt32_t
 
x„rmode
 = 0U;

3504 
	`__HAL_LOCK
(
hi2c
);

3506 i‡(((
ITFœgs
 & 
I2C_FLAG_AF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_NACKI
) != RESET))

3509 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3512 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

3517 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_CPLT_IT
);

3520 
	`I2C_Flush_TXDR
(
hi2c
);

3522 i‡(((
ITFœgs
 & 
I2C_FLAG_TCR
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_TCI
) != RESET))

3525 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_TCI
);

3527 i‡(
hi2c
->
X„rCou¡
 != 0U)

3530 
devaddªss
 = (
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_SADD
);

3533 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

3535 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

3536 
x„rmode
 = 
I2C_RELOAD_MODE
;

3540 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3541 
x„rmode
 = 
I2C_AUTOEND_MODE
;

3545 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
devaddªss
, hi2c->
X„rSize
, 
x„rmode
, 
I2C_NO_STARTSTOP
);

3548 
hi2c
->
X„rCou¡
 -hi2c->
X„rSize
;

3551 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

3553 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_RXDMAEN
;

3557 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_TXDMAEN
;

3564 
	`I2C_ITEº‹
(
hi2c
, 
HAL_I2C_ERROR_SIZE
);

3567 i‡(((
ITFœgs
 & 
I2C_FLAG_STOPF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_STOPI
) != RESET))

3570 
	`I2C_ITMa°îC∂t
(
hi2c
, 
ITFœgs
);

3574 
	`__HAL_UNLOCK
(
hi2c
);

3576  
HAL_OK
;

3577 
	}
}

3587 
HAL_SètusTy≥Def
 
	$I2C_Sœve_ISR_DMA
(
__I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
, uöt32_à
ITSour˚s
)

3590 
	`__HAL_LOCK
(
hi2c
);

3592 i‡(((
ITFœgs
 & 
I2C_FLAG_AF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_NACKI
) != RESET))

3598 i‡(
	`I2C_GET_DMA_REMAIN_DATA
(
hi2c
) == 0U)

3601 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3607 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3610 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

3613 i‡(((
ITFœgs
 & 
I2C_FLAG_ADDR
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_ADDRI
) != RESET))

3616 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3618 i‡(((
ITFœgs
 & 
I2C_FLAG_STOPF
Ë!
RESET
Ë&& ((
ITSour˚s
 & 
I2C_IT_STOPI
) != RESET))

3621 
	`I2C_ITSœveC∂t
(
hi2c
, 
ITFœgs
);

3625 
	`__HAL_UNLOCK
(
hi2c
);

3627  
HAL_OK
;

3628 
	}
}

3642 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

3644 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, 
MemAddSize
, 
I2C_RELOAD_MODE
, 
I2C_GENERATE_START_WRITE
);

3647 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3649 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3651  
HAL_ERROR
;

3655  
HAL_TIMEOUT
;

3660 i‡(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

3663 
hi2c
->
In°™˚
->
TXDR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3669 
hi2c
->
In°™˚
->
TXDR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

3672 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3674 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3676  
HAL_ERROR
;

3680  
HAL_TIMEOUT
;

3685 
hi2c
->
In°™˚
->
TXDR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3689 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TCR
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3691  
HAL_TIMEOUT
;

3694  
HAL_OK
;

3695 
	}
}

3709 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

3711 
	`I2C_Tøns„rC⁄fig
(
hi2c
, 
DevAddªss
, 
MemAddSize
, 
I2C_SOFTEND_MODE
, 
I2C_GENERATE_START_WRITE
);

3714 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3716 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3718  
HAL_ERROR
;

3722  
HAL_TIMEOUT
;

3727 i‡(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

3730 
hi2c
->
In°™˚
->
TXDR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3736 
hi2c
->
In°™˚
->
TXDR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

3739 i‡(
	`I2C_WaôOnTXISFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3741 i‡(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3743  
HAL_ERROR
;

3747  
HAL_TIMEOUT
;

3752 
hi2c
->
In°™˚
->
TXDR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3756 i‡(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TC
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

3758  
HAL_TIMEOUT
;

3761  
HAL_OK
;

3762 
	}
}

3770 
	$I2C_ITAddrC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
)

3772 
uöt8_t
 
å™s„rdúe˘i⁄
 = 0U;

3773 
uöt16_t
 
¶avóddrcode
 = 0U;

3774 
uöt16_t
 
ow«dd1code
 = 0U;

3775 
uöt16_t
 
ow«dd2code
 = 0U;

3778 
	`UNUSED
(
ITFœgs
);

3781 i‡((
hi2c
->
Sèã
 & 
HAL_I2C_STATE_LISTEN
) == HAL_I2C_STATE_LISTEN)

3783 
å™s„rdúe˘i⁄
 = 
	`I2C_GET_DIR
(
hi2c
);

3784 
¶avóddrcode
 = 
	`I2C_GET_ADDR_MATCH
(
hi2c
);

3785 
ow«dd1code
 = 
	`I2C_GET_OWN_ADDRESS1
(
hi2c
);

3786 
ow«dd2code
 = 
	`I2C_GET_OWN_ADDRESS2
(
hi2c
);

3789 i‡(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
)

3791 i‡((
¶avóddrcode
 & 
SœveAddr_MSK
Ë=((
ow«dd1code
 >> 
SœveAddr_SHIFT
) & SlaveAddr_MSK))

3793 
¶avóddrcode
 = 
ow«dd1code
;

3794 
hi2c
->
AddrEvítCou¡
++;

3795 i‡(
hi2c
->
AddrEvítCou¡
 == 2U)

3798 
hi2c
->
AddrEvítCou¡
 = 0U;

3801 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3804 
	`__HAL_UNLOCK
(
hi2c
);

3807 
	`HAL_I2C_AddrCÆlback
(
hi2c
, 
å™s„rdúe˘i⁄
, 
¶avóddrcode
);

3812 
¶avóddrcode
 = 
ow«dd2code
;

3815 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
);

3818 
	`__HAL_UNLOCK
(
hi2c
);

3821 
	`HAL_I2C_AddrCÆlback
(
hi2c
, 
å™s„rdúe˘i⁄
, 
¶avóddrcode
);

3828 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
);

3831 
	`__HAL_UNLOCK
(
hi2c
);

3834 
	`HAL_I2C_AddrCÆlback
(
hi2c
, 
å™s„rdúe˘i⁄
, 
¶avóddrcode
);

3841 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

3844 
	`__HAL_UNLOCK
(
hi2c
);

3846 
	}
}

3853 
	$I2C_ITMa°îSequítülC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3856 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3860 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

3862 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3863 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_TX
;

3864 
hi2c
->
X„rISR
 = 
NULL
;

3867 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

3870 
	`__HAL_UNLOCK
(
hi2c
);

3873 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

3878 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3879 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_RX
;

3880 
hi2c
->
X„rISR
 = 
NULL
;

3883 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

3886 
	`__HAL_UNLOCK
(
hi2c
);

3889 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

3891 
	}
}

3898 
	$I2C_ITSœveSequítülC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3901 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3903 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
)

3906 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

3907 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_TX
;

3910 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
);

3913 
	`__HAL_UNLOCK
(
hi2c
);

3916 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

3919 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
)

3922 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

3923 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_RX
;

3926 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
);

3929 
	`__HAL_UNLOCK
(
hi2c
);

3932 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

3934 
	}
}

3942 
	$I2C_ITMa°îC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
)

3945 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

3948 
	`I2C_RESET_CR2
(
hi2c
);

3951 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3952 
hi2c
->
X„rISR
 = 
NULL
;

3953 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3955 i‡((
ITFœgs
 & 
I2C_FLAG_AF
Ë!
RESET
)

3958 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3961 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

3965 
	`I2C_Flush_TXDR
(
hi2c
);

3968 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_TX_IT
 | 
I2C_XFER_RX_IT
);

3971 i‡((
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
Ë|| (hi2c->
Sèã
 =
HAL_I2C_STATE_ABORT
))

3974 
	`I2C_ITEº‹
(
hi2c
, hi2c->
Eº‹Code
);

3977 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

3979 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3981 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

3983 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3986 
	`__HAL_UNLOCK
(
hi2c
);

3989 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

3993 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3996 
	`__HAL_UNLOCK
(
hi2c
);

3999 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

4003 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

4005 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4007 i‡(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

4009 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4012 
	`__HAL_UNLOCK
(
hi2c
);

4014 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

4018 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4021 
	`__HAL_UNLOCK
(
hi2c
);

4023 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

4026 
	}
}

4034 
	$I2C_ITSœveC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
)

4037 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

4040 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

4043 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
 | 
I2C_XFER_TX_IT
 | 
I2C_XFER_RX_IT
);

4046 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

4049 
	`I2C_RESET_CR2
(
hi2c
);

4052 
	`I2C_Flush_TXDR
(
hi2c
);

4055 i‡(((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_TXDMAEN
) == I2C_CR1_TXDMAEN) ||

4056 ((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_RXDMAEN
) == I2C_CR1_RXDMAEN))

4058 
hi2c
->
X„rCou¡
 = 
	`I2C_GET_DMA_REMAIN_DATA
(hi2c);

4062 i‡(
hi2c
->
X„rCou¡
 != 0U)

4065 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

4069 i‡(((
ITFœgs
 & 
I2C_FLAG_RXNE
Ë!
RESET
))

4072 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

4074 i‡((
hi2c
->
X„rSize
 > 0U))

4076 
hi2c
->
X„rSize
--;

4077 
hi2c
->
X„rCou¡
--;

4080 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

4084 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4085 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4086 
hi2c
->
X„rISR
 = 
NULL
;

4088 i‡(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

4091 
	`I2C_ITEº‹
(
hi2c
, hi2c->
Eº‹Code
);

4094 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

4097 
	`I2C_ITLi°íC∂t
(
hi2c
, 
ITFœgs
);

4100 i‡(
hi2c
->
X„rO±i⁄s
 !
I2C_NO_OPTION_FRAME
)

4102 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4103 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4106 
	`__HAL_UNLOCK
(
hi2c
);

4109 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

4112 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

4114 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4117 
	`__HAL_UNLOCK
(
hi2c
);

4120 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

4124 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4127 
	`__HAL_UNLOCK
(
hi2c
);

4130 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

4132 
	}
}

4140 
	$I2C_ITLi°íC∂t
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
ITFœgs
)

4143 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4144 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4145 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4146 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4147 
hi2c
->
X„rISR
 = 
NULL
;

4150 i‡(((
ITFœgs
 & 
I2C_FLAG_RXNE
Ë!
RESET
))

4153 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
RXDR
;

4155 i‡((
hi2c
->
X„rSize
 > 0U))

4157 
hi2c
->
X„rSize
--;

4158 
hi2c
->
X„rCou¡
--;

4161 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

4166 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
 | 
I2C_XFER_RX_IT
 | 
I2C_XFER_TX_IT
);

4169 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

4172 
	`__HAL_UNLOCK
(
hi2c
);

4175 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

4176 
	}
}

4184 
	$I2C_ITEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Eº‹Code
)

4187 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4188 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4189 
hi2c
->
X„rCou¡
 = 0U;

4192 
hi2c
->
Eº‹Code
 |= ErrorCode;

4195 i‡((
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
) ||

4196 (
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
) ||

4197 (
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
))

4200 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_RX_IT
 | 
I2C_XFER_TX_IT
);

4203 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4204 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4205 
hi2c
->
X„rISR
 = 
I2C_Sœve_ISR_IT
;

4210 
	`I2C_DißbÀ_IRQ
(
hi2c
, 
I2C_XFER_LISTEN_IT
 | 
I2C_XFER_RX_IT
 | 
I2C_XFER_TX_IT
);

4214 i‡(
hi2c
->
Sèã
 !
HAL_I2C_STATE_ABORT
)

4217 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4219 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4220 
hi2c
->
X„rISR
 = 
NULL
;

4224 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_TXDMAEN
) == I2C_CR1_TXDMAEN)

4226 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_TXDMAEN
;

4230 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4233 
	`__HAL_UNLOCK
(
hi2c
);

4236 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
Ë!
HAL_OK
)

4239 
hi2c
->
hdm©x
->
	`X„rAb‹tCÆlback
(hi2c->hdmatx);

4243 i‡((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_RXDMAEN
) == I2C_CR1_RXDMAEN)

4245 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_RXDMAEN
;

4249 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4252 
	`__HAL_UNLOCK
(
hi2c
);

4255 i‡(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
Ë!
HAL_OK
)

4258 
hi2c
->
hdm¨x
->
	`X„rAb‹tCÆlback
(hi2c->hdmarx);

4261 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_ABORT
)

4263 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4266 
	`__HAL_UNLOCK
(
hi2c
);

4269 
	`HAL_I2C_Ab‹tC∂tCÆlback
(
hi2c
);

4274 
	`__HAL_UNLOCK
(
hi2c
);

4277 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

4279 
	}
}

4286 
	$I2C_Flush_TXDR
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4290 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXIS
Ë!
RESET
)

4292 
hi2c
->
In°™˚
->
TXDR
 = 0x00U;

4296 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
Ë=
RESET
)

4298 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_TXE
);

4300 
	}
}

4307 
	$I2C_DMAMa°îTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4309 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

4312 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_TXDMAEN
;

4315 i‡(
hi2c
->
X„rCou¡
 == 0U)

4318 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_CPLT_IT
);

4324 
hi2c
->
pBuffPå
 +hi2c->
X„rSize
;

4327 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

4329 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

4333 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4337 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
TXDR
, hi2c->
X„rSize
);

4340 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RELOAD_IT
);

4342 
	}
}

4349 
	$I2C_DMASœveTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4352 
	`UNUSED
(
hdma
);

4357 
	}
}

4364 
	$I2C_DMAMa°îRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4366 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

4369 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_RXDMAEN
;

4372 i‡(
hi2c
->
X„rCou¡
 == 0U)

4375 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_CPLT_IT
);

4381 
hi2c
->
pBuffPå
 +hi2c->
X„rSize
;

4384 i‡(
hi2c
->
X„rCou¡
 > 
MAX_NBYTE_SIZE
)

4386 
hi2c
->
X„rSize
 = 
MAX_NBYTE_SIZE
;

4390 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

4394 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
RXDR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

4397 
	`I2C_E«bÀ_IRQ
(
hi2c
, 
I2C_XFER_RELOAD_IT
);

4399 
	}
}

4406 
	$I2C_DMASœveRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4409 
	`UNUSED
(
hdma
);

4414 
	}
}

4421 
	$I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

4423 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

4426 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

4429 
	`I2C_ITEº‹
(
hi2c
, 
HAL_I2C_ERROR_DMA
);

4430 
	}
}

4438 
	$I2C_DMAAb‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4440 
I2C_H™dÀTy≥Def
 *
hi2c
 = (I2C_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

4443 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_NACK
;

4446 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

4447 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

4450 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_ABORT
)

4452 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4455 
	`HAL_I2C_Ab‹tC∂tCÆlback
(
hi2c
);

4460 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

4462 
	}
}

4474 
HAL_SètusTy≥Def
 
	$I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
)

4476 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
Sètus
)

4479 i‡(
Timeout
 !
HAL_MAX_DELAY
)

4481 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
Tick°¨t
) > Timeout))

4483 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4484 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4487 
	`__HAL_UNLOCK
(
hi2c
);

4488  
HAL_TIMEOUT
;

4492  
HAL_OK
;

4493 
	}
}

4503 
HAL_SètusTy≥Def
 
	$I2C_WaôOnTXISFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4505 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXIS
Ë=
RESET
)

4508 i‡(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4510  
HAL_ERROR
;

4514 i‡(
Timeout
 !
HAL_MAX_DELAY
)

4516 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
Tick°¨t
) > Timeout))

4518 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

4519 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4520 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4523 
	`__HAL_UNLOCK
(
hi2c
);

4525  
HAL_TIMEOUT
;

4529  
HAL_OK
;

4530 
	}
}

4540 
HAL_SètusTy≥Def
 
	$I2C_WaôOnSTOPFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4542 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
RESET
)

4545 i‡(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4547  
HAL_ERROR
;

4551 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
Tick°¨t
) > Timeout))

4553 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

4554 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4555 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4558 
	`__HAL_UNLOCK
(
hi2c
);

4560  
HAL_TIMEOUT
;

4563  
HAL_OK
;

4564 
	}
}

4574 
HAL_SètusTy≥Def
 
	$I2C_WaôOnRXNEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4576 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
RESET
)

4579 i‡(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4581  
HAL_ERROR
;

4585 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
SET
)

4588 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

4591 
	`I2C_RESET_CR2
(
hi2c
);

4593 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4594 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4595 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4598 
	`__HAL_UNLOCK
(
hi2c
);

4600  
HAL_ERROR
;

4604 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
Tick°¨t
) > Timeout))

4606 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

4607 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4610 
	`__HAL_UNLOCK
(
hi2c
);

4612  
HAL_TIMEOUT
;

4615  
HAL_OK
;

4616 
	}
}

4626 
HAL_SètusTy≥Def
 
	$I2C_IsAcknowÀdgeFaûed
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4628 i‡(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
SET
)

4632 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
RESET
)

4635 i‡(
Timeout
 !
HAL_MAX_DELAY
)

4637 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
Tick°¨t
) > Timeout))

4639 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4640 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4643 
	`__HAL_UNLOCK
(
hi2c
);

4644  
HAL_TIMEOUT
;

4650 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

4653 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

4656 
	`I2C_Flush_TXDR
(
hi2c
);

4659 
	`I2C_RESET_CR2
(
hi2c
);

4661 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_AF
;

4662 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4663 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4666 
	`__HAL_UNLOCK
(
hi2c
);

4668  
HAL_ERROR
;

4670  
HAL_OK
;

4671 
	}
}

4692 
	$I2C_Tøns„rC⁄fig
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 
Size
, 
uöt32_t
 
Mode
, uöt32_à
Reque°
)

4695 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

4696 
	`as£π_∑øm
(
	`IS_TRANSFER_MODE
(
Mode
));

4697 
	`as£π_∑øm
(
	`IS_TRANSFER_REQUEST
(
Reque°
));

4700 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CR2
, ((
I2C_CR2_SADD
 | 
I2C_CR2_NBYTES
 | 
I2C_CR2_RELOAD
 | 
I2C_CR2_AUTOEND
 | (
I2C_CR2_RD_WRN
 & (
uöt32_t
)(
Reque°
 >> (31U - 
I2C_CR2_RD_WRN_Pos
))Ë| 
I2C_CR2_START
 | 
I2C_CR2_STOP
)), \

4701 (
uöt32_t
)(((uöt32_t)
DevAddªss
 & 
I2C_CR2_SADD
Ë| (((uöt32_t)
Size
 << 
I2C_CR2_NBYTES_Pos
Ë& 
I2C_CR2_NBYTES
Ë| (uöt32_t)
Mode
 | (uöt32_t)
Reque°
));

4702 
	}
}

4711 
HAL_SètusTy≥Def
 
	$I2C_E«bÀ_IRQ
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
I¡îru±Reque°
)

4713 
uöt32_t
 
tmpi§
 = 0U;

4715 i‡((
hi2c
->
X„rISR
 =
I2C_Ma°î_ISR_DMA
) || \

4716 (
hi2c
->
X„rISR
 =
I2C_Sœve_ISR_DMA
))

4718 i‡((
I¡îru±Reque°
 & 
I2C_XFER_LISTEN_IT
) == I2C_XFER_LISTEN_IT)

4721 
tmpi§
 |
I2C_IT_ADDRI
 | 
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_ERRI
;

4724 i‡((
I¡îru±Reque°
 & 
I2C_XFER_ERROR_IT
) == I2C_XFER_ERROR_IT)

4727 
tmpi§
 |
I2C_IT_ERRI
 | 
I2C_IT_NACKI
;

4730 i‡((
I¡îru±Reque°
 & 
I2C_XFER_CPLT_IT
) == I2C_XFER_CPLT_IT)

4733 
tmpi§
 |
I2C_IT_STOPI
;

4736 i‡((
I¡îru±Reque°
 & 
I2C_XFER_RELOAD_IT
) == I2C_XFER_RELOAD_IT)

4739 
tmpi§
 |
I2C_IT_TCI
;

4744 i‡((
I¡îru±Reque°
 & 
I2C_XFER_LISTEN_IT
) == I2C_XFER_LISTEN_IT)

4747 
tmpi§
 |
I2C_IT_ADDRI
 | 
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_ERRI
;

4750 i‡((
I¡îru±Reque°
 & 
I2C_XFER_TX_IT
) == I2C_XFER_TX_IT)

4753 
tmpi§
 |
I2C_IT_ERRI
 | 
I2C_IT_TCI
 | 
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_TXI
;

4756 i‡((
I¡îru±Reque°
 & 
I2C_XFER_RX_IT
) == I2C_XFER_RX_IT)

4759 
tmpi§
 |
I2C_IT_ERRI
 | 
I2C_IT_TCI
 | 
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_RXI
;

4762 i‡((
I¡îru±Reque°
 & 
I2C_XFER_CPLT_IT
) == I2C_XFER_CPLT_IT)

4765 
tmpi§
 |
I2C_IT_STOPI
;

4772 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
tmpi§
);

4774  
HAL_OK
;

4775 
	}
}

4784 
HAL_SètusTy≥Def
 
	$I2C_DißbÀ_IRQ
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
I¡îru±Reque°
)

4786 
uöt32_t
 
tmpi§
 = 0U;

4788 i‡((
I¡îru±Reque°
 & 
I2C_XFER_TX_IT
) == I2C_XFER_TX_IT)

4791 
tmpi§
 |
I2C_IT_TCI
 | 
I2C_IT_TXI
;

4793 i‡((
hi2c
->
Sèã
 & 
HAL_I2C_STATE_LISTEN
) != HAL_I2C_STATE_LISTEN)

4796 
tmpi§
 |
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_ERRI
;

4800 i‡((
I¡îru±Reque°
 & 
I2C_XFER_RX_IT
) == I2C_XFER_RX_IT)

4803 
tmpi§
 |
I2C_IT_TCI
 | 
I2C_IT_RXI
;

4805 i‡((
hi2c
->
Sèã
 & 
HAL_I2C_STATE_LISTEN
) != HAL_I2C_STATE_LISTEN)

4808 
tmpi§
 |
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_ERRI
;

4812 i‡((
I¡îru±Reque°
 & 
I2C_XFER_LISTEN_IT
) == I2C_XFER_LISTEN_IT)

4815 
tmpi§
 |
I2C_IT_ADDRI
 | 
I2C_IT_STOPI
 | 
I2C_IT_NACKI
 | 
I2C_IT_ERRI
;

4818 i‡((
I¡îru±Reque°
 & 
I2C_XFER_ERROR_IT
) == I2C_XFER_ERROR_IT)

4821 
tmpi§
 |
I2C_IT_ERRI
 | 
I2C_IT_NACKI
;

4824 i‡((
I¡îru±Reque°
 & 
I2C_XFER_CPLT_IT
) == I2C_XFER_CPLT_IT)

4827 
tmpi§
 |
I2C_IT_STOPI
;

4830 i‡((
I¡îru±Reque°
 & 
I2C_XFER_RELOAD_IT
) == I2C_XFER_RELOAD_IT)

4833 
tmpi§
 |
I2C_IT_TCI
;

4839 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
tmpi§
);

4841  
HAL_OK
;

4842 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_i2c_ex.c

66 
	~"°m32l0xx_hÆ.h
"

77 #ifde‡
HAL_I2C_MODULE_ENABLED


113 
HAL_SètusTy≥Def
 
	$HAL_I2CEx_C⁄figA«logFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
A«logFûãr
)

116 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

117 
	`as£π_∑øm
(
	`IS_I2C_ANALOG_FILTER
(
A«logFûãr
));

119 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

122 
	`__HAL_LOCK
(
hi2c
);

124 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

127 
	`__HAL_I2C_DISABLE
(
hi2c
);

130 
hi2c
->
In°™˚
->
CR1
 &~(
I2C_CR1_ANFOFF
);

133 
hi2c
->
In°™˚
->
CR1
 |
A«logFûãr
;

135 
	`__HAL_I2C_ENABLE
(
hi2c
);

137 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

140 
	`__HAL_UNLOCK
(
hi2c
);

142  
HAL_OK
;

146  
HAL_BUSY
;

148 
	}
}

157 
HAL_SètusTy≥Def
 
	$HAL_I2CEx_C⁄figDigôÆFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
DigôÆFûãr
)

159 
uöt32_t
 
tm¥eg
 = 0U;

162 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

163 
	`as£π_∑øm
(
	`IS_I2C_DIGITAL_FILTER
(
DigôÆFûãr
));

165 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

168 
	`__HAL_LOCK
(
hi2c
);

170 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

173 
	`__HAL_I2C_DISABLE
(
hi2c
);

176 
tm¥eg
 = 
hi2c
->
In°™˚
->
CR1
;

179 
tm¥eg
 &~(
I2C_CR1_DNF
);

182 
tm¥eg
 |
DigôÆFûãr
 << 8U;

185 
hi2c
->
In°™˚
->
CR1
 = 
tm¥eg
;

187 
	`__HAL_I2C_ENABLE
(
hi2c
);

189 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

192 
	`__HAL_UNLOCK
(
hi2c
);

194  
HAL_OK
;

198  
HAL_BUSY
;

200 
	}
}

208 
HAL_SètusTy≥Def
 
	$HAL_I2CEx_E«bÀWakeUp
(
I2C_H™dÀTy≥Def
 *
hi2c
)

211 
	`as£π_∑øm
(
	`IS_I2C_WAKEUP_FROMSTOP_INSTANCE
(
hi2c
->
In°™˚
));

213 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

216 
	`__HAL_LOCK
(
hi2c
);

218 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

221 
	`__HAL_I2C_DISABLE
(
hi2c
);

224 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_WUPEN
;

226 
	`__HAL_I2C_ENABLE
(
hi2c
);

228 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

231 
	`__HAL_UNLOCK
(
hi2c
);

233  
HAL_OK
;

237  
HAL_BUSY
;

239 
	}
}

247 
HAL_SètusTy≥Def
 
	$HAL_I2CEx_DißbÀWakeUp
(
I2C_H™dÀTy≥Def
 *
hi2c
)

250 
	`as£π_∑øm
(
	`IS_I2C_WAKEUP_FROMSTOP_INSTANCE
(
hi2c
->
In°™˚
));

252 i‡(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

255 
	`__HAL_LOCK
(
hi2c
);

257 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

260 
	`__HAL_I2C_DISABLE
(
hi2c
);

263 
hi2c
->
In°™˚
->
CR1
 &~(
I2C_CR1_WUPEN
);

265 
	`__HAL_I2C_ENABLE
(
hi2c
);

267 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

270 
	`__HAL_UNLOCK
(
hi2c
);

272  
HAL_OK
;

276  
HAL_BUSY
;

278 
	}
}

295 
	$HAL_I2CEx_E«bÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
)

298 
	`as£π_∑øm
(
	`IS_I2C_FASTMODEPLUS
(
C⁄figFa°ModePlus
));

301 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

304 
	`SET_BIT
(
SYSCFG
->
CFGR2
, (
uöt32_t
)
C⁄figFa°ModePlus
);

305 
	}
}

322 
	$HAL_I2CEx_DißbÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
)

325 
	`as£π_∑øm
(
	`IS_I2C_FASTMODEPLUS
(
C⁄figFa°ModePlus
));

328 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

331 
	`CLEAR_BIT
(
SYSCFG
->
CFGR2
, (
uöt32_t
)
C⁄figFa°ModePlus
);

332 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_i2s.c

136 #i‡!
deföed
(
STM32L011xx
Ë&& !deföed(
STM32L021xx
Ë&& !deföed(
STM32L031xx
Ë&& !deföed(
STM32L041xx
)

138 
	~"°m32l0xx_hÆ.h
"

144 #ifde‡
HAL_I2S_MODULE_ENABLED


161 
I2S_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

162 
I2S_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

163 
I2S_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

164 
I2S_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

165 
I2S_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

166 
I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
);

167 
I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
);

168 
HAL_SètusTy≥Def
 
I2S_WaôFœgSèãU¡ûTimeout
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt32_t
 
Fœg
, uöt32_à
Sètus
, uöt32_à
Timeout
);

213 
HAL_SètusTy≥Def
 
	$HAL_I2S_Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

215 
uöt32_t
 
i2sdiv
 = 2U, 
i2sodd
 = 0U, 
∑ckëÀngth
 = 1U;

216 
uöt32_t
 
tmp
 = 0U, 
i2s˛k
 = 0U, 
tm¥eg
 = 0U;

219 if(
hi2s
 =
NULL
)

221  
HAL_ERROR
;

225 
	`as£π_∑øm
(
	`IS_I2S_ALL_INSTANCE
(
hi2s
->
In°™˚
));

226 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
hi2s
->
Inô
.
Mode
));

227 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
hi2s
->
Inô
.
Sènd¨d
));

228 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
hi2s
->
Inô
.
D©aF‹m©
));

229 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
hi2s
->
Inô
.
MCLKOuçut
));

230 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
hi2s
->
Inô
.
AudioFªq
));

231 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
hi2s
->
Inô
.
CPOL
));

233 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_RESET
)

236 
hi2s
->
Lock
 = 
HAL_UNLOCKED
;

239 
	`HAL_I2S_M•Inô
(
hi2s
);

242 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY
;

245 if(
hi2s
->
Inô
.
AudioFªq
 =
I2S_AUDIOFREQ_DEFAULT
)

247 
i2sodd
 = (
uöt32_t
)0U;

248 
i2sdiv
 = (
uöt32_t
)2U;

254 if(
hi2s
->
Inô
.
D©aF‹m©
 =
I2S_DATAFORMAT_16B
)

257 
∑ckëÀngth
 = 1U;

262 
∑ckëÀngth
 = 2U;

266 
i2s˛k
 = 
	`HAL_RCC_GëSysClockFªq
();

269 if(
hi2s
->
Inô
.
MCLKOuçut
 =
I2S_MCLKOUTPUT_ENABLE
)

272 
tmp
 = (
uöt32_t
)(((((
i2s˛k
 / 256UË* 10UË/ 
hi2s
->
Inô
.
AudioFªq
)) + 5U);

277 
tmp
 = (
uöt32_t
)(((((
i2s˛k
 / (32U * 
∑ckëÀngth
)Ë*10U ) / 
hi2s
->
Inô
.
AudioFªq
)) + 5U);

281 
tmp
 =Åmp / 10U;

284 
i2sodd
 = (
uöt32_t
)(
tmp
 & (uint32_t)1U);

287 
i2sdiv
 = (
uöt32_t
)((
tmp
 - 
i2sodd
) / 2U);

290 
i2sodd
 = (
uöt32_t
) (i2sodd << 8U);

294 if((
i2sdiv
 < 2U) || (i2sdiv > 0xFFU))

297 
i2sdiv
 = 2U;

298 
i2sodd
 = 0U;

304 
hi2s
->
In°™˚
->
I2SPR
 = (
uöt32_t
)((uöt32_t)
i2sdiv
 | (uöt32_t)(
i2sodd
 | (uöt32_t)hi2s->
Inô
.
MCLKOuçut
));

308 
	`MODIFY_REG
–
hi2s
->
In°™˚
->
I2SCFGR
, (
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 |\

309 
SPI_I2SCFGR_CKPOL
 | 
SPI_I2SCFGR_I2SSTD
 |\

310 
SPI_I2SCFGR_PCMSYNC
 | 
SPI_I2SCFGR_I2SCFG
 |\

311 
SPI_I2SCFGR_I2SE
 | 
SPI_I2SCFGR_I2SMOD
),\

312 (
SPI_I2SCFGR_I2SMOD
 | 
hi2s
->
Inô
.
Mode
 |\

313 
hi2s
->
Inô
.
Sènd¨d
 | hi2s->Inô.
D©aF‹m©
 |\

314 
hi2s
->
Inô
.
CPOL
));

317 
tm¥eg
 = 
hi2s
->
In°™˚
->
I2SCFGR
;

319 #i‡
	`deföed
(
SPI_I2SCFGR_ASTRTEN
)

320 i‡(
hi2s
->
Inô
.
Sènd¨d
 =
I2S_STANDARD_PCM_SHORT
)

323 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
 | 
SPI_I2SCFGR_ASTRTEN
;

328 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
;

332 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
;

335 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

336 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

338  
HAL_OK
;

339 
	}
}

347 
HAL_SètusTy≥Def
 
	$HAL_I2S_DeInô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

350 if(
hi2s
 =
NULL
)

352  
HAL_ERROR
;

355 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY
;

358 
	`__HAL_I2S_DISABLE
(
hi2s
);

361 
	`HAL_I2S_M•DeInô
(
hi2s
);

363 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

364 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_RESET
;

367 
	`__HAL_UNLOCK
(
hi2s
);

369  
HAL_OK
;

370 
	}
}

378 
__wók
 
	$HAL_I2S_M•Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

381 
	`UNUSED
(
hi2s
);

386 
	}
}

394 
__wók
 
	$HAL_I2S_M•DeInô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

397 
	`UNUSED
(
hi2s
);

402 
	}
}

466 
HAL_SètusTy≥Def
 
	$HAL_I2S_Tønsmô
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

468 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

470  
HAL_ERROR
;

474 
	`__HAL_LOCK
(
hi2s
);

476 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

478 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_24B
)||\

479 ((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_32B
))

481 
hi2s
->
TxX„rSize
 = (
Size
 << 1U);

482 
hi2s
->
TxX„rCou¡
 = (
Size
 << 1U);

486 
hi2s
->
TxX„rSize
 = 
Size
;

487 
hi2s
->
TxX„rCou¡
 = 
Size
;

491 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

492 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX
;

493 
hi2s
->
pTxBuffPå
 = 
pD©a
;

496 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

499 
	`__HAL_I2S_ENABLE
(
hi2s
);

502 
hi2s
->
TxX„rCou¡
 > 0U)

505 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

507  
HAL_TIMEOUT
;

509 
hi2s
->
In°™˚
->
DR
 = (*hi2s->
pTxBuffPå
++);

510 
hi2s
->
TxX„rCou¡
--;

514 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

516  
HAL_TIMEOUT
;

520 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_SLAVE_TX
Ë|| ((hi2s->In°™˚->I2SCFGR & SPI_I2SCFGR_I2SCFGË=
I2S_MODE_SLAVE_RX
))

523 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_BSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

525  
HAL_TIMEOUT
;

528 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

531 
	`__HAL_UNLOCK
(
hi2s
);

533  
HAL_OK
;

538 
	`__HAL_UNLOCK
(
hi2s
);

539  
HAL_BUSY
;

541 
	}
}

561 
HAL_SètusTy≥Def
 
	$HAL_I2S_Re˚ive
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

563 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

565  
HAL_ERROR
;

569 
	`__HAL_LOCK
(
hi2s
);

571 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

573 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_24B
)||\

574 ((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_32B
))

576 
hi2s
->
RxX„rSize
 = (
Size
 << 1U);

577 
hi2s
->
RxX„rCou¡
 = (
Size
 << 1U);

581 
hi2s
->
RxX„rSize
 = 
Size
;

582 
hi2s
->
RxX„rCou¡
 = 
Size
;

586 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

587 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_RX
;

588 
hi2s
->
pRxBuffPå
 = 
pD©a
;

591 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

594 
	`__HAL_I2S_ENABLE
(
hi2s
);

598 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

602 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

606 
hi2s
->
RxX„rCou¡
 > 0U)

609 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

611  
HAL_TIMEOUT
;

614 (*
hi2s
->
pRxBuffPå
++Ëhi2s->
In°™˚
->
DR
;

615 
hi2s
->
RxX„rCou¡
--;

618 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

621 
	`__HAL_UNLOCK
(
hi2s
);

623  
HAL_OK
;

628 
	`__HAL_UNLOCK
(
hi2s
);

629  
HAL_BUSY
;

631 
	}
}

648 
HAL_SètusTy≥Def
 
	$HAL_I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

650 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

652  
HAL_ERROR
;

656 
	`__HAL_LOCK
(
hi2s
);

658 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

660 
hi2s
->
pTxBuffPå
 = 
pD©a
;

661 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX
;

662 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

664 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_24B
)||\

665 ((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_32B
))

667 
hi2s
->
TxX„rSize
 = (
Size
 << 1U);

668 
hi2s
->
TxX„rCou¡
 = (
Size
 << 1U);

672 
hi2s
->
TxX„rSize
 = 
Size
;

673 
hi2s
->
TxX„rCou¡
 = 
Size
;

677 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

680 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

683 
	`__HAL_I2S_ENABLE
(
hi2s
);

687 
	`__HAL_UNLOCK
(
hi2s
);

689  
HAL_OK
;

694 
	`__HAL_UNLOCK
(
hi2s
);

695  
HAL_BUSY
;

697 
	}
}

716 
HAL_SètusTy≥Def
 
	$HAL_I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

718 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

720  
HAL_ERROR
;

724 
	`__HAL_LOCK
(
hi2s
);

726 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

728 
hi2s
->
pRxBuffPå
 = 
pD©a
;

729 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_RX
;

730 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

732 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_24B
)||\

733 ((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_32B
))

735 
hi2s
->
RxX„rSize
 = (
Size
 << 1U);

736 
hi2s
->
RxX„rCou¡
 = (
Size
 << 1U);

740 
hi2s
->
RxX„rSize
 = 
Size
;

741 
hi2s
->
RxX„rCou¡
 = 
Size
;

745 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

748 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

751 
	`__HAL_I2S_ENABLE
(
hi2s
);

755 
	`__HAL_UNLOCK
(
hi2s
);

757  
HAL_OK
;

762 
	`__HAL_UNLOCK
(
hi2s
);

763  
HAL_BUSY
;

765 
	}
}

781 
HAL_SètusTy≥Def
 
	$HAL_I2S_Tønsmô_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

783 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

785  
HAL_ERROR
;

789 
	`__HAL_LOCK
(
hi2s
);

791 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

793 
hi2s
->
pTxBuffPå
 = 
pD©a
;

794 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX
;

795 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

797 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_24B
)||\

798 ((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_32B
))

800 
hi2s
->
TxX„rSize
 = (
Size
 << 1U);

801 
hi2s
->
TxX„rCou¡
 = (
Size
 << 1U);

805 
hi2s
->
TxX„rSize
 = 
Size
;

806 
hi2s
->
TxX„rCou¡
 = 
Size
;

810 
hi2s
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
I2S_DMATxHÆfC∂t
;

813 
hi2s
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2S_DMATxC∂t
;

816 
hi2s
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2S_DMAEº‹
;

819 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm©x
, (
uöt32_t
)hi2s->
pTxBuffPå
, (uöt32_t)&hi2s->
In°™˚
->
DR
, hi2s->
TxX„rSize
);

822 if(
	`HAL_IS_BIT_CLR
(
hi2s
->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

825 
	`__HAL_I2S_ENABLE
(
hi2s
);

829 if(
	`HAL_IS_BIT_CLR
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
))

832 
	`SET_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

836 
	`__HAL_UNLOCK
(
hi2s
);

838  
HAL_OK
;

843 
	`__HAL_UNLOCK
(
hi2s
);

844  
HAL_BUSY
;

846 
	}
}

862 
HAL_SètusTy≥Def
 
	$HAL_I2S_Re˚ive_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

864 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

866  
HAL_ERROR
;

870 
	`__HAL_LOCK
(
hi2s
);

872 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

874 
hi2s
->
pRxBuffPå
 = 
pD©a
;

875 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_RX
;

876 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

878 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_24B
)||\

879 ((
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
)Ë=
I2S_DATAFORMAT_32B
))

881 
hi2s
->
RxX„rSize
 = (
Size
 << 1U);

882 
hi2s
->
RxX„rCou¡
 = (
Size
 << 1U);

886 
hi2s
->
RxX„rSize
 = 
Size
;

887 
hi2s
->
RxX„rCou¡
 = 
Size
;

892 
hi2s
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
I2S_DMARxHÆfC∂t
;

895 
hi2s
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2S_DMARxC∂t
;

898 
hi2s
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2S_DMAEº‹
;

901 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

905 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

909 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm¨x
, (
uöt32_t
)&hi2s->
In°™˚
->
DR
, (uöt32_t)hi2s->
pRxBuffPå
, hi2s->
RxX„rSize
);

912 if(
	`HAL_IS_BIT_CLR
(
hi2s
->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

915 
	`__HAL_I2S_ENABLE
(
hi2s
);

919 if(
	`HAL_IS_BIT_CLR
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
))

922 
	`SET_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

926 
	`__HAL_UNLOCK
(
hi2s
);

928  
HAL_OK
;

933 
	`__HAL_UNLOCK
(
hi2s
);

934  
HAL_BUSY
;

936 
	}
}

944 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMAPau£
(
I2S_H™dÀTy≥Def
 *
hi2s
)

947 
	`__HAL_LOCK
(
hi2s
);

949 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

952 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

954 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

957 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

961 
	`__HAL_UNLOCK
(
hi2s
);

963  
HAL_OK
;

964 
	}
}

972 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMAResume
(
I2S_H™dÀTy≥Def
 *
hi2s
)

975 
	`__HAL_LOCK
(
hi2s
);

977 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

980 
	`SET_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

982 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

985 
	`SET_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

989 if(
	`HAL_IS_BIT_CLR
(
hi2s
->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SE
))

992 
	`__HAL_I2S_ENABLE
(
hi2s
);

996 
	`__HAL_UNLOCK
(
hi2s
);

998  
HAL_OK
;

999 
	}
}

1007 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMASt›
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1010 
	`__HAL_LOCK
(
hi2s
);

1013 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1014 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1017 if(
hi2s
->
hdm©x
 !
NULL
)

1020 
	`__HAL_DMA_DISABLE
(
hi2s
->
hdm©x
);

1021 
	`HAL_DMA_Ab‹t
(
hi2s
->
hdm©x
);

1024 if(
hi2s
->
hdm¨x
 !
NULL
)

1027 
	`__HAL_DMA_DISABLE
(
hi2s
->
hdm¨x
);

1028 
	`HAL_DMA_Ab‹t
(
hi2s
->
hdm¨x
);

1032 
	`__HAL_I2S_DISABLE
(
hi2s
);

1034 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1037 
	`__HAL_UNLOCK
(
hi2s
);

1039  
HAL_OK
;

1040 
	}
}

1048 
	$HAL_I2S_IRQH™dÀr
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1050 
uöt32_t
 
i2s§
 = 
hi2s
->
In°™˚
->
SR
;

1053 if(((
i2s§
 & 
I2S_FLAG_OVR
) != I2S_FLAG_OVR) &&

1054 ((
i2s§
 & 
I2S_FLAG_RXNE
Ë=I2S_FLAG_RXNEË&& (
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_RXNE
Ë!
RESET
))

1056 
	`I2S_Re˚ive_IT
(
hi2s
);

1061 if(((
i2s§
 & 
I2S_FLAG_TXE
Ë=I2S_FLAG_TXEË&& (
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_TXE
Ë!
RESET
))

1063 
	`I2S_Tønsmô_IT
(
hi2s
);

1068 if(
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
Ë!
RESET
)

1071 if((
i2s§
 & 
I2S_FLAG_OVR
) == I2S_FLAG_OVR)

1074 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

1077 
	`SET_BIT
(
hi2s
->
Eº‹Code
, 
HAL_I2S_ERROR_OVR
);

1081 if((
i2s§
 & 
I2S_FLAG_UDR
) == I2S_FLAG_UDR)

1084 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

1087 
	`SET_BIT
(
hi2s
->
Eº‹Code
, 
HAL_I2S_ERROR_UDR
);

1091 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1093 
	`HAL_I2S_Eº‹CÆlback
(
hi2s
);

1095 
	}
}

1103 
__wók
 
	$HAL_I2S_TxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1106 
	`UNUSED
(
hi2s
);

1111 
	}
}

1119 
__wók
 
	$HAL_I2S_TxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1122 
	`UNUSED
(
hi2s
);

1127 
	}
}

1135 
__wók
 
	$HAL_I2S_RxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1138 
	`UNUSED
(
hi2s
);

1143 
	}
}

1151 
__wók
 
	$HAL_I2S_RxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1154 
	`UNUSED
(
hi2s
);

1159 
	}
}

1167 
__wók
 
	$HAL_I2S_Eº‹CÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1170 
	`UNUSED
(
hi2s
);

1175 
	}
}

1202 
HAL_I2S_SèãTy≥Def
 
	$HAL_I2S_GëSèã
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1204  
hi2s
->
Sèã
;

1205 
	}
}

1213 
uöt32_t
 
	$HAL_I2S_GëEº‹
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1215  
hi2s
->
Eº‹Code
;

1216 
	}
}

1235 
	$I2S_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1237 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1239 if(
	`HAL_IS_BIT_CLR
(
hdma
->
In°™˚
->
CCR
, 
DMA_CCR_CIRC
))

1242 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1244 
hi2s
->
TxX„rCou¡
 = 0U;

1245 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1247 
	`HAL_I2S_TxC∂tCÆlback
(
hi2s
);

1248 
	}
}

1256 
	$I2S_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1258 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1260 
	`HAL_I2S_TxHÆfC∂tCÆlback
(
hi2s
);

1261 
	}
}

1269 
	$I2S_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1271 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1273 if(
	`HAL_IS_BIT_CLR
(
hdma
->
In°™˚
->
CCR
, 
DMA_CCR_CIRC
))

1276 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1277 
hi2s
->
RxX„rCou¡
 = 0U;

1278 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1280 
	`HAL_I2S_RxC∂tCÆlback
(
hi2s
);

1281 
	}
}

1289 
	$I2S_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1291 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1293 
	`HAL_I2S_RxHÆfC∂tCÆlback
(
hi2s
);

1294 
	}
}

1302 
	$I2S_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1304 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1307 
	`CLEAR_BIT
(
hi2s
->
In°™˚
->
CR2
, (
SPI_CR2_RXDMAEN
 | 
SPI_CR2_TXDMAEN
));

1308 
hi2s
->
TxX„rCou¡
 = 0U;

1309 
hi2s
->
RxX„rCou¡
 = 0U;

1311 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1314 
	`SET_BIT
(
hi2s
->
Eº‹Code
, 
HAL_I2S_ERROR_DMA
);

1315 
	`HAL_I2S_Eº‹CÆlback
(
hi2s
);

1316 
	}
}

1324 
	$I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1327 
hi2s
->
In°™˚
->
DR
 = (*hi2s->
pTxBuffPå
++);

1328 
hi2s
->
TxX„rCou¡
--;

1330 if(
hi2s
->
TxX„rCou¡
 == 0U)

1333 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

1335 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1336 
	`HAL_I2S_TxC∂tCÆlback
(
hi2s
);

1338 
	}
}

1345 
	$I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1348 (*
hi2s
->
pRxBuffPå
++Ëhi2s->
In°™˚
->
DR
;

1349 
hi2s
->
RxX„rCou¡
--;

1351 if(
hi2s
->
RxX„rCou¡
 == 0U)

1354 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

1356 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1357 
	`HAL_I2S_RxC∂tCÆlback
(
hi2s
);

1359 
	}
}

1371 
HAL_SètusTy≥Def
 
	$I2S_WaôFœgSèãU¡ûTimeout
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt32_t
 
Fœg
, uöt32_à
Sètus
, uöt32_à
Timeout
)

1373 
uöt32_t
 
tick°¨t
 = 0U;

1376 
tick°¨t
 = 
	`HAL_GëTick
();

1379 if(
Sètus
 =
RESET
)

1381 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
Fœg
Ë=
RESET
)

1383 if(
Timeout
 !
HAL_MAX_DELAY
)

1385 if((
Timeout
 =0U)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1388 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1391 
	`__HAL_UNLOCK
(
hi2s
);

1393  
HAL_TIMEOUT
;

1400 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
Fœg
Ë!
RESET
)

1402 if(
Timeout
 !
HAL_MAX_DELAY
)

1404 if((
Timeout
 =0U)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1407 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1410 
	`__HAL_UNLOCK
(
hi2s
);

1412  
HAL_TIMEOUT
;

1417  
HAL_OK
;

1418 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_pwr.c

43 
	~"°m32l0xx_hÆ.h
"

45 #ifde‡
HAL_PWR_MODULE_ENABLED


61 
	#PVD_MODE_IT
 ((
uöt32_t
)0x00010000U)

	)

62 
	#PVD_MODE_EVT
 ((
uöt32_t
)0x00020000U)

	)

63 
	#PVD_RISING_EDGE
 ((
uöt32_t
)0x00000001U)

	)

64 
	#PVD_FALLING_EDGE
 ((
uöt32_t
)0x00000002U)

	)

94 
	$HAL_PWR_DeInô
()

96 
	`__HAL_RCC_PWR_FORCE_RESET
();

97 
	`__HAL_RCC_PWR_RELEASE_RESET
();

98 
	}
}

340 
	$HAL_PWR_E«bÀBkUpAc˚ss
()

343 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

344 
	}
}

353 
	$HAL_PWR_DißbÀBkUpAc˚ss
()

356 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

357 
	}
}

368 
	$HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
)

371 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
sC⁄figPVD
->
PVDLevñ
));

372 
	`as£π_∑øm
(
	`IS_PWR_PVD_MODE
(
sC⁄figPVD
->
Mode
));

375 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC⁄figPVD
->
PVDLevñ
);

378 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

379 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

380 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

381 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();

384 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

386 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

390 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

392 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

396 if((
sC⁄figPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

398 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

401 if((
sC⁄figPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

403 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

405 
	}
}

411 
	$HAL_PWR_E«bÀPVD
()

414 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
);

415 
	}
}

421 
	$HAL_PWR_DißbÀPVD
()

424 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PVDE
);

425 
	}
}

436 
	$HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

439 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

441 
	`SET_BIT
(
PWR
->
CSR
, 
WakeUpPöx
);

442 
	}
}

453 
	$HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

456 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

458 
	`CLEAR_BIT
(
PWR
->
CSR
, 
WakeUpPöx
);

459 
	}
}

476 
	$HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
)

478 
uöt32_t
 
tm¥eg
 = 0U;

480 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

481 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¡ry
));

484 
tm¥eg
 = 
PWR
->
CR
;

487 
	`CLEAR_BIT
(
tm¥eg
, (
PWR_CR_PDDS
 | 
PWR_CR_LPSDSR
));

490 
	`SET_BIT
(
tm¥eg
, 
Reguœt‹
);

493 
PWR
->
CR
 = 
tm¥eg
;

496 
	`CLEAR_BIT
(
SCB
->
SCR
, 
SCB_SCR_SLEEPDEEP_Msk
);

499 if(
SLEEPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

502 
	`__WFI
();

507 
	`__SEV
();

508 
	`__WFE
();

509 
	`__WFE
();

511 
	}
}

537 
	$HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

539 
uöt32_t
 
tm¥eg
 = 0U;

542 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

543 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

546 
tm¥eg
 = 
PWR
->
CR
;

549 
	`CLEAR_BIT
(
tm¥eg
, (
PWR_CR_PDDS
 | 
PWR_CR_LPSDSR
));

552 
	`SET_BIT
(
tm¥eg
, 
Reguœt‹
);

555 
PWR
->
CR
 = 
tm¥eg
;

558 
	`SET_BIT
(
SCB
->
SCR
, 
SCB_SCR_SLEEPDEEP_Msk
);

561 if(
STOPE¡ry
 =
PWR_STOPENTRY_WFI
)

564 
	`__WFI
();

569 
	`__SEV
();

570 
	`__WFE
();

571 
	`__WFE
();

575 
	`CLEAR_BIT
(
SCB
->
SCR
, 
SCB_SCR_SLEEPDEEP_Msk
);

577 
	}
}

592 
	$HAL_PWR_E¡îSTANDBYMode
()

595 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

598 
	`SET_BIT
(
SCB
->
SCR
, 
SCB_SCR_SLEEPDEEP_Msk
);

601 #i‡
	`deföed
 ( 
__CC_ARM
)

602 
	`__f‹˚_°‹es
();

605 
	`__WFI
();

606 
	}
}

616 
	$HAL_PWR_E«bÀSÀïOnExô
()

619 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

620 
	}
}

629 
	$HAL_PWR_DißbÀSÀïOnExô
()

632 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

633 
	}
}

642 
	$HAL_PWR_E«bÀSEVOnPíd
()

645 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

646 
	}
}

655 
	$HAL_PWR_DißbÀSEVOnPíd
()

658 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

659 
	}
}

666 
	$HAL_PWR_PVD_IRQH™dÀr
()

669 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë!
RESET
)

672 
	`HAL_PWR_PVDCÆlback
();

675 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

677 
	}
}

683 
__wók
 
	$HAL_PWR_PVDCÆlback
()

688 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_pwr_ex.c

42 
	~"°m32l0xx_hÆ.h
"

44 #ifde‡
HAL_PWR_MODULE_ENABLED


60 
	#PWR_FLAG_SETTING_DELAY_US
 50U

	)

86 
uöt32_t
 
	$HAL_PWREx_GëVﬁègeR™ge
()

88  (
PWR
->
CR
 & 
PWR_CR_VOS
);

89 
	}
}

99 
	$HAL_PWREx_E«bÀFa°WakeUp
()

102 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FWU
);

103 
	}
}

109 
	$HAL_PWREx_DißbÀFa°WakeUp
()

112 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FWU
);

113 
	}
}

119 
	$HAL_PWREx_E«bÀU…øLowPowî
()

122 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_ULP
);

123 
	}
}

129 
	$HAL_PWREx_DißbÀU…øLowPowî
()

132 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_ULP
);

133 
	}
}

147 
	$HAL_PWREx_E«bÀLowPowîRunMode
()

150 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_LPSDSR
);

151 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_LPRUN
);

152 
	}
}

162 
HAL_SètusTy≥Def
 
	$HAL_PWREx_DißbÀLowPowîRunMode
()

164 
uöt32_t
 
waô_lo›_ödex
 = 0U;

167 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_LPRUN
);

168 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_LPSDSR
);

171 
waô_lo›_ödex
 = (
PWR_FLAG_SETTING_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000U));

173 (
waô_lo›_ödex
 !0UË&& (
	`HAL_IS_BIT_SET
(
PWR
->
CSR
, 
PWR_CSR_REGLPF
)))

175 
waô_lo›_ödex
--;

178 i‡(
	`HAL_IS_BIT_SET
(
PWR
->
CSR
, 
PWR_CSR_REGLPF
))

180  
HAL_TIMEOUT
;

183  
HAL_OK
;

184 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_rcc.c

80 
	~"°m32l0xx_hÆ.h
"

91 #ifde‡
HAL_RCC_MODULE_ENABLED


99 
	#RCC_CFGR_PLLMUL_BITNUMBER
 
RCC_CFGR_PLLMUL_Pos


	)

100 
	#RCC_CFGR_PLLDIV_BITNUMBER
 
RCC_CFGR_PLLDIV_Pos


	)

101 
	#RCC_CFGR_HPRE_BITNUMBER
 
RCC_CFGR_HPRE_Pos


	)

102 
	#RCC_CFGR_PPRE1_BITNUMBER
 
RCC_CFGR_PPRE1_Pos


	)

103 
	#RCC_CFGR_PPRE2_BITNUMBER
 
RCC_CFGR_PPRE2_Pos


	)

105 
	#RCC_ICSCR_MSIRANGE_BITNUMBER
 
RCC_ICSCR_MSIRANGE_Pos


	)

106 
	#RCC_ICSCR_MSITRIM_BITNUMBER
 
RCC_ICSCR_MSITRIM_Pos


	)

115 
	#MCO1_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

116 
	#MCO1_GPIO_PORT
 
GPIOA


	)

117 
	#MCO1_PIN
 
GPIO_PIN_8


	)

119 
	#MCO2_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

120 
	#MCO2_GPIO_PORT
 
GPIOA


	)

121 
	#MCO2_PIN
 
GPIO_PIN_9


	)

123 #i‡ 
deföed
(
STM32L031xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

124 || 
deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L071xx
Ë|| 
	$deföed
(
STM32L081xx
)

125 
	#MCO3_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOB_CLK_ENABLE
()

	)

126 
	#MCO3_GPIO_PORT
 
GPIOB


	)

127 
	#MCO3_PIN
 
GPIO_PIN_13


	)

138 c⁄° 
uöt8_t
 
PLLMulTabÀ
[];

147 
HAL_SètusTy≥Def
 
	`RCC_SëFœshL©ícyFromMSIR™ge
(
uöt32_t
 
MSIønge
);

271 
	$HAL_RCC_DeInô
()

273 
__IO
 
uöt32_t
 
tm¥eg
;

276 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_MSION
);

279 
	`CLEAR_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SW
);

282 #i‡
	`deföed
(
RCC_CR_CSSHSEON
Ë&& deföed(
RCC_CR_HSIOUTEN
)

283 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
| 
RCC_CR_HSIKERON
| 
RCC_CR_HSIDIVEN
 | 
RCC_CR_HSIOUTEN
 | \

284 
RCC_CR_HSEON
 | 
RCC_CR_CSSHSEON
 | 
RCC_CR_PLLON
);

285 #ñi‡!
	`deföed
(
RCC_CR_CSSHSEON
Ë&& deföed(
RCC_CR_HSIOUTEN
)

286 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
| 
RCC_CR_HSIKERON
| 
RCC_CR_HSIDIVEN
 | 
RCC_CR_HSIOUTEN
 | \

287 
RCC_CR_HSEON
 | 
RCC_CR_PLLON
);

288 #ñi‡
	`deföed
(
RCC_CR_CSSHSEON
Ë&& !deföed(
RCC_CR_HSIOUTEN
)

289 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
| 
RCC_CR_HSIKERON
| 
RCC_CR_HSIDIVEN
 | \

290 
RCC_CR_HSEON
 | 
RCC_CR_CSSHSEON
 | 
RCC_CR_PLLON
);

294 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

295 
	`UNUSED
(
tm¥eg
);

298 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

301 
	`CLEAR_REG
(
RCC
->
CFGR
);

304 
	`MODIFY_REG
(
RCC
->
ICSCR
, (
RCC_ICSCR_MSIRANGE
 | 
RCC_ICSCR_MSITRIM
), (((
uöt32_t
)0 << 
RCC_ICSCR_MSITRIM_BITNUMBER
Ë| 
RCC_ICSCR_MSIRANGE_5
));

307 
	`MODIFY_REG
(
RCC
->
ICSCR
, 
RCC_ICSCR_HSITRIM
, ((
uöt32_t
)0x10 << 8));

310 
	`CLEAR_REG
(
RCC
->
CIER
);

313 
Sy°emC‹eClock
 = 
MSI_VALUE
;

314 
	}
}

330 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

332 
uöt32_t
 
tick°¨t
 = 0U;

335 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

336 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

339 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

342 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

345 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
)

346 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
)))

348 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

350  
HAL_ERROR
;

356 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

360 if(
RCC_OscInôSåu˘
->
HSESèã
 !
RCC_HSE_OFF
)

363 
tick°¨t
 = 
	`HAL_GëTick
();

366 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

368 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

370  
HAL_TIMEOUT
;

377 
tick°¨t
 = 
	`HAL_GëTick
();

380 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

382 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

384  
HAL_TIMEOUT
;

391 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

394 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

395 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

398 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
)

399 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSI
)))

402 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

404  
HAL_ERROR
;

410 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

416 if(
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_OFF
)

419 
	`__HAL_RCC_HSI_CONFIG
(
RCC_OscInôSåu˘
->
HSISèã
);

422 
tick°¨t
 = 
	`HAL_GëTick
();

425 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

427 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

429  
HAL_TIMEOUT
;

434 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

439 
	`__HAL_RCC_HSI_DISABLE
();

442 
tick°¨t
 = 
	`HAL_GëTick
();

445 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

447 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

449  
HAL_TIMEOUT
;

456 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_MSI
) == RCC_OSCILLATORTYPE_MSI)

459 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_MSI
) )

461 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
MSISèã
 =
RCC_MSI_OFF
))

463  
HAL_ERROR
;

469 
	`as£π_∑øm
(
	`IS_RCC_MSICALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
));

470 
	`as£π_∑øm
(
	`IS_RCC_MSI_CLOCK_RANGE
(
RCC_OscInôSåu˘
->
MSIClockR™ge
));

475 if(
RCC_OscInôSåu˘
->
MSIClockR™ge
 > 
	`__HAL_RCC_GET_MSI_RANGE
())

478 if(
	`RCC_SëFœshL©ícyFromMSIR™ge
(
RCC_OscInôSåu˘
->
MSIClockR™ge
Ë!
HAL_OK
)

480  
HAL_ERROR
;

484 
	`__HAL_RCC_MSI_RANGE_CONFIG
(
RCC_OscInôSåu˘
->
MSIClockR™ge
);

486 
	`__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
);

492 
	`__HAL_RCC_MSI_RANGE_CONFIG
(
RCC_OscInôSåu˘
->
MSIClockR™ge
);

494 
	`__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
);

497 if(
	`RCC_SëFœshL©ícyFromMSIR™ge
(
RCC_OscInôSåu˘
->
MSIClockR™ge
Ë!
HAL_OK
)

499  
HAL_ERROR
;

504 
Sy°emC‹eClock
 = (32768U * (1U << ((
RCC_OscInôSåu˘
->
MSIClockR™ge
 >> 
RCC_ICSCR_MSIRANGE_BITNUMBER
) + 1U)))

505 >> 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
Ë>> 
RCC_CFGR_HPRE_BITNUMBER
)];

508 
	`HAL_InôTick
 (
TICK_INT_PRIORITY
);

514 
	`as£π_∑øm
(
	`IS_RCC_MSI
(
RCC_OscInôSåu˘
->
MSISèã
));

517 if(
RCC_OscInôSåu˘
->
MSISèã
 !
RCC_MSI_OFF
)

520 
	`__HAL_RCC_MSI_ENABLE
();

523 
tick°¨t
 = 
	`HAL_GëTick
();

526 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë=
RESET
)

528 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
MSI_TIMEOUT_VALUE
)

530  
HAL_TIMEOUT
;

534 
	`as£π_∑øm
(
	`IS_RCC_MSICALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
));

535 
	`as£π_∑øm
(
	`IS_RCC_MSI_CLOCK_RANGE
(
RCC_OscInôSåu˘
->
MSIClockR™ge
));

538 
	`__HAL_RCC_MSI_RANGE_CONFIG
(
RCC_OscInôSåu˘
->
MSIClockR™ge
);

540 
	`__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
);

546 
	`__HAL_RCC_MSI_DISABLE
();

549 
tick°¨t
 = 
	`HAL_GëTick
();

552 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë!
RESET
)

554 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
MSI_TIMEOUT_VALUE
)

556  
HAL_TIMEOUT
;

563 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

566 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

569 if(
RCC_OscInôSåu˘
->
LSISèã
 !
RCC_LSI_OFF
)

572 
	`__HAL_RCC_LSI_ENABLE
();

575 
tick°¨t
 = 
	`HAL_GëTick
();

578 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

580 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

582  
HAL_TIMEOUT
;

589 
	`__HAL_RCC_LSI_DISABLE
();

592 
tick°¨t
 = 
	`HAL_GëTick
();

595 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

597 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

599  
HAL_TIMEOUT
;

605 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

607 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

610 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

614 if(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

616 
	`__HAL_RCC_PWR_CLK_ENABLE
();

617 
pwr˛kch™ged
 = 
SET
;

620 if(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

623 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

626 
tick°¨t
 = 
	`HAL_GëTick
();

628 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

630 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

632  
HAL_TIMEOUT
;

638 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

640 if(
RCC_OscInôSåu˘
->
LSESèã
 !
RCC_LSE_OFF
)

643 
tick°¨t
 = 
	`HAL_GëTick
();

646 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

648 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

650  
HAL_TIMEOUT
;

657 
tick°¨t
 = 
	`HAL_GëTick
();

660 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

662 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

664  
HAL_TIMEOUT
;

670 if(
pwr˛kch™ged
 =
SET
)

672 
	`__HAL_RCC_PWR_CLK_DISABLE
();

676 #i‡
	`deföed
(
RCC_HSI48_SUPPORT
)

678 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI48
) == RCC_OSCILLATORTYPE_HSI48)

681 
	`as£π_∑øm
(
	`IS_RCC_HSI48
(
RCC_OscInôSåu˘
->
HSI48Sèã
));

684 if(
RCC_OscInôSåu˘
->
HSI48Sèã
 !
RCC_HSI48_OFF
)

687 
	`__HAL_RCC_HSI48_ENABLE
();

690 
tick°¨t
 = 
	`HAL_GëTick
();

693 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSI48RDY
Ë=
RESET
)

695 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI48_TIMEOUT_VALUE
)

697  
HAL_TIMEOUT
;

704 
	`__HAL_RCC_HSI48_DISABLE
();

707 
tick°¨t
 = 
	`HAL_GëTick
();

710 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSI48RDY
Ë!
RESET
)

712 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI48_TIMEOUT_VALUE
)

714  
HAL_TIMEOUT
;

723 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

724 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

727 if(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

729 if((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

732 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

733 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
));

734 
	`as£π_∑øm
(
	`IS_RCC_PLL_DIV
(
RCC_OscInôSåu˘
->
PLL
.
PLLDIV
));

737 
	`__HAL_RCC_PLL_DISABLE
();

740 
tick°¨t
 = 
	`HAL_GëTick
();

743 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

745 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

747  
HAL_TIMEOUT
;

752 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
,

753 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
,

754 
RCC_OscInôSåu˘
->
PLL
.
PLLDIV
);

756 
	`__HAL_RCC_PLL_ENABLE
();

759 
tick°¨t
 = 
	`HAL_GëTick
();

762 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

764 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

766  
HAL_TIMEOUT
;

773 
	`__HAL_RCC_PLL_DISABLE
();

776 
tick°¨t
 = 
	`HAL_GëTick
();

779 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

781 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

783  
HAL_TIMEOUT
;

790  
HAL_ERROR
;

794  
HAL_OK
;

795 
	}
}

823 
HAL_SètusTy≥Def
 
	$HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
)

825 
uöt32_t
 
tick°¨t
 = 0U;

828 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

829 
	`as£π_∑øm
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkInôSåu˘
->
ClockTy≥
));

830 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FL©ícy
));

837 if(
FL©ícy
 > (
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
))

840 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

844 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

846  
HAL_ERROR
;

851 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

853 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

854 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

858 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

860 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

863 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

866 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

868  
HAL_ERROR
;

872 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

875 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

877  
HAL_ERROR
;

881 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSI
)

884 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

886  
HAL_ERROR
;

893 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë=
RESET
)

895  
HAL_ERROR
;

898 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

901 
tick°¨t
 = 
	`HAL_GëTick
();

903 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

905 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSE
)

907 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

909  
HAL_TIMEOUT
;

913 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

915 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

917 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

919  
HAL_TIMEOUT
;

923 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSI
)

925 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSI
)

927 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

929  
HAL_TIMEOUT
;

935 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_MSI
)

937 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

939  
HAL_TIMEOUT
;

945 if(
FL©ícy
 < (
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
))

948 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

952 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

954  
HAL_ERROR
;

959 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

961 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB1CLKDividî
));

962 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkInôSåu˘
->
APB1CLKDividî
);

966 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

968 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB2CLKDividî
));

969 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkInôSåu˘
->
APB2CLKDividî
) << 3));

973 
Sy°emC‹eClock
 = 
	`HAL_RCC_GëSysClockFªq
(Ë>> 
AHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
)>> 
RCC_CFGR_HPRE_BITNUMBER
];

976 
	`HAL_InôTick
 (
TICK_INT_PRIORITY
);

978  
HAL_OK
;

979 
	}
}

1060 
	$HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
)

1062 
GPIO_InôTy≥Def
 
gpio
 = {0};

1065 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCOx
));

1066 
	`as£π_∑øm
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

1067 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSour˚
));

1070 
gpio
.
Mode
 = 
GPIO_MODE_AF_PP
;

1071 
gpio
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

1072 
gpio
.
PuŒ
 = 
GPIO_NOPULL
;

1073 if(
RCC_MCOx
 =
RCC_MCO1
)

1075 
gpio
.
Pö
 = 
MCO1_PIN
;

1076 
gpio
.
A…î«ã
 = 
GPIO_AF0_MCO
;

1079 
	`MCO1_CLK_ENABLE
();

1080 
	`HAL_GPIO_Inô
(
MCO1_GPIO_PORT
, &
gpio
);

1082 #i‡ 
	`deföed
(
STM32L031xx
Ë|| deföed(
STM32L041xx
Ë|| deföed(
STM32L073xx
Ë|| deföed(
STM32L083xx
) \

1083 || 
	`deföed
(
STM32L072xx
Ë|| deföed(
STM32L082xx
Ë|| deföed(
STM32L071xx
Ë|| deföed(
STM32L081xx
)

1084 i‡(
RCC_MCOx
 =
RCC_MCO3
)

1086 
gpio
.
Pö
 = 
MCO3_PIN
;

1087 
gpio
.
A…î«ã
 = 
GPIO_AF2_MCO
;

1090 
	`MCO3_CLK_ENABLE
();

1091 
	`HAL_GPIO_Inô
(
MCO3_GPIO_PORT
, &
gpio
);

1096 
gpio
.
Pö
 = 
MCO2_PIN
;

1097 
gpio
.
A…î«ã
 = 
GPIO_AF0_MCO
;

1100 
	`MCO2_CLK_ENABLE
();

1101 
	`HAL_GPIO_Inô
(
MCO2_GPIO_PORT
, &
gpio
);

1105 
	`__HAL_RCC_MCO1_CONFIG
(
RCC_MCOSour˚
, 
RCC_MCODiv
);

1106 
	}
}

1108 #i‡
deföed
(
RCC_HSECSS_SUPPORT
)

1118 
	$HAL_RCC_E«bÀCSS
()

1120 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_CSSON
) ;

1121 
	}
}

1154 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

1156 
uöt32_t
 
tm¥eg
 = 0, 
∂lm
 = 0, 
∂ld
 = 0, 
∂lvco
 = 0, 
msi˛kønge
 = 0;

1157 
uöt32_t
 
sys˛ock‰eq
 = 0;

1159 
tm¥eg
 = 
RCC
->
CFGR
;

1162 
tm¥eg
 & 
RCC_CFGR_SWS
)

1164 
RCC_SYSCLKSOURCE_STATUS_HSI
:

1166 i‡((
RCC
->
CR
 & 
RCC_CR_HSIDIVF
) != 0)

1168 
sys˛ock‰eq
 = (
HSI_VALUE
 >> 2);

1172 
sys˛ock‰eq
 = 
HSI_VALUE
;

1176 
RCC_SYSCLKSOURCE_STATUS_HSE
:

1178 
sys˛ock‰eq
 = 
HSE_VALUE
;

1181 
RCC_SYSCLKSOURCE_STATUS_PLLCLK
:

1183 
∂lm
 = 
PLLMulTabÀ
[(
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLMUL
Ë>> 
RCC_CFGR_PLLMUL_BITNUMBER
];

1184 
∂ld
 = ((
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLDIV
Ë>> 
RCC_CFGR_PLLDIV_BITNUMBER
) + 1;

1185 i‡(
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë!
RCC_PLLSOURCE_HSI
)

1188 
∂lvco
 = (
HSE_VALUE
 * 
∂lm
Ë/ 
∂ld
;

1192 i‡((
RCC
->
CR
 & 
RCC_CR_HSIDIVF
) != 0)

1194 
∂lvco
 = ((
HSI_VALUE
 >> 2Ë* 
∂lm
Ë/ 
∂ld
;

1198 
∂lvco
 = (
HSI_VALUE
 * 
∂lm
Ë/ 
∂ld
;

1201 
sys˛ock‰eq
 = 
∂lvco
;

1204 
RCC_SYSCLKSOURCE_STATUS_MSI
:

1207 
msi˛kønge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
 ) >> 
RCC_ICSCR_MSIRANGE_BITNUMBER
;

1208 
sys˛ock‰eq
 = (32768 * (1 << (
msi˛kønge
 + 1)));

1212  
sys˛ock‰eq
;

1213 
	}
}

1224 
uöt32_t
 
	$HAL_RCC_GëHCLKFªq
()

1226  
Sy°emC‹eClock
;

1227 
	}
}

1235 
uöt32_t
 
	$HAL_RCC_GëPCLK1Fªq
()

1238  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
Ë>> 
RCC_CFGR_PPRE1_BITNUMBER
]);

1239 
	}
}

1247 
uöt32_t
 
	$HAL_RCC_GëPCLK2Fªq
()

1250  (
	`HAL_RCC_GëHCLKFªq
()>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
Ë>> 
RCC_CFGR_PPRE2_BITNUMBER
]);

1251 
	}
}

1260 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1263 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

1266 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 \

1267 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
 | 
RCC_OSCILLATORTYPE_MSI
;

1268 #i‡
	`deföed
(
RCC_HSI48_SUPPORT
)

1269 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 |
RCC_OSCILLATORTYPE_HSI48
;

1274 if((
RCC
->
CR
 &
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1276 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

1278 if((
RCC
->
CR
 &
RCC_CR_HSEON
) == RCC_CR_HSEON)

1280 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

1284 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

1288 if((
RCC
->
CR
 &
RCC_CR_HSION
) == RCC_CR_HSION)

1290 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

1294 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

1297 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
ICSCR
 & 
RCC_ICSCR_HSITRIM
) >> 8);

1300 if((
RCC
->
CR
 &
RCC_CR_MSION
) == RCC_CR_MSION)

1302 
RCC_OscInôSåu˘
->
MSISèã
 = 
RCC_MSI_ON
;

1306 
RCC_OscInôSåu˘
->
MSISèã
 = 
RCC_MSI_OFF
;

1309 
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
ICSCR
 & 
RCC_ICSCR_MSITRIM
Ë>> 
RCC_ICSCR_MSITRIM_BITNUMBER
);

1310 
RCC_OscInôSåu˘
->
MSIClockR™ge
 = (
uöt32_t
)((
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
));

1313 if((
RCC
->
CSR
 &
RCC_CSR_LSEBYP
) == RCC_CSR_LSEBYP)

1315 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

1317 if((
RCC
->
CSR
 &
RCC_CSR_LSEON
) == RCC_CSR_LSEON)

1319 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

1323 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

1327 if((
RCC
->
CSR
 &
RCC_CSR_LSION
) == RCC_CSR_LSION)

1329 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

1333 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

1336 #i‡
	`deföed
(
RCC_HSI48_SUPPORT
)

1338 
RCC_OscInôSåu˘
->
HSI48Sèã
 = 
	`__HAL_RCC_GET_HSI48_STATE
();

1342 if((
RCC
->
CR
 &
RCC_CR_PLLON
) == RCC_CR_PLLON)

1344 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

1348 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

1350 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
);

1351 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
);

1352 
RCC_OscInôSåu˘
->
PLL
.
PLLDIV
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
);

1353 
	}
}

1363 
	$HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
)

1366 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

1367 
	`as£π_∑øm
(
pFL©ícy
 !
NULL
);

1370 
RCC_ClkInôSåu˘
->
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1373 
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1376 
RCC_ClkInôSåu˘
->
AHBCLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1379 
RCC_ClkInôSåu˘
->
APB1CLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1382 
RCC_ClkInôSåu˘
->
APB2CLKDividî
 = (
uöt32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1385 *
pFL©ícy
 = (
uöt32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1386 
	}
}

1388 #i‡
deföed
(
RCC_HSECSS_SUPPORT
)

1394 
	$HAL_RCC_NMI_IRQH™dÀr
()

1397 if(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1400 
	`HAL_RCC_CSSCÆlback
();

1403 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1405 
	}
}

1411 
__wók
 
	$HAL_RCC_CSSCÆlback
()

1416 
	}
}

1437 
HAL_SètusTy≥Def
 
	$RCC_SëFœshL©ícyFromMSIR™ge
(
uöt32_t
 
MSIønge
)

1439 
uöt32_t
 
vos
 = 0;

1440 
uöt32_t
 
œãncy
 = 
FLASH_LATENCY_0
;

1443 i‡(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
Ë=
RCC_SYSCLK_DIV1
)

1445 if(
	`__HAL_RCC_PWR_IS_CLK_ENABLED
())

1447 
vos
 = 
	`READ_BIT
(
PWR
->
CR
, 
PWR_CR_VOS
);

1451 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1452 
vos
 = 
	`READ_BIT
(
PWR
->
CR
, 
PWR_CR_VOS
);

1453 
	`__HAL_RCC_PWR_CLK_DISABLE
();

1457 if((
vos
 =
PWR_REGULATOR_VOLTAGE_SCALE3
Ë&& (
MSIønge
 =
RCC_MSIRANGE_6
))

1459 
œãncy
 = 
FLASH_LATENCY_1
;

1463 
	`__HAL_FLASH_SET_LATENCY
(
œãncy
);

1467 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
œãncy
)

1469  
HAL_ERROR
;

1472  
HAL_OK
;

1473 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_rcc_ex.c

42 
	~"°m32l0xx_hÆ.h
"

48 #ifde‡
HAL_RCC_MODULE_ENABLED


60 #i‡
deföed
 (
CRS
)

62 
	#CRS_CFGR_FELIM_BITNUMBER
 
CRS_CFGR_FELIM_Pos


	)

63 
	#CRS_CR_TRIM_BITNUMBER
 
CRS_CR_TRIM_Pos


	)

64 
	#CRS_ISR_FECAP_BITNUMBER
 
CRS_ISR_FECAP_Pos


	)

67 #i‡
deföed
(
USB
)

68 c⁄° 
uöt8_t
 
PLLMulTabÀ
[];

120 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

122 
uöt32_t
 
tick°¨t
 = 0U;

123 
uöt32_t
 
ãmp_ªg
 = 0U;

126 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

129 i‡((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC)

130 #i‡
	`deföed
(
LCD
)

131 || (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LCD
) == RCC_PERIPHCLK_LCD)

136 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC)

138 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
RTCClockSñe˘i⁄
));

141 #i‡
	`deföed
(
LCD
)

142 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LCD
) == RCC_PERIPHCLK_LCD)

144 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
LCDClockSñe˘i⁄
));

148 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

153 if(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

155 
	`__HAL_RCC_PWR_CLK_ENABLE
();

156 
pwr˛kch™ged
 = 
SET
;

159 if(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

162 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

165 
tick°¨t
 = 
	`HAL_GëTick
();

167 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

169 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

171  
HAL_TIMEOUT
;

177 
ãmp_ªg
 = (
RCC
->
CR
 & 
RCC_CR_RTCPRE
);

178 i‡((
ãmp_ªg
 !(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_CR_RTCPRE
))

179 #i‡
	`deföed
 (
LCD
)

180 || (
ãmp_ªg
 !(
PîùhClkInô
->
LCDClockSñe˘i⁄
 & 
RCC_CR_RTCPRE
))

184 i‡(((
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_CSR_RTCSEL
Ë=
RCC_CSR_RTCSEL_HSE
Ë&& 
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
))

187  
HAL_ERROR
;

192 
ãmp_ªg
 = (
RCC
->
CSR
 & 
RCC_CSR_RTCSEL
);

194 if((
ãmp_ªg
 !0x00000000UË&& ((—emp_ªg !(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_CSR_RTCSEL
)) \

195 && (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC))

196 #i‡
	`deföed
(
LCD
)

197 || ((
ãmp_ªg
 !(
PîùhClkInô
->
LCDClockSñe˘i⁄
 & 
RCC_CSR_RTCSEL
)) \

198 && (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LCD
) == RCC_PERIPHCLK_LCD))

203 
ãmp_ªg
 = (
RCC
->
CSR
 & ~(
RCC_CSR_RTCSEL
));

206 
	`__HAL_RCC_BACKUPRESET_FORCE
();

207 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

210 
RCC
->
CSR
 = 
ãmp_ªg
;

213 i‡(
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_CSR_LSEON
))

216 
tick°¨t
 = 
	`HAL_GëTick
();

219 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

221 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

223  
HAL_TIMEOUT
;

228 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

231 if(
pwr˛kch™ged
 =
SET
)

233 
	`__HAL_RCC_PWR_CLK_DISABLE
();

237 #i‡
	`deföed
 (
RCC_CCIPR_USART1SEL
)

239 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_USART1
) == RCC_PERIPHCLK_USART1)

242 
	`as£π_∑øm
(
	`IS_RCC_USART1CLKSOURCE
(
PîùhClkInô
->
Ußπ1ClockSñe˘i⁄
));

245 
	`__HAL_RCC_USART1_CONFIG
(
PîùhClkInô
->
Ußπ1ClockSñe˘i⁄
);

250 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_USART2
) == RCC_PERIPHCLK_USART2)

253 
	`as£π_∑øm
(
	`IS_RCC_USART2CLKSOURCE
(
PîùhClkInô
->
Ußπ2ClockSñe˘i⁄
));

256 
	`__HAL_RCC_USART2_CONFIG
(
PîùhClkInô
->
Ußπ2ClockSñe˘i⁄
);

260 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LPUART1
) == RCC_PERIPHCLK_LPUART1)

263 
	`as£π_∑øm
(
	`IS_RCC_LPUART1CLKSOURCE
(
PîùhClkInô
->
Lpu¨t1ClockSñe˘i⁄
));

266 
	`__HAL_RCC_LPUART1_CONFIG
(
PîùhClkInô
->
Lpu¨t1ClockSñe˘i⁄
);

270 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2C1
) == RCC_PERIPHCLK_I2C1)

273 
	`as£π_∑øm
(
	`IS_RCC_I2C1CLKSOURCE
(
PîùhClkInô
->
I2c1ClockSñe˘i⁄
));

276 
	`__HAL_RCC_I2C1_CONFIG
(
PîùhClkInô
->
I2c1ClockSñe˘i⁄
);

279 #i‡
	`deföed
 (
RCC_CCIPR_I2C3SEL
)

281 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2C3
) == RCC_PERIPHCLK_I2C3)

284 
	`as£π_∑øm
(
	`IS_RCC_I2C3CLKSOURCE
(
PîùhClkInô
->
I2c3ClockSñe˘i⁄
));

287 
	`__HAL_RCC_I2C3_CONFIG
(
PîùhClkInô
->
I2c3ClockSñe˘i⁄
);

291 #i‡
	`deföed
(
USB
)

293 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_USB
) == (RCC_PERIPHCLK_USB))

295 
	`as£π_∑øm
(
	`IS_RCC_USBCLKSOURCE
(
PîùhClkInô
->
UsbClockSñe˘i⁄
));

296 
	`__HAL_RCC_USB_CONFIG
(
PîùhClkInô
->
UsbClockSñe˘i⁄
);

301 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LPTIM1
) == (RCC_PERIPHCLK_LPTIM1))

303 
	`as£π_∑øm
(
	`IS_RCC_LPTIMCLK
(
PîùhClkInô
->
L±imClockSñe˘i⁄
));

304 
	`__HAL_RCC_LPTIM1_CONFIG
(
PîùhClkInô
->
L±imClockSñe˘i⁄
);

307  
HAL_OK
;

308 
	}
}

317 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

319 
uöt32_t
 
§c˛k
 = 0;

323 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_USART2
 | 
RCC_PERIPHCLK_LPUART1
 | \

324 
RCC_PERIPHCLK_I2C1
 | 
RCC_PERIPHCLK_RTC
 | \

325 
RCC_PERIPHCLK_LPTIM1
;

326 #i‡
	`deföed
(
RCC_CCIPR_USART1SEL
)

327 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_USART1
;

329 #i‡ 
	`deföed
(
RCC_CCIPR_I2C3SEL
)

330 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2C3
;

332 #i‡
	`deföed
(
USB
)

333 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_USB
;

335 #i‡
	`deföed
(
LCD
)

336 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_LCD
;

340 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

341 i‡(
§c˛k
 !
RCC_RTCCLKSOURCE_HSE_DIV2
)

344 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
;

349 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
 | (
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_RTCPRE
));

351 #i‡
	`deföed
(
LCD
)

352 
PîùhClkInô
->
LCDClockSñe˘i⁄
 = PîùhClkInô->
RTCClockSñe˘i⁄
;

354 #i‡
	`deföed
(
RCC_CCIPR_USART1SEL
)

356 
PîùhClkInô
->
Ußπ1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_USART1_SOURCE
();

359 
PîùhClkInô
->
Ußπ2ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_USART2_SOURCE
();

361 
PîùhClkInô
->
Lpu¨t1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_LPUART1_SOURCE
();

363 
PîùhClkInô
->
I2c1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2C1_SOURCE
();

364 #i‡
	`deföed
(
RCC_CCIPR_I2C3SEL
)

366 
PîùhClkInô
->
I2c3ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2C3_SOURCE
();

369 
PîùhClkInô
->
L±imClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_LPTIM1_SOURCE
();

371 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

372 #i‡
	`deföed
(
USB
)

374 
PîùhClkInô
->
UsbClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_USB_SOURCE
();

376 
	}
}

395 
uöt32_t
 
	$HAL_RCCEx_GëPîùhCLKFªq
(
uöt32_t
 
PîùhClk
)

397 
uöt32_t
 
ãmp_ªg
 = 0U, 
˛k¥ediv
 = 0U, 
‰equícy
 = 0U;

398 
uöt32_t
 
§c˛k
 = 0U;

399 #i‡
	`deföed
(
USB
)

400 
uöt32_t
 
∂lmul
 = 0U, 
∂ldiv
 = 0U, 
∂lvco
 = 0U;

404 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClk
));

406 
PîùhClk
)

408 
RCC_PERIPHCLK_RTC
:

409 #i‡
	`deföed
(
LCD
)

410 
RCC_PERIPHCLK_LCD
:

414 
ãmp_ªg
 = 
RCC
->
CSR
;

417 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

420 i‡((
§c˛k
 =
RCC_RTCCLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_CSR_LSERDY
)))

422 
‰equícy
 = 
LSE_VALUE
;

425 i‡((
§c˛k
 =
RCC_RTCCLKSOURCE_LSI
Ë&& (
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_CSR_LSIRDY
)))

427 
‰equícy
 = 
LSI_VALUE
;

430 i‡((
§c˛k
 =
RCC_RTCCLKSOURCE_HSE_DIVX
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
)))

433 
˛k¥ediv
 = 
	`__HAL_RCC_GET_RTC_HSE_PRESCALER
();

435 
˛k¥ediv
)

437 
RCC_RTC_HSE_DIV_16
:

439 
‰equícy
 = 
HSE_VALUE
 / 16U;

442 
RCC_RTC_HSE_DIV_8
:

444 
‰equícy
 = 
HSE_VALUE
 / 8U;

447 
RCC_RTC_HSE_DIV_4
:

449 
‰equícy
 = 
HSE_VALUE
 / 4U;

454 
‰equícy
 = 
HSE_VALUE
 / 2U;

462 
‰equícy
 = 0U;

466 #i‡
	`deföed
(
USB
)

467 
RCC_PERIPHCLK_USB
:

470 
§c˛k
 = 
	`__HAL_RCC_GET_USB_SOURCE
();

472 if((
§c˛k
 =
RCC_USBCLKSOURCE_PLL
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLLRDY
)))

475 
∂lmul
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
;

476 
∂ldiv
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
;

477 
∂lmul
 = 
PLLMulTabÀ
[’Œmu»>> 
RCC_CFGR_PLLMUL_Pos
)];

478 
∂ldiv
 = (∂ldiv >> 
RCC_CFGR_PLLDIV_Pos
) + 1U;

481 if(
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSI
)

483 i‡(
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSIDIVF
) != 0U)

485 
∂lvco
 = (
HSI_VALUE
 >> 2U);

489 
∂lvco
 = 
HSI_VALUE
;

494 
∂lvco
 = 
HSE_VALUE
;

497 
∂lvco
 = (∂lvcÿ* 
∂lmul
);

498 
‰equícy
 = (
∂lvco
/ 
∂ldiv
);

501 if((
§c˛k
 =
RCC_USBCLKSOURCE_HSI48
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CRRCR
, 
RCC_CRRCR_HSI48RDY
)))

503 
‰equícy
 = 
HSI48_VALUE
;

507 
‰equícy
 = 0U;

512 #i‡
	`deföed
(
RCC_CCIPR_USART1SEL
)

513 
RCC_PERIPHCLK_USART1
:

516 
§c˛k
 = 
	`__HAL_RCC_GET_USART1_SOURCE
();

519 i‡(
§c˛k
 =
RCC_USART1CLKSOURCE_PCLK2
)

521 
‰equícy
 = 
	`HAL_RCC_GëPCLK2Fªq
();

524 i‡((
§c˛k
 =
RCC_USART1CLKSOURCE_HSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSIRDY
)))

526 
‰equícy
 = 
HSI_VALUE
;

529 i‡(
§c˛k
 =
RCC_USART1CLKSOURCE_SYSCLK
)

531 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

534 i‡((
§c˛k
 =
RCC_USART1CLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSERDY
)))

536 
‰equícy
 = 
LSE_VALUE
;

541 
‰equícy
 = 0U;

546 
RCC_PERIPHCLK_USART2
:

549 
§c˛k
 = 
	`__HAL_RCC_GET_USART2_SOURCE
();

552 i‡(
§c˛k
 =
RCC_USART2CLKSOURCE_PCLK1
)

554 
‰equícy
 = 
	`HAL_RCC_GëPCLK1Fªq
();

557 i‡((
§c˛k
 =
RCC_USART2CLKSOURCE_HSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSIRDY
)))

559 
‰equícy
 = 
HSI_VALUE
;

562 i‡(
§c˛k
 =
RCC_USART2CLKSOURCE_SYSCLK
)

564 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

567 i‡((
§c˛k
 =
RCC_USART2CLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSERDY
)))

569 
‰equícy
 = 
LSE_VALUE
;

574 
‰equícy
 = 0U;

578 
RCC_PERIPHCLK_LPUART1
:

581 
§c˛k
 = 
	`__HAL_RCC_GET_LPUART1_SOURCE
();

584 i‡(
§c˛k
 =
RCC_LPUART1CLKSOURCE_PCLK1
)

586 
‰equícy
 = 
	`HAL_RCC_GëPCLK1Fªq
();

589 i‡((
§c˛k
 =
RCC_LPUART1CLKSOURCE_HSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSIRDY
)))

591 
‰equícy
 = 
HSI_VALUE
;

594 i‡(
§c˛k
 =
RCC_LPUART1CLKSOURCE_SYSCLK
)

596 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

599 i‡((
§c˛k
 =
RCC_LPUART1CLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSERDY
)))

601 
‰equícy
 = 
LSE_VALUE
;

606 
‰equícy
 = 0U;

610 
RCC_PERIPHCLK_I2C1
:

613 
§c˛k
 = 
	`__HAL_RCC_GET_I2C1_SOURCE
();

616 i‡(
§c˛k
 =
RCC_I2C1CLKSOURCE_PCLK1
)

618 
‰equícy
 = 
	`HAL_RCC_GëPCLK1Fªq
();

621 i‡((
§c˛k
 =
RCC_I2C1CLKSOURCE_HSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSIRDY
)))

623 
‰equícy
 = 
HSI_VALUE
;

626 i‡(
§c˛k
 =
RCC_I2C1CLKSOURCE_SYSCLK
)

628 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

633 
‰equícy
 = 0U;

637 #i‡
	`deföed
(
I2C2
)

638 
RCC_PERIPHCLK_I2C2
:

642 i‡(
	`READ_BIT
(
RCC
->
APB1ENR
, (
RCC_APB1ENR_I2C2EN
))==RCC_APB1ENR_I2C2EN)

644 
‰equícy
 = 
	`HAL_RCC_GëPCLK1Fªq
();

648 
‰equícy
 = 0U;

654 #i‡
	`deföed
(
RCC_CCIPR_I2C3SEL
)

655 
RCC_PERIPHCLK_I2C3
:

658 
§c˛k
 = 
	`__HAL_RCC_GET_I2C3_SOURCE
();

661 i‡(
§c˛k
 =
RCC_I2C3CLKSOURCE_PCLK1
)

663 
‰equícy
 = 
	`HAL_RCC_GëPCLK1Fªq
();

666 i‡((
§c˛k
 =
RCC_I2C3CLKSOURCE_HSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSIRDY
)))

668 
‰equícy
 = 
HSI_VALUE
;

671 i‡(
§c˛k
 =
RCC_I2C3CLKSOURCE_SYSCLK
)

673 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

678 
‰equícy
 = 0U;

688 (
‰equícy
);

689 
	}
}

695 
	$HAL_RCCEx_E«bÀLSECSS
()

697 
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSECSSON
) ;

698 
	}
}

707 
	$HAL_RCCEx_DißbÀLSECSS
()

710 
	`CLEAR_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSECSSON
) ;

713 
	`__HAL_RCC_DISABLE_IT
(
RCC_IT_LSECSS
);

714 
	}
}

721 
	$HAL_RCCEx_E«bÀLSECSS_IT
()

724 
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_LSECSSON
) ;

727 
	`__HAL_RCC_ENABLE_IT
(
RCC_IT_LSECSS
);

730 
	`__HAL_RCC_LSECSS_EXTI_ENABLE_IT
();

731 
	`__HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE
();

732 
	}
}

738 
	$HAL_RCCEx_LSECSS_IRQH™dÀr
()

741 if(
	`__HAL_RCC_GET_IT
(
RCC_IT_LSECSS
))

744 
	`HAL_RCCEx_LSECSS_CÆlback
();

747 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_LSECSS
);

749 
	}
}

755 
__wók
 
	$HAL_RCCEx_LSECSS_CÆlback
()

760 
	}
}

762 #i‡
deföed
(
SYSCFG_CFGR3_ENREF_HSI48
)

768 
	$HAL_RCCEx_E«bÀHSI48_VREFINT
()

771 
	`SET_BIT
 (
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENREF_HSI48
);

772 
	}
}

779 
	$HAL_RCCEx_DißbÀHSI48_VREFINT
()

782 
	`CLEAR_BIT
(
SYSCFG
->
CFGR3
, 
SYSCFG_CFGR3_ENREF_HSI48
);

783 
	}
}

791 #i‡
deföed
 (
CRS
)

862 
	$HAL_RCCEx_CRSC⁄fig
(
RCC_CRSInôTy≥Def
 *
pInô
)

864 
uöt32_t
 
vÆue
 = 0;

867 
	`as£π_∑øm
(
	`IS_RCC_CRS_SYNC_DIV
(
pInô
->
PªsˇÀr
));

868 
	`as£π_∑øm
(
	`IS_RCC_CRS_SYNC_SOURCE
(
pInô
->
Sour˚
));

869 
	`as£π_∑øm
(
	`IS_RCC_CRS_SYNC_POLARITY
(
pInô
->
Pﬁ¨ôy
));

870 
	`as£π_∑øm
(
	`IS_RCC_CRS_RELOADVALUE
(
pInô
->
RñﬂdVÆue
));

871 
	`as£π_∑øm
(
	`IS_RCC_CRS_ERRORLIMIT
(
pInô
->
Eº‹LimôVÆue
));

872 
	`as£π_∑øm
(
	`IS_RCC_CRS_HSI48CALIBRATION
(
pInô
->
HSI48CÆibøti⁄VÆue
));

877 
	`__HAL_RCC_CRS_FORCE_RESET
();

878 
	`__HAL_RCC_CRS_RELEASE_RESET
();

883 
vÆue
 = (
pInô
->
PªsˇÀr
 |ÖInô->
Sour˚
 |ÖInô->
Pﬁ¨ôy
);

885 
vÆue
 |
pInô
->
RñﬂdVÆue
;

887 
vÆue
 |(
pInô
->
Eº‹LimôVÆue
 << 
CRS_CFGR_FELIM_BITNUMBER
);

888 
	`WRITE_REG
(
CRS
->
CFGR
, 
vÆue
);

892 
	`MODIFY_REG
(
CRS
->
CR
, 
CRS_CR_TRIM
, (
pInô
->
HSI48CÆibøti⁄VÆue
 << 
CRS_CR_TRIM_BITNUMBER
));

897 
	`SET_BIT
(
CRS
->
CR
, 
CRS_CR_AUTOTRIMEN
 | 
CRS_CR_CEN
);

898 
	}
}

904 
	$HAL_RCCEx_CRSSo·w¨eSynchr⁄iz©i⁄Gíî©e
()

906 
	`SET_BIT
(
CRS
->
CR
, 
CRS_CR_SWSYNC
);

907 
	}
}

914 
	$HAL_RCCEx_CRSGëSynchr⁄iz©i⁄Info
(
RCC_CRSSynchroInfoTy≥Def
 *
pSynchroInfo
)

917 
	`as£π_∑øm
(
pSynchroInfo
 !
NULL
);

920 
pSynchroInfo
->
RñﬂdVÆue
 = (
uöt32_t
)(
	`READ_BIT
(
CRS
->
CFGR
, 
CRS_CFGR_RELOAD
));

923 
pSynchroInfo
->
HSI48CÆibøti⁄VÆue
 = (
uöt32_t
)(
	`READ_BIT
(
CRS
->
CR
, 
CRS_CR_TRIM
Ë>> 
CRS_CR_TRIM_BITNUMBER
);

926 
pSynchroInfo
->
FªqEº‹C≠tuª
 = (
uöt32_t
)(
	`READ_BIT
(
CRS
->
ISR
, 
CRS_ISR_FECAP
Ë>> 
CRS_ISR_FECAP_BITNUMBER
);

929 
pSynchroInfo
->
FªqEº‹Dúe˘i⁄
 = (
uöt32_t
)(
	`READ_BIT
(
CRS
->
ISR
, 
CRS_ISR_FEDIR
));

930 
	}
}

947 
uöt32_t
 
	$HAL_RCCEx_CRSWaôSynchr⁄iz©i⁄
(
uöt32_t
 
Timeout
)

949 
uöt32_t
 
¸s°©us
 = 
RCC_CRS_NONE
;

950 
uöt32_t
 
tick°¨t
 = 0U;

953 
tick°¨t
 = 
	`HAL_GëTick
();

958 if(
Timeout
 !
HAL_MAX_DELAY
)

960 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

962 
¸s°©us
 = 
RCC_CRS_TIMEOUT
;

966 if(
	`__HAL_RCC_CRS_GET_FLAG
(
RCC_CRS_FLAG_SYNCOK
))

969 
¸s°©us
 |
RCC_CRS_SYNCOK
;

972 
	`__HAL_RCC_CRS_CLEAR_FLAG
(
RCC_CRS_FLAG_SYNCOK
);

976 if(
	`__HAL_RCC_CRS_GET_FLAG
(
RCC_CRS_FLAG_SYNCWARN
))

979 
¸s°©us
 |
RCC_CRS_SYNCWARN
;

982 
	`__HAL_RCC_CRS_CLEAR_FLAG
(
RCC_CRS_FLAG_SYNCWARN
);

986 if(
	`__HAL_RCC_CRS_GET_FLAG
(
RCC_CRS_FLAG_TRIMOVF
))

989 
¸s°©us
 |
RCC_CRS_TRIMOVF
;

992 
	`__HAL_RCC_CRS_CLEAR_FLAG
(
RCC_CRS_FLAG_TRIMOVF
);

996 if(
	`__HAL_RCC_CRS_GET_FLAG
(
RCC_CRS_FLAG_SYNCERR
))

999 
¸s°©us
 |
RCC_CRS_SYNCERR
;

1002 
	`__HAL_RCC_CRS_CLEAR_FLAG
(
RCC_CRS_FLAG_SYNCERR
);

1006 if(
	`__HAL_RCC_CRS_GET_FLAG
(
RCC_CRS_FLAG_SYNCMISS
))

1009 
¸s°©us
 |
RCC_CRS_SYNCMISS
;

1012 
	`__HAL_RCC_CRS_CLEAR_FLAG
(
RCC_CRS_FLAG_SYNCMISS
);

1016 if(
	`__HAL_RCC_CRS_GET_FLAG
(
RCC_CRS_FLAG_ESYNC
))

1019 
	`__HAL_RCC_CRS_CLEAR_FLAG
(
RCC_CRS_FLAG_ESYNC
);

1021 } 
RCC_CRS_NONE
 =
¸s°©us
);

1023  
¸s°©us
;

1024 
	}
}

1030 
	$HAL_RCCEx_CRS_IRQH™dÀr
()

1032 
uöt32_t
 
¸£º‹
 = 
RCC_CRS_NONE
;

1034 
uöt32_t
 
ôÊags
 = 
	`READ_REG
(
CRS
->
ISR
);

1035 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
CRS
->
CR
);

1038 if(((
ôÊags
 & 
RCC_CRS_FLAG_SYNCOK
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
RCC_CRS_IT_SYNCOK
) != RESET))

1041 
	`WRITE_REG
(
CRS
->
ICR
, 
CRS_ICR_SYNCOKC
);

1044 
	`HAL_RCCEx_CRS_SyncOkCÆlback
();

1047 if(((
ôÊags
 & 
RCC_CRS_FLAG_SYNCWARN
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
RCC_CRS_IT_SYNCWARN
) != RESET))

1050 
	`WRITE_REG
(
CRS
->
ICR
, 
CRS_ICR_SYNCWARNC
);

1053 
	`HAL_RCCEx_CRS_SyncW¨nCÆlback
();

1056 if(((
ôÊags
 & 
RCC_CRS_FLAG_ESYNC
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
RCC_CRS_IT_ESYNC
) != RESET))

1059 
	`WRITE_REG
(
CRS
->
ICR
, 
CRS_ICR_ESYNCC
);

1062 
	`HAL_RCCEx_CRS_Ex≥˘edSyncCÆlback
();

1067 if(((
ôÊags
 & 
RCC_CRS_FLAG_ERR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
RCC_CRS_IT_ERR
) != RESET))

1069 if((
ôÊags
 & 
RCC_CRS_FLAG_SYNCERR
Ë!
RESET
)

1071 
¸£º‹
 |
RCC_CRS_SYNCERR
;

1073 if((
ôÊags
 & 
RCC_CRS_FLAG_SYNCMISS
Ë!
RESET
)

1075 
¸£º‹
 |
RCC_CRS_SYNCMISS
;

1077 if((
ôÊags
 & 
RCC_CRS_FLAG_TRIMOVF
Ë!
RESET
)

1079 
¸£º‹
 |
RCC_CRS_TRIMOVF
;

1083 
	`WRITE_REG
(
CRS
->
ICR
, 
CRS_ICR_ERRC
);

1086 
	`HAL_RCCEx_CRS_Eº‹CÆlback
(
¸£º‹
);

1089 
	}
}

1095 
__wók
 
	$HAL_RCCEx_CRS_SyncOkCÆlback
()

1100 
	}
}

1106 
__wók
 
	$HAL_RCCEx_CRS_SyncW¨nCÆlback
()

1111 
	}
}

1117 
__wók
 
	$HAL_RCCEx_CRS_Ex≥˘edSyncCÆlback
()

1122 
	}
}

1133 
__wók
 
	$HAL_RCCEx_CRS_Eº‹CÆlback
(
uöt32_t
 
Eº‹
)

1136 
	`UNUSED
(
Eº‹
);

1141 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_tim.c

130 
	~"°m32l0xx_hÆ.h
"

136 #ifde‡
HAL_TIM_MODULE_ENABLED


151 
TIM_Ba£_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_Ba£_InôTy≥Def
 *
Såu˘uª
);

152 
TIM_OC1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

153 
TIM_OC2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

154 
TIM_OC3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

155 
TIM_OC4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

156 
TIM_TI1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
, uöt32_à
TIM_ICFûãr
);

157 
TIM_TI1_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
);

158 
TIM_TI2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
, uöt32_à
TIM_ICFûãr
);

159 
TIM_TI2_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
);

160 
TIM_TI3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
, uöt32_à
TIM_ICFûãr
);

161 
TIM_TI4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
, uöt32_à
TIM_ICFûãr
);

162 
TIM_ETR_SëC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_ExtTRGPªsˇÀr
, uöt32_à
TIM_ExtTRGPﬁ¨ôy
, uöt32_à
ExtTRGFûãr
);

163 
TIM_ITRx_SëC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
I≈utTriggîSour˚
);

164 
TIM_CCxCh™√lCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lSèã
);

165 
TIM_DMAPîiodEœp£dC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

166 
TIM_DMATriggîC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

167 
TIM_SœveTimî_SëC⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
,
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
);

207 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

210 if(
htim
 =
NULL
)

212  
HAL_ERROR
;

216 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

217 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

218 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

219 
	`as£π_∑øm
(
	`IS_TIM_PERIOD
(
htim
->
Inô
.
Pîiod
));

220 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER
(
htim
->
Inô
.
PªsˇÀr
));

222 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

225 
htim
->
Lock
 = 
HAL_UNLOCKED
;

228 
	`HAL_TIM_Ba£_M•Inô
(
htim
);

232 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

235 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

238 
htim
->
Sèã

HAL_TIM_STATE_READY
;

240  
HAL_OK
;

241 
	}
}

248 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

251 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

253 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

256 
	`__HAL_TIM_DISABLE
(
htim
);

259 
	`HAL_TIM_Ba£_M•DeInô
(
htim
);

262 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

265 
	`__HAL_UNLOCK
(
htim
);

267  
HAL_OK
;

268 
	}
}

275 
__wók
 
	$HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

278 
	`UNUSED
(
htim
);

283 
	}
}

290 
__wók
 
	$HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

293 
	`UNUSED
(
htim
);

298 
	}
}

305 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
)

308 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

311 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

314 
	`__HAL_TIM_ENABLE
(
htim
);

317 
htim
->
Sèã

HAL_TIM_STATE_READY
;

320  
HAL_OK
;

321 
	}
}

328 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›
(
TIM_H™dÀTy≥Def
 *
htim
)

331 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

334 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

337 
	`__HAL_TIM_DISABLE
(
htim
);

340 
htim
->
Sèã

HAL_TIM_STATE_READY
;

343  
HAL_OK
;

344 
	}
}

351 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

354 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

357 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

360 
	`__HAL_TIM_ENABLE
(
htim
);

363  
HAL_OK
;

364 
	}
}

371 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

374 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

376 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

379 
	`__HAL_TIM_DISABLE
(
htim
);

382  
HAL_OK
;

383 
	}
}

392 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
)

395 
	`as£π_∑øm
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In°™˚
));

397 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

399  
HAL_BUSY
;

401 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

403 if((
pD©a
 =0U ) && (
Lígth
 > 0U))

405  
HAL_ERROR
;

409 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

413 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

416 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

419 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
ARR
, 
Lígth
);

422 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

425 
	`__HAL_TIM_ENABLE
(
htim
);

428  
HAL_OK
;

429 
	}
}

436 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
)

439 
	`as£π_∑øm
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In°™˚
));

442 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

445 
	`__HAL_TIM_DISABLE
(
htim
);

448 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

451  
HAL_OK
;

452 
	}
}

486 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Inô
(
TIM_H™dÀTy≥Def
* 
htim
)

489 if(
htim
 =
NULL
)

491  
HAL_ERROR
;

495 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

496 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

497 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

498 
	`as£π_∑øm
(
	`IS_TIM_PERIOD
(
htim
->
Inô
.
Pîiod
));

499 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER
(
htim
->
Inô
.
PªsˇÀr
));

501 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

504 
htim
->
Lock
 = 
HAL_UNLOCKED
;

507 
	`HAL_TIM_OC_M•Inô
(
htim
);

510 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

513 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

516 
htim
->
Sèã

HAL_TIM_STATE_READY
;

518  
HAL_OK
;

519 
	}
}

526 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

529 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

531 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

534 
	`__HAL_TIM_DISABLE
(
htim
);

537 
	`HAL_TIM_OC_M•DeInô
(
htim
);

540 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

543 
	`__HAL_UNLOCK
(
htim
);

545  
HAL_OK
;

546 
	}
}

553 
__wók
 
	$HAL_TIM_OC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

556 
	`UNUSED
(
htim
);

561 
	}
}

568 
__wók
 
	$HAL_TIM_OC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

571 
	`UNUSED
(
htim
);

576 
	}
}

589 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

592 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

595 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

598 
	`__HAL_TIM_ENABLE
(
htim
);

601  
HAL_OK
;

602 
	}
}

615 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

618 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

621 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

624 
	`__HAL_TIM_DISABLE
(
htim
);

627  
HAL_OK
;

628 
	}
}

641 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

644 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

646 
Ch™√l
)

648 
TIM_CHANNEL_1
:

651 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

655 
TIM_CHANNEL_2
:

658 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

662 
TIM_CHANNEL_3
:

665 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

669 
TIM_CHANNEL_4
:

672 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

681 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

684 
	`__HAL_TIM_ENABLE
(
htim
);

687  
HAL_OK
;

688 
	}
}

701 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

704 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

706 
Ch™√l
)

708 
TIM_CHANNEL_1
:

711 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

715 
TIM_CHANNEL_2
:

718 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

722 
TIM_CHANNEL_3
:

725 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

729 
TIM_CHANNEL_4
:

732 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

741 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

744 
	`__HAL_TIM_DISABLE
(
htim
);

747  
HAL_OK
;

748 
	}
}

763 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

766 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

768 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

770  
HAL_BUSY
;

772 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

774 if(((
uöt32_t
)
pD©a
 =0U ) && (
Lígth
 > 0U))

776  
HAL_ERROR
;

780 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

783 
Ch™√l
)

785 
TIM_CHANNEL_1
:

788 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

791 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

794 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
);

797 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

801 
TIM_CHANNEL_2
:

804 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

807 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

810 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
);

813 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

817 
TIM_CHANNEL_3
:

820 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

823 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

826 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
,
Lígth
);

829 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

833 
TIM_CHANNEL_4
:

836 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

839 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

842 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
);

845 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

854 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

857 
	`__HAL_TIM_ENABLE
(
htim
);

860  
HAL_OK
;

861 
	}
}

874 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

877 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

879 
Ch™√l
)

881 
TIM_CHANNEL_1
:

884 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

888 
TIM_CHANNEL_2
:

891 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

895 
TIM_CHANNEL_3
:

898 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

902 
TIM_CHANNEL_4
:

905 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

914 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

917 
	`__HAL_TIM_DISABLE
(
htim
);

920 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

923  
HAL_OK
;

924 
	}
}

959 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

962 if(
htim
 =
NULL
)

964  
HAL_ERROR
;

968 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

969 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

970 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

971 
	`as£π_∑øm
(
	`IS_TIM_PERIOD
(
htim
->
Inô
.
Pîiod
));

972 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER
(
htim
->
Inô
.
PªsˇÀr
));

974 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

977 
htim
->
Lock
 = 
HAL_UNLOCKED
;

980 
	`HAL_TIM_PWM_M•Inô
(
htim
);

984 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

987 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

990 
htim
->
Sèã

HAL_TIM_STATE_READY
;

992  
HAL_OK
;

993 
	}
}

1000 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1003 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1005 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1008 
	`__HAL_TIM_DISABLE
(
htim
);

1011 
	`HAL_TIM_PWM_M•DeInô
(
htim
);

1014 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

1017 
	`__HAL_UNLOCK
(
htim
);

1019  
HAL_OK
;

1020 
	}
}

1027 
__wók
 
	$HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1030 
	`UNUSED
(
htim
);

1035 
	}
}

1042 
__wók
 
	$HAL_TIM_PWM_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1045 
	`UNUSED
(
htim
);

1050 
	}
}

1063 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1066 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1069 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1072 
	`__HAL_TIM_ENABLE
(
htim
);

1075  
HAL_OK
;

1076 
	}
}

1089 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1092 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1095 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1098 
	`__HAL_TIM_DISABLE
(
htim
);

1101 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1104  
HAL_OK
;

1105 
	}
}

1118 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1121 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1123 
Ch™√l
)

1125 
TIM_CHANNEL_1
:

1128 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1132 
TIM_CHANNEL_2
:

1135 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1139 
TIM_CHANNEL_3
:

1142 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1146 
TIM_CHANNEL_4
:

1149 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1158 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1161 
	`__HAL_TIM_ENABLE
(
htim
);

1164  
HAL_OK
;

1165 
	}
}

1178 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›_IT
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1181 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1183 
Ch™√l
)

1185 
TIM_CHANNEL_1
:

1188 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1192 
TIM_CHANNEL_2
:

1195 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1199 
TIM_CHANNEL_3
:

1202 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1206 
TIM_CHANNEL_4
:

1209 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1218 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1221 
	`__HAL_TIM_DISABLE
(
htim
);

1224  
HAL_OK
;

1225 
	}
}

1241 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1244 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1246 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

1248  
HAL_BUSY
;

1250 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

1252 if(((
uöt32_t
)
pD©a
 =0U ) && (
Lígth
 > 0U))

1254  
HAL_ERROR
;

1258 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1261 
Ch™√l
)

1263 
TIM_CHANNEL_1
:

1266 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1269 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1272 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
);

1275 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1279 
TIM_CHANNEL_2
:

1282 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1285 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1288 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
);

1291 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1295 
TIM_CHANNEL_3
:

1298 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1301 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1304 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
,
Lígth
);

1307 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1311 
TIM_CHANNEL_4
:

1314 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1317 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1320 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
);

1323 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1332 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1335 
	`__HAL_TIM_ENABLE
(
htim
);

1338  
HAL_OK
;

1339 
	}
}

1352 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1355 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1357 
Ch™√l
)

1359 
TIM_CHANNEL_1
:

1362 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1366 
TIM_CHANNEL_2
:

1369 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1373 
TIM_CHANNEL_3
:

1376 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1380 
TIM_CHANNEL_4
:

1383 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1392 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1395 
	`__HAL_TIM_DISABLE
(
htim
);

1398 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1401  
HAL_OK
;

1402 
	}
}

1435 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1438 if(
htim
 =
NULL
)

1440  
HAL_ERROR
;

1444 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1445 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1446 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1447 
	`as£π_∑øm
(
	`IS_TIM_PERIOD
(
htim
->
Inô
.
Pîiod
));

1448 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER
(
htim
->
Inô
.
PªsˇÀr
));

1450 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

1453 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1456 
	`HAL_TIM_IC_M•Inô
(
htim
);

1460 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

1463 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

1466 
htim
->
Sèã

HAL_TIM_STATE_READY
;

1468  
HAL_OK
;

1469 
	}
}

1476 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1479 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1481 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1484 
	`__HAL_TIM_DISABLE
(
htim
);

1487 
	`HAL_TIM_IC_M•DeInô
(
htim
);

1490 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

1493 
	`__HAL_UNLOCK
(
htim
);

1495  
HAL_OK
;

1496 
	}
}

1503 
__wók
 
	$HAL_TIM_IC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1506 
	`UNUSED
(
htim
);

1511 
	}
}

1518 
__wók
 
	$HAL_TIM_IC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1521 
	`UNUSED
(
htim
);

1526 
	}
}

1538 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1541 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1544 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1547 
	`__HAL_TIM_ENABLE
(
htim
);

1550  
HAL_OK
;

1551 
	}
}

1564 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1567 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1570 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1573 
	`__HAL_TIM_DISABLE
(
htim
);

1576  
HAL_OK
;

1577 
	}
}

1590 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ_IT
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1593 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1595 
Ch™√l
)

1597 
TIM_CHANNEL_1
:

1600 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1604 
TIM_CHANNEL_2
:

1607 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1611 
TIM_CHANNEL_3
:

1614 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1618 
TIM_CHANNEL_4
:

1621 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1629 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1632 
	`__HAL_TIM_ENABLE
(
htim
);

1635  
HAL_OK
;

1636 
	}
}

1649 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1652 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1654 
Ch™√l
)

1656 
TIM_CHANNEL_1
:

1659 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1663 
TIM_CHANNEL_2
:

1666 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1670 
TIM_CHANNEL_3
:

1673 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1677 
TIM_CHANNEL_4
:

1680 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1689 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1692 
	`__HAL_TIM_DISABLE
(
htim
);

1695  
HAL_OK
;

1696 
	}
}

1711 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1714 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1715 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

1717 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

1719  
HAL_BUSY
;

1721 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

1723 if((
pD©a
 =0U ) && (
Lígth
 > 0U))

1725  
HAL_ERROR
;

1729 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1733 
Ch™√l
)

1735 
TIM_CHANNEL_1
:

1738 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1741 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1744 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a
, 
Lígth
);

1747 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1751 
TIM_CHANNEL_2
:

1754 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1757 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1760 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a
, 
Lígth
);

1763 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1767 
TIM_CHANNEL_3
:

1770 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1773 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1776 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)&htim->
In°™˚
->
CCR3
, (uöt32_t)
pD©a
, 
Lígth
);

1779 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1783 
TIM_CHANNEL_4
:

1786 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1789 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1792 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)&htim->
In°™˚
->
CCR4
, (uöt32_t)
pD©a
, 
Lígth
);

1795 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1804 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1807 
	`__HAL_TIM_ENABLE
(
htim
);

1810  
HAL_OK
;

1811 
	}
}

1824 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1827 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1828 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

1830 
Ch™√l
)

1832 
TIM_CHANNEL_1
:

1835 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1839 
TIM_CHANNEL_2
:

1842 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1846 
TIM_CHANNEL_3
:

1849 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1853 
TIM_CHANNEL_4
:

1856 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1865 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1868 
	`__HAL_TIM_DISABLE
(
htim
);

1871 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1874  
HAL_OK
;

1875 
	}
}

1912 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
O√Pul£Mode
)

1915 if(
htim
 =
NULL
)

1917  
HAL_ERROR
;

1921 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

1922 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1923 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1924 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
O√Pul£Mode
));

1925 
	`as£π_∑øm
(
	`IS_TIM_PERIOD
(
htim
->
Inô
.
Pîiod
));

1926 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER
(
htim
->
Inô
.
PªsˇÀr
));

1928 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

1931 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1934 
	`HAL_TIM_O√Pul£_M•Inô
(
htim
);

1938 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

1941 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

1944 
htim
->
In°™˚
->
CR1
 &~
TIM_CR1_OPM
;

1947 
htim
->
In°™˚
->
CR1
 |
O√Pul£Mode
;

1950 
htim
->
Sèã

HAL_TIM_STATE_READY
;

1952  
HAL_OK
;

1953 
	}
}

1960 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1963 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

1965 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1968 
	`__HAL_TIM_DISABLE
(
htim
);

1971 
	`HAL_TIM_O√Pul£_M•DeInô
(
htim
);

1974 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

1977 
	`__HAL_UNLOCK
(
htim
);

1979  
HAL_OK
;

1980 
	}
}

1987 
__wók
 
	$HAL_TIM_O√Pul£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1990 
	`UNUSED
(
htim
);

1995 
	}
}

2002 
__wók
 
	$HAL_TIM_O√Pul£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2005 
	`UNUSED
(
htim
);

2010 
	}
}

2020 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2031 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2032 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2035  
HAL_OK
;

2036 
	}
}

2047 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2055 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2056 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2059 
	`__HAL_TIM_DISABLE
(
htim
);

2062  
HAL_OK
;

2063 
	}
}

2074 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2086 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2089 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2091 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2092 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2095  
HAL_OK
;

2096 
	}
}

2107 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2110 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2113 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2120 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2121 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2124 
	`__HAL_TIM_DISABLE
(
htim
);

2127  
HAL_OK
;

2128 
	}
}

2161 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Encodî_InôTy≥Def
* 
sC⁄fig
)

2163 
uöt32_t
 
tmpsm¸
 = 0U;

2164 
uöt32_t
 
tmpccmr1
 = 0U;

2165 
uöt32_t
 
tmpc˚r
 = 0U;

2168 if(
htim
 =
NULL
)

2170  
HAL_ERROR
;

2174 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2175 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
sC⁄fig
->
EncodîMode
));

2176 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
IC1Sñe˘i⁄
));

2177 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
IC2Sñe˘i⁄
));

2178 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
IC1Pﬁ¨ôy
));

2179 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
IC2Pﬁ¨ôy
));

2180 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC1PªsˇÀr
));

2181 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC2PªsˇÀr
));

2182 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC1Fûãr
));

2183 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC2Fûãr
));

2184 
	`as£π_∑øm
(
	`IS_TIM_PERIOD
(
htim
->
Inô
.
Pîiod
));

2185 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER
(
htim
->
Inô
.
PªsˇÀr
));

2187 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

2190 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2193 
	`HAL_TIM_Encodî_M•Inô
(
htim
);

2197 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

2200 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

2203 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

2206 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

2209 
tmpccmr1
 = 
htim
->
In°™˚
->
CCMR1
;

2212 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

2215 
tmpsm¸
 |
sC⁄fig
->
EncodîMode
;

2218 
tmpccmr1
 &~(
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_CC2S
);

2219 
tmpccmr1
 |(
sC⁄fig
->
IC1Sñe˘i⁄
 | (sC⁄fig->
IC2Sñe˘i⁄
 << 8U));

2222 
tmpccmr1
 &~(
TIM_CCMR1_IC1PSC
 | 
TIM_CCMR1_IC2PSC
);

2223 
tmpccmr1
 &~(
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC2F
);

2224 
tmpccmr1
 |
sC⁄fig
->
IC1PªsˇÀr
 | (sC⁄fig->
IC2PªsˇÀr
 << 8U);

2225 
tmpccmr1
 |(
sC⁄fig
->
IC1Fûãr
 << 4UË| (sC⁄fig->
IC2Fûãr
 << 12U);

2228 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC2P
);

2229 
tmpc˚r
 &~(
TIM_CCER_CC1NP
 | 
TIM_CCER_CC2NP
);

2230 
tmpc˚r
 |
sC⁄fig
->
IC1Pﬁ¨ôy
 | (sC⁄fig->
IC2Pﬁ¨ôy
 << 4U);

2233 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

2236 
htim
->
In°™˚
->
CCMR1
 = 
tmpccmr1
;

2239 
htim
->
In°™˚
->
CCER
 = 
tmpc˚r
;

2242 
htim
->
Sèã

HAL_TIM_STATE_READY
;

2244  
HAL_OK
;

2245 
	}
}

2252 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2255 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

2257 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2260 
	`__HAL_TIM_DISABLE
(
htim
);

2263 
	`HAL_TIM_Encodî_M•DeInô
(
htim
);

2266 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

2269 
	`__HAL_UNLOCK
(
htim
);

2271  
HAL_OK
;

2272 
	}
}

2280 
__wók
 
	$HAL_TIM_Encodî_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

2283 
	`UNUSED
(
htim
);

2288 
	}
}

2296 
__wók
 
	$HAL_TIM_Encodî_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2299 
	`UNUSED
(
htim
);

2304 
	}
}

2316 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2319 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2322 
Ch™√l
)

2324 
TIM_CHANNEL_1
:

2326 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2329 
TIM_CHANNEL_2
:

2331 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2336 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2337 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2342 
	`__HAL_TIM_ENABLE
(
htim
);

2345  
HAL_OK
;

2346 
	}
}

2358 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2361 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2365 
Ch™√l
)

2367 
TIM_CHANNEL_1
:

2369 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2372 
TIM_CHANNEL_2
:

2374 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2379 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2380 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2385 
	`__HAL_TIM_DISABLE
(
htim
);

2388  
HAL_OK
;

2389 
	}
}

2401 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2404 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2408 
Ch™√l
)

2410 
TIM_CHANNEL_1
:

2412 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2413 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2416 
TIM_CHANNEL_2
:

2418 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2419 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2424 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2425 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2426 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2427 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2433 
	`__HAL_TIM_ENABLE
(
htim
);

2436  
HAL_OK
;

2437 
	}
}

2449 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2452 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2456 if(
Ch™√l
 =
TIM_CHANNEL_1
)

2458 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2461 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2463 if(
Ch™√l
 =
TIM_CHANNEL_2
)

2465 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2468 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2472 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2473 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2476 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2477 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2481 
	`__HAL_TIM_DISABLE
(
htim
);

2484 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2487  
HAL_OK
;

2488 
	}
}

2503 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a1
, uöt32_à*
pD©a2
, 
uöt16_t
 
Lígth
)

2506 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

2508 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

2510  
HAL_BUSY
;

2512 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

2514 if((((
pD©a1
 =0UË|| (
pD©a2
 =0UË)Ë&& (
Lígth
 > 0U))

2516  
HAL_ERROR
;

2520 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2524 
Ch™√l
)

2526 
TIM_CHANNEL_1
:

2529 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2532 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2535 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_à)
pD©a1
, 
Lígth
);

2538 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2541 
	`__HAL_TIM_ENABLE
(
htim
);

2544 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2548 
TIM_CHANNEL_2
:

2551 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2554 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
;

2556 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a2
, 
Lígth
);

2559 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2562 
	`__HAL_TIM_ENABLE
(
htim
);

2565 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2569 
TIM_CHANNEL_ALL
:

2572 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2575 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2578 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a1
, 
Lígth
);

2581 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2584 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2587 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a2
, 
Lígth
);

2590 
	`__HAL_TIM_ENABLE
(
htim
);

2593 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2594 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2597 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2599 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2607  
HAL_OK
;

2608 
	}
}

2620 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2623 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

2627 if(
Ch™√l
 =
TIM_CHANNEL_1
)

2629 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2632 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2634 if(
Ch™√l
 =
TIM_CHANNEL_2
)

2636 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2639 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2643 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2644 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2647 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2648 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2652 
	`__HAL_TIM_DISABLE
(
htim
);

2655 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2658  
HAL_OK
;

2659 
	}
}

2683 
	$HAL_TIM_IRQH™dÀr
(
TIM_H™dÀTy≥Def
 *
htim
)

2686 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC1
Ë!
RESET
)

2688 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC1
Ë!=
RESET
)

2691 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC1
);

2692 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

2695 if((
htim
->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_CC1S
) != 0x00U)

2697 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2702 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2703 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2705 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2710 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC2
Ë!
RESET
)

2712 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC2
Ë!=
RESET
)

2714 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC2
);

2715 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

2717 if((
htim
->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_CC2S
) != 0x00U)

2719 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2724 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2725 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2727 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2731 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC3
Ë!
RESET
)

2733 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC3
Ë!=
RESET
)

2735 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC3
);

2736 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

2738 if((
htim
->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_CC3S
) != 0x00U)

2740 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2745 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2746 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2748 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2752 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC4
Ë!
RESET
)

2754 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC4
Ë!=
RESET
)

2756 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC4
);

2757 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

2759 if((
htim
->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_CC4S
) != 0x00U)

2761 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2766 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2767 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2769 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2773 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_UPDATE
Ë!
RESET
)

2775 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_UPDATE
Ë!=
RESET
)

2777 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_UPDATE
);

2778 
	`HAL_TIM_PîiodEœp£dCÆlback
(
htim
);

2782 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_TRIGGER
Ë!
RESET
)

2784 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_TRIGGER
Ë!=
RESET
)

2786 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_TRIGGER
);

2787 
	`HAL_TIM_TriggîCÆlback
(
htim
);

2790 
	}
}

2826 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

2829 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

2830 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
sC⁄fig
->
OCMode
));

2831 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
sC⁄fig
->
OCPﬁ¨ôy
));

2834 
	`__HAL_LOCK
(
htim
);

2836 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2838 
Ch™√l
)

2840 
TIM_CHANNEL_1
:

2842 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

2844 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2848 
TIM_CHANNEL_2
:

2850 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2852 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2856 
TIM_CHANNEL_3
:

2858 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

2860 
	`TIM_OC3_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2864 
TIM_CHANNEL_4
:

2866 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

2868 
	`TIM_OC4_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2875 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2877 
	`__HAL_UNLOCK
(
htim
);

2879  
HAL_OK
;

2880 
	}
}

2895 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_IC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

2898 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

2899 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
ICPﬁ¨ôy
));

2900 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
ICSñe˘i⁄
));

2901 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
ICPªsˇÀr
));

2902 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
ICFûãr
));

2904 
	`__HAL_LOCK
(
htim
);

2906 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2908 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

2911 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
,

2912 
sC⁄fig
->
ICPﬁ¨ôy
,

2913 
sC⁄fig
->
ICSñe˘i⁄
,

2914 
sC⁄fig
->
ICFûãr
);

2917 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

2920 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
ICPªsˇÀr
;

2922 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

2925 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2927 
	`TIM_TI2_SëC⁄fig
(
htim
->
In°™˚
,

2928 
sC⁄fig
->
ICPﬁ¨ôy
,

2929 
sC⁄fig
->
ICSñe˘i⁄
,

2930 
sC⁄fig
->
ICFûãr
);

2933 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
;

2936 
htim
->
In°™˚
->
CCMR1
 |(
sC⁄fig
->
ICPªsˇÀr
 << 8U);

2938 i‡(
Ch™√l
 =
TIM_CHANNEL_3
)

2941 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

2943 
	`TIM_TI3_SëC⁄fig
(
htim
->
In°™˚
,

2944 
sC⁄fig
->
ICPﬁ¨ôy
,

2945 
sC⁄fig
->
ICSñe˘i⁄
,

2946 
sC⁄fig
->
ICFûãr
);

2949 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC3PSC
;

2952 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
ICPªsˇÀr
;

2957 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

2959 
	`TIM_TI4_SëC⁄fig
(
htim
->
In°™˚
,

2960 
sC⁄fig
->
ICPﬁ¨ôy
,

2961 
sC⁄fig
->
ICSñe˘i⁄
,

2962 
sC⁄fig
->
ICFûãr
);

2965 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC4PSC
;

2968 
htim
->
In°™˚
->
CCMR2
 |(
sC⁄fig
->
ICPªsˇÀr
 << 8U);

2971 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2973 
	`__HAL_UNLOCK
(
htim
);

2975  
HAL_OK
;

2976 
	}
}

2991 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

2993 
	`__HAL_LOCK
(
htim
);

2996 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

2997 
	`as£π_∑øm
(
	`IS_TIM_PWM_MODE
(
sC⁄fig
->
OCMode
));

2998 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
sC⁄fig
->
OCPﬁ¨ôy
));

2999 
	`as£π_∑øm
(
	`IS_TIM_FAST_STATE
(
sC⁄fig
->
OCFa°Mode
));

3001 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3003 
Ch™√l
)

3005 
TIM_CHANNEL_1
:

3007 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3009 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3012 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1PE
;

3015 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1FE
;

3016 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
OCFa°Mode
;

3020 
TIM_CHANNEL_2
:

3022 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3024 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3027 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2PE
;

3030 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2FE
;

3031 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
OCFa°Mode
 << 8U;

3035 
TIM_CHANNEL_3
:

3037 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

3039 
	`TIM_OC3_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3042 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3PE
;

3045 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3FE
;

3046 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
OCFa°Mode
;

3050 
TIM_CHANNEL_4
:

3052 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

3054 
	`TIM_OC4_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3057 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4PE
;

3060 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4FE
;

3061 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
OCFa°Mode
 << 8U;

3069 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3071 
	`__HAL_UNLOCK
(
htim
);

3073  
HAL_OK
;

3074 
	}
}

3091 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_O√Pul£_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
OuçutCh™√l
, uöt32_à
I≈utCh™√l
)

3093 
TIM_OC_InôTy≥Def
 
ãmp1
;

3096 
	`as£π_∑øm
(
	`IS_TIM_OPM_CHANNELS
(
OuçutCh™√l
));

3097 
	`as£π_∑øm
(
	`IS_TIM_OPM_CHANNELS
(
I≈utCh™√l
));

3099 if(
OuçutCh™√l
 !
I≈utCh™√l
)

3101 
	`__HAL_LOCK
(
htim
);

3103 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3106 
ãmp1
.
OCMode
 = 
sC⁄fig
->OCMode;

3107 
ãmp1
.
Pul£
 = 
sC⁄fig
->Pulse;

3108 
ãmp1
.
OCPﬁ¨ôy
 = 
sC⁄fig
->OCPolarity;

3110 
OuçutCh™√l
)

3112 
TIM_CHANNEL_1
:

3114 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3116 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, &
ãmp1
);

3119 
TIM_CHANNEL_2
:

3121 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3123 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, &
ãmp1
);

3129 
I≈utCh™√l
)

3131 
TIM_CHANNEL_1
:

3133 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3135 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
ICPﬁ¨ôy
,

3136 
sC⁄fig
->
ICSñe˘i⁄
, sC⁄fig->
ICFûãr
);

3139 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

3142 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

3143 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI1FP1
;

3146 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

3147 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_TRIGGER
;

3150 
TIM_CHANNEL_2
:

3152 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3154 
	`TIM_TI2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
ICPﬁ¨ôy
,

3155 
sC⁄fig
->
ICSñe˘i⁄
, sC⁄fig->
ICFûãr
);

3158 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
;

3161 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

3162 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI2FP2
;

3165 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

3166 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_TRIGGER
;

3174 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3176 
	`__HAL_UNLOCK
(
htim
);

3178  
HAL_OK
;

3182  
HAL_ERROR
;

3184 
	}
}

3221 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_WrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
,

3222 
uöt32_t
* 
Bur°Buf„r
, uöt32_à
Bur°Lígth
)

3225 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

3226 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
Bur°Ba£Addªss
));

3227 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3228 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
Bur°Lígth
));

3230 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

3232  
HAL_BUSY
;

3234 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

3236 if((
Bur°Buf„r
 =0U ) && (
Bur°Lígth
 > 0U))

3238  
HAL_ERROR
;

3242 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3245 
Bur°Reque°Src
)

3247 
TIM_DMA_UPDATE
:

3250 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

3253 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3256 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3259 
TIM_DMA_CC1
:

3262 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3265 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3268 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8U) + 1U);

3271 
TIM_DMA_CC2
:

3274 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3277 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3280 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8U) + 1U);

3283 
TIM_DMA_CC3
:

3286 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3289 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3292 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8U) + 1U);

3295 
TIM_DMA_CC4
:

3298 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3301 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3304 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8U) + 1U);

3307 
TIM_DMA_TRIGGER
:

3310 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rC∂tCÆlback
 = 
TIM_DMATriggîC∂t
;

3313 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3316 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8U) + 1U);

3323 
htim
->
In°™˚
->
DCR
 = 
Bur°Ba£Addªss
 | 
Bur°Lígth
;

3326 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3328 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3331  
HAL_OK
;

3332 
	}
}

3340 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_WrôeSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
)

3343 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3346 
Bur°Reque°Src
)

3348 
TIM_DMA_UPDATE
:

3350 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

3353 
TIM_DMA_CC1
:

3355 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3358 
TIM_DMA_CC2
:

3360 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3363 
TIM_DMA_CC3
:

3365 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

3368 
TIM_DMA_CC4
:

3370 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

3373 
TIM_DMA_TRIGGER
:

3375 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

3382 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3385  
HAL_OK
;

3386 
	}
}

3423 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_RódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
,

3424 
uöt32_t
 *
Bur°Buf„r
, uöt32_à
Bur°Lígth
)

3427 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

3428 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
Bur°Ba£Addªss
));

3429 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3430 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
Bur°Lígth
));

3432 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

3434  
HAL_BUSY
;

3436 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

3438 if((
Bur°Buf„r
 =0U ) && (
Bur°Lígth
 > 0U))

3440  
HAL_ERROR
;

3444 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3447 
Bur°Reque°Src
)

3449 
TIM_DMA_UPDATE
:

3452 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

3455 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3458 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8U) + 1U);

3461 
TIM_DMA_CC1
:

3464 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3467 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3470 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8U) + 1U);

3473 
TIM_DMA_CC2
:

3476 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3479 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3482 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8U) + 1U);

3485 
TIM_DMA_CC3
:

3488 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3491 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3494 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8U) + 1U);

3497 
TIM_DMA_CC4
:

3500 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3503 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3506 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8U) + 1U);

3509 
TIM_DMA_TRIGGER
:

3512 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rC∂tCÆlback
 = 
TIM_DMATriggîC∂t
;

3515 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3518 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8U) + 1U);

3526 
htim
->
In°™˚
->
DCR
 = 
Bur°Ba£Addªss
 | 
Bur°Lígth
;

3529 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3531 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3534  
HAL_OK
;

3535 
	}
}

3543 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_RódSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
)

3546 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3549 
Bur°Reque°Src
)

3551 
TIM_DMA_UPDATE
:

3553 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

3556 
TIM_DMA_CC1
:

3558 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3561 
TIM_DMA_CC2
:

3563 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3566 
TIM_DMA_CC3
:

3568 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

3571 
TIM_DMA_CC4
:

3573 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

3576 
TIM_DMA_TRIGGER
:

3578 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

3586 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3589  
HAL_OK
;

3590 
	}
}

3607 
HAL_SètusTy≥Def
 
	$HAL_TIM_Gíî©eEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
EvítSour˚
)

3610 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

3611 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
EvítSour˚
));

3614 
	`__HAL_LOCK
(
htim
);

3617 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3620 
htim
->
In°™˚
->
EGR
 = 
EvítSour˚
;

3623 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3625 
	`__HAL_UNLOCK
(
htim
);

3628  
HAL_OK
;

3629 
	}
}

3644 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figOCªfCÀ¨
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_CÀ¨I≈utC⁄figTy≥Def
 * 
sCÀ¨I≈utC⁄fig
, 
uöt32_t
 
Ch™√l
)

3647 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3648 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

3649 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_SOURCE
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSour˚
));

3650 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_POLARITY
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPﬁ¨ôy
));

3651 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_PRESCALER
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
));

3652 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_FILTER
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utFûãr
));

3655 
	`__HAL_LOCK
(
htim
);

3657 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3659 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSour˚
 =
TIM_CLEARINPUTSOURCE_ETR
)

3661 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

3662 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
,

3663 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPﬁ¨ôy
,

3664 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utFûãr
);

3667 
htim
->
In°™˚
->
SMCR
 |
TIM_SMCR_OCCS
;

3670 
Ch™√l
)

3672 
TIM_CHANNEL_1
:

3674 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3677 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1CE
;

3682 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1CE
;

3686 
TIM_CHANNEL_2
:

3688 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3689 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3692 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2CE
;

3697 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2CE
;

3701 
TIM_CHANNEL_3
:

3703 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

3704 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3707 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3CE
;

3712 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3CE
;

3716 
TIM_CHANNEL_4
:

3718 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

3719 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3722 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4CE
;

3727 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4CE
;

3735 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3737 
	`__HAL_UNLOCK
(
htim
);

3739  
HAL_OK
;

3740 
	}
}

3749 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figClockSour˚
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_ClockC⁄figTy≥Def
 * 
sClockSour˚C⁄fig
)

3751 
uöt32_t
 
tmpsm¸
 = 0U;

3754 
	`__HAL_LOCK
(
htim
);

3756 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3759 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE
(
sClockSour˚C⁄fig
->
ClockSour˚
));

3762 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

3763 
tmpsm¸
 &~(
TIM_SMCR_SMS
 | 
TIM_SMCR_TS
);

3764 
tmpsm¸
 &~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

3765 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

3767 
sClockSour˚C⁄fig
->
ClockSour˚
)

3769 
TIM_CLOCKSOURCE_INTERNAL
:

3771 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

3773 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

3777 
TIM_CLOCKSOURCE_ETRMODE1
:

3779 
	`as£π_∑øm
(
	`IS_TIM_ETR_INSTANCE
(
htim
->
In°™˚
));

3780 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSour˚C⁄fig
->
ClockPªsˇÀr
));

3781 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

3782 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

3784 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

3785 
sClockSour˚C⁄fig
->
ClockPªsˇÀr
,

3786 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3787 
sClockSour˚C⁄fig
->
ClockFûãr
);

3789 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

3791 
tmpsm¸
 &~(
TIM_SMCR_SMS
 | 
TIM_SMCR_TS
);

3793 
tmpsm¸
 |(
TIM_SLAVEMODE_EXTERNAL1
 | 
TIM_CLOCKSOURCE_ETRMODE1
);

3795 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

3799 
TIM_CLOCKSOURCE_ETRMODE2
:

3801 
	`as£π_∑øm
(
	`IS_TIM_ETR_INSTANCE
(
htim
->
In°™˚
));

3802 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSour˚C⁄fig
->
ClockPªsˇÀr
));

3803 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

3804 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

3806 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

3807 
sClockSour˚C⁄fig
->
ClockPªsˇÀr
,

3808 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3809 
sClockSour˚C⁄fig
->
ClockFûãr
);

3811 
htim
->
In°™˚
->
SMCR
 |
TIM_SMCR_ECE
;

3815 
TIM_CLOCKSOURCE_TI1
:

3817 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3818 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

3819 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

3820 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

3821 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3822 
sClockSour˚C⁄fig
->
ClockFûãr
);

3823 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI1
);

3826 
TIM_CLOCKSOURCE_TI2
:

3828 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3829 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

3830 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

3831 
	`TIM_TI2_C⁄figI≈utSège
(
htim
->
In°™˚
,

3832 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3833 
sClockSour˚C⁄fig
->
ClockFûãr
);

3834 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI2
);

3837 
TIM_CLOCKSOURCE_TI1ED
:

3839 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3840 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

3841 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

3842 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

3843 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3844 
sClockSour˚C⁄fig
->
ClockFûãr
);

3845 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI1ED
);

3848 
TIM_CLOCKSOURCE_ITR0
:

3850 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3851 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR0
);

3854 
TIM_CLOCKSOURCE_ITR1
:

3856 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3857 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR1
);

3860 
TIM_CLOCKSOURCE_ITR2
:

3862 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3863 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR2
);

3866 
TIM_CLOCKSOURCE_ITR3
:

3868 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3869 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR3
);

3876 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3878 
	`__HAL_UNLOCK
(
htim
);

3880  
HAL_OK
;

3881 
	}
}

3895 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figTI1I≈ut
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
TI1_Sñe˘i⁄
)

3897 
uöt32_t
 
tmp¸2
 = 0U;

3900 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

3901 
	`as£π_∑øm
(
	`IS_TIM_TI1SELECTION
(
TI1_Sñe˘i⁄
));

3904 
tmp¸2
 = 
htim
->
In°™˚
->
CR2
;

3907 
tmp¸2
 &~
TIM_CR2_TI1S
;

3910 
tmp¸2
 |
TI1_Sñe˘i⁄
;

3913 
htim
->
In°™˚
->
CR2
 = 
tmp¸2
;

3915  
HAL_OK
;

3916 
	}
}

3927 
HAL_SètusTy≥Def
 
	$HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
)

3930 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
));

3931 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
sSœveC⁄fig
->
SœveMode
));

3932 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
sSœveC⁄fig
->
I≈utTriggî
));

3934 
	`__HAL_LOCK
(
htim
);

3936 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3939 
	`TIM_SœveTimî_SëC⁄fig
(
htim
, 
sSœveC⁄fig
);

3942 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

3945 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

3948 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3950 
	`__HAL_UNLOCK
(
htim
);

3952  
HAL_OK
;

3953 
	}
}

3964 
HAL_SètusTy≥Def
 
	$HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄_IT
(
TIM_H™dÀTy≥Def
 *
htim
,

3965 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
)

3968 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
));

3969 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
sSœveC⁄fig
->
SœveMode
));

3970 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
sSœveC⁄fig
->
I≈utTriggî
));

3972 
	`__HAL_LOCK
(
htim
);

3974 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3976 
	`TIM_SœveTimî_SëC⁄fig
(
htim
, 
sSœveC⁄fig
);

3979 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

3982 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

3984 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3986 
	`__HAL_UNLOCK
(
htim
);

3988  
HAL_OK
;

3989 
	}
}

4002 
uöt32_t
 
	$HAL_TIM_RódC≠tuªdVÆue
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

4004 
uöt32_t
 
tm¥eg
 = 0U;

4006 
	`__HAL_LOCK
(
htim
);

4008 
Ch™√l
)

4010 
TIM_CHANNEL_1
:

4013 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4016 
tm¥eg
 = 
htim
->
In°™˚
->
CCR1
;

4020 
TIM_CHANNEL_2
:

4023 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4026 
tm¥eg
 = 
htim
->
In°™˚
->
CCR2
;

4031 
TIM_CHANNEL_3
:

4034 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

4037 
tm¥eg
 = 
htim
->
In°™˚
->
CCR3
;

4042 
TIM_CHANNEL_4
:

4045 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

4048 
tm¥eg
 = 
htim
->
In°™˚
->
CCR4
;

4057 
	`__HAL_UNLOCK
(
htim
);

4058  
tm¥eg
;

4059 
	}
}

4089 
__wók
 
	$HAL_TIM_PîiodEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4092 
	`UNUSED
(
htim
);

4098 
	}
}

4104 
__wók
 
	$HAL_TIM_OC_DñayEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4107 
	`UNUSED
(
htim
);

4112 
	}
}

4118 
__wók
 
	$HAL_TIM_IC_C≠tuªCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4121 
	`UNUSED
(
htim
);

4126 
	}
}

4133 
__wók
 
	$HAL_TIM_PWM_Pul£FöishedCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4136 
	`UNUSED
(
htim
);

4141 
	}
}

4148 
__wók
 
	$HAL_TIM_TriggîCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4151 
	`UNUSED
(
htim
);

4156 
	}
}

4163 
__wók
 
	$HAL_TIM_Eº‹CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4166 
	`UNUSED
(
htim
);

4171 
	}
}

4197 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_Ba£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4199  
htim
->
Sèã
;

4200 
	}
}

4207 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_OC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4209  
htim
->
Sèã
;

4210 
	}
}

4217 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_PWM_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4219  
htim
->
Sèã
;

4220 
	}
}

4227 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_IC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4229  
htim
->
Sèã
;

4230 
	}
}

4237 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_O√Pul£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4239  
htim
->
Sèã
;

4240 
	}
}

4247 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_Encodî_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4249  
htim
->
Sèã
;

4250 
	}
}

4260 
	$TIM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

4262 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4264 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4266 
	`HAL_TIM_Eº‹CÆlback
(
htim
);

4267 
	}
}

4275 
	$TIM_DMADñayPul£C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4277 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4279 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4281 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

4283 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

4285 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

4287 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

4289 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

4291 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

4293 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

4295 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

4297 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

4299 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

4300 
	}
}

4307 
	$TIM_DMAC≠tuªC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4309 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4311 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4313 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

4315 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

4317 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

4319 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

4321 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

4323 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

4325 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

4327 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

4330 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

4332 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

4333 
	}
}

4355 
	$TIM_DMAPîiodEœp£dC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4357 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4359 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4361 
	`HAL_TIM_PîiodEœp£dCÆlback
(
htim
);

4362 
	}
}

4370 
	$TIM_DMATriggîC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4372 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4374 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4376 
	`HAL_TIM_TriggîCÆlback
(
htim
);

4377 
	}
}

4385 
	$TIM_Ba£_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_Ba£_InôTy≥Def
 *
Såu˘uª
)

4387 
uöt32_t
 
tmp¸1
 = 0U;

4388 
tmp¸1
 = 
TIMx
->
CR1
;

4391 if(
	`IS_TIM_CC1_INSTANCE
(
TIMx
Ë!
RESET
)

4394 
tmp¸1
 &~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

4395 
tmp¸1
 |
Såu˘uª
->
Cou¡îMode
;

4398 if(
	`IS_TIM_CC1_INSTANCE
(
TIMx
Ë!
RESET
)

4401 
tmp¸1
 &~
TIM_CR1_CKD
;

4402 
tmp¸1
 |(
uöt32_t
)
Såu˘uª
->
ClockDivisi⁄
;

4405 
TIMx
->
CR1
 = 
tmp¸1
;

4408 
TIMx
->
ARR
 = (
uöt32_t
)
Såu˘uª
->
Pîiod
 ;

4411 
TIMx
->
PSC
 = (
uöt32_t
)
Såu˘uª
->
PªsˇÀr
;

4414 
TIMx
->
EGR
 = 
TIM_EGR_UG
;

4415 
	}
}

4423 
	$TIM_OC1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4425 
uöt32_t
 
tmpccmrx
 = 0U;

4426 
uöt32_t
 
tmpc˚r
 = 0U;

4427 
uöt32_t
 
tmp¸2
 = 0U;

4430 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

4433 
tmpc˚r
 = 
TIMx
->
CCER
;

4435 
tmp¸2
 = 
TIMx
->
CR2
;

4438 
tmpccmrx
 = 
TIMx
->
CCMR1
;

4441 
tmpccmrx
 &~
TIM_CCMR1_OC1M
;

4442 
tmpccmrx
 &~
TIM_CCMR1_CC1S
;

4444 
tmpccmrx
 |
OC_C⁄fig
->
OCMode
;

4447 
tmpc˚r
 &~
TIM_CCER_CC1P
;

4449 
tmpc˚r
 |
OC_C⁄fig
->
OCPﬁ¨ôy
;

4452 
TIMx
->
CR2
 = 
tmp¸2
;

4455 
TIMx
->
CCMR1
 = 
tmpccmrx
;

4458 
TIMx
->
CCR1
 = 
OC_C⁄fig
->
Pul£
;

4461 
TIMx
->
CCER
 = 
tmpc˚r
;

4462 
	}
}

4470 
	$TIM_OC2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4472 
uöt32_t
 
tmpccmrx
 = 0U;

4473 
uöt32_t
 
tmpc˚r
 = 0U;

4474 
uöt32_t
 
tmp¸2
 = 0U;

4477 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

4480 
tmpc˚r
 = 
TIMx
->
CCER
;

4482 
tmp¸2
 = 
TIMx
->
CR2
;

4485 
tmpccmrx
 = 
TIMx
->
CCMR1
;

4488 
tmpccmrx
 &~
TIM_CCMR1_OC2M
;

4489 
tmpccmrx
 &~
TIM_CCMR1_CC2S
;

4492 
tmpccmrx
 |(
OC_C⁄fig
->
OCMode
 << 8U);

4495 
tmpc˚r
 &~
TIM_CCER_CC2P
;

4497 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 4U);

4500 
TIMx
->
CR2
 = 
tmp¸2
;

4503 
TIMx
->
CCMR1
 = 
tmpccmrx
;

4506 
TIMx
->
CCR2
 = 
OC_C⁄fig
->
Pul£
;

4509 
TIMx
->
CCER
 = 
tmpc˚r
;

4510 
	}
}

4518 
	$TIM_OC3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4520 
uöt32_t
 
tmpccmrx
 = 0U;

4521 
uöt32_t
 
tmpc˚r
 = 0U;

4522 
uöt32_t
 
tmp¸2
 = 0U;

4525 
TIMx
->
CCER
 &~
TIM_CCER_CC3E
;

4528 
tmpc˚r
 = 
TIMx
->
CCER
;

4530 
tmp¸2
 = 
TIMx
->
CR2
;

4533 
tmpccmrx
 = 
TIMx
->
CCMR2
;

4536 
tmpccmrx
 &~
TIM_CCMR2_OC3M
;

4537 
tmpccmrx
 &~
TIM_CCMR2_CC3S
;

4539 
tmpccmrx
 |
OC_C⁄fig
->
OCMode
;

4542 
tmpc˚r
 &~
TIM_CCER_CC3P
;

4544 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 8U);

4547 
TIMx
->
CR2
 = 
tmp¸2
;

4550 
TIMx
->
CCMR2
 = 
tmpccmrx
;

4553 
TIMx
->
CCR3
 = 
OC_C⁄fig
->
Pul£
;

4556 
TIMx
->
CCER
 = 
tmpc˚r
;

4557 
	}
}

4565 
	$TIM_OC4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4567 
uöt32_t
 
tmpccmrx
 = 0U;

4568 
uöt32_t
 
tmpc˚r
 = 0U;

4569 
uöt32_t
 
tmp¸2
 = 0U;

4572 
TIMx
->
CCER
 &~
TIM_CCER_CC4E
;

4575 
tmpc˚r
 = 
TIMx
->
CCER
;

4577 
tmp¸2
 = 
TIMx
->
CR2
;

4580 
tmpccmrx
 = 
TIMx
->
CCMR2
;

4583 
tmpccmrx
 &~
TIM_CCMR2_OC4M
;

4584 
tmpccmrx
 &~
TIM_CCMR2_CC4S
;

4587 
tmpccmrx
 |(
OC_C⁄fig
->
OCMode
 << 8U);

4590 
tmpc˚r
 &~
TIM_CCER_CC4P
;

4592 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 12U);

4595 
TIMx
->
CR2
 = 
tmp¸2
;

4598 
TIMx
->
CCMR2
 = 
tmpccmrx
;

4601 
TIMx
->
CCR4
 = 
OC_C⁄fig
->
Pul£
;

4604 
TIMx
->
CCER
 = 
tmpc˚r
;

4605 
	}
}

4624 
	$TIM_TI1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

4625 
uöt32_t
 
TIM_ICFûãr
)

4627 
uöt32_t
 
tmpccmr1
 = 0U;

4628 
uöt32_t
 
tmpc˚r
 = 0U;

4631 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

4632 
tmpccmr1
 = 
TIMx
->
CCMR1
;

4633 
tmpc˚r
 = 
TIMx
->
CCER
;

4636 if(
	`IS_TIM_CC2_INSTANCE
(
TIMx
Ë!
RESET
)

4638 
tmpccmr1
 &~
TIM_CCMR1_CC1S
;

4639 
tmpccmr1
 |
TIM_ICSñe˘i⁄
;

4643 
tmpccmr1
 &~
TIM_CCMR1_CC1S
;

4644 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
;

4648 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

4649 
tmpccmr1
 |((
TIM_ICFûãr
 << 4UË& 
TIM_CCMR1_IC1F
);

4652 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

4653 
tmpc˚r
 |(
TIM_ICPﬁ¨ôy
 & (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

4656 
TIMx
->
CCMR1
 = 
tmpccmr1
;

4657 
TIMx
->
CCER
 = 
tmpc˚r
;

4658 
	}
}

4672 
	$TIM_TI1_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
)

4674 
uöt32_t
 
tmpccmr1
 = 0U;

4675 
uöt32_t
 
tmpc˚r
 = 0U;

4678 
tmpc˚r
 = 
TIMx
->
CCER
;

4679 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

4680 
tmpccmr1
 = 
TIMx
->
CCMR1
;

4683 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

4684 
tmpccmr1
 |(
TIM_ICFûãr
 << 4U);

4687 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

4688 
tmpc˚r
 |
TIM_ICPﬁ¨ôy
;

4691 
TIMx
->
CCMR1
 = 
tmpccmr1
;

4692 
TIMx
->
CCER
 = 
tmpc˚r
;

4693 
	}
}

4712 
	$TIM_TI2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

4713 
uöt32_t
 
TIM_ICFûãr
)

4715 
uöt32_t
 
tmpccmr1
 = 0U;

4716 
uöt32_t
 
tmpc˚r
 = 0U;

4719 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

4720 
tmpccmr1
 = 
TIMx
->
CCMR1
;

4721 
tmpc˚r
 = 
TIMx
->
CCER
;

4724 
tmpccmr1
 &~
TIM_CCMR1_CC2S
;

4725 
tmpccmr1
 |(
TIM_ICSñe˘i⁄
 << 8U);

4728 
tmpccmr1
 &~
TIM_CCMR1_IC2F
;

4729 
tmpccmr1
 |((
TIM_ICFûãr
 << 12UË& 
TIM_CCMR1_IC2F
);

4732 
tmpc˚r
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

4733 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 4UË& (
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

4736 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

4737 
TIMx
->
CCER
 = 
tmpc˚r
;

4738 
	}
}

4752 
	$TIM_TI2_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
)

4754 
uöt32_t
 
tmpccmr1
 = 0U;

4755 
uöt32_t
 
tmpc˚r
 = 0U;

4758 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

4759 
tmpccmr1
 = 
TIMx
->
CCMR1
;

4760 
tmpc˚r
 = 
TIMx
->
CCER
;

4763 
tmpccmr1
 &~
TIM_CCMR1_IC2F
;

4764 
tmpccmr1
 |(
TIM_ICFûãr
 << 12U);

4767 
tmpc˚r
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

4768 
tmpc˚r
 |(
TIM_ICPﬁ¨ôy
 << 4U);

4771 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

4772 
TIMx
->
CCER
 = 
tmpc˚r
;

4773 
	}
}

4792 
	$TIM_TI3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

4793 
uöt32_t
 
TIM_ICFûãr
)

4795 
uöt32_t
 
tmpccmr2
 = 0U;

4796 
uöt32_t
 
tmpc˚r
 = 0U;

4799 
TIMx
->
CCER
 &~
TIM_CCER_CC3E
;

4800 
tmpccmr2
 = 
TIMx
->
CCMR2
;

4801 
tmpc˚r
 = 
TIMx
->
CCER
;

4804 
tmpccmr2
 &~
TIM_CCMR2_CC3S
;

4805 
tmpccmr2
 |
TIM_ICSñe˘i⁄
;

4808 
tmpccmr2
 &~
TIM_CCMR2_IC3F
;

4809 
tmpccmr2
 |((
TIM_ICFûãr
 << 4UË& 
TIM_CCMR2_IC3F
);

4812 
tmpc˚r
 &~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

4813 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 8UË& (
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

4816 
TIMx
->
CCMR2
 = 
tmpccmr2
;

4817 
TIMx
->
CCER
 = 
tmpc˚r
;

4818 
	}
}

4837 
	$TIM_TI4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

4838 
uöt32_t
 
TIM_ICFûãr
)

4840 
uöt32_t
 
tmpccmr2
 = 0U;

4841 
uöt32_t
 
tmpc˚r
 = 0U;

4844 
TIMx
->
CCER
 &~
TIM_CCER_CC4E
;

4845 
tmpccmr2
 = 
TIMx
->
CCMR2
;

4846 
tmpc˚r
 = 
TIMx
->
CCER
;

4849 
tmpccmr2
 &~
TIM_CCMR2_CC4S
;

4850 
tmpccmr2
 |(
TIM_ICSñe˘i⁄
 << 8U);

4853 
tmpccmr2
 &~
TIM_CCMR2_IC4F
;

4854 
tmpccmr2
 |((
TIM_ICFûãr
 << 12UË& 
TIM_CCMR2_IC4F
);

4857 
tmpc˚r
 &~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

4858 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 12UË& (
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
));

4861 
TIMx
->
CCMR2
 = 
tmpccmr2
;

4862 
TIMx
->
CCER
 = 
tmpc˚r
 ;

4863 
	}
}

4880 
	$TIM_ITRx_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt16_t
 
I≈utTriggîSour˚
)

4882 
uöt32_t
 
tmpsm¸
 = 0U;

4885 
tmpsm¸
 = 
TIMx
->
SMCR
;

4887 
tmpsm¸
 &~
TIM_SMCR_TS
;

4889 
tmpsm¸
 |
I≈utTriggîSour˚
 | 
TIM_SLAVEMODE_EXTERNAL1
;

4891 
TIMx
->
SMCR
 = 
tmpsm¸
;

4892 
	}
}

4910 
	$TIM_ETR_SëC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_ExtTRGPªsˇÀr
,

4911 
uöt32_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt32_à
ExtTRGFûãr
)

4913 
uöt32_t
 
tmpsm¸
 = 0U;

4915 
tmpsm¸
 = 
TIMx
->
SMCR
;

4918 
tmpsm¸
 &~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

4921 
tmpsm¸
 |(
uöt32_t
)(
TIM_ExtTRGPªsˇÀr
 | (
TIM_ExtTRGPﬁ¨ôy
 | (
ExtTRGFûãr
 << 8)));

4924 
TIMx
->
SMCR
 = 
tmpsm¸
;

4925 
	}
}

4940 
	$TIM_CCxCh™√lCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lSèã
)

4942 
uöt32_t
 
tmp
 = 0U;

4945 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
TIMx
,
Ch™√l
));

4947 
tmp
 = 
TIM_CCER_CC1E
 << 
Ch™√l
;

4950 
TIMx
->
CCER
 &~
tmp
;

4953 
TIMx
->
CCER
 |(
uöt32_t
)(
Ch™√lSèã
 << 
Ch™√l
);

4954 
	}
}

4964 
	$TIM_SœveTimî_SëC⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
,

4965 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
)

4967 
uöt32_t
 
tmpsm¸
 = 0U;

4968 
uöt32_t
 
tmpccmr1
 = 0U;

4969 
uöt32_t
 
tmpc˚r
 = 0U;

4972 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

4975 
tmpsm¸
 &~
TIM_SMCR_TS
;

4977 
tmpsm¸
 |
sSœveC⁄fig
->
I≈utTriggî
;

4980 
tmpsm¸
 &~
TIM_SMCR_SMS
;

4982 
tmpsm¸
 |
sSœveC⁄fig
->
SœveMode
;

4985 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

4988 
sSœveC⁄fig
->
I≈utTriggî
)

4990 
TIM_TS_ETRF
:

4993 
	`as£π_∑øm
(
	`IS_TIM_ETR_INSTANCE
(
htim
->
In°™˚
));

4994 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPRESCALER
(
sSœveC⁄fig
->
TriggîPªsˇÀr
));

4995 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

4996 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

4998 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

4999 
sSœveC⁄fig
->
TriggîPªsˇÀr
,

5000 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

5001 
sSœveC⁄fig
->
TriggîFûãr
);

5005 
TIM_TS_TI1F_ED
:

5008 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

5009 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

5012 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

5013 
htim
->
In°™˚
->
CCER
 &~
TIM_CCER_CC1E
;

5014 
tmpccmr1
 = 
htim
->
In°™˚
->
CCMR1
;

5017 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

5018 
tmpccmr1
 |((
sSœveC⁄fig
->
TriggîFûãr
) << 4U);

5021 
htim
->
In°™˚
->
CCMR1
 = 
tmpccmr1
;

5022 
htim
->
In°™˚
->
CCER
 = 
tmpc˚r
;

5027 
TIM_TS_TI1FP1
:

5030 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

5031 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

5032 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

5035 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

5036 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

5037 
sSœveC⁄fig
->
TriggîFûãr
);

5041 
TIM_TS_TI2FP2
:

5044 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5045 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

5046 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

5049 
	`TIM_TI2_C⁄figI≈utSège
(
htim
->
In°™˚
,

5050 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

5051 
sSœveC⁄fig
->
TriggîFûãr
);

5055 
TIM_TS_ITR0
:

5058 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5062 
TIM_TS_ITR1
:

5065 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5069 
TIM_TS_ITR2
:

5072 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5076 
TIM_TS_ITR3
:

5079 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5086 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_tim_ex.c

84 
	~"°m32l0xx_hÆ.h
"

95 #ifde‡
HAL_TIM_MODULE_ENABLED


125 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Ma°îC⁄figTy≥Def
 * 
sMa°îC⁄fig
)

128 
	`as£π_∑øm
(
	`IS_TIM_MASTER_INSTANCE
(
htim
->
In°™˚
));

129 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
sMa°îC⁄fig
->
Ma°îOuçutTriggî
));

130 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
sMa°îC⁄fig
->
Ma°îSœveMode
));

132 
	`__HAL_LOCK
(
htim
);

135 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

138 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_MMS
;

140 
htim
->
In°™˚
->
CR2
 |
sMa°îC⁄fig
->
Ma°îOuçutTriggî
;

143 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_MSM
;

145 
htim
->
In°™˚
->
SMCR
 |
sMa°îC⁄fig
->
Ma°îSœveMode
;

147 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

149 
	`__HAL_UNLOCK
(
htim
);

151  
HAL_OK
;

152 
	}
}

155 #i‡
deföed
 (
STM32L071xx
Ë|| deföed (
STM32L072xx
Ë|| deföed (
STM32L073xx
) \

156 || 
deföed
 (
STM32L081xx
Ë|| deföed (
STM32L082xx
Ë|| 
	$deföed
 (
STM32L083xx
)

250 #ñi‡
	`deföed
 (
STM32L031xx
Ë|| deföed (
STM32L041xx
)

311 #ñi‡
	`deföed
 (
STM32L011xx
Ë|| deföed (
STM32L021xx
)

430 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_Rem≠C⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Rem≠
)

433 
	`__HAL_LOCK
(
htim
);

436 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
htim
->
In°™˚
,
Rem≠
));

439 
htim
->
In°™˚
->
OR
 = 
Rem≠
;

441 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

443 
	`__HAL_UNLOCK
(
htim
);

445  
HAL_OK
;

446 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart.c

101 
	~"°m32l0xx_hÆ.h
"

112 #ifde‡
HAL_UART_MODULE_ENABLED


119 
	#UART_CR1_FIELDS
 ((
uöt32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | \

	)

120 
	gUSART_CR1_TE
 | 
	gUSART_CR1_RE
 | 
	gUSART_CR1_OVER8
))

122 
	#UART_LPUART_BRR_MIN
 ((
uöt32_t
)0x00000300Ë

	)

123 
	#UART_LPUART_BRR_MAX
 ((
uöt32_t
)0x000FFFFFË

	)

134 
UART_EndTxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
);

135 
UART_EndRxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
);

136 
UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

137 
UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

138 
UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

139 
UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

140 
UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

141 
UART_DMAAb‹tOnEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

142 
UART_DMATxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

143 
UART_DMARxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

144 
UART_DMATxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

145 
UART_DMARxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

146 
HAL_SètusTy≥Def
 
UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

147 
HAL_SètusTy≥Def
 
UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

148 
HAL_SètusTy≥Def
 
UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

225 
HAL_SètusTy≥Def
 
	$HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

228 if(
hu¨t
 =
NULL
)

230  
HAL_ERROR
;

233 if(
hu¨t
->
Inô
.
HwFlowCé
 !
UART_HWCONTROL_NONE
)

236 
	`as£π_∑øm
(
	`IS_UART_HWFLOW_INSTANCE
(
hu¨t
->
In°™˚
));

241 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

244 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

247 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

250 
	`HAL_UART_M•Inô
(
hu¨t
);

253 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

256 
	`__HAL_UART_DISABLE
(
hu¨t
);

259 i‡(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
 !
UART_ADVFEATURE_NO_INIT
)

261 
	`UART_AdvFótuªC⁄fig
(
hu¨t
);

264 i‡(
	`UART_SëC⁄fig
(
hu¨t
Ë=
HAL_ERROR
)

266  
HAL_ERROR
;

272 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

273 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

276 
	`__HAL_UART_ENABLE
(
hu¨t
);

279  (
	`UART_CheckIdÀSèã
(
hu¨t
));

280 
	}
}

288 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

291 if(
hu¨t
 =
NULL
)

293  
HAL_ERROR
;

297 
	`as£π_∑øm
(
	`IS_UART_HALFDUPLEX_INSTANCE
(
hu¨t
->
In°™˚
));

299 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

302 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

305 
	`HAL_UART_M•Inô
(
hu¨t
);

308 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

311 
	`__HAL_UART_DISABLE
(
hu¨t
);

314 i‡(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
 !
UART_ADVFEATURE_NO_INIT
)

316 
	`UART_AdvFótuªC⁄fig
(
hu¨t
);

319 i‡(
	`UART_SëC⁄fig
(
hu¨t
Ë=
HAL_ERROR
)

321  
HAL_ERROR
;

327 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

328 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

331 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_HDSEL
);

334 
	`__HAL_UART_ENABLE
(
hu¨t
);

337  (
	`UART_CheckIdÀSèã
(
hu¨t
));

338 
	}
}

351 
HAL_SètusTy≥Def
 
	$HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
)

354 if(
hu¨t
 =
NULL
)

356  
HAL_ERROR
;

360 
	`as£π_∑øm
(
	`IS_UART_LIN_INSTANCE
(
hu¨t
->
In°™˚
));

362 
	`as£π_∑øm
(
	`IS_UART_LIN_BREAK_DETECT_LENGTH
(
BªakDëe˘Lígth
));

365 if(
hu¨t
->
Inô
.
OvîSam∂ög
 =
UART_OVERSAMPLING_8
)

367  
HAL_ERROR
;

370 if(
hu¨t
->
Inô
.
W‹dLígth
 !
UART_WORDLENGTH_8B
)

372  
HAL_ERROR
;

375 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

378 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

381 
	`HAL_UART_M•Inô
(
hu¨t
);

384 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

387 
	`__HAL_UART_DISABLE
(
hu¨t
);

390 i‡(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
 !
UART_ADVFEATURE_NO_INIT
)

392 
	`UART_AdvFótuªC⁄fig
(
hu¨t
);

395 i‡(
	`UART_SëC⁄fig
(
hu¨t
Ë=
HAL_ERROR
)

397  
HAL_ERROR
;

403 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_CLKEN
);

404 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_HDSEL
 | 
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

407 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_LINEN
);

410 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_LBDL
, 
BªakDëe˘Lígth
);

413 
	`__HAL_UART_ENABLE
(
hu¨t
);

416  (
	`UART_CheckIdÀSèã
(
hu¨t
));

417 
	}
}

438 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
)

441 if(
hu¨t
 =
NULL
)

443  
HAL_ERROR
;

447 
	`as£π_∑øm
(
	`IS_UART_WAKEUPMETHOD
(
WakeUpMëhod
));

449 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

452 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

455 
	`HAL_UART_M•Inô
(
hu¨t
);

458 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

461 
	`__HAL_UART_DISABLE
(
hu¨t
);

464 i‡(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
 !
UART_ADVFEATURE_NO_INIT
)

466 
	`UART_AdvFótuªC⁄fig
(
hu¨t
);

469 i‡(
	`UART_SëC⁄fig
(
hu¨t
Ë=
HAL_ERROR
)

471  
HAL_ERROR
;

477 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

478 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

480 i‡(
WakeUpMëhod
 =
UART_WAKEUPMETHOD_ADDRESSMARK
)

483 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ADD
, ((
uöt32_t
)
Addªss
 << 
UART_CR2_ADDRESS_LSB_POS
));

487 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_WAKE
, 
WakeUpMëhod
);

490 
	`__HAL_UART_ENABLE
(
hu¨t
);

493  (
	`UART_CheckIdÀSèã
(
hu¨t
));

494 
	}
}

502 
HAL_SètusTy≥Def
 
	$HAL_UART_DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

505 if(
hu¨t
 =
NULL
)

507  
HAL_ERROR
;

511 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

513 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

516 
	`__HAL_UART_DISABLE
(
hu¨t
);

518 
hu¨t
->
In°™˚
->
CR1
 = 0x0U;

519 
hu¨t
->
In°™˚
->
CR2
 = 0x0U;

520 
hu¨t
->
In°™˚
->
CR3
 = 0x0U;

523 
	`HAL_UART_M•DeInô
(
hu¨t
);

525 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

526 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_RESET
;

527 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_RESET
;

530 
	`__HAL_UNLOCK
(
hu¨t
);

532  
HAL_OK
;

533 
	}
}

540 
__wók
 
	$HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

543 
	`UNUSED
(
hu¨t
);

548 
	}
}

555 
__wók
 
	$HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

558 
	`UNUSED
(
hu¨t
);

563 
	}
}

658 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

660 
uöt16_t
* 
tmp
;

661 
uöt32_t
 
tick°¨t
 = 0;

664 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

666 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

668  
HAL_ERROR
;

674 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

676 if((((
uöt32_t
)
pD©a
)&1) != 0)

678  
HAL_ERROR
;

683 
	`__HAL_LOCK
(
hu¨t
);

685 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

686 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY_TX
;

689 
tick°¨t
 = 
	`HAL_GëTick
();

691 
hu¨t
->
TxX„rSize
 = 
Size
;

692 
hu¨t
->
TxX„rCou¡
 = 
Size
;

693 
hu¨t
->
TxX„rCou¡
 > 0U)

695 
hu¨t
->
TxX„rCou¡
--;

696 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TXE
, 
RESET
, 
tick°¨t
, 
Timeout
Ë!
HAL_OK
)

698  
HAL_TIMEOUT
;

700 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

702 
tmp
 = (
uöt16_t
*Ë
pD©a
;

703 
hu¨t
->
In°™˚
->
TDR
 = (*
tmp
 & (
uöt16_t
)0x01FFU);

704 
pD©a
 += 2U;

708 
hu¨t
->
In°™˚
->
TDR
 = (*
pD©a
++ & (
uöt8_t
)0xFFU);

711 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TC
, 
RESET
, 
tick°¨t
, 
Timeout
Ë!
HAL_OK
)

713  
HAL_TIMEOUT
;

717 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

720 
	`__HAL_UNLOCK
(
hu¨t
);

722  
HAL_OK
;

726  
HAL_BUSY
;

728 
	}
}

742 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

744 
uöt16_t
* 
tmp
;

745 
uöt16_t
 
uhMask
;

746 
uöt32_t
 
tick°¨t
 = 0;

749 if(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

751 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

753  
HAL_ERROR
;

759 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

761 if((((
uöt32_t
)
pD©a
)&1) != 0)

763  
HAL_ERROR
;

768 
	`__HAL_LOCK
(
hu¨t
);

770 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

771 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

774 
tick°¨t
 = 
	`HAL_GëTick
();

776 
hu¨t
->
RxX„rSize
 = 
Size
;

777 
hu¨t
->
RxX„rCou¡
 = 
Size
;

780 
	`UART_MASK_COMPUTATION
(
hu¨t
);

781 
uhMask
 = 
hu¨t
->
Mask
;

784 
hu¨t
->
RxX„rCou¡
 > 0U)

786 
hu¨t
->
RxX„rCou¡
--;

787 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_RXNE
, 
RESET
, 
tick°¨t
, 
Timeout
Ë!
HAL_OK
)

789  
HAL_TIMEOUT
;

791 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

793 
tmp
 = (
uöt16_t
*Ë
pD©a
 ;

794 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
RDR
 & 
uhMask
);

795 
pD©a
 +=2U;

799 *
pD©a
++ = (
uöt8_t
)(
hu¨t
->
In°™˚
->
RDR
 & (uöt8_t)
uhMask
);

804 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

807 
	`__HAL_UNLOCK
(
hu¨t
);

809  
HAL_OK
;

813  
HAL_BUSY
;

815 
	}
}

828 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

831 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

833 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

835  
HAL_ERROR
;

841 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

843 if((((
uöt32_t
)
pD©a
)&1) != 0)

845  
HAL_ERROR
;

850 
	`__HAL_LOCK
(
hu¨t
);

852 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

853 
hu¨t
->
TxX„rSize
 = 
Size
;

854 
hu¨t
->
TxX„rCou¡
 = 
Size
;

856 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

857 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY_TX
;

860 
	`__HAL_UNLOCK
(
hu¨t
);

863 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TXEIE
);

865  
HAL_OK
;

869  
HAL_BUSY
;

871 
	}
}

884 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

887 if(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

889 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

891  
HAL_ERROR
;

897 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

899 if((((
uöt32_t
)
pD©a
)&1) != 0)

901  
HAL_ERROR
;

906 
	`__HAL_LOCK
(
hu¨t
);

908 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

909 
hu¨t
->
RxX„rSize
 = 
Size
;

910 
hu¨t
->
RxX„rCou¡
 = 
Size
;

913 
	`UART_MASK_COMPUTATION
(
hu¨t
);

915 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

916 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

919 
	`__HAL_UNLOCK
(
hu¨t
);

922 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

925 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
 | 
USART_CR1_RXNEIE
);

927  
HAL_OK
;

931  
HAL_BUSY
;

933 
	}
}

946 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

949 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_READY
)

951 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

953  
HAL_ERROR
;

959 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

961 if((((
uöt32_t
)
pD©a
)&1) != 0)

963  
HAL_ERROR
;

968 
	`__HAL_LOCK
(
hu¨t
);

970 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

971 
hu¨t
->
TxX„rSize
 = 
Size
;

972 
hu¨t
->
TxX„rCou¡
 = 
Size
;

974 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

975 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY_TX
;

978 
hu¨t
->
hdm©x
->
X„rC∂tCÆlback
 = 
UART_DMATønsmôC∂t
;

981 
hu¨t
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMATxHÆfC∂t
;

984 
hu¨t
->
hdm©x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

987 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

990 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm©x
, (
uöt32_t
)hu¨t->
pTxBuffPå
, (uöt32_t)&hu¨t->
In°™˚
->
TDR
, 
Size
);

993 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_TCF
);

996 
	`__HAL_UNLOCK
(
hu¨t
);

1000 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1002  
HAL_OK
;

1006  
HAL_BUSY
;

1008 
	}
}

1022 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1025 if(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_READY
)

1027 if((
pD©a
 =
NULL
 ) || (
Size
 == 0U))

1029  
HAL_ERROR
;

1035 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

1037 if((((
uöt32_t
)
pD©a
)&1) != 0)

1039  
HAL_ERROR
;

1044 
	`__HAL_LOCK
(
hu¨t
);

1046 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

1047 
hu¨t
->
RxX„rSize
 = 
Size
;

1049 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1050 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_BUSY_RX
;

1053 
hu¨t
->
hdm¨x
->
X„rC∂tCÆlback
 = 
UART_DMARe˚iveC∂t
;

1056 
hu¨t
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMARxHÆfC∂t
;

1059 
hu¨t
->
hdm¨x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

1062 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1065 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm¨x
, (
uöt32_t
)&hu¨t->
In°™˚
->
RDR
, (uöt32_t)hu¨t->
pRxBuffPå
, 
Size
);

1068 
	`__HAL_UNLOCK
(
hu¨t
);

1071 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

1074 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1078 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1080  
HAL_OK
;

1084  
HAL_BUSY
;

1086 
	}
}

1093 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1096 
	`__HAL_LOCK
(
hu¨t
);

1098 i‡((
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
) &&

1099 (
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
)))

1102 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1104 i‡((
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
) &&

1105 (
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
)))

1108 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

1109 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1112 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1116 
	`__HAL_UNLOCK
(
hu¨t
);

1118  
HAL_OK
;

1119 
	}
}

1126 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1129 
	`__HAL_LOCK
(
hu¨t
);

1131 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
)

1134 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1136 if(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
)

1139 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
);

1142 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

1143 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1146 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1150 
	`__HAL_UNLOCK
(
hu¨t
);

1152  
HAL_OK
;

1153 
	}
}

1160 
HAL_SètusTy≥Def
 
	$HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1170 i‡((
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
) &&

1171 (
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
)))

1173 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1176 if(
hu¨t
->
hdm©x
 !
NULL
)

1178 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
);

1181 
	`UART_EndTxTøns„r
(
hu¨t
);

1185 i‡((
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
) &&

1186 (
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
)))

1188 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1191 if(
hu¨t
->
hdm¨x
 !
NULL
)

1193 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

1196 
	`UART_EndRxTøns„r
(
hu¨t
);

1199  
HAL_OK
;

1200 
	}
}

1214 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹t
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1217 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1218 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1221 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1223 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1226 if(
hu¨t
->
hdm©x
 !
NULL
)

1230 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1232 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
);

1237 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1239 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1242 if(
hu¨t
->
hdm¨x
 !
NULL
)

1246 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1248 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

1253 
hu¨t
->
TxX„rCou¡
 = 0;

1254 
hu¨t
->
RxX„rCou¡
 = 0;

1257 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

1260 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1261 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1264 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1266  
HAL_OK
;

1267 
	}
}

1281 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tTønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1284 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1287 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1289 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1292 if(
hu¨t
->
hdm©x
 !
NULL
)

1296 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1298 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
);

1303 
hu¨t
->
TxX„rCou¡
 = 0;

1306 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1308  
HAL_OK
;

1309 
	}
}

1323 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tRe˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1326 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1327 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1330 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1332 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1335 if(
hu¨t
->
hdm¨x
 !
NULL
)

1339 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1341 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

1346 
hu¨t
->
RxX„rCou¡
 = 0;

1349 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

1352 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1354  
HAL_OK
;

1355 
	}
}

1371 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹t_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1373 
uöt32_t
 
ab‹t˝…
 = 1;

1376 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1377 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1382 if(
hu¨t
->
hdm©x
 !
NULL
)

1386 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1388 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
UART_DMATxAb‹tCÆlback
;

1392 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1396 if(
hu¨t
->
hdm¨x
 !
NULL
)

1400 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1402 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
UART_DMARxAb‹tCÆlback
;

1406 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1411 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1414 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1417 if(
hu¨t
->
hdm©x
 !
NULL
)

1423 if(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm©x
Ë!
HAL_OK
)

1425 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1429 
ab‹t˝…
 = 0;

1435 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1437 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1440 if(
hu¨t
->
hdm¨x
 !
NULL
)

1446 if(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

1448 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

1449 
ab‹t˝…
 = 1;

1453 
ab‹t˝…
 = 0;

1459 i‡(
ab‹t˝…
 == 1)

1462 
hu¨t
->
TxX„rCou¡
 = 0;

1463 
hu¨t
->
RxX„rCou¡
 = 0;

1466 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1469 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

1472 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1473 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1476 
	`HAL_UART_Ab‹tC∂tCÆlback
(
hu¨t
);

1479  
HAL_OK
;

1480 
	}
}

1496 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1499 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

1502 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
))

1504 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1507 if(
hu¨t
->
hdm©x
 !
NULL
)

1511 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
UART_DMATxO∆yAb‹tCÆlback
;

1514 if(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm©x
Ë!
HAL_OK
)

1517 
hu¨t
->
hdm©x
->
	`X„rAb‹tCÆlback
(huart->hdmatx);

1523 
hu¨t
->
TxX„rCou¡
 = 0;

1526 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1529 
	`HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
hu¨t
);

1535 
hu¨t
->
TxX„rCou¡
 = 0;

1538 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1541 
	`HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
hu¨t
);

1544  
HAL_OK
;

1545 
	}
}

1561 
HAL_SètusTy≥Def
 
	$HAL_UART_Ab‹tRe˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1564 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

1565 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

1568 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1570 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1573 if(
hu¨t
->
hdm¨x
 !
NULL
)

1577 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
UART_DMARxO∆yAb‹tCÆlback
;

1580 if(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

1583 
hu¨t
->
hdm¨x
->
	`X„rAb‹tCÆlback
(huart->hdmarx);

1589 
hu¨t
->
RxX„rCou¡
 = 0;

1592 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

1595 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1598 
	`HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
hu¨t
);

1604 
hu¨t
->
RxX„rCou¡
 = 0;

1607 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

1610 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1613 
	`HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
hu¨t
);

1616  
HAL_OK
;

1617 
	}
}

1624 
	$HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1626 
uöt32_t
 
i§Êags
 = 
	`READ_REG
(
hu¨t
->
In°™˚
->
ISR
);

1627 
uöt32_t
 
¸1ôs
 = 
	`READ_REG
(
hu¨t
->
In°™˚
->
CR1
);

1628 
uöt32_t
 
¸3ôs
;

1629 
uöt32_t
 
îr‹Êags
;

1632 
îr‹Êags
 = (
i§Êags
 & (
uöt32_t
)(
USART_ISR_PE
 | 
USART_ISR_FE
 | 
USART_ISR_ORE
 | 
USART_ISR_NE
));

1633 i‡(
îr‹Êags
 =
RESET
)

1636 if(((
i§Êags
 & 
USART_ISR_RXNE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_RXNEIE
) != RESET))

1638 
	`UART_Re˚ive_IT
(
hu¨t
);

1644 
¸3ôs
 = 
	`READ_REG
(
hu¨t
->
In°™˚
->
CR3
);

1645 if–(
îr‹Êags
 !
RESET
)

1646 && ( ((
¸3ôs
 & 
USART_CR3_EIE
Ë!
RESET
)

1647 || ((
¸1ôs
 & (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
)Ë!
RESET
)) )

1650 if(((
i§Êags
 & 
USART_ISR_PE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_PEIE
) != RESET))

1652 
	`__HAL_UART_CLEAR_IT
(
hu¨t
, 
UART_CLEAR_PEF
);

1654 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_PE
;

1658 if(((
i§Êags
 & 
USART_ISR_FE
Ë!
RESET
Ë&& ((
¸3ôs
 & 
USART_CR3_EIE
) != RESET))

1660 
	`__HAL_UART_CLEAR_IT
(
hu¨t
, 
UART_CLEAR_FEF
);

1662 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_FE
;

1666 if(((
i§Êags
 & 
USART_ISR_NE
Ë!
RESET
Ë&& ((
¸3ôs
 & 
USART_CR3_EIE
) != RESET))

1668 
	`__HAL_UART_CLEAR_IT
(
hu¨t
, 
UART_CLEAR_NEF
);

1670 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_NE
;

1674 if(((
i§Êags
 & 
USART_ISR_ORE
Ë!
RESET
) &&

1675 (((
¸1ôs
 & 
USART_CR1_RXNEIE
Ë!
RESET
Ë|| ((
¸3ôs
 & 
USART_CR3_EIE
) != RESET)))

1677 
	`__HAL_UART_CLEAR_IT
(
hu¨t
, 
UART_CLEAR_OREF
);

1679 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_ORE
;

1683 if(
hu¨t
->
Eº‹Code
 !
HAL_UART_ERROR_NONE
)

1686 if(((
i§Êags
 & 
USART_ISR_RXNE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_RXNEIE
) != RESET))

1688 
	`UART_Re˚ive_IT
(
hu¨t
);

1693 i‡(((
hu¨t
->
Eº‹Code
 & 
HAL_UART_ERROR_ORE
Ë!
RESET
) ||

1694 (
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
)))

1699 
	`UART_EndRxTøns„r
(
hu¨t
);

1702 i‡(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
))

1704 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1707 if(
hu¨t
->
hdm¨x
 !
NULL
)

1711 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
UART_DMAAb‹tOnEº‹
;

1714 if(
	`HAL_DMA_Ab‹t_IT
(
hu¨t
->
hdm¨x
Ë!
HAL_OK
)

1717 
hu¨t
->
hdm¨x
->
	`X„rAb‹tCÆlback
(huart->hdmarx);

1723 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1729 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1736 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1737 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1745 if(((
i§Êags
 & 
USART_ISR_WUF
Ë!
RESET
Ë&& ((
¸3ôs
 & 
USART_CR3_WUFIE
) != RESET))

1747 
	`__HAL_UART_CLEAR_IT
(
hu¨t
, 
UART_CLEAR_WUF
);

1749 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1750 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

1751 
	`HAL_UARTEx_WakeupCÆlback
(
hu¨t
);

1756 if(((
i§Êags
 & 
USART_ISR_TXE
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_TXEIE
) != RESET))

1758 
	`UART_Tønsmô_IT
(
hu¨t
);

1763 if(((
i§Êags
 & 
USART_ISR_TC
Ë!
RESET
Ë&& ((
¸1ôs
 & 
USART_CR1_TCIE
) != RESET))

1765 
	`UART_EndTønsmô_IT
(
hu¨t
);

1769 
	}
}

1776 
__wók
 
	$HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1779 
	`UNUSED
(
hu¨t
);

1784 
	}
}

1791 
__wók
 
	$HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1794 
	`UNUSED
(
hu¨t
);

1799 
	}
}

1806 
__wók
 
	$HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1809 
	`UNUSED
(
hu¨t
);

1814 
	}
}

1821 
__wók
 
	$HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1824 
	`UNUSED
(
hu¨t
);

1829 
	}
}

1836 
__wók
 
	$HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1839 
	`UNUSED
(
hu¨t
);

1844 
	}
}

1851 
__wók
 
	$HAL_UART_Ab‹tC∂tCÆlback
 (
UART_H™dÀTy≥Def
 *
hu¨t
)

1854 
	`UNUSED
(
hu¨t
);

1859 
	}
}

1866 
__wók
 
	$HAL_UART_Ab‹tTønsmôC∂tCÆlback
 (
UART_H™dÀTy≥Def
 *
hu¨t
)

1869 
	`UNUSED
(
hu¨t
);

1874 
	}
}

1881 
__wók
 
	$HAL_UART_Ab‹tRe˚iveC∂tCÆlback
 (
UART_H™dÀTy≥Def
 *
hu¨t
)

1884 
	`UNUSED
(
hu¨t
);

1889 
	}
}

1923 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_E«bÀMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1926 
	`__HAL_LOCK
(
hu¨t
);

1928 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

1931 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_MME
);

1933 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1935  (
	`UART_CheckIdÀSèã
(
hu¨t
));

1936 
	}
}

1944 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_DißbÀMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1947 
	`__HAL_LOCK
(
hu¨t
);

1949 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

1952 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_MME
);

1954 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1956  (
	`UART_CheckIdÀSèã
(
hu¨t
));

1957 
	}
}

1965 
	$HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1967 
	`__HAL_UART_SEND_REQ
(
hu¨t
, 
UART_MUTE_MODE_REQUEST
);

1968 
	}
}

1975 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1978 
	`__HAL_LOCK
(
hu¨t
);

1979 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

1982 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TE
 | 
USART_CR1_RE
));

1984 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TE
);

1986 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

1989 
	`__HAL_UNLOCK
(
hu¨t
);

1991  
HAL_OK
;

1992 
	}
}

1999 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2002 
	`__HAL_LOCK
(
hu¨t
);

2003 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2006 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TE
 | 
USART_CR1_RE
));

2008 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_RE
);

2010 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2012 
	`__HAL_UNLOCK
(
hu¨t
);

2014  
HAL_OK
;

2015 
	}
}

2023 
HAL_SètusTy≥Def
 
	$HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2026 
	`as£π_∑øm
(
	`IS_UART_LIN_INSTANCE
(
hu¨t
->
In°™˚
));

2029 
	`__HAL_LOCK
(
hu¨t
);

2031 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

2034 
hu¨t
->
In°™˚
->
RQR
 |
UART_SENDBREAK_REQUEST
;

2036 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2039 
	`__HAL_UNLOCK
(
hu¨t
);

2041  
HAL_OK
;

2042 
	}
}

2071 
HAL_UART_SèãTy≥Def
 
	$HAL_UART_GëSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2073 
uöt32_t
 
ãmp1
0x00U, 
ãmp2
 = 0x00U;

2074 
ãmp1
 = 
hu¨t
->
gSèã
;

2075 
ãmp2
 = 
hu¨t
->
RxSèã
;

2077  (
HAL_UART_SèãTy≥Def
)(
ãmp1
 | 
ãmp2
);

2078 
	}
}

2086 
uöt32_t
 
	$HAL_UART_GëEº‹
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2088  
hu¨t
->
Eº‹Code
;

2089 
	}
}

2107 
HAL_SètusTy≥Def
 
	$UART_SëC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2109 
uöt32_t
 
tm¥eg
 = 0x00000000U;

2110 
UART_ClockSour˚Ty≥Def
 
˛ocksour˚
 = 
UART_CLOCKSOURCE_UNDEFINED
;

2111 
uöt16_t
 
bºãmp
 = 0x0000U;

2112 
uöt16_t
 
ußπdiv
 = 0x0000U;

2113 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

2116 
	`as£π_∑øm
(
	`IS_UART_BAUDRATE
(
hu¨t
->
Inô
.
BaudR©e
));

2117 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

2118 if(
	`UART_INSTANCE_LOWPOWER
(
hu¨t
))

2120 
	`as£π_∑øm
(
	`IS_LPUART_STOPBITS
(
hu¨t
->
Inô
.
St›Bôs
));

2124 
	`as£π_∑øm
(
	`IS_UART_STOPBITS
(
hu¨t
->
Inô
.
St›Bôs
));

2125 
	`as£π_∑øm
(
	`IS_UART_ONE_BIT_SAMPLE
(
hu¨t
->
Inô
.
O√BôSam∂ög
));

2128 
	`as£π_∑øm
(
	`IS_UART_PARITY
(
hu¨t
->
Inô
.
P¨ôy
));

2129 
	`as£π_∑øm
(
	`IS_UART_MODE
(
hu¨t
->
Inô
.
Mode
));

2130 
	`as£π_∑øm
(
	`IS_UART_HARDWARE_FLOW_CONTROL
(
hu¨t
->
Inô
.
HwFlowCé
));

2131 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

2141 
tm¥eg
 = (
uöt32_t
)
hu¨t
->
Inô
.
W‹dLígth
 | hu¨t->Inô.
P¨ôy
 | hu¨t->Inô.
Mode
 | hu¨t->Inô.
OvîSam∂ög
 ;

2142 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
, 
UART_CR1_FIELDS
, 
tm¥eg
);

2147 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_STOP
, hu¨t->
Inô
.
St›Bôs
);

2155 
tm¥eg
 = (
uöt32_t
)
hu¨t
->
Inô
.
HwFlowCé
;

2156 i‡(!(
	`UART_INSTANCE_LOWPOWER
(
hu¨t
)))

2158 
tm¥eg
 |
hu¨t
->
Inô
.
O√BôSam∂ög
;

2160 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
 | 
USART_CR3_ONEBIT
), 
tm¥eg
);

2163 
	`UART_GETCLOCKSOURCE
(
hu¨t
, 
˛ocksour˚
);

2164 
uöt32_t
 
‰equícy
 = 
	`HAL_RCCEx_GëPîùhCLKFªq
(
RCC_PERIPHCLK_USART2
);

2167 if(
	`UART_INSTANCE_LOWPOWER
(
hu¨t
))

2170 
tm¥eg
 = 0;

2172 
˛ocksour˚
)

2174 
UART_CLOCKSOURCE_PCLK1
:

2175 
tm¥eg
 = 
	`HAL_RCC_GëPCLK1Fªq
();

2177 
UART_CLOCKSOURCE_HSI
:

2178 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIDIV
) != 0U)

2180 
tm¥eg
 = (
uöt32_t
Ë(
HSI_VALUE
 >> 2U);

2184 
tm¥eg
 = (
uöt32_t
Ë
HSI_VALUE
;

2187 
UART_CLOCKSOURCE_SYSCLK
:

2188 
tm¥eg
 = 
	`HAL_RCC_GëSysClockFªq
();

2190 
UART_CLOCKSOURCE_LSE
:

2191 
tm¥eg
 = (
uöt32_t
Ë
LSE_VALUE
;

2193 
UART_CLOCKSOURCE_UNDEFINED
:

2195 
ªt
 = 
HAL_ERROR
;

2200 i‡(
tm¥eg
 != 0)

2203 i‡–(
tm¥eg
 < (3 * 
hu¨t
->
Inô
.
BaudR©e
) ) ||

2204 (
tm¥eg
 > (4096 * 
hu¨t
->
Inô
.
BaudR©e
) ))

2206 
ªt
 = 
HAL_ERROR
;

2210 
tm¥eg
 = (
uöt32_t
)(
	`UART_DIV_LPUART
—m¥eg, 
hu¨t
->
Inô
.
BaudR©e
));

2212 i‡((
tm¥eg
 >
UART_LPUART_BRR_MIN
Ë&& (tm¥eg <
UART_LPUART_BRR_MAX
))

2214 
hu¨t
->
In°™˚
->
BRR
 = 
tm¥eg
;

2218 
ªt
 = 
HAL_ERROR
;

2224 i‡(
hu¨t
->
Inô
.
OvîSam∂ög
 =
UART_OVERSAMPLING_8
)

2226 
˛ocksour˚
)

2228 
UART_CLOCKSOURCE_PCLK1
:

2229 
ußπdiv
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING8
(
‰equícy
, 
hu¨t
->
Inô
.
BaudR©e
));

2231 
UART_CLOCKSOURCE_PCLK2
:

2232 
ußπdiv
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING8
(
	`HAL_RCC_GëPCLK2Fªq
(), 
hu¨t
->
Inô
.
BaudR©e
));

2234 
UART_CLOCKSOURCE_HSI
:

2235 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIDIV
) != 0U)

2237 
ußπdiv
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING8
((
HSI_VALUE
 >> 2U), 
hu¨t
->
Inô
.
BaudR©e
));

2241 
ußπdiv
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING8
(
HSI_VALUE
, 
hu¨t
->
Inô
.
BaudR©e
));

2244 
UART_CLOCKSOURCE_SYSCLK
:

2245 
ußπdiv
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING8
(
	`HAL_RCC_GëSysClockFªq
(), 
hu¨t
->
Inô
.
BaudR©e
));

2247 
UART_CLOCKSOURCE_LSE
:

2248 
ußπdiv
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING8
(
LSE_VALUE
, 
hu¨t
->
Inô
.
BaudR©e
));

2250 
UART_CLOCKSOURCE_UNDEFINED
:

2252 
ªt
 = 
HAL_ERROR
;

2256 
bºãmp
 = 
ußπdiv
 & 0xFFF0U;

2257 
bºãmp
 |(
uöt16_t
)((uöt16_t)(
ußπdiv
 & (uint16_t)0x000FU) >> (uint16_t)1U);

2258 
hu¨t
->
In°™˚
->
BRR
 = 
bºãmp
;

2262 
˛ocksour˚
)

2264 
UART_CLOCKSOURCE_PCLK1
:

2265 
hu¨t
->
In°™˚
->
BRR
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING16
(
	`HAL_RCC_GëPCLK1Fªq
(), hu¨t->
Inô
.
BaudR©e
));

2267 
UART_CLOCKSOURCE_PCLK2
:

2268 
hu¨t
->
In°™˚
->
BRR
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING16
(
	`HAL_RCC_GëPCLK2Fªq
(), hu¨t->
Inô
.
BaudR©e
));

2270 
UART_CLOCKSOURCE_HSI
:

2271 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIDIV
) != 0U)

2273 
hu¨t
->
In°™˚
->
BRR
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING16
((
HSI_VALUE
 >> 2U), hu¨t->
Inô
.
BaudR©e
));

2277 
hu¨t
->
In°™˚
->
BRR
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING16
(
HSI_VALUE
, hu¨t->
Inô
.
BaudR©e
));

2280 
UART_CLOCKSOURCE_SYSCLK
:

2281 
hu¨t
->
In°™˚
->
BRR
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING16
(
	`HAL_RCC_GëSysClockFªq
(), hu¨t->
Inô
.
BaudR©e
));

2283 
UART_CLOCKSOURCE_LSE
:

2284 
hu¨t
->
In°™˚
->
BRR
 = (
uöt16_t
)(
	`UART_DIV_SAMPLING16
(
LSE_VALUE
, hu¨t->
Inô
.
BaudR©e
));

2286 
UART_CLOCKSOURCE_UNDEFINED
:

2288 
ªt
 = 
HAL_ERROR
;

2293  
ªt
;

2295 
	}
}

2302 
	$UART_AdvFótuªC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2305 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_INIT
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
));

2308 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_TXINVERT_INIT
))

2310 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_TXINV
(
hu¨t
->
Adv™˚dInô
.
TxPöLevñInvît
));

2311 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_TXINV
, hu¨t->
Adv™˚dInô
.
TxPöLevñInvît
);

2315 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_RXINVERT_INIT
))

2317 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_RXINV
(
hu¨t
->
Adv™˚dInô
.
RxPöLevñInvît
));

2318 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_RXINV
, hu¨t->
Adv™˚dInô
.
RxPöLevñInvît
);

2322 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_DATAINVERT_INIT
))

2324 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_DATAINV
(
hu¨t
->
Adv™˚dInô
.
D©aInvît
));

2325 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_DATAINV
, hu¨t->
Adv™˚dInô
.
D©aInvît
);

2329 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_SWAP_INIT
))

2331 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_SWAP
(
hu¨t
->
Adv™˚dInô
.
Sw≠
));

2332 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_SWAP
, hu¨t->
Adv™˚dInô
.
Sw≠
);

2336 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
))

2338 
	`as£π_∑øm
(
	`IS_UART_OVERRUN
(
hu¨t
->
Adv™˚dInô
.
OvîrunDißbÀ
));

2339 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_OVRDIS
, hu¨t->
Adv™˚dInô
.
OvîrunDißbÀ
);

2343 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_DMADISABLEONERROR_INIT
))

2345 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_DMAONRXERROR
(
hu¨t
->
Adv™˚dInô
.
DMADißbÀ⁄RxEº‹
));

2346 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DDRE
, hu¨t->
Adv™˚dInô
.
DMADißbÀ⁄RxEº‹
);

2350 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_AUTOBAUDRATE_INIT
))

2352 
	`as£π_∑øm
(
	`IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE
(
hu¨t
->
In°™˚
));

2353 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_AUTOBAUDRATE
(
hu¨t
->
Adv™˚dInô
.
AutoBaudR©eE«bÀ
));

2354 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ABREN
, hu¨t->
Adv™˚dInô
.
AutoBaudR©eE«bÀ
);

2356 if(
hu¨t
->
Adv™˚dInô
.
AutoBaudR©eE«bÀ
 =
UART_ADVFEATURE_AUTOBAUDRATE_ENABLE
)

2358 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_AUTOBAUDRATEMODE
(
hu¨t
->
Adv™˚dInô
.
AutoBaudR©eMode
));

2359 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ABRMODE
, hu¨t->
Adv™˚dInô
.
AutoBaudR©eMode
);

2364 if(
	`HAL_IS_BIT_SET
(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
, 
UART_ADVFEATURE_MSBFIRST_INIT
))

2366 
	`as£π_∑øm
(
	`IS_UART_ADVFEATURE_MSBFIRST
(
hu¨t
->
Adv™˚dInô
.
MSBFú°
));

2367 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_MSBFIRST
, hu¨t->
Adv™˚dInô
.
MSBFú°
);

2369 
	}
}

2376 
HAL_SètusTy≥Def
 
	$UART_CheckIdÀSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2378 
uöt32_t
 
tick°¨t
 = 0;

2381 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

2384 
tick°¨t
 = 
	`HAL_GëTick
();

2387 if((
hu¨t
->
In°™˚
->
CR1
 & 
USART_CR1_TE
) == USART_CR1_TE)

2390 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
USART_ISR_TEACK
, 
RESET
, 
tick°¨t
, 
HAL_UART_TIMEOUT_VALUE
Ë!
HAL_OK
)

2393  
HAL_TIMEOUT
;

2397 if((
hu¨t
->
In°™˚
->
CR1
 & 
USART_CR1_RE
) == USART_CR1_RE)

2400 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
USART_ISR_REACK
, 
RESET
, 
tick°¨t
, 
HAL_UART_TIMEOUT_VALUE
Ë!
HAL_OK
)

2403  
HAL_TIMEOUT
;

2408 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2409 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2412 
	`__HAL_UNLOCK
(
hu¨t
);

2414  
HAL_OK
;

2415 
	}
}

2426 
HAL_SètusTy≥Def
 
	$UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Tick°¨t
, uöt32_à
Timeout
)

2429 (
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
Fœg
Ë? 
SET
 : 
RESET
Ë=
Sètus
)

2432 if(
Timeout
 !
HAL_MAX_DELAY
)

2434 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
()-
Tick°¨t
) > Timeout))

2437 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
));

2438 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2440 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2441 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2444 
	`__HAL_UNLOCK
(
hu¨t
);

2445  
HAL_TIMEOUT
;

2449  
HAL_OK
;

2450 
	}
}

2458 
	$UART_EndTxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2461 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
));

2464 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2465 
	}
}

2473 
	$UART_EndRxTøns„r
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2476 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2477 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2480 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2481 
	}
}

2489 
	$UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2491 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2494 i‡–
	`HAL_IS_BIT_CLR
(
hdma
->
In°™˚
->
CCR
, 
DMA_CCR_CIRC
) )

2496 
hu¨t
->
TxX„rCou¡
 = 0U;

2500 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

2503 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TCIE
);

2508 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

2511 
	}
}

2518 
	$UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2520 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2522 
	`HAL_UART_TxHÆfC∂tCÆlback
(
hu¨t
);

2523 
	}
}

2530 
	$UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2532 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2535 i‡–
	`HAL_IS_BIT_CLR
(
hdma
->
In°™˚
->
CCR
, 
DMA_CCR_CIRC
) )

2537 
hu¨t
->
RxX„rCou¡
 = 0U;

2540 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_PEIE
);

2541 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2545 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

2548 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2551 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

2552 
	}
}

2559 
	$UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2561 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2563 
	`HAL_UART_RxHÆfC∂tCÆlback
(
hu¨t
);

2564 
	}
}

2571 
	$UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2573 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2576 i‡–(
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
)

2577 &&(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
)) )

2579 
hu¨t
->
TxX„rCou¡
 = 0;

2580 
	`UART_EndTxTøns„r
(
hu¨t
);

2584 i‡–(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
)

2585 &&(
	`HAL_IS_BIT_SET
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
)) )

2587 
hu¨t
->
RxX„rCou¡
 = 0;

2588 
	`UART_EndRxTøns„r
(
hu¨t
);

2591 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_DMA
;

2592 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

2593 
	}
}

2601 
	$UART_DMAAb‹tOnEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2603 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2604 
hu¨t
->
RxX„rCou¡
 = 0;

2605 
hu¨t
->
TxX„rCou¡
 = 0;

2607 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

2608 
	}
}

2618 
	$UART_DMATxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

2620 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def* )(
hdma
->
P¨ít
);

2622 
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2625 if(
hu¨t
->
hdm¨x
 !
NULL
)

2627 if(
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 !
NULL
)

2634 
hu¨t
->
TxX„rCou¡
 = 0;

2635 
hu¨t
->
RxX„rCou¡
 = 0;

2638 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

2641 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

2644 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2645 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2648 
	`HAL_UART_Ab‹tC∂tCÆlback
(
hu¨t
);

2649 
	}
}

2660 
	$UART_DMARxAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

2662 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def* )(
hdma
->
P¨ít
);

2664 
hu¨t
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2667 if(
hu¨t
->
hdm©x
 !
NULL
)

2669 if(
hu¨t
->
hdm©x
->
X„rAb‹tCÆlback
 !
NULL
)

2676 
hu¨t
->
TxX„rCou¡
 = 0;

2677 
hu¨t
->
RxX„rCou¡
 = 0;

2680 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

2683 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

2686 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2687 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2690 
	`HAL_UART_Ab‹tC∂tCÆlback
(
hu¨t
);

2691 
	}
}

2702 
	$UART_DMATxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

2704 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)(
hdma
->
P¨ít
);

2706 
hu¨t
->
TxX„rCou¡
 = 0;

2709 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2712 
	`HAL_UART_Ab‹tTønsmôC∂tCÆlback
(
hu¨t
);

2713 
	}
}

2723 
	$UART_DMARxO∆yAb‹tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

2725 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2727 
hu¨t
->
RxX„rCou¡
 = 0;

2730 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_CLEAR_OREF
 | 
UART_CLEAR_NEF
 | 
UART_CLEAR_PEF
 | 
UART_CLEAR_FEF
);

2733 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2736 
	`HAL_UART_Ab‹tRe˚iveC∂tCÆlback
(
hu¨t
);

2737 
	}
}

2746 
HAL_SètusTy≥Def
 
	$UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2748 
uöt16_t
* 
tmp
;

2751 i‡(
hu¨t
->
gSèã
 =
HAL_UART_STATE_BUSY_TX
)

2753 if(
hu¨t
->
TxX„rCou¡
 == 0U)

2756 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TXEIE
);

2759 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TCIE
);

2761  
HAL_OK
;

2765 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

2767 
tmp
 = (
uöt16_t
*Ë
hu¨t
->
pTxBuffPå
;

2768 
hu¨t
->
In°™˚
->
TDR
 = (*
tmp
 & (
uöt16_t
)0x01FFU);

2769 
hu¨t
->
pTxBuffPå
 += 2U;

2773 
hu¨t
->
In°™˚
->
TDR
 = (
uöt8_t
)(*hu¨t->
pTxBuffPå
++ & (uint8_t)0xFFU);

2775 
hu¨t
->
TxX„rCou¡
--;

2777  
HAL_OK
;

2782  
HAL_BUSY
;

2784 
	}
}

2792 
HAL_SètusTy≥Def
 
	$UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2795 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_TCIE
);

2798 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

2800 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

2802  
HAL_OK
;

2803 
	}
}

2812 
HAL_SètusTy≥Def
 
	$UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

2814 
uöt16_t
* 
tmp
;

2815 
uöt16_t
 
uhMask
 = 
hu¨t
->
Mask
;

2816 
uöt16_t
 
uhd©a
;

2819 if(
hu¨t
->
RxSèã
 =
HAL_UART_STATE_BUSY_RX
)

2821 
uhd©a
 = (
uöt16_t
Ë
	`READ_REG
(
hu¨t
->
In°™˚
->
RDR
);

2822 i‡((
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
Ë&& (hu¨t->Inô.
P¨ôy
 =
UART_PARITY_NONE
))

2824 
tmp
 = (
uöt16_t
*Ë
hu¨t
->
pRxBuffPå
 ;

2825 *
tmp
 = (
uöt16_t
)(
uhd©a
 & 
uhMask
);

2826 
hu¨t
->
pRxBuffPå
 +=2;

2830 *
hu¨t
->
pRxBuffPå
++ = (
uöt8_t
)(
uhd©a
 & (uöt8_t)
uhMask
);

2833 if(--
hu¨t
->
RxX„rCou¡
 == 0U)

2836 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_RXNEIE
 | 
USART_CR1_PEIE
));

2839 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_EIE
);

2842 
hu¨t
->
RxSèã
 = 
HAL_UART_STATE_READY
;

2844 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

2846  
HAL_OK
;

2849  
HAL_OK
;

2854 
	`__HAL_UART_SEND_REQ
(
hu¨t
, 
UART_RXDATA_FLUSH_REQUEST
);

2856  
HAL_BUSY
;

2858 
	}
}

	@Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c

55 
	~"°m32l0xx_hÆ.h
"

66 #ifde‡
HAL_UART_MODULE_ENABLED


76 
UARTEx_Wakeup_AddªssC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
UART_WakeUpTy≥Def
 
WakeUpSñe˘i⁄
);

164 
HAL_SètusTy≥Def
 
	$HAL_RS485Ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Pﬁ¨ôy
, uöt32_à
As£πi⁄Time
, uöt32_à
Dós£πi⁄Time
)

166 
uöt32_t
 
ãmp
 = 0x0U;

169 if(
hu¨t
 =
NULL
)

171  
HAL_ERROR
;

175 
	`as£π_∑øm
(
	`IS_UART_DE_POLARITY
(
Pﬁ¨ôy
));

178 
	`as£π_∑øm
(
	`IS_UART_ASSERTIONTIME
(
As£πi⁄Time
));

181 
	`as£π_∑øm
(
	`IS_UART_DEASSERTIONTIME
(
Dós£πi⁄Time
));

183 if(
hu¨t
->
gSèã
 =
HAL_UART_STATE_RESET
)

186 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

189 
	`HAL_UART_M•Inô
(
hu¨t
);

192 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

195 
	`__HAL_UART_DISABLE
(
hu¨t
);

198 if(
hu¨t
->
Adv™˚dInô
.
AdvFótuªInô
 !
UART_ADVFEATURE_NO_INIT
)

200 
	`UART_AdvFótuªC⁄fig
(
hu¨t
);

203 i‡(
	`UART_SëC⁄fig
(
hu¨t
Ë=
HAL_ERROR
)

205  
HAL_ERROR
;

209 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DEM
);

212 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DEP
, 
Pﬁ¨ôy
);

215 
ãmp
 = (
As£πi⁄Time
 << 
UART_CR1_DEAT_ADDRESS_LSB_POS
);

216 
ãmp
 |(
Dós£πi⁄Time
 << 
UART_CR1_DEDT_ADDRESS_LSB_POS
);

217 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
, (
USART_CR1_DEDT
|
USART_CR1_DEAT
), 
ãmp
);

220 
	`__HAL_UART_ENABLE
(
hu¨t
);

223  (
	`UART_CheckIdÀSèã
(
hu¨t
));

224 
	}
}

272 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹Ex_AddªssLígth_Së
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
AddªssLígth
)

275 if(
hu¨t
 =
NULL
)

277  
HAL_ERROR
;

281 
	`as£π_∑øm
(
	`IS_UART_ADDRESSLENGTH_DETECT
(
AddªssLígth
));

283 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

286 
	`__HAL_UART_DISABLE
(
hu¨t
);

289 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ADDM7
, 
AddªssLígth
);

292 
	`__HAL_UART_ENABLE
(
hu¨t
);

295  (
	`UART_CheckIdÀSèã
(
hu¨t
));

296 
	}
}

309 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_St›ModeWakeUpSour˚C⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
UART_WakeUpTy≥Def
 
WakeUpSñe˘i⁄
)

311 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

312 
uöt32_t
 
tick°¨t
 = 0;

315 
	`as£π_∑øm
(
	`IS_UART_WAKEUP_FROMSTOP_INSTANCE
(
hu¨t
->
In°™˚
));

317 
	`as£π_∑øm
(
	`IS_UART_WAKEUP_SELECTION
(
WakeUpSñe˘i⁄
.
WakeUpEvít
));

320 
	`__HAL_LOCK
(
hu¨t
);

322 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

325 
	`__HAL_UART_DISABLE
(
hu¨t
);

328 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_WUS
, 
WakeUpSñe˘i⁄
.
WakeUpEvít
);

330 i‡(
WakeUpSñe˘i⁄
.
WakeUpEvít
 =
UART_WAKEUP_ON_ADDRESS
)

332 
	`UARTEx_Wakeup_AddªssC⁄fig
(
hu¨t
, 
WakeUpSñe˘i⁄
);

336 
	`__HAL_UART_ENABLE
(
hu¨t
);

339 
tick°¨t
 = 
	`HAL_GëTick
();

342 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
USART_ISR_REACK
, 
RESET
, 
tick°¨t
, 
HAL_UART_TIMEOUT_VALUE
Ë!
HAL_OK
)

344 
°©us
 = 
HAL_TIMEOUT
;

349 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

353 
	`__HAL_UNLOCK
(
hu¨t
);

355  
°©us
;

356 
	}
}

365 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_E«bÀSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

368 
	`__HAL_LOCK
(
hu¨t
);

370 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

373 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_UESM
);

375 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

378 
	`__HAL_UNLOCK
(
hu¨t
);

380  
HAL_OK
;

381 
	}
}

388 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_DißbÀSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

391 
	`__HAL_LOCK
(
hu¨t
);

393 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

396 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_UESM
);

398 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

401 
	`__HAL_UNLOCK
(
hu¨t
);

403  
HAL_OK
;

404 
	}
}

412 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_E«bÀClockSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

415 
	`__HAL_LOCK
(
hu¨t
);

417 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

420 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_UCESM
);

422 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

425 
	`__HAL_UNLOCK
(
hu¨t
);

427  
HAL_OK
;

428 
	}
}

435 
HAL_SètusTy≥Def
 
	$HAL_UARTEx_DißbÀClockSt›Mode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

438 
	`__HAL_LOCK
(
hu¨t
);

440 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_BUSY
;

443 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_UCESM
);

445 
hu¨t
->
gSèã
 = 
HAL_UART_STATE_READY
;

448 
	`__HAL_UNLOCK
(
hu¨t
);

450  
HAL_OK
;

451 
	}
}

458 
__wók
 
	$HAL_UARTEx_WakeupCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

461 
	`UNUSED
(
hu¨t
);

466 
	}
}

486 
	$UARTEx_Wakeup_AddªssC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
UART_WakeUpTy≥Def
 
WakeUpSñe˘i⁄
)

488 
	`as£π_∑øm
(
	`IS_UART_ADDRESSLENGTH_DETECT
(
WakeUpSñe˘i⁄
.
AddªssLígth
));

489 if(
WakeUpSñe˘i⁄
.
AddªssLígth
 =
UART_ADDRESS_DETECT_4B
)

491 
	`as£π_∑øm
(
	`IS_UART_4B_ADDRESS
(
WakeUpSñe˘i⁄
.
Addªss
));

495 
	`as£π_∑øm
(
	`IS_UART_7B_ADDRESS
(
WakeUpSñe˘i⁄
.
Addªss
));

499 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ADDM7
, 
WakeUpSñe˘i⁄
.
AddªssLígth
);

502 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ADD
, ((
uöt32_t
)
WakeUpSñe˘i⁄
.
Addªss
 << 
UART_CR2_ADDRESS_LSB_POS
));

503 
	}
}

	@Inc/adc.h

40 #i‚de‡
__adc_H


41 
	#__adc_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
ADC_H™dÀTy≥Def
 
hadc
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_ADC_Inô
();

68 #ifde‡
__˝lu•lus


	@Inc/dac.h

40 #i‚de‡
__dac_H


41 
	#__dac_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
DAC_H™dÀTy≥Def
 
hdac
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_DAC_Inô
();

68 #ifde‡
__˝lu•lus


	@Inc/defines.h

4 
	#TXBUFFERSIZE
 1

	)

5 
	#RXBUFFERSIZE
 3

	)

6 
	#CMDLINESIZE
 512

	)

9 
	#COMMAND_RECEIVED
 0

	)

10 
	#MIDI_RECEIVED
 1

	)

13 
	#PRINT
(
x
,
y
Ë
	`HAL_UART_Tønsmô
(&
hu¨t1
, x, y, 100)

	)

14 
	#GET_EVENT
(
EVENT
Ë(
maöLo›Evíts
 & (0x1 << EVENT)Ë> 0

	)

15 
	#SET_EVENT
(
EVENT
Ë
maöLo›Evíts
 |(0x1 << EVENT)

	)

16 
	#UNSET_EVENT
(
EVENT
Ë
maöLo›Evíts
 &~(0x1 << EVENT)

	)

18 
	#comm™dRe˚ivedEvít
(Ë
	`SET_EVENT
(
COMMAND_RECEIVED
)

	)

19 
	#midiRe˚ivedEvít
(Ë
	`SET_EVENT
(
MIDI_RECEIVED
)

	)

	@Inc/gpio.h

41 #i‚de‡
__gpio_H


42 
	#__gpio_H


	)

43 #ifde‡
__˝lu•lus


48 
	~"°m32l0xx_hÆ.h
"

49 
	~"maö.h
"

59 
MX_GPIO_Inô
();

62 
wrôeGªíLed
(
uöt8_t
 
vÆ
);

65 #ifde‡
__˝lu•lus


	@Inc/i2c.h

40 #i‚de‡
__i2c_H


41 
	#__i2c_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
I2C_H™dÀTy≥Def
 
hi2c1
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_I2C1_Inô
();

68 #ifde‡
__˝lu•lus


	@Inc/i2s.h

40 #i‚de‡
__i2s_H


41 
	#__i2s_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
I2S_H™dÀTy≥Def
 
hi2s2
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_I2S2_Inô
();

68 #ifde‡
__˝lu•lus


	@Inc/main.h

41 #i‚de‡
__MAIN_H__


42 
	#__MAIN_H__


	)

52 
	#Red_Led_Pö
 
GPIO_PIN_5


	)

53 
	#Red_Led_GPIO_P‹t
 
GPIOA


	)

54 
	#Gªí_Led_Pö
 
GPIO_PIN_4


	)

55 
	#Gªí_Led_GPIO_P‹t
 
GPIOB


	)

68 #ifde‡
__˝lu•lus


71 
_Eº‹_H™dÀr
(*, );

73 
	#Eº‹_H™dÀr
(Ë
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
)

	)

74 #ifde‡
__˝lu•lus


	@Inc/midi.h

2 
	~<°döt.h
>

4 
	#STATUS_BITS
 4

	)

5 
	#NOTE_OFF
 0b1000

	)

6 
	#NOTE_ON
 0b1001

	)

7 
	#POLY_KEY_PRESSURE
 0b1010

	)

8 
	#CONTROLLER_CHANGE
 0b1011

	)

9 
	#PROGRAM_CHANGE
 0b1100

	)

10 
	#CHANNEL_PRESSURE
 0b1101

	)

11 
	#PITCH_BEND
 0b1110

	)

13 
	sMIDIPackë
 {

14 
uöt8_t
 
	m°©us_byã
;

15 
uöt8_t
 
	md©a_byã1
;

16 
uöt8_t
 
	md©a_byã2
;

17 } 
	tMIDIPackë_t
;

19 
¥o˚ssMidi
(
MIDIPackë_t
 *
p
);

	@Inc/stm32l0xx_hal_conf.h

36 #i‚de‡
__STM32L0xx_HAL_CONF_H


37 
	#__STM32L0xx_HAL_CONF_H


	)

39 #ifde‡
__˝lu•lus


43 
	~"maö.h
"

52 
	#HAL_MODULE_ENABLED


	)

53 
	#HAL_ADC_MODULE_ENABLED


	)

58 
	#HAL_DAC_MODULE_ENABLED


	)

60 
	#HAL_I2S_MODULE_ENABLED


	)

67 
	#HAL_TIM_MODULE_ENABLED


	)

69 
	#HAL_UART_MODULE_ENABLED


	)

77 
	#HAL_GPIO_MODULE_ENABLED


	)

78 
	#HAL_DMA_MODULE_ENABLED


	)

79 
	#HAL_I2C_MODULE_ENABLED


	)

80 
	#HAL_RCC_MODULE_ENABLED


	)

81 
	#HAL_FLASH_MODULE_ENABLED


	)

82 
	#HAL_PWR_MODULE_ENABLED


	)

83 
	#HAL_CORTEX_MODULE_ENABLED


	)

91 #i‡!
deföed
 (
HSE_VALUE
)

92 
	#HSE_VALUE
 ((
uöt32_t
)8000000UË

	)

95 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

96 
	#HSE_STARTUP_TIMEOUT
 ((
uöt32_t
)100UË

	)

103 #i‡!
deföed
 (
MSI_VALUE
)

104 
	#MSI_VALUE
 ((
uöt32_t
)2097000UË

	)

112 #i‡!
deföed
 (
HSI_VALUE
)

113 
	#HSI_VALUE
 ((
uöt32_t
)16000000UË

	)

119 #i‡!
deföed
 (
HSI48_VALUE
)

120 
	#HSI48_VALUE
 ((
uöt32_t
)48000000UË

	)

128 #i‡!
deföed
 (
LSI_VALUE
)

129 
	#LSI_VALUE
 ((
uöt32_t
)37000UË

	)

131 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


132 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
.*/

137 #i‡!
deföed
 (
LSE_VALUE
)

138 
	#LSE_VALUE
 ((
uöt32_t
)32768UË

	)

141 #i‡!
deföed
 (
LSE_STARTUP_TIMEOUT
)

142 
	#LSE_STARTUP_TIMEOUT
 ((
uöt32_t
)5000UË

	)

152 
	#VDD_VALUE
 ((
uöt32_t
)3300UË

	)

153 
	#TICK_INT_PRIORITY
 ((
uöt32_t
)0UË

	)

154 
	#USE_RTOS
 0U

	)

155 
	#PREFETCH_ENABLE
 0U

	)

156 
	#PREREAD_ENABLE
 1U

	)

157 
	#BUFFER_CACHE_DISABLE
 0U

	)

171 #ifde‡
HAL_RCC_MODULE_ENABLED


172 
	~"°m32l0xx_hÆ_rcc.h
"

175 #ifde‡
HAL_EXTI_MODULE_ENABLED


176 
	~"°m32l0xx_hÆ_exti.h
"

179 #ifde‡
HAL_GPIO_MODULE_ENABLED


180 
	~"°m32l0xx_hÆ_gpio.h
"

183 #ifde‡
HAL_DMA_MODULE_ENABLED


184 
	~"°m32l0xx_hÆ_dma.h
"

187 #ifde‡
HAL_CORTEX_MODULE_ENABLED


188 
	~"°m32l0xx_hÆ_c‹ãx.h
"

191 #ifde‡
HAL_ADC_MODULE_ENABLED


192 
	~"°m32l0xx_hÆ_adc.h
"

195 #ifde‡
HAL_COMP_MODULE_ENABLED


196 
	~"°m32l0xx_hÆ_comp.h
"

199 #ifde‡
HAL_CRC_MODULE_ENABLED


200 
	~"°m32l0xx_hÆ_¸c.h
"

203 #ifde‡
HAL_CRYP_MODULE_ENABLED


204 
	~"°m32l0xx_hÆ_¸yp.h
"

207 #ifde‡
HAL_DAC_MODULE_ENABLED


208 
	~"°m32l0xx_hÆ_dac.h
"

211 #ifde‡
HAL_FIREWALL_MODULE_ENABLED


212 
	~"°m32l0xx_hÆ_fúewÆl.h
"

215 #ifde‡
HAL_FLASH_MODULE_ENABLED


216 
	~"°m32l0xx_hÆ_Êash.h
"

219 #ifde‡
HAL_I2C_MODULE_ENABLED


220 
	~"°m32l0xx_hÆ_i2c.h
"

223 #ifde‡
HAL_I2S_MODULE_ENABLED


224 
	~"°m32l0xx_hÆ_i2s.h
"

227 #ifde‡
HAL_IWDG_MODULE_ENABLED


228 
	~"°m32l0xx_hÆ_iwdg.h
"

231 #ifde‡
HAL_LCD_MODULE_ENABLED


232 
	~"°m32l0xx_hÆ_lcd.h
"

235 #ifde‡
HAL_LPTIM_MODULE_ENABLED


236 
	~"°m32l0xx_hÆ_Õtim.h
"

239 #ifde‡
HAL_PWR_MODULE_ENABLED


240 
	~"°m32l0xx_hÆ_pwr.h
"

243 #ifde‡
HAL_RNG_MODULE_ENABLED


244 
	~"°m32l0xx_hÆ_∫g.h
"

247 #ifde‡
HAL_RTC_MODULE_ENABLED


248 
	~"°m32l0xx_hÆ_πc.h
"

252 #ifde‡
HAL_SPI_MODULE_ENABLED


253 
	~"°m32l0xx_hÆ_•i.h
"

256 #ifde‡
HAL_TIM_MODULE_ENABLED


257 
	~"°m32l0xx_hÆ_tim.h
"

260 #ifde‡
HAL_TSC_MODULE_ENABLED


261 
	~"°m32l0xx_hÆ_tsc.h
"

264 #ifde‡
HAL_UART_MODULE_ENABLED


265 
	~"°m32l0xx_hÆ_u¨t.h
"

268 #ifde‡
HAL_USART_MODULE_ENABLED


269 
	~"°m32l0xx_hÆ_ußπ.h
"

272 #ifde‡
HAL_IRDA_MODULE_ENABLED


273 
	~"°m32l0xx_hÆ_úda.h
"

276 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


277 
	~"°m32l0xx_hÆ_sm¨tˇrd.h
"

280 #ifde‡
HAL_SMBUS_MODULE_ENABLED


281 
	~"°m32l0xx_hÆ_smbus.h
"

284 #ifde‡
HAL_WWDG_MODULE_ENABLED


285 
	~"°m32l0xx_hÆ_wwdg.h
"

288 #ifde‡
HAL_PCD_MODULE_ENABLED


289 
	~"°m32l0xx_hÆ_pcd.h
"

293 #ifde‡ 
USE_FULL_ASSERT


302 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0U : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

304 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

306 
	#as£π_∑øm
(
ex¥
Ë(()0U)

	)

309 #ifde‡
__˝lu•lus


	@Inc/stm32l0xx_it.h

35 #i‚de‡
__STM32L0xx_IT_H


36 
	#__STM32L0xx_IT_H


	)

38 #ifde‡
__˝lu•lus


43 
	~"°m32l0xx_hÆ.h
"

44 
	~"maö.h
"

50 
NMI_H™dÀr
();

51 
H¨dFau…_H™dÀr
();

52 
SVC_H™dÀr
();

53 
PídSV_H™dÀr
();

54 
SysTick_H™dÀr
();

55 
USART1_IRQH™dÀr
();

56 
USART2_IRQH™dÀr
();

58 #ifde‡
__˝lu•lus


	@Inc/tim.h

40 #i‚de‡
__tim_H


41 
	#__tim_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
TIM_H™dÀTy≥Def
 
htim2
;

55 
TIM_H™dÀTy≥Def
 
htim6
;

56 
TIM_H™dÀTy≥Def
 
htim21
;

57 
TIM_H™dÀTy≥Def
 
htim22
;

63 
_Eº‹_H™dÀr
(*, );

65 
MX_TIM2_Inô
();

66 
MX_TIM6_Inô
();

67 
MX_TIM21_Inô
();

68 
MX_TIM22_Inô
();

70 
HAL_TIM_M•Po°Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

76 #ifde‡
__˝lu•lus


	@Inc/usart.h

40 #i‚de‡
__ußπ_H


41 
	#__ußπ_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
UART_H™dÀTy≥Def
 
hu¨t1
;

55 
UART_H™dÀTy≥Def
 
hu¨t2
;

61 
_Eº‹_H™dÀr
(*, );

63 
MX_USART1_UART_Inô
();

64 
MX_USART2_UART_Inô
();

70 #ifde‡
__˝lu•lus


	@Src/adc.c

41 
	~"adc.h
"

43 
	~"gpio.h
"

49 
ADC_H™dÀTy≥Def
 
	ghadc
;

52 
	$MX_ADC_Inô
()

54 
ADC_Ch™√lC⁄fTy≥Def
 
sC⁄fig
;

58 
hadc
.
In°™˚
 = 
ADC1
;

59 
hadc
.
Inô
.
Ovîßm∂ögMode
 = 
DISABLE
;

60 
hadc
.
Inô
.
ClockPªsˇÀr
 = 
ADC_CLOCK_SYNC_PCLK_DIV1
;

61 
hadc
.
Inô
.
Resﬁuti⁄
 = 
ADC_RESOLUTION_12B
;

62 
hadc
.
Inô
.
Sam∂ögTime
 = 
ADC_SAMPLETIME_1CYCLE_5
;

63 
hadc
.
Inô
.
SˇnC⁄vMode
 = 
ADC_SCAN_DIRECTION_FORWARD
;

64 
hadc
.
Inô
.
D©aAlign
 = 
ADC_DATAALIGN_RIGHT
;

65 
hadc
.
Inô
.
C⁄töuousC⁄vMode
 = 
DISABLE
;

66 
hadc
.
Inô
.
Disc⁄töuousC⁄vMode
 = 
DISABLE
;

67 
hadc
.
Inô
.
Exã∫ÆTrigC⁄vEdge
 = 
ADC_EXTERNALTRIGCONVEDGE_NONE
;

68 
hadc
.
Inô
.
Exã∫ÆTrigC⁄v
 = 
ADC_SOFTWARE_START
;

69 
hadc
.
Inô
.
DMAC⁄töuousReque°s
 = 
DISABLE
;

70 
hadc
.
Inô
.
EOCSñe˘i⁄
 = 
ADC_EOC_SINGLE_CONV
;

71 
hadc
.
Inô
.
Ovîrun
 = 
ADC_OVR_DATA_PRESERVED
;

72 
hadc
.
Inô
.
LowPowîAutoWaô
 = 
DISABLE
;

73 
hadc
.
Inô
.
LowPowîFªquícyMode
 = 
DISABLE
;

74 
hadc
.
Inô
.
LowPowîAutoPowîOff
 = 
DISABLE
;

75 i‡(
	`HAL_ADC_Inô
(&
hadc
Ë!
HAL_OK
)

77 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

82 
sC⁄fig
.
Ch™√l
 = 
ADC_CHANNEL_6
;

83 
sC⁄fig
.
R™k
 = 
ADC_RANK_CHANNEL_NUMBER
;

84 i‡(
	`HAL_ADC_C⁄figCh™√l
(&
hadc
, &
sC⁄fig
Ë!
HAL_OK
)

86 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

91 
sC⁄fig
.
Ch™√l
 = 
ADC_CHANNEL_7
;

92 i‡(
	`HAL_ADC_C⁄figCh™√l
(&
hadc
, &
sC⁄fig
Ë!
HAL_OK
)

94 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

99 
sC⁄fig
.
Ch™√l
 = 
ADC_CHANNEL_8
;

100 i‡(
	`HAL_ADC_C⁄figCh™√l
(&
hadc
, &
sC⁄fig
Ë!
HAL_OK
)

102 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

107 
sC⁄fig
.
Ch™√l
 = 
ADC_CHANNEL_9
;

108 i‡(
	`HAL_ADC_C⁄figCh™√l
(&
hadc
, &
sC⁄fig
Ë!
HAL_OK
)

110 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

113 
	}
}

115 
	$HAL_ADC_M•Inô
(
ADC_H™dÀTy≥Def
* 
adcH™dÀ
)

118 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

119 if(
adcH™dÀ
->
In°™˚
==
ADC1
)

125 
	`__HAL_RCC_ADC1_CLK_ENABLE
();

133 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_6
|
GPIO_PIN_7
;

134 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_ANALOG
;

135 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

136 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

138 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_0
|
GPIO_PIN_1
;

139 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_ANALOG
;

140 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

141 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

147 
	}
}

149 
	$HAL_ADC_M•DeInô
(
ADC_H™dÀTy≥Def
* 
adcH™dÀ
)

152 if(
adcH™dÀ
->
In°™˚
==
ADC1
)

158 
	`__HAL_RCC_ADC1_CLK_DISABLE
();

166 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_6
|
GPIO_PIN_7
);

168 
	`HAL_GPIO_DeInô
(
GPIOB
, 
GPIO_PIN_0
|
GPIO_PIN_1
);

174 
	}
}

	@Src/adc.h

40 #i‚de‡
__adc_H


41 
	#__adc_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
ADC_H™dÀTy≥Def
 
hadc
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_ADC_Inô
();

68 #ifde‡
__˝lu•lus


	@Src/dac.c

41 
	~"dac.h
"

43 
	~"gpio.h
"

49 
DAC_H™dÀTy≥Def
 
	ghdac
;

52 
	$MX_DAC_Inô
()

54 
DAC_Ch™√lC⁄fTy≥Def
 
sC⁄fig
;

58 
hdac
.
In°™˚
 = 
DAC
;

59 i‡(
	`HAL_DAC_Inô
(&
hdac
Ë!
HAL_OK
)

61 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

66 
sC⁄fig
.
DAC_Triggî
 = 
DAC_TRIGGER_NONE
;

67 
sC⁄fig
.
DAC_OuçutBuf„r
 = 
DAC_OUTPUTBUFFER_ENABLE
;

68 i‡(
	`HAL_DAC_C⁄figCh™√l
(&
hdac
, &
sC⁄fig
, 
DAC_CHANNEL_1
Ë!
HAL_OK
)

70 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

73 
	}
}

75 
	$HAL_DAC_M•Inô
(
DAC_H™dÀTy≥Def
* 
dacH™dÀ
)

78 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

79 if(
dacH™dÀ
->
In°™˚
==
DAC
)

85 
	`__HAL_RCC_DAC_CLK_ENABLE
();

90 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_4
;

91 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_ANALOG
;

92 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

93 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

99 
	}
}

101 
	$HAL_DAC_M•DeInô
(
DAC_H™dÀTy≥Def
* 
dacH™dÀ
)

104 if(
dacH™dÀ
->
In°™˚
==
DAC
)

110 
	`__HAL_RCC_DAC_CLK_DISABLE
();

115 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_4
);

121 
	}
}

	@Src/dac.h

40 #i‚de‡
__dac_H


41 
	#__dac_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
DAC_H™dÀTy≥Def
 
hdac
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_DAC_Inô
();

68 #ifde‡
__˝lu•lus


	@Src/defines.h

2 
	~<°dboﬁ.h
>

7 
	#TXBUFFERSIZE
 1

	)

8 
	#RXBUFFERSIZE
 3

	)

9 
	#CMDLINESIZE
 512

	)

12 
	#COMMAND_RECEIVED
 0

	)

13 
	#MIDI_RECEIVED
 1

	)

16 
	#PRINT
(
x
,
y
Ë
	`HAL_UART_Tønsmô
(&
hu¨t1
, x, y, 100)

	)

17 
	#GET_EVENT
(
EVENT
Ë(
maöLo›Evíts
 & (0x1 << EVENT)Ë> 0

	)

18 
	#SET_EVENT
(
EVENT
Ë
maöLo›Evíts
 |(0x1 << EVENT)

	)

19 
	#UNSET_EVENT
(
EVENT
Ë
maöLo›Evíts
 &~(0x1 << EVENT)

	)

21 
	#comm™dRe˚ivedEvít
(Ë
	`SET_EVENT
(
COMMAND_RECEIVED
)

	)

22 
	#midiRe˚ivedEvít
(Ë
	`SET_EVENT
(
MIDI_RECEIVED
)

	)

	@Src/gpio.c

41 
	~"gpio.h
"

60 
	$MX_GPIO_Inô
()

63 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

66 
	`__HAL_RCC_GPIOA_CLK_ENABLE
();

67 
	`__HAL_RCC_GPIOB_CLK_ENABLE
();

70 
	`HAL_GPIO_WrôePö
(
Gªí_Led_GPIO_P‹t
, 
Gªí_Led_Pö
, 
GPIO_PIN_RESET
);

73 
GPIO_InôSåu˘
.
Pö
 = 
Gªí_Led_Pö
;

74 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

75 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

76 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

77 
	`HAL_GPIO_Inô
(
Gªí_Led_GPIO_P‹t
, &
GPIO_InôSåu˘
);

79 
	}
}

	@Src/gpio.h

41 #i‚de‡
__gpio_H


42 
	#__gpio_H


	)

43 #ifde‡
__˝lu•lus


48 
	~"°m32l0xx_hÆ.h
"

49 
	~"maö.h
"

59 
MX_GPIO_Inô
();

62 
wrôeGªíLed
(
uöt8_t
 
vÆ
);

65 #ifde‡
__˝lu•lus


	@Src/i2c.c

41 
	~"i2c.h
"

43 
	~"gpio.h
"

49 
I2C_H™dÀTy≥Def
 
	ghi2c1
;

52 
	$MX_I2C1_Inô
()

55 
hi2c1
.
In°™˚
 = 
I2C1
;

56 
hi2c1
.
Inô
.
Timög
 = 0x00000708;

57 
hi2c1
.
Inô
.
OwnAddªss1
 = 0;

58 
hi2c1
.
Inô
.
AddªssögMode
 = 
I2C_ADDRESSINGMODE_7BIT
;

59 
hi2c1
.
Inô
.
DuÆAddªssMode
 = 
I2C_DUALADDRESS_DISABLE
;

60 
hi2c1
.
Inô
.
OwnAddªss2
 = 0;

61 
hi2c1
.
Inô
.
OwnAddªss2Masks
 = 
I2C_OA2_NOMASK
;

62 
hi2c1
.
Inô
.
GíîÆCÆlMode
 = 
I2C_GENERALCALL_DISABLE
;

63 
hi2c1
.
Inô
.
NoSåëchMode
 = 
I2C_NOSTRETCH_DISABLE
;

64 i‡(
	`HAL_I2C_Inô
(&
hi2c1
Ë!
HAL_OK
)

66 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

71 i‡(
	`HAL_I2CEx_C⁄figA«logFûãr
(&
hi2c1
, 
I2C_ANALOGFILTER_ENABLE
Ë!
HAL_OK
)

73 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

78 i‡(
	`HAL_I2CEx_C⁄figDigôÆFûãr
(&
hi2c1
, 0Ë!
HAL_OK
)

80 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

83 
	}
}

85 
	$HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
* 
i2cH™dÀ
)

88 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

89 if(
i2cH™dÀ
->
In°™˚
==
I2C1
)

99 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_6
|
GPIO_PIN_7
;

100 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_OD
;

101 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

102 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_VERY_HIGH
;

103 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF1_I2C1
;

104 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

107 
	`__HAL_RCC_I2C1_CLK_ENABLE
();

112 
	}
}

114 
	$HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
* 
i2cH™dÀ
)

117 if(
i2cH™dÀ
->
In°™˚
==
I2C1
)

123 
	`__HAL_RCC_I2C1_CLK_DISABLE
();

129 
	`HAL_GPIO_DeInô
(
GPIOB
, 
GPIO_PIN_6
|
GPIO_PIN_7
);

135 
	}
}

	@Src/i2c.h

40 #i‚de‡
__i2c_H


41 
	#__i2c_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
I2C_H™dÀTy≥Def
 
hi2c1
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_I2C1_Inô
();

68 #ifde‡
__˝lu•lus


	@Src/i2s.c

41 
	~"i2s.h
"

43 
	~"gpio.h
"

49 
I2S_H™dÀTy≥Def
 
	ghi2s2
;

52 
	$MX_I2S2_Inô
()

55 
hi2s2
.
In°™˚
 = 
SPI2
;

56 
hi2s2
.
Inô
.
Mode
 = 
I2S_MODE_MASTER_TX
;

57 
hi2s2
.
Inô
.
Sènd¨d
 = 
I2S_STANDARD_PHILIPS
;

58 
hi2s2
.
Inô
.
D©aF‹m©
 = 
I2S_DATAFORMAT_16B
;

59 
hi2s2
.
Inô
.
MCLKOuçut
 = 
I2S_MCLKOUTPUT_DISABLE
;

60 
hi2s2
.
Inô
.
AudioFªq
 = 
I2S_AUDIOFREQ_8K
;

61 
hi2s2
.
Inô
.
CPOL
 = 
I2S_CPOL_LOW
;

62 i‡(
	`HAL_I2S_Inô
(&
hi2s2
Ë!
HAL_OK
)

64 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

67 
	}
}

69 
	$HAL_I2S_M•Inô
(
I2S_H™dÀTy≥Def
* 
i2sH™dÀ
)

72 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

73 if(
i2sH™dÀ
->
In°™˚
==
SPI2
)

79 
	`__HAL_RCC_SPI2_CLK_ENABLE
();

86 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_12
|
GPIO_PIN_13
|
GPIO_PIN_15
;

87 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

88 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

89 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

90 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF0_SPI2
;

91 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

97 
	}
}

99 
	$HAL_I2S_M•DeInô
(
I2S_H™dÀTy≥Def
* 
i2sH™dÀ
)

102 if(
i2sH™dÀ
->
In°™˚
==
SPI2
)

108 
	`__HAL_RCC_SPI2_CLK_DISABLE
();

115 
	`HAL_GPIO_DeInô
(
GPIOB
, 
GPIO_PIN_12
|
GPIO_PIN_13
|
GPIO_PIN_15
);

121 
	}
}

	@Src/i2s.h

40 #i‚de‡
__i2s_H


41 
	#__i2s_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
I2S_H™dÀTy≥Def
 
hi2s2
;

60 
_Eº‹_H™dÀr
(*, );

62 
MX_I2S2_Inô
();

68 #ifde‡
__˝lu•lus


	@Src/main.c

40 
	~"maö.h
"

41 
	~"°m32l0xx_hÆ.h
"

42 
	~"adc.h
"

43 
	~"dac.h
"

44 
	~"i2c.h
"

45 
	~"i2s.h
"

46 
	~"tim.h
"

47 
	~"ußπ.h
"

48 
	~"gpio.h
"

49 
	~"sy¡h.h
"

63 
Sy°emClock_C⁄fig
();

64 
MX_NVIC_Inô
();

80 
	$maö
()

89 
	`HAL_Inô
();

96 
	`Sy°emClock_C⁄fig
();

103 
	`MX_GPIO_Inô
();

104 
	`MX_TIM6_Inô
();

105 
	`MX_USART1_UART_Inô
();

106 
	`MX_USART2_UART_Inô
();

107 
	`MX_I2C1_Inô
();

108 
	`MX_ADC_Inô
();

109 
	`MX_DAC_Inô
();

110 
	`MX_TIM2_Inô
();

111 
	`MX_I2S2_Inô
();

112 
	`MX_TIM21_Inô
();

113 
	`MX_TIM22_Inô
();

116 
	`MX_NVIC_Inô
();

118 
	`sy¡h_öô
();

123 
i
;

124 
i
 = 0; i < 
BUFFER_SIZE
; i++){

125 
u¨t_buf„r
[
i
] = 0;

127 
	`HAL_UART_Re˚ive_IT
(&
hu¨t1
, (
uöt8_t
 *)&
u¨t_buf„r
, 1);

128 
åue
)

137 
	}
}

143 
	$Sy°emClock_C⁄fig
()

146 
RCC_OscInôTy≥Def
 
RCC_OscInôSåu˘
;

147 
RCC_ClkInôTy≥Def
 
RCC_ClkInôSåu˘
;

148 
RCC_PîùhCLKInôTy≥Def
 
PîùhClkInô
;

152 
	`__HAL_PWR_VOLTAGESCALING_CONFIG
(
PWR_REGULATOR_VOLTAGE_SCALE1
);

156 
RCC_OscInôSåu˘
.
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_MSI
;

157 
RCC_OscInôSåu˘
.
MSISèã
 = 
RCC_MSI_ON
;

158 
RCC_OscInôSåu˘
.
MSICÆibøti⁄VÆue
 = 0;

159 
RCC_OscInôSåu˘
.
MSIClockR™ge
 = 
RCC_MSIRANGE_5
;

160 
RCC_OscInôSåu˘
.
PLL
.
PLLSèã
 = 
RCC_PLL_NONE
;

161 i‡(
	`HAL_RCC_OscC⁄fig
(&
RCC_OscInôSåu˘
Ë!
HAL_OK
)

163 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

168 
RCC_ClkInôSåu˘
.
ClockTy≥
 = 
RCC_CLOCKTYPE_HCLK
|
RCC_CLOCKTYPE_SYSCLK


169 |
RCC_CLOCKTYPE_PCLK1
|
RCC_CLOCKTYPE_PCLK2
;

170 
RCC_ClkInôSåu˘
.
SYSCLKSour˚
 = 
RCC_SYSCLKSOURCE_MSI
;

171 
RCC_ClkInôSåu˘
.
AHBCLKDividî
 = 
RCC_SYSCLK_DIV1
;

172 
RCC_ClkInôSåu˘
.
APB1CLKDividî
 = 
RCC_HCLK_DIV1
;

173 
RCC_ClkInôSåu˘
.
APB2CLKDividî
 = 
RCC_HCLK_DIV1
;

175 i‡(
	`HAL_RCC_ClockC⁄fig
(&
RCC_ClkInôSåu˘
, 
FLASH_LATENCY_0
Ë!
HAL_OK
)

177 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

180 
PîùhClkInô
.
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_USART1
|
RCC_PERIPHCLK_USART2


181 |
RCC_PERIPHCLK_I2C1
;

182 
PîùhClkInô
.
Ußπ1ClockSñe˘i⁄
 = 
RCC_USART1CLKSOURCE_PCLK2
;

183 
PîùhClkInô
.
Ußπ2ClockSñe˘i⁄
 = 
RCC_USART2CLKSOURCE_PCLK1
;

184 
PîùhClkInô
.
I2c1ClockSñe˘i⁄
 = 
RCC_I2C1CLKSOURCE_PCLK1
;

185 i‡(
	`HAL_RCCEx_PîùhCLKC⁄fig
(&
PîùhClkInô
Ë!
HAL_OK
)

187 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

192 
	`HAL_SYSTICK_C⁄fig
(
	`HAL_RCC_GëHCLKFªq
()/1000);

196 
	`HAL_SYSTICK_CLKSour˚C⁄fig
(
SYSTICK_CLKSOURCE_HCLK
);

199 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 0, 0);

200 
	}
}

206 
	$MX_NVIC_Inô
()

209 
	`HAL_NVIC_SëPri‹ôy
(
USART1_IRQn
, 0, 0);

210 
	`HAL_NVIC_E«bÀIRQ
(
USART1_IRQn
);

212 
	`HAL_NVIC_SëPri‹ôy
(
USART2_IRQn
, 0, 0);

213 
	`HAL_NVIC_E«bÀIRQ
(
USART2_IRQn
);

214 
	}
}

226 
	$_Eº‹_H™dÀr
(*
fûe
, 
löe
)

234 
	}
}

236 #ifde‡ 
USE_FULL_ASSERT


244 
	$as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
)

250 
	}
}

	@Src/main.h

41 #i‚de‡
__MAIN_H__


42 
	#__MAIN_H__


	)

47 
	~"deföes.h
"

52 
	#Red_Led_Pö
 
GPIO_PIN_5


	)

53 
	#Red_Led_GPIO_P‹t
 
GPIOA


	)

54 
	#Gªí_Led_Pö
 
GPIO_PIN_4


	)

55 
	#Gªí_Led_GPIO_P‹t
 
GPIOB


	)

68 #ifde‡
__˝lu•lus


71 
_Eº‹_H™dÀr
(*, );

73 
	#Eº‹_H™dÀr
(Ë
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
)

	)

74 #ifde‡
__˝lu•lus


	@Src/midi.c

	@Src/midi.h

2 
	~<°döt.h
>

4 
	#STATUS_BITS
 4

	)

5 
	#NOTE_OFF
 0b1000

	)

6 
	#NOTE_ON
 0b1001

	)

7 
	#POLY_KEY_PRESSURE
 0b1010

	)

8 
	#CONTROLLER_CHANGE
 0b1011

	)

9 
	#PROGRAM_CHANGE
 0b1100

	)

10 
	#CHANNEL_PRESSURE
 0b1101

	)

11 
	#PITCH_BEND
 0b1110

	)

13 
	sMIDIPackë
 {

14 
uöt8_t
 
	m°©us_byã
;

15 
uöt8_t
 
	md©a_byã1
;

16 
uöt8_t
 
	md©a_byã2
;

17 } 
	tMIDIPackë_t
;

19 
¥o˚ssMidi
(
MIDIPackë_t
 *
p
);

	@Src/stm32l0xx_hal_conf.h

36 #i‚de‡
__STM32L0xx_HAL_CONF_H


37 
	#__STM32L0xx_HAL_CONF_H


	)

39 #ifde‡
__˝lu•lus


43 
	~"maö.h
"

52 
	#HAL_MODULE_ENABLED


	)

53 
	#HAL_ADC_MODULE_ENABLED


	)

58 
	#HAL_DAC_MODULE_ENABLED


	)

60 
	#HAL_I2S_MODULE_ENABLED


	)

67 
	#HAL_TIM_MODULE_ENABLED


	)

69 
	#HAL_UART_MODULE_ENABLED


	)

77 
	#HAL_GPIO_MODULE_ENABLED


	)

78 
	#HAL_DMA_MODULE_ENABLED


	)

79 
	#HAL_I2C_MODULE_ENABLED


	)

80 
	#HAL_RCC_MODULE_ENABLED


	)

81 
	#HAL_FLASH_MODULE_ENABLED


	)

82 
	#HAL_PWR_MODULE_ENABLED


	)

83 
	#HAL_CORTEX_MODULE_ENABLED


	)

91 #i‡!
deföed
 (
HSE_VALUE
)

92 
	#HSE_VALUE
 ((
uöt32_t
)8000000UË

	)

95 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

96 
	#HSE_STARTUP_TIMEOUT
 ((
uöt32_t
)100UË

	)

103 #i‡!
deföed
 (
MSI_VALUE
)

104 
	#MSI_VALUE
 ((
uöt32_t
)2097000UË

	)

112 #i‡!
deföed
 (
HSI_VALUE
)

113 
	#HSI_VALUE
 ((
uöt32_t
)16000000UË

	)

119 #i‡!
deföed
 (
HSI48_VALUE
)

120 
	#HSI48_VALUE
 ((
uöt32_t
)48000000UË

	)

128 #i‡!
deföed
 (
LSI_VALUE
)

129 
	#LSI_VALUE
 ((
uöt32_t
)37000UË

	)

131 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


132 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
.*/

137 #i‡!
deföed
 (
LSE_VALUE
)

138 
	#LSE_VALUE
 ((
uöt32_t
)32768UË

	)

141 #i‡!
deföed
 (
LSE_STARTUP_TIMEOUT
)

142 
	#LSE_STARTUP_TIMEOUT
 ((
uöt32_t
)5000UË

	)

152 
	#VDD_VALUE
 ((
uöt32_t
)3300UË

	)

153 
	#TICK_INT_PRIORITY
 ((
uöt32_t
)0UË

	)

154 
	#USE_RTOS
 0U

	)

155 
	#PREFETCH_ENABLE
 0U

	)

156 
	#PREREAD_ENABLE
 1U

	)

157 
	#BUFFER_CACHE_DISABLE
 0U

	)

171 #ifde‡
HAL_RCC_MODULE_ENABLED


172 
	~"°m32l0xx_hÆ_rcc.h
"

175 #ifde‡
HAL_EXTI_MODULE_ENABLED


176 
	~"°m32l0xx_hÆ_exti.h
"

179 #ifde‡
HAL_GPIO_MODULE_ENABLED


180 
	~"°m32l0xx_hÆ_gpio.h
"

183 #ifde‡
HAL_DMA_MODULE_ENABLED


184 
	~"°m32l0xx_hÆ_dma.h
"

187 #ifde‡
HAL_CORTEX_MODULE_ENABLED


188 
	~"°m32l0xx_hÆ_c‹ãx.h
"

191 #ifde‡
HAL_ADC_MODULE_ENABLED


192 
	~"°m32l0xx_hÆ_adc.h
"

195 #ifde‡
HAL_COMP_MODULE_ENABLED


196 
	~"°m32l0xx_hÆ_comp.h
"

199 #ifde‡
HAL_CRC_MODULE_ENABLED


200 
	~"°m32l0xx_hÆ_¸c.h
"

203 #ifde‡
HAL_CRYP_MODULE_ENABLED


204 
	~"°m32l0xx_hÆ_¸yp.h
"

207 #ifde‡
HAL_DAC_MODULE_ENABLED


208 
	~"°m32l0xx_hÆ_dac.h
"

211 #ifde‡
HAL_FIREWALL_MODULE_ENABLED


212 
	~"°m32l0xx_hÆ_fúewÆl.h
"

215 #ifde‡
HAL_FLASH_MODULE_ENABLED


216 
	~"°m32l0xx_hÆ_Êash.h
"

219 #ifde‡
HAL_I2C_MODULE_ENABLED


220 
	~"°m32l0xx_hÆ_i2c.h
"

223 #ifde‡
HAL_I2S_MODULE_ENABLED


224 
	~"°m32l0xx_hÆ_i2s.h
"

227 #ifde‡
HAL_IWDG_MODULE_ENABLED


228 
	~"°m32l0xx_hÆ_iwdg.h
"

231 #ifde‡
HAL_LCD_MODULE_ENABLED


232 
	~"°m32l0xx_hÆ_lcd.h
"

235 #ifde‡
HAL_LPTIM_MODULE_ENABLED


236 
	~"°m32l0xx_hÆ_Õtim.h
"

239 #ifde‡
HAL_PWR_MODULE_ENABLED


240 
	~"°m32l0xx_hÆ_pwr.h
"

243 #ifde‡
HAL_RNG_MODULE_ENABLED


244 
	~"°m32l0xx_hÆ_∫g.h
"

247 #ifde‡
HAL_RTC_MODULE_ENABLED


248 
	~"°m32l0xx_hÆ_πc.h
"

252 #ifde‡
HAL_SPI_MODULE_ENABLED


253 
	~"°m32l0xx_hÆ_•i.h
"

256 #ifde‡
HAL_TIM_MODULE_ENABLED


257 
	~"°m32l0xx_hÆ_tim.h
"

260 #ifde‡
HAL_TSC_MODULE_ENABLED


261 
	~"°m32l0xx_hÆ_tsc.h
"

264 #ifde‡
HAL_UART_MODULE_ENABLED


265 
	~"°m32l0xx_hÆ_u¨t.h
"

268 #ifde‡
HAL_USART_MODULE_ENABLED


269 
	~"°m32l0xx_hÆ_ußπ.h
"

272 #ifde‡
HAL_IRDA_MODULE_ENABLED


273 
	~"°m32l0xx_hÆ_úda.h
"

276 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


277 
	~"°m32l0xx_hÆ_sm¨tˇrd.h
"

280 #ifde‡
HAL_SMBUS_MODULE_ENABLED


281 
	~"°m32l0xx_hÆ_smbus.h
"

284 #ifde‡
HAL_WWDG_MODULE_ENABLED


285 
	~"°m32l0xx_hÆ_wwdg.h
"

288 #ifde‡
HAL_PCD_MODULE_ENABLED


289 
	~"°m32l0xx_hÆ_pcd.h
"

293 #ifde‡ 
USE_FULL_ASSERT


302 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0U : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

304 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

306 
	#as£π_∑øm
(
ex¥
Ë(()0U)

	)

309 #ifde‡
__˝lu•lus


	@Src/stm32l0xx_hal_msp.c

40 
	~"°m32l0xx_hÆ.h
"

41 
_Eº‹_H™dÀr
(*, );

48 
	$HAL_M•Inô
()

54 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

55 
	`__HAL_RCC_PWR_CLK_ENABLE
();

59 
	`HAL_NVIC_SëPri‹ôy
(
SVC_IRQn
, 0, 0);

61 
	`HAL_NVIC_SëPri‹ôy
(
PídSV_IRQn
, 0, 0);

63 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 0, 0);

68 
	}
}

	@Src/stm32l0xx_it.c

34 
	~"°m32l0xx_hÆ.h
"

35 
	~"°m32l0xx.h
"

36 
	~"°m32l0xx_ô.h
"

43 
UART_H™dÀTy≥Def
 
hu¨t1
;

44 
UART_H™dÀTy≥Def
 
hu¨t2
;

53 
	$NMI_H™dÀr
()

61 
	}
}

66 
	$H¨dFau…_H™dÀr
()

79 
	}
}

84 
	$SVC_H™dÀr
()

92 
	}
}

97 
	$PídSV_H™dÀr
()

105 
	}
}

110 
	$SysTick_H™dÀr
()

115 
	`HAL_IncTick
();

116 
	`HAL_SYSTICK_IRQH™dÀr
();

120 
	}
}

132 
	$USART1_IRQH™dÀr
()

137 
	`HAL_UART_IRQH™dÀr
(&
hu¨t1
);

140 
	`u¨t_ª˚ive_ch¨
();

144 
	}
}

149 
	$USART2_IRQH™dÀr
()

154 
	`HAL_UART_IRQH™dÀr
(&
hu¨t2
);

158 
	}
}

	@Src/stm32l0xx_it.h

35 #i‚de‡
__STM32L0xx_IT_H


36 
	#__STM32L0xx_IT_H


	)

38 #ifde‡
__˝lu•lus


43 
	~"°m32l0xx_hÆ.h
"

44 
	~"maö.h
"

50 
NMI_H™dÀr
();

51 
H¨dFau…_H™dÀr
();

52 
SVC_H™dÀr
();

53 
PídSV_H™dÀr
();

54 
SysTick_H™dÀr
();

55 
USART1_IRQH™dÀr
();

56 
USART2_IRQH™dÀr
();

58 #ifde‡
__˝lu•lus


	@Src/synth.c

2 
	~"tim.h
"

3 
	~"sy¡h.h
"

6 
uöt16_t
 
	gcou¡îs
[
NUM_OSCILLATORS
], 
	gouçut
;

7 c⁄° 
uöt32_t
 
	gpôchtbl
[] = {16384,

17 
	$sy¡h_öô
(){

18 
	`HAL_TIM_Ba£_St›
(&
htim2
);

19 
	`HAL_TIM_Ba£_St›
(&
htim6
);

20 
	`HAL_TIM_Ba£_St›
(&
htim21
);

21 
	`HAL_TIM_Ba£_St›
(&
htim22
);

22 
	}
}

24 
	$∂ay_nŸe
(
uöt8_t
 
nŸe
, uöt8_à
vñocôy
){

25 
	`TIM22_C⁄fig
(
pôchtbl
[
nŸe
]);

26 
	}
}

28 
	$sy¡h_ouçut
(){

30 
	}
}

32 
	$make_sound
(){

33 
cou¡îs
[0] = 
	`__HAL_TIM_GëCou¡î
(&
htim2
);

34 
cou¡îs
[1] = 
	`__HAL_TIM_GëCou¡î
(&
htim6
);

35 
cou¡îs
[2] = 
	`__HAL_TIM_GëCou¡î
(&
htim21
);

36 
cou¡îs
[3] = 
	`__HAL_TIM_GëCou¡î
(&
htim22
);

38 
	}
}

40 
	$upd©e_lfos
(){

42 
	}
}

44 
	$mixî
(){

45 
	`make_sound
();

46 
	`sy¡h_ouçut
();

47 
	`upd©e_lfos
();

48 
	}
}

	@Src/synth.h

2 
	#NUM_OSCILLATORS
 4

	)

4 
uöt16_t
 
cou¡îs
[
NUM_OSCILLATORS
];

6 
sy¡h_öô
();

7 
∂ay_nŸe
(
uöt8_t
 
nŸe
, uöt8_à
vñocôy
);

8 
sy¡h_ouçut
();

9 
make_sound
();

10 
upd©e_lfos
();

	@Src/system_stm32l0xx.c

64 
	~"°m32l0xx.h
"

66 #i‡!
deföed
 (
HSE_VALUE
)

67 
	#HSE_VALUE
 ((
uöt32_t
)8000000UË

	)

70 #i‡!
deföed
 (
MSI_VALUE
)

71 
	#MSI_VALUE
 ((
uöt32_t
)2000000UË

	)

74 #i‡!
deföed
 (
HSI_VALUE
)

75 
	#HSI_VALUE
 ((
uöt32_t
)16000000UË

	)

99 
	#VECT_TAB_OFFSET
 0x00U

	)

125 
uöt32_t
 
	gSy°emC‹eClock
 = 2000000U;

126 c⁄° 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};

127 c⁄° 
uöt8_t
 
	gAPBPªscTabÀ
[8] = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};

128 c⁄° 
uöt8_t
 
	gPLLMulTabÀ
[9] = {3U, 4U, 6U, 8U, 12U, 16U, 24U, 32U, 48U};

151 
	$Sy°emInô
 ()

154 
RCC
->
CR
 |(
uöt32_t
)0x00000100U;

157 
RCC
->
CFGR
 &(
uöt32_t
) 0x88FF400CU;

160 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFF6U;

163 
RCC
->
CRRCR
 &(
uöt32_t
)0xFFFFFFFEU;

166 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFFU;

169 
RCC
->
CFGR
 &(
uöt32_t
)0xFF02FFFFU;

172 
RCC
->
CIER
 = 0x00000000U;

175 #ifde‡
VECT_TAB_SRAM


176 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

178 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

180 
	}
}

220 
	$Sy°emC‹eClockUpd©e
 ()

222 
uöt32_t
 
tmp
 = 0U, 
∂lmul
 = 0U, 
∂ldiv
 = 0U, 
∂lsour˚
 = 0U, 
msú™ge
 = 0U;

225 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

227 
tmp
)

230 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
) >> 13U;

231 
Sy°emC‹eClock
 = (32768U * (1U << (
msú™ge
 + 1U)));

234 
Sy°emC‹eClock
 = 
HSI_VALUE
;

237 
Sy°emC‹eClock
 = 
HSE_VALUE
;

241 
∂lmul
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
;

242 
∂ldiv
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
;

243 
∂lmul
 = 
PLLMulTabÀ
[(pllmul >> 18U)];

244 
∂ldiv
 = (plldiv >> 22U) + 1U;

246 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

248 i‡(
∂lsour˚
 == 0x00U)

251 
Sy°emC‹eClock
 = (((
HSI_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

256 
Sy°emC‹eClock
 = (((
HSE_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

260 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
) >> 13U;

261 
Sy°emC‹eClock
 = (32768U * (1U << (
msú™ge
 + 1U)));

266 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4U)];

268 
Sy°emC‹eClock
 >>
tmp
;

269 
	}
}

	@Src/tim.c

41 
	~"tim.h
"

47 
TIM_H™dÀTy≥Def
 
	ghtim2
;

48 
TIM_H™dÀTy≥Def
 
	ghtim6
;

49 
TIM_H™dÀTy≥Def
 
	ghtim21
;

50 
TIM_H™dÀTy≥Def
 
	ghtim22
;

53 
	$MX_TIM2_Inô
()

55 
TIM_ClockC⁄figTy≥Def
 
sClockSour˚C⁄fig
;

56 
TIM_Ma°îC⁄figTy≥Def
 
sMa°îC⁄fig
;

57 
TIM_OC_InôTy≥Def
 
sC⁄figOC
;

59 
htim2
.
In°™˚
 = 
TIM2
;

60 
htim2
.
Inô
.
PªsˇÀr
 = 0;

61 
htim2
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

62 
htim2
.
Inô
.
Pîiod
 = 0;

63 
htim2
.
Inô
.
ClockDivisi⁄
 = 
TIM_CLOCKDIVISION_DIV1
;

64 i‡(
	`HAL_TIM_Ba£_Inô
(&
htim2
Ë!
HAL_OK
)

66 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

69 
sClockSour˚C⁄fig
.
ClockSour˚
 = 
TIM_CLOCKSOURCE_INTERNAL
;

70 i‡(
	`HAL_TIM_C⁄figClockSour˚
(&
htim2
, &
sClockSour˚C⁄fig
Ë!
HAL_OK
)

72 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

75 i‡(
	`HAL_TIM_PWM_Inô
(&
htim2
Ë!
HAL_OK
)

77 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

80 
sMa°îC⁄fig
.
Ma°îOuçutTriggî
 = 
TIM_TRGO_RESET
;

81 
sMa°îC⁄fig
.
Ma°îSœveMode
 = 
TIM_MASTERSLAVEMODE_DISABLE
;

82 i‡(
	`HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(&
htim2
, &
sMa°îC⁄fig
Ë!
HAL_OK
)

84 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

87 
sC⁄figOC
.
OCMode
 = 
TIM_OCMODE_PWM1
;

88 
sC⁄figOC
.
Pul£
 = 0;

89 
sC⁄figOC
.
OCPﬁ¨ôy
 = 
TIM_OCPOLARITY_HIGH
;

90 
sC⁄figOC
.
OCFa°Mode
 = 
TIM_OCFAST_DISABLE
;

91 i‡(
	`HAL_TIM_PWM_C⁄figCh™√l
(&
htim2
, &
sC⁄figOC
, 
TIM_CHANNEL_1
Ë!
HAL_OK
)

93 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

96 
	`HAL_TIM_M•Po°Inô
(&
htim2
);

98 
	}
}

100 
	$MX_TIM6_Inô
()

102 
TIM_Ma°îC⁄figTy≥Def
 
sMa°îC⁄fig
;

104 
htim6
.
In°™˚
 = 
TIM6
;

105 
htim6
.
Inô
.
PªsˇÀr
 = 0;

106 
htim6
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

107 
htim6
.
Inô
.
Pîiod
 = 0;

108 i‡(
	`HAL_TIM_Ba£_Inô
(&
htim6
Ë!
HAL_OK
)

110 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

113 
sMa°îC⁄fig
.
Ma°îOuçutTriggî
 = 
TIM_TRGO_ENABLE
;

114 
sMa°îC⁄fig
.
Ma°îSœveMode
 = 
TIM_MASTERSLAVEMODE_DISABLE
;

115 i‡(
	`HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(&
htim6
, &
sMa°îC⁄fig
Ë!
HAL_OK
)

117 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

120 
	}
}

122 
	$MX_TIM21_Inô
()

124 
TIM_ClockC⁄figTy≥Def
 
sClockSour˚C⁄fig
;

125 
TIM_Ma°îC⁄figTy≥Def
 
sMa°îC⁄fig
;

127 
htim21
.
In°™˚
 = 
TIM21
;

128 
htim21
.
Inô
.
PªsˇÀr
 = 0;

129 
htim21
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

130 
htim21
.
Inô
.
Pîiod
 = 0;

131 
htim21
.
Inô
.
ClockDivisi⁄
 = 
TIM_CLOCKDIVISION_DIV1
;

132 i‡(
	`HAL_TIM_Ba£_Inô
(&
htim21
Ë!
HAL_OK
)

134 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

137 
sClockSour˚C⁄fig
.
ClockSour˚
 = 
TIM_CLOCKSOURCE_INTERNAL
;

138 i‡(
	`HAL_TIM_C⁄figClockSour˚
(&
htim21
, &
sClockSour˚C⁄fig
Ë!
HAL_OK
)

140 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

143 
sMa°îC⁄fig
.
Ma°îOuçutTriggî
 = 
TIM_TRGO_RESET
;

144 
sMa°îC⁄fig
.
Ma°îSœveMode
 = 
TIM_MASTERSLAVEMODE_DISABLE
;

145 i‡(
	`HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(&
htim21
, &
sMa°îC⁄fig
Ë!
HAL_OK
)

147 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

150 
	}
}

152 
	$MX_TIM22_Inô
()

154 
TIM_ClockC⁄figTy≥Def
 
sClockSour˚C⁄fig
;

155 
TIM_Ma°îC⁄figTy≥Def
 
sMa°îC⁄fig
;

157 
htim22
.
In°™˚
 = 
TIM22
;

158 
htim22
.
Inô
.
PªsˇÀr
 = 0;

159 
htim22
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

160 
htim22
.
Inô
.
Pîiod
 = 0;

161 
htim22
.
Inô
.
ClockDivisi⁄
 = 
TIM_CLOCKDIVISION_DIV1
;

162 i‡(
	`HAL_TIM_Ba£_Inô
(&
htim22
Ë!
HAL_OK
)

164 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

167 
sClockSour˚C⁄fig
.
ClockSour˚
 = 
TIM_CLOCKSOURCE_INTERNAL
;

168 i‡(
	`HAL_TIM_C⁄figClockSour˚
(&
htim22
, &
sClockSour˚C⁄fig
Ë!
HAL_OK
)

170 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

173 
sMa°îC⁄fig
.
Ma°îOuçutTriggî
 = 
TIM_TRGO_RESET
;

174 
sMa°îC⁄fig
.
Ma°îSœveMode
 = 
TIM_MASTERSLAVEMODE_DISABLE
;

175 i‡(
	`HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(&
htim22
, &
sMa°îC⁄fig
Ë!
HAL_OK
)

177 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

180 
	}
}

182 
	$HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
* 
tim_ba£H™dÀ
)

185 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM2
)

191 
	`__HAL_RCC_TIM2_CLK_ENABLE
();

196 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM6
)

202 
	`__HAL_RCC_TIM6_CLK_ENABLE
();

207 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM21
)

213 
	`__HAL_RCC_TIM21_CLK_ENABLE
();

218 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM22
)

224 
	`__HAL_RCC_TIM22_CLK_ENABLE
();

229 
	}
}

230 
	$HAL_TIM_M•Po°Inô
(
TIM_H™dÀTy≥Def
* 
timH™dÀ
)

233 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

234 if(
timH™dÀ
->
In°™˚
==
TIM2
)

243 
GPIO_InôSåu˘
.
Pö
 = 
Red_Led_Pö
;

244 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

245 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

246 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

247 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF5_TIM2
;

248 
	`HAL_GPIO_Inô
(
Red_Led_GPIO_P‹t
, &
GPIO_InôSåu˘
);

255 
	}
}

257 
	$HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
* 
tim_ba£H™dÀ
)

260 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM2
)

266 
	`__HAL_RCC_TIM2_CLK_DISABLE
();

271 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM6
)

277 
	`__HAL_RCC_TIM6_CLK_DISABLE
();

282 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM21
)

288 
	`__HAL_RCC_TIM21_CLK_DISABLE
();

293 if(
tim_ba£H™dÀ
->
In°™˚
==
TIM22
)

299 
	`__HAL_RCC_TIM22_CLK_DISABLE
();

304 
	}
}

307 
	$TIM2_C⁄fig
(
uöt16_t
 
≥riod
){

308 
htim2
.
In°™˚
 = 
TIM2
;

310 
htim2
.
Inô
.
Pîiod
 = 511;

311 
htim2
.
Inô
.
PªsˇÀr
 = 
≥riod
;

312 
htim2
.
Inô
.
ClockDivisi⁄
 = 0;

313 
htim2
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

315 
	`HAL_TIM_Ba£_Inô
(&
htim2
);

317 
	`HAL_TIM_Ba£_Sèπ
(&
htim2
);

318 
	}
}

320 
	$TIM6_C⁄fig
(
uöt16_t
 
≥riod
){

321 
htim6
.
In°™˚
 = 
TIM6
;

323 
htim6
.
Inô
.
Pîiod
 = 511;

324 
htim6
.
Inô
.
PªsˇÀr
 = 
≥riod
;

325 
htim6
.
Inô
.
ClockDivisi⁄
 = 0;

326 
htim6
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

328 
	`HAL_TIM_Ba£_Inô
(&
htim6
);

330 
	`HAL_TIM_Ba£_Sèπ
(&
htim6
);

332 
	}
}

334 
	$TIM21_C⁄fig
(
uöt16_t
 
≥riod
){

335 
htim21
.
In°™˚
 = 
TIM21
;

337 
htim21
.
Inô
.
Pîiod
 = 511;

338 
htim21
.
Inô
.
PªsˇÀr
 = 
≥riod
;

339 
htim21
.
Inô
.
ClockDivisi⁄
 = 0;

340 
htim21
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

342 
	`HAL_TIM_Ba£_Inô
(&
htim21
);

344 
	`HAL_TIM_Ba£_Sèπ
(&
htim21
);

346 
	}
}

348 
	$TIM22_C⁄fig
(
uöt16_t
 
≥riod
){

349 
htim22
.
In°™˚
 = 
TIM22
;

351 
htim22
.
Inô
.
Pîiod
 = 511;

352 
htim22
.
Inô
.
PªsˇÀr
 = 
≥riod
;

353 
htim22
.
Inô
.
ClockDivisi⁄
 = 0;

354 
htim22
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

356 
	`HAL_TIM_Ba£_Inô
(&
htim22
);

358 
	`HAL_TIM_Ba£_Sèπ
(&
htim22
);

360 
	}
}

	@Src/tim.h

40 #i‚de‡
__tim_H


41 
	#__tim_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

54 
TIM_H™dÀTy≥Def
 
htim2
;

55 
TIM_H™dÀTy≥Def
 
htim6
;

56 
TIM_H™dÀTy≥Def
 
htim21
;

57 
TIM_H™dÀTy≥Def
 
htim22
;

63 
_Eº‹_H™dÀr
(*, );

65 
MX_TIM2_Inô
();

66 
MX_TIM6_Inô
();

67 
MX_TIM21_Inô
();

68 
MX_TIM22_Inô
();

70 
HAL_TIM_M•Po°Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

73 
TIM2_C⁄fig
(
uöt16_t
 
≥riod
);

74 
TIM6_C⁄fig
(
uöt16_t
 
≥riod
);

75 
TIM21_C⁄fig
(
uöt16_t
 
≥riod
);

76 
TIM22_C⁄fig
(
uöt16_t
 
≥riod
);

79 #ifde‡
__˝lu•lus


	@Src/usart.c

41 
	~"ußπ.h
"

43 
	~"gpio.h
"

46 
uöt8_t
 
	gu¨t_buf„r
[
BUFFER_SIZE
];

47 
uöt8_t
 
	gu¨t_curs‹
 = 0;

51 
UART_H™dÀTy≥Def
 
	ghu¨t1
;

52 
UART_H™dÀTy≥Def
 
	ghu¨t2
;

56 
	$MX_USART1_UART_Inô
()

59 
hu¨t1
.
In°™˚
 = 
USART1
;

60 
hu¨t1
.
Inô
.
BaudR©e
 = 115200;

61 
hu¨t1
.
Inô
.
W‹dLígth
 = 
UART_WORDLENGTH_8B
;

62 
hu¨t1
.
Inô
.
St›Bôs
 = 
UART_STOPBITS_1
;

63 
hu¨t1
.
Inô
.
P¨ôy
 = 
UART_PARITY_NONE
;

64 
hu¨t1
.
Inô
.
Mode
 = 
UART_MODE_TX_RX
;

65 
hu¨t1
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_NONE
;

66 
hu¨t1
.
Inô
.
OvîSam∂ög
 = 
UART_OVERSAMPLING_16
;

67 
hu¨t1
.
Inô
.
O√BôSam∂ög
 = 
UART_ONE_BIT_SAMPLE_DISABLE
;

68 
hu¨t1
.
Adv™˚dInô
.
AdvFótuªInô
 = 
UART_ADVFEATURE_NO_INIT
;

69 i‡(
	`HAL_UART_Inô
(&
hu¨t1
Ë!
HAL_OK
)

71 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

74 
	}
}

77 
	$MX_USART2_UART_Inô
()

80 
hu¨t2
.
In°™˚
 = 
USART2
;

81 
hu¨t2
.
Inô
.
BaudR©e
 = 115200;

82 
hu¨t2
.
Inô
.
W‹dLígth
 = 
UART_WORDLENGTH_8B
;

83 
hu¨t2
.
Inô
.
St›Bôs
 = 
UART_STOPBITS_1
;

84 
hu¨t2
.
Inô
.
P¨ôy
 = 
UART_PARITY_NONE
;

85 
hu¨t2
.
Inô
.
Mode
 = 
UART_MODE_TX_RX
;

86 
hu¨t2
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_NONE
;

87 
hu¨t2
.
Inô
.
OvîSam∂ög
 = 
UART_OVERSAMPLING_16
;

88 
hu¨t2
.
Inô
.
O√BôSam∂ög
 = 
UART_ONE_BIT_SAMPLE_DISABLE
;

89 
hu¨t2
.
Adv™˚dInô
.
AdvFótuªInô
 = 
UART_ADVFEATURE_NO_INIT
;

90 i‡(
	`HAL_UART_Inô
(&
hu¨t2
Ë!
HAL_OK
)

92 
	`_Eº‹_H™dÀr
(
__FILE__
, 
__LINE__
);

95 
	}
}

97 
	$HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
* 
u¨tH™dÀ
)

100 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

101 if(
u¨tH™dÀ
->
In°™˚
==
USART1
)

107 
	`__HAL_RCC_USART1_CLK_ENABLE
();

113 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_9
|
GPIO_PIN_10
;

114 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

115 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

116 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_VERY_HIGH
;

117 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF4_USART1
;

118 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

124 if(
u¨tH™dÀ
->
In°™˚
==
USART2
)

130 
	`__HAL_RCC_USART2_CLK_ENABLE
();

136 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_2
|
GPIO_PIN_3
;

137 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

138 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

139 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_VERY_HIGH
;

140 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF4_USART2
;

141 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

147 
	}
}

149 
	$HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
* 
u¨tH™dÀ
)

152 if(
u¨tH™dÀ
->
In°™˚
==
USART1
)

158 
	`__HAL_RCC_USART1_CLK_DISABLE
();

164 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_9
|
GPIO_PIN_10
);

167 
	`HAL_NVIC_DißbÀIRQ
(
USART1_IRQn
);

172 if(
u¨tH™dÀ
->
In°™˚
==
USART2
)

178 
	`__HAL_RCC_USART2_CLK_DISABLE
();

184 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_2
|
GPIO_PIN_3
);

187 
	`HAL_NVIC_DißbÀIRQ
(
USART2_IRQn
);

192 
	}
}

195 
	$ª£t_rx_±r
(){

196 
	`HAL_NVIC_DißbÀIRQ
(
USART1_IRQn
);

197 i‡((
hu¨t1
.
Eº‹Code
 & 
HAL_UART_ERROR_ORE
)){

198 vﬁ©ûê
boﬁ
 
bªakout
 = 
Ál£
;

199 
	`HAL_GPIO_WrôePö
(
Gªí_Led_GPIO_P‹t
, 
Gªí_Led_Pö
, 
GPIO_PIN_SET
);

200 !
bªakout
){}

201 
	`HAL_GPIO_WrôePö
(
Gªí_Led_GPIO_P‹t
, 
Gªí_Led_Pö
, 
GPIO_PIN_RESET
);

203 
	`HAL_UART_Re˚ive_IT
(&
hu¨t1
, (
uöt8_t
 *Ë&
u¨t_buf„r
, 
BUFFER_SIZE
);

204 
	`HAL_NVIC_E«bÀIRQ
(
USART1_IRQn
);

205 
	}
}

207 
	$u¨t_ª˚ive_ch¨
(){

209 
u¨t_curs‹
 += 1;

210 
	`HAL_UART_Re˚ive_IT
(&
hu¨t1
, (
uöt8_t
 *Ë&
u¨t_buf„r
[
u¨t_curs‹
], 1);

215 
	}
}

	@Src/usart.h

40 #i‚de‡
__ußπ_H


41 
	#__ußπ_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32l0xx_hÆ.h
"

48 
	~"maö.h
"

51 
	~"ußπ.h
"

54 
UART_H™dÀTy≥Def
 
hu¨t1
;

55 
UART_H™dÀTy≥Def
 
hu¨t2
;

58 
	#BUFFER_SIZE
 128

	)

61 
_Eº‹_H™dÀr
(*, );

63 
MX_USART1_UART_Inô
();

64 
MX_USART2_UART_Inô
();

67 
uöt8_t
 
u¨t_buf„r
[
BUFFER_SIZE
];

68 
uöt8_t
 
u¨t_curs‹
;

70 
ª£t_rx_±r
();

71 
u¨t_ª˚ive_ch¨
();

74 #ifde‡
__˝lu•lus


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


489 
signgam
;

492 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

493 || 
__HAVE_DISTINCT_FLOAT32
 \

494 || 
__HAVE_DISTINCT_FLOAT64
 \

495 || 
__HAVE_DISTINCT_FLOAT32X
 \

496 || 
__HAVE_DISTINCT_FLOAT64X
 \

497 || 
__HAVE_DISTINCT_FLOAT128X
)

510 #ifde‡
__NO_LONG_DOUBLE_MATH


511 #i‡
__HAVE_DISTINCT_FLOAT128


514 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

515 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

516 #ñi‡
__HAVE_DISTINCT_FLOAT128


517 #i‡
__HAVE_GENERIC_SELECTION


518 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


519 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

521 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

523 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


524 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


525 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

527 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

530 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

532 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

533 
	`_Gíîic
 ((
TG_ARG
), \

534 : 
FUNC
 ## 
f
 
ARGS
, \

535 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

536 : 
FUNC
 
ARGS
, \

537 : 
FUNC
 ## 
l
 
ARGS
, \

538 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

539 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

541 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


544 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

545 
__buûtö_choo£_ex¥
 \

546 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

547 
FUNC
 ## 
f
 
ARGS
, \

548 
__buûtö_choo£_ex¥
 \

549 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

550 
FUNC
 
ARGS
, \

551 
__buûtö_choo£_ex¥
 \

552 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

553 
FUNC
 ## 
l
 
ARGS
, \

554 
FUNC
 ## 
f128
 
ARGS
)))

	)

557 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

558 ( (
TG_ARG
) ==  () \

559 ? 
FUNC
 ## 
f
 
ARGS
 \

560 :  (
TG_ARG
) ==  () \

561 ? 
FUNC
 
ARGS
 \

562 : 
FUNC
 ## 
l
 
ARGS
)

	)

566 #ifde‡
__USE_ISOC99


571 
FP_NAN
 =

572 
	#FP_NAN
 0

	)

573 
FP_NAN
,

574 
FP_INFINITE
 =

575 
	#FP_INFINITE
 1

	)

576 
FP_INFINITE
,

577 
FP_ZERO
 =

578 
	#FP_ZERO
 2

	)

579 
FP_ZERO
,

580 
FP_SUBNORMAL
 =

581 
	#FP_SUBNORMAL
 3

	)

582 
FP_SUBNORMAL
,

583 
FP_NORMAL
 =

584 
	#FP_NORMAL
 4

	)

585 
FP_NORMAL


593 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

594 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

601 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

602 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

604 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

608 #i‡
	`__GNUC_PREREQ
 (6,0)

609 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

610 #ñi‡
deföed
 
__˝lu•lus


618 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

619 #ñi‡
	`__GNUC_PREREQ
 (4,0)

620 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

622 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

626 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


627 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

629 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

633 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


634 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

636 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

641 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


642 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

644 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

648 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

649 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


655 
	#isöf
(
x
) \

656 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

657 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

658 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


659 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

661 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

665 
	#MATH_ERRNO
 1

	)

666 
	#MATH_ERREXCEPT
 2

	)

673 #ifde‡
__FAST_MATH__


674 
	#m©h_îrh™dlög
 0

	)

675 #ñi‡
deföed
 
__NO_MATH_ERRNO__


676 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

678 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

683 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

684 
	~<bôs/isˇn⁄iˇl.h
>

687 #i‚de‡
__˝lu•lus


688 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

697 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

698 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

699 
ölöe
 

700 
	`issig«lög
 (
__vÆ
)

702 #ifde‡
__NO_LONG_DOUBLE_MATH


703  
	`__issig«lög
 (
__vÆ
);

705  
	`__issig«lögl
 (
__vÆ
);

708 #i‡
__HAVE_DISTINCT_FLOAT128


709 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

711 
	}
}

715 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

718 #i‚de‡
__˝lu•lus


719 #ifde‡
__SUPPORT_SNAN__


720 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

722 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

726 #ifde‡
__SUPPORT_SNAN__


727 
ölöe
 

728 
iszîo
 (
__vÆ
)

730  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

732 
ölöe
 

733 
iszîo
 (
__vÆ
)

735  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

737 
ölöe
 

738 
iszîo
 (
__vÆ
)

740 #ifde‡
__NO_LONG_DOUBLE_MATH


741  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

743  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

746 #i‡
__HAVE_DISTINCT_FLOAT128


747 
ölöe
 

748 
iszîo
 (
_Flﬂt128
 
__vÆ
)

750  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

754 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


755 
iszîo
 (
__T
 
__vÆ
)

757  
__vÆ
 == 0;

764 #ifde‡
__USE_XOPEN


766 
	#MAXFLOAT
 3.40282347e+38F

	)

771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


772 
	#M_E
 2.7182818284590452354

	)

773 
	#M_LOG2E
 1.4426950408889634074

	)

774 
	#M_LOG10E
 0.43429448190325182765

	)

775 
	#M_LN2
 0.69314718055994530942

	)

776 
	#M_LN10
 2.30258509299404568402

	)

777 
	#M_PI
 3.14159265358979323846

	)

778 
	#M_PI_2
 1.57079632679489661923

	)

779 
	#M_PI_4
 0.78539816339744830962

	)

780 
	#M_1_PI
 0.31830988618379067154

	)

781 
	#M_2_PI
 0.63661977236758134308

	)

782 
	#M_2_SQRTPI
 1.12837916709551257390

	)

783 
	#M_SQRT2
 1.41421356237309504880

	)

784 
	#M_SQRT1_2
 0.70710678118654752440

	)

790 #ifde‡
__USE_GNU


791 
	#M_El
 2.718281828459045235360287471352662498L

	)

792 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

793 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

794 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

795 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

796 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

797 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

798 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

799 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

800 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

801 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

802 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

803 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

806 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


807 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

808 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

809 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

810 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

811 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

812 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

813 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

814 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

815 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

816 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

817 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

818 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

819 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

822 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


823 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

824 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

825 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

826 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

827 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

828 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

829 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

830 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

831 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

832 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

833 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

834 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

835 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

838 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


839 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

840 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

841 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

842 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

843 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

844 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

845 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

846 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

847 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

848 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

849 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

850 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

851 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

854 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


855 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

856 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

857 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

858 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

859 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

860 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

861 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

862 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

863 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

864 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

865 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

866 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

867 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

870 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


871 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

872 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

873 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

874 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

875 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

876 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

877 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

878 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

879 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

880 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

881 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

882 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

883 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

886 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


887 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

888 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

889 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

890 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

891 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

892 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

893 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

894 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

895 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

896 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

897 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

898 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

899 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

902 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


909 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


910 
	#__NO_MATH_INLINES
 1

	)

913 #ifde‡
__USE_ISOC99


914 #i‡
__GNUC_PREREQ
 (3, 1)

921 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

922 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

923 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

924 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

925 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

926 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

928 
	#isgª©î
(
x
, 
y
) \

929 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

930 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

931 
	#isgª©îequÆ
(
x
, 
y
) \

932 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

933 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

934 
	#i¶ess
(
x
, 
y
) \

935 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

936 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

937 
	#i¶es£quÆ
(
x
, 
y
) \

938 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

939 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

940 
	#i¶essgª©î
(
x
, 
y
) \

941 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

942 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

944 
	#isun‹dîed
(
x
, 
y
) \

945 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

946 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

951 #ifde‡
__USE_EXTERN_INLINES


952 
	~<bôs/m©hölöe.h
>

957 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

960 
	#_MdoubÀ_
 

	)

961 
	#__MATH_DECLARING_DOUBLE
 1

	)

962 
	#__MATH_DECLARING_FLOATN
 0

	)

963 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

964 
fun˘i⁄
 ## 
ªíå™t


	)

965 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

966 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

967 
	~<bôs/m©h-föôe.h
>

968 #unde‡
_MdoubÀ_


969 #unde‡
__MATH_DECLARING_DOUBLE


970 #unde‡
__MATH_DECLARING_FLOATN


971 #unde‡
__REDIRFROM_X


972 #unde‡
__REDIRTO_X


976 #ifde‡
__USE_ISOC99


979 
	#_MdoubÀ_
 

	)

980 
	#__MATH_DECLARING_DOUBLE
 0

	)

981 
	#__MATH_DECLARING_FLOATN
 0

	)

982 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

983 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

984 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

985 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

986 
	~<bôs/m©h-föôe.h
>

987 #unde‡
_MdoubÀ_


988 #unde‡
__MATH_DECLARING_DOUBLE


989 #unde‡
__MATH_DECLARING_FLOATN


990 #unde‡
__REDIRFROM_X


991 #unde‡
__REDIRTO_X


994 #ifde‡
__MATH_DECLARE_LDOUBLE


995 
	#_MdoubÀ_
 

	)

996 
	#__MATH_DECLARING_DOUBLE
 0

	)

997 
	#__MATH_DECLARING_FLOATN
 0

	)

998 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

999 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1000 #ifde‡
__NO_LONG_DOUBLE_MATH


1001 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1002 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1004 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1005 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1007 
	~<bôs/m©h-föôe.h
>

1008 #unde‡
_MdoubÀ_


1009 #unde‡
__MATH_DECLARING_DOUBLE


1010 #unde‡
__MATH_DECLARING_FLOATN


1011 #unde‡
__REDIRFROM_X


1012 #unde‡
__REDIRTO_X


1019 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1020 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1021 
	#_MdoubÀ_
 
_Flﬂt16


	)

1022 
	#__MATH_DECLARING_DOUBLE
 0

	)

1023 
	#__MATH_DECLARING_FLOATN
 1

	)

1024 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1025 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1026 #i‡
__HAVE_DISTINCT_FLOAT16


1027 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1028 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1032 
	~<bôs/m©h-föôe.h
>

1033 #unde‡
_MdoubÀ_


1034 #unde‡
__MATH_DECLARING_DOUBLE


1035 #unde‡
__MATH_DECLARING_FLOATN


1036 #unde‡
__REDIRFROM_X


1037 #unde‡
__REDIRTO_X


1040 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1041 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1042 
	#_MdoubÀ_
 
_Flﬂt32


	)

1043 
	#__MATH_DECLARING_DOUBLE
 0

	)

1044 
	#__MATH_DECLARING_FLOATN
 1

	)

1045 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1046 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1047 #i‡
__HAVE_DISTINCT_FLOAT32


1048 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1049 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1051 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1052 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1054 
	~<bôs/m©h-föôe.h
>

1055 #unde‡
_MdoubÀ_


1056 #unde‡
__MATH_DECLARING_DOUBLE


1057 #unde‡
__MATH_DECLARING_FLOATN


1058 #unde‡
__REDIRFROM_X


1059 #unde‡
__REDIRTO_X


1062 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1063 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1064 
	#_MdoubÀ_
 
_Flﬂt64


	)

1065 
	#__MATH_DECLARING_DOUBLE
 0

	)

1066 
	#__MATH_DECLARING_FLOATN
 1

	)

1067 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1068 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1069 #i‡
__HAVE_DISTINCT_FLOAT64


1070 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1071 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1073 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1074 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1076 
	~<bôs/m©h-föôe.h
>

1077 #unde‡
_MdoubÀ_


1078 #unde‡
__MATH_DECLARING_DOUBLE


1079 #unde‡
__MATH_DECLARING_FLOATN


1080 #unde‡
__REDIRFROM_X


1081 #unde‡
__REDIRTO_X


1084 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1085 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1086 
	#_MdoubÀ_
 
_Flﬂt128


	)

1087 
	#__MATH_DECLARING_DOUBLE
 0

	)

1088 
	#__MATH_DECLARING_FLOATN
 1

	)

1089 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1090 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1091 #i‡
__HAVE_DISTINCT_FLOAT128


1092 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1093 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1095 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1096 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1098 
	~<bôs/m©h-föôe.h
>

1099 #unde‡
_MdoubÀ_


1100 #unde‡
__MATH_DECLARING_DOUBLE


1101 #unde‡
__MATH_DECLARING_FLOATN


1102 #unde‡
__REDIRFROM_X


1103 #unde‡
__REDIRTO_X


1106 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1107 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1108 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1109 
	#__MATH_DECLARING_DOUBLE
 0

	)

1110 
	#__MATH_DECLARING_FLOATN
 1

	)

1111 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1112 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1113 #i‡
__HAVE_DISTINCT_FLOAT32X


1114 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1115 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1117 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1118 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1120 
	~<bôs/m©h-föôe.h
>

1121 #unde‡
_MdoubÀ_


1122 #unde‡
__MATH_DECLARING_DOUBLE


1123 #unde‡
__MATH_DECLARING_FLOATN


1124 #unde‡
__REDIRFROM_X


1125 #unde‡
__REDIRTO_X


1128 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1129 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1130 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1131 
	#__MATH_DECLARING_DOUBLE
 0

	)

1132 
	#__MATH_DECLARING_FLOATN
 1

	)

1133 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1134 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1135 #i‡
__HAVE_DISTINCT_FLOAT64X


1136 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1137 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1138 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1139 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1140 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1142 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1143 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1145 
	~<bôs/m©h-föôe.h
>

1146 #unde‡
_MdoubÀ_


1147 #unde‡
__MATH_DECLARING_DOUBLE


1148 #unde‡
__MATH_DECLARING_FLOATN


1149 #unde‡
__REDIRFROM_X


1150 #unde‡
__REDIRTO_X


1153 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1154 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1155 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1156 
	#__MATH_DECLARING_DOUBLE
 0

	)

1157 
	#__MATH_DECLARING_FLOATN
 1

	)

1158 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1159 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1160 #i‡
__HAVE_DISTINCT_FLOAT128X


1161 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1162 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1166 
	~<bôs/m©h-föôe.h
>

1167 #unde‡
_MdoubÀ_


1168 #unde‡
__MATH_DECLARING_DOUBLE


1169 #unde‡
__MATH_DECLARING_FLOATN


1170 #unde‡
__REDIRFROM_X


1171 #unde‡
__REDIRTO_X


1176 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1179 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1180 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1181 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1182 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1183 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1184 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1186 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1191 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1192 
	#i£qsig
(
x
, 
y
) \

1193 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1206 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1208 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1210 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1212  
	`__i£qsigf
 (
__x
, 
__y
);

1216 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1218 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1220  
	`__i£qsig
 (
__x
, 
__y
);

1224 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1226 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1228 #i‚de‡
__NO_LONG_DOUBLE_MATH


1229  
	`__i£qsigl
 (
__x
, 
__y
);

1231  
	`__i£qsig
 (
__x
, 
__y
);

1236 #i‡
__HAVE_DISTINCT_FLOAT128


1237 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1239 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1241  
	`__i£qsigf128
 (
__x
, 
__y
);

1246 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1247 
ölöe
 

1248 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1250 #i‡
__˝lu•lus
 >= 201103L

1251 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1253 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1255  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1258 
	}
}

1263 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
418
25274
Drivers/CMSIS/DSP_Lib/Examples/arm_class_marks_example/ARM/arm_class_marks_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_class_marks_example/GCC/arm_class_marks_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/arm_convolution_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/ARM/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/arm_convolution_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_convolution_example/GCC/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_dotproduct_example/ARM/arm_dotproduct_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_dotproduct_example/GCC/arm_dotproduct_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_data.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/ARM/arm_fft_bin_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_data.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fft_bin_example/GCC/arm_fft_bin_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_data.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/arm_fir_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_fir_example/ARM/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_data.c
Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/arm_graphic_equalizer_example_q31.c
Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_graphic_equalizer_example/ARM/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_data.c
Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/arm_linear_interp_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_linear_interp_example/ARM/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/arm_matrix_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_matrix_example/ARM/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_data.c
Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/arm_signal_converge_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.c
Drivers/CMSIS/DSP_Lib/Examples/arm_signal_converge_example/ARM/math_helper.h
Drivers/CMSIS/DSP_Lib/Examples/arm_sin_cos_example/ARM/arm_sin_cos_example_f32.c
Drivers/CMSIS/DSP_Lib/Examples/arm_variance_example/ARM/arm_variance_example_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_abs_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_add_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_dot_prod_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_mult_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_negate_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_offset_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_scale_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_shift_q7.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_f32.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q15.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q31.c
Drivers/CMSIS/DSP_Lib/Source/BasicMathFunctions/arm_sub_q7.c
Drivers/CMSIS/DSP_Lib/Source/CommonTables/arm_common_tables.c
Drivers/CMSIS/DSP_Lib/Source/CommonTables/arm_const_structs.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_f32.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q15.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_conj_q31.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q15.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_dot_prod_q31.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_f32.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q15.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_q31.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q15.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q15.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_cmplx_q31.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_f32.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q15.c
Drivers/CMSIS/DSP_Lib/Source/ComplexMathFunctions/arm_cmplx_mult_real_q31.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_f32.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q15.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_pid_reset_q31.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_f32.c
Drivers/CMSIS/DSP_Lib/Source/ControllerFunctions/arm_sin_cos_q31.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_f32.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q15.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_cos_q31.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_f32.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q15.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sin_q31.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FastMathFunctions/arm_sqrt_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_32x64_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df1_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_f64.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_df2T_init_f64.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_biquad_cascade_stereo_df2T_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_opt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_opt_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_opt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_opt_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_partial_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_conv_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_opt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_opt_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_correlate_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_decimate_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_init_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_interpolate_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_lattice_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_init_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_fir_sparse_q7.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_iir_lattice_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_norm_q31.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q15.c
Drivers/CMSIS/DSP_Lib/Source/FilteringFunctions/arm_lms_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_add_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_cmplx_mult_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_inverse_f64.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_fast_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_mult_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_scale_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_sub_q31.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_f32.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q15.c
Drivers/CMSIS/DSP_Lib/Source/MatrixFunctions/arm_mat_trans_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_max_q7.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_mean_q7.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_min_q7.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_power_q7.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_rms_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_std_q31.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_f32.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q15.c
Drivers/CMSIS/DSP_Lib/Source/StatisticsFunctions/arm_var_q31.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_f32.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q15.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q31.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_copy_q7.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_f32.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q15.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q31.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_fill_q7.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q15.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q31.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_float_to_q7.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_float.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q31.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q15_to_q7.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_float.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q15.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q31_to_q7.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_float.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q15.c
Drivers/CMSIS/DSP_Lib/Source/SupportFunctions/arm_q7_to_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_bitreversal.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix2_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix4_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_cfft_radix8_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_dct4_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_fast_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_f32.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_init_q31.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q15.c
Drivers/CMSIS/DSP_Lib/Source/TransformFunctions/arm_rfft_q31.c
Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l053xx.h
Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h
Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h
Drivers/CMSIS/Include/arm_common_tables.h
Drivers/CMSIS/Include/arm_const_structs.h
Drivers/CMSIS/Include/arm_math.h
Drivers/CMSIS/Include/cmsis_armcc.h
Drivers/CMSIS/Include/cmsis_armcc_V6.h
Drivers/CMSIS/Include/cmsis_gcc.h
Drivers/CMSIS/Include/core_cm0.h
Drivers/CMSIS/Include/core_cm0plus.h
Drivers/CMSIS/Include/core_cm3.h
Drivers/CMSIS/Include/core_cm4.h
Drivers/CMSIS/Include/core_cm7.h
Drivers/CMSIS/Include/core_cmFunc.h
Drivers/CMSIS/Include/core_cmInstr.h
Drivers/CMSIS/Include/core_cmSimd.h
Drivers/CMSIS/Include/core_sc000.h
Drivers/CMSIS/Include/core_sc300.h
Drivers/CMSIS/RTOS/Template/cmsis_os.h
Drivers/STM32L0xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dac.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dac_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_flash.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_flash_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_flash_ramfunc.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2s.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_pwr.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_pwr_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim_ex.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h
Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart_ex.h
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_adc_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dac.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dac_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dma.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_flash.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_flash_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_flash_ramfunc.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_gpio.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_i2c.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_i2c_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_i2s.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_pwr.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_pwr_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_rcc.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_rcc_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_tim.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_tim_ex.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart.c
Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c
Inc/adc.h
Inc/dac.h
Inc/defines.h
Inc/gpio.h
Inc/i2c.h
Inc/i2s.h
Inc/main.h
Inc/midi.h
Inc/stm32l0xx_hal_conf.h
Inc/stm32l0xx_it.h
Inc/tim.h
Inc/usart.h
Src/adc.c
Src/adc.h
Src/dac.c
Src/dac.h
Src/defines.h
Src/gpio.c
Src/gpio.h
Src/i2c.c
Src/i2c.h
Src/i2s.c
Src/i2s.h
Src/main.c
Src/main.h
Src/midi.c
Src/midi.h
Src/stm32l0xx_hal_conf.h
Src/stm32l0xx_hal_msp.c
Src/stm32l0xx_it.c
Src/stm32l0xx_it.h
Src/synth.c
Src/synth.h
Src/system_stm32l0xx.c
Src/tim.c
Src/tim.h
Src/usart.c
Src/usart.h
/usr/include/math.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/features.h
/usr/include/stdc-predef.h
